
** Conflict (reduce/reduce) in state 16535.
** Tokens involved: WOR WIRE WHILE WAND WAIT_ORDER WAIT VIRTUAL UNIQUE UNION TYPEDEF TRIREG TRIOR TRIAND TRI1 TRI0 TRI TOKEN_PLUS_PLUS TOKEN_DASH_DASH TIME TASK SYSTEM_TASK_IDENTIFIER SVINT SUPPLY1 SUPPLY0 STRUCT STRING STATIC SIMPLE_IDENTIFIER SHORTREAL SHORTINT SEQUENCE SEMICOLON RETURN REPEAT RELEASE REG REALTIME REAL P_POUNDPOUND P_MINUSGT PROPERTY PROGRAM PRIORITY PRIMITIVE MODULE MACROMODULE LONGINT LOGIC LOCALPARAM LCURLY INTERFACE INTEGER IMPORT IF HASH GENVAR FUNCTION FORK FOREVER FORCE FOR EXTERN EXPORT EVENT ENUM DO DISABLE DEFAULT DEASSIGN DASH_GT_GT COVER CONTINUE CONSTRAINT CONST CLOCKING CLASS CHANDLE CASEZ CASEX CASE BYTE BREAK BIT BIND BEGIN BACKSLASH AUTOMATIC AT_STAR AT ASSIGN ASSERT #
** The following explanations concentrate on token WOR.
** This state is reached from start after reading:

source_text_3 assert_property_statement

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description // lookahead token appears because description can begin with WOR
source_text_3 description // lookahead token is inherited
              (?)

** In state 16535, looking ahead at WOR, reducing production
** concurrent_assertion_item -> assert_property_statement
** is permitted because of the following sub-derivation:

module_root_item // lookahead token is inherited
module_common_item // lookahead token is inherited
concurrent_assertion_item // lookahead token is inherited
assert_property_statement . 

** In state 16535, looking ahead at WOR, reducing production
** procedural_assertion_item -> assert_property_statement
** is permitted because of the following sub-derivation:

statement_or_null // lookahead token is inherited
statement_item // lookahead token is inherited
procedural_assertion_item // lookahead token is inherited
assert_property_statement . 

** Conflict (reduce/reduce) in state 16534.
** Tokens involved: WOR WIRE WHILE WAND WAIT_ORDER WAIT VIRTUAL UNIQUE UNION TYPEDEF TRIREG TRIOR TRIAND TRI1 TRI0 TRI TOKEN_PLUS_PLUS TOKEN_DASH_DASH TIME TASK SYSTEM_TASK_IDENTIFIER SVINT SUPPLY1 SUPPLY0 STRUCT STRING STATIC SIMPLE_IDENTIFIER SHORTREAL SHORTINT SEQUENCE SEMICOLON RETURN REPEAT RELEASE REG REALTIME REAL P_POUNDPOUND P_MINUSGT PROPERTY PROGRAM PRIORITY PRIMITIVE MODULE MACROMODULE LONGINT LOGIC LOCALPARAM LCURLY INTERFACE INTEGER IMPORT IF HASH GENVAR FUNCTION FORK FOREVER FORCE FOR EXTERN EXPORT EVENT ENUM DO DISABLE DEFAULT DEASSIGN DASH_GT_GT COVER CONTINUE CONSTRAINT CONST CLOCKING CLASS CHANDLE CASEZ CASEX CASE BYTE BREAK BIT BIND BEGIN BACKSLASH AUTOMATIC AT_STAR AT ASSIGN ASSERT #
** The following explanations concentrate on token WOR.
** This state is reached from start after reading:

source_text_3 cover_property_statement

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description // lookahead token appears because description can begin with WOR
source_text_3 description // lookahead token is inherited
              (?)

** In state 16534, looking ahead at WOR, reducing production
** concurrent_assertion_item -> cover_property_statement
** is permitted because of the following sub-derivation:

module_root_item // lookahead token is inherited
module_common_item // lookahead token is inherited
concurrent_assertion_item // lookahead token is inherited
cover_property_statement . 

** In state 16534, looking ahead at WOR, reducing production
** procedural_assertion_item -> cover_property_statement
** is permitted because of the following sub-derivation:

statement_or_null // lookahead token is inherited
statement_item // lookahead token is inherited
procedural_assertion_item // lookahead token is inherited
cover_property_statement . 

** Conflict (reduce/reduce) in state 16530.
** Tokens involved: SEMICOLON COMMA
** The following explanations concentrate on token SEMICOLON.
** This state is reached from start after reading:

source_text_3 identifier identifier name_of_instance_3 LPAREN list_of_port_connections RPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              (?)

** In state 16530, looking ahead at SEMICOLON, reducing production
** interface_instantiation_5 ->
** is permitted because of the following sub-derivation:

module_common_item 
identifier identifier name_of_instance_3 LPAREN list_of_port_connections RPAREN interface_instantiation_5 SEMICOLON // lookahead token appears
                                                                                . 

** In state 16530, looking ahead at SEMICOLON, reducing production
** module_instantiation_5 ->
** is permitted because of the following sub-derivation:

identifier identifier name_of_instance_3 LPAREN list_of_port_connections RPAREN module_instantiation_5 SEMICOLON // lookahead token appears
                                                                                . 

** Conflict (reduce/reduce) in state 16526.
** Tokens involved: SEMICOLON COMMA
** The following explanations concentrate on token SEMICOLON.
** This state is reached from start after reading:

source_text_3 identifier identifier name_of_instance_3 LPAREN RPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              (?)

** In state 16526, looking ahead at SEMICOLON, reducing production
** interface_instantiation_5 ->
** is permitted because of the following sub-derivation:

module_common_item 
identifier identifier name_of_instance_3 LPAREN RPAREN interface_instantiation_5 SEMICOLON // lookahead token appears
                                                       . 

** In state 16526, looking ahead at SEMICOLON, reducing production
** module_instantiation_5 ->
** is permitted because of the following sub-derivation:

identifier identifier name_of_instance_3 LPAREN RPAREN module_instantiation_5 SEMICOLON // lookahead token appears
                                                       . 

** Conflict (shift/reduce) in state 16525.
** Tokens involved: SIMPLE_IDENTIFIER RPAREN DOT BACKSLASH
** The following explanations concentrate on token DOT.
** This state is reached from start after reading:

source_text_3 identifier identifier name_of_instance_3 LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              identifier identifier name_of_instance_3 LPAREN list_of_port_connections RPAREN module_instantiation_5 SEMICOLON 
                                                              (?)

** In state 16525, looking ahead at DOT, shifting is permitted
** because of the following sub-derivation:

dot_named_port_connection list_of_port_connections_6 
. DOT identifier 

** In state 16525, looking ahead at DOT, reducing production
** list_of_port_connections_8 ->
** is permitted because of the following sub-derivation:

list_of_port_connections_8 P_DOTSTAR list_of_port_connections_10 
list_of_port_connections_8 DOT identifier LPAREN RPAREN COMMA // lookahead token appears
. 

** Conflict (reduce/reduce) in state 16523.
** Tokens involved: LPAREN LBRACK
** The following explanations concentrate on token LPAREN.
** This state is reached from start after reading:

source_text_3 identifier identifier

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              (?)

** In state 16523, looking ahead at LPAREN, reducing production
** name_of_instance_3 ->
** is permitted because of the following sub-derivation:

identifier identifier name_of_instance_3 LPAREN RPAREN module_instantiation_5 SEMICOLON // lookahead token appears
                      . 

** In state 16523, looking ahead at LPAREN, reducing production
** program_instance_3 ->
** is permitted because of the following sub-derivation:

module_common_item 
identifier identifier program_instance_3 LPAREN RPAREN program_instantiation_5 SEMICOLON // lookahead token appears
                      . 

** Conflict (reduce/reduce) in state 16522.
** Tokens involved: WOR WIRE WHILE WAND WAIT_ORDER WAIT VIRTUAL UNIQUE UNION TYPEDEF TRIREG TRIOR TRIAND TRI1 TRI0 TRI TOKEN_PLUS_PLUS TOKEN_DASH_DASH TIME TASK SYSTEM_TASK_IDENTIFIER SVINT SUPPLY1 SUPPLY0 STRUCT STRING STATIC SIMPLE_IDENTIFIER SHORTREAL SHORTINT SEQUENCE SEMICOLON RETURN REPEAT RELEASE REG REALTIME REAL P_POUNDPOUND P_MINUSGT PROPERTY PROGRAM PRIORITY PRIMITIVE MODULE MACROMODULE LONGINT LOGIC LOCALPARAM LCURLY INTERFACE INTEGER IMPORT IF HASH GENVAR FUNCTION FORK FOREVER FORCE FOR EXTERN EXPORT EVENT ENUM DO DISABLE DEFAULT DEASSIGN DASH_GT_GT COVER CONTINUE CONSTRAINT CONST CLOCKING CLASS CHANDLE CASEZ CASEX CASE BYTE BREAK BIT BIND BEGIN BACKSLASH AUTOMATIC AT_STAR AT ASSIGN ASSERT #
** The following explanations concentrate on token WOR.
** This state is reached from start after reading:

source_text_3 identifier COLON assert_property_statement

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description // lookahead token appears because description can begin with WOR
source_text_3 description // lookahead token is inherited
              (?)

** In state 16522, looking ahead at WOR, reducing production
** concurrent_assertion_item -> identifier COLON assert_property_statement
** is permitted because of the following sub-derivation:

module_root_item // lookahead token is inherited
module_common_item // lookahead token is inherited
concurrent_assertion_item // lookahead token is inherited
identifier COLON assert_property_statement . 

** In state 16522, looking ahead at WOR, reducing production
** procedural_assertion_item -> assert_property_statement
** is permitted because of the following sub-derivation:

statement_or_null // lookahead token is inherited
identifier COLON statement_item // lookahead token is inherited
                 procedural_assertion_item // lookahead token is inherited
                 assert_property_statement . 

** Conflict (reduce/reduce) in state 16521.
** Tokens involved: WOR WIRE WHILE WAND WAIT_ORDER WAIT VIRTUAL UNIQUE UNION TYPEDEF TRIREG TRIOR TRIAND TRI1 TRI0 TRI TOKEN_PLUS_PLUS TOKEN_DASH_DASH TIME TASK SYSTEM_TASK_IDENTIFIER SVINT SUPPLY1 SUPPLY0 STRUCT STRING STATIC SIMPLE_IDENTIFIER SHORTREAL SHORTINT SEQUENCE SEMICOLON RETURN REPEAT RELEASE REG REALTIME REAL P_POUNDPOUND P_MINUSGT PROPERTY PROGRAM PRIORITY PRIMITIVE MODULE MACROMODULE LONGINT LOGIC LOCALPARAM LCURLY INTERFACE INTEGER IMPORT IF HASH GENVAR FUNCTION FORK FOREVER FORCE FOR EXTERN EXPORT EVENT ENUM DO DISABLE DEFAULT DEASSIGN DASH_GT_GT COVER CONTINUE CONSTRAINT CONST CLOCKING CLASS CHANDLE CASEZ CASEX CASE BYTE BREAK BIT BIND BEGIN BACKSLASH AUTOMATIC AT_STAR AT ASSIGN ASSERT #
** The following explanations concentrate on token WOR.
** This state is reached from start after reading:

source_text_3 identifier COLON cover_property_statement

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description // lookahead token appears because description can begin with WOR
source_text_3 description // lookahead token is inherited
              (?)

** In state 16521, looking ahead at WOR, reducing production
** concurrent_assertion_item -> identifier COLON cover_property_statement
** is permitted because of the following sub-derivation:

module_root_item // lookahead token is inherited
module_common_item // lookahead token is inherited
concurrent_assertion_item // lookahead token is inherited
identifier COLON cover_property_statement . 

** In state 16521, looking ahead at WOR, reducing production
** procedural_assertion_item -> cover_property_statement
** is permitted because of the following sub-derivation:

statement_or_null // lookahead token is inherited
identifier COLON statement_item // lookahead token is inherited
                 procedural_assertion_item // lookahead token is inherited
                 cover_property_statement . 

** Conflict (reduce/reduce) in state 16517.
** Tokens involved: SEMICOLON COMMA
** The following explanations concentrate on token SEMICOLON.
** This state is reached from start after reading:

source_text_3 identifier HASH LPAREN list_of_parameter_assignments RPAREN identifier name_of_instance_3 LPAREN list_of_port_connections RPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              (?)

** In state 16517, looking ahead at SEMICOLON, reducing production
** interface_instantiation_5 ->
** is permitted because of the following sub-derivation:

module_common_item 
identifier HASH LPAREN list_of_parameter_assignments RPAREN identifier name_of_instance_3 LPAREN list_of_port_connections RPAREN interface_instantiation_5 SEMICOLON // lookahead token appears
                                                                                                                                 . 

** In state 16517, looking ahead at SEMICOLON, reducing production
** module_instantiation_5 ->
** is permitted because of the following sub-derivation:

identifier HASH LPAREN list_of_parameter_assignments RPAREN identifier name_of_instance_3 LPAREN list_of_port_connections RPAREN module_instantiation_5 SEMICOLON // lookahead token appears
                                                                                                                                 . 

** Conflict (reduce/reduce) in state 16513.
** Tokens involved: SEMICOLON COMMA
** The following explanations concentrate on token SEMICOLON.
** This state is reached from start after reading:

source_text_3 identifier HASH LPAREN list_of_parameter_assignments RPAREN identifier name_of_instance_3 LPAREN RPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              (?)

** In state 16513, looking ahead at SEMICOLON, reducing production
** interface_instantiation_5 ->
** is permitted because of the following sub-derivation:

module_common_item 
identifier HASH LPAREN list_of_parameter_assignments RPAREN identifier name_of_instance_3 LPAREN RPAREN interface_instantiation_5 SEMICOLON // lookahead token appears
                                                                                                        . 

** In state 16513, looking ahead at SEMICOLON, reducing production
** module_instantiation_5 ->
** is permitted because of the following sub-derivation:

identifier HASH LPAREN list_of_parameter_assignments RPAREN identifier name_of_instance_3 LPAREN RPAREN module_instantiation_5 SEMICOLON // lookahead token appears
                                                                                                        . 

** Conflict (shift/reduce) in state 16512.
** Tokens involved: SIMPLE_IDENTIFIER RPAREN DOT BACKSLASH
** The following explanations concentrate on token DOT.
** This state is reached from start after reading:

source_text_3 identifier HASH LPAREN list_of_parameter_assignments RPAREN identifier name_of_instance_3 LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              identifier HASH LPAREN list_of_parameter_assignments RPAREN identifier name_of_instance_3 LPAREN list_of_port_connections RPAREN module_instantiation_5 SEMICOLON 
                                                                                                               (?)

** In state 16512, looking ahead at DOT, shifting is permitted
** because of the following sub-derivation:

dot_named_port_connection list_of_port_connections_6 
. DOT identifier 

** In state 16512, looking ahead at DOT, reducing production
** list_of_port_connections_8 ->
** is permitted because of the following sub-derivation:

list_of_port_connections_8 P_DOTSTAR list_of_port_connections_10 
list_of_port_connections_8 DOT identifier LPAREN RPAREN COMMA // lookahead token appears
. 

** Conflict (reduce/reduce) in state 16510.
** Tokens involved: LPAREN LBRACK
** The following explanations concentrate on token LPAREN.
** This state is reached from start after reading:

source_text_3 identifier HASH LPAREN list_of_parameter_assignments RPAREN identifier

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              (?)

** In state 16510, looking ahead at LPAREN, reducing production
** name_of_instance_3 ->
** is permitted because of the following sub-derivation:

identifier HASH LPAREN list_of_parameter_assignments RPAREN identifier name_of_instance_3 LPAREN RPAREN module_instantiation_5 SEMICOLON // lookahead token appears
                                                                       . 

** In state 16510, looking ahead at LPAREN, reducing production
** program_instance_3 ->
** is permitted because of the following sub-derivation:

module_common_item 
identifier HASH LPAREN list_of_parameter_assignments RPAREN identifier program_instance_3 LPAREN RPAREN program_instantiation_5 SEMICOLON // lookahead token appears
                                                                       . 

** Conflict (shift/reduce/reduce) in state 16507.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 identifier HASH LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              identifier HASH LPAREN list_of_parameter_assignments RPAREN identifier name_of_instance_3 LPAREN RPAREN module_instantiation_5 SEMICOLON 
                                     ordered_parameter_assignment list_of_parameter_assignments_3 
                                     expression 
                                     primary 
                                     (?)

** In state 16507, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 16507, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 16507, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce) in state 16505.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 identifier

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              (?)

** In state 16505, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

identifier identifier name_of_instance_3 LPAREN RPAREN module_instantiation_5 SEMICOLON 
           . SIMPLE_IDENTIFIER 

** In state 16505, looking ahead at SIMPLE_IDENTIFIER, reducing production
** type_declaration_identifier_3 ->
** is permitted because of the following sub-derivation:

module_common_item 
module_or_generate_item_declaration 
data_declaration 
data_type list_of_variable_identifiers_or_assignments SEMICOLON // lookahead token appears because list_of_variable_identifiers_or_assignments can begin with SIMPLE_IDENTIFIER
identifier type_declaration_identifier_3 data_type_11 // lookahead token is inherited because data_type_11 can vanish
           . 

** Conflict (shift/reduce) in state 16465.
** Token involved: RPAREN
** This state is reached from start after reading:

source_text_3 module_keyword identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              (?)

** In state 16465, looking ahead at RPAREN, shifting is permitted
** because of the following sub-derivation:

module_keyword identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN list_of_port_declarations SEMICOLON module_declaration_10 ENDMODULE 
                                                                                         LPAREN . RPAREN 

** In state 16465, looking ahead at RPAREN, reducing production
** port ->
** is permitted because of the following sub-derivation:

module_keyword identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN LPAREN port list_of_ports_4 RPAREN SEMICOLON module_declaration_4 ENDMODULE // lookahead token appears because list_of_ports_4 can vanish
                                                                                                . 

** Conflict (shift/reduce) in state 16424.
** Token involved: RPAREN
** This state is reached from start after reading:

source_text_3 module_keyword identifier LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              (?)

** In state 16424, looking ahead at RPAREN, shifting is permitted
** because of the following sub-derivation:

module_keyword identifier list_of_port_declarations SEMICOLON module_declaration_10 ENDMODULE 
                          LPAREN . RPAREN 

** In state 16424, looking ahead at RPAREN, reducing production
** port ->
** is permitted because of the following sub-derivation:

module_keyword identifier LPAREN port list_of_ports_4 RPAREN SEMICOLON module_declaration_4 ENDMODULE // lookahead token appears because list_of_ports_4 can vanish
                                 . 

** Conflict (shift/reduce) in state 16377.
** Token involved: RPAREN
** This state is reached from start after reading:

source_text_3 module_keyword lifetime identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              (?)

** In state 16377, looking ahead at RPAREN, shifting is permitted
** because of the following sub-derivation:

module_keyword lifetime identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN list_of_port_declarations SEMICOLON module_declaration_10 ENDMODULE 
                                                                                                  LPAREN . RPAREN 

** In state 16377, looking ahead at RPAREN, reducing production
** port ->
** is permitted because of the following sub-derivation:

module_keyword lifetime identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN LPAREN port list_of_ports_4 RPAREN SEMICOLON module_declaration_4 ENDMODULE // lookahead token appears because list_of_ports_4 can vanish
                                                                                                         . 

** Conflict (reduce/reduce) in state 16343.
** Tokens involved: LPAREN LBRACK
** The following explanations concentrate on token LPAREN.
** This state is reached from start after reading:

source_text_3 module_keyword identifier LPAREN P_DOTSTAR RPAREN SEMICOLON module_declaration_23 identifier identifier

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier LPAREN P_DOTSTAR RPAREN SEMICOLON module_declaration_23 ENDMODULE 
                                                                          module_declaration_23 module_item 
                                                                                                non_port_module_item 
                                                                                                module_or_generate_item 
                                                                                                (?)

** In state 16343, looking ahead at LPAREN, reducing production
** name_of_instance_3 ->
** is permitted because of the following sub-derivation:

identifier identifier name_of_instance_3 LPAREN RPAREN module_instantiation_5 SEMICOLON // lookahead token appears
                      . 

** In state 16343, looking ahead at LPAREN, reducing production
** program_instance_3 ->
** is permitted because of the following sub-derivation:

module_common_item 
identifier identifier program_instance_3 LPAREN RPAREN program_instantiation_5 SEMICOLON // lookahead token appears
                      . 

** Conflict (shift/reduce) in state 16342.
** Tokens involved: SIMPLE_IDENTIFIER LPAREN LBRACK BACKSLASH
** The following explanations concentrate on token LPAREN.
** This state is reached from start after reading:

source_text_3 module_keyword identifier LPAREN P_DOTSTAR RPAREN SEMICOLON module_declaration_23 identifier

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier LPAREN P_DOTSTAR RPAREN SEMICOLON module_declaration_23 ENDMODULE 
                                                                          module_declaration_23 module_item 
                                                                                                non_port_module_item 
                                                                                                module_or_generate_item 
                                                                                                (?)

** In state 16342, looking ahead at LPAREN, shifting is permitted
** because of the following sub-derivation:

identifier drive_strength udp_instance_3 LPAREN net_lvalue COMMA expression udp_instance_8 RPAREN udp_instantiation_6 SEMICOLON 
           . LPAREN strength0 COMMA strength1 RPAREN 

** In state 16342, looking ahead at LPAREN, reducing production
** udp_instance_3 ->
** is permitted because of the following sub-derivation:

identifier udp_instance_3 LPAREN net_lvalue COMMA expression udp_instance_8 RPAREN udp_instantiation_6 SEMICOLON // lookahead token appears
           . 

** Conflict (shift/reduce) in state 16329.
** Token involved: RPAREN
** This state is reached from start after reading:

source_text_3 module_keyword lifetime identifier LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              (?)

** In state 16329, looking ahead at RPAREN, shifting is permitted
** because of the following sub-derivation:

module_keyword lifetime identifier list_of_port_declarations SEMICOLON module_declaration_10 ENDMODULE 
                                   LPAREN . RPAREN 

** In state 16329, looking ahead at RPAREN, reducing production
** port ->
** is permitted because of the following sub-derivation:

module_keyword lifetime identifier LPAREN port list_of_ports_4 RPAREN SEMICOLON module_declaration_4 ENDMODULE // lookahead token appears because list_of_ports_4 can vanish
                                          . 

** Conflict (shift/reduce) in state 16324.
** Tokens involved: SIMPLE_IDENTIFIER LPAREN LBRACK BACKSLASH
** The following explanations concentrate on token LPAREN.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 identifier

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        (?)

** In state 16324, looking ahead at LPAREN, shifting is permitted
** because of the following sub-derivation:

identifier drive_strength udp_instance_3 LPAREN net_lvalue COMMA expression udp_instance_8 RPAREN udp_instantiation_6 SEMICOLON 
           . LPAREN strength0 COMMA strength1 RPAREN 

** In state 16324, looking ahead at LPAREN, reducing production
** udp_instance_3 ->
** is permitted because of the following sub-derivation:

identifier udp_instance_3 LPAREN net_lvalue COMMA expression udp_instance_8 RPAREN udp_instantiation_6 SEMICOLON // lookahead token appears
           . 

** Conflict (shift/reduce/reduce) in state 16314.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 CLASS identifier EXTENDS identifier SEMICOLON class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        CLASS identifier EXTENDS identifier SEMICOLON class_declaration_11 ENDCLASS 
                                                                                                                      class_declaration_11 class_item 
                                                                                                                                           (?)

** In state 16314, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 16314, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 16314, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 16314, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 16310.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 CLASS identifier EXTENDS identifier SEMICOLON timeunits_declaration class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        CLASS identifier EXTENDS identifier SEMICOLON timeunits_declaration class_declaration_11 ENDCLASS 
                                                                                                                                            class_declaration_11 class_item 
                                                                                                                                                                 (?)

** In state 16310, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 16310, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 16310, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 16310, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 16302.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 CLASS identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN EXTENDS identifier SEMICOLON class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        CLASS identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN EXTENDS identifier SEMICOLON class_declaration_11 ENDCLASS 
                                                                                                                                                                                     class_declaration_11 class_item 
                                                                                                                                                                                                          (?)

** In state 16302, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 16302, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 16302, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 16302, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 16298.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 CLASS identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN EXTENDS identifier SEMICOLON timeunits_declaration class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        CLASS identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN EXTENDS identifier SEMICOLON timeunits_declaration class_declaration_11 ENDCLASS 
                                                                                                                                                                                                           class_declaration_11 class_item 
                                                                                                                                                                                                                                (?)

** In state 16298, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 16298, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 16298, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 16298, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 16290.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 CLASS identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN SEMICOLON class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        CLASS identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN SEMICOLON class_declaration_11 ENDCLASS 
                                                                                                                                                                  class_declaration_11 class_item 
                                                                                                                                                                                       (?)

** In state 16290, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 16290, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 16290, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 16290, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 16286.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 CLASS identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN SEMICOLON timeunits_declaration class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        CLASS identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN SEMICOLON timeunits_declaration class_declaration_11 ENDCLASS 
                                                                                                                                                                                        class_declaration_11 class_item 
                                                                                                                                                                                                             (?)

** In state 16286, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 16286, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 16286, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 16286, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 16275.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 CLASS identifier SEMICOLON class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        CLASS identifier SEMICOLON class_declaration_11 ENDCLASS 
                                                                                                   class_declaration_11 class_item 
                                                                                                                        (?)

** In state 16275, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 16275, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 16275, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 16275, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 16271.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 CLASS identifier SEMICOLON timeunits_declaration class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        CLASS identifier SEMICOLON timeunits_declaration class_declaration_11 ENDCLASS 
                                                                                                                         class_declaration_11 class_item 
                                                                                                                                              (?)

** In state 16271, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 16271, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 16271, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 16271, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 16264.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 CLASS lifetime identifier EXTENDS identifier SEMICOLON class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        CLASS lifetime identifier EXTENDS identifier SEMICOLON class_declaration_11 ENDCLASS 
                                                                                                                               class_declaration_11 class_item 
                                                                                                                                                    (?)

** In state 16264, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 16264, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 16264, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 16264, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 16260.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 CLASS lifetime identifier EXTENDS identifier SEMICOLON timeunits_declaration class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        CLASS lifetime identifier EXTENDS identifier SEMICOLON timeunits_declaration class_declaration_11 ENDCLASS 
                                                                                                                                                     class_declaration_11 class_item 
                                                                                                                                                                          (?)

** In state 16260, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 16260, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 16260, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 16260, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 16252.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 CLASS lifetime identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN EXTENDS identifier SEMICOLON class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        CLASS lifetime identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN EXTENDS identifier SEMICOLON class_declaration_11 ENDCLASS 
                                                                                                                                                                                              class_declaration_11 class_item 
                                                                                                                                                                                                                   (?)

** In state 16252, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 16252, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 16252, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 16252, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 16248.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 CLASS lifetime identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN EXTENDS identifier SEMICOLON timeunits_declaration class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        CLASS lifetime identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN EXTENDS identifier SEMICOLON timeunits_declaration class_declaration_11 ENDCLASS 
                                                                                                                                                                                                                    class_declaration_11 class_item 
                                                                                                                                                                                                                                         (?)

** In state 16248, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 16248, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 16248, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 16248, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 16240.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 CLASS lifetime identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN SEMICOLON class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        CLASS lifetime identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN SEMICOLON class_declaration_11 ENDCLASS 
                                                                                                                                                                           class_declaration_11 class_item 
                                                                                                                                                                                                (?)

** In state 16240, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 16240, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 16240, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 16240, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 16236.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 CLASS lifetime identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN SEMICOLON timeunits_declaration class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        CLASS lifetime identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN SEMICOLON timeunits_declaration class_declaration_11 ENDCLASS 
                                                                                                                                                                                                 class_declaration_11 class_item 
                                                                                                                                                                                                                      (?)

** In state 16236, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 16236, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 16236, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 16236, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 16225.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 CLASS lifetime identifier SEMICOLON class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        CLASS lifetime identifier SEMICOLON class_declaration_11 ENDCLASS 
                                                                                                            class_declaration_11 class_item 
                                                                                                                                 (?)

** In state 16225, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 16225, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 16225, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 16225, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 16221.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 CLASS lifetime identifier SEMICOLON timeunits_declaration class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        CLASS lifetime identifier SEMICOLON timeunits_declaration class_declaration_11 ENDCLASS 
                                                                                                                                  class_declaration_11 class_item 
                                                                                                                                                       (?)

** In state 16221, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 16221, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 16221, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 16221, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce) in state 16207.
** Token involved: ELSE
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 GENERATE generated_module_instantiation_3 IF LPAREN constant_expression RPAREN IF LPAREN constant_expression RPAREN generate_module_item

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        GENERATE generated_module_instantiation_3 ENDGENERATE 
                                                                                 generated_module_instantiation_3 generate_module_item 
                                                                                                                  (?)

** In state 16207, looking ahead at ELSE, reducing production
** generate_module_item -> IF LPAREN constant_expression RPAREN generate_module_item
** is permitted because of the following sub-derivation:

IF LPAREN constant_expression RPAREN generate_module_item ELSE generate_module_item // lookahead token appears
                                     IF LPAREN constant_expression RPAREN generate_module_item . 

** In state 16207, looking ahead at ELSE, shifting is permitted
** because of the following sub-derivation:

IF LPAREN constant_expression RPAREN generate_module_item 
                                     IF LPAREN constant_expression RPAREN generate_module_item . ELSE generate_module_item 

** Conflict (shift/reduce/reduce) in state 16161.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 identifier delay2 udp_instance_3 LPAREN net_lvalue COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        identifier delay2 udp_instance_3 LPAREN net_lvalue COMMA expression udp_instance_8 RPAREN udp_instantiation_6 SEMICOLON 
                                                                                                                                 primary 
                                                                                                                                 (?)

** In state 16161, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 16161, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 16161, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 16152.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 identifier delay2 NAME_OF_UDP_INSTANCE udp_instance_3 LPAREN net_lvalue COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        identifier delay2 NAME_OF_UDP_INSTANCE udp_instance_3 LPAREN net_lvalue COMMA expression udp_instance_8 RPAREN udp_instantiation_6 SEMICOLON 
                                                                                                                                                      primary 
                                                                                                                                                      (?)

** In state 16152, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 16152, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 16152, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 16141.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 identifier drive_strength delay2 udp_instance_3 LPAREN net_lvalue COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        identifier drive_strength delay2 udp_instance_3 LPAREN net_lvalue COMMA expression udp_instance_8 RPAREN udp_instantiation_6 SEMICOLON 
                                                                                                                                                primary 
                                                                                                                                                (?)

** In state 16141, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 16141, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 16141, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 16132.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 identifier drive_strength delay2 NAME_OF_UDP_INSTANCE udp_instance_3 LPAREN net_lvalue COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        identifier drive_strength delay2 NAME_OF_UDP_INSTANCE udp_instance_3 LPAREN net_lvalue COMMA expression udp_instance_8 RPAREN udp_instantiation_6 SEMICOLON 
                                                                                                                                                                     primary 
                                                                                                                                                                     (?)

** In state 16132, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 16132, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 16132, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 16121.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 identifier drive_strength udp_instance_3 LPAREN net_lvalue COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        identifier drive_strength udp_instance_3 LPAREN net_lvalue COMMA expression udp_instance_8 RPAREN udp_instantiation_6 SEMICOLON 
                                                                                                                                         primary 
                                                                                                                                         (?)

** In state 16121, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 16121, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 16121, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 16112.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 identifier drive_strength NAME_OF_UDP_INSTANCE udp_instance_3 LPAREN net_lvalue COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        identifier drive_strength NAME_OF_UDP_INSTANCE udp_instance_3 LPAREN net_lvalue COMMA expression udp_instance_8 RPAREN udp_instantiation_6 SEMICOLON 
                                                                                                                                                              primary 
                                                                                                                                                              (?)

** In state 16112, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 16112, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 16112, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (reduce/reduce) in state 16104.
** Tokens involved: SEMICOLON COMMA
** The following explanations concentrate on token SEMICOLON.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 identifier identifier name_of_instance_3 LPAREN list_of_port_connections RPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        (?)

** In state 16104, looking ahead at SEMICOLON, reducing production
** interface_instantiation_5 ->
** is permitted because of the following sub-derivation:

module_common_item 
identifier identifier name_of_instance_3 LPAREN list_of_port_connections RPAREN interface_instantiation_5 SEMICOLON // lookahead token appears
                                                                                . 

** In state 16104, looking ahead at SEMICOLON, reducing production
** module_instantiation_5 ->
** is permitted because of the following sub-derivation:

identifier identifier name_of_instance_3 LPAREN list_of_port_connections RPAREN module_instantiation_5 SEMICOLON // lookahead token appears
                                                                                . 

** Conflict (reduce/reduce) in state 16100.
** Tokens involved: SEMICOLON COMMA
** The following explanations concentrate on token SEMICOLON.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 identifier identifier name_of_instance_3 LPAREN RPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        (?)

** In state 16100, looking ahead at SEMICOLON, reducing production
** interface_instantiation_5 ->
** is permitted because of the following sub-derivation:

module_common_item 
identifier identifier name_of_instance_3 LPAREN RPAREN interface_instantiation_5 SEMICOLON // lookahead token appears
                                                       . 

** In state 16100, looking ahead at SEMICOLON, reducing production
** module_instantiation_5 ->
** is permitted because of the following sub-derivation:

identifier identifier name_of_instance_3 LPAREN RPAREN module_instantiation_5 SEMICOLON // lookahead token appears
                                                       . 

** Conflict (shift/reduce) in state 16099.
** Tokens involved: SIMPLE_IDENTIFIER RPAREN DOT BACKSLASH
** The following explanations concentrate on token DOT.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 identifier identifier name_of_instance_3 LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        identifier identifier name_of_instance_3 LPAREN list_of_port_connections RPAREN module_instantiation_5 SEMICOLON 
                                                                                                                        (?)

** In state 16099, looking ahead at DOT, shifting is permitted
** because of the following sub-derivation:

dot_named_port_connection list_of_port_connections_6 
. DOT identifier 

** In state 16099, looking ahead at DOT, reducing production
** list_of_port_connections_8 ->
** is permitted because of the following sub-derivation:

list_of_port_connections_8 P_DOTSTAR list_of_port_connections_10 
list_of_port_connections_8 DOT identifier LPAREN RPAREN COMMA // lookahead token appears
. 

** Conflict (reduce/reduce) in state 16097.
** Tokens involved: LPAREN LBRACK
** The following explanations concentrate on token LPAREN.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 identifier identifier

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        (?)

** In state 16097, looking ahead at LPAREN, reducing production
** name_of_instance_3 ->
** is permitted because of the following sub-derivation:

identifier identifier name_of_instance_3 LPAREN RPAREN module_instantiation_5 SEMICOLON // lookahead token appears
                      . 

** In state 16097, looking ahead at LPAREN, reducing production
** program_instance_3 ->
** is permitted because of the following sub-derivation:

module_common_item 
identifier identifier program_instance_3 LPAREN RPAREN program_instantiation_5 SEMICOLON // lookahead token appears
                      . 

** Conflict (shift/reduce/reduce) in state 16091.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 identifier udp_instance_3 LPAREN net_lvalue COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        identifier udp_instance_3 LPAREN net_lvalue COMMA expression udp_instance_8 RPAREN udp_instantiation_6 SEMICOLON 
                                                                                                                          primary 
                                                                                                                          (?)

** In state 16091, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 16091, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 16091, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 16079.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 cmos_switchtype delay3 identifier name_of_gate_instance_3 LPAREN net_lvalue COMMA expression COMMA expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        gate_instantiation 
                                                                        cmos_switchtype delay3 identifier name_of_gate_instance_3 LPAREN net_lvalue COMMA expression COMMA expression COMMA expression RPAREN gate_instantiation_5 SEMICOLON 
                                                                                                                                                                                            primary 
                                                                                                                                                                                            (?)

** In state 16079, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 16079, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 16079, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 16077.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 cmos_switchtype delay3 identifier name_of_gate_instance_3 LPAREN net_lvalue COMMA expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        gate_instantiation 
                                                                        cmos_switchtype delay3 identifier name_of_gate_instance_3 LPAREN net_lvalue COMMA expression COMMA expression COMMA expression RPAREN gate_instantiation_5 SEMICOLON 
                                                                                                                                                                           primary 
                                                                                                                                                                           (?)

** In state 16077, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 16077, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 16077, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 16075.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 cmos_switchtype delay3 identifier name_of_gate_instance_3 LPAREN net_lvalue COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        gate_instantiation 
                                                                        cmos_switchtype delay3 identifier name_of_gate_instance_3 LPAREN net_lvalue COMMA expression COMMA expression COMMA expression RPAREN gate_instantiation_5 SEMICOLON 
                                                                                                                                                          primary 
                                                                                                                                                          (?)

** In state 16075, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 16075, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 16075, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 16066.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 cmos_switchtype delay3 LPAREN net_lvalue COMMA expression COMMA expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        gate_instantiation 
                                                                        cmos_switchtype delay3 LPAREN net_lvalue COMMA expression COMMA expression COMMA expression RPAREN gate_instantiation_5 SEMICOLON 
                                                                                                                                                         primary 
                                                                                                                                                         (?)

** In state 16066, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 16066, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 16066, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 16064.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 cmos_switchtype delay3 LPAREN net_lvalue COMMA expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        gate_instantiation 
                                                                        cmos_switchtype delay3 LPAREN net_lvalue COMMA expression COMMA expression COMMA expression RPAREN gate_instantiation_5 SEMICOLON 
                                                                                                                                        primary 
                                                                                                                                        (?)

** In state 16064, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 16064, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 16064, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 16062.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 cmos_switchtype delay3 LPAREN net_lvalue COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        gate_instantiation 
                                                                        cmos_switchtype delay3 LPAREN net_lvalue COMMA expression COMMA expression COMMA expression RPAREN gate_instantiation_5 SEMICOLON 
                                                                                                                       primary 
                                                                                                                       (?)

** In state 16062, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 16062, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 16062, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 16054.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 cmos_switchtype identifier name_of_gate_instance_3 LPAREN net_lvalue COMMA expression COMMA expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        gate_instantiation 
                                                                        cmos_switchtype identifier name_of_gate_instance_3 LPAREN net_lvalue COMMA expression COMMA expression COMMA expression RPAREN gate_instantiation_5 SEMICOLON 
                                                                                                                                                                                     primary 
                                                                                                                                                                                     (?)

** In state 16054, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 16054, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 16054, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 16052.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 cmos_switchtype identifier name_of_gate_instance_3 LPAREN net_lvalue COMMA expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        gate_instantiation 
                                                                        cmos_switchtype identifier name_of_gate_instance_3 LPAREN net_lvalue COMMA expression COMMA expression COMMA expression RPAREN gate_instantiation_5 SEMICOLON 
                                                                                                                                                                    primary 
                                                                                                                                                                    (?)

** In state 16052, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 16052, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 16052, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 16050.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 cmos_switchtype identifier name_of_gate_instance_3 LPAREN net_lvalue COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        gate_instantiation 
                                                                        cmos_switchtype identifier name_of_gate_instance_3 LPAREN net_lvalue COMMA expression COMMA expression COMMA expression RPAREN gate_instantiation_5 SEMICOLON 
                                                                                                                                                   primary 
                                                                                                                                                   (?)

** In state 16050, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 16050, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 16050, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 16043.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 cmos_switchtype LPAREN net_lvalue COMMA expression COMMA expression COMMA expression RPAREN gate_instantiation_5 COMMA identifier name_of_gate_instance_3 LPAREN net_lvalue COMMA expression COMMA expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        gate_instantiation 
                                                                        cmos_switchtype LPAREN net_lvalue COMMA expression COMMA expression COMMA expression RPAREN gate_instantiation_5 SEMICOLON 
                                                                                                                                                                    gate_instantiation_5 COMMA identifier name_of_gate_instance_3 LPAREN net_lvalue COMMA expression COMMA expression COMMA expression RPAREN 
                                                                                                                                                                                                                                                                                            primary 
                                                                                                                                                                                                                                                                                            (?)

** In state 16043, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 16043, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 16043, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 16041.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 cmos_switchtype LPAREN net_lvalue COMMA expression COMMA expression COMMA expression RPAREN gate_instantiation_5 COMMA identifier name_of_gate_instance_3 LPAREN net_lvalue COMMA expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        gate_instantiation 
                                                                        cmos_switchtype LPAREN net_lvalue COMMA expression COMMA expression COMMA expression RPAREN gate_instantiation_5 SEMICOLON 
                                                                                                                                                                    gate_instantiation_5 COMMA identifier name_of_gate_instance_3 LPAREN net_lvalue COMMA expression COMMA expression COMMA expression RPAREN 
                                                                                                                                                                                                                                                                           primary 
                                                                                                                                                                                                                                                                           (?)

** In state 16041, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 16041, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 16041, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 16039.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 cmos_switchtype LPAREN net_lvalue COMMA expression COMMA expression COMMA expression RPAREN gate_instantiation_5 COMMA identifier name_of_gate_instance_3 LPAREN net_lvalue COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        gate_instantiation 
                                                                        cmos_switchtype LPAREN net_lvalue COMMA expression COMMA expression COMMA expression RPAREN gate_instantiation_5 SEMICOLON 
                                                                                                                                                                    gate_instantiation_5 COMMA identifier name_of_gate_instance_3 LPAREN net_lvalue COMMA expression COMMA expression COMMA expression RPAREN 
                                                                                                                                                                                                                                                          primary 
                                                                                                                                                                                                                                                          (?)

** In state 16039, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 16039, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 16039, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 16032.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 cmos_switchtype LPAREN net_lvalue COMMA expression COMMA expression COMMA expression RPAREN gate_instantiation_5 COMMA LPAREN net_lvalue COMMA expression COMMA expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        gate_instantiation 
                                                                        cmos_switchtype LPAREN net_lvalue COMMA expression COMMA expression COMMA expression RPAREN gate_instantiation_5 SEMICOLON 
                                                                                                                                                                    gate_instantiation_5 COMMA LPAREN net_lvalue COMMA expression COMMA expression COMMA expression RPAREN 
                                                                                                                                                                                                                                                         primary 
                                                                                                                                                                                                                                                         (?)

** In state 16032, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 16032, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 16032, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 16030.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 cmos_switchtype LPAREN net_lvalue COMMA expression COMMA expression COMMA expression RPAREN gate_instantiation_5 COMMA LPAREN net_lvalue COMMA expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        gate_instantiation 
                                                                        cmos_switchtype LPAREN net_lvalue COMMA expression COMMA expression COMMA expression RPAREN gate_instantiation_5 SEMICOLON 
                                                                                                                                                                    gate_instantiation_5 COMMA LPAREN net_lvalue COMMA expression COMMA expression COMMA expression RPAREN 
                                                                                                                                                                                                                                        primary 
                                                                                                                                                                                                                                        (?)

** In state 16030, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 16030, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 16030, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 16028.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 cmos_switchtype LPAREN net_lvalue COMMA expression COMMA expression COMMA expression RPAREN gate_instantiation_5 COMMA LPAREN net_lvalue COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        gate_instantiation 
                                                                        cmos_switchtype LPAREN net_lvalue COMMA expression COMMA expression COMMA expression RPAREN gate_instantiation_5 SEMICOLON 
                                                                                                                                                                    gate_instantiation_5 COMMA LPAREN net_lvalue COMMA expression COMMA expression COMMA expression RPAREN 
                                                                                                                                                                                                                       primary 
                                                                                                                                                                                                                       (?)

** In state 16028, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 16028, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 16028, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 16020.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 cmos_switchtype LPAREN net_lvalue COMMA expression COMMA expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        gate_instantiation 
                                                                        cmos_switchtype LPAREN net_lvalue COMMA expression COMMA expression COMMA expression RPAREN gate_instantiation_5 SEMICOLON 
                                                                                                                                                  primary 
                                                                                                                                                  (?)

** In state 16020, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 16020, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 16020, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 16018.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 cmos_switchtype LPAREN net_lvalue COMMA expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        gate_instantiation 
                                                                        cmos_switchtype LPAREN net_lvalue COMMA expression COMMA expression COMMA expression RPAREN gate_instantiation_5 SEMICOLON 
                                                                                                                                 primary 
                                                                                                                                 (?)

** In state 16018, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 16018, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 16018, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 16016.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 cmos_switchtype LPAREN net_lvalue COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        gate_instantiation 
                                                                        cmos_switchtype LPAREN net_lvalue COMMA expression COMMA expression COMMA expression RPAREN gate_instantiation_5 SEMICOLON 
                                                                                                                primary 
                                                                                                                (?)

** In state 16016, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 16016, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 16016, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 16007.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 enable_gatetype delay3 identifier name_of_gate_instance_3 LPAREN net_lvalue COMMA expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        gate_instantiation 
                                                                        enable_gatetype delay3 identifier name_of_gate_instance_3 LPAREN net_lvalue COMMA expression COMMA expression RPAREN gate_instantiation_12 SEMICOLON 
                                                                                                                                                                           primary 
                                                                                                                                                                           (?)

** In state 16007, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 16007, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 16007, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 16005.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 enable_gatetype delay3 identifier name_of_gate_instance_3 LPAREN net_lvalue COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        gate_instantiation 
                                                                        enable_gatetype delay3 identifier name_of_gate_instance_3 LPAREN net_lvalue COMMA expression COMMA expression RPAREN gate_instantiation_12 SEMICOLON 
                                                                                                                                                          primary 
                                                                                                                                                          (?)

** In state 16005, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 16005, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 16005, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15996.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 enable_gatetype delay3 LPAREN net_lvalue COMMA expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        gate_instantiation 
                                                                        enable_gatetype delay3 LPAREN net_lvalue COMMA expression COMMA expression RPAREN gate_instantiation_12 SEMICOLON 
                                                                                                                                        primary 
                                                                                                                                        (?)

** In state 15996, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15996, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15996, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15994.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 enable_gatetype delay3 LPAREN net_lvalue COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        gate_instantiation 
                                                                        enable_gatetype delay3 LPAREN net_lvalue COMMA expression COMMA expression RPAREN gate_instantiation_12 SEMICOLON 
                                                                                                                       primary 
                                                                                                                       (?)

** In state 15994, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15994, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15994, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15986.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 enable_gatetype drive_strength delay3 identifier name_of_gate_instance_3 LPAREN net_lvalue COMMA expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        gate_instantiation 
                                                                        enable_gatetype drive_strength delay3 identifier name_of_gate_instance_3 LPAREN net_lvalue COMMA expression COMMA expression RPAREN gate_instantiation_12 SEMICOLON 
                                                                                                                                                                                          primary 
                                                                                                                                                                                          (?)

** In state 15986, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15986, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15986, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15984.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 enable_gatetype drive_strength delay3 identifier name_of_gate_instance_3 LPAREN net_lvalue COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        gate_instantiation 
                                                                        enable_gatetype drive_strength delay3 identifier name_of_gate_instance_3 LPAREN net_lvalue COMMA expression COMMA expression RPAREN gate_instantiation_12 SEMICOLON 
                                                                                                                                                                         primary 
                                                                                                                                                                         (?)

** In state 15984, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15984, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15984, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15975.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 enable_gatetype drive_strength delay3 LPAREN net_lvalue COMMA expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        gate_instantiation 
                                                                        enable_gatetype drive_strength delay3 LPAREN net_lvalue COMMA expression COMMA expression RPAREN gate_instantiation_12 SEMICOLON 
                                                                                                                                                       primary 
                                                                                                                                                       (?)

** In state 15975, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15975, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15975, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15973.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 enable_gatetype drive_strength delay3 LPAREN net_lvalue COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        gate_instantiation 
                                                                        enable_gatetype drive_strength delay3 LPAREN net_lvalue COMMA expression COMMA expression RPAREN gate_instantiation_12 SEMICOLON 
                                                                                                                                      primary 
                                                                                                                                      (?)

** In state 15973, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15973, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15973, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15965.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 enable_gatetype drive_strength identifier name_of_gate_instance_3 LPAREN net_lvalue COMMA expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        gate_instantiation 
                                                                        enable_gatetype drive_strength identifier name_of_gate_instance_3 LPAREN net_lvalue COMMA expression COMMA expression RPAREN gate_instantiation_12 SEMICOLON 
                                                                                                                                                                                   primary 
                                                                                                                                                                                   (?)

** In state 15965, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15965, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15965, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15963.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 enable_gatetype drive_strength identifier name_of_gate_instance_3 LPAREN net_lvalue COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        gate_instantiation 
                                                                        enable_gatetype drive_strength identifier name_of_gate_instance_3 LPAREN net_lvalue COMMA expression COMMA expression RPAREN gate_instantiation_12 SEMICOLON 
                                                                                                                                                                  primary 
                                                                                                                                                                  (?)

** In state 15963, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15963, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15963, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15954.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 enable_gatetype drive_strength LPAREN net_lvalue COMMA expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        gate_instantiation 
                                                                        enable_gatetype drive_strength LPAREN net_lvalue COMMA expression COMMA expression RPAREN gate_instantiation_12 SEMICOLON 
                                                                                                                                                primary 
                                                                                                                                                (?)

** In state 15954, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15954, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15954, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15952.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 enable_gatetype drive_strength LPAREN net_lvalue COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        gate_instantiation 
                                                                        enable_gatetype drive_strength LPAREN net_lvalue COMMA expression COMMA expression RPAREN gate_instantiation_12 SEMICOLON 
                                                                                                                               primary 
                                                                                                                               (?)

** In state 15952, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15952, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15952, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15944.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 enable_gatetype identifier name_of_gate_instance_3 LPAREN net_lvalue COMMA expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        gate_instantiation 
                                                                        enable_gatetype identifier name_of_gate_instance_3 LPAREN net_lvalue COMMA expression COMMA expression RPAREN gate_instantiation_12 SEMICOLON 
                                                                                                                                                                    primary 
                                                                                                                                                                    (?)

** In state 15944, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15944, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15944, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15942.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 enable_gatetype identifier name_of_gate_instance_3 LPAREN net_lvalue COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        gate_instantiation 
                                                                        enable_gatetype identifier name_of_gate_instance_3 LPAREN net_lvalue COMMA expression COMMA expression RPAREN gate_instantiation_12 SEMICOLON 
                                                                                                                                                   primary 
                                                                                                                                                   (?)

** In state 15942, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15942, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15942, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15935.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 enable_gatetype LPAREN net_lvalue COMMA expression COMMA expression RPAREN gate_instantiation_12 COMMA identifier name_of_gate_instance_3 LPAREN net_lvalue COMMA expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        gate_instantiation 
                                                                        enable_gatetype LPAREN net_lvalue COMMA expression COMMA expression RPAREN gate_instantiation_12 SEMICOLON 
                                                                                                                                                   gate_instantiation_12 COMMA identifier name_of_gate_instance_3 LPAREN net_lvalue COMMA expression COMMA expression RPAREN 
                                                                                                                                                                                                                                                           primary 
                                                                                                                                                                                                                                                           (?)

** In state 15935, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15935, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15935, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15933.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 enable_gatetype LPAREN net_lvalue COMMA expression COMMA expression RPAREN gate_instantiation_12 COMMA identifier name_of_gate_instance_3 LPAREN net_lvalue COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        gate_instantiation 
                                                                        enable_gatetype LPAREN net_lvalue COMMA expression COMMA expression RPAREN gate_instantiation_12 SEMICOLON 
                                                                                                                                                   gate_instantiation_12 COMMA identifier name_of_gate_instance_3 LPAREN net_lvalue COMMA expression COMMA expression RPAREN 
                                                                                                                                                                                                                                          primary 
                                                                                                                                                                                                                                          (?)

** In state 15933, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15933, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15933, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15926.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 enable_gatetype LPAREN net_lvalue COMMA expression COMMA expression RPAREN gate_instantiation_12 COMMA LPAREN net_lvalue COMMA expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        gate_instantiation 
                                                                        enable_gatetype LPAREN net_lvalue COMMA expression COMMA expression RPAREN gate_instantiation_12 SEMICOLON 
                                                                                                                                                   gate_instantiation_12 COMMA LPAREN net_lvalue COMMA expression COMMA expression RPAREN 
                                                                                                                                                                                                                        primary 
                                                                                                                                                                                                                        (?)

** In state 15926, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15926, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15926, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15924.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 enable_gatetype LPAREN net_lvalue COMMA expression COMMA expression RPAREN gate_instantiation_12 COMMA LPAREN net_lvalue COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        gate_instantiation 
                                                                        enable_gatetype LPAREN net_lvalue COMMA expression COMMA expression RPAREN gate_instantiation_12 SEMICOLON 
                                                                                                                                                   gate_instantiation_12 COMMA LPAREN net_lvalue COMMA expression COMMA expression RPAREN 
                                                                                                                                                                                                       primary 
                                                                                                                                                                                                       (?)

** In state 15924, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15924, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15924, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15916.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 enable_gatetype LPAREN net_lvalue COMMA expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        gate_instantiation 
                                                                        enable_gatetype LPAREN net_lvalue COMMA expression COMMA expression RPAREN gate_instantiation_12 SEMICOLON 
                                                                                                                                 primary 
                                                                                                                                 (?)

** In state 15916, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15916, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15916, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15914.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 enable_gatetype LPAREN net_lvalue COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        gate_instantiation 
                                                                        enable_gatetype LPAREN net_lvalue COMMA expression COMMA expression RPAREN gate_instantiation_12 SEMICOLON 
                                                                                                                primary 
                                                                                                                (?)

** In state 15914, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15914, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15914, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (reduce/reduce) in state 15900.
** Tokens involved: RPAREN COMMA
** The following explanations concentrate on token RPAREN.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 identifier HASH LPAREN expression

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        (?)

** In state 15900, looking ahead at RPAREN, reducing production
** mintypmax_expression -> expression
** is permitted because of the following sub-derivation:

identifier delay2 udp_instance_3 LPAREN net_lvalue COMMA expression udp_instance_8 RPAREN udp_instantiation_6 SEMICOLON 
           HASH LPAREN mintypmax_expression RPAREN // lookahead token appears
                       expression . 

** In state 15900, looking ahead at RPAREN, reducing production
** ordered_parameter_assignment -> expression
** is permitted because of the following sub-derivation:

identifier HASH LPAREN list_of_parameter_assignments RPAREN identifier name_of_instance_3 LPAREN RPAREN module_instantiation_5 SEMICOLON // lookahead token appears
                       ordered_parameter_assignment list_of_parameter_assignments_3 // lookahead token is inherited because list_of_parameter_assignments_3 can vanish
                       expression . 

** Conflict (reduce/reduce) in state 15897.
** Tokens involved: SEMICOLON COMMA
** The following explanations concentrate on token SEMICOLON.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 identifier HASH LPAREN list_of_parameter_assignments RPAREN identifier name_of_instance_3 LPAREN list_of_port_connections RPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        (?)

** In state 15897, looking ahead at SEMICOLON, reducing production
** interface_instantiation_5 ->
** is permitted because of the following sub-derivation:

module_common_item 
identifier HASH LPAREN list_of_parameter_assignments RPAREN identifier name_of_instance_3 LPAREN list_of_port_connections RPAREN interface_instantiation_5 SEMICOLON // lookahead token appears
                                                                                                                                 . 

** In state 15897, looking ahead at SEMICOLON, reducing production
** module_instantiation_5 ->
** is permitted because of the following sub-derivation:

identifier HASH LPAREN list_of_parameter_assignments RPAREN identifier name_of_instance_3 LPAREN list_of_port_connections RPAREN module_instantiation_5 SEMICOLON // lookahead token appears
                                                                                                                                 . 

** Conflict (reduce/reduce) in state 15893.
** Tokens involved: SEMICOLON COMMA
** The following explanations concentrate on token SEMICOLON.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 identifier HASH LPAREN list_of_parameter_assignments RPAREN identifier name_of_instance_3 LPAREN RPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        (?)

** In state 15893, looking ahead at SEMICOLON, reducing production
** interface_instantiation_5 ->
** is permitted because of the following sub-derivation:

module_common_item 
identifier HASH LPAREN list_of_parameter_assignments RPAREN identifier name_of_instance_3 LPAREN RPAREN interface_instantiation_5 SEMICOLON // lookahead token appears
                                                                                                        . 

** In state 15893, looking ahead at SEMICOLON, reducing production
** module_instantiation_5 ->
** is permitted because of the following sub-derivation:

identifier HASH LPAREN list_of_parameter_assignments RPAREN identifier name_of_instance_3 LPAREN RPAREN module_instantiation_5 SEMICOLON // lookahead token appears
                                                                                                        . 

** Conflict (shift/reduce) in state 15892.
** Tokens involved: SIMPLE_IDENTIFIER RPAREN DOT BACKSLASH
** The following explanations concentrate on token DOT.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 identifier HASH LPAREN list_of_parameter_assignments RPAREN identifier name_of_instance_3 LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        identifier HASH LPAREN list_of_parameter_assignments RPAREN identifier name_of_instance_3 LPAREN list_of_port_connections RPAREN module_instantiation_5 SEMICOLON 
                                                                                                                                                                         (?)

** In state 15892, looking ahead at DOT, shifting is permitted
** because of the following sub-derivation:

dot_named_port_connection list_of_port_connections_6 
. DOT identifier 

** In state 15892, looking ahead at DOT, reducing production
** list_of_port_connections_8 ->
** is permitted because of the following sub-derivation:

list_of_port_connections_8 P_DOTSTAR list_of_port_connections_10 
list_of_port_connections_8 DOT identifier LPAREN RPAREN COMMA // lookahead token appears
. 

** Conflict (reduce/reduce) in state 15890.
** Tokens involved: LPAREN LBRACK
** The following explanations concentrate on token LPAREN.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 identifier HASH LPAREN list_of_parameter_assignments RPAREN identifier

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        (?)

** In state 15890, looking ahead at LPAREN, reducing production
** name_of_instance_3 ->
** is permitted because of the following sub-derivation:

identifier HASH LPAREN list_of_parameter_assignments RPAREN identifier name_of_instance_3 LPAREN RPAREN module_instantiation_5 SEMICOLON // lookahead token appears
                                                                       . 

** In state 15890, looking ahead at LPAREN, reducing production
** program_instance_3 ->
** is permitted because of the following sub-derivation:

module_common_item 
identifier HASH LPAREN list_of_parameter_assignments RPAREN identifier program_instance_3 LPAREN RPAREN program_instantiation_5 SEMICOLON // lookahead token appears
                                                                       . 

** Conflict (shift/reduce/reduce) in state 15887.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 identifier HASH LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        identifier delay2 udp_instance_3 LPAREN net_lvalue COMMA expression udp_instance_8 RPAREN udp_instantiation_6 SEMICOLON 
                                                                                   HASH LPAREN mintypmax_expression RPAREN 
                                                                                               expression 
                                                                                               primary 
                                                                                               (?)

** In state 15887, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15887, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15887, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15882.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 identifier udp_instance_3 LPAREN net_lvalue COMMA expression udp_instance_8 RPAREN udp_instantiation_6 COMMA udp_instance_3 LPAREN net_lvalue COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        identifier udp_instance_3 LPAREN net_lvalue COMMA expression udp_instance_8 RPAREN udp_instantiation_6 SEMICOLON 
                                                                                                                                                           udp_instantiation_6 COMMA udp_instance_3 LPAREN net_lvalue COMMA expression udp_instance_8 RPAREN 
                                                                                                                                                                                                                            primary 
                                                                                                                                                                                                                            (?)

** In state 15882, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15882, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15882, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15872.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 identifier udp_instance_3 LPAREN net_lvalue COMMA expression udp_instance_8 COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        identifier udp_instance_3 LPAREN net_lvalue COMMA expression udp_instance_8 RPAREN udp_instantiation_6 SEMICOLON 
                                                                                                                                     udp_instance_8 COMMA expression 
                                                                                                                                                          primary 
                                                                                                                                                          (?)

** In state 15872, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15872, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15872, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15868.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 identifier udp_instance_3 LPAREN net_lvalue COMMA expression udp_instance_8 RPAREN udp_instantiation_6 COMMA NAME_OF_UDP_INSTANCE udp_instance_3 LPAREN net_lvalue COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        identifier udp_instance_3 LPAREN net_lvalue COMMA expression udp_instance_8 RPAREN udp_instantiation_6 SEMICOLON 
                                                                                                                                                           udp_instantiation_6 COMMA NAME_OF_UDP_INSTANCE udp_instance_3 LPAREN net_lvalue COMMA expression udp_instance_8 RPAREN 
                                                                                                                                                                                                                                                 primary 
                                                                                                                                                                                                                                                 (?)

** In state 15868, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15868, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15868, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15857.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 identifier NAME_OF_UDP_INSTANCE udp_instance_3 LPAREN net_lvalue COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        identifier NAME_OF_UDP_INSTANCE udp_instance_3 LPAREN net_lvalue COMMA expression udp_instance_8 RPAREN udp_instantiation_6 SEMICOLON 
                                                                                                                                               primary 
                                                                                                                                               (?)

** In state 15857, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15857, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15857, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce) in state 15852.
** Tokens involved: SIMPLE_IDENTIFIER LPAREN LBRACK BACKSLASH
** The following explanations concentrate on token LPAREN.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 GENERATE generated_module_instantiation_3 identifier

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        GENERATE generated_module_instantiation_3 ENDGENERATE 
                                                                                 generated_module_instantiation_3 generate_module_item 
                                                                                                                  module_or_generate_item 
                                                                                                                  (?)

** In state 15852, looking ahead at LPAREN, shifting is permitted
** because of the following sub-derivation:

identifier drive_strength udp_instance_3 LPAREN net_lvalue COMMA expression udp_instance_8 RPAREN udp_instantiation_6 SEMICOLON 
           . LPAREN strength0 COMMA strength1 RPAREN 

** In state 15852, looking ahead at LPAREN, reducing production
** udp_instance_3 ->
** is permitted because of the following sub-derivation:

identifier udp_instance_3 LPAREN net_lvalue COMMA expression udp_instance_8 RPAREN udp_instantiation_6 SEMICOLON // lookahead token appears
           . 

** Conflict (shift/reduce/reduce) in state 15845.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 mos_switchtype delay3 identifier name_of_gate_instance_3 LPAREN net_lvalue COMMA expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        gate_instantiation 
                                                                        mos_switchtype delay3 identifier name_of_gate_instance_3 LPAREN net_lvalue COMMA expression COMMA expression RPAREN gate_instantiation_18 SEMICOLON 
                                                                                                                                                                          primary 
                                                                                                                                                                          (?)

** In state 15845, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15845, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15845, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15843.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 mos_switchtype delay3 identifier name_of_gate_instance_3 LPAREN net_lvalue COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        gate_instantiation 
                                                                        mos_switchtype delay3 identifier name_of_gate_instance_3 LPAREN net_lvalue COMMA expression COMMA expression RPAREN gate_instantiation_18 SEMICOLON 
                                                                                                                                                         primary 
                                                                                                                                                         (?)

** In state 15843, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15843, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15843, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15834.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 mos_switchtype delay3 LPAREN net_lvalue COMMA expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        gate_instantiation 
                                                                        mos_switchtype delay3 LPAREN net_lvalue COMMA expression COMMA expression RPAREN gate_instantiation_18 SEMICOLON 
                                                                                                                                       primary 
                                                                                                                                       (?)

** In state 15834, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15834, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15834, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15832.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 mos_switchtype delay3 LPAREN net_lvalue COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        gate_instantiation 
                                                                        mos_switchtype delay3 LPAREN net_lvalue COMMA expression COMMA expression RPAREN gate_instantiation_18 SEMICOLON 
                                                                                                                      primary 
                                                                                                                      (?)

** In state 15832, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15832, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15832, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15824.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 mos_switchtype identifier name_of_gate_instance_3 LPAREN net_lvalue COMMA expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        gate_instantiation 
                                                                        mos_switchtype identifier name_of_gate_instance_3 LPAREN net_lvalue COMMA expression COMMA expression RPAREN gate_instantiation_18 SEMICOLON 
                                                                                                                                                                   primary 
                                                                                                                                                                   (?)

** In state 15824, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15824, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15824, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15822.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 mos_switchtype identifier name_of_gate_instance_3 LPAREN net_lvalue COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        gate_instantiation 
                                                                        mos_switchtype identifier name_of_gate_instance_3 LPAREN net_lvalue COMMA expression COMMA expression RPAREN gate_instantiation_18 SEMICOLON 
                                                                                                                                                  primary 
                                                                                                                                                  (?)

** In state 15822, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15822, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15822, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15815.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 mos_switchtype LPAREN net_lvalue COMMA expression COMMA expression RPAREN gate_instantiation_18 COMMA identifier name_of_gate_instance_3 LPAREN net_lvalue COMMA expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        gate_instantiation 
                                                                        mos_switchtype LPAREN net_lvalue COMMA expression COMMA expression RPAREN gate_instantiation_18 SEMICOLON 
                                                                                                                                                  gate_instantiation_18 COMMA identifier name_of_gate_instance_3 LPAREN net_lvalue COMMA expression COMMA expression RPAREN 
                                                                                                                                                                                                                                                          primary 
                                                                                                                                                                                                                                                          (?)

** In state 15815, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15815, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15815, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15813.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 mos_switchtype LPAREN net_lvalue COMMA expression COMMA expression RPAREN gate_instantiation_18 COMMA identifier name_of_gate_instance_3 LPAREN net_lvalue COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        gate_instantiation 
                                                                        mos_switchtype LPAREN net_lvalue COMMA expression COMMA expression RPAREN gate_instantiation_18 SEMICOLON 
                                                                                                                                                  gate_instantiation_18 COMMA identifier name_of_gate_instance_3 LPAREN net_lvalue COMMA expression COMMA expression RPAREN 
                                                                                                                                                                                                                                         primary 
                                                                                                                                                                                                                                         (?)

** In state 15813, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15813, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15813, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15806.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 mos_switchtype LPAREN net_lvalue COMMA expression COMMA expression RPAREN gate_instantiation_18 COMMA LPAREN net_lvalue COMMA expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        gate_instantiation 
                                                                        mos_switchtype LPAREN net_lvalue COMMA expression COMMA expression RPAREN gate_instantiation_18 SEMICOLON 
                                                                                                                                                  gate_instantiation_18 COMMA LPAREN net_lvalue COMMA expression COMMA expression RPAREN 
                                                                                                                                                                                                                       primary 
                                                                                                                                                                                                                       (?)

** In state 15806, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15806, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15806, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15804.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 mos_switchtype LPAREN net_lvalue COMMA expression COMMA expression RPAREN gate_instantiation_18 COMMA LPAREN net_lvalue COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        gate_instantiation 
                                                                        mos_switchtype LPAREN net_lvalue COMMA expression COMMA expression RPAREN gate_instantiation_18 SEMICOLON 
                                                                                                                                                  gate_instantiation_18 COMMA LPAREN net_lvalue COMMA expression COMMA expression RPAREN 
                                                                                                                                                                                                      primary 
                                                                                                                                                                                                      (?)

** In state 15804, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15804, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15804, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15796.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 mos_switchtype LPAREN net_lvalue COMMA expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        gate_instantiation 
                                                                        mos_switchtype LPAREN net_lvalue COMMA expression COMMA expression RPAREN gate_instantiation_18 SEMICOLON 
                                                                                                                                primary 
                                                                                                                                (?)

** In state 15796, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15796, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15796, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15794.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 mos_switchtype LPAREN net_lvalue COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        gate_instantiation 
                                                                        mos_switchtype LPAREN net_lvalue COMMA expression COMMA expression RPAREN gate_instantiation_18 SEMICOLON 
                                                                                                               primary 
                                                                                                               (?)

** In state 15794, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15794, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15794, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15785.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 n_input_gatetype delay2 identifier name_of_gate_instance_3 LPAREN net_lvalue COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        gate_instantiation 
                                                                        n_input_gatetype delay2 identifier name_of_gate_instance_3 LPAREN net_lvalue COMMA expression n_input_gate_instance_7 RPAREN gate_instantiation_25 SEMICOLON 
                                                                                                                                                           primary 
                                                                                                                                                           (?)

** In state 15785, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15785, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15785, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15775.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 n_input_gatetype delay2 LPAREN net_lvalue COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        gate_instantiation 
                                                                        n_input_gatetype delay2 LPAREN net_lvalue COMMA expression n_input_gate_instance_7 RPAREN gate_instantiation_25 SEMICOLON 
                                                                                                                        primary 
                                                                                                                        (?)

** In state 15775, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15775, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15775, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15766.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 n_input_gatetype drive_strength delay2 identifier name_of_gate_instance_3 LPAREN net_lvalue COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        gate_instantiation 
                                                                        n_input_gatetype drive_strength delay2 identifier name_of_gate_instance_3 LPAREN net_lvalue COMMA expression n_input_gate_instance_7 RPAREN gate_instantiation_25 SEMICOLON 
                                                                                                                                                                          primary 
                                                                                                                                                                          (?)

** In state 15766, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15766, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15766, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15756.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 n_input_gatetype drive_strength delay2 LPAREN net_lvalue COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        gate_instantiation 
                                                                        n_input_gatetype drive_strength delay2 LPAREN net_lvalue COMMA expression n_input_gate_instance_7 RPAREN gate_instantiation_25 SEMICOLON 
                                                                                                                                       primary 
                                                                                                                                       (?)

** In state 15756, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15756, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15756, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15747.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 n_input_gatetype drive_strength identifier name_of_gate_instance_3 LPAREN net_lvalue COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        gate_instantiation 
                                                                        n_input_gatetype drive_strength identifier name_of_gate_instance_3 LPAREN net_lvalue COMMA expression n_input_gate_instance_7 RPAREN gate_instantiation_25 SEMICOLON 
                                                                                                                                                                   primary 
                                                                                                                                                                   (?)

** In state 15747, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15747, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15747, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15737.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 n_input_gatetype drive_strength LPAREN net_lvalue COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        gate_instantiation 
                                                                        n_input_gatetype drive_strength LPAREN net_lvalue COMMA expression n_input_gate_instance_7 RPAREN gate_instantiation_25 SEMICOLON 
                                                                                                                                primary 
                                                                                                                                (?)

** In state 15737, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15737, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15737, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15728.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 n_input_gatetype identifier name_of_gate_instance_3 LPAREN net_lvalue COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        gate_instantiation 
                                                                        n_input_gatetype identifier name_of_gate_instance_3 LPAREN net_lvalue COMMA expression n_input_gate_instance_7 RPAREN gate_instantiation_25 SEMICOLON 
                                                                                                                                                    primary 
                                                                                                                                                    (?)

** In state 15728, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15728, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15728, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15720.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 n_input_gatetype LPAREN net_lvalue COMMA expression n_input_gate_instance_7 RPAREN gate_instantiation_25 COMMA identifier name_of_gate_instance_3 LPAREN net_lvalue COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        gate_instantiation 
                                                                        n_input_gatetype LPAREN net_lvalue COMMA expression n_input_gate_instance_7 RPAREN gate_instantiation_25 SEMICOLON 
                                                                                                                                                           gate_instantiation_25 COMMA identifier name_of_gate_instance_3 LPAREN net_lvalue COMMA expression n_input_gate_instance_7 RPAREN 
                                                                                                                                                                                                                                                  primary 
                                                                                                                                                                                                                                                  (?)

** In state 15720, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15720, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15720, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15714.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 n_input_gatetype LPAREN net_lvalue COMMA expression n_input_gate_instance_7 COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        gate_instantiation 
                                                                        n_input_gatetype LPAREN net_lvalue COMMA expression n_input_gate_instance_7 RPAREN gate_instantiation_25 SEMICOLON 
                                                                                                                            n_input_gate_instance_7 COMMA expression 
                                                                                                                                                          primary 
                                                                                                                                                          (?)

** In state 15714, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15714, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15714, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15710.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 n_input_gatetype LPAREN net_lvalue COMMA expression n_input_gate_instance_7 RPAREN gate_instantiation_25 COMMA LPAREN net_lvalue COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        gate_instantiation 
                                                                        n_input_gatetype LPAREN net_lvalue COMMA expression n_input_gate_instance_7 RPAREN gate_instantiation_25 SEMICOLON 
                                                                                                                                                           gate_instantiation_25 COMMA LPAREN net_lvalue COMMA expression n_input_gate_instance_7 RPAREN 
                                                                                                                                                                                                               primary 
                                                                                                                                                                                                               (?)

** In state 15710, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15710, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15710, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15701.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 n_input_gatetype LPAREN net_lvalue COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        gate_instantiation 
                                                                        n_input_gatetype LPAREN net_lvalue COMMA expression n_input_gate_instance_7 RPAREN gate_instantiation_25 SEMICOLON 
                                                                                                                 primary 
                                                                                                                 (?)

** In state 15701, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15701, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15701, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15693.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 n_output_gatetype delay2 identifier name_of_gate_instance_3 LPAREN net_lvalue n_output_gate_instance_5 COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        gate_instantiation 
                                                                        n_output_gatetype delay2 identifier name_of_gate_instance_3 LPAREN net_lvalue n_output_gate_instance_5 COMMA expression RPAREN gate_instantiation_32 SEMICOLON 
                                                                                                                                                                                     primary 
                                                                                                                                                                                     (?)

** In state 15693, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15693, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15693, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15683.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 n_output_gatetype delay2 LPAREN net_lvalue n_output_gate_instance_5 COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        gate_instantiation 
                                                                        n_output_gatetype delay2 LPAREN net_lvalue n_output_gate_instance_5 COMMA expression RPAREN gate_instantiation_32 SEMICOLON 
                                                                                                                                                  primary 
                                                                                                                                                  (?)

** In state 15683, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15683, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15683, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15674.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 n_output_gatetype drive_strength delay2 identifier name_of_gate_instance_3 LPAREN net_lvalue n_output_gate_instance_5 COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        gate_instantiation 
                                                                        n_output_gatetype drive_strength delay2 identifier name_of_gate_instance_3 LPAREN net_lvalue n_output_gate_instance_5 COMMA expression RPAREN gate_instantiation_32 SEMICOLON 
                                                                                                                                                                                                    primary 
                                                                                                                                                                                                    (?)

** In state 15674, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15674, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15674, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15664.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 n_output_gatetype drive_strength delay2 LPAREN net_lvalue n_output_gate_instance_5 COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        gate_instantiation 
                                                                        n_output_gatetype drive_strength delay2 LPAREN net_lvalue n_output_gate_instance_5 COMMA expression RPAREN gate_instantiation_32 SEMICOLON 
                                                                                                                                                                 primary 
                                                                                                                                                                 (?)

** In state 15664, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15664, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15664, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15655.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 n_output_gatetype drive_strength identifier name_of_gate_instance_3 LPAREN net_lvalue n_output_gate_instance_5 COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        gate_instantiation 
                                                                        n_output_gatetype drive_strength identifier name_of_gate_instance_3 LPAREN net_lvalue n_output_gate_instance_5 COMMA expression RPAREN gate_instantiation_32 SEMICOLON 
                                                                                                                                                                                             primary 
                                                                                                                                                                                             (?)

** In state 15655, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15655, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15655, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15645.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 n_output_gatetype drive_strength LPAREN net_lvalue n_output_gate_instance_5 COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        gate_instantiation 
                                                                        n_output_gatetype drive_strength LPAREN net_lvalue n_output_gate_instance_5 COMMA expression RPAREN gate_instantiation_32 SEMICOLON 
                                                                                                                                                          primary 
                                                                                                                                                          (?)

** In state 15645, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15645, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15645, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15636.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 n_output_gatetype identifier name_of_gate_instance_3 LPAREN net_lvalue n_output_gate_instance_5 COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        gate_instantiation 
                                                                        n_output_gatetype identifier name_of_gate_instance_3 LPAREN net_lvalue n_output_gate_instance_5 COMMA expression RPAREN gate_instantiation_32 SEMICOLON 
                                                                                                                                                                              primary 
                                                                                                                                                                              (?)

** In state 15636, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15636, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15636, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15628.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 n_output_gatetype LPAREN net_lvalue n_output_gate_instance_5 COMMA expression RPAREN gate_instantiation_32 COMMA identifier name_of_gate_instance_3 LPAREN net_lvalue n_output_gate_instance_5 COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        gate_instantiation 
                                                                        n_output_gatetype LPAREN net_lvalue n_output_gate_instance_5 COMMA expression RPAREN gate_instantiation_32 SEMICOLON 
                                                                                                                                                             gate_instantiation_32 COMMA identifier name_of_gate_instance_3 LPAREN net_lvalue n_output_gate_instance_5 COMMA expression RPAREN 
                                                                                                                                                                                                                                                                             primary 
                                                                                                                                                                                                                                                                             (?)

** In state 15628, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15628, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15628, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15620.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 n_output_gatetype LPAREN net_lvalue n_output_gate_instance_5 COMMA expression RPAREN gate_instantiation_32 COMMA LPAREN net_lvalue n_output_gate_instance_5 COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        gate_instantiation 
                                                                        n_output_gatetype LPAREN net_lvalue n_output_gate_instance_5 COMMA expression RPAREN gate_instantiation_32 SEMICOLON 
                                                                                                                                                             gate_instantiation_32 COMMA LPAREN net_lvalue n_output_gate_instance_5 COMMA expression RPAREN 
                                                                                                                                                                                                                                          primary 
                                                                                                                                                                                                                                          (?)

** In state 15620, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15620, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15620, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (reduce/reduce) in state 15610.
** Tokens involved: RCURLY LBRACK COMMA
** The following explanations concentrate on token LBRACK.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 n_output_gatetype LPAREN net_lvalue n_output_gate_instance_5 COMMA hierarchical_identifier

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        gate_instantiation 
                                                                        (?)

** In state 15610, looking ahead at LBRACK, reducing production
** net_lvalue_3 ->
** is permitted because of the following sub-derivation:

n_output_gatetype LPAREN net_lvalue n_output_gate_instance_5 COMMA expression RPAREN gate_instantiation_32 SEMICOLON 
                                    n_output_gate_instance_5 COMMA net_lvalue 
                                                                   hierarchical_identifier net_lvalue_3 LBRACK constant_range_expression RBRACK // lookahead token appears
                                                                                           . 

** In state 15610, looking ahead at LBRACK, reducing production
** variable_lvalue_3 ->
** is permitted because of the following sub-derivation:

n_output_gatetype LPAREN net_lvalue n_output_gate_instance_5 COMMA expression RPAREN gate_instantiation_32 SEMICOLON 
                                                                   inc_or_dec_expression 
                                                                   variable_lvalue inc_or_dec_operator 
                                                                   hierarchical_identifier variable_lvalue_3 LBRACK range_expression RBRACK // lookahead token appears
                                                                                           . 

** Conflict (shift/reduce/reduce) in state 15609.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 n_output_gatetype LPAREN net_lvalue n_output_gate_instance_5 COMMA LCURLY LCURLY

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        gate_instantiation 
                                                                        (?)

** In state 15609, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

n_output_gatetype LPAREN net_lvalue n_output_gate_instance_5 COMMA expression RPAREN gate_instantiation_32 SEMICOLON 
                                    n_output_gate_instance_5 COMMA net_lvalue 
                                                                   LCURLY net_lvalue net_lvalue_8 RCURLY 
                                                                          LCURLY net_lvalue net_lvalue_8 RCURLY 
                                                                                 hierarchical_identifier net_lvalue_3 
                                                                                 . SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15609, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

n_output_gatetype LPAREN net_lvalue n_output_gate_instance_5 COMMA expression RPAREN gate_instantiation_32 SEMICOLON 
                                                                   primary 
                                                                   concatenation 
                                                                   LCURLY expression concatenation_4 RCURLY 
                                                                          primary 
                                                                          concatenation 
                                                                          LCURLY expression concatenation_4 RCURLY 
                                                                                 primary 
                                                                                 implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
                                                                                 . 

** In state 15609, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

n_output_gatetype LPAREN net_lvalue n_output_gate_instance_5 COMMA expression RPAREN gate_instantiation_32 SEMICOLON 
                                                                   primary 
                                                                   concatenation 
                                                                   LCURLY expression concatenation_4 RCURLY 
                                                                          primary 
                                                                          concatenation 
                                                                          LCURLY expression concatenation_4 RCURLY 
                                                                                 primary 
                                                                                 implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
                                                                                 . 

** Conflict (shift/reduce/reduce) in state 15608.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 n_output_gatetype LPAREN net_lvalue n_output_gate_instance_5 COMMA LCURLY

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        gate_instantiation 
                                                                        (?)

** In state 15608, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

n_output_gatetype LPAREN net_lvalue n_output_gate_instance_5 COMMA expression RPAREN gate_instantiation_32 SEMICOLON 
                                    n_output_gate_instance_5 COMMA net_lvalue 
                                                                   LCURLY net_lvalue net_lvalue_8 RCURLY 
                                                                          hierarchical_identifier net_lvalue_3 
                                                                          . SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15608, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

n_output_gatetype LPAREN net_lvalue n_output_gate_instance_5 COMMA expression RPAREN gate_instantiation_32 SEMICOLON 
                                                                   primary 
                                                                   concatenation 
                                                                   LCURLY expression concatenation_4 RCURLY 
                                                                          primary 
                                                                          implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
                                                                          . 

** In state 15608, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

n_output_gatetype LPAREN net_lvalue n_output_gate_instance_5 COMMA expression RPAREN gate_instantiation_32 SEMICOLON 
                                                                   primary 
                                                                   concatenation 
                                                                   LCURLY expression concatenation_4 RCURLY 
                                                                          primary 
                                                                          implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
                                                                          . 

** Conflict (shift/reduce/reduce) in state 15607.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 n_output_gatetype LPAREN net_lvalue n_output_gate_instance_5 COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        gate_instantiation 
                                                                        n_output_gatetype LPAREN net_lvalue n_output_gate_instance_5 COMMA expression RPAREN gate_instantiation_32 SEMICOLON 
                                                                                                                                           primary 
                                                                                                                                           (?)

** In state 15607, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15607, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15607, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15598.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 pass_en_switchtype delay2 identifier name_of_gate_instance_3 LPAREN net_lvalue COMMA net_lvalue COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        gate_instantiation 
                                                                        pass_en_switchtype delay2 identifier name_of_gate_instance_3 LPAREN net_lvalue COMMA net_lvalue COMMA expression RPAREN gate_instantiation_38 SEMICOLON 
                                                                                                                                                                              primary 
                                                                                                                                                                              (?)

** In state 15598, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15598, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15598, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15587.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 pass_en_switchtype delay2 LPAREN net_lvalue COMMA net_lvalue COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        gate_instantiation 
                                                                        pass_en_switchtype delay2 LPAREN net_lvalue COMMA net_lvalue COMMA expression RPAREN gate_instantiation_38 SEMICOLON 
                                                                                                                                           primary 
                                                                                                                                           (?)

** In state 15587, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15587, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15587, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15577.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 pass_en_switchtype identifier name_of_gate_instance_3 LPAREN net_lvalue COMMA net_lvalue COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        gate_instantiation 
                                                                        pass_en_switchtype identifier name_of_gate_instance_3 LPAREN net_lvalue COMMA net_lvalue COMMA expression RPAREN gate_instantiation_38 SEMICOLON 
                                                                                                                                                                       primary 
                                                                                                                                                                       (?)

** In state 15577, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15577, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15577, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15567.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 pass_en_switchtype HASH LPAREN mintypmax_expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        gate_instantiation 
                                                                        pass_en_switchtype delay2 LPAREN net_lvalue COMMA net_lvalue COMMA expression RPAREN gate_instantiation_38 SEMICOLON 
                                                                                           HASH LPAREN mintypmax_expression COMMA mintypmax_expression RPAREN 
                                                                                                                                  expression 
                                                                                                                                  primary 
                                                                                                                                  (?)

** In state 15567, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15567, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15567, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15564.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 pass_en_switchtype HASH LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        gate_instantiation 
                                                                        pass_en_switchtype delay2 LPAREN net_lvalue COMMA net_lvalue COMMA expression RPAREN gate_instantiation_38 SEMICOLON 
                                                                                           HASH LPAREN mintypmax_expression RPAREN 
                                                                                                       expression 
                                                                                                       primary 
                                                                                                       (?)

** In state 15564, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15564, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15564, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15560.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 pass_en_switchtype LPAREN net_lvalue COMMA net_lvalue COMMA expression RPAREN gate_instantiation_38 COMMA identifier name_of_gate_instance_3 LPAREN net_lvalue COMMA net_lvalue COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        gate_instantiation 
                                                                        pass_en_switchtype LPAREN net_lvalue COMMA net_lvalue COMMA expression RPAREN gate_instantiation_38 SEMICOLON 
                                                                                                                                                      gate_instantiation_38 COMMA identifier name_of_gate_instance_3 LPAREN net_lvalue COMMA net_lvalue COMMA expression RPAREN 
                                                                                                                                                                                                                                                              primary 
                                                                                                                                                                                                                                                              (?)

** In state 15560, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15560, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15560, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15551.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 pass_en_switchtype LPAREN net_lvalue COMMA net_lvalue COMMA expression RPAREN gate_instantiation_38 COMMA LPAREN net_lvalue COMMA net_lvalue COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        gate_instantiation 
                                                                        pass_en_switchtype LPAREN net_lvalue COMMA net_lvalue COMMA expression RPAREN gate_instantiation_38 SEMICOLON 
                                                                                                                                                      gate_instantiation_38 COMMA LPAREN net_lvalue COMMA net_lvalue COMMA expression RPAREN 
                                                                                                                                                                                                                           primary 
                                                                                                                                                                                                                           (?)

** In state 15551, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15551, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15551, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15541.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 pass_en_switchtype LPAREN net_lvalue COMMA net_lvalue COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        module_or_generate_item 
                                                                        gate_instantiation 
                                                                        pass_en_switchtype LPAREN net_lvalue COMMA net_lvalue COMMA expression RPAREN gate_instantiation_38 SEMICOLON 
                                                                                                                                    primary 
                                                                                                                                    (?)

** In state 15541, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15541, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15541, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15293.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_HOLD LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_HOLD LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                  primary 
                                                                                                                                                                                  (?)

** In state 15293, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15293, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15293, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15283.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_HOLD LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_HOLD LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                     primary 
                                                                                                                                                                                                                     (?)

** In state 15283, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15283, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15283, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15281.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_HOLD LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_HOLD LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                        scalar_timing_check_condition 
                                                                                                                                                                                        expression 
                                                                                                                                                                                        primary 
                                                                                                                                                                                        (?)

** In state 15281, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15281, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15281, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15270.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_HOLD LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_HOLD LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                             primary 
                                                                                                                                                                                                             (?)

** In state 15270, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15270, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15270, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15260.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_HOLD LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_HOLD LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                primary 
                                                                                                                                                                                                                                                (?)

** In state 15260, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15260, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15260, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15258.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_HOLD LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_HOLD LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                   scalar_timing_check_condition 
                                                                                                                                                                                                                   expression 
                                                                                                                                                                                                                   primary 
                                                                                                                                                                                                                   (?)

** In state 15258, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15258, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15258, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15245.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_HOLD LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_HOLD LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                     primary 
                                                                                                                                                                                                                     (?)

** In state 15245, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15245, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15245, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15235.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_HOLD LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_HOLD LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                        primary 
                                                                                                                                                                                                                                                        (?)

** In state 15235, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15235, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15235, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15233.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_HOLD LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_HOLD LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                           scalar_timing_check_condition 
                                                                                                                                                                                                                           expression 
                                                                                                                                                                                                                           primary 
                                                                                                                                                                                                                           (?)

** In state 15233, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15233, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15233, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15222.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_HOLD LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_HOLD LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                primary 
                                                                                                                                                                                                                                                (?)

** In state 15222, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15222, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15222, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15212.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_HOLD LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_HOLD LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                   primary 
                                                                                                                                                                                                                                                                                   (?)

** In state 15212, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15212, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15212, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15210.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_HOLD LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_HOLD LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                      scalar_timing_check_condition 
                                                                                                                                                                                                                                                      expression 
                                                                                                                                                                                                                                                      primary 
                                                                                                                                                                                                                                                      (?)

** In state 15210, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15210, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15210, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15205.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_HOLD LPAREN specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_HOLD LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA expression RPAREN SEMICOLON 
                                                                                                                                                      scalar_timing_check_condition 
                                                                                                                                                      expression 
                                                                                                                                                      primary 
                                                                                                                                                      (?)

** In state 15205, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15205, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15205, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15194.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_HOLD LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_HOLD LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                             primary 
                                                                                                                                                                                                             (?)

** In state 15194, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15194, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15194, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15184.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_HOLD LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_HOLD LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                primary 
                                                                                                                                                                                                                                                (?)

** In state 15184, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15184, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15184, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15182.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_HOLD LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_HOLD LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                   scalar_timing_check_condition 
                                                                                                                                                                                                                   expression 
                                                                                                                                                                                                                   primary 
                                                                                                                                                                                                                   (?)

** In state 15182, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15182, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15182, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15171.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_HOLD LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_HOLD LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                        primary 
                                                                                                                                                                                                                                        (?)

** In state 15171, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15171, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15171, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15161.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_HOLD LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_HOLD LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                           primary 
                                                                                                                                                                                                                                                                           (?)

** In state 15161, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15161, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15161, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15159.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_HOLD LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_HOLD LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                              scalar_timing_check_condition 
                                                                                                                                                                                                                                              expression 
                                                                                                                                                                                                                                              primary 
                                                                                                                                                                                                                                              (?)

** In state 15159, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15159, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15159, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15146.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_HOLD LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_HOLD LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                primary 
                                                                                                                                                                                                                                                (?)

** In state 15146, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15146, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15146, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15136.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_HOLD LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_HOLD LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                   primary 
                                                                                                                                                                                                                                                                                   (?)

** In state 15136, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15136, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15136, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15134.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_HOLD LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_HOLD LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                      scalar_timing_check_condition 
                                                                                                                                                                                                                                                      expression 
                                                                                                                                                                                                                                                      primary 
                                                                                                                                                                                                                                                      (?)

** In state 15134, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15134, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15134, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15123.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_HOLD LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_HOLD LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                           primary 
                                                                                                                                                                                                                                                                           (?)

** In state 15123, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15123, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15123, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15113.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_HOLD LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_HOLD LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                              primary 
                                                                                                                                                                                                                                                                                                              (?)

** In state 15113, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15113, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15113, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15111.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_HOLD LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_HOLD LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                 scalar_timing_check_condition 
                                                                                                                                                                                                                                                                                 expression 
                                                                                                                                                                                                                                                                                 primary 
                                                                                                                                                                                                                                                                                 (?)

** In state 15111, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15111, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15111, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15106.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_HOLD LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_HOLD LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                 scalar_timing_check_condition 
                                                                                                                                                                                 expression 
                                                                                                                                                                                 primary 
                                                                                                                                                                                 (?)

** In state 15106, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15106, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15106, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15092.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_PERIOD LPAREN timing_check_event_control specify_terminal_descriptor COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_PERIOD LPAREN timing_check_event_control specify_terminal_descriptor COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                             primary 
                                                                                                                                                                             (?)

** In state 15092, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15092, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15092, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15082.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_PERIOD LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_PERIOD LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                primary 
                                                                                                                                                                                                                (?)

** In state 15082, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15082, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15082, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15080.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_PERIOD LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_PERIOD LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                   scalar_timing_check_condition 
                                                                                                                                                                                   expression 
                                                                                                                                                                                   primary 
                                                                                                                                                                                   (?)

** In state 15080, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15080, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15080, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15066.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECOVERY LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECOVERY LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                      primary 
                                                                                                                                                                                      (?)

** In state 15066, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15066, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15066, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15056.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECOVERY LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECOVERY LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                         primary 
                                                                                                                                                                                                                         (?)

** In state 15056, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15056, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15056, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15054.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECOVERY LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECOVERY LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                            scalar_timing_check_condition 
                                                                                                                                                                                            expression 
                                                                                                                                                                                            primary 
                                                                                                                                                                                            (?)

** In state 15054, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15054, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15054, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15043.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECOVERY LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECOVERY LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                 primary 
                                                                                                                                                                                                                 (?)

** In state 15043, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15043, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15043, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15033.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECOVERY LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECOVERY LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                    primary 
                                                                                                                                                                                                                                                    (?)

** In state 15033, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15033, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15033, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15031.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECOVERY LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECOVERY LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                       scalar_timing_check_condition 
                                                                                                                                                                                                                       expression 
                                                                                                                                                                                                                       primary 
                                                                                                                                                                                                                       (?)

** In state 15031, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15031, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15031, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15018.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECOVERY LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECOVERY LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                         primary 
                                                                                                                                                                                                                         (?)

** In state 15018, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15018, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15018, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15008.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECOVERY LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECOVERY LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                            primary 
                                                                                                                                                                                                                                                            (?)

** In state 15008, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15008, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15008, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 15006.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECOVERY LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECOVERY LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                               scalar_timing_check_condition 
                                                                                                                                                                                                                               expression 
                                                                                                                                                                                                                               primary 
                                                                                                                                                                                                                               (?)

** In state 15006, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 15006, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 15006, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 14995.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECOVERY LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECOVERY LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                    primary 
                                                                                                                                                                                                                                                    (?)

** In state 14995, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 14995, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 14995, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 14985.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECOVERY LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECOVERY LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                       primary 
                                                                                                                                                                                                                                                                                       (?)

** In state 14985, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 14985, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 14985, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 14983.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECOVERY LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECOVERY LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                          scalar_timing_check_condition 
                                                                                                                                                                                                                                                          expression 
                                                                                                                                                                                                                                                          primary 
                                                                                                                                                                                                                                                          (?)

** In state 14983, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 14983, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 14983, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 14978.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECOVERY LPAREN specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECOVERY LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA expression RPAREN SEMICOLON 
                                                                                                                                                          scalar_timing_check_condition 
                                                                                                                                                          expression 
                                                                                                                                                          primary 
                                                                                                                                                          (?)

** In state 14978, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 14978, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 14978, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 14967.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECOVERY LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECOVERY LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                 primary 
                                                                                                                                                                                                                 (?)

** In state 14967, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 14967, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 14967, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 14957.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECOVERY LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECOVERY LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                    primary 
                                                                                                                                                                                                                                                    (?)

** In state 14957, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 14957, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 14957, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 14955.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECOVERY LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECOVERY LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                       scalar_timing_check_condition 
                                                                                                                                                                                                                       expression 
                                                                                                                                                                                                                       primary 
                                                                                                                                                                                                                       (?)

** In state 14955, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 14955, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 14955, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 14944.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECOVERY LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECOVERY LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                            primary 
                                                                                                                                                                                                                                            (?)

** In state 14944, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 14944, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 14944, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 14934.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECOVERY LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECOVERY LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                               primary 
                                                                                                                                                                                                                                                                               (?)

** In state 14934, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 14934, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 14934, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 14932.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECOVERY LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECOVERY LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                  scalar_timing_check_condition 
                                                                                                                                                                                                                                                  expression 
                                                                                                                                                                                                                                                  primary 
                                                                                                                                                                                                                                                  (?)

** In state 14932, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 14932, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 14932, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 14919.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECOVERY LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECOVERY LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                    primary 
                                                                                                                                                                                                                                                    (?)

** In state 14919, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 14919, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 14919, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 14909.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECOVERY LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECOVERY LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                       primary 
                                                                                                                                                                                                                                                                                       (?)

** In state 14909, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 14909, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 14909, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 14907.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECOVERY LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECOVERY LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                          scalar_timing_check_condition 
                                                                                                                                                                                                                                                          expression 
                                                                                                                                                                                                                                                          primary 
                                                                                                                                                                                                                                                          (?)

** In state 14907, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 14907, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 14907, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 14896.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECOVERY LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECOVERY LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                               primary 
                                                                                                                                                                                                                                                                               (?)

** In state 14896, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 14896, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 14896, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 14886.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECOVERY LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECOVERY LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                  primary 
                                                                                                                                                                                                                                                                                                                  (?)

** In state 14886, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 14886, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 14886, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 14884.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECOVERY LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECOVERY LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                     scalar_timing_check_condition 
                                                                                                                                                                                                                                                                                     expression 
                                                                                                                                                                                                                                                                                     primary 
                                                                                                                                                                                                                                                                                     (?)

** In state 14884, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 14884, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 14884, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 14879.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECOVERY LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECOVERY LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                     scalar_timing_check_condition 
                                                                                                                                                                                     expression 
                                                                                                                                                                                     primary 
                                                                                                                                                                                     (?)

** In state 14879, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 14879, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 14879, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 14833.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA expression COMMA expression COMMA identifier COMMA mintypmax_expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA expression COMMA expression COMMA identifier COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                  expression 
                                                                                                                                                                                                                                                                  primary 
                                                                                                                                                                                                                                                                  (?)

** In state 14833, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 14833, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 14833, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 14788.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA expression COMMA expression COMMA identifier COMMA COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA expression COMMA expression COMMA identifier COMMA COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                             expression 
                                                                                                                                                                                                                                             primary 
                                                                                                                                                                                                                                             (?)

** In state 14788, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 14788, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 14788, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 14785.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA expression COMMA expression COMMA identifier COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA expression COMMA expression COMMA identifier COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                       expression 
                                                                                                                                                                                                                                       primary 
                                                                                                                                                                                                                                       (?)

** In state 14785, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 14785, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 14785, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 14740.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA expression COMMA expression COMMA COMMA mintypmax_expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA expression COMMA expression COMMA COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                       expression 
                                                                                                                                                                                                                                                       primary 
                                                                                                                                                                                                                                                       (?)

** In state 14740, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 14740, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 14740, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 14695.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA expression COMMA expression COMMA COMMA COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA expression COMMA expression COMMA COMMA COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                  expression 
                                                                                                                                                                                                                                  primary 
                                                                                                                                                                                                                                  (?)

** In state 14695, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 14695, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 14695, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 14692.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA expression COMMA expression COMMA COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA expression COMMA expression COMMA COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                            expression 
                                                                                                                                                                                                                            primary 
                                                                                                                                                                                                                            (?)

** In state 14692, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 14692, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 14692, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 14685.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                     primary 
                                                                                                                                                                                                     (?)

** In state 14685, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 14685, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 14685, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 14683.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                    primary 
                                                                                                                                                                                    (?)

** In state 14683, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 14683, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 14683, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 14641.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA identifier COMMA mintypmax_expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA identifier COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                     expression 
                                                                                                                                                                                                                                                                                                     primary 
                                                                                                                                                                                                                                                                                                     (?)

** In state 14641, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 14641, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 14641, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 14596.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA identifier COMMA COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA identifier COMMA COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                expression 
                                                                                                                                                                                                                                                                                primary 
                                                                                                                                                                                                                                                                                (?)

** In state 14596, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 14596, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 14596, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 14593.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA identifier COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA identifier COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                          expression 
                                                                                                                                                                                                                                                                          primary 
                                                                                                                                                                                                                                                                          (?)

** In state 14593, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 14593, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 14593, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 14548.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA COMMA mintypmax_expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                          expression 
                                                                                                                                                                                                                                                                                          primary 
                                                                                                                                                                                                                                                                                          (?)

** In state 14548, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 14548, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 14548, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 14503.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA COMMA COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA COMMA COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                     expression 
                                                                                                                                                                                                                                                                     primary 
                                                                                                                                                                                                                                                                     (?)

** In state 14503, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 14503, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 14503, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 14500.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                               expression 
                                                                                                                                                                                                                                                               primary 
                                                                                                                                                                                                                                                               (?)

** In state 14500, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 14500, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 14500, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 14493.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                        primary 
                                                                                                                                                                                                                                        (?)

** In state 14493, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 14493, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 14493, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 14491.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                       primary 
                                                                                                                                                                                                                       (?)

** In state 14491, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 14491, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 14491, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 14489.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                          scalar_timing_check_condition 
                                                                                                                                                                                          expression 
                                                                                                                                                                                          primary 
                                                                                                                                                                                          (?)

** In state 14489, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 14489, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 14489, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 14446.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression COMMA identifier COMMA mintypmax_expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression COMMA identifier COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                             expression 
                                                                                                                                                                                                                                                                                             primary 
                                                                                                                                                                                                                                                                                             (?)

** In state 14446, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 14446, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 14446, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 14401.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression COMMA identifier COMMA COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression COMMA identifier COMMA COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                        expression 
                                                                                                                                                                                                                                                                        primary 
                                                                                                                                                                                                                                                                        (?)

** In state 14401, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 14401, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 14401, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 14398.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression COMMA identifier COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression COMMA identifier COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                  expression 
                                                                                                                                                                                                                                                                  primary 
                                                                                                                                                                                                                                                                  (?)

** In state 14398, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 14398, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 14398, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 14353.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression COMMA COMMA mintypmax_expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression COMMA COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                  expression 
                                                                                                                                                                                                                                                                                  primary 
                                                                                                                                                                                                                                                                                  (?)

** In state 14353, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 14353, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 14353, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 14308.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression COMMA COMMA COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression COMMA COMMA COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                             expression 
                                                                                                                                                                                                                                                             primary 
                                                                                                                                                                                                                                                             (?)

** In state 14308, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 14308, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 14308, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 14305.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression COMMA COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression COMMA COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                       expression 
                                                                                                                                                                                                                                                       primary 
                                                                                                                                                                                                                                                       (?)

** In state 14305, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 14305, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 14305, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 14298.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                primary 
                                                                                                                                                                                                                                (?)

** In state 14298, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 14298, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 14298, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 14296.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                               primary 
                                                                                                                                                                                                               (?)

** In state 14296, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 14296, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 14296, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 14254.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA identifier COMMA mintypmax_expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA identifier COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                                expression 
                                                                                                                                                                                                                                                                                                                                primary 
                                                                                                                                                                                                                                                                                                                                (?)

** In state 14254, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 14254, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 14254, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 14209.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA identifier COMMA COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA identifier COMMA COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                           expression 
                                                                                                                                                                                                                                                                                                           primary 
                                                                                                                                                                                                                                                                                                           (?)

** In state 14209, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 14209, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 14209, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 14206.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA identifier COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA identifier COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                     expression 
                                                                                                                                                                                                                                                                                                     primary 
                                                                                                                                                                                                                                                                                                     (?)

** In state 14206, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 14206, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 14206, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 14161.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA COMMA mintypmax_expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                     expression 
                                                                                                                                                                                                                                                                                                                     primary 
                                                                                                                                                                                                                                                                                                                     (?)

** In state 14161, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 14161, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 14161, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 14116.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA COMMA COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA COMMA COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                expression 
                                                                                                                                                                                                                                                                                                primary 
                                                                                                                                                                                                                                                                                                (?)

** In state 14116, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 14116, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 14116, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 14113.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                          expression 
                                                                                                                                                                                                                                                                                          primary 
                                                                                                                                                                                                                                                                                          (?)

** In state 14113, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 14113, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 14113, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 14106.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                   primary 
                                                                                                                                                                                                                                                                   (?)

** In state 14106, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 14106, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 14106, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 14104.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                  primary 
                                                                                                                                                                                                                                                  (?)

** In state 14104, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 14104, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 14104, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 14102.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                     scalar_timing_check_condition 
                                                                                                                                                                                                                     expression 
                                                                                                                                                                                                                     primary 
                                                                                                                                                                                                                     (?)

** In state 14102, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 14102, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 14102, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 14057.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA expression COMMA expression COMMA identifier COMMA mintypmax_expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA expression COMMA expression COMMA identifier COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                     expression 
                                                                                                                                                                                                                                                                                                     primary 
                                                                                                                                                                                                                                                                                                     (?)

** In state 14057, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 14057, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 14057, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 14012.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA expression COMMA expression COMMA identifier COMMA COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA expression COMMA expression COMMA identifier COMMA COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                expression 
                                                                                                                                                                                                                                                                                primary 
                                                                                                                                                                                                                                                                                (?)

** In state 14012, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 14012, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 14012, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 14009.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA expression COMMA expression COMMA identifier COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA expression COMMA expression COMMA identifier COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                          expression 
                                                                                                                                                                                                                                                                          primary 
                                                                                                                                                                                                                                                                          (?)

** In state 14009, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 14009, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 14009, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 13964.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA expression COMMA expression COMMA COMMA mintypmax_expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA expression COMMA expression COMMA COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                          expression 
                                                                                                                                                                                                                                                                                          primary 
                                                                                                                                                                                                                                                                                          (?)

** In state 13964, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 13964, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 13964, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 13919.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA expression COMMA expression COMMA COMMA COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA expression COMMA expression COMMA COMMA COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                     expression 
                                                                                                                                                                                                                                                                     primary 
                                                                                                                                                                                                                                                                     (?)

** In state 13919, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 13919, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 13919, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 13916.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA expression COMMA expression COMMA COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA expression COMMA expression COMMA COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                               expression 
                                                                                                                                                                                                                                                               primary 
                                                                                                                                                                                                                                                               (?)

** In state 13916, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 13916, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 13916, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 13909.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                        primary 
                                                                                                                                                                                                                                        (?)

** In state 13909, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 13909, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 13909, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 13907.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                       primary 
                                                                                                                                                                                                                       (?)

** In state 13907, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 13907, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 13907, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 13865.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA identifier COMMA mintypmax_expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA identifier COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                                        expression 
                                                                                                                                                                                                                                                                                                                                        primary 
                                                                                                                                                                                                                                                                                                                                        (?)

** In state 13865, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 13865, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 13865, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 13820.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA identifier COMMA COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA identifier COMMA COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                   expression 
                                                                                                                                                                                                                                                                                                                   primary 
                                                                                                                                                                                                                                                                                                                   (?)

** In state 13820, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 13820, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 13820, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 13817.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA identifier COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA identifier COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                             expression 
                                                                                                                                                                                                                                                                                                             primary 
                                                                                                                                                                                                                                                                                                             (?)

** In state 13817, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 13817, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 13817, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 13772.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA COMMA mintypmax_expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                             expression 
                                                                                                                                                                                                                                                                                                                             primary 
                                                                                                                                                                                                                                                                                                                             (?)

** In state 13772, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 13772, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 13772, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 13727.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA COMMA COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA COMMA COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                        expression 
                                                                                                                                                                                                                                                                                                        primary 
                                                                                                                                                                                                                                                                                                        (?)

** In state 13727, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 13727, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 13727, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 13724.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                  expression 
                                                                                                                                                                                                                                                                                                  primary 
                                                                                                                                                                                                                                                                                                  (?)

** In state 13724, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 13724, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 13724, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 13717.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                           primary 
                                                                                                                                                                                                                                                                           (?)

** In state 13717, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 13717, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 13717, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 13715.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                          primary 
                                                                                                                                                                                                                                                          (?)

** In state 13715, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 13715, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 13715, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 13713.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                             scalar_timing_check_condition 
                                                                                                                                                                                                                             expression 
                                                                                                                                                                                                                             primary 
                                                                                                                                                                                                                             (?)

** In state 13713, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 13713, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 13713, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 13670.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression COMMA identifier COMMA mintypmax_expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression COMMA identifier COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                                expression 
                                                                                                                                                                                                                                                                                                                                primary 
                                                                                                                                                                                                                                                                                                                                (?)

** In state 13670, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 13670, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 13670, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 13625.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression COMMA identifier COMMA COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression COMMA identifier COMMA COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                           expression 
                                                                                                                                                                                                                                                                                                           primary 
                                                                                                                                                                                                                                                                                                           (?)

** In state 13625, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 13625, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 13625, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 13622.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression COMMA identifier COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression COMMA identifier COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                     expression 
                                                                                                                                                                                                                                                                                                     primary 
                                                                                                                                                                                                                                                                                                     (?)

** In state 13622, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 13622, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 13622, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 13577.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression COMMA COMMA mintypmax_expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression COMMA COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                     expression 
                                                                                                                                                                                                                                                                                                                     primary 
                                                                                                                                                                                                                                                                                                                     (?)

** In state 13577, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 13577, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 13577, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 13532.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression COMMA COMMA COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression COMMA COMMA COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                expression 
                                                                                                                                                                                                                                                                                                primary 
                                                                                                                                                                                                                                                                                                (?)

** In state 13532, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 13532, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 13532, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 13529.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression COMMA COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression COMMA COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                          expression 
                                                                                                                                                                                                                                                                                          primary 
                                                                                                                                                                                                                                                                                          (?)

** In state 13529, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 13529, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 13529, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 13522.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                   primary 
                                                                                                                                                                                                                                                                   (?)

** In state 13522, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 13522, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 13522, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 13520.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                  primary 
                                                                                                                                                                                                                                                  (?)

** In state 13520, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 13520, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 13520, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 13478.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA identifier COMMA mintypmax_expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA identifier COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                                                                   expression 
                                                                                                                                                                                                                                                                                                                                                                   primary 
                                                                                                                                                                                                                                                                                                                                                                   (?)

** In state 13478, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 13478, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 13478, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 13433.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA identifier COMMA COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA identifier COMMA COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                                              expression 
                                                                                                                                                                                                                                                                                                                                              primary 
                                                                                                                                                                                                                                                                                                                                              (?)

** In state 13433, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 13433, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 13433, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 13430.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA identifier COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA identifier COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                                        expression 
                                                                                                                                                                                                                                                                                                                                        primary 
                                                                                                                                                                                                                                                                                                                                        (?)

** In state 13430, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 13430, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 13430, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 13385.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA COMMA mintypmax_expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                                                        expression 
                                                                                                                                                                                                                                                                                                                                                        primary 
                                                                                                                                                                                                                                                                                                                                                        (?)

** In state 13385, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 13385, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 13385, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 13340.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA COMMA COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA COMMA COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                                   expression 
                                                                                                                                                                                                                                                                                                                                   primary 
                                                                                                                                                                                                                                                                                                                                   (?)

** In state 13340, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 13340, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 13340, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 13337.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                             expression 
                                                                                                                                                                                                                                                                                                                             primary 
                                                                                                                                                                                                                                                                                                                             (?)

** In state 13337, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 13337, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 13337, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 13330.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                      primary 
                                                                                                                                                                                                                                                                                                      (?)

** In state 13330, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 13330, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 13330, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 13328.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                     primary 
                                                                                                                                                                                                                                                                                     (?)

** In state 13328, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 13328, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 13328, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 13326.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                        scalar_timing_check_condition 
                                                                                                                                                                                                                                                        expression 
                                                                                                                                                                                                                                                        primary 
                                                                                                                                                                                                                                                        (?)

** In state 13326, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 13326, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 13326, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 13321.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                        scalar_timing_check_condition 
                                                                                                                                                        expression 
                                                                                                                                                        primary 
                                                                                                                                                        (?)

** In state 13321, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 13321, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 13321, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 13278.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA expression COMMA expression COMMA identifier COMMA mintypmax_expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA expression COMMA expression COMMA identifier COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                             expression 
                                                                                                                                                                                                                                                                                             primary 
                                                                                                                                                                                                                                                                                             (?)

** In state 13278, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 13278, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 13278, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 13233.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA expression COMMA expression COMMA identifier COMMA COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA expression COMMA expression COMMA identifier COMMA COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                        expression 
                                                                                                                                                                                                                                                                        primary 
                                                                                                                                                                                                                                                                        (?)

** In state 13233, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 13233, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 13233, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 13230.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA expression COMMA expression COMMA identifier COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA expression COMMA expression COMMA identifier COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                  expression 
                                                                                                                                                                                                                                                                  primary 
                                                                                                                                                                                                                                                                  (?)

** In state 13230, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 13230, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 13230, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 13185.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA expression COMMA expression COMMA COMMA mintypmax_expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA expression COMMA expression COMMA COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                  expression 
                                                                                                                                                                                                                                                                                  primary 
                                                                                                                                                                                                                                                                                  (?)

** In state 13185, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 13185, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 13185, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 13140.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA expression COMMA expression COMMA COMMA COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA expression COMMA expression COMMA COMMA COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                             expression 
                                                                                                                                                                                                                                                             primary 
                                                                                                                                                                                                                                                             (?)

** In state 13140, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 13140, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 13140, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 13137.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA expression COMMA expression COMMA COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA expression COMMA expression COMMA COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                       expression 
                                                                                                                                                                                                                                                       primary 
                                                                                                                                                                                                                                                       (?)

** In state 13137, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 13137, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 13137, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 13130.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                primary 
                                                                                                                                                                                                                                (?)

** In state 13130, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 13130, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 13130, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 13128.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                               primary 
                                                                                                                                                                                                               (?)

** In state 13128, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 13128, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 13128, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 13086.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA identifier COMMA mintypmax_expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA identifier COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                                expression 
                                                                                                                                                                                                                                                                                                                                primary 
                                                                                                                                                                                                                                                                                                                                (?)

** In state 13086, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 13086, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 13086, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 13041.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA identifier COMMA COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA identifier COMMA COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                           expression 
                                                                                                                                                                                                                                                                                                           primary 
                                                                                                                                                                                                                                                                                                           (?)

** In state 13041, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 13041, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 13041, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 13038.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA identifier COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA identifier COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                     expression 
                                                                                                                                                                                                                                                                                                     primary 
                                                                                                                                                                                                                                                                                                     (?)

** In state 13038, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 13038, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 13038, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 12993.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA COMMA mintypmax_expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                     expression 
                                                                                                                                                                                                                                                                                                                     primary 
                                                                                                                                                                                                                                                                                                                     (?)

** In state 12993, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 12993, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 12993, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 12948.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA COMMA COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA COMMA COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                expression 
                                                                                                                                                                                                                                                                                                primary 
                                                                                                                                                                                                                                                                                                (?)

** In state 12948, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 12948, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 12948, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 12945.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                          expression 
                                                                                                                                                                                                                                                                                          primary 
                                                                                                                                                                                                                                                                                          (?)

** In state 12945, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 12945, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 12945, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 12938.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                   primary 
                                                                                                                                                                                                                                                                   (?)

** In state 12938, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 12938, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 12938, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 12936.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                  primary 
                                                                                                                                                                                                                                                  (?)

** In state 12936, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 12936, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 12936, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 12934.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                     scalar_timing_check_condition 
                                                                                                                                                                                                                     expression 
                                                                                                                                                                                                                     primary 
                                                                                                                                                                                                                     (?)

** In state 12934, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 12934, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 12934, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 12891.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression COMMA identifier COMMA mintypmax_expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression COMMA identifier COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                        expression 
                                                                                                                                                                                                                                                                                                                        primary 
                                                                                                                                                                                                                                                                                                                        (?)

** In state 12891, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 12891, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 12891, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 12846.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression COMMA identifier COMMA COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression COMMA identifier COMMA COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                   expression 
                                                                                                                                                                                                                                                                                                   primary 
                                                                                                                                                                                                                                                                                                   (?)

** In state 12846, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 12846, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 12846, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 12843.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression COMMA identifier COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression COMMA identifier COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                             expression 
                                                                                                                                                                                                                                                                                             primary 
                                                                                                                                                                                                                                                                                             (?)

** In state 12843, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 12843, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 12843, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 12798.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression COMMA COMMA mintypmax_expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression COMMA COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                             expression 
                                                                                                                                                                                                                                                                                                             primary 
                                                                                                                                                                                                                                                                                                             (?)

** In state 12798, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 12798, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 12798, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 12753.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression COMMA COMMA COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression COMMA COMMA COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                        expression 
                                                                                                                                                                                                                                                                                        primary 
                                                                                                                                                                                                                                                                                        (?)

** In state 12753, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 12753, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 12753, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 12750.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression COMMA COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression COMMA COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                  expression 
                                                                                                                                                                                                                                                                                  primary 
                                                                                                                                                                                                                                                                                  (?)

** In state 12750, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 12750, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 12750, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 12743.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                           primary 
                                                                                                                                                                                                                                                           (?)

** In state 12743, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 12743, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 12743, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 12741.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                          primary 
                                                                                                                                                                                                                                          (?)

** In state 12741, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 12741, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 12741, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 12699.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA identifier COMMA mintypmax_expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA identifier COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                                                           expression 
                                                                                                                                                                                                                                                                                                                                                           primary 
                                                                                                                                                                                                                                                                                                                                                           (?)

** In state 12699, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 12699, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 12699, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 12654.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA identifier COMMA COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA identifier COMMA COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                                      expression 
                                                                                                                                                                                                                                                                                                                                      primary 
                                                                                                                                                                                                                                                                                                                                      (?)

** In state 12654, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 12654, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 12654, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 12651.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA identifier COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA identifier COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                                expression 
                                                                                                                                                                                                                                                                                                                                primary 
                                                                                                                                                                                                                                                                                                                                (?)

** In state 12651, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 12651, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 12651, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 12606.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA COMMA mintypmax_expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                                                expression 
                                                                                                                                                                                                                                                                                                                                                primary 
                                                                                                                                                                                                                                                                                                                                                (?)

** In state 12606, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 12606, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 12606, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 12561.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA COMMA COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA COMMA COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                           expression 
                                                                                                                                                                                                                                                                                                                           primary 
                                                                                                                                                                                                                                                                                                                           (?)

** In state 12561, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 12561, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 12561, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 12558.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                     expression 
                                                                                                                                                                                                                                                                                                                     primary 
                                                                                                                                                                                                                                                                                                                     (?)

** In state 12558, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 12558, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 12558, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 12551.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                              primary 
                                                                                                                                                                                                                                                                                              (?)

** In state 12551, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 12551, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 12551, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 12549.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                             primary 
                                                                                                                                                                                                                                                                             (?)

** In state 12549, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 12549, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 12549, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 12547.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                scalar_timing_check_condition 
                                                                                                                                                                                                                                                expression 
                                                                                                                                                                                                                                                primary 
                                                                                                                                                                                                                                                (?)

** In state 12547, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 12547, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 12547, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 12502.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA expression COMMA expression COMMA identifier COMMA mintypmax_expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA expression COMMA expression COMMA identifier COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                                expression 
                                                                                                                                                                                                                                                                                                                                primary 
                                                                                                                                                                                                                                                                                                                                (?)

** In state 12502, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 12502, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 12502, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 12457.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA expression COMMA expression COMMA identifier COMMA COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA expression COMMA expression COMMA identifier COMMA COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                           expression 
                                                                                                                                                                                                                                                                                                           primary 
                                                                                                                                                                                                                                                                                                           (?)

** In state 12457, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 12457, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 12457, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 12454.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA expression COMMA expression COMMA identifier COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA expression COMMA expression COMMA identifier COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                     expression 
                                                                                                                                                                                                                                                                                                     primary 
                                                                                                                                                                                                                                                                                                     (?)

** In state 12454, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 12454, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 12454, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 12409.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA expression COMMA expression COMMA COMMA mintypmax_expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA expression COMMA expression COMMA COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                     expression 
                                                                                                                                                                                                                                                                                                                     primary 
                                                                                                                                                                                                                                                                                                                     (?)

** In state 12409, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 12409, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 12409, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 12364.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA expression COMMA expression COMMA COMMA COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA expression COMMA expression COMMA COMMA COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                expression 
                                                                                                                                                                                                                                                                                                primary 
                                                                                                                                                                                                                                                                                                (?)

** In state 12364, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 12364, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 12364, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 12361.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA expression COMMA expression COMMA COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA expression COMMA expression COMMA COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                          expression 
                                                                                                                                                                                                                                                                                          primary 
                                                                                                                                                                                                                                                                                          (?)

** In state 12361, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 12361, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 12361, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 12354.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                   primary 
                                                                                                                                                                                                                                                                   (?)

** In state 12354, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 12354, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 12354, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 12352.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                  primary 
                                                                                                                                                                                                                                                  (?)

** In state 12352, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 12352, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 12352, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 12310.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA identifier COMMA mintypmax_expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA identifier COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                                                                   expression 
                                                                                                                                                                                                                                                                                                                                                                   primary 
                                                                                                                                                                                                                                                                                                                                                                   (?)

** In state 12310, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 12310, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 12310, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 12265.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA identifier COMMA COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA identifier COMMA COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                                              expression 
                                                                                                                                                                                                                                                                                                                                              primary 
                                                                                                                                                                                                                                                                                                                                              (?)

** In state 12265, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 12265, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 12265, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 12262.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA identifier COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA identifier COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                                        expression 
                                                                                                                                                                                                                                                                                                                                        primary 
                                                                                                                                                                                                                                                                                                                                        (?)

** In state 12262, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 12262, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 12262, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 12217.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA COMMA mintypmax_expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                                                        expression 
                                                                                                                                                                                                                                                                                                                                                        primary 
                                                                                                                                                                                                                                                                                                                                                        (?)

** In state 12217, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 12217, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 12217, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 12172.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA COMMA COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA COMMA COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                                   expression 
                                                                                                                                                                                                                                                                                                                                   primary 
                                                                                                                                                                                                                                                                                                                                   (?)

** In state 12172, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 12172, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 12172, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 12169.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                             expression 
                                                                                                                                                                                                                                                                                                                             primary 
                                                                                                                                                                                                                                                                                                                             (?)

** In state 12169, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 12169, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 12169, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 12162.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                      primary 
                                                                                                                                                                                                                                                                                                      (?)

** In state 12162, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 12162, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 12162, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 12160.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                     primary 
                                                                                                                                                                                                                                                                                     (?)

** In state 12160, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 12160, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 12160, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 12158.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                        scalar_timing_check_condition 
                                                                                                                                                                                                                                                        expression 
                                                                                                                                                                                                                                                        primary 
                                                                                                                                                                                                                                                        (?)

** In state 12158, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 12158, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 12158, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 12115.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression COMMA identifier COMMA mintypmax_expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression COMMA identifier COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                                                           expression 
                                                                                                                                                                                                                                                                                                                                                           primary 
                                                                                                                                                                                                                                                                                                                                                           (?)

** In state 12115, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 12115, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 12115, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 12070.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression COMMA identifier COMMA COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression COMMA identifier COMMA COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                                      expression 
                                                                                                                                                                                                                                                                                                                                      primary 
                                                                                                                                                                                                                                                                                                                                      (?)

** In state 12070, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 12070, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 12070, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 12067.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression COMMA identifier COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression COMMA identifier COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                                expression 
                                                                                                                                                                                                                                                                                                                                primary 
                                                                                                                                                                                                                                                                                                                                (?)

** In state 12067, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 12067, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 12067, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 12022.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression COMMA COMMA mintypmax_expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression COMMA COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                                                expression 
                                                                                                                                                                                                                                                                                                                                                primary 
                                                                                                                                                                                                                                                                                                                                                (?)

** In state 12022, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 12022, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 12022, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 11977.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression COMMA COMMA COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression COMMA COMMA COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                           expression 
                                                                                                                                                                                                                                                                                                                           primary 
                                                                                                                                                                                                                                                                                                                           (?)

** In state 11977, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 11977, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 11977, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 11974.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression COMMA COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression COMMA COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                     expression 
                                                                                                                                                                                                                                                                                                                     primary 
                                                                                                                                                                                                                                                                                                                     (?)

** In state 11974, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 11974, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 11974, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 11967.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                              primary 
                                                                                                                                                                                                                                                                                              (?)

** In state 11967, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 11967, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 11967, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 11965.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                             primary 
                                                                                                                                                                                                                                                                             (?)

** In state 11965, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 11965, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 11965, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 11923.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA identifier COMMA mintypmax_expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA identifier COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                                                                                              expression 
                                                                                                                                                                                                                                                                                                                                                                                              primary 
                                                                                                                                                                                                                                                                                                                                                                                              (?)

** In state 11923, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 11923, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 11923, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 11878.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA identifier COMMA COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA identifier COMMA COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                                                                         expression 
                                                                                                                                                                                                                                                                                                                                                                         primary 
                                                                                                                                                                                                                                                                                                                                                                         (?)

** In state 11878, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 11878, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 11878, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 11875.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA identifier COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA identifier COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                                                                   expression 
                                                                                                                                                                                                                                                                                                                                                                   primary 
                                                                                                                                                                                                                                                                                                                                                                   (?)

** In state 11875, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 11875, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 11875, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 11830.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA COMMA mintypmax_expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                                                                                   expression 
                                                                                                                                                                                                                                                                                                                                                                                   primary 
                                                                                                                                                                                                                                                                                                                                                                                   (?)

** In state 11830, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 11830, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 11830, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 11785.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA COMMA COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA COMMA COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                                                              expression 
                                                                                                                                                                                                                                                                                                                                                              primary 
                                                                                                                                                                                                                                                                                                                                                              (?)

** In state 11785, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 11785, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 11785, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 11782.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                                                        expression 
                                                                                                                                                                                                                                                                                                                                                        primary 
                                                                                                                                                                                                                                                                                                                                                        (?)

** In state 11782, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 11782, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 11782, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 11775.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                                 primary 
                                                                                                                                                                                                                                                                                                                                 (?)

** In state 11775, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 11775, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 11775, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 11773.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                primary 
                                                                                                                                                                                                                                                                                                                (?)

** In state 11773, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 11773, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 11773, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 11771.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                   scalar_timing_check_condition 
                                                                                                                                                                                                                                                                                   expression 
                                                                                                                                                                                                                                                                                   primary 
                                                                                                                                                                                                                                                                                   (?)

** In state 11771, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 11771, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 11771, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 11766.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_RECREM LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                   scalar_timing_check_condition 
                                                                                                                                                                                   expression 
                                                                                                                                                                                   primary 
                                                                                                                                                                                   (?)

** In state 11766, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 11766, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 11766, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 11752.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_REMOVAL LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_REMOVAL LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                     primary 
                                                                                                                                                                                     (?)

** In state 11752, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 11752, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 11752, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 11742.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_REMOVAL LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_REMOVAL LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                        primary 
                                                                                                                                                                                                                        (?)

** In state 11742, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 11742, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 11742, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 11740.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_REMOVAL LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_REMOVAL LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                           scalar_timing_check_condition 
                                                                                                                                                                                           expression 
                                                                                                                                                                                           primary 
                                                                                                                                                                                           (?)

** In state 11740, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 11740, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 11740, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 11729.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_REMOVAL LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_REMOVAL LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                primary 
                                                                                                                                                                                                                (?)

** In state 11729, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 11729, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 11729, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 11719.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_REMOVAL LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_REMOVAL LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                   primary 
                                                                                                                                                                                                                                                   (?)

** In state 11719, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 11719, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 11719, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 11717.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_REMOVAL LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_REMOVAL LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                      scalar_timing_check_condition 
                                                                                                                                                                                                                      expression 
                                                                                                                                                                                                                      primary 
                                                                                                                                                                                                                      (?)

** In state 11717, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 11717, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 11717, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 11704.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_REMOVAL LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_REMOVAL LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                        primary 
                                                                                                                                                                                                                        (?)

** In state 11704, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 11704, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 11704, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 11694.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_REMOVAL LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_REMOVAL LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                           primary 
                                                                                                                                                                                                                                                           (?)

** In state 11694, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 11694, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 11694, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 11692.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_REMOVAL LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_REMOVAL LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                              scalar_timing_check_condition 
                                                                                                                                                                                                                              expression 
                                                                                                                                                                                                                              primary 
                                                                                                                                                                                                                              (?)

** In state 11692, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 11692, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 11692, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 11681.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_REMOVAL LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_REMOVAL LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                   primary 
                                                                                                                                                                                                                                                   (?)

** In state 11681, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 11681, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 11681, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 11671.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_REMOVAL LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_REMOVAL LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                      primary 
                                                                                                                                                                                                                                                                                      (?)

** In state 11671, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 11671, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 11671, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 11669.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_REMOVAL LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_REMOVAL LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                         scalar_timing_check_condition 
                                                                                                                                                                                                                                                         expression 
                                                                                                                                                                                                                                                         primary 
                                                                                                                                                                                                                                                         (?)

** In state 11669, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 11669, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 11669, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 11664.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_REMOVAL LPAREN specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_REMOVAL LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA expression RPAREN SEMICOLON 
                                                                                                                                                         scalar_timing_check_condition 
                                                                                                                                                         expression 
                                                                                                                                                         primary 
                                                                                                                                                         (?)

** In state 11664, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 11664, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 11664, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 11653.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_REMOVAL LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_REMOVAL LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                primary 
                                                                                                                                                                                                                (?)

** In state 11653, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 11653, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 11653, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 11643.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_REMOVAL LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_REMOVAL LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                   primary 
                                                                                                                                                                                                                                                   (?)

** In state 11643, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 11643, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 11643, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 11641.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_REMOVAL LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_REMOVAL LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                      scalar_timing_check_condition 
                                                                                                                                                                                                                      expression 
                                                                                                                                                                                                                      primary 
                                                                                                                                                                                                                      (?)

** In state 11641, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 11641, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 11641, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 11630.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_REMOVAL LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_REMOVAL LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                           primary 
                                                                                                                                                                                                                                           (?)

** In state 11630, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 11630, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 11630, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 11620.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_REMOVAL LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_REMOVAL LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                              primary 
                                                                                                                                                                                                                                                                              (?)

** In state 11620, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 11620, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 11620, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 11618.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_REMOVAL LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_REMOVAL LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                 scalar_timing_check_condition 
                                                                                                                                                                                                                                                 expression 
                                                                                                                                                                                                                                                 primary 
                                                                                                                                                                                                                                                 (?)

** In state 11618, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 11618, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 11618, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 11605.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_REMOVAL LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_REMOVAL LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                   primary 
                                                                                                                                                                                                                                                   (?)

** In state 11605, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 11605, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 11605, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 11595.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_REMOVAL LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_REMOVAL LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                      primary 
                                                                                                                                                                                                                                                                                      (?)

** In state 11595, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 11595, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 11595, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 11593.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_REMOVAL LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_REMOVAL LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                         scalar_timing_check_condition 
                                                                                                                                                                                                                                                         expression 
                                                                                                                                                                                                                                                         primary 
                                                                                                                                                                                                                                                         (?)

** In state 11593, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 11593, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 11593, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 11582.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_REMOVAL LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_REMOVAL LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                              primary 
                                                                                                                                                                                                                                                                              (?)

** In state 11582, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 11582, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 11582, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 11572.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_REMOVAL LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_REMOVAL LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                 primary 
                                                                                                                                                                                                                                                                                                                 (?)

** In state 11572, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 11572, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 11572, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 11570.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_REMOVAL LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_REMOVAL LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                    scalar_timing_check_condition 
                                                                                                                                                                                                                                                                                    expression 
                                                                                                                                                                                                                                                                                    primary 
                                                                                                                                                                                                                                                                                    (?)

** In state 11570, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 11570, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 11570, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 11565.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_REMOVAL LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_REMOVAL LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                    scalar_timing_check_condition 
                                                                                                                                                                                    expression 
                                                                                                                                                                                    primary 
                                                                                                                                                                                    (?)

** In state 11565, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 11565, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 11565, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 11551.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUP LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUP LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                   primary 
                                                                                                                                                                                   (?)

** In state 11551, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 11551, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 11551, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 11541.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUP LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUP LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                      primary 
                                                                                                                                                                                                                      (?)

** In state 11541, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 11541, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 11541, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 11539.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUP LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUP LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                         scalar_timing_check_condition 
                                                                                                                                                                                         expression 
                                                                                                                                                                                         primary 
                                                                                                                                                                                         (?)

** In state 11539, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 11539, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 11539, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 11528.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUP LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUP LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                              primary 
                                                                                                                                                                                                              (?)

** In state 11528, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 11528, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 11528, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 11518.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUP LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUP LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                 primary 
                                                                                                                                                                                                                                                 (?)

** In state 11518, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 11518, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 11518, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 11516.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUP LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUP LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                    scalar_timing_check_condition 
                                                                                                                                                                                                                    expression 
                                                                                                                                                                                                                    primary 
                                                                                                                                                                                                                    (?)

** In state 11516, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 11516, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 11516, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 11503.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUP LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUP LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                      primary 
                                                                                                                                                                                                                      (?)

** In state 11503, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 11503, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 11503, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 11493.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUP LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUP LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                         primary 
                                                                                                                                                                                                                                                         (?)

** In state 11493, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 11493, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 11493, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 11491.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUP LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUP LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                            scalar_timing_check_condition 
                                                                                                                                                                                                                            expression 
                                                                                                                                                                                                                            primary 
                                                                                                                                                                                                                            (?)

** In state 11491, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 11491, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 11491, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 11480.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUP LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUP LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                 primary 
                                                                                                                                                                                                                                                 (?)

** In state 11480, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 11480, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 11480, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 11470.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUP LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUP LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                    primary 
                                                                                                                                                                                                                                                                                    (?)

** In state 11470, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 11470, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 11470, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 11468.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUP LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUP LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                       scalar_timing_check_condition 
                                                                                                                                                                                                                                                       expression 
                                                                                                                                                                                                                                                       primary 
                                                                                                                                                                                                                                                       (?)

** In state 11468, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 11468, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 11468, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 11463.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUP LPAREN specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUP LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA expression RPAREN SEMICOLON 
                                                                                                                                                       scalar_timing_check_condition 
                                                                                                                                                       expression 
                                                                                                                                                       primary 
                                                                                                                                                       (?)

** In state 11463, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 11463, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 11463, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 11452.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUP LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUP LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                              primary 
                                                                                                                                                                                                              (?)

** In state 11452, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 11452, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 11452, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 11442.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUP LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUP LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                 primary 
                                                                                                                                                                                                                                                 (?)

** In state 11442, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 11442, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 11442, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 11440.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUP LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUP LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                    scalar_timing_check_condition 
                                                                                                                                                                                                                    expression 
                                                                                                                                                                                                                    primary 
                                                                                                                                                                                                                    (?)

** In state 11440, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 11440, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 11440, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 11429.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUP LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUP LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                         primary 
                                                                                                                                                                                                                                         (?)

** In state 11429, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 11429, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 11429, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 11419.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUP LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUP LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                            primary 
                                                                                                                                                                                                                                                                            (?)

** In state 11419, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 11419, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 11419, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 11417.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUP LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUP LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                               scalar_timing_check_condition 
                                                                                                                                                                                                                                               expression 
                                                                                                                                                                                                                                               primary 
                                                                                                                                                                                                                                               (?)

** In state 11417, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 11417, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 11417, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 11404.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUP LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUP LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                 primary 
                                                                                                                                                                                                                                                 (?)

** In state 11404, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 11404, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 11404, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 11394.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUP LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUP LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                    primary 
                                                                                                                                                                                                                                                                                    (?)

** In state 11394, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 11394, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 11394, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 11392.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUP LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUP LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                       scalar_timing_check_condition 
                                                                                                                                                                                                                                                       expression 
                                                                                                                                                                                                                                                       primary 
                                                                                                                                                                                                                                                       (?)

** In state 11392, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 11392, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 11392, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 11381.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUP LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUP LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                            primary 
                                                                                                                                                                                                                                                                            (?)

** In state 11381, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 11381, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 11381, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 11371.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUP LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUP LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                               primary 
                                                                                                                                                                                                                                                                                                               (?)

** In state 11371, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 11371, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 11371, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 11369.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUP LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUP LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                  scalar_timing_check_condition 
                                                                                                                                                                                                                                                                                  expression 
                                                                                                                                                                                                                                                                                  primary 
                                                                                                                                                                                                                                                                                  (?)

** In state 11369, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 11369, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 11369, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 11364.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUP LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUP LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                  scalar_timing_check_condition 
                                                                                                                                                                                  expression 
                                                                                                                                                                                  primary 
                                                                                                                                                                                  (?)

** In state 11364, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 11364, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 11364, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 11318.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA expression COMMA expression COMMA identifier COMMA mintypmax_expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA expression COMMA expression COMMA identifier COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                     expression 
                                                                                                                                                                                                                                                                     primary 
                                                                                                                                                                                                                                                                     (?)

** In state 11318, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 11318, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 11318, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 11273.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA expression COMMA expression COMMA identifier COMMA COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA expression COMMA expression COMMA identifier COMMA COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                expression 
                                                                                                                                                                                                                                                primary 
                                                                                                                                                                                                                                                (?)

** In state 11273, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 11273, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 11273, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 11270.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA expression COMMA expression COMMA identifier COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA expression COMMA expression COMMA identifier COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                          expression 
                                                                                                                                                                                                                                          primary 
                                                                                                                                                                                                                                          (?)

** In state 11270, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 11270, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 11270, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 11225.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA expression COMMA expression COMMA COMMA mintypmax_expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA expression COMMA expression COMMA COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                          expression 
                                                                                                                                                                                                                                                          primary 
                                                                                                                                                                                                                                                          (?)

** In state 11225, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 11225, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 11225, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 11180.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA expression COMMA expression COMMA COMMA COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA expression COMMA expression COMMA COMMA COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                     expression 
                                                                                                                                                                                                                                     primary 
                                                                                                                                                                                                                                     (?)

** In state 11180, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 11180, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 11180, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 11177.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA expression COMMA expression COMMA COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA expression COMMA expression COMMA COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                               expression 
                                                                                                                                                                                                                               primary 
                                                                                                                                                                                                                               (?)

** In state 11177, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 11177, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 11177, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 11170.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                        primary 
                                                                                                                                                                                                        (?)

** In state 11170, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 11170, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 11170, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 11168.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                       primary 
                                                                                                                                                                                       (?)

** In state 11168, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 11168, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 11168, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 11126.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA identifier COMMA mintypmax_expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA identifier COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                        expression 
                                                                                                                                                                                                                                                                                                        primary 
                                                                                                                                                                                                                                                                                                        (?)

** In state 11126, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 11126, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 11126, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 11081.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA identifier COMMA COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA identifier COMMA COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                   expression 
                                                                                                                                                                                                                                                                                   primary 
                                                                                                                                                                                                                                                                                   (?)

** In state 11081, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 11081, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 11081, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 11078.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA identifier COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA identifier COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                             expression 
                                                                                                                                                                                                                                                                             primary 
                                                                                                                                                                                                                                                                             (?)

** In state 11078, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 11078, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 11078, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 11033.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA COMMA mintypmax_expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                             expression 
                                                                                                                                                                                                                                                                                             primary 
                                                                                                                                                                                                                                                                                             (?)

** In state 11033, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 11033, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 11033, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 10988.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA COMMA COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA COMMA COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                        expression 
                                                                                                                                                                                                                                                                        primary 
                                                                                                                                                                                                                                                                        (?)

** In state 10988, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 10988, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 10988, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 10985.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                  expression 
                                                                                                                                                                                                                                                                  primary 
                                                                                                                                                                                                                                                                  (?)

** In state 10985, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 10985, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 10985, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 10978.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                           primary 
                                                                                                                                                                                                                                           (?)

** In state 10978, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 10978, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 10978, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 10976.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                          primary 
                                                                                                                                                                                                                          (?)

** In state 10976, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 10976, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 10976, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 10974.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                             scalar_timing_check_condition 
                                                                                                                                                                                             expression 
                                                                                                                                                                                             primary 
                                                                                                                                                                                             (?)

** In state 10974, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 10974, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 10974, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 10931.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression COMMA identifier COMMA mintypmax_expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression COMMA identifier COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                expression 
                                                                                                                                                                                                                                                                                                primary 
                                                                                                                                                                                                                                                                                                (?)

** In state 10931, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 10931, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 10931, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 10886.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression COMMA identifier COMMA COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression COMMA identifier COMMA COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                           expression 
                                                                                                                                                                                                                                                                           primary 
                                                                                                                                                                                                                                                                           (?)

** In state 10886, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 10886, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 10886, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 10883.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression COMMA identifier COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression COMMA identifier COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                     expression 
                                                                                                                                                                                                                                                                     primary 
                                                                                                                                                                                                                                                                     (?)

** In state 10883, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 10883, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 10883, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 10838.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression COMMA COMMA mintypmax_expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression COMMA COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                     expression 
                                                                                                                                                                                                                                                                                     primary 
                                                                                                                                                                                                                                                                                     (?)

** In state 10838, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 10838, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 10838, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 10793.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression COMMA COMMA COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression COMMA COMMA COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                expression 
                                                                                                                                                                                                                                                                primary 
                                                                                                                                                                                                                                                                (?)

** In state 10793, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 10793, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 10793, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 10790.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression COMMA COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression COMMA COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                          expression 
                                                                                                                                                                                                                                                          primary 
                                                                                                                                                                                                                                                          (?)

** In state 10790, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 10790, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 10790, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 10783.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                   primary 
                                                                                                                                                                                                                                   (?)

** In state 10783, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 10783, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 10783, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 10781.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                  primary 
                                                                                                                                                                                                                  (?)

** In state 10781, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 10781, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 10781, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 10739.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA identifier COMMA mintypmax_expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA identifier COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                                   expression 
                                                                                                                                                                                                                                                                                                                                   primary 
                                                                                                                                                                                                                                                                                                                                   (?)

** In state 10739, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 10739, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 10739, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 10694.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA identifier COMMA COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA identifier COMMA COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                              expression 
                                                                                                                                                                                                                                                                                                              primary 
                                                                                                                                                                                                                                                                                                              (?)

** In state 10694, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 10694, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 10694, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 10691.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA identifier COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA identifier COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                        expression 
                                                                                                                                                                                                                                                                                                        primary 
                                                                                                                                                                                                                                                                                                        (?)

** In state 10691, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 10691, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 10691, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 10646.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA COMMA mintypmax_expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                        expression 
                                                                                                                                                                                                                                                                                                                        primary 
                                                                                                                                                                                                                                                                                                                        (?)

** In state 10646, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 10646, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 10646, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 10601.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA COMMA COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA COMMA COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                   expression 
                                                                                                                                                                                                                                                                                                   primary 
                                                                                                                                                                                                                                                                                                   (?)

** In state 10601, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 10601, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 10601, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 10598.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                             expression 
                                                                                                                                                                                                                                                                                             primary 
                                                                                                                                                                                                                                                                                             (?)

** In state 10598, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 10598, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 10598, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 10591.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                      primary 
                                                                                                                                                                                                                                                                      (?)

** In state 10591, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 10591, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 10591, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 10589.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                     primary 
                                                                                                                                                                                                                                                     (?)

** In state 10589, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 10589, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 10589, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 10587.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                        scalar_timing_check_condition 
                                                                                                                                                                                                                        expression 
                                                                                                                                                                                                                        primary 
                                                                                                                                                                                                                        (?)

** In state 10587, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 10587, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 10587, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 10542.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA expression COMMA expression COMMA identifier COMMA mintypmax_expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA expression COMMA expression COMMA identifier COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                        expression 
                                                                                                                                                                                                                                                                                                        primary 
                                                                                                                                                                                                                                                                                                        (?)

** In state 10542, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 10542, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 10542, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 10497.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA expression COMMA expression COMMA identifier COMMA COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA expression COMMA expression COMMA identifier COMMA COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                   expression 
                                                                                                                                                                                                                                                                                   primary 
                                                                                                                                                                                                                                                                                   (?)

** In state 10497, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 10497, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 10497, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 10494.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA expression COMMA expression COMMA identifier COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA expression COMMA expression COMMA identifier COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                             expression 
                                                                                                                                                                                                                                                                             primary 
                                                                                                                                                                                                                                                                             (?)

** In state 10494, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 10494, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 10494, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 10449.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA expression COMMA expression COMMA COMMA mintypmax_expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA expression COMMA expression COMMA COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                             expression 
                                                                                                                                                                                                                                                                                             primary 
                                                                                                                                                                                                                                                                                             (?)

** In state 10449, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 10449, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 10449, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 10404.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA expression COMMA expression COMMA COMMA COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA expression COMMA expression COMMA COMMA COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                        expression 
                                                                                                                                                                                                                                                                        primary 
                                                                                                                                                                                                                                                                        (?)

** In state 10404, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 10404, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 10404, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 10401.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA expression COMMA expression COMMA COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA expression COMMA expression COMMA COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                  expression 
                                                                                                                                                                                                                                                                  primary 
                                                                                                                                                                                                                                                                  (?)

** In state 10401, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 10401, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 10401, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 10394.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                           primary 
                                                                                                                                                                                                                                           (?)

** In state 10394, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 10394, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 10394, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 10392.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                          primary 
                                                                                                                                                                                                                          (?)

** In state 10392, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 10392, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 10392, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 10350.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA identifier COMMA mintypmax_expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA identifier COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                                           expression 
                                                                                                                                                                                                                                                                                                                                           primary 
                                                                                                                                                                                                                                                                                                                                           (?)

** In state 10350, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 10350, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 10350, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 10305.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA identifier COMMA COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA identifier COMMA COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                      expression 
                                                                                                                                                                                                                                                                                                                      primary 
                                                                                                                                                                                                                                                                                                                      (?)

** In state 10305, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 10305, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 10305, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 10302.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA identifier COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA identifier COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                expression 
                                                                                                                                                                                                                                                                                                                primary 
                                                                                                                                                                                                                                                                                                                (?)

** In state 10302, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 10302, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 10302, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 10257.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA COMMA mintypmax_expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                                expression 
                                                                                                                                                                                                                                                                                                                                primary 
                                                                                                                                                                                                                                                                                                                                (?)

** In state 10257, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 10257, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 10257, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 10212.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA COMMA COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA COMMA COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                           expression 
                                                                                                                                                                                                                                                                                                           primary 
                                                                                                                                                                                                                                                                                                           (?)

** In state 10212, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 10212, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 10212, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 10209.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                     expression 
                                                                                                                                                                                                                                                                                                     primary 
                                                                                                                                                                                                                                                                                                     (?)

** In state 10209, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 10209, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 10209, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 10202.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                              primary 
                                                                                                                                                                                                                                                                              (?)

** In state 10202, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 10202, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 10202, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 10200.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                             primary 
                                                                                                                                                                                                                                                             (?)

** In state 10200, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 10200, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 10200, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 10198.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                scalar_timing_check_condition 
                                                                                                                                                                                                                                expression 
                                                                                                                                                                                                                                primary 
                                                                                                                                                                                                                                (?)

** In state 10198, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 10198, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 10198, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 10155.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression COMMA identifier COMMA mintypmax_expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression COMMA identifier COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                                   expression 
                                                                                                                                                                                                                                                                                                                                   primary 
                                                                                                                                                                                                                                                                                                                                   (?)

** In state 10155, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 10155, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 10155, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 10110.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression COMMA identifier COMMA COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression COMMA identifier COMMA COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                              expression 
                                                                                                                                                                                                                                                                                                              primary 
                                                                                                                                                                                                                                                                                                              (?)

** In state 10110, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 10110, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 10110, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 10107.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression COMMA identifier COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression COMMA identifier COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                        expression 
                                                                                                                                                                                                                                                                                                        primary 
                                                                                                                                                                                                                                                                                                        (?)

** In state 10107, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 10107, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 10107, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 10062.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression COMMA COMMA mintypmax_expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression COMMA COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                        expression 
                                                                                                                                                                                                                                                                                                                        primary 
                                                                                                                                                                                                                                                                                                                        (?)

** In state 10062, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 10062, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 10062, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 10017.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression COMMA COMMA COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression COMMA COMMA COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                   expression 
                                                                                                                                                                                                                                                                                                   primary 
                                                                                                                                                                                                                                                                                                   (?)

** In state 10017, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 10017, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 10017, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 10014.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression COMMA COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression COMMA COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                             expression 
                                                                                                                                                                                                                                                                                             primary 
                                                                                                                                                                                                                                                                                             (?)

** In state 10014, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 10014, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 10014, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 10007.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                      primary 
                                                                                                                                                                                                                                                                      (?)

** In state 10007, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 10007, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 10007, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 10005.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                     primary 
                                                                                                                                                                                                                                                     (?)

** In state 10005, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 10005, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 10005, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 9963.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA identifier COMMA mintypmax_expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA identifier COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                                                                      expression 
                                                                                                                                                                                                                                                                                                                                                                      primary 
                                                                                                                                                                                                                                                                                                                                                                      (?)

** In state 9963, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 9963, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 9963, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 9918.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA identifier COMMA COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA identifier COMMA COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                                                 expression 
                                                                                                                                                                                                                                                                                                                                                 primary 
                                                                                                                                                                                                                                                                                                                                                 (?)

** In state 9918, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 9918, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 9918, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 9915.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA identifier COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA identifier COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                                           expression 
                                                                                                                                                                                                                                                                                                                                           primary 
                                                                                                                                                                                                                                                                                                                                           (?)

** In state 9915, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 9915, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 9915, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 9870.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA COMMA mintypmax_expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                                                           expression 
                                                                                                                                                                                                                                                                                                                                                           primary 
                                                                                                                                                                                                                                                                                                                                                           (?)

** In state 9870, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 9870, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 9870, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 9825.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA COMMA COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA COMMA COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                                      expression 
                                                                                                                                                                                                                                                                                                                                      primary 
                                                                                                                                                                                                                                                                                                                                      (?)

** In state 9825, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 9825, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 9825, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 9822.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                                expression 
                                                                                                                                                                                                                                                                                                                                primary 
                                                                                                                                                                                                                                                                                                                                (?)

** In state 9822, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 9822, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 9822, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 9815.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                         primary 
                                                                                                                                                                                                                                                                                                         (?)

** In state 9815, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 9815, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 9815, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 9813.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                        primary 
                                                                                                                                                                                                                                                                                        (?)

** In state 9813, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 9813, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 9813, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 9811.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                           scalar_timing_check_condition 
                                                                                                                                                                                                                                                           expression 
                                                                                                                                                                                                                                                           primary 
                                                                                                                                                                                                                                                           (?)

** In state 9811, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 9811, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 9811, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 9806.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                           scalar_timing_check_condition 
                                                                                                                                                           expression 
                                                                                                                                                           primary 
                                                                                                                                                           (?)

** In state 9806, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 9806, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 9806, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 9763.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA expression COMMA expression COMMA identifier COMMA mintypmax_expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA expression COMMA expression COMMA identifier COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                expression 
                                                                                                                                                                                                                                                                                                primary 
                                                                                                                                                                                                                                                                                                (?)

** In state 9763, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 9763, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 9763, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 9718.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA expression COMMA expression COMMA identifier COMMA COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA expression COMMA expression COMMA identifier COMMA COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                           expression 
                                                                                                                                                                                                                                                                           primary 
                                                                                                                                                                                                                                                                           (?)

** In state 9718, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 9718, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 9718, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 9715.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA expression COMMA expression COMMA identifier COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA expression COMMA expression COMMA identifier COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                     expression 
                                                                                                                                                                                                                                                                     primary 
                                                                                                                                                                                                                                                                     (?)

** In state 9715, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 9715, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 9715, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 9670.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA expression COMMA expression COMMA COMMA mintypmax_expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA expression COMMA expression COMMA COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                     expression 
                                                                                                                                                                                                                                                                                     primary 
                                                                                                                                                                                                                                                                                     (?)

** In state 9670, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 9670, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 9670, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 9625.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA expression COMMA expression COMMA COMMA COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA expression COMMA expression COMMA COMMA COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                expression 
                                                                                                                                                                                                                                                                primary 
                                                                                                                                                                                                                                                                (?)

** In state 9625, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 9625, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 9625, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 9622.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA expression COMMA expression COMMA COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA expression COMMA expression COMMA COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                          expression 
                                                                                                                                                                                                                                                          primary 
                                                                                                                                                                                                                                                          (?)

** In state 9622, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 9622, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 9622, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 9615.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                   primary 
                                                                                                                                                                                                                                   (?)

** In state 9615, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 9615, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 9615, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 9613.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                  primary 
                                                                                                                                                                                                                  (?)

** In state 9613, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 9613, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 9613, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 9571.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA identifier COMMA mintypmax_expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA identifier COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                                   expression 
                                                                                                                                                                                                                                                                                                                                   primary 
                                                                                                                                                                                                                                                                                                                                   (?)

** In state 9571, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 9571, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 9571, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 9526.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA identifier COMMA COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA identifier COMMA COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                              expression 
                                                                                                                                                                                                                                                                                                              primary 
                                                                                                                                                                                                                                                                                                              (?)

** In state 9526, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 9526, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 9526, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 9523.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA identifier COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA identifier COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                        expression 
                                                                                                                                                                                                                                                                                                        primary 
                                                                                                                                                                                                                                                                                                        (?)

** In state 9523, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 9523, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 9523, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 9478.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA COMMA mintypmax_expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                        expression 
                                                                                                                                                                                                                                                                                                                        primary 
                                                                                                                                                                                                                                                                                                                        (?)

** In state 9478, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 9478, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 9478, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 9433.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA COMMA COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA COMMA COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                   expression 
                                                                                                                                                                                                                                                                                                   primary 
                                                                                                                                                                                                                                                                                                   (?)

** In state 9433, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 9433, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 9433, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 9430.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                             expression 
                                                                                                                                                                                                                                                                                             primary 
                                                                                                                                                                                                                                                                                             (?)

** In state 9430, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 9430, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 9430, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 9423.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                      primary 
                                                                                                                                                                                                                                                                      (?)

** In state 9423, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 9423, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 9423, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 9421.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                     primary 
                                                                                                                                                                                                                                                     (?)

** In state 9421, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 9421, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 9421, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 9419.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                        scalar_timing_check_condition 
                                                                                                                                                                                                                        expression 
                                                                                                                                                                                                                        primary 
                                                                                                                                                                                                                        (?)

** In state 9419, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 9419, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 9419, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 9376.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression COMMA identifier COMMA mintypmax_expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression COMMA identifier COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                           expression 
                                                                                                                                                                                                                                                                                                                           primary 
                                                                                                                                                                                                                                                                                                                           (?)

** In state 9376, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 9376, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 9376, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 9331.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression COMMA identifier COMMA COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression COMMA identifier COMMA COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                      expression 
                                                                                                                                                                                                                                                                                                      primary 
                                                                                                                                                                                                                                                                                                      (?)

** In state 9331, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 9331, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 9331, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 9328.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression COMMA identifier COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression COMMA identifier COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                expression 
                                                                                                                                                                                                                                                                                                primary 
                                                                                                                                                                                                                                                                                                (?)

** In state 9328, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 9328, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 9328, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 9283.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression COMMA COMMA mintypmax_expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression COMMA COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                expression 
                                                                                                                                                                                                                                                                                                                primary 
                                                                                                                                                                                                                                                                                                                (?)

** In state 9283, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 9283, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 9283, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 9238.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression COMMA COMMA COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression COMMA COMMA COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                           expression 
                                                                                                                                                                                                                                                                                           primary 
                                                                                                                                                                                                                                                                                           (?)

** In state 9238, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 9238, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 9238, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 9235.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression COMMA COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression COMMA COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                     expression 
                                                                                                                                                                                                                                                                                     primary 
                                                                                                                                                                                                                                                                                     (?)

** In state 9235, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 9235, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 9235, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 9228.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                              primary 
                                                                                                                                                                                                                                                              (?)

** In state 9228, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 9228, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 9228, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 9226.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                             primary 
                                                                                                                                                                                                                                             (?)

** In state 9226, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 9226, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 9226, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 9184.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA identifier COMMA mintypmax_expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA identifier COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                                                              expression 
                                                                                                                                                                                                                                                                                                                                                              primary 
                                                                                                                                                                                                                                                                                                                                                              (?)

** In state 9184, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 9184, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 9184, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 9139.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA identifier COMMA COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA identifier COMMA COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                                         expression 
                                                                                                                                                                                                                                                                                                                                         primary 
                                                                                                                                                                                                                                                                                                                                         (?)

** In state 9139, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 9139, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 9139, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 9136.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA identifier COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA identifier COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                                   expression 
                                                                                                                                                                                                                                                                                                                                   primary 
                                                                                                                                                                                                                                                                                                                                   (?)

** In state 9136, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 9136, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 9136, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 9091.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA COMMA mintypmax_expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                                                   expression 
                                                                                                                                                                                                                                                                                                                                                   primary 
                                                                                                                                                                                                                                                                                                                                                   (?)

** In state 9091, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 9091, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 9091, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 9046.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA COMMA COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA COMMA COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                              expression 
                                                                                                                                                                                                                                                                                                                              primary 
                                                                                                                                                                                                                                                                                                                              (?)

** In state 9046, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 9046, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 9046, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 9043.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                        expression 
                                                                                                                                                                                                                                                                                                                        primary 
                                                                                                                                                                                                                                                                                                                        (?)

** In state 9043, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 9043, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 9043, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 9036.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                 primary 
                                                                                                                                                                                                                                                                                                 (?)

** In state 9036, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 9036, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 9036, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 9034.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                primary 
                                                                                                                                                                                                                                                                                (?)

** In state 9034, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 9034, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 9034, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 9032.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                   scalar_timing_check_condition 
                                                                                                                                                                                                                                                   expression 
                                                                                                                                                                                                                                                   primary 
                                                                                                                                                                                                                                                   (?)

** In state 9032, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 9032, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 9032, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 8987.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA expression COMMA expression COMMA identifier COMMA mintypmax_expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA expression COMMA expression COMMA identifier COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                                   expression 
                                                                                                                                                                                                                                                                                                                                   primary 
                                                                                                                                                                                                                                                                                                                                   (?)

** In state 8987, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 8987, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 8987, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 8942.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA expression COMMA expression COMMA identifier COMMA COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA expression COMMA expression COMMA identifier COMMA COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                              expression 
                                                                                                                                                                                                                                                                                                              primary 
                                                                                                                                                                                                                                                                                                              (?)

** In state 8942, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 8942, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 8942, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 8939.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA expression COMMA expression COMMA identifier COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA expression COMMA expression COMMA identifier COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                        expression 
                                                                                                                                                                                                                                                                                                        primary 
                                                                                                                                                                                                                                                                                                        (?)

** In state 8939, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 8939, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 8939, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 8894.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA expression COMMA expression COMMA COMMA mintypmax_expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA expression COMMA expression COMMA COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                        expression 
                                                                                                                                                                                                                                                                                                                        primary 
                                                                                                                                                                                                                                                                                                                        (?)

** In state 8894, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 8894, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 8894, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 8849.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA expression COMMA expression COMMA COMMA COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA expression COMMA expression COMMA COMMA COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                   expression 
                                                                                                                                                                                                                                                                                                   primary 
                                                                                                                                                                                                                                                                                                   (?)

** In state 8849, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 8849, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 8849, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 8846.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA expression COMMA expression COMMA COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA expression COMMA expression COMMA COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                             expression 
                                                                                                                                                                                                                                                                                             primary 
                                                                                                                                                                                                                                                                                             (?)

** In state 8846, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 8846, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 8846, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 8839.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                      primary 
                                                                                                                                                                                                                                                                      (?)

** In state 8839, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 8839, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 8839, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 8837.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                     primary 
                                                                                                                                                                                                                                                     (?)

** In state 8837, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 8837, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 8837, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 8795.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA identifier COMMA mintypmax_expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA identifier COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                                                                      expression 
                                                                                                                                                                                                                                                                                                                                                                      primary 
                                                                                                                                                                                                                                                                                                                                                                      (?)

** In state 8795, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 8795, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 8795, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 8750.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA identifier COMMA COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA identifier COMMA COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                                                 expression 
                                                                                                                                                                                                                                                                                                                                                 primary 
                                                                                                                                                                                                                                                                                                                                                 (?)

** In state 8750, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 8750, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 8750, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 8747.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA identifier COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA identifier COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                                           expression 
                                                                                                                                                                                                                                                                                                                                           primary 
                                                                                                                                                                                                                                                                                                                                           (?)

** In state 8747, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 8747, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 8747, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 8702.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA COMMA mintypmax_expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                                                           expression 
                                                                                                                                                                                                                                                                                                                                                           primary 
                                                                                                                                                                                                                                                                                                                                                           (?)

** In state 8702, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 8702, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 8702, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 8657.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA COMMA COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA COMMA COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                                      expression 
                                                                                                                                                                                                                                                                                                                                      primary 
                                                                                                                                                                                                                                                                                                                                      (?)

** In state 8657, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 8657, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 8657, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 8654.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                                expression 
                                                                                                                                                                                                                                                                                                                                primary 
                                                                                                                                                                                                                                                                                                                                (?)

** In state 8654, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 8654, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 8654, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 8647.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                         primary 
                                                                                                                                                                                                                                                                                                         (?)

** In state 8647, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 8647, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 8647, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 8645.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                        primary 
                                                                                                                                                                                                                                                                                        (?)

** In state 8645, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 8645, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 8645, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 8643.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                           scalar_timing_check_condition 
                                                                                                                                                                                                                                                           expression 
                                                                                                                                                                                                                                                           primary 
                                                                                                                                                                                                                                                           (?)

** In state 8643, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 8643, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 8643, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 8600.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression COMMA identifier COMMA mintypmax_expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression COMMA identifier COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                                                              expression 
                                                                                                                                                                                                                                                                                                                                                              primary 
                                                                                                                                                                                                                                                                                                                                                              (?)

** In state 8600, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 8600, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 8600, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 8555.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression COMMA identifier COMMA COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression COMMA identifier COMMA COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                                         expression 
                                                                                                                                                                                                                                                                                                                                         primary 
                                                                                                                                                                                                                                                                                                                                         (?)

** In state 8555, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 8555, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 8555, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 8552.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression COMMA identifier COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression COMMA identifier COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                                   expression 
                                                                                                                                                                                                                                                                                                                                   primary 
                                                                                                                                                                                                                                                                                                                                   (?)

** In state 8552, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 8552, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 8552, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 8507.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression COMMA COMMA mintypmax_expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression COMMA COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                                                   expression 
                                                                                                                                                                                                                                                                                                                                                   primary 
                                                                                                                                                                                                                                                                                                                                                   (?)

** In state 8507, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 8507, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 8507, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 8462.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression COMMA COMMA COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression COMMA COMMA COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                              expression 
                                                                                                                                                                                                                                                                                                                              primary 
                                                                                                                                                                                                                                                                                                                              (?)

** In state 8462, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 8462, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 8462, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 8459.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression COMMA COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression COMMA COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                        expression 
                                                                                                                                                                                                                                                                                                                        primary 
                                                                                                                                                                                                                                                                                                                        (?)

** In state 8459, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 8459, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 8459, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 8452.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                 primary 
                                                                                                                                                                                                                                                                                                 (?)

** In state 8452, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 8452, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 8452, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 8450.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                primary 
                                                                                                                                                                                                                                                                                (?)

** In state 8450, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 8450, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 8450, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 8408.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA identifier COMMA mintypmax_expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA identifier COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                                                                                                 expression 
                                                                                                                                                                                                                                                                                                                                                                                                 primary 
                                                                                                                                                                                                                                                                                                                                                                                                 (?)

** In state 8408, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 8408, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 8408, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 8363.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA identifier COMMA COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA identifier COMMA COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                                                                            expression 
                                                                                                                                                                                                                                                                                                                                                                            primary 
                                                                                                                                                                                                                                                                                                                                                                            (?)

** In state 8363, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 8363, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 8363, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 8360.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA identifier COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA identifier COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                                                                      expression 
                                                                                                                                                                                                                                                                                                                                                                      primary 
                                                                                                                                                                                                                                                                                                                                                                      (?)

** In state 8360, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 8360, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 8360, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 8315.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA COMMA mintypmax_expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                                                                                      expression 
                                                                                                                                                                                                                                                                                                                                                                                      primary 
                                                                                                                                                                                                                                                                                                                                                                                      (?)

** In state 8315, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 8315, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 8315, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 8262.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA COMMA COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA COMMA COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                                                                 expression 
                                                                                                                                                                                                                                                                                                                                                                 primary 
                                                                                                                                                                                                                                                                                                                                                                 (?)

** In state 8262, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 8262, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 8262, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 8259.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression COMMA COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                                                           expression 
                                                                                                                                                                                                                                                                                                                                                           primary 
                                                                                                                                                                                                                                                                                                                                                           (?)

** In state 8259, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 8259, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 8259, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 8252.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                                    primary 
                                                                                                                                                                                                                                                                                                                                    (?)

** In state 8252, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 8252, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 8252, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 8250.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                   primary 
                                                                                                                                                                                                                                                                                                                   (?)

** In state 8250, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 8250, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 8250, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 8248.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                      scalar_timing_check_condition 
                                                                                                                                                                                                                                                                                      expression 
                                                                                                                                                                                                                                                                                      primary 
                                                                                                                                                                                                                                                                                      (?)

** In state 8248, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 8248, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 8248, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 8243.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SETUPHOLD LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                      scalar_timing_check_condition 
                                                                                                                                                                                      expression 
                                                                                                                                                                                      primary 
                                                                                                                                                                                      (?)

** In state 8243, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 8243, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 8243, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 8229.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SKEW LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SKEW LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                  primary 
                                                                                                                                                                                  (?)

** In state 8229, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 8229, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 8229, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 8219.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SKEW LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SKEW LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                     primary 
                                                                                                                                                                                                                     (?)

** In state 8219, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 8219, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 8219, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 8217.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SKEW LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SKEW LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                        scalar_timing_check_condition 
                                                                                                                                                                                        expression 
                                                                                                                                                                                        primary 
                                                                                                                                                                                        (?)

** In state 8217, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 8217, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 8217, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 8206.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SKEW LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SKEW LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                             primary 
                                                                                                                                                                                                             (?)

** In state 8206, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 8206, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 8206, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 8196.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SKEW LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SKEW LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                primary 
                                                                                                                                                                                                                                                (?)

** In state 8196, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 8196, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 8196, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 8194.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SKEW LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SKEW LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                   scalar_timing_check_condition 
                                                                                                                                                                                                                   expression 
                                                                                                                                                                                                                   primary 
                                                                                                                                                                                                                   (?)

** In state 8194, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 8194, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 8194, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 8181.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SKEW LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SKEW LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                     primary 
                                                                                                                                                                                                                     (?)

** In state 8181, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 8181, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 8181, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 8171.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SKEW LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SKEW LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                        primary 
                                                                                                                                                                                                                                                        (?)

** In state 8171, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 8171, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 8171, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 8169.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SKEW LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SKEW LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                           scalar_timing_check_condition 
                                                                                                                                                                                                                           expression 
                                                                                                                                                                                                                           primary 
                                                                                                                                                                                                                           (?)

** In state 8169, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 8169, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 8169, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 8158.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SKEW LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SKEW LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                primary 
                                                                                                                                                                                                                                                (?)

** In state 8158, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 8158, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 8158, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 8148.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SKEW LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SKEW LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                   primary 
                                                                                                                                                                                                                                                                                   (?)

** In state 8148, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 8148, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 8148, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 8146.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SKEW LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SKEW LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                      scalar_timing_check_condition 
                                                                                                                                                                                                                                                      expression 
                                                                                                                                                                                                                                                      primary 
                                                                                                                                                                                                                                                      (?)

** In state 8146, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 8146, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 8146, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 8141.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SKEW LPAREN specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SKEW LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA expression RPAREN SEMICOLON 
                                                                                                                                                      scalar_timing_check_condition 
                                                                                                                                                      expression 
                                                                                                                                                      primary 
                                                                                                                                                      (?)

** In state 8141, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 8141, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 8141, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 8130.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SKEW LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SKEW LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                             primary 
                                                                                                                                                                                                             (?)

** In state 8130, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 8130, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 8130, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 8120.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SKEW LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SKEW LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                primary 
                                                                                                                                                                                                                                                (?)

** In state 8120, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 8120, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 8120, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 8118.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SKEW LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SKEW LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                   scalar_timing_check_condition 
                                                                                                                                                                                                                   expression 
                                                                                                                                                                                                                   primary 
                                                                                                                                                                                                                   (?)

** In state 8118, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 8118, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 8118, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 8107.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SKEW LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SKEW LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                        primary 
                                                                                                                                                                                                                                        (?)

** In state 8107, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 8107, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 8107, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 8097.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SKEW LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SKEW LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                           primary 
                                                                                                                                                                                                                                                                           (?)

** In state 8097, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 8097, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 8097, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 8095.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SKEW LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SKEW LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                              scalar_timing_check_condition 
                                                                                                                                                                                                                                              expression 
                                                                                                                                                                                                                                              primary 
                                                                                                                                                                                                                                              (?)

** In state 8095, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 8095, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 8095, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 8082.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SKEW LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SKEW LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                primary 
                                                                                                                                                                                                                                                (?)

** In state 8082, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 8082, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 8082, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 8072.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SKEW LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SKEW LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                   primary 
                                                                                                                                                                                                                                                                                   (?)

** In state 8072, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 8072, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 8072, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 8070.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SKEW LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SKEW LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                      scalar_timing_check_condition 
                                                                                                                                                                                                                                                      expression 
                                                                                                                                                                                                                                                      primary 
                                                                                                                                                                                                                                                      (?)

** In state 8070, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 8070, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 8070, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 8059.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SKEW LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SKEW LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                           primary 
                                                                                                                                                                                                                                                                           (?)

** In state 8059, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 8059, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 8059, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 8049.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SKEW LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SKEW LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                              primary 
                                                                                                                                                                                                                                                                                                              (?)

** In state 8049, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 8049, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 8049, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 8047.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SKEW LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SKEW LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                 scalar_timing_check_condition 
                                                                                                                                                                                                                                                                                 expression 
                                                                                                                                                                                                                                                                                 primary 
                                                                                                                                                                                                                                                                                 (?)

** In state 8047, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 8047, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 8047, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 8042.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_SKEW LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_SKEW LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                 scalar_timing_check_condition 
                                                                                                                                                                                 expression 
                                                                                                                                                                                 primary 
                                                                                                                                                                                 (?)

** In state 8042, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 8042, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 8042, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 7992.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_TIMESKEW LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_TIMESKEW LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                      primary 
                                                                                                                                                                                      (?)

** In state 7992, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 7992, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 7992, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 7946.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_TIMESKEW LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_TIMESKEW LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                         primary 
                                                                                                                                                                                                                         (?)

** In state 7946, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 7946, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 7946, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 7944.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_TIMESKEW LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_TIMESKEW LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                            scalar_timing_check_condition 
                                                                                                                                                                                            expression 
                                                                                                                                                                                            primary 
                                                                                                                                                                                            (?)

** In state 7944, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 7944, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 7944, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 7897.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_TIMESKEW LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_TIMESKEW LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                 primary 
                                                                                                                                                                                                                 (?)

** In state 7897, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 7897, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 7897, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 7851.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_TIMESKEW LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_TIMESKEW LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                    primary 
                                                                                                                                                                                                                                                    (?)

** In state 7851, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 7851, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 7851, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 7849.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_TIMESKEW LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_TIMESKEW LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                       scalar_timing_check_condition 
                                                                                                                                                                                                                       expression 
                                                                                                                                                                                                                       primary 
                                                                                                                                                                                                                       (?)

** In state 7849, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 7849, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 7849, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 7800.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_TIMESKEW LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_TIMESKEW LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                         primary 
                                                                                                                                                                                                                         (?)

** In state 7800, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 7800, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 7800, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 7754.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_TIMESKEW LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_TIMESKEW LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                            primary 
                                                                                                                                                                                                                                                            (?)

** In state 7754, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 7754, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 7754, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 7752.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_TIMESKEW LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_TIMESKEW LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                               scalar_timing_check_condition 
                                                                                                                                                                                                                               expression 
                                                                                                                                                                                                                               primary 
                                                                                                                                                                                                                               (?)

** In state 7752, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 7752, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 7752, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 7705.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_TIMESKEW LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_TIMESKEW LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                    primary 
                                                                                                                                                                                                                                                    (?)

** In state 7705, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 7705, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 7705, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 7659.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_TIMESKEW LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_TIMESKEW LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                       primary 
                                                                                                                                                                                                                                                                                       (?)

** In state 7659, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 7659, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 7659, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 7657.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_TIMESKEW LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_TIMESKEW LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                          scalar_timing_check_condition 
                                                                                                                                                                                                                                                          expression 
                                                                                                                                                                                                                                                          primary 
                                                                                                                                                                                                                                                          (?)

** In state 7657, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 7657, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 7657, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 7652.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_TIMESKEW LPAREN specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_TIMESKEW LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA expression RPAREN SEMICOLON 
                                                                                                                                                          scalar_timing_check_condition 
                                                                                                                                                          expression 
                                                                                                                                                          primary 
                                                                                                                                                          (?)

** In state 7652, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 7652, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 7652, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 7605.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_TIMESKEW LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_TIMESKEW LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                 primary 
                                                                                                                                                                                                                 (?)

** In state 7605, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 7605, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 7605, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 7559.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_TIMESKEW LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_TIMESKEW LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                    primary 
                                                                                                                                                                                                                                                    (?)

** In state 7559, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 7559, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 7559, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 7557.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_TIMESKEW LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_TIMESKEW LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                       scalar_timing_check_condition 
                                                                                                                                                                                                                       expression 
                                                                                                                                                                                                                       primary 
                                                                                                                                                                                                                       (?)

** In state 7557, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 7557, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 7557, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 7510.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_TIMESKEW LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_TIMESKEW LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                            primary 
                                                                                                                                                                                                                                            (?)

** In state 7510, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 7510, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 7510, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 7464.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_TIMESKEW LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_TIMESKEW LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                               primary 
                                                                                                                                                                                                                                                                               (?)

** In state 7464, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 7464, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 7464, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 7462.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_TIMESKEW LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_TIMESKEW LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                  scalar_timing_check_condition 
                                                                                                                                                                                                                                                  expression 
                                                                                                                                                                                                                                                  primary 
                                                                                                                                                                                                                                                  (?)

** In state 7462, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 7462, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 7462, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 7413.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_TIMESKEW LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_TIMESKEW LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                    primary 
                                                                                                                                                                                                                                                    (?)

** In state 7413, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 7413, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 7413, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 7367.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_TIMESKEW LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_TIMESKEW LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                       primary 
                                                                                                                                                                                                                                                                                       (?)

** In state 7367, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 7367, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 7367, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 7365.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_TIMESKEW LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_TIMESKEW LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                          scalar_timing_check_condition 
                                                                                                                                                                                                                                                          expression 
                                                                                                                                                                                                                                                          primary 
                                                                                                                                                                                                                                                          (?)

** In state 7365, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 7365, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 7365, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 7318.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_TIMESKEW LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_TIMESKEW LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                               primary 
                                                                                                                                                                                                                                                                               (?)

** In state 7318, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 7318, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 7318, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 7272.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_TIMESKEW LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_TIMESKEW LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                  primary 
                                                                                                                                                                                                                                                                                                                  (?)

** In state 7272, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 7272, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 7272, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 7270.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_TIMESKEW LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_TIMESKEW LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                     scalar_timing_check_condition 
                                                                                                                                                                                                                                                                                     expression 
                                                                                                                                                                                                                                                                                     primary 
                                                                                                                                                                                                                                                                                     (?)

** In state 7270, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 7270, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 7270, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 7265.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_TIMESKEW LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_TIMESKEW LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                     scalar_timing_check_condition 
                                                                                                                                                                                     expression 
                                                                                                                                                                                     primary 
                                                                                                                                                                                     (?)

** In state 7265, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 7265, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 7265, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 7249.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_WIDTH LPAREN timing_check_event_control specify_terminal_descriptor COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_WIDTH LPAREN timing_check_event_control specify_terminal_descriptor COMMA expression COMMA constant_expression RPAREN SEMICOLON 
                                                                                                                                                                            primary 
                                                                                                                                                                            (?)

** In state 7249, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 7249, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 7249, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 7237.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_WIDTH LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_WIDTH LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA constant_expression RPAREN SEMICOLON 
                                                                                                                                                                                                               primary 
                                                                                                                                                                                                               (?)

** In state 7237, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 7237, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 7237, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 7235.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 D_WIDTH LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                D_WIDTH LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA constant_expression RPAREN SEMICOLON 
                                                                                                                                                                                  scalar_timing_check_condition 
                                                                                                                                                                                  expression 
                                                                                                                                                                                  primary 
                                                                                                                                                                                  (?)

** In state 7235, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 7235, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 7235, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 7184.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 FULLSKEW LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                FULLSKEW LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                     primary 
                                                                                                                                                                                                     (?)

** In state 7184, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 7184, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 7184, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 7182.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 FULLSKEW LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                FULLSKEW LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                    primary 
                                                                                                                                                                                    (?)

** In state 7182, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 7182, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 7182, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 7136.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 FULLSKEW LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                FULLSKEW LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                        primary 
                                                                                                                                                                                                                                        (?)

** In state 7136, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 7136, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 7136, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 7134.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 FULLSKEW LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                FULLSKEW LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                       primary 
                                                                                                                                                                                                                       (?)

** In state 7134, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 7134, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 7134, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 7132.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 FULLSKEW LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                FULLSKEW LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                          scalar_timing_check_condition 
                                                                                                                                                                                          expression 
                                                                                                                                                                                          primary 
                                                                                                                                                                                          (?)

** In state 7132, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 7132, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 7132, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 7085.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 FULLSKEW LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                FULLSKEW LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                primary 
                                                                                                                                                                                                                                (?)

** In state 7085, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 7085, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 7085, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 7083.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 FULLSKEW LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                FULLSKEW LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                               primary 
                                                                                                                                                                                                               (?)

** In state 7083, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 7083, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 7083, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 7037.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 FULLSKEW LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                FULLSKEW LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                   primary 
                                                                                                                                                                                                                                                                   (?)

** In state 7037, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 7037, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 7037, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 7035.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 FULLSKEW LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                FULLSKEW LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                  primary 
                                                                                                                                                                                                                                                  (?)

** In state 7035, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 7035, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 7035, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 7033.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 FULLSKEW LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                FULLSKEW LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                     scalar_timing_check_condition 
                                                                                                                                                                                                                     expression 
                                                                                                                                                                                                                     primary 
                                                                                                                                                                                                                     (?)

** In state 7033, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 7033, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 7033, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 6984.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 FULLSKEW LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                FULLSKEW LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                        primary 
                                                                                                                                                                                                                                        (?)

** In state 6984, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 6984, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 6984, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 6982.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 FULLSKEW LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                FULLSKEW LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                       primary 
                                                                                                                                                                                                                       (?)

** In state 6982, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 6982, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 6982, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 6936.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 FULLSKEW LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                FULLSKEW LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                           primary 
                                                                                                                                                                                                                                                                           (?)

** In state 6936, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 6936, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 6936, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 6934.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 FULLSKEW LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                FULLSKEW LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                          primary 
                                                                                                                                                                                                                                                          (?)

** In state 6934, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 6934, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 6934, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 6932.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 FULLSKEW LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                FULLSKEW LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                             scalar_timing_check_condition 
                                                                                                                                                                                                                             expression 
                                                                                                                                                                                                                             primary 
                                                                                                                                                                                                                             (?)

** In state 6932, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 6932, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 6932, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 6885.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 FULLSKEW LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                FULLSKEW LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                   primary 
                                                                                                                                                                                                                                                                   (?)

** In state 6885, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 6885, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 6885, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 6883.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 FULLSKEW LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                FULLSKEW LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                  primary 
                                                                                                                                                                                                                                                  (?)

** In state 6883, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 6883, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 6883, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 6837.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 FULLSKEW LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                FULLSKEW LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                      primary 
                                                                                                                                                                                                                                                                                                      (?)

** In state 6837, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 6837, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 6837, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 6835.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 FULLSKEW LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                FULLSKEW LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                     primary 
                                                                                                                                                                                                                                                                                     (?)

** In state 6835, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 6835, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 6835, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 6833.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 FULLSKEW LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                FULLSKEW LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                        scalar_timing_check_condition 
                                                                                                                                                                                                                                                        expression 
                                                                                                                                                                                                                                                        primary 
                                                                                                                                                                                                                                                        (?)

** In state 6833, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 6833, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 6833, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 6828.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 FULLSKEW LPAREN specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                FULLSKEW LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                        scalar_timing_check_condition 
                                                                                                                                                        expression 
                                                                                                                                                        primary 
                                                                                                                                                        (?)

** In state 6828, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 6828, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 6828, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 6781.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 FULLSKEW LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                FULLSKEW LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                primary 
                                                                                                                                                                                                                                (?)

** In state 6781, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 6781, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 6781, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 6779.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 FULLSKEW LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                FULLSKEW LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                               primary 
                                                                                                                                                                                                               (?)

** In state 6779, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 6779, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 6779, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 6733.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 FULLSKEW LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                FULLSKEW LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                   primary 
                                                                                                                                                                                                                                                                   (?)

** In state 6733, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 6733, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 6733, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 6731.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 FULLSKEW LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                FULLSKEW LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                  primary 
                                                                                                                                                                                                                                                  (?)

** In state 6731, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 6731, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 6731, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 6729.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 FULLSKEW LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                FULLSKEW LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                     scalar_timing_check_condition 
                                                                                                                                                                                                                     expression 
                                                                                                                                                                                                                     primary 
                                                                                                                                                                                                                     (?)

** In state 6729, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 6729, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 6729, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 6682.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 FULLSKEW LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                FULLSKEW LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                           primary 
                                                                                                                                                                                                                                                           (?)

** In state 6682, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 6682, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 6682, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 6680.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 FULLSKEW LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                FULLSKEW LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                          primary 
                                                                                                                                                                                                                                          (?)

** In state 6680, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 6680, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 6680, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 6634.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 FULLSKEW LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                FULLSKEW LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                              primary 
                                                                                                                                                                                                                                                                                              (?)

** In state 6634, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 6634, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 6634, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 6632.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 FULLSKEW LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                FULLSKEW LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                             primary 
                                                                                                                                                                                                                                                                             (?)

** In state 6632, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 6632, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 6632, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 6630.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 FULLSKEW LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                FULLSKEW LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                scalar_timing_check_condition 
                                                                                                                                                                                                                                                expression 
                                                                                                                                                                                                                                                primary 
                                                                                                                                                                                                                                                (?)

** In state 6630, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 6630, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 6630, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 6581.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 FULLSKEW LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                FULLSKEW LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                   primary 
                                                                                                                                                                                                                                                                   (?)

** In state 6581, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 6581, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 6581, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 6579.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 FULLSKEW LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                FULLSKEW LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                  primary 
                                                                                                                                                                                                                                                  (?)

** In state 6579, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 6579, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 6579, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 6533.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 FULLSKEW LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                FULLSKEW LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                      primary 
                                                                                                                                                                                                                                                                                                      (?)

** In state 6533, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 6533, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 6533, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 6531.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 FULLSKEW LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                FULLSKEW LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                     primary 
                                                                                                                                                                                                                                                                                     (?)

** In state 6531, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 6531, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 6531, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 6529.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 FULLSKEW LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                FULLSKEW LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                        scalar_timing_check_condition 
                                                                                                                                                                                                                                                        expression 
                                                                                                                                                                                                                                                        primary 
                                                                                                                                                                                                                                                        (?)

** In state 6529, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 6529, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 6529, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 6482.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 FULLSKEW LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                FULLSKEW LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                              primary 
                                                                                                                                                                                                                                                                                              (?)

** In state 6482, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 6482, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 6482, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 6480.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 FULLSKEW LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                FULLSKEW LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                             primary 
                                                                                                                                                                                                                                                                             (?)

** In state 6480, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 6480, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 6480, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 6434.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 FULLSKEW LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                FULLSKEW LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                                 primary 
                                                                                                                                                                                                                                                                                                                                 (?)

** In state 6434, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 6434, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 6434, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 6432.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 FULLSKEW LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                FULLSKEW LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                primary 
                                                                                                                                                                                                                                                                                                                (?)

** In state 6432, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 6432, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 6432, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 6430.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 FULLSKEW LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                FULLSKEW LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                   scalar_timing_check_condition 
                                                                                                                                                                                                                                                                                   expression 
                                                                                                                                                                                                                                                                                   primary 
                                                                                                                                                                                                                                                                                   (?)

** In state 6430, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 6430, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 6430, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 6425.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 FULLSKEW LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                FULLSKEW LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA expression COMMA expression RPAREN SEMICOLON 
                                                                                                                                                                                   scalar_timing_check_condition 
                                                                                                                                                                                   expression 
                                                                                                                                                                                   primary 
                                                                                                                                                                                   (?)

** In state 6425, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 6425, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 6425, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (reduce/reduce) in state 6414.
** Tokens involved: VBAR TOKEN_VBAR_VBAR TOKEN_PLING_QUERY_EQUALS TIMES RPAREN RCURLY QUERY P_XNOR P_SSRIGHT3 P_SRIGHT P_SLEFT3 P_SLEFT P_POW P_NXOR P_NOTEQUAL P_LTE P_GTE P_EQUAL P_CASENOTEQUAL P_CASEEQUAL P_ANDAND PLUS MODULO MINUS LESS LCURLY GREATER EQUALS_QUERY_EQUALS DIVIDE COMMA COLON CARET AMPERSAND
** The following explanations concentrate on token VBAR.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 IF LPAREN LCURLY identifier

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                path_declaration 
                                                                                                state_dependent_path_declaration SEMICOLON 
                                                                                                IF LPAREN module_path_expression RPAREN simple_path_declaration 
                                                                                                          module_path_primary 
                                                                                                          (?)

** In state 6414, looking ahead at VBAR, reducing production
** constant_primary -> identifier
** is permitted because of the following sub-derivation:

LCURLY constant_expression LCURLY module_path_expression module_path_concatenation_4 RCURLY RCURLY 
       constant_expression binary_operator constant_expression // lookahead token appears because binary_operator can begin with VBAR
       constant_primary // lookahead token is inherited
       identifier . 

** In state 6414, looking ahead at VBAR, reducing production
** constant_primary -> identifier
** is permitted because of the following sub-derivation:

LCURLY constant_expression LCURLY module_path_expression module_path_concatenation_4 RCURLY RCURLY 
       constant_expression binary_operator constant_expression // lookahead token appears because binary_operator can begin with VBAR
       constant_primary // lookahead token is inherited
       identifier . 

** In state 6414, looking ahead at VBAR, reducing production
** constant_primary -> identifier
** is permitted because of the following sub-derivation:

LCURLY constant_expression LCURLY module_path_expression module_path_concatenation_4 RCURLY RCURLY 
       constant_expression binary_operator constant_expression // lookahead token appears because binary_operator can begin with VBAR
       constant_primary // lookahead token is inherited
       identifier . 

** In state 6414, looking ahead at VBAR, reducing production
** constant_primary -> identifier
** is permitted because of the following sub-derivation:

LCURLY constant_expression LCURLY module_path_expression module_path_concatenation_4 RCURLY RCURLY 
       constant_expression binary_operator constant_expression // lookahead token appears because binary_operator can begin with VBAR
       constant_primary // lookahead token is inherited
       identifier . 

** In state 6414, looking ahead at VBAR, reducing production
** module_path_primary -> identifier
** is permitted because of the following sub-derivation:

LCURLY module_path_expression module_path_concatenation_4 RCURLY 
       module_path_expression binary_module_path_operator module_path_expression // lookahead token appears because binary_module_path_operator can begin with VBAR
       module_path_primary // lookahead token is inherited
       identifier . 

** In state 6414, looking ahead at VBAR, reducing production
** module_path_primary -> identifier
** is permitted because of the following sub-derivation:

LCURLY module_path_expression module_path_concatenation_4 RCURLY 
       module_path_expression binary_module_path_operator module_path_expression // lookahead token appears because binary_module_path_operator can begin with VBAR
       module_path_primary // lookahead token is inherited
       identifier . 

** Conflict (reduce/reduce) in state 6400.
** Tokens involved: VBAR TOKEN_VBAR_VBAR RPAREN RCURLY QUERY P_XNOR P_NXOR P_NOTEQUAL P_EQUAL P_ANDAND COMMA COLON CARET AMPERSAND
** The following explanations concentrate on token VBAR.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 IF LPAREN LCURLY identifier LPAREN list_of_constant_arguments RPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                path_declaration 
                                                                                                state_dependent_path_declaration SEMICOLON 
                                                                                                IF LPAREN module_path_expression RPAREN simple_path_declaration 
                                                                                                          module_path_primary 
                                                                                                          (?)

** In state 6400, looking ahead at VBAR, reducing production
** constant_primary -> identifier LPAREN list_of_constant_arguments RPAREN
** is permitted because of the following sub-derivation:

LCURLY constant_expression LCURLY module_path_expression module_path_concatenation_4 RCURLY RCURLY 
       constant_expression binary_operator constant_expression // lookahead token appears because binary_operator can begin with VBAR
       constant_primary // lookahead token is inherited
       identifier LPAREN list_of_constant_arguments RPAREN . 

** In state 6400, looking ahead at VBAR, reducing production
** module_path_primary -> identifier LPAREN list_of_constant_arguments RPAREN
** is permitted because of the following sub-derivation:

LCURLY module_path_expression module_path_concatenation_4 RCURLY 
       module_path_expression binary_module_path_operator module_path_expression // lookahead token appears because binary_module_path_operator can begin with VBAR
       module_path_primary // lookahead token is inherited
       identifier LPAREN list_of_constant_arguments RPAREN . 

** Conflict (reduce/reduce) in state 6397.
** Tokens involved: VBAR TOKEN_VBAR_VBAR TOKEN_PLING_QUERY_EQUALS TIMES RCURLY QUERY P_XNOR P_SSRIGHT3 P_SRIGHT P_SLEFT3 P_SLEFT P_POW P_NXOR P_NOTEQUAL P_LTE P_GTE P_EQUAL P_CASENOTEQUAL P_CASEEQUAL P_ANDAND PLUS MODULO MINUS LESS LCURLY GREATER EQUALS_QUERY_EQUALS DIVIDE COMMA COLON CARET AMPERSAND
** The following explanations concentrate on token COLON.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 IF LPAREN LCURLY LCURLY identifier

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                path_declaration 
                                                                                                state_dependent_path_declaration SEMICOLON 
                                                                                                IF LPAREN module_path_expression RPAREN simple_path_declaration 
                                                                                                          module_path_primary 
                                                                                                          LCURLY constant_expression LCURLY module_path_expression module_path_concatenation_4 RCURLY RCURLY 
                                                                                                                 constant_primary 
                                                                                                                 constant_concatenation 
                                                                                                                 (?)

** In state 6397, looking ahead at COLON, reducing production
** array_member_label -> identifier
** is permitted because of the following sub-derivation:

LCURLY array_member_label COLON constant_expression constant_concatenation_18 RCURLY // lookahead token appears
       identifier . 

** In state 6397, looking ahead at COLON, reducing production
** constant_primary -> identifier
** is permitted because of the following sub-derivation:

LCURLY array_member_label COLON constant_expression constant_concatenation_18 RCURLY // lookahead token appears
       constant_expression // lookahead token is inherited
       constant_primary // lookahead token is inherited
       identifier . 

** In state 6397, looking ahead at COLON, reducing production
** constant_primary -> identifier
** is permitted because of the following sub-derivation:

LCURLY array_member_label COLON constant_expression constant_concatenation_18 RCURLY // lookahead token appears
       constant_expression // lookahead token is inherited
       constant_primary // lookahead token is inherited
       identifier . 

** In state 6397, looking ahead at COLON, reducing production
** constant_primary -> identifier
** is permitted because of the following sub-derivation:

LCURLY array_member_label COLON constant_expression constant_concatenation_18 RCURLY // lookahead token appears
       constant_expression // lookahead token is inherited
       constant_primary // lookahead token is inherited
       identifier . 

** In state 6397, looking ahead at COLON, reducing production
** constant_primary -> identifier
** is permitted because of the following sub-derivation:

LCURLY array_member_label COLON constant_expression constant_concatenation_18 RCURLY // lookahead token appears
       constant_expression // lookahead token is inherited
       constant_primary // lookahead token is inherited
       identifier . 

** In state 6397, looking ahead at COLON, reducing production
** struct_member_label -> identifier
** is permitted because of the following sub-derivation:

LCURLY struct_member_label COLON constant_expression constant_concatenation_11 RCURLY // lookahead token appears
       identifier . 

** In state 6397, looking ahead at COLON, reducing production
** struct_member_label -> identifier
** is permitted because of the following sub-derivation:

LCURLY struct_member_label COLON constant_expression constant_concatenation_11 RCURLY // lookahead token appears
       identifier . 

** Conflict (shift/reduce) in state 6392.
** Tokens involved: VBAR TOKEN_VBAR_VBAR QUERY P_XNOR P_NXOR P_NOTEQUAL P_EQUAL P_ANDAND CARET AMPERSAND
** The following explanations concentrate on token VBAR.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 IF LPAREN module_path_expression binary_module_path_operator module_path_expression

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                path_declaration 
                                                                                                state_dependent_path_declaration SEMICOLON 
                                                                                                IF LPAREN module_path_expression RPAREN simple_path_declaration 
                                                                                                          (?)

** In state 6392, looking ahead at VBAR, shifting is permitted
** because of the following sub-derivation:

module_path_expression binary_module_path_operator module_path_expression 
                                                   module_path_expression binary_module_path_operator module_path_expression 
                                                                          . VBAR 

** In state 6392, looking ahead at VBAR, reducing production
** module_path_expression -> module_path_expression binary_module_path_operator module_path_expression
** is permitted because of the following sub-derivation:

module_path_expression binary_module_path_operator module_path_expression // lookahead token appears because binary_module_path_operator can begin with VBAR
module_path_expression binary_module_path_operator module_path_expression . 

** Conflict (shift/reduce) in state 6388.
** Tokens involved: VBAR TOKEN_VBAR_VBAR QUERY P_XNOR P_NXOR P_NOTEQUAL P_EQUAL P_ANDAND CARET AMPERSAND
** The following explanations concentrate on token VBAR.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 IF LPAREN module_path_expression QUERY module_path_expression COLON module_path_expression

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                path_declaration 
                                                                                                state_dependent_path_declaration SEMICOLON 
                                                                                                IF LPAREN module_path_expression RPAREN simple_path_declaration 
                                                                                                          (?)

** In state 6388, looking ahead at VBAR, shifting is permitted
** because of the following sub-derivation:

module_path_expression QUERY module_path_expression COLON module_path_expression 
                                                          module_path_expression binary_module_path_operator module_path_expression 
                                                                                 . VBAR 

** In state 6388, looking ahead at VBAR, reducing production
** module_path_expression -> module_path_expression QUERY module_path_expression COLON module_path_expression
** is permitted because of the following sub-derivation:

module_path_expression binary_module_path_operator module_path_expression // lookahead token appears because binary_module_path_operator can begin with VBAR
module_path_expression QUERY module_path_expression COLON module_path_expression . 

** Conflict (reduce/reduce) in state 6373.
** Tokens involved: VBAR TOKEN_VBAR_VBAR RPAREN RCURLY QUERY P_XNOR P_NXOR P_NOTEQUAL P_EQUAL P_ANDAND COMMA COLON CARET AMPERSAND
** The following explanations concentrate on token VBAR.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 IF LPAREN LCURLY number

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                path_declaration 
                                                                                                state_dependent_path_declaration SEMICOLON 
                                                                                                IF LPAREN module_path_expression RPAREN simple_path_declaration 
                                                                                                          module_path_primary 
                                                                                                          (?)

** In state 6373, looking ahead at VBAR, reducing production
** constant_primary -> number
** is permitted because of the following sub-derivation:

LCURLY constant_expression LCURLY module_path_expression module_path_concatenation_4 RCURLY RCURLY 
       constant_expression binary_operator constant_expression // lookahead token appears because binary_operator can begin with VBAR
       constant_primary // lookahead token is inherited
       number . 

** In state 6373, looking ahead at VBAR, reducing production
** module_path_primary -> number
** is permitted because of the following sub-derivation:

LCURLY module_path_expression module_path_concatenation_4 RCURLY 
       module_path_expression binary_module_path_operator module_path_expression // lookahead token appears because binary_module_path_operator can begin with VBAR
       module_path_primary // lookahead token is inherited
       number . 

** Conflict (shift/reduce/reduce) in state 6370.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 IF LPAREN hierarchical_identifier LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                path_declaration 
                                                                                                state_dependent_path_declaration SEMICOLON 
                                                                                                IF LPAREN module_path_expression RPAREN simple_path_declaration 
                                                                                                          module_path_primary 
                                                                                                          hierarchical_identifier LPAREN list_of_arguments RPAREN 
                                                                                                                                         expression list_of_arguments_3 
                                                                                                                                         primary 
                                                                                                                                         (?)

** In state 6370, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 6370, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 6370, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (reduce/reduce) in state 6365.
** Tokens involved: VBAR TOKEN_VBAR_VBAR RPAREN RCURLY QUERY P_XNOR P_NXOR P_NOTEQUAL P_EQUAL P_ANDAND COMMA COLON CARET AMPERSAND
** The following explanations concentrate on token VBAR.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 IF LPAREN identifier

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                path_declaration 
                                                                                                state_dependent_path_declaration SEMICOLON 
                                                                                                IF LPAREN module_path_expression RPAREN simple_path_declaration 
                                                                                                          module_path_expression binary_module_path_operator module_path_expression // lookahead token appears because binary_module_path_operator can begin with VBAR
                                                                                                          module_path_primary // lookahead token is inherited
                                                                                                          (?)

** In state 6365, looking ahead at VBAR, reducing production
** module_path_primary -> identifier
** is permitted because of the following sub-derivation:

identifier . 

** In state 6365, looking ahead at VBAR, reducing production
** module_path_primary -> identifier
** is permitted because of the following sub-derivation:

identifier . 

** Conflict (reduce/reduce) in state 6361.
** Tokens involved: UNSIGNED_NUMBER TOKEN_TWO TOKEN_THREE TOKEN_SIX TOKEN_SEVEN TOKEN_ONE TOKEN_NINE TOKEN_FOUR TOKEN_FIVE TOKEN_EIGHT SIMPLE_IDENTIFIER OCTAL_BASE LPAREN LCURLY HEX_BASE DECIMAL_BASE BINARY_BASE BACKSLASH
** The following explanations concentrate on token UNSIGNED_NUMBER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 IF LPAREN LCURLY AMPERSAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                path_declaration 
                                                                                                state_dependent_path_declaration SEMICOLON 
                                                                                                IF LPAREN module_path_expression RPAREN simple_path_declaration 
                                                                                                          module_path_primary 
                                                                                                          (?)

** In state 6361, looking ahead at UNSIGNED_NUMBER, reducing production
** unary_module_path_operator -> AMPERSAND
** is permitted because of the following sub-derivation:

LCURLY module_path_expression module_path_concatenation_4 RCURLY 
       unary_module_path_operator module_path_primary // lookahead token appears because module_path_primary can begin with UNSIGNED_NUMBER
       AMPERSAND . 

** In state 6361, looking ahead at UNSIGNED_NUMBER, reducing production
** unary_operator -> AMPERSAND
** is permitted because of the following sub-derivation:

LCURLY constant_expression LCURLY module_path_expression module_path_concatenation_4 RCURLY RCURLY 
       unary_operator constant_primary // lookahead token appears because constant_primary can begin with UNSIGNED_NUMBER
       AMPERSAND . 

** Conflict (reduce/reduce) in state 6360.
** Tokens involved: UNSIGNED_NUMBER TOKEN_TWO TOKEN_THREE TOKEN_SIX TOKEN_SEVEN TOKEN_ONE TOKEN_NINE TOKEN_FOUR TOKEN_FIVE TOKEN_EIGHT SIMPLE_IDENTIFIER OCTAL_BASE LPAREN LCURLY HEX_BASE DECIMAL_BASE BINARY_BASE BACKSLASH
** The following explanations concentrate on token UNSIGNED_NUMBER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 IF LPAREN LCURLY CARET

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                path_declaration 
                                                                                                state_dependent_path_declaration SEMICOLON 
                                                                                                IF LPAREN module_path_expression RPAREN simple_path_declaration 
                                                                                                          module_path_primary 
                                                                                                          (?)

** In state 6360, looking ahead at UNSIGNED_NUMBER, reducing production
** unary_module_path_operator -> CARET
** is permitted because of the following sub-derivation:

LCURLY module_path_expression module_path_concatenation_4 RCURLY 
       unary_module_path_operator module_path_primary // lookahead token appears because module_path_primary can begin with UNSIGNED_NUMBER
       CARET . 

** In state 6360, looking ahead at UNSIGNED_NUMBER, reducing production
** unary_operator -> CARET
** is permitted because of the following sub-derivation:

LCURLY constant_expression LCURLY module_path_expression module_path_concatenation_4 RCURLY RCURLY 
       unary_operator constant_primary // lookahead token appears because constant_primary can begin with UNSIGNED_NUMBER
       CARET . 

** Conflict (reduce/reduce) in state 6357.
** Tokens involved: UNSIGNED_NUMBER TOKEN_TWO TOKEN_THREE TOKEN_SIX TOKEN_SEVEN TOKEN_ONE TOKEN_NINE TOKEN_FOUR TOKEN_FIVE TOKEN_EIGHT SIMPLE_IDENTIFIER OCTAL_BASE LPAREN LCURLY HEX_BASE DECIMAL_BASE BINARY_BASE BACKSLASH
** The following explanations concentrate on token UNSIGNED_NUMBER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 IF LPAREN LCURLY PLING

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                path_declaration 
                                                                                                state_dependent_path_declaration SEMICOLON 
                                                                                                IF LPAREN module_path_expression RPAREN simple_path_declaration 
                                                                                                          module_path_primary 
                                                                                                          (?)

** In state 6357, looking ahead at UNSIGNED_NUMBER, reducing production
** unary_module_path_operator -> PLING
** is permitted because of the following sub-derivation:

LCURLY module_path_expression module_path_concatenation_4 RCURLY 
       unary_module_path_operator module_path_primary // lookahead token appears because module_path_primary can begin with UNSIGNED_NUMBER
       PLING . 

** In state 6357, looking ahead at UNSIGNED_NUMBER, reducing production
** unary_operator -> PLING
** is permitted because of the following sub-derivation:

LCURLY constant_expression LCURLY module_path_expression module_path_concatenation_4 RCURLY RCURLY 
       unary_operator constant_primary // lookahead token appears because constant_primary can begin with UNSIGNED_NUMBER
       PLING . 

** Conflict (reduce/reduce) in state 6356.
** Tokens involved: UNSIGNED_NUMBER TOKEN_TWO TOKEN_THREE TOKEN_SIX TOKEN_SEVEN TOKEN_ONE TOKEN_NINE TOKEN_FOUR TOKEN_FIVE TOKEN_EIGHT SIMPLE_IDENTIFIER OCTAL_BASE LPAREN LCURLY HEX_BASE DECIMAL_BASE BINARY_BASE BACKSLASH
** The following explanations concentrate on token UNSIGNED_NUMBER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 IF LPAREN LCURLY P_NAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                path_declaration 
                                                                                                state_dependent_path_declaration SEMICOLON 
                                                                                                IF LPAREN module_path_expression RPAREN simple_path_declaration 
                                                                                                          module_path_primary 
                                                                                                          (?)

** In state 6356, looking ahead at UNSIGNED_NUMBER, reducing production
** unary_module_path_operator -> P_NAND
** is permitted because of the following sub-derivation:

LCURLY module_path_expression module_path_concatenation_4 RCURLY 
       unary_module_path_operator module_path_primary // lookahead token appears because module_path_primary can begin with UNSIGNED_NUMBER
       P_NAND . 

** In state 6356, looking ahead at UNSIGNED_NUMBER, reducing production
** unary_operator -> P_NAND
** is permitted because of the following sub-derivation:

LCURLY constant_expression LCURLY module_path_expression module_path_concatenation_4 RCURLY RCURLY 
       unary_operator constant_primary // lookahead token appears because constant_primary can begin with UNSIGNED_NUMBER
       P_NAND . 

** Conflict (reduce/reduce) in state 6355.
** Tokens involved: UNSIGNED_NUMBER TOKEN_TWO TOKEN_THREE TOKEN_SIX TOKEN_SEVEN TOKEN_ONE TOKEN_NINE TOKEN_FOUR TOKEN_FIVE TOKEN_EIGHT SIMPLE_IDENTIFIER OCTAL_BASE LPAREN LCURLY HEX_BASE DECIMAL_BASE BINARY_BASE BACKSLASH
** The following explanations concentrate on token UNSIGNED_NUMBER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 IF LPAREN LCURLY P_NXOR

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                path_declaration 
                                                                                                state_dependent_path_declaration SEMICOLON 
                                                                                                IF LPAREN module_path_expression RPAREN simple_path_declaration 
                                                                                                          module_path_primary 
                                                                                                          (?)

** In state 6355, looking ahead at UNSIGNED_NUMBER, reducing production
** unary_module_path_operator -> P_NXOR
** is permitted because of the following sub-derivation:

LCURLY module_path_expression module_path_concatenation_4 RCURLY 
       unary_module_path_operator module_path_primary // lookahead token appears because module_path_primary can begin with UNSIGNED_NUMBER
       P_NXOR . 

** In state 6355, looking ahead at UNSIGNED_NUMBER, reducing production
** unary_operator -> P_NXOR
** is permitted because of the following sub-derivation:

LCURLY constant_expression LCURLY module_path_expression module_path_concatenation_4 RCURLY RCURLY 
       unary_operator constant_primary // lookahead token appears because constant_primary can begin with UNSIGNED_NUMBER
       P_NXOR . 

** Conflict (reduce/reduce) in state 6354.
** Tokens involved: UNSIGNED_NUMBER TOKEN_TWO TOKEN_THREE TOKEN_SIX TOKEN_SEVEN TOKEN_ONE TOKEN_NINE TOKEN_FOUR TOKEN_FIVE TOKEN_EIGHT SIMPLE_IDENTIFIER OCTAL_BASE LPAREN LCURLY HEX_BASE DECIMAL_BASE BINARY_BASE BACKSLASH
** The following explanations concentrate on token UNSIGNED_NUMBER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 IF LPAREN LCURLY P_XNOR

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                path_declaration 
                                                                                                state_dependent_path_declaration SEMICOLON 
                                                                                                IF LPAREN module_path_expression RPAREN simple_path_declaration 
                                                                                                          module_path_primary 
                                                                                                          (?)

** In state 6354, looking ahead at UNSIGNED_NUMBER, reducing production
** unary_module_path_operator -> P_XNOR
** is permitted because of the following sub-derivation:

LCURLY module_path_expression module_path_concatenation_4 RCURLY 
       unary_module_path_operator module_path_primary // lookahead token appears because module_path_primary can begin with UNSIGNED_NUMBER
       P_XNOR . 

** In state 6354, looking ahead at UNSIGNED_NUMBER, reducing production
** unary_operator -> P_XNOR
** is permitted because of the following sub-derivation:

LCURLY constant_expression LCURLY module_path_expression module_path_concatenation_4 RCURLY RCURLY 
       unary_operator constant_primary // lookahead token appears because constant_primary can begin with UNSIGNED_NUMBER
       P_XNOR . 

** Conflict (reduce/reduce) in state 6353.
** Tokens involved: UNSIGNED_NUMBER TOKEN_TWO TOKEN_THREE TOKEN_SIX TOKEN_SEVEN TOKEN_ONE TOKEN_NINE TOKEN_FOUR TOKEN_FIVE TOKEN_EIGHT SIMPLE_IDENTIFIER OCTAL_BASE LPAREN LCURLY HEX_BASE DECIMAL_BASE BINARY_BASE BACKSLASH
** The following explanations concentrate on token UNSIGNED_NUMBER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 IF LPAREN LCURLY TILDE

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                path_declaration 
                                                                                                state_dependent_path_declaration SEMICOLON 
                                                                                                IF LPAREN module_path_expression RPAREN simple_path_declaration 
                                                                                                          module_path_primary 
                                                                                                          (?)

** In state 6353, looking ahead at UNSIGNED_NUMBER, reducing production
** unary_module_path_operator -> TILDE
** is permitted because of the following sub-derivation:

LCURLY module_path_expression module_path_concatenation_4 RCURLY 
       unary_module_path_operator module_path_primary // lookahead token appears because module_path_primary can begin with UNSIGNED_NUMBER
       TILDE . 

** In state 6353, looking ahead at UNSIGNED_NUMBER, reducing production
** unary_operator -> TILDE
** is permitted because of the following sub-derivation:

LCURLY constant_expression LCURLY module_path_expression module_path_concatenation_4 RCURLY RCURLY 
       unary_operator constant_primary // lookahead token appears because constant_primary can begin with UNSIGNED_NUMBER
       TILDE . 

** Conflict (reduce/reduce) in state 6352.
** Tokens involved: UNSIGNED_NUMBER TOKEN_TWO TOKEN_THREE TOKEN_SIX TOKEN_SEVEN TOKEN_ONE TOKEN_NINE TOKEN_FOUR TOKEN_FIVE TOKEN_EIGHT SIMPLE_IDENTIFIER OCTAL_BASE LPAREN LCURLY HEX_BASE DECIMAL_BASE BINARY_BASE BACKSLASH
** The following explanations concentrate on token UNSIGNED_NUMBER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 IF LPAREN LCURLY TILDE_VBAR

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                path_declaration 
                                                                                                state_dependent_path_declaration SEMICOLON 
                                                                                                IF LPAREN module_path_expression RPAREN simple_path_declaration 
                                                                                                          module_path_primary 
                                                                                                          (?)

** In state 6352, looking ahead at UNSIGNED_NUMBER, reducing production
** unary_module_path_operator -> TILDE_VBAR
** is permitted because of the following sub-derivation:

LCURLY module_path_expression module_path_concatenation_4 RCURLY 
       unary_module_path_operator module_path_primary // lookahead token appears because module_path_primary can begin with UNSIGNED_NUMBER
       TILDE_VBAR . 

** In state 6352, looking ahead at UNSIGNED_NUMBER, reducing production
** unary_operator -> TILDE_VBAR
** is permitted because of the following sub-derivation:

LCURLY constant_expression LCURLY module_path_expression module_path_concatenation_4 RCURLY RCURLY 
       unary_operator constant_primary // lookahead token appears because constant_primary can begin with UNSIGNED_NUMBER
       TILDE_VBAR . 

** Conflict (reduce/reduce) in state 6351.
** Tokens involved: UNSIGNED_NUMBER TOKEN_TWO TOKEN_THREE TOKEN_SIX TOKEN_SEVEN TOKEN_ONE TOKEN_NINE TOKEN_FOUR TOKEN_FIVE TOKEN_EIGHT SIMPLE_IDENTIFIER OCTAL_BASE LPAREN LCURLY HEX_BASE DECIMAL_BASE BINARY_BASE BACKSLASH
** The following explanations concentrate on token UNSIGNED_NUMBER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 IF LPAREN LCURLY VBAR

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                path_declaration 
                                                                                                state_dependent_path_declaration SEMICOLON 
                                                                                                IF LPAREN module_path_expression RPAREN simple_path_declaration 
                                                                                                          module_path_primary 
                                                                                                          (?)

** In state 6351, looking ahead at UNSIGNED_NUMBER, reducing production
** unary_module_path_operator -> VBAR
** is permitted because of the following sub-derivation:

LCURLY module_path_expression module_path_concatenation_4 RCURLY 
       unary_module_path_operator module_path_primary // lookahead token appears because module_path_primary can begin with UNSIGNED_NUMBER
       VBAR . 

** In state 6351, looking ahead at UNSIGNED_NUMBER, reducing production
** unary_operator -> VBAR
** is permitted because of the following sub-derivation:

LCURLY constant_expression LCURLY module_path_expression module_path_concatenation_4 RCURLY RCURLY 
       unary_operator constant_primary // lookahead token appears because constant_primary can begin with UNSIGNED_NUMBER
       VBAR . 

** Conflict (shift/reduce/reduce) in state 6341.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 IF LPAREN SYSTEM_FUNCTION_IDENTIFIER LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                path_declaration 
                                                                                                state_dependent_path_declaration SEMICOLON 
                                                                                                IF LPAREN module_path_expression RPAREN simple_path_declaration 
                                                                                                          module_path_primary 
                                                                                                          SYSTEM_FUNCTION_IDENTIFIER LPAREN expression system_function_call_3_5 RPAREN 
                                                                                                                                            primary 
                                                                                                                                            (?)

** In state 6341, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 6341, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 6341, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce) in state 6311.
** Tokens involved: PLUS MINUS
** The following explanations concentrate on token PLUS.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 IF_NONE LPAREN input_identifier LBRACK constant_range_expression RBRACK

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                path_declaration 
                                                                                                state_dependent_path_declaration SEMICOLON 
                                                                                                IF_NONE simple_path_declaration 
                                                                                                        (?)

** In state 6311, looking ahead at PLUS, reducing production
** list_of_path_inputs_3 ->
** is permitted because of the following sub-derivation:

LPAREN input_identifier LBRACK constant_range_expression RBRACK list_of_path_inputs_3 polarity_operator P_ASTGT output_identifier list_of_path_outputs_3 RPAREN EQUALS path_delay_value // lookahead token appears because polarity_operator can begin with PLUS
                                                                . 

** In state 6311, looking ahead at PLUS, shifting is permitted
** because of the following sub-derivation:

LPAREN input_identifier LBRACK constant_range_expression RBRACK polarity_operator P_EQGT output_identifier RPAREN EQUALS path_delay_value 
                                                                . PLUS 

** Conflict (shift/reduce) in state 6303.
** Tokens involved: PLUS MINUS
** The following explanations concentrate on token PLUS.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 IF_NONE LPAREN input_identifier

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                path_declaration 
                                                                                                state_dependent_path_declaration SEMICOLON 
                                                                                                IF_NONE simple_path_declaration 
                                                                                                        (?)

** In state 6303, looking ahead at PLUS, reducing production
** list_of_path_inputs_3 ->
** is permitted because of the following sub-derivation:

LPAREN input_identifier list_of_path_inputs_3 polarity_operator P_ASTGT output_identifier list_of_path_outputs_3 RPAREN EQUALS path_delay_value // lookahead token appears because polarity_operator can begin with PLUS
                        . 

** In state 6303, looking ahead at PLUS, shifting is permitted
** because of the following sub-derivation:

LPAREN input_identifier polarity_operator P_EQGT output_identifier RPAREN EQUALS path_delay_value 
                        . PLUS 

** Conflict (shift/reduce/reduce) in state 6296.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 LPAREN edge_identifier input_identifier list_of_path_inputs_3 P_ASTGT output_identifier list_of_path_outputs_3 polarity_operator COLON

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                path_declaration 
                                                                                                edge_sensitive_path_declaration SEMICOLON 
                                                                                                LPAREN edge_identifier input_identifier list_of_path_inputs_3 P_ASTGT output_identifier list_of_path_outputs_3 polarity_operator COLON expression RPAREN EQUALS path_delay_value 
                                                                                                                                                                                                                                       primary 
                                                                                                                                                                                                                                       (?)

** In state 6296, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 6296, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 6296, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 6290.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 LPAREN edge_identifier input_identifier list_of_path_inputs_3 P_ASTGT output_identifier list_of_path_outputs_3 COLON

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                path_declaration 
                                                                                                edge_sensitive_path_declaration SEMICOLON 
                                                                                                LPAREN edge_identifier input_identifier list_of_path_inputs_3 P_ASTGT output_identifier list_of_path_outputs_3 COLON expression RPAREN EQUALS path_delay_value 
                                                                                                                                                                                                                     primary 
                                                                                                                                                                                                                     (?)

** In state 6290, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 6290, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 6290, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 6284.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 LPAREN edge_identifier input_identifier list_of_path_inputs_3 P_ASTGT output_identifier LBRACK constant_range_expression RBRACK list_of_path_outputs_3 polarity_operator COLON

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                path_declaration 
                                                                                                edge_sensitive_path_declaration SEMICOLON 
                                                                                                LPAREN edge_identifier input_identifier list_of_path_inputs_3 P_ASTGT output_identifier LBRACK constant_range_expression RBRACK list_of_path_outputs_3 polarity_operator COLON expression RPAREN EQUALS path_delay_value 
                                                                                                                                                                                                                                                                               primary 
                                                                                                                                                                                                                                                                               (?)

** In state 6284, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 6284, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 6284, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 6278.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 LPAREN edge_identifier input_identifier list_of_path_inputs_3 P_ASTGT output_identifier LBRACK constant_range_expression RBRACK list_of_path_outputs_3 COLON

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                path_declaration 
                                                                                                edge_sensitive_path_declaration SEMICOLON 
                                                                                                LPAREN edge_identifier input_identifier list_of_path_inputs_3 P_ASTGT output_identifier LBRACK constant_range_expression RBRACK list_of_path_outputs_3 COLON expression RPAREN EQUALS path_delay_value 
                                                                                                                                                                                                                                                             primary 
                                                                                                                                                                                                                                                             (?)

** In state 6278, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 6278, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 6278, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 6266.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 LPAREN edge_identifier input_identifier LBRACK constant_range_expression RBRACK list_of_path_inputs_3 P_ASTGT output_identifier list_of_path_outputs_3 polarity_operator COLON

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                path_declaration 
                                                                                                edge_sensitive_path_declaration SEMICOLON 
                                                                                                LPAREN edge_identifier input_identifier LBRACK constant_range_expression RBRACK list_of_path_inputs_3 P_ASTGT output_identifier list_of_path_outputs_3 polarity_operator COLON expression RPAREN EQUALS path_delay_value 
                                                                                                                                                                                                                                                                               primary 
                                                                                                                                                                                                                                                                               (?)

** In state 6266, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 6266, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 6266, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 6260.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 LPAREN edge_identifier input_identifier LBRACK constant_range_expression RBRACK list_of_path_inputs_3 P_ASTGT output_identifier list_of_path_outputs_3 COLON

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                path_declaration 
                                                                                                edge_sensitive_path_declaration SEMICOLON 
                                                                                                LPAREN edge_identifier input_identifier LBRACK constant_range_expression RBRACK list_of_path_inputs_3 P_ASTGT output_identifier list_of_path_outputs_3 COLON expression RPAREN EQUALS path_delay_value 
                                                                                                                                                                                                                                                             primary 
                                                                                                                                                                                                                                                             (?)

** In state 6260, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 6260, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 6260, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 6254.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 LPAREN edge_identifier input_identifier LBRACK constant_range_expression RBRACK list_of_path_inputs_3 P_ASTGT output_identifier LBRACK constant_range_expression RBRACK list_of_path_outputs_3 polarity_operator COLON

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                path_declaration 
                                                                                                edge_sensitive_path_declaration SEMICOLON 
                                                                                                LPAREN edge_identifier input_identifier LBRACK constant_range_expression RBRACK list_of_path_inputs_3 P_ASTGT output_identifier LBRACK constant_range_expression RBRACK list_of_path_outputs_3 polarity_operator COLON expression RPAREN EQUALS path_delay_value 
                                                                                                                                                                                                                                                                                                                       primary 
                                                                                                                                                                                                                                                                                                                       (?)

** In state 6254, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 6254, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 6254, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 6248.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 LPAREN edge_identifier input_identifier LBRACK constant_range_expression RBRACK list_of_path_inputs_3 P_ASTGT output_identifier LBRACK constant_range_expression RBRACK list_of_path_outputs_3 COLON

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                path_declaration 
                                                                                                edge_sensitive_path_declaration SEMICOLON 
                                                                                                LPAREN edge_identifier input_identifier LBRACK constant_range_expression RBRACK list_of_path_inputs_3 P_ASTGT output_identifier LBRACK constant_range_expression RBRACK list_of_path_outputs_3 COLON expression RPAREN EQUALS path_delay_value 
                                                                                                                                                                                                                                                                                                     primary 
                                                                                                                                                                                                                                                                                                     (?)

** In state 6248, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 6248, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 6248, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 6236.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 LPAREN edge_identifier input_identifier LBRACK constant_range_expression RBRACK P_EQGT output_identifier polarity_operator COLON

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                path_declaration 
                                                                                                edge_sensitive_path_declaration SEMICOLON 
                                                                                                LPAREN edge_identifier input_identifier LBRACK constant_range_expression RBRACK P_EQGT output_identifier polarity_operator COLON expression RPAREN EQUALS path_delay_value 
                                                                                                                                                                                                                                 primary 
                                                                                                                                                                                                                                 (?)

** In state 6236, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 6236, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 6236, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 6230.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 LPAREN edge_identifier input_identifier LBRACK constant_range_expression RBRACK P_EQGT output_identifier COLON

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                path_declaration 
                                                                                                edge_sensitive_path_declaration SEMICOLON 
                                                                                                LPAREN edge_identifier input_identifier LBRACK constant_range_expression RBRACK P_EQGT output_identifier COLON expression RPAREN EQUALS path_delay_value 
                                                                                                                                                                                                               primary 
                                                                                                                                                                                                               (?)

** In state 6230, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 6230, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 6230, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 6225.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 LPAREN edge_identifier input_identifier LBRACK constant_range_expression RBRACK P_EQGT output_identifier LBRACK constant_range_expression RBRACK polarity_operator COLON

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                path_declaration 
                                                                                                edge_sensitive_path_declaration SEMICOLON 
                                                                                                LPAREN edge_identifier input_identifier LBRACK constant_range_expression RBRACK P_EQGT output_identifier LBRACK constant_range_expression RBRACK polarity_operator COLON expression RPAREN EQUALS path_delay_value 
                                                                                                                                                                                                                                                                         primary 
                                                                                                                                                                                                                                                                         (?)

** In state 6225, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 6225, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 6225, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 6219.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 LPAREN edge_identifier input_identifier LBRACK constant_range_expression RBRACK P_EQGT output_identifier LBRACK constant_range_expression RBRACK COLON

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                path_declaration 
                                                                                                edge_sensitive_path_declaration SEMICOLON 
                                                                                                LPAREN edge_identifier input_identifier LBRACK constant_range_expression RBRACK P_EQGT output_identifier LBRACK constant_range_expression RBRACK COLON expression RPAREN EQUALS path_delay_value 
                                                                                                                                                                                                                                                       primary 
                                                                                                                                                                                                                                                       (?)

** In state 6219, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 6219, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 6219, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 6206.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 LPAREN edge_identifier input_identifier P_EQGT output_identifier polarity_operator COLON

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                path_declaration 
                                                                                                edge_sensitive_path_declaration SEMICOLON 
                                                                                                LPAREN edge_identifier input_identifier P_EQGT output_identifier polarity_operator COLON expression RPAREN EQUALS path_delay_value 
                                                                                                                                                                                         primary 
                                                                                                                                                                                         (?)

** In state 6206, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 6206, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 6206, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 6200.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 LPAREN edge_identifier input_identifier P_EQGT output_identifier COLON

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                path_declaration 
                                                                                                edge_sensitive_path_declaration SEMICOLON 
                                                                                                LPAREN edge_identifier input_identifier P_EQGT output_identifier COLON expression RPAREN EQUALS path_delay_value 
                                                                                                                                                                       primary 
                                                                                                                                                                       (?)

** In state 6200, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 6200, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 6200, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 6195.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 LPAREN edge_identifier input_identifier P_EQGT output_identifier LBRACK constant_range_expression RBRACK polarity_operator COLON

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                path_declaration 
                                                                                                edge_sensitive_path_declaration SEMICOLON 
                                                                                                LPAREN edge_identifier input_identifier P_EQGT output_identifier LBRACK constant_range_expression RBRACK polarity_operator COLON expression RPAREN EQUALS path_delay_value 
                                                                                                                                                                                                                                 primary 
                                                                                                                                                                                                                                 (?)

** In state 6195, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 6195, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 6195, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 6189.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 LPAREN edge_identifier input_identifier P_EQGT output_identifier LBRACK constant_range_expression RBRACK COLON

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                path_declaration 
                                                                                                edge_sensitive_path_declaration SEMICOLON 
                                                                                                LPAREN edge_identifier input_identifier P_EQGT output_identifier LBRACK constant_range_expression RBRACK COLON expression RPAREN EQUALS path_delay_value 
                                                                                                                                                                                                               primary 
                                                                                                                                                                                                               (?)

** In state 6189, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 6189, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 6189, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 6163.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 LPAREN input_identifier list_of_path_inputs_3 P_ASTGT output_identifier list_of_path_outputs_3 polarity_operator COLON

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                path_declaration 
                                                                                                edge_sensitive_path_declaration SEMICOLON 
                                                                                                LPAREN input_identifier list_of_path_inputs_3 P_ASTGT output_identifier list_of_path_outputs_3 polarity_operator COLON expression RPAREN EQUALS path_delay_value 
                                                                                                                                                                                                                       primary 
                                                                                                                                                                                                                       (?)

** In state 6163, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 6163, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 6163, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 6157.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 LPAREN input_identifier list_of_path_inputs_3 P_ASTGT output_identifier list_of_path_outputs_3 COLON

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                path_declaration 
                                                                                                edge_sensitive_path_declaration SEMICOLON 
                                                                                                LPAREN input_identifier list_of_path_inputs_3 P_ASTGT output_identifier list_of_path_outputs_3 COLON expression RPAREN EQUALS path_delay_value 
                                                                                                                                                                                                     primary 
                                                                                                                                                                                                     (?)

** In state 6157, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 6157, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 6157, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 6148.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 LPAREN input_identifier list_of_path_inputs_3 P_ASTGT output_identifier LBRACK constant_range_expression RBRACK list_of_path_outputs_3 polarity_operator COLON

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                path_declaration 
                                                                                                edge_sensitive_path_declaration SEMICOLON 
                                                                                                LPAREN input_identifier list_of_path_inputs_3 P_ASTGT output_identifier LBRACK constant_range_expression RBRACK list_of_path_outputs_3 polarity_operator COLON expression RPAREN EQUALS path_delay_value 
                                                                                                                                                                                                                                                               primary 
                                                                                                                                                                                                                                                               (?)

** In state 6148, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 6148, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 6148, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 6142.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 LPAREN input_identifier list_of_path_inputs_3 P_ASTGT output_identifier LBRACK constant_range_expression RBRACK list_of_path_outputs_3 COLON

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                path_declaration 
                                                                                                edge_sensitive_path_declaration SEMICOLON 
                                                                                                LPAREN input_identifier list_of_path_inputs_3 P_ASTGT output_identifier LBRACK constant_range_expression RBRACK list_of_path_outputs_3 COLON expression RPAREN EQUALS path_delay_value 
                                                                                                                                                                                                                                             primary 
                                                                                                                                                                                                                                             (?)

** In state 6142, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 6142, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 6142, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 6096.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 LPAREN input_identifier LBRACK constant_range_expression RBRACK list_of_path_inputs_3 P_ASTGT output_identifier list_of_path_outputs_3 polarity_operator COLON

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                path_declaration 
                                                                                                edge_sensitive_path_declaration SEMICOLON 
                                                                                                LPAREN input_identifier LBRACK constant_range_expression RBRACK list_of_path_inputs_3 P_ASTGT output_identifier list_of_path_outputs_3 polarity_operator COLON expression RPAREN EQUALS path_delay_value 
                                                                                                                                                                                                                                                               primary 
                                                                                                                                                                                                                                                               (?)

** In state 6096, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 6096, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 6096, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 6090.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 LPAREN input_identifier LBRACK constant_range_expression RBRACK list_of_path_inputs_3 P_ASTGT output_identifier list_of_path_outputs_3 COLON

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                path_declaration 
                                                                                                edge_sensitive_path_declaration SEMICOLON 
                                                                                                LPAREN input_identifier LBRACK constant_range_expression RBRACK list_of_path_inputs_3 P_ASTGT output_identifier list_of_path_outputs_3 COLON expression RPAREN EQUALS path_delay_value 
                                                                                                                                                                                                                                             primary 
                                                                                                                                                                                                                                             (?)

** In state 6090, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 6090, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 6090, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 6081.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 LPAREN input_identifier LBRACK constant_range_expression RBRACK list_of_path_inputs_3 P_ASTGT output_identifier LBRACK constant_range_expression RBRACK list_of_path_outputs_3 polarity_operator COLON

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                path_declaration 
                                                                                                edge_sensitive_path_declaration SEMICOLON 
                                                                                                LPAREN input_identifier LBRACK constant_range_expression RBRACK list_of_path_inputs_3 P_ASTGT output_identifier LBRACK constant_range_expression RBRACK list_of_path_outputs_3 polarity_operator COLON expression RPAREN EQUALS path_delay_value 
                                                                                                                                                                                                                                                                                                       primary 
                                                                                                                                                                                                                                                                                                       (?)

** In state 6081, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 6081, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 6081, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 6075.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 LPAREN input_identifier LBRACK constant_range_expression RBRACK list_of_path_inputs_3 P_ASTGT output_identifier LBRACK constant_range_expression RBRACK list_of_path_outputs_3 COLON

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                path_declaration 
                                                                                                edge_sensitive_path_declaration SEMICOLON 
                                                                                                LPAREN input_identifier LBRACK constant_range_expression RBRACK list_of_path_inputs_3 P_ASTGT output_identifier LBRACK constant_range_expression RBRACK list_of_path_outputs_3 COLON expression RPAREN EQUALS path_delay_value 
                                                                                                                                                                                                                                                                                     primary 
                                                                                                                                                                                                                                                                                     (?)

** In state 6075, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 6075, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 6075, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 6048.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 LPAREN input_identifier LBRACK constant_range_expression RBRACK P_EQGT output_identifier polarity_operator COLON

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                path_declaration 
                                                                                                edge_sensitive_path_declaration SEMICOLON 
                                                                                                LPAREN input_identifier LBRACK constant_range_expression RBRACK P_EQGT output_identifier polarity_operator COLON expression RPAREN EQUALS path_delay_value 
                                                                                                                                                                                                                 primary 
                                                                                                                                                                                                                 (?)

** In state 6048, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 6048, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 6048, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 6042.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 LPAREN input_identifier LBRACK constant_range_expression RBRACK P_EQGT output_identifier COLON

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                path_declaration 
                                                                                                edge_sensitive_path_declaration SEMICOLON 
                                                                                                LPAREN input_identifier LBRACK constant_range_expression RBRACK P_EQGT output_identifier COLON expression RPAREN EQUALS path_delay_value 
                                                                                                                                                                                               primary 
                                                                                                                                                                                               (?)

** In state 6042, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 6042, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 6042, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 6037.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 LPAREN input_identifier LBRACK constant_range_expression RBRACK P_EQGT output_identifier LBRACK constant_range_expression RBRACK polarity_operator COLON

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                path_declaration 
                                                                                                edge_sensitive_path_declaration SEMICOLON 
                                                                                                LPAREN input_identifier LBRACK constant_range_expression RBRACK P_EQGT output_identifier LBRACK constant_range_expression RBRACK polarity_operator COLON expression RPAREN EQUALS path_delay_value 
                                                                                                                                                                                                                                                         primary 
                                                                                                                                                                                                                                                         (?)

** In state 6037, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 6037, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 6037, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 6031.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 LPAREN input_identifier LBRACK constant_range_expression RBRACK P_EQGT output_identifier LBRACK constant_range_expression RBRACK COLON

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                path_declaration 
                                                                                                edge_sensitive_path_declaration SEMICOLON 
                                                                                                LPAREN input_identifier LBRACK constant_range_expression RBRACK P_EQGT output_identifier LBRACK constant_range_expression RBRACK COLON expression RPAREN EQUALS path_delay_value 
                                                                                                                                                                                                                                       primary 
                                                                                                                                                                                                                                       (?)

** In state 6031, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 6031, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 6031, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce) in state 6019.
** Tokens involved: PLUS MINUS
** The following explanations concentrate on token PLUS.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 LPAREN input_identifier LBRACK constant_range_expression RBRACK

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                path_declaration 
                                                                                                simple_path_declaration SEMICOLON 
                                                                                                (?)

** In state 6019, looking ahead at PLUS, reducing production
** list_of_path_inputs_3 ->
** is permitted because of the following sub-derivation:

LPAREN input_identifier LBRACK constant_range_expression RBRACK list_of_path_inputs_3 polarity_operator P_ASTGT output_identifier list_of_path_outputs_3 RPAREN EQUALS path_delay_value // lookahead token appears because polarity_operator can begin with PLUS
                                                                . 

** In state 6019, looking ahead at PLUS, shifting is permitted
** because of the following sub-derivation:

LPAREN input_identifier LBRACK constant_range_expression RBRACK polarity_operator P_EQGT output_identifier RPAREN EQUALS path_delay_value 
                                                                . PLUS 

** Conflict (shift/reduce/reduce) in state 6012.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 LPAREN input_identifier P_EQGT output_identifier polarity_operator COLON

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                path_declaration 
                                                                                                edge_sensitive_path_declaration SEMICOLON 
                                                                                                LPAREN input_identifier P_EQGT output_identifier polarity_operator COLON expression RPAREN EQUALS path_delay_value 
                                                                                                                                                                         primary 
                                                                                                                                                                         (?)

** In state 6012, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 6012, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 6012, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 6006.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 LPAREN input_identifier P_EQGT output_identifier COLON

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                path_declaration 
                                                                                                edge_sensitive_path_declaration SEMICOLON 
                                                                                                LPAREN input_identifier P_EQGT output_identifier COLON expression RPAREN EQUALS path_delay_value 
                                                                                                                                                       primary 
                                                                                                                                                       (?)

** In state 6006, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 6006, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 6006, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 6001.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 LPAREN input_identifier P_EQGT output_identifier LBRACK constant_range_expression RBRACK polarity_operator COLON

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                path_declaration 
                                                                                                edge_sensitive_path_declaration SEMICOLON 
                                                                                                LPAREN input_identifier P_EQGT output_identifier LBRACK constant_range_expression RBRACK polarity_operator COLON expression RPAREN EQUALS path_delay_value 
                                                                                                                                                                                                                 primary 
                                                                                                                                                                                                                 (?)

** In state 6001, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 6001, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 6001, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 5995.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 LPAREN input_identifier P_EQGT output_identifier LBRACK constant_range_expression RBRACK COLON

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                path_declaration 
                                                                                                edge_sensitive_path_declaration SEMICOLON 
                                                                                                LPAREN input_identifier P_EQGT output_identifier LBRACK constant_range_expression RBRACK COLON expression RPAREN EQUALS path_delay_value 
                                                                                                                                                                                               primary 
                                                                                                                                                                                               (?)

** In state 5995, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 5995, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 5995, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce) in state 5961.
** Token involved: RPAREN
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 LPAREN input_identifier P_EQGT output_identifier RPAREN EQUALS LPAREN constant_mintypmax_expression

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                path_declaration 
                                                                                                simple_path_declaration SEMICOLON 
                                                                                                LPAREN input_identifier P_EQGT output_identifier RPAREN EQUALS path_delay_value 
                                                                                                                                                               (?)

** In state 5961, looking ahead at RPAREN, shifting is permitted
** because of the following sub-derivation:

list_of_path_delay_expressions 
constant_mintypmax_expression 
constant_expression 
constant_primary 
LPAREN constant_mintypmax_expression . RPAREN 

** In state 5961, looking ahead at RPAREN, reducing production
** list_of_path_delay_expressions -> constant_mintypmax_expression
** is permitted because of the following sub-derivation:

LPAREN list_of_path_delay_expressions RPAREN // lookahead token appears
       constant_mintypmax_expression . 

** Conflict (shift/reduce) in state 5953.
** Tokens involved: PLUS MINUS
** The following explanations concentrate on token PLUS.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 LPAREN input_identifier

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                path_declaration 
                                                                                                simple_path_declaration SEMICOLON 
                                                                                                (?)

** In state 5953, looking ahead at PLUS, reducing production
** list_of_path_inputs_3 ->
** is permitted because of the following sub-derivation:

LPAREN input_identifier list_of_path_inputs_3 polarity_operator P_ASTGT output_identifier list_of_path_outputs_3 RPAREN EQUALS path_delay_value // lookahead token appears because polarity_operator can begin with PLUS
                        . 

** In state 5953, looking ahead at PLUS, shifting is permitted
** because of the following sub-derivation:

LPAREN input_identifier polarity_operator P_EQGT output_identifier RPAREN EQUALS path_delay_value 
                        . PLUS 

** Conflict (shift/reduce/reduce) in state 5942.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 NOCHANGE LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA mintypmax_expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                NOCHANGE LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                               expression 
                                                                                                                                                                                                               primary 
                                                                                                                                                                                                               (?)

** In state 5942, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 5942, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 5942, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 5940.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 NOCHANGE LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                NOCHANGE LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                    expression 
                                                                                                                                                                                    primary 
                                                                                                                                                                                    (?)

** In state 5940, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 5940, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 5940, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 5930.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 NOCHANGE LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA mintypmax_expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                NOCHANGE LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                  expression 
                                                                                                                                                                                                                                                  primary 
                                                                                                                                                                                                                                                  (?)

** In state 5930, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 5930, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 5930, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 5928.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 NOCHANGE LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                NOCHANGE LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                       expression 
                                                                                                                                                                                                                       primary 
                                                                                                                                                                                                                       (?)

** In state 5928, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 5928, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 5928, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 5926.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 NOCHANGE LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                NOCHANGE LPAREN specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                          scalar_timing_check_condition 
                                                                                                                                                                                          expression 
                                                                                                                                                                                          primary 
                                                                                                                                                                                          (?)

** In state 5926, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 5926, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 5926, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 5915.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 NOCHANGE LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA mintypmax_expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                NOCHANGE LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                          expression 
                                                                                                                                                                                                                                          primary 
                                                                                                                                                                                                                                          (?)

** In state 5915, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 5915, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 5915, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 5913.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 NOCHANGE LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                NOCHANGE LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                               expression 
                                                                                                                                                                                                               primary 
                                                                                                                                                                                                               (?)

** In state 5913, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 5913, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 5913, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 5903.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 NOCHANGE LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA mintypmax_expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                NOCHANGE LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                             expression 
                                                                                                                                                                                                                                                                             primary 
                                                                                                                                                                                                                                                                             (?)

** In state 5903, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 5903, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 5903, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 5901.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 NOCHANGE LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                NOCHANGE LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                  expression 
                                                                                                                                                                                                                                                  primary 
                                                                                                                                                                                                                                                  (?)

** In state 5901, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 5901, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 5901, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 5899.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 NOCHANGE LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                NOCHANGE LPAREN specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                     scalar_timing_check_condition 
                                                                                                                                                                                                                     expression 
                                                                                                                                                                                                                     primary 
                                                                                                                                                                                                                     (?)

** In state 5899, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 5899, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 5899, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 5886.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 NOCHANGE LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA mintypmax_expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                NOCHANGE LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                  expression 
                                                                                                                                                                                                                                                  primary 
                                                                                                                                                                                                                                                  (?)

** In state 5886, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 5886, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 5886, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 5884.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 NOCHANGE LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                NOCHANGE LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                       expression 
                                                                                                                                                                                                                       primary 
                                                                                                                                                                                                                       (?)

** In state 5884, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 5884, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 5884, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 5874.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 NOCHANGE LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA mintypmax_expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                NOCHANGE LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                     expression 
                                                                                                                                                                                                                                                                                     primary 
                                                                                                                                                                                                                                                                                     (?)

** In state 5874, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 5874, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 5874, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 5872.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 NOCHANGE LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                NOCHANGE LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                          expression 
                                                                                                                                                                                                                                                          primary 
                                                                                                                                                                                                                                                          (?)

** In state 5872, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 5872, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 5872, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 5870.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 NOCHANGE LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                NOCHANGE LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                             scalar_timing_check_condition 
                                                                                                                                                                                                                             expression 
                                                                                                                                                                                                                             primary 
                                                                                                                                                                                                                             (?)

** In state 5870, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 5870, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 5870, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 5859.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 NOCHANGE LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA mintypmax_expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                NOCHANGE LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                             expression 
                                                                                                                                                                                                                                                                             primary 
                                                                                                                                                                                                                                                                             (?)

** In state 5859, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 5859, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 5859, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 5857.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 NOCHANGE LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                NOCHANGE LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                  expression 
                                                                                                                                                                                                                                                  primary 
                                                                                                                                                                                                                                                  (?)

** In state 5857, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 5857, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 5857, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 5847.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 NOCHANGE LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA mintypmax_expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                NOCHANGE LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                expression 
                                                                                                                                                                                                                                                                                                                primary 
                                                                                                                                                                                                                                                                                                                (?)

** In state 5847, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 5847, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 5847, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 5845.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 NOCHANGE LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                NOCHANGE LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                     expression 
                                                                                                                                                                                                                                                                                     primary 
                                                                                                                                                                                                                                                                                     (?)

** In state 5845, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 5845, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 5845, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 5843.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 NOCHANGE LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                NOCHANGE LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                        scalar_timing_check_condition 
                                                                                                                                                                                                                                                        expression 
                                                                                                                                                                                                                                                        primary 
                                                                                                                                                                                                                                                        (?)

** In state 5843, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 5843, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 5843, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 5838.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 NOCHANGE LPAREN specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                NOCHANGE LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                        scalar_timing_check_condition 
                                                                                                                                                        expression 
                                                                                                                                                        primary 
                                                                                                                                                        (?)

** In state 5838, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 5838, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 5838, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 5827.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 NOCHANGE LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA mintypmax_expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                NOCHANGE LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                          expression 
                                                                                                                                                                                                                                          primary 
                                                                                                                                                                                                                                          (?)

** In state 5827, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 5827, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 5827, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 5825.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 NOCHANGE LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                NOCHANGE LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                               expression 
                                                                                                                                                                                                               primary 
                                                                                                                                                                                                               (?)

** In state 5825, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 5825, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 5825, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 5815.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 NOCHANGE LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA mintypmax_expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                NOCHANGE LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                             expression 
                                                                                                                                                                                                                                                                             primary 
                                                                                                                                                                                                                                                                             (?)

** In state 5815, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 5815, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 5815, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 5813.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 NOCHANGE LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                NOCHANGE LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                  expression 
                                                                                                                                                                                                                                                  primary 
                                                                                                                                                                                                                                                  (?)

** In state 5813, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 5813, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 5813, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 5811.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 NOCHANGE LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                NOCHANGE LPAREN timing_check_event_control specify_terminal_descriptor COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                     scalar_timing_check_condition 
                                                                                                                                                                                                                     expression 
                                                                                                                                                                                                                     primary 
                                                                                                                                                                                                                     (?)

** In state 5811, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 5811, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 5811, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 5800.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 NOCHANGE LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA mintypmax_expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                NOCHANGE LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                     expression 
                                                                                                                                                                                                                                                                     primary 
                                                                                                                                                                                                                                                                     (?)

** In state 5800, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 5800, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 5800, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 5798.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 NOCHANGE LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                NOCHANGE LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                          expression 
                                                                                                                                                                                                                                          primary 
                                                                                                                                                                                                                                          (?)

** In state 5798, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 5798, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 5798, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 5788.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 NOCHANGE LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA mintypmax_expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                NOCHANGE LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                        expression 
                                                                                                                                                                                                                                                                                                        primary 
                                                                                                                                                                                                                                                                                                        (?)

** In state 5788, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 5788, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 5788, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 5786.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 NOCHANGE LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                NOCHANGE LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                             expression 
                                                                                                                                                                                                                                                                             primary 
                                                                                                                                                                                                                                                                             (?)

** In state 5786, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 5786, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 5786, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 5784.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 NOCHANGE LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                NOCHANGE LPAREN timing_check_event_control specify_terminal_descriptor COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                scalar_timing_check_condition 
                                                                                                                                                                                                                                                expression 
                                                                                                                                                                                                                                                primary 
                                                                                                                                                                                                                                                (?)

** In state 5784, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 5784, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 5784, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 5771.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 NOCHANGE LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA mintypmax_expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                NOCHANGE LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                             expression 
                                                                                                                                                                                                                                                                             primary 
                                                                                                                                                                                                                                                                             (?)

** In state 5771, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 5771, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 5771, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 5769.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 NOCHANGE LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                NOCHANGE LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                  expression 
                                                                                                                                                                                                                                                  primary 
                                                                                                                                                                                                                                                  (?)

** In state 5769, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 5769, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 5769, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 5759.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 NOCHANGE LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA mintypmax_expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                NOCHANGE LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                expression 
                                                                                                                                                                                                                                                                                                                primary 
                                                                                                                                                                                                                                                                                                                (?)

** In state 5759, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 5759, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 5759, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 5757.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 NOCHANGE LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                NOCHANGE LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                     expression 
                                                                                                                                                                                                                                                                                     primary 
                                                                                                                                                                                                                                                                                     (?)

** In state 5757, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 5757, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 5757, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 5755.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 NOCHANGE LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                NOCHANGE LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                        scalar_timing_check_condition 
                                                                                                                                                                                                                                                        expression 
                                                                                                                                                                                                                                                        primary 
                                                                                                                                                                                                                                                        (?)

** In state 5755, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 5755, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 5755, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (reduce/reduce) in state 5753.
** Tokens involved: P_ANDANDAND LBRACK COMMA
** The following explanations concentrate on token P_ANDANDAND.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 NOCHANGE LPAREN identifier

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                NOCHANGE LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON // lookahead token appears
                                                                                                                (?)

** In state 5753, looking ahead at P_ANDANDAND, reducing production
** input_identifier -> identifier
** is permitted because of the following sub-derivation:

input_identifier // lookahead token is inherited
identifier . 

** In state 5753, looking ahead at P_ANDANDAND, reducing production
** input_identifier -> identifier
** is permitted because of the following sub-derivation:

input_identifier // lookahead token is inherited
identifier . 

** In state 5753, looking ahead at P_ANDANDAND, reducing production
** output_identifier -> identifier
** is permitted because of the following sub-derivation:

output_identifier // lookahead token is inherited
identifier . 

** In state 5753, looking ahead at P_ANDANDAND, reducing production
** output_identifier -> identifier
** is permitted because of the following sub-derivation:

output_identifier // lookahead token is inherited
identifier . 

** Conflict (shift/reduce/reduce) in state 5735.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 NOCHANGE LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA mintypmax_expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                NOCHANGE LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                        expression 
                                                                                                                                                                                                                                                                                                        primary 
                                                                                                                                                                                                                                                                                                        (?)

** In state 5735, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 5735, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 5735, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 5733.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 NOCHANGE LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                NOCHANGE LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                             expression 
                                                                                                                                                                                                                                                                             primary 
                                                                                                                                                                                                                                                                             (?)

** In state 5733, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 5733, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 5733, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 5721.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 NOCHANGE LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA mintypmax_expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                NOCHANGE LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                                           expression 
                                                                                                                                                                                                                                                                                                                                           primary 
                                                                                                                                                                                                                                                                                                                                           (?)

** In state 5721, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 5721, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 5721, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 5719.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 NOCHANGE LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                NOCHANGE LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                                                expression 
                                                                                                                                                                                                                                                                                                                primary 
                                                                                                                                                                                                                                                                                                                (?)

** In state 5719, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 5719, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 5719, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 5717.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 NOCHANGE LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                NOCHANGE LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                                                                                                                   scalar_timing_check_condition 
                                                                                                                                                                                                                                                                                   expression 
                                                                                                                                                                                                                                                                                   primary 
                                                                                                                                                                                                                                                                                   (?)

** In state 5717, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 5717, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 5717, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce) in state 5711.
** Token involved: TOKEN_ONE
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 NOCHANGE LPAREN specify_terminal_descriptor P_ANDANDAND expression P_CASEEQUAL

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                NOCHANGE LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                        scalar_timing_check_condition 
                                                                                                                                                        (?)

** In state 5711, looking ahead at TOKEN_ONE, reducing production
** binary_operator -> P_CASEEQUAL
** is permitted because of the following sub-derivation:

expression 
expression binary_operator expression // lookahead token appears because expression can begin with TOKEN_ONE
           P_CASEEQUAL . 

** In state 5711, looking ahead at TOKEN_ONE, shifting is permitted
** because of the following sub-derivation:

expression P_CASEEQUAL scalar_constant 
                       . TOKEN_ONE 

** Conflict (shift/reduce) in state 5709.
** Token involved: TOKEN_ONE
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 NOCHANGE LPAREN specify_terminal_descriptor P_ANDANDAND expression P_CASENOTEQUAL

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                NOCHANGE LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                        scalar_timing_check_condition 
                                                                                                                                                        (?)

** In state 5709, looking ahead at TOKEN_ONE, reducing production
** binary_operator -> P_CASENOTEQUAL
** is permitted because of the following sub-derivation:

expression 
expression binary_operator expression // lookahead token appears because expression can begin with TOKEN_ONE
           P_CASENOTEQUAL . 

** In state 5709, looking ahead at TOKEN_ONE, shifting is permitted
** because of the following sub-derivation:

expression P_CASENOTEQUAL scalar_constant 
                          . TOKEN_ONE 

** Conflict (shift/reduce) in state 5707.
** Token involved: TOKEN_ONE
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 NOCHANGE LPAREN specify_terminal_descriptor P_ANDANDAND expression P_EQUAL

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                NOCHANGE LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                        scalar_timing_check_condition 
                                                                                                                                                        (?)

** In state 5707, looking ahead at TOKEN_ONE, reducing production
** binary_operator -> P_EQUAL
** is permitted because of the following sub-derivation:

expression 
expression binary_operator expression // lookahead token appears because expression can begin with TOKEN_ONE
           P_EQUAL . 

** In state 5707, looking ahead at TOKEN_ONE, shifting is permitted
** because of the following sub-derivation:

expression P_EQUAL scalar_constant 
                   . TOKEN_ONE 

** Conflict (shift/reduce) in state 5695.
** Token involved: TOKEN_ONE
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 NOCHANGE LPAREN specify_terminal_descriptor P_ANDANDAND expression P_NOTEQUAL

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                NOCHANGE LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                        scalar_timing_check_condition 
                                                                                                                                                        (?)

** In state 5695, looking ahead at TOKEN_ONE, reducing production
** binary_operator -> P_NOTEQUAL
** is permitted because of the following sub-derivation:

expression 
expression binary_operator expression // lookahead token appears because expression can begin with TOKEN_ONE
           P_NOTEQUAL . 

** In state 5695, looking ahead at TOKEN_ONE, shifting is permitted
** because of the following sub-derivation:

expression P_NOTEQUAL scalar_constant 
                      . TOKEN_ONE 

** Conflict (reduce/reduce) in state 5694.
** Token involved: RPAREN
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 NOCHANGE LPAREN specify_terminal_descriptor P_ANDANDAND LPAREN expression

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                NOCHANGE LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                        (?)

** In state 5694, looking ahead at RPAREN, reducing production
** mintypmax_expression -> expression
** is permitted because of the following sub-derivation:

scalar_timing_check_condition 
expression 
primary 
LPAREN mintypmax_expression RPAREN // lookahead token appears
       expression . 

** In state 5694, looking ahead at RPAREN, reducing production
** scalar_timing_check_condition -> expression
** is permitted because of the following sub-derivation:

LPAREN scalar_timing_check_condition RPAREN // lookahead token appears
       expression . 

** Conflict (shift/reduce/reduce) in state 5691.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 NOCHANGE LPAREN specify_terminal_descriptor P_ANDANDAND LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                NOCHANGE LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                        (?)

** In state 5691, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

scalar_timing_check_condition 
expression 
LPAREN variable_lvalue assignment_operator expression RPAREN 
       hierarchical_identifier variable_lvalue_3 
       . SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 5691, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

LPAREN scalar_timing_check_condition RPAREN 
       expression 
       primary 
       implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
       . 

** In state 5691, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

LPAREN scalar_timing_check_condition RPAREN 
       expression 
       primary 
       implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
       . 

** Conflict (shift/reduce) in state 5689.
** Tokens involved: VOID UNSIGNED_NUMBER UNSIGNED TOKEN_TWO TOKEN_THREE TOKEN_SIX TOKEN_SEVEN TOKEN_QUOTE_Z2 TOKEN_QUOTE_Z1 TOKEN_QUOTE_X2 TOKEN_QUOTE_X1 TOKEN_QUOTE_TRUE TOKEN_QUOTE_FALSE TOKEN_ONE TOKEN_NINE TOKEN_FOUR TOKEN_FIVE TOKEN_EIGHT TIME THIS SYSTEM_FUNCTION_IDENTIFIER SVINT SUPER SIMPLE_IDENTIFIER SIGNED SHORTREAL SHORTINT REG REALTIME REAL OCTAL_BASE NULL LPAREN LONGINT LOGIC LCURLY INTEGER HEX_BASE DECIMAL_BASE BYTE BIT BINARY_BASE BACKSLASH
** The following explanations concentrate on token VOID.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 NOCHANGE LPAREN specify_terminal_descriptor P_ANDANDAND TILDE

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                NOCHANGE LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                        scalar_timing_check_condition 
                                                                                                                                                        (?)

** In state 5689, looking ahead at VOID, shifting is permitted
** because of the following sub-derivation:

TILDE expression 
      primary 
      . VOID SQUOTE LPAREN hierarchical_identifier RPAREN 

** In state 5689, looking ahead at VOID, reducing production
** unary_operator -> TILDE
** is permitted because of the following sub-derivation:

expression 
unary_operator primary // lookahead token appears because primary can begin with VOID
TILDE . 

** Conflict (shift/reduce/reduce) in state 5688.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 NOCHANGE LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                system_timing_check 
                                                                                                NOCHANGE LPAREN timing_check_event_control specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                                                                                   scalar_timing_check_condition 
                                                                                                                                                                                   expression 
                                                                                                                                                                                   primary 
                                                                                                                                                                                   (?)

** In state 5688, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 5688, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 5688, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 5593.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 VIRTUAL CLASS identifier EXTENDS identifier SEMICOLON class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        VIRTUAL CLASS identifier EXTENDS identifier SEMICOLON class_declaration_11 ENDCLASS 
                                                                                                                              class_declaration_11 class_item 
                                                                                                                                                   (?)

** In state 5593, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 5593, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 5593, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 5593, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 5589.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 VIRTUAL CLASS identifier EXTENDS identifier SEMICOLON timeunits_declaration class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        VIRTUAL CLASS identifier EXTENDS identifier SEMICOLON timeunits_declaration class_declaration_11 ENDCLASS 
                                                                                                                                                    class_declaration_11 class_item 
                                                                                                                                                                         (?)

** In state 5589, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 5589, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 5589, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 5589, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 5581.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 VIRTUAL CLASS identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN EXTENDS identifier SEMICOLON class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        VIRTUAL CLASS identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN EXTENDS identifier SEMICOLON class_declaration_11 ENDCLASS 
                                                                                                                                                                                             class_declaration_11 class_item 
                                                                                                                                                                                                                  (?)

** In state 5581, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 5581, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 5581, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 5581, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 5577.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 VIRTUAL CLASS identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN EXTENDS identifier SEMICOLON timeunits_declaration class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        VIRTUAL CLASS identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN EXTENDS identifier SEMICOLON timeunits_declaration class_declaration_11 ENDCLASS 
                                                                                                                                                                                                                   class_declaration_11 class_item 
                                                                                                                                                                                                                                        (?)

** In state 5577, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 5577, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 5577, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 5577, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 5569.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 VIRTUAL CLASS identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN SEMICOLON class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        VIRTUAL CLASS identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN SEMICOLON class_declaration_11 ENDCLASS 
                                                                                                                                                                          class_declaration_11 class_item 
                                                                                                                                                                                               (?)

** In state 5569, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 5569, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 5569, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 5569, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 5565.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 VIRTUAL CLASS identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN SEMICOLON timeunits_declaration class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        VIRTUAL CLASS identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN SEMICOLON timeunits_declaration class_declaration_11 ENDCLASS 
                                                                                                                                                                                                class_declaration_11 class_item 
                                                                                                                                                                                                                     (?)

** In state 5565, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 5565, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 5565, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 5565, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 5554.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 VIRTUAL CLASS identifier SEMICOLON class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        VIRTUAL CLASS identifier SEMICOLON class_declaration_11 ENDCLASS 
                                                                                                           class_declaration_11 class_item 
                                                                                                                                (?)

** In state 5554, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 5554, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 5554, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 5554, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 5550.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 VIRTUAL CLASS identifier SEMICOLON timeunits_declaration class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        VIRTUAL CLASS identifier SEMICOLON timeunits_declaration class_declaration_11 ENDCLASS 
                                                                                                                                 class_declaration_11 class_item 
                                                                                                                                                      (?)

** In state 5550, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 5550, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 5550, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 5550, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 5543.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 VIRTUAL CLASS lifetime identifier EXTENDS identifier SEMICOLON class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        VIRTUAL CLASS lifetime identifier EXTENDS identifier SEMICOLON class_declaration_11 ENDCLASS 
                                                                                                                                       class_declaration_11 class_item 
                                                                                                                                                            (?)

** In state 5543, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 5543, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 5543, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 5543, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 5539.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 VIRTUAL CLASS lifetime identifier EXTENDS identifier SEMICOLON timeunits_declaration class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        VIRTUAL CLASS lifetime identifier EXTENDS identifier SEMICOLON timeunits_declaration class_declaration_11 ENDCLASS 
                                                                                                                                                             class_declaration_11 class_item 
                                                                                                                                                                                  (?)

** In state 5539, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 5539, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 5539, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 5539, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 5531.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 VIRTUAL CLASS lifetime identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN EXTENDS identifier SEMICOLON class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        VIRTUAL CLASS lifetime identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN EXTENDS identifier SEMICOLON class_declaration_11 ENDCLASS 
                                                                                                                                                                                                      class_declaration_11 class_item 
                                                                                                                                                                                                                           (?)

** In state 5531, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 5531, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 5531, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 5531, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 5527.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 VIRTUAL CLASS lifetime identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN EXTENDS identifier SEMICOLON timeunits_declaration class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        VIRTUAL CLASS lifetime identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN EXTENDS identifier SEMICOLON timeunits_declaration class_declaration_11 ENDCLASS 
                                                                                                                                                                                                                            class_declaration_11 class_item 
                                                                                                                                                                                                                                                 (?)

** In state 5527, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 5527, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 5527, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 5527, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 5519.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 VIRTUAL CLASS lifetime identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN SEMICOLON class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        VIRTUAL CLASS lifetime identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN SEMICOLON class_declaration_11 ENDCLASS 
                                                                                                                                                                                   class_declaration_11 class_item 
                                                                                                                                                                                                        (?)

** In state 5519, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 5519, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 5519, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 5519, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 5515.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 VIRTUAL CLASS lifetime identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN SEMICOLON timeunits_declaration class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        VIRTUAL CLASS lifetime identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN SEMICOLON timeunits_declaration class_declaration_11 ENDCLASS 
                                                                                                                                                                                                         class_declaration_11 class_item 
                                                                                                                                                                                                                              (?)

** In state 5515, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 5515, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 5515, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 5515, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 5504.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 VIRTUAL CLASS lifetime identifier SEMICOLON class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        VIRTUAL CLASS lifetime identifier SEMICOLON class_declaration_11 ENDCLASS 
                                                                                                                    class_declaration_11 class_item 
                                                                                                                                         (?)

** In state 5504, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 5504, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 5504, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 5504, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 5500.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 VIRTUAL CLASS lifetime identifier SEMICOLON timeunits_declaration class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        VIRTUAL CLASS lifetime identifier SEMICOLON timeunits_declaration class_declaration_11 ENDCLASS 
                                                                                                                                          class_declaration_11 class_item 
                                                                                                                                                               (?)

** In state 5500, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 5500, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 5500, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 5500, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 5478.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 CLASS identifier EXTENDS identifier SEMICOLON class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              CLASS identifier EXTENDS identifier SEMICOLON class_declaration_11 ENDCLASS 
                                                            class_declaration_11 class_item 
                                                                                 (?)

** In state 5478, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 5478, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 5478, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 5478, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 5474.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 CLASS identifier EXTENDS identifier SEMICOLON timeunits_declaration class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              CLASS identifier EXTENDS identifier SEMICOLON timeunits_declaration class_declaration_11 ENDCLASS 
                                                                                  class_declaration_11 class_item 
                                                                                                       (?)

** In state 5474, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 5474, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 5474, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 5474, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 5466.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 CLASS identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN EXTENDS identifier SEMICOLON class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              CLASS identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN EXTENDS identifier SEMICOLON class_declaration_11 ENDCLASS 
                                                                                                                           class_declaration_11 class_item 
                                                                                                                                                (?)

** In state 5466, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 5466, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 5466, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 5466, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 5462.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 CLASS identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN EXTENDS identifier SEMICOLON timeunits_declaration class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              CLASS identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN EXTENDS identifier SEMICOLON timeunits_declaration class_declaration_11 ENDCLASS 
                                                                                                                                                 class_declaration_11 class_item 
                                                                                                                                                                      (?)

** In state 5462, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 5462, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 5462, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 5462, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 5454.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 CLASS identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN SEMICOLON class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              CLASS identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN SEMICOLON class_declaration_11 ENDCLASS 
                                                                                                        class_declaration_11 class_item 
                                                                                                                             (?)

** In state 5454, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 5454, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 5454, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 5454, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 5450.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 CLASS identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN SEMICOLON timeunits_declaration class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              CLASS identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN SEMICOLON timeunits_declaration class_declaration_11 ENDCLASS 
                                                                                                                              class_declaration_11 class_item 
                                                                                                                                                   (?)

** In state 5450, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 5450, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 5450, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 5450, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 5439.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 CLASS identifier SEMICOLON class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              CLASS identifier SEMICOLON class_declaration_11 ENDCLASS 
                                         class_declaration_11 class_item 
                                                              (?)

** In state 5439, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 5439, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 5439, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 5439, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 5435.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 CLASS identifier SEMICOLON timeunits_declaration class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              CLASS identifier SEMICOLON timeunits_declaration class_declaration_11 ENDCLASS 
                                                               class_declaration_11 class_item 
                                                                                    (?)

** In state 5435, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 5435, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 5435, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 5435, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 5428.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 CLASS lifetime identifier EXTENDS identifier SEMICOLON class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              CLASS lifetime identifier EXTENDS identifier SEMICOLON class_declaration_11 ENDCLASS 
                                                                     class_declaration_11 class_item 
                                                                                          (?)

** In state 5428, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 5428, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 5428, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 5428, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 5424.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 CLASS lifetime identifier EXTENDS identifier SEMICOLON timeunits_declaration class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              CLASS lifetime identifier EXTENDS identifier SEMICOLON timeunits_declaration class_declaration_11 ENDCLASS 
                                                                                           class_declaration_11 class_item 
                                                                                                                (?)

** In state 5424, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 5424, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 5424, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 5424, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 5416.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 CLASS lifetime identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN EXTENDS identifier SEMICOLON class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              CLASS lifetime identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN EXTENDS identifier SEMICOLON class_declaration_11 ENDCLASS 
                                                                                                                                    class_declaration_11 class_item 
                                                                                                                                                         (?)

** In state 5416, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 5416, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 5416, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 5416, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 5412.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 CLASS lifetime identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN EXTENDS identifier SEMICOLON timeunits_declaration class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              CLASS lifetime identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN EXTENDS identifier SEMICOLON timeunits_declaration class_declaration_11 ENDCLASS 
                                                                                                                                                          class_declaration_11 class_item 
                                                                                                                                                                               (?)

** In state 5412, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 5412, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 5412, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 5412, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 5404.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 CLASS lifetime identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN SEMICOLON class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              CLASS lifetime identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN SEMICOLON class_declaration_11 ENDCLASS 
                                                                                                                 class_declaration_11 class_item 
                                                                                                                                      (?)

** In state 5404, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 5404, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 5404, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 5404, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 5400.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 CLASS lifetime identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN SEMICOLON timeunits_declaration class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              CLASS lifetime identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN SEMICOLON timeunits_declaration class_declaration_11 ENDCLASS 
                                                                                                                                       class_declaration_11 class_item 
                                                                                                                                                            (?)

** In state 5400, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 5400, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 5400, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 5400, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 5389.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 CLASS lifetime identifier SEMICOLON class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              CLASS lifetime identifier SEMICOLON class_declaration_11 ENDCLASS 
                                                  class_declaration_11 class_item 
                                                                       (?)

** In state 5389, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 5389, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 5389, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 5389, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 5385.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 CLASS lifetime identifier SEMICOLON timeunits_declaration class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              CLASS lifetime identifier SEMICOLON timeunits_declaration class_declaration_11 ENDCLASS 
                                                                        class_declaration_11 class_item 
                                                                                             (?)

** In state 5385, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 5385, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 5385, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 5385, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce) in state 5371.
** Token involved: RPAREN
** This state is reached from start after reading:

source_text_3 EXTERN module_keyword identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              (?)

** In state 5371, looking ahead at RPAREN, shifting is permitted
** because of the following sub-derivation:

EXTERN module_keyword identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN list_of_port_declarations SEMICOLON 
                                                                                                LPAREN . RPAREN 

** In state 5371, looking ahead at RPAREN, reducing production
** port ->
** is permitted because of the following sub-derivation:

EXTERN module_keyword identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN LPAREN port list_of_ports_4 RPAREN SEMICOLON // lookahead token appears because list_of_ports_4 can vanish
                                                                                                       . 

** Conflict (shift/reduce) in state 5360.
** Token involved: RPAREN
** This state is reached from start after reading:

source_text_3 EXTERN module_keyword identifier LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              (?)

** In state 5360, looking ahead at RPAREN, shifting is permitted
** because of the following sub-derivation:

EXTERN module_keyword identifier list_of_port_declarations SEMICOLON 
                                 LPAREN . RPAREN 

** In state 5360, looking ahead at RPAREN, reducing production
** port ->
** is permitted because of the following sub-derivation:

EXTERN module_keyword identifier LPAREN port list_of_ports_4 RPAREN SEMICOLON // lookahead token appears because list_of_ports_4 can vanish
                                        . 

** Conflict (shift/reduce) in state 5349.
** Token involved: RPAREN
** This state is reached from start after reading:

source_text_3 EXTERN module_keyword lifetime identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              (?)

** In state 5349, looking ahead at RPAREN, shifting is permitted
** because of the following sub-derivation:

EXTERN module_keyword lifetime identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN list_of_port_declarations SEMICOLON 
                                                                                                         LPAREN . RPAREN 

** In state 5349, looking ahead at RPAREN, reducing production
** port ->
** is permitted because of the following sub-derivation:

EXTERN module_keyword lifetime identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN LPAREN port list_of_ports_4 RPAREN SEMICOLON // lookahead token appears because list_of_ports_4 can vanish
                                                                                                                . 

** Conflict (shift/reduce) in state 5338.
** Token involved: RPAREN
** This state is reached from start after reading:

source_text_3 EXTERN module_keyword lifetime identifier LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              (?)

** In state 5338, looking ahead at RPAREN, shifting is permitted
** because of the following sub-derivation:

EXTERN module_keyword lifetime identifier list_of_port_declarations SEMICOLON 
                                          LPAREN . RPAREN 

** In state 5338, looking ahead at RPAREN, reducing production
** port ->
** is permitted because of the following sub-derivation:

EXTERN module_keyword lifetime identifier LPAREN port list_of_ports_4 RPAREN SEMICOLON // lookahead token appears because list_of_ports_4 can vanish
                                                 . 

** Conflict (shift/reduce) in state 5324.
** Token involved: COMMA
** This state is reached from start after reading:

source_text_3 EXTERN PRIMITIVE identifier LPAREN udp_output_declaration COMMA INPUT identifier list_of_udp_port_identifiers_3

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              udp_declaration 
              (?)

** In state 5324, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

EXTERN PRIMITIVE identifier LPAREN udp_output_declaration COMMA INPUT identifier list_of_udp_port_identifiers_3 udp_declaration_port_list_5 RPAREN SEMICOLON 
                                                                                 list_of_udp_port_identifiers_3 . COMMA identifier 

** In state 5324, looking ahead at COMMA, reducing production
** udp_declaration_port_list_5 ->
** is permitted because of the following sub-derivation:

EXTERN PRIMITIVE identifier LPAREN udp_output_declaration COMMA INPUT identifier list_of_udp_port_identifiers_3 udp_declaration_port_list_5 RPAREN SEMICOLON 
                                                                                                                udp_declaration_port_list_5 COMMA INPUT identifier list_of_udp_port_identifiers_3 // lookahead token appears
                                                                                                                . 

** Conflict (shift/reduce) in state 5280.
** Token involved: RPAREN
** This state is reached from start after reading:

source_text_3 INTERFACE identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              (?)

** In state 5280, looking ahead at RPAREN, shifting is permitted
** because of the following sub-derivation:

INTERFACE identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN list_of_port_declarations SEMICOLON interface_declaration_10 ENDINTERFACE 
                                                                                    LPAREN . RPAREN 

** In state 5280, looking ahead at RPAREN, reducing production
** port ->
** is permitted because of the following sub-derivation:

INTERFACE identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN LPAREN port list_of_ports_4 RPAREN SEMICOLON interface_declaration_4 ENDINTERFACE // lookahead token appears because list_of_ports_4 can vanish
                                                                                           . 

** Conflict (shift/reduce) in state 5238.
** Token involved: RPAREN
** This state is reached from start after reading:

source_text_3 INTERFACE identifier LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              (?)

** In state 5238, looking ahead at RPAREN, shifting is permitted
** because of the following sub-derivation:

INTERFACE identifier list_of_port_declarations SEMICOLON interface_declaration_10 ENDINTERFACE 
                     LPAREN . RPAREN 

** In state 5238, looking ahead at RPAREN, reducing production
** port ->
** is permitted because of the following sub-derivation:

INTERFACE identifier LPAREN port list_of_ports_4 RPAREN SEMICOLON interface_declaration_4 ENDINTERFACE // lookahead token appears because list_of_ports_4 can vanish
                            . 

** Conflict (shift/reduce) in state 5191.
** Token involved: RPAREN
** This state is reached from start after reading:

source_text_3 INTERFACE lifetime identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              (?)

** In state 5191, looking ahead at RPAREN, shifting is permitted
** because of the following sub-derivation:

INTERFACE lifetime identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN list_of_port_declarations SEMICOLON interface_declaration_10 ENDINTERFACE 
                                                                                             LPAREN . RPAREN 

** In state 5191, looking ahead at RPAREN, reducing production
** port ->
** is permitted because of the following sub-derivation:

INTERFACE lifetime identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN LPAREN port list_of_ports_4 RPAREN SEMICOLON interface_declaration_4 ENDINTERFACE // lookahead token appears because list_of_ports_4 can vanish
                                                                                                    . 

** Conflict (reduce/reduce) in state 5171.
** Tokens involved: LPAREN LBRACK
** The following explanations concentrate on token LPAREN.
** This state is reached from start after reading:

source_text_3 INTERFACE identifier LPAREN P_DOTSTAR RPAREN SEMICOLON interface_declaration_22 identifier identifier

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier LPAREN P_DOTSTAR RPAREN SEMICOLON interface_declaration_22 ENDINTERFACE 
                                                                     interface_declaration_22 interface_item 
                                                                                              non_port_interface_item 
                                                                                              interface_or_generate_item 
                                                                                              module_common_item 
                                                                                              (?)

** In state 5171, looking ahead at LPAREN, reducing production
** name_of_instance_3 ->
** is permitted because of the following sub-derivation:

identifier identifier name_of_instance_3 LPAREN RPAREN interface_instantiation_5 SEMICOLON // lookahead token appears
                      . 

** In state 5171, looking ahead at LPAREN, reducing production
** program_instance_3 ->
** is permitted because of the following sub-derivation:

identifier identifier program_instance_3 LPAREN RPAREN program_instantiation_5 SEMICOLON // lookahead token appears
                      . 

** Conflict (shift/reduce) in state 5170.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 INTERFACE identifier LPAREN P_DOTSTAR RPAREN SEMICOLON interface_declaration_22 identifier

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier LPAREN P_DOTSTAR RPAREN SEMICOLON interface_declaration_22 ENDINTERFACE 
                                                                     interface_declaration_22 interface_item 
                                                                                              (?)

** In state 5170, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

non_generic_port_declaration SEMICOLON 
interface_port_declaration 
identifier identifier list_of_interface_identifiers_3 list_of_interface_identifiers_4 
           . SIMPLE_IDENTIFIER 

** In state 5170, looking ahead at SIMPLE_IDENTIFIER, reducing production
** type_declaration_identifier_3 ->
** is permitted because of the following sub-derivation:

non_port_interface_item 
interface_or_generate_item 
module_common_item 
module_or_generate_item_declaration 
data_declaration 
data_type list_of_variable_identifiers_or_assignments SEMICOLON // lookahead token appears because list_of_variable_identifiers_or_assignments can begin with SIMPLE_IDENTIFIER
identifier type_declaration_identifier_3 data_type_11 // lookahead token is inherited because data_type_11 can vanish
           . 

** Conflict (shift/reduce) in state 5156.
** Token involved: RPAREN
** This state is reached from start after reading:

source_text_3 INTERFACE lifetime identifier LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              (?)

** In state 5156, looking ahead at RPAREN, shifting is permitted
** because of the following sub-derivation:

INTERFACE lifetime identifier list_of_port_declarations SEMICOLON interface_declaration_10 ENDINTERFACE 
                              LPAREN . RPAREN 

** In state 5156, looking ahead at RPAREN, reducing production
** port ->
** is permitted because of the following sub-derivation:

INTERFACE lifetime identifier LPAREN port list_of_ports_4 RPAREN SEMICOLON interface_declaration_4 ENDINTERFACE // lookahead token appears because list_of_ports_4 can vanish
                                     . 

** Conflict (shift/reduce) in state 5151.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 INTERFACE identifier SEMICOLON interface_declaration_10 identifier

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier SEMICOLON interface_declaration_10 ENDINTERFACE 
                                             interface_declaration_10 non_port_interface_item 
                                                                      interface_or_generate_item 
                                                                      module_common_item 
                                                                      (?)

** In state 5151, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

identifier identifier name_of_instance_3 LPAREN RPAREN interface_instantiation_5 SEMICOLON 
           . SIMPLE_IDENTIFIER 

** In state 5151, looking ahead at SIMPLE_IDENTIFIER, reducing production
** type_declaration_identifier_3 ->
** is permitted because of the following sub-derivation:

module_or_generate_item_declaration 
data_declaration 
data_type list_of_variable_identifiers_or_assignments SEMICOLON // lookahead token appears because list_of_variable_identifiers_or_assignments can begin with SIMPLE_IDENTIFIER
identifier type_declaration_identifier_3 data_type_11 // lookahead token is inherited because data_type_11 can vanish
           . 

** Conflict (shift/reduce/reduce) in state 5143.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 INTERFACE identifier SEMICOLON interface_declaration_10 CLASS identifier EXTENDS identifier SEMICOLON class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier SEMICOLON interface_declaration_10 ENDINTERFACE 
                                             interface_declaration_10 non_port_interface_item 
                                                                      CLASS identifier EXTENDS identifier SEMICOLON class_declaration_11 ENDCLASS 
                                                                                                                    class_declaration_11 class_item 
                                                                                                                                         (?)

** In state 5143, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 5143, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 5143, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 5143, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 5139.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 INTERFACE identifier SEMICOLON interface_declaration_10 CLASS identifier EXTENDS identifier SEMICOLON timeunits_declaration class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier SEMICOLON interface_declaration_10 ENDINTERFACE 
                                             interface_declaration_10 non_port_interface_item 
                                                                      CLASS identifier EXTENDS identifier SEMICOLON timeunits_declaration class_declaration_11 ENDCLASS 
                                                                                                                                          class_declaration_11 class_item 
                                                                                                                                                               (?)

** In state 5139, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 5139, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 5139, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 5139, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 5131.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 INTERFACE identifier SEMICOLON interface_declaration_10 CLASS identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN EXTENDS identifier SEMICOLON class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier SEMICOLON interface_declaration_10 ENDINTERFACE 
                                             interface_declaration_10 non_port_interface_item 
                                                                      CLASS identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN EXTENDS identifier SEMICOLON class_declaration_11 ENDCLASS 
                                                                                                                                                                                   class_declaration_11 class_item 
                                                                                                                                                                                                        (?)

** In state 5131, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 5131, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 5131, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 5131, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 5127.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 INTERFACE identifier SEMICOLON interface_declaration_10 CLASS identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN EXTENDS identifier SEMICOLON timeunits_declaration class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier SEMICOLON interface_declaration_10 ENDINTERFACE 
                                             interface_declaration_10 non_port_interface_item 
                                                                      CLASS identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN EXTENDS identifier SEMICOLON timeunits_declaration class_declaration_11 ENDCLASS 
                                                                                                                                                                                                         class_declaration_11 class_item 
                                                                                                                                                                                                                              (?)

** In state 5127, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 5127, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 5127, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 5127, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 5119.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 INTERFACE identifier SEMICOLON interface_declaration_10 CLASS identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN SEMICOLON class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier SEMICOLON interface_declaration_10 ENDINTERFACE 
                                             interface_declaration_10 non_port_interface_item 
                                                                      CLASS identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN SEMICOLON class_declaration_11 ENDCLASS 
                                                                                                                                                                class_declaration_11 class_item 
                                                                                                                                                                                     (?)

** In state 5119, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 5119, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 5119, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 5119, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 5115.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 INTERFACE identifier SEMICOLON interface_declaration_10 CLASS identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN SEMICOLON timeunits_declaration class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier SEMICOLON interface_declaration_10 ENDINTERFACE 
                                             interface_declaration_10 non_port_interface_item 
                                                                      CLASS identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN SEMICOLON timeunits_declaration class_declaration_11 ENDCLASS 
                                                                                                                                                                                      class_declaration_11 class_item 
                                                                                                                                                                                                           (?)

** In state 5115, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 5115, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 5115, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 5115, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 5104.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 INTERFACE identifier SEMICOLON interface_declaration_10 CLASS identifier SEMICOLON class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier SEMICOLON interface_declaration_10 ENDINTERFACE 
                                             interface_declaration_10 non_port_interface_item 
                                                                      CLASS identifier SEMICOLON class_declaration_11 ENDCLASS 
                                                                                                 class_declaration_11 class_item 
                                                                                                                      (?)

** In state 5104, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 5104, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 5104, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 5104, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 5100.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 INTERFACE identifier SEMICOLON interface_declaration_10 CLASS identifier SEMICOLON timeunits_declaration class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier SEMICOLON interface_declaration_10 ENDINTERFACE 
                                             interface_declaration_10 non_port_interface_item 
                                                                      CLASS identifier SEMICOLON timeunits_declaration class_declaration_11 ENDCLASS 
                                                                                                                       class_declaration_11 class_item 
                                                                                                                                            (?)

** In state 5100, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 5100, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 5100, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 5100, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 5093.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 INTERFACE identifier SEMICOLON interface_declaration_10 CLASS lifetime identifier EXTENDS identifier SEMICOLON class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier SEMICOLON interface_declaration_10 ENDINTERFACE 
                                             interface_declaration_10 non_port_interface_item 
                                                                      CLASS lifetime identifier EXTENDS identifier SEMICOLON class_declaration_11 ENDCLASS 
                                                                                                                             class_declaration_11 class_item 
                                                                                                                                                  (?)

** In state 5093, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 5093, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 5093, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 5093, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 5089.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 INTERFACE identifier SEMICOLON interface_declaration_10 CLASS lifetime identifier EXTENDS identifier SEMICOLON timeunits_declaration class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier SEMICOLON interface_declaration_10 ENDINTERFACE 
                                             interface_declaration_10 non_port_interface_item 
                                                                      CLASS lifetime identifier EXTENDS identifier SEMICOLON timeunits_declaration class_declaration_11 ENDCLASS 
                                                                                                                                                   class_declaration_11 class_item 
                                                                                                                                                                        (?)

** In state 5089, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 5089, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 5089, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 5089, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 5081.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 INTERFACE identifier SEMICOLON interface_declaration_10 CLASS lifetime identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN EXTENDS identifier SEMICOLON class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier SEMICOLON interface_declaration_10 ENDINTERFACE 
                                             interface_declaration_10 non_port_interface_item 
                                                                      CLASS lifetime identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN EXTENDS identifier SEMICOLON class_declaration_11 ENDCLASS 
                                                                                                                                                                                            class_declaration_11 class_item 
                                                                                                                                                                                                                 (?)

** In state 5081, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 5081, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 5081, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 5081, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 5077.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 INTERFACE identifier SEMICOLON interface_declaration_10 CLASS lifetime identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN EXTENDS identifier SEMICOLON timeunits_declaration class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier SEMICOLON interface_declaration_10 ENDINTERFACE 
                                             interface_declaration_10 non_port_interface_item 
                                                                      CLASS lifetime identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN EXTENDS identifier SEMICOLON timeunits_declaration class_declaration_11 ENDCLASS 
                                                                                                                                                                                                                  class_declaration_11 class_item 
                                                                                                                                                                                                                                       (?)

** In state 5077, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 5077, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 5077, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 5077, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 5069.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 INTERFACE identifier SEMICOLON interface_declaration_10 CLASS lifetime identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN SEMICOLON class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier SEMICOLON interface_declaration_10 ENDINTERFACE 
                                             interface_declaration_10 non_port_interface_item 
                                                                      CLASS lifetime identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN SEMICOLON class_declaration_11 ENDCLASS 
                                                                                                                                                                         class_declaration_11 class_item 
                                                                                                                                                                                              (?)

** In state 5069, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 5069, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 5069, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 5069, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 5065.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 INTERFACE identifier SEMICOLON interface_declaration_10 CLASS lifetime identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN SEMICOLON timeunits_declaration class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier SEMICOLON interface_declaration_10 ENDINTERFACE 
                                             interface_declaration_10 non_port_interface_item 
                                                                      CLASS lifetime identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN SEMICOLON timeunits_declaration class_declaration_11 ENDCLASS 
                                                                                                                                                                                               class_declaration_11 class_item 
                                                                                                                                                                                                                    (?)

** In state 5065, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 5065, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 5065, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 5065, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 5054.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 INTERFACE identifier SEMICOLON interface_declaration_10 CLASS lifetime identifier SEMICOLON class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier SEMICOLON interface_declaration_10 ENDINTERFACE 
                                             interface_declaration_10 non_port_interface_item 
                                                                      CLASS lifetime identifier SEMICOLON class_declaration_11 ENDCLASS 
                                                                                                          class_declaration_11 class_item 
                                                                                                                               (?)

** In state 5054, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 5054, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 5054, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 5054, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 5050.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 INTERFACE identifier SEMICOLON interface_declaration_10 CLASS lifetime identifier SEMICOLON timeunits_declaration class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier SEMICOLON interface_declaration_10 ENDINTERFACE 
                                             interface_declaration_10 non_port_interface_item 
                                                                      CLASS lifetime identifier SEMICOLON timeunits_declaration class_declaration_11 ENDCLASS 
                                                                                                                                class_declaration_11 class_item 
                                                                                                                                                     (?)

** In state 5050, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 5050, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 5050, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 5050, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce) in state 5033.
** Token involved: RPAREN
** This state is reached from start after reading:

source_text_3 EXTERN INTERFACE identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              (?)

** In state 5033, looking ahead at RPAREN, shifting is permitted
** because of the following sub-derivation:

EXTERN INTERFACE identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN list_of_port_declarations SEMICOLON 
                                                                                           LPAREN . RPAREN 

** In state 5033, looking ahead at RPAREN, reducing production
** port ->
** is permitted because of the following sub-derivation:

EXTERN INTERFACE identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN LPAREN port list_of_ports_4 RPAREN SEMICOLON // lookahead token appears because list_of_ports_4 can vanish
                                                                                                  . 

** Conflict (shift/reduce) in state 5022.
** Token involved: RPAREN
** This state is reached from start after reading:

source_text_3 EXTERN INTERFACE identifier LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              (?)

** In state 5022, looking ahead at RPAREN, shifting is permitted
** because of the following sub-derivation:

EXTERN INTERFACE identifier list_of_port_declarations SEMICOLON 
                            LPAREN . RPAREN 

** In state 5022, looking ahead at RPAREN, reducing production
** port ->
** is permitted because of the following sub-derivation:

EXTERN INTERFACE identifier LPAREN port list_of_ports_4 RPAREN SEMICOLON // lookahead token appears because list_of_ports_4 can vanish
                                   . 

** Conflict (shift/reduce) in state 5011.
** Token involved: RPAREN
** This state is reached from start after reading:

source_text_3 EXTERN INTERFACE lifetime identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              (?)

** In state 5011, looking ahead at RPAREN, shifting is permitted
** because of the following sub-derivation:

EXTERN INTERFACE lifetime identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN list_of_port_declarations SEMICOLON 
                                                                                                    LPAREN . RPAREN 

** In state 5011, looking ahead at RPAREN, reducing production
** port ->
** is permitted because of the following sub-derivation:

EXTERN INTERFACE lifetime identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN LPAREN port list_of_ports_4 RPAREN SEMICOLON // lookahead token appears because list_of_ports_4 can vanish
                                                                                                           . 

** Conflict (shift/reduce) in state 5000.
** Token involved: RPAREN
** This state is reached from start after reading:

source_text_3 EXTERN INTERFACE lifetime identifier LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              (?)

** In state 5000, looking ahead at RPAREN, shifting is permitted
** because of the following sub-derivation:

EXTERN INTERFACE lifetime identifier list_of_port_declarations SEMICOLON 
                                     LPAREN . RPAREN 

** In state 5000, looking ahead at RPAREN, reducing production
** port ->
** is permitted because of the following sub-derivation:

EXTERN INTERFACE lifetime identifier LPAREN port list_of_ports_4 RPAREN SEMICOLON // lookahead token appears because list_of_ports_4 can vanish
                                            . 

** Conflict (shift/reduce) in state 4987.
** Token involved: RPAREN
** This state is reached from start after reading:

source_text_3 EXTERN PROGRAM identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              program_declaration 
              (?)

** In state 4987, looking ahead at RPAREN, shifting is permitted
** because of the following sub-derivation:

EXTERN PROGRAM identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN list_of_port_declarations SEMICOLON 
                                                                                         LPAREN . RPAREN 

** In state 4987, looking ahead at RPAREN, reducing production
** port ->
** is permitted because of the following sub-derivation:

EXTERN PROGRAM identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN LPAREN port list_of_ports_4 RPAREN SEMICOLON // lookahead token appears because list_of_ports_4 can vanish
                                                                                                . 

** Conflict (shift/reduce) in state 4976.
** Token involved: RPAREN
** This state is reached from start after reading:

source_text_3 EXTERN PROGRAM identifier LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              program_declaration 
              (?)

** In state 4976, looking ahead at RPAREN, shifting is permitted
** because of the following sub-derivation:

EXTERN PROGRAM identifier list_of_port_declarations SEMICOLON 
                          LPAREN . RPAREN 

** In state 4976, looking ahead at RPAREN, reducing production
** port ->
** is permitted because of the following sub-derivation:

EXTERN PROGRAM identifier LPAREN port list_of_ports_4 RPAREN SEMICOLON // lookahead token appears because list_of_ports_4 can vanish
                                 . 

** Conflict (shift/reduce) in state 4965.
** Token involved: RPAREN
** This state is reached from start after reading:

source_text_3 EXTERN PROGRAM lifetime identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              program_declaration 
              (?)

** In state 4965, looking ahead at RPAREN, shifting is permitted
** because of the following sub-derivation:

EXTERN PROGRAM lifetime identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN list_of_port_declarations SEMICOLON 
                                                                                                  LPAREN . RPAREN 

** In state 4965, looking ahead at RPAREN, reducing production
** port ->
** is permitted because of the following sub-derivation:

EXTERN PROGRAM lifetime identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN LPAREN port list_of_ports_4 RPAREN SEMICOLON // lookahead token appears because list_of_ports_4 can vanish
                                                                                                         . 

** Conflict (shift/reduce) in state 4954.
** Token involved: RPAREN
** This state is reached from start after reading:

source_text_3 EXTERN PROGRAM lifetime identifier LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              program_declaration 
              (?)

** In state 4954, looking ahead at RPAREN, shifting is permitted
** because of the following sub-derivation:

EXTERN PROGRAM lifetime identifier list_of_port_declarations SEMICOLON 
                                   LPAREN . RPAREN 

** In state 4954, looking ahead at RPAREN, reducing production
** port ->
** is permitted because of the following sub-derivation:

EXTERN PROGRAM lifetime identifier LPAREN port list_of_ports_4 RPAREN SEMICOLON // lookahead token appears because list_of_ports_4 can vanish
                                          . 

** Conflict (shift/reduce) in state 4944.
** Token involved: ELSE
** This state is reached from start after reading:

source_text_3 INTERFACE identifier SEMICOLON interface_declaration_10 GENERATE generated_interface_instantiation_3 IF LPAREN constant_expression RPAREN IF LPAREN constant_expression RPAREN generate_interface_item

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier SEMICOLON interface_declaration_10 ENDINTERFACE 
                                             interface_declaration_10 non_port_interface_item 
                                                                      GENERATE generated_interface_instantiation_3 ENDGENERATE 
                                                                               generated_interface_instantiation_3 generate_interface_item 
                                                                                                                   (?)

** In state 4944, looking ahead at ELSE, reducing production
** generate_interface_item -> IF LPAREN constant_expression RPAREN generate_interface_item
** is permitted because of the following sub-derivation:

IF LPAREN constant_expression RPAREN generate_interface_item ELSE generate_interface_item // lookahead token appears
                                     IF LPAREN constant_expression RPAREN generate_interface_item . 

** In state 4944, looking ahead at ELSE, shifting is permitted
** because of the following sub-derivation:

IF LPAREN constant_expression RPAREN generate_interface_item 
                                     IF LPAREN constant_expression RPAREN generate_interface_item . ELSE generate_interface_item 

** Conflict (shift/reduce) in state 4896.
** Tokens involved: SIMPLE_IDENTIFIER RPAREN DOT BACKSLASH
** The following explanations concentrate on token DOT.
** This state is reached from start after reading:

source_text_3 INTERFACE identifier SEMICOLON interface_declaration_10 identifier identifier name_of_instance_3 LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier SEMICOLON interface_declaration_10 ENDINTERFACE 
                                             interface_declaration_10 non_port_interface_item 
                                                                      interface_or_generate_item 
                                                                      module_common_item 
                                                                      identifier identifier name_of_instance_3 LPAREN list_of_port_connections RPAREN interface_instantiation_5 SEMICOLON 
                                                                                                                      (?)

** In state 4896, looking ahead at DOT, shifting is permitted
** because of the following sub-derivation:

dot_named_port_connection list_of_port_connections_6 
. DOT identifier 

** In state 4896, looking ahead at DOT, reducing production
** list_of_port_connections_8 ->
** is permitted because of the following sub-derivation:

list_of_port_connections_8 P_DOTSTAR list_of_port_connections_10 
list_of_port_connections_8 DOT identifier LPAREN RPAREN COMMA // lookahead token appears
. 

** Conflict (shift/reduce) in state 4887.
** Tokens involved: SIMPLE_IDENTIFIER RPAREN DOT BACKSLASH
** The following explanations concentrate on token DOT.
** This state is reached from start after reading:

source_text_3 identifier identifier program_instance_3 LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              identifier identifier program_instance_3 LPAREN list_of_port_connections RPAREN program_instantiation_5 SEMICOLON 
                                                              (?)

** In state 4887, looking ahead at DOT, shifting is permitted
** because of the following sub-derivation:

dot_named_port_connection list_of_port_connections_6 
. DOT identifier 

** In state 4887, looking ahead at DOT, reducing production
** list_of_port_connections_8 ->
** is permitted because of the following sub-derivation:

list_of_port_connections_8 P_DOTSTAR list_of_port_connections_10 
list_of_port_connections_8 DOT identifier LPAREN RPAREN COMMA // lookahead token appears
. 

** Conflict (reduce/reduce) in state 4885.
** Tokens involved: LPAREN LBRACK
** The following explanations concentrate on token LPAREN.
** This state is reached from start after reading:

source_text_3 INTERFACE identifier SEMICOLON interface_declaration_10 identifier identifier

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier SEMICOLON interface_declaration_10 ENDINTERFACE 
                                             interface_declaration_10 non_port_interface_item 
                                                                      interface_or_generate_item 
                                                                      module_common_item 
                                                                      (?)

** In state 4885, looking ahead at LPAREN, reducing production
** name_of_instance_3 ->
** is permitted because of the following sub-derivation:

identifier identifier name_of_instance_3 LPAREN RPAREN interface_instantiation_5 SEMICOLON // lookahead token appears
                      . 

** In state 4885, looking ahead at LPAREN, reducing production
** program_instance_3 ->
** is permitted because of the following sub-derivation:

identifier identifier program_instance_3 LPAREN RPAREN program_instantiation_5 SEMICOLON // lookahead token appears
                      . 

** Conflict (shift/reduce) in state 4860.
** Tokens involved: SIMPLE_IDENTIFIER RPAREN DOT BACKSLASH
** The following explanations concentrate on token DOT.
** This state is reached from start after reading:

source_text_3 INTERFACE identifier SEMICOLON interface_declaration_10 identifier HASH LPAREN list_of_parameter_assignments RPAREN identifier name_of_instance_3 LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier SEMICOLON interface_declaration_10 ENDINTERFACE 
                                             interface_declaration_10 non_port_interface_item 
                                                                      interface_or_generate_item 
                                                                      module_common_item 
                                                                      identifier HASH LPAREN list_of_parameter_assignments RPAREN identifier name_of_instance_3 LPAREN list_of_port_connections RPAREN interface_instantiation_5 SEMICOLON 
                                                                                                                                                                       (?)

** In state 4860, looking ahead at DOT, shifting is permitted
** because of the following sub-derivation:

dot_named_port_connection list_of_port_connections_6 
. DOT identifier 

** In state 4860, looking ahead at DOT, reducing production
** list_of_port_connections_8 ->
** is permitted because of the following sub-derivation:

list_of_port_connections_8 P_DOTSTAR list_of_port_connections_10 
list_of_port_connections_8 DOT identifier LPAREN RPAREN COMMA // lookahead token appears
. 

** Conflict (shift/reduce) in state 4851.
** Tokens involved: SIMPLE_IDENTIFIER RPAREN DOT BACKSLASH
** The following explanations concentrate on token DOT.
** This state is reached from start after reading:

source_text_3 identifier HASH LPAREN list_of_parameter_assignments RPAREN identifier program_instance_3 LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              identifier HASH LPAREN list_of_parameter_assignments RPAREN identifier program_instance_3 LPAREN list_of_port_connections RPAREN program_instantiation_5 SEMICOLON 
                                                                                                               (?)

** In state 4851, looking ahead at DOT, shifting is permitted
** because of the following sub-derivation:

dot_named_port_connection list_of_port_connections_6 
. DOT identifier 

** In state 4851, looking ahead at DOT, reducing production
** list_of_port_connections_8 ->
** is permitted because of the following sub-derivation:

list_of_port_connections_8 P_DOTSTAR list_of_port_connections_10 
list_of_port_connections_8 DOT identifier LPAREN RPAREN COMMA // lookahead token appears
. 

** Conflict (reduce/reduce) in state 4849.
** Tokens involved: LPAREN LBRACK
** The following explanations concentrate on token LPAREN.
** This state is reached from start after reading:

source_text_3 INTERFACE identifier SEMICOLON interface_declaration_10 identifier HASH LPAREN list_of_parameter_assignments RPAREN identifier

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier SEMICOLON interface_declaration_10 ENDINTERFACE 
                                             interface_declaration_10 non_port_interface_item 
                                                                      interface_or_generate_item 
                                                                      module_common_item 
                                                                      (?)

** In state 4849, looking ahead at LPAREN, reducing production
** name_of_instance_3 ->
** is permitted because of the following sub-derivation:

identifier HASH LPAREN list_of_parameter_assignments RPAREN identifier name_of_instance_3 LPAREN RPAREN interface_instantiation_5 SEMICOLON // lookahead token appears
                                                                       . 

** In state 4849, looking ahead at LPAREN, reducing production
** program_instance_3 ->
** is permitted because of the following sub-derivation:

identifier HASH LPAREN list_of_parameter_assignments RPAREN identifier program_instance_3 LPAREN RPAREN program_instantiation_5 SEMICOLON // lookahead token appears
                                                                       . 

** Conflict (shift/reduce/reduce) in state 4846.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 INTERFACE identifier SEMICOLON interface_declaration_10 identifier HASH LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier SEMICOLON interface_declaration_10 ENDINTERFACE 
                                             interface_declaration_10 non_port_interface_item 
                                                                      interface_or_generate_item 
                                                                      module_common_item 
                                                                      identifier HASH LPAREN list_of_parameter_assignments RPAREN identifier name_of_instance_3 LPAREN RPAREN interface_instantiation_5 SEMICOLON 
                                                                                             ordered_parameter_assignment list_of_parameter_assignments_3 
                                                                                             expression 
                                                                                             primary 
                                                                                             (?)

** In state 4846, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 4846, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 4846, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce) in state 4844.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 INTERFACE identifier SEMICOLON interface_declaration_10 GENERATE generated_interface_instantiation_3 identifier

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier SEMICOLON interface_declaration_10 ENDINTERFACE 
                                             interface_declaration_10 non_port_interface_item 
                                                                      GENERATE generated_interface_instantiation_3 ENDGENERATE 
                                                                               generated_interface_instantiation_3 generate_interface_item 
                                                                                                                   interface_or_generate_item 
                                                                                                                   module_common_item 
                                                                                                                   (?)

** In state 4844, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

identifier identifier name_of_instance_3 LPAREN RPAREN interface_instantiation_5 SEMICOLON 
           . SIMPLE_IDENTIFIER 

** In state 4844, looking ahead at SIMPLE_IDENTIFIER, reducing production
** type_declaration_identifier_3 ->
** is permitted because of the following sub-derivation:

module_or_generate_item_declaration 
data_declaration 
data_type list_of_variable_identifiers_or_assignments SEMICOLON // lookahead token appears because list_of_variable_identifiers_or_assignments can begin with SIMPLE_IDENTIFIER
identifier type_declaration_identifier_3 data_type_11 // lookahead token is inherited because data_type_11 can vanish
           . 

** Conflict (reduce/reduce) in state 4802.
** Tokens involved: SEMICOLON COMMA
** The following explanations concentrate on token SEMICOLON.
** This state is reached from start after reading:

source_text_3 BIND identifier identifier identifier name_of_instance_3 LPAREN list_of_port_connections RPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              bind_directive 
              BIND identifier bind_instantiation SEMICOLON 
                              (?)

** In state 4802, looking ahead at SEMICOLON, reducing production
** interface_instantiation_5 ->
** is permitted because of the following sub-derivation:

identifier identifier name_of_instance_3 LPAREN list_of_port_connections RPAREN interface_instantiation_5 SEMICOLON // lookahead token appears
                                                                                . 

** In state 4802, looking ahead at SEMICOLON, reducing production
** module_instantiation_5 ->
** is permitted because of the following sub-derivation:

identifier identifier name_of_instance_3 LPAREN list_of_port_connections RPAREN module_instantiation_5 SEMICOLON // lookahead token appears
                                                                                . 

** Conflict (reduce/reduce) in state 4796.
** Tokens involved: SEMICOLON COMMA
** The following explanations concentrate on token SEMICOLON.
** This state is reached from start after reading:

source_text_3 BIND identifier identifier identifier name_of_instance_3 LPAREN RPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              bind_directive 
              BIND identifier bind_instantiation SEMICOLON 
                              (?)

** In state 4796, looking ahead at SEMICOLON, reducing production
** interface_instantiation_5 ->
** is permitted because of the following sub-derivation:

identifier identifier name_of_instance_3 LPAREN RPAREN interface_instantiation_5 SEMICOLON // lookahead token appears
                                                       . 

** In state 4796, looking ahead at SEMICOLON, reducing production
** module_instantiation_5 ->
** is permitted because of the following sub-derivation:

identifier identifier name_of_instance_3 LPAREN RPAREN module_instantiation_5 SEMICOLON // lookahead token appears
                                                       . 

** Conflict (shift/reduce) in state 4795.
** Tokens involved: SIMPLE_IDENTIFIER RPAREN DOT BACKSLASH
** The following explanations concentrate on token DOT.
** This state is reached from start after reading:

source_text_3 BIND identifier identifier identifier name_of_instance_3 LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              bind_directive 
              BIND identifier bind_instantiation SEMICOLON 
                              identifier identifier name_of_instance_3 LPAREN list_of_port_connections RPAREN module_instantiation_5 SEMICOLON 
                                                                              (?)

** In state 4795, looking ahead at DOT, shifting is permitted
** because of the following sub-derivation:

dot_named_port_connection list_of_port_connections_6 
. DOT identifier 

** In state 4795, looking ahead at DOT, reducing production
** list_of_port_connections_8 ->
** is permitted because of the following sub-derivation:

list_of_port_connections_8 P_DOTSTAR list_of_port_connections_10 
list_of_port_connections_8 DOT identifier LPAREN RPAREN COMMA // lookahead token appears
. 

** Conflict (shift/reduce) in state 4786.
** Tokens involved: SIMPLE_IDENTIFIER RPAREN DOT BACKSLASH
** The following explanations concentrate on token DOT.
** This state is reached from start after reading:

source_text_3 BIND identifier identifier identifier program_instance_3 LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              bind_directive 
              BIND identifier bind_instantiation SEMICOLON 
                              identifier identifier program_instance_3 LPAREN list_of_port_connections RPAREN program_instantiation_5 SEMICOLON 
                                                                              (?)

** In state 4786, looking ahead at DOT, shifting is permitted
** because of the following sub-derivation:

dot_named_port_connection list_of_port_connections_6 
. DOT identifier 

** In state 4786, looking ahead at DOT, reducing production
** list_of_port_connections_8 ->
** is permitted because of the following sub-derivation:

list_of_port_connections_8 P_DOTSTAR list_of_port_connections_10 
list_of_port_connections_8 DOT identifier LPAREN RPAREN COMMA // lookahead token appears
. 

** Conflict (reduce/reduce) in state 4784.
** Tokens involved: LPAREN LBRACK
** The following explanations concentrate on token LPAREN.
** This state is reached from start after reading:

source_text_3 BIND identifier identifier identifier

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              bind_directive 
              BIND identifier bind_instantiation SEMICOLON 
                              (?)

** In state 4784, looking ahead at LPAREN, reducing production
** name_of_instance_3 ->
** is permitted because of the following sub-derivation:

identifier identifier name_of_instance_3 LPAREN RPAREN module_instantiation_5 SEMICOLON // lookahead token appears
                      . 

** In state 4784, looking ahead at LPAREN, reducing production
** program_instance_3 ->
** is permitted because of the following sub-derivation:

identifier identifier program_instance_3 LPAREN RPAREN program_instantiation_5 SEMICOLON // lookahead token appears
                      . 

** Conflict (reduce/reduce) in state 4779.
** Tokens involved: SEMICOLON COMMA
** The following explanations concentrate on token SEMICOLON.
** This state is reached from start after reading:

source_text_3 BIND identifier identifier HASH LPAREN list_of_parameter_assignments RPAREN identifier name_of_instance_3 LPAREN list_of_port_connections RPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              bind_directive 
              BIND identifier bind_instantiation SEMICOLON 
                              (?)

** In state 4779, looking ahead at SEMICOLON, reducing production
** interface_instantiation_5 ->
** is permitted because of the following sub-derivation:

identifier HASH LPAREN list_of_parameter_assignments RPAREN identifier name_of_instance_3 LPAREN list_of_port_connections RPAREN interface_instantiation_5 SEMICOLON // lookahead token appears
                                                                                                                                 . 

** In state 4779, looking ahead at SEMICOLON, reducing production
** module_instantiation_5 ->
** is permitted because of the following sub-derivation:

identifier HASH LPAREN list_of_parameter_assignments RPAREN identifier name_of_instance_3 LPAREN list_of_port_connections RPAREN module_instantiation_5 SEMICOLON // lookahead token appears
                                                                                                                                 . 

** Conflict (shift/reduce) in state 4774.
** Tokens involved: SIMPLE_IDENTIFIER RPAREN DOT BACKSLASH
** The following explanations concentrate on token DOT.
** This state is reached from start after reading:

source_text_3 identifier identifier name_of_instance_3 LPAREN RPAREN interface_instantiation_5 COMMA identifier name_of_instance_3 LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              identifier identifier name_of_instance_3 LPAREN RPAREN interface_instantiation_5 SEMICOLON 
                                                                     interface_instantiation_5 COMMA identifier name_of_instance_3 LPAREN list_of_port_connections RPAREN 
                                                                                                                                          (?)

** In state 4774, looking ahead at DOT, shifting is permitted
** because of the following sub-derivation:

dot_named_port_connection list_of_port_connections_6 
. DOT identifier 

** In state 4774, looking ahead at DOT, reducing production
** list_of_port_connections_8 ->
** is permitted because of the following sub-derivation:

list_of_port_connections_8 P_DOTSTAR list_of_port_connections_10 
list_of_port_connections_8 DOT identifier LPAREN RPAREN COMMA // lookahead token appears
. 

** Conflict (shift/reduce) in state 4765.
** Tokens involved: SIMPLE_IDENTIFIER RPAREN DOT BACKSLASH
** The following explanations concentrate on token DOT.
** This state is reached from start after reading:

source_text_3 identifier identifier name_of_instance_3 LPAREN RPAREN module_instantiation_5 COMMA identifier name_of_instance_3 LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              identifier identifier name_of_instance_3 LPAREN RPAREN module_instantiation_5 SEMICOLON 
                                                                     module_instantiation_5 COMMA identifier name_of_instance_3 LPAREN list_of_port_connections RPAREN 
                                                                                                                                       (?)

** In state 4765, looking ahead at DOT, shifting is permitted
** because of the following sub-derivation:

dot_named_port_connection list_of_port_connections_6 
. DOT identifier 

** In state 4765, looking ahead at DOT, reducing production
** list_of_port_connections_8 ->
** is permitted because of the following sub-derivation:

list_of_port_connections_8 P_DOTSTAR list_of_port_connections_10 
list_of_port_connections_8 DOT identifier LPAREN RPAREN COMMA // lookahead token appears
. 

** Conflict (reduce/reduce) in state 4759.
** Tokens involved: SEMICOLON COMMA
** The following explanations concentrate on token SEMICOLON.
** This state is reached from start after reading:

source_text_3 BIND identifier identifier HASH LPAREN list_of_parameter_assignments RPAREN identifier name_of_instance_3 LPAREN RPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              bind_directive 
              BIND identifier bind_instantiation SEMICOLON 
                              (?)

** In state 4759, looking ahead at SEMICOLON, reducing production
** interface_instantiation_5 ->
** is permitted because of the following sub-derivation:

identifier HASH LPAREN list_of_parameter_assignments RPAREN identifier name_of_instance_3 LPAREN RPAREN interface_instantiation_5 SEMICOLON // lookahead token appears
                                                                                                        . 

** In state 4759, looking ahead at SEMICOLON, reducing production
** module_instantiation_5 ->
** is permitted because of the following sub-derivation:

identifier HASH LPAREN list_of_parameter_assignments RPAREN identifier name_of_instance_3 LPAREN RPAREN module_instantiation_5 SEMICOLON // lookahead token appears
                                                                                                        . 

** Conflict (shift/reduce) in state 4758.
** Tokens involved: SIMPLE_IDENTIFIER RPAREN DOT BACKSLASH
** The following explanations concentrate on token DOT.
** This state is reached from start after reading:

source_text_3 BIND identifier identifier HASH LPAREN list_of_parameter_assignments RPAREN identifier name_of_instance_3 LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              bind_directive 
              BIND identifier bind_instantiation SEMICOLON 
                              identifier HASH LPAREN list_of_parameter_assignments RPAREN identifier name_of_instance_3 LPAREN list_of_port_connections RPAREN module_instantiation_5 SEMICOLON 
                                                                                                                               (?)

** In state 4758, looking ahead at DOT, shifting is permitted
** because of the following sub-derivation:

dot_named_port_connection list_of_port_connections_6 
. DOT identifier 

** In state 4758, looking ahead at DOT, reducing production
** list_of_port_connections_8 ->
** is permitted because of the following sub-derivation:

list_of_port_connections_8 P_DOTSTAR list_of_port_connections_10 
list_of_port_connections_8 DOT identifier LPAREN RPAREN COMMA // lookahead token appears
. 

** Conflict (shift/reduce/reduce) in state 4738.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 identifier identifier program_instance_3 LPAREN list_of_port_connections_3 COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              identifier identifier program_instance_3 LPAREN list_of_port_connections RPAREN program_instantiation_5 SEMICOLON 
                                                              list_of_port_connections_3 
                                                              list_of_port_connections_3 COMMA expression 
                                                                                               primary 
                                                                                               (?)

** In state 4738, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 4738, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 4738, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 4731.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 identifier identifier program_instance_3 LPAREN list_of_port_connections_8 DOT identifier LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              identifier identifier program_instance_3 LPAREN list_of_port_connections RPAREN program_instantiation_5 SEMICOLON 
                                                              list_of_port_connections_8 P_DOTSTAR list_of_port_connections_10 
                                                              list_of_port_connections_8 DOT identifier LPAREN expression RPAREN COMMA 
                                                                                                               primary 
                                                                                                               (?)

** In state 4731, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 4731, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 4731, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 4725.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 identifier identifier program_instance_3 LPAREN list_of_port_connections_8 P_DOTSTAR list_of_port_connections_10 COMMA DOT identifier LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              identifier identifier program_instance_3 LPAREN list_of_port_connections RPAREN program_instantiation_5 SEMICOLON 
                                                              list_of_port_connections_8 P_DOTSTAR list_of_port_connections_10 
                                                                                                   list_of_port_connections_10 COMMA DOT identifier LPAREN expression RPAREN 
                                                                                                                                                           primary 
                                                                                                                                                           (?)

** In state 4725, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 4725, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 4725, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 4715.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 identifier identifier program_instance_3 LPAREN DOT identifier LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              identifier identifier program_instance_3 LPAREN list_of_port_connections RPAREN program_instantiation_5 SEMICOLON 
                                                              dot_named_port_connection list_of_port_connections_6 
                                                              DOT identifier LPAREN expression RPAREN 
                                                                                    primary 
                                                                                    (?)

** In state 4715, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 4715, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 4715, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce) in state 4711.
** Tokens involved: SIMPLE_IDENTIFIER RPAREN DOT BACKSLASH
** The following explanations concentrate on token DOT.
** This state is reached from start after reading:

source_text_3 identifier identifier program_instance_3 LPAREN RPAREN program_instantiation_5 COMMA identifier program_instance_3 LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              identifier identifier program_instance_3 LPAREN RPAREN program_instantiation_5 SEMICOLON 
                                                                     program_instantiation_5 COMMA identifier program_instance_3 LPAREN list_of_port_connections RPAREN 
                                                                                                                                        (?)

** In state 4711, looking ahead at DOT, shifting is permitted
** because of the following sub-derivation:

dot_named_port_connection list_of_port_connections_6 
. DOT identifier 

** In state 4711, looking ahead at DOT, reducing production
** list_of_port_connections_8 ->
** is permitted because of the following sub-derivation:

list_of_port_connections_8 P_DOTSTAR list_of_port_connections_10 
list_of_port_connections_8 DOT identifier LPAREN RPAREN COMMA // lookahead token appears
. 

** Conflict (shift/reduce) in state 4704.
** Tokens involved: SIMPLE_IDENTIFIER RPAREN DOT BACKSLASH
** The following explanations concentrate on token DOT.
** This state is reached from start after reading:

source_text_3 BIND identifier identifier HASH LPAREN list_of_parameter_assignments RPAREN identifier program_instance_3 LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              bind_directive 
              BIND identifier bind_instantiation SEMICOLON 
                              identifier HASH LPAREN list_of_parameter_assignments RPAREN identifier program_instance_3 LPAREN list_of_port_connections RPAREN program_instantiation_5 SEMICOLON 
                                                                                                                               (?)

** In state 4704, looking ahead at DOT, shifting is permitted
** because of the following sub-derivation:

dot_named_port_connection list_of_port_connections_6 
. DOT identifier 

** In state 4704, looking ahead at DOT, reducing production
** list_of_port_connections_8 ->
** is permitted because of the following sub-derivation:

list_of_port_connections_8 P_DOTSTAR list_of_port_connections_10 
list_of_port_connections_8 DOT identifier LPAREN RPAREN COMMA // lookahead token appears
. 

** Conflict (reduce/reduce) in state 4702.
** Tokens involved: LPAREN LBRACK
** The following explanations concentrate on token LPAREN.
** This state is reached from start after reading:

source_text_3 BIND identifier identifier HASH LPAREN list_of_parameter_assignments RPAREN identifier

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              bind_directive 
              BIND identifier bind_instantiation SEMICOLON 
                              (?)

** In state 4702, looking ahead at LPAREN, reducing production
** name_of_instance_3 ->
** is permitted because of the following sub-derivation:

identifier HASH LPAREN list_of_parameter_assignments RPAREN identifier name_of_instance_3 LPAREN RPAREN module_instantiation_5 SEMICOLON // lookahead token appears
                                                                       . 

** In state 4702, looking ahead at LPAREN, reducing production
** program_instance_3 ->
** is permitted because of the following sub-derivation:

identifier HASH LPAREN list_of_parameter_assignments RPAREN identifier program_instance_3 LPAREN RPAREN program_instantiation_5 SEMICOLON // lookahead token appears
                                                                       . 

** Conflict (shift/reduce/reduce) in state 4699.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 BIND identifier identifier HASH LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              bind_directive 
              BIND identifier bind_instantiation SEMICOLON 
                              identifier HASH LPAREN list_of_parameter_assignments RPAREN identifier program_instance_3 LPAREN RPAREN program_instantiation_5 SEMICOLON 
                                                     ordered_parameter_assignment list_of_parameter_assignments_3 
                                                     expression 
                                                     primary 
                                                     (?)

** In state 4699, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 4699, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 4699, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce) in state 4690.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 BIND identifier

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              bind_directive 
              (?)

** In state 4690, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

BIND identifier bind_instantiation SEMICOLON 
                identifier identifier program_instance_3 LPAREN RPAREN program_instantiation_5 SEMICOLON 
                . SIMPLE_IDENTIFIER 

** In state 4690, looking ahead at SIMPLE_IDENTIFIER, reducing production
** name_of_instance_3 ->
** is permitted because of the following sub-derivation:

BIND identifier name_of_instance_3 bind_instantiation SEMICOLON // lookahead token appears because bind_instantiation can begin with SIMPLE_IDENTIFIER
                . 

** Conflict (reduce/reduce) in state 4626.
** Tokens involved: RPAREN COMMA
** The following explanations concentrate on token RPAREN.
** This state is reached from start after reading:

source_text_3 INTERFACE identifier SEMICOLON interface_declaration_10 MODPORT identifier LPAREN import_export identifier

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier SEMICOLON interface_declaration_10 ENDINTERFACE 
                                             interface_declaration_10 non_port_interface_item 
                                                                      interface_or_generate_item 
                                                                      MODPORT identifier LPAREN modport_ports_declaration modport_item_5 RPAREN modport_declaration_4 SEMICOLON // lookahead token appears because modport_item_5 can vanish
                                                                                                import_export modport_tf_port // lookahead token is inherited
                                                                                                              task_or_function_identifier modport_tf_port_11 // lookahead token is inherited because modport_tf_port_11 can vanish
                                                                                                              (?)

** In state 4626, looking ahead at RPAREN, reducing production
** task_or_function_identifier -> identifier
** is permitted because of the following sub-derivation:

identifier . 

** In state 4626, looking ahead at RPAREN, reducing production
** task_or_function_identifier -> identifier
** is permitted because of the following sub-derivation:

identifier . 

** Conflict (shift/reduce) in state 4623.
** Token involved: COMMA
** This state is reached from start after reading:

source_text_3 INTERFACE identifier SEMICOLON interface_declaration_10 MODPORT identifier LPAREN import_export task_or_function_identifier modport_tf_port_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier SEMICOLON interface_declaration_10 ENDINTERFACE 
                                             interface_declaration_10 non_port_interface_item 
                                                                      interface_or_generate_item 
                                                                      (?)

** In state 4623, looking ahead at COMMA, reducing production
** modport_tf_port -> task_or_function_identifier modport_tf_port_11
** is permitted because of the following sub-derivation:

MODPORT identifier LPAREN modport_ports_declaration modport_item_5 RPAREN modport_declaration_4 SEMICOLON // lookahead token appears because modport_item_5 can begin with COMMA
                          import_export modport_tf_port // lookahead token is inherited
                                        task_or_function_identifier modport_tf_port_11 . 

** In state 4623, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

MODPORT identifier LPAREN modport_ports_declaration modport_item_5 RPAREN modport_declaration_4 SEMICOLON 
                          import_export modport_tf_port 
                                        task_or_function_identifier modport_tf_port_11 
                                                                    modport_tf_port_11 . COMMA task_or_function_identifier 

** Conflict (shift/reduce) in state 4621.
** Token involved: COMMA
** This state is reached from start after reading:

source_text_3 INTERFACE identifier SEMICOLON interface_declaration_10 MODPORT identifier LPAREN import_export FUNCTION function_data_type identifier LPAREN function_proto_formal list_of_function_proto_formals_2_5 RPAREN modport_tf_port_8

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier SEMICOLON interface_declaration_10 ENDINTERFACE 
                                             interface_declaration_10 non_port_interface_item 
                                                                      interface_or_generate_item 
                                                                      (?)

** In state 4621, looking ahead at COMMA, reducing production
** modport_tf_port -> FUNCTION function_data_type identifier LPAREN function_proto_formal list_of_function_proto_formals_2_5 RPAREN modport_tf_port_8
** is permitted because of the following sub-derivation:

MODPORT identifier LPAREN modport_ports_declaration modport_item_5 RPAREN modport_declaration_4 SEMICOLON // lookahead token appears because modport_item_5 can begin with COMMA
                          import_export modport_tf_port // lookahead token is inherited
                                        FUNCTION function_data_type identifier LPAREN function_proto_formal list_of_function_proto_formals_2_5 RPAREN modport_tf_port_8 . 

** In state 4621, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

MODPORT identifier LPAREN modport_ports_declaration modport_item_5 RPAREN modport_declaration_4 SEMICOLON 
                          import_export modport_tf_port 
                                        FUNCTION function_data_type identifier LPAREN function_proto_formal list_of_function_proto_formals_2_5 RPAREN modport_tf_port_8 
                                                                                                                                                      modport_tf_port_8 . COMMA function_data_type identifier LPAREN RPAREN 

** Conflict (shift/reduce) in state 4617.
** Token involved: COMMA
** This state is reached from start after reading:

source_text_3 INTERFACE identifier SEMICOLON interface_declaration_10 MODPORT identifier LPAREN import_export FUNCTION function_data_type identifier LPAREN RPAREN modport_tf_port_8

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier SEMICOLON interface_declaration_10 ENDINTERFACE 
                                             interface_declaration_10 non_port_interface_item 
                                                                      interface_or_generate_item 
                                                                      (?)

** In state 4617, looking ahead at COMMA, reducing production
** modport_tf_port -> FUNCTION function_data_type identifier LPAREN RPAREN modport_tf_port_8
** is permitted because of the following sub-derivation:

MODPORT identifier LPAREN modport_ports_declaration modport_item_5 RPAREN modport_declaration_4 SEMICOLON // lookahead token appears because modport_item_5 can begin with COMMA
                          import_export modport_tf_port // lookahead token is inherited
                                        FUNCTION function_data_type identifier LPAREN RPAREN modport_tf_port_8 . 

** In state 4617, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

MODPORT identifier LPAREN modport_ports_declaration modport_item_5 RPAREN modport_declaration_4 SEMICOLON 
                          import_export modport_tf_port 
                                        FUNCTION function_data_type identifier LPAREN RPAREN modport_tf_port_8 
                                                                                             modport_tf_port_8 . COMMA function_data_type identifier LPAREN RPAREN 

** Conflict (shift/reduce) in state 4612.
** Token involved: COMMA
** This state is reached from start after reading:

source_text_3 INTERFACE identifier SEMICOLON interface_declaration_10 MODPORT identifier LPAREN import_export FUNCTION signing function_data_type identifier LPAREN function_proto_formal list_of_function_proto_formals_2_5 RPAREN modport_tf_port_8

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier SEMICOLON interface_declaration_10 ENDINTERFACE 
                                             interface_declaration_10 non_port_interface_item 
                                                                      interface_or_generate_item 
                                                                      (?)

** In state 4612, looking ahead at COMMA, reducing production
** modport_tf_port -> FUNCTION signing function_data_type identifier LPAREN function_proto_formal list_of_function_proto_formals_2_5 RPAREN modport_tf_port_8
** is permitted because of the following sub-derivation:

MODPORT identifier LPAREN modport_ports_declaration modport_item_5 RPAREN modport_declaration_4 SEMICOLON // lookahead token appears because modport_item_5 can begin with COMMA
                          import_export modport_tf_port // lookahead token is inherited
                                        FUNCTION signing function_data_type identifier LPAREN function_proto_formal list_of_function_proto_formals_2_5 RPAREN modport_tf_port_8 . 

** In state 4612, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

MODPORT identifier LPAREN modport_ports_declaration modport_item_5 RPAREN modport_declaration_4 SEMICOLON 
                          import_export modport_tf_port 
                                        FUNCTION signing function_data_type identifier LPAREN function_proto_formal list_of_function_proto_formals_2_5 RPAREN modport_tf_port_8 
                                                                                                                                                              modport_tf_port_8 . COMMA function_data_type identifier LPAREN RPAREN 

** Conflict (shift/reduce) in state 4592.
** Token involved: COMMA
** This state is reached from start after reading:

source_text_3 INTERFACE identifier SEMICOLON interface_declaration_10 MODPORT identifier LPAREN import_export FUNCTION signing function_data_type identifier LPAREN RPAREN modport_tf_port_8

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier SEMICOLON interface_declaration_10 ENDINTERFACE 
                                             interface_declaration_10 non_port_interface_item 
                                                                      interface_or_generate_item 
                                                                      (?)

** In state 4592, looking ahead at COMMA, reducing production
** modport_tf_port -> FUNCTION signing function_data_type identifier LPAREN RPAREN modport_tf_port_8
** is permitted because of the following sub-derivation:

MODPORT identifier LPAREN modport_ports_declaration modport_item_5 RPAREN modport_declaration_4 SEMICOLON // lookahead token appears because modport_item_5 can begin with COMMA
                          import_export modport_tf_port // lookahead token is inherited
                                        FUNCTION signing function_data_type identifier LPAREN RPAREN modport_tf_port_8 . 

** In state 4592, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

MODPORT identifier LPAREN modport_ports_declaration modport_item_5 RPAREN modport_declaration_4 SEMICOLON 
                          import_export modport_tf_port 
                                        FUNCTION signing function_data_type identifier LPAREN RPAREN modport_tf_port_8 
                                                                                                     modport_tf_port_8 . COMMA function_data_type identifier LPAREN RPAREN 

** Conflict (shift/reduce) in state 4579.
** Token involved: COMMA
** This state is reached from start after reading:

source_text_3 INTERFACE identifier SEMICOLON interface_declaration_10 MODPORT identifier LPAREN import_export TASK identifier LPAREN task_proto_formal named_task_proto_5 RPAREN modport_tf_port_4

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier SEMICOLON interface_declaration_10 ENDINTERFACE 
                                             interface_declaration_10 non_port_interface_item 
                                                                      interface_or_generate_item 
                                                                      (?)

** In state 4579, looking ahead at COMMA, reducing production
** modport_tf_port -> TASK identifier LPAREN task_proto_formal named_task_proto_5 RPAREN modport_tf_port_4
** is permitted because of the following sub-derivation:

MODPORT identifier LPAREN modport_ports_declaration modport_item_5 RPAREN modport_declaration_4 SEMICOLON // lookahead token appears because modport_item_5 can begin with COMMA
                          import_export modport_tf_port // lookahead token is inherited
                                        TASK identifier LPAREN task_proto_formal named_task_proto_5 RPAREN modport_tf_port_4 . 

** In state 4579, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

MODPORT identifier LPAREN modport_ports_declaration modport_item_5 RPAREN modport_declaration_4 SEMICOLON 
                          import_export modport_tf_port 
                                        TASK identifier LPAREN task_proto_formal named_task_proto_5 RPAREN modport_tf_port_4 
                                                                                                           modport_tf_port_4 . COMMA identifier LPAREN task_proto_formal named_task_proto_5 RPAREN 

** Conflict (shift/reduce) in state 4555.
** Token involved: COMMA
** This state is reached from start after reading:

source_text_3 INTERFACE identifier SEMICOLON interface_declaration_10 MODPORT identifier LPAREN INOUT identifier list_of_modport_port_identifiers_3

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier SEMICOLON interface_declaration_10 ENDINTERFACE 
                                             interface_declaration_10 non_port_interface_item 
                                                                      interface_or_generate_item 
                                                                      (?)

** In state 4555, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

MODPORT identifier LPAREN modport_ports_declaration modport_item_5 RPAREN modport_declaration_4 SEMICOLON 
                          modport_simple_ports_declaration 
                          INOUT identifier list_of_modport_port_identifiers_3 
                                           list_of_modport_port_identifiers_3 . COMMA identifier 

** In state 4555, looking ahead at COMMA, reducing production
** modport_simple_ports_declaration -> INOUT identifier list_of_modport_port_identifiers_3
** is permitted because of the following sub-derivation:

MODPORT identifier LPAREN modport_ports_declaration modport_item_5 RPAREN modport_declaration_4 SEMICOLON // lookahead token appears because modport_item_5 can begin with COMMA
                          modport_simple_ports_declaration // lookahead token is inherited
                          INOUT identifier list_of_modport_port_identifiers_3 . 

** Conflict (shift/reduce) in state 4552.
** Token involved: COMMA
** This state is reached from start after reading:

source_text_3 INTERFACE identifier SEMICOLON interface_declaration_10 MODPORT identifier LPAREN INPUT identifier list_of_modport_port_identifiers_3

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier SEMICOLON interface_declaration_10 ENDINTERFACE 
                                             interface_declaration_10 non_port_interface_item 
                                                                      interface_or_generate_item 
                                                                      (?)

** In state 4552, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

MODPORT identifier LPAREN modport_ports_declaration modport_item_5 RPAREN modport_declaration_4 SEMICOLON 
                          modport_simple_ports_declaration 
                          INPUT identifier list_of_modport_port_identifiers_3 
                                           list_of_modport_port_identifiers_3 . COMMA identifier 

** In state 4552, looking ahead at COMMA, reducing production
** modport_simple_ports_declaration -> INPUT identifier list_of_modport_port_identifiers_3
** is permitted because of the following sub-derivation:

MODPORT identifier LPAREN modport_ports_declaration modport_item_5 RPAREN modport_declaration_4 SEMICOLON // lookahead token appears because modport_item_5 can begin with COMMA
                          modport_simple_ports_declaration // lookahead token is inherited
                          INPUT identifier list_of_modport_port_identifiers_3 . 

** Conflict (shift/reduce) in state 4549.
** Token involved: COMMA
** This state is reached from start after reading:

source_text_3 INTERFACE identifier SEMICOLON interface_declaration_10 MODPORT identifier LPAREN OUTPUT identifier list_of_modport_port_identifiers_3

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier SEMICOLON interface_declaration_10 ENDINTERFACE 
                                             interface_declaration_10 non_port_interface_item 
                                                                      interface_or_generate_item 
                                                                      (?)

** In state 4549, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

MODPORT identifier LPAREN modport_ports_declaration modport_item_5 RPAREN modport_declaration_4 SEMICOLON 
                          modport_simple_ports_declaration 
                          OUTPUT identifier list_of_modport_port_identifiers_3 
                                            list_of_modport_port_identifiers_3 . COMMA identifier 

** In state 4549, looking ahead at COMMA, reducing production
** modport_simple_ports_declaration -> OUTPUT identifier list_of_modport_port_identifiers_3
** is permitted because of the following sub-derivation:

MODPORT identifier LPAREN modport_ports_declaration modport_item_5 RPAREN modport_declaration_4 SEMICOLON // lookahead token appears because modport_item_5 can begin with COMMA
                          modport_simple_ports_declaration // lookahead token is inherited
                          OUTPUT identifier list_of_modport_port_identifiers_3 . 

** Conflict (shift/reduce) in state 4546.
** Token involved: COMMA
** This state is reached from start after reading:

source_text_3 INTERFACE identifier SEMICOLON interface_declaration_10 MODPORT identifier LPAREN REF data_type identifier list_of_modport_port_identifiers_3

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier SEMICOLON interface_declaration_10 ENDINTERFACE 
                                             interface_declaration_10 non_port_interface_item 
                                                                      interface_or_generate_item 
                                                                      (?)

** In state 4546, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

MODPORT identifier LPAREN modport_ports_declaration modport_item_5 RPAREN modport_declaration_4 SEMICOLON 
                          modport_simple_ports_declaration 
                          REF data_type identifier list_of_modport_port_identifiers_3 
                                                   list_of_modport_port_identifiers_3 . COMMA identifier 

** In state 4546, looking ahead at COMMA, reducing production
** modport_simple_ports_declaration -> REF data_type identifier list_of_modport_port_identifiers_3
** is permitted because of the following sub-derivation:

MODPORT identifier LPAREN modport_ports_declaration modport_item_5 RPAREN modport_declaration_4 SEMICOLON // lookahead token appears because modport_item_5 can begin with COMMA
                          modport_simple_ports_declaration // lookahead token is inherited
                          REF data_type identifier list_of_modport_port_identifiers_3 . 

** Conflict (shift/reduce) in state 4541.
** Token involved: COMMA
** This state is reached from start after reading:

source_text_3 INTERFACE identifier SEMICOLON interface_declaration_10 MODPORT identifier LPAREN REF identifier list_of_modport_port_identifiers_3

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier SEMICOLON interface_declaration_10 ENDINTERFACE 
                                             interface_declaration_10 non_port_interface_item 
                                                                      interface_or_generate_item 
                                                                      (?)

** In state 4541, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

MODPORT identifier LPAREN modport_ports_declaration modport_item_5 RPAREN modport_declaration_4 SEMICOLON 
                          modport_simple_ports_declaration 
                          REF identifier list_of_modport_port_identifiers_3 
                                         list_of_modport_port_identifiers_3 . COMMA identifier 

** In state 4541, looking ahead at COMMA, reducing production
** modport_simple_ports_declaration -> REF identifier list_of_modport_port_identifiers_3
** is permitted because of the following sub-derivation:

MODPORT identifier LPAREN modport_ports_declaration modport_item_5 RPAREN modport_declaration_4 SEMICOLON // lookahead token appears because modport_item_5 can begin with COMMA
                          modport_simple_ports_declaration // lookahead token is inherited
                          REF identifier list_of_modport_port_identifiers_3 . 

** Conflict (shift/reduce/reduce) in state 4519.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 INTERFACE identifier SEMICOLON interface_declaration_10 VIRTUAL CLASS identifier EXTENDS identifier SEMICOLON class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier SEMICOLON interface_declaration_10 ENDINTERFACE 
                                             interface_declaration_10 non_port_interface_item 
                                                                      VIRTUAL CLASS identifier EXTENDS identifier SEMICOLON class_declaration_11 ENDCLASS 
                                                                                                                            class_declaration_11 class_item 
                                                                                                                                                 (?)

** In state 4519, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 4519, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 4519, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 4519, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 4515.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 INTERFACE identifier SEMICOLON interface_declaration_10 VIRTUAL CLASS identifier EXTENDS identifier SEMICOLON timeunits_declaration class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier SEMICOLON interface_declaration_10 ENDINTERFACE 
                                             interface_declaration_10 non_port_interface_item 
                                                                      VIRTUAL CLASS identifier EXTENDS identifier SEMICOLON timeunits_declaration class_declaration_11 ENDCLASS 
                                                                                                                                                  class_declaration_11 class_item 
                                                                                                                                                                       (?)

** In state 4515, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 4515, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 4515, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 4515, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 4507.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 INTERFACE identifier SEMICOLON interface_declaration_10 VIRTUAL CLASS identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN EXTENDS identifier SEMICOLON class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier SEMICOLON interface_declaration_10 ENDINTERFACE 
                                             interface_declaration_10 non_port_interface_item 
                                                                      VIRTUAL CLASS identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN EXTENDS identifier SEMICOLON class_declaration_11 ENDCLASS 
                                                                                                                                                                                           class_declaration_11 class_item 
                                                                                                                                                                                                                (?)

** In state 4507, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 4507, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 4507, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 4507, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 4503.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 INTERFACE identifier SEMICOLON interface_declaration_10 VIRTUAL CLASS identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN EXTENDS identifier SEMICOLON timeunits_declaration class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier SEMICOLON interface_declaration_10 ENDINTERFACE 
                                             interface_declaration_10 non_port_interface_item 
                                                                      VIRTUAL CLASS identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN EXTENDS identifier SEMICOLON timeunits_declaration class_declaration_11 ENDCLASS 
                                                                                                                                                                                                                 class_declaration_11 class_item 
                                                                                                                                                                                                                                      (?)

** In state 4503, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 4503, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 4503, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 4503, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 4495.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 INTERFACE identifier SEMICOLON interface_declaration_10 VIRTUAL CLASS identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN SEMICOLON class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier SEMICOLON interface_declaration_10 ENDINTERFACE 
                                             interface_declaration_10 non_port_interface_item 
                                                                      VIRTUAL CLASS identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN SEMICOLON class_declaration_11 ENDCLASS 
                                                                                                                                                                        class_declaration_11 class_item 
                                                                                                                                                                                             (?)

** In state 4495, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 4495, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 4495, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 4495, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 4491.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 INTERFACE identifier SEMICOLON interface_declaration_10 VIRTUAL CLASS identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN SEMICOLON timeunits_declaration class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier SEMICOLON interface_declaration_10 ENDINTERFACE 
                                             interface_declaration_10 non_port_interface_item 
                                                                      VIRTUAL CLASS identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN SEMICOLON timeunits_declaration class_declaration_11 ENDCLASS 
                                                                                                                                                                                              class_declaration_11 class_item 
                                                                                                                                                                                                                   (?)

** In state 4491, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 4491, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 4491, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 4491, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 4480.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 INTERFACE identifier SEMICOLON interface_declaration_10 VIRTUAL CLASS identifier SEMICOLON class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier SEMICOLON interface_declaration_10 ENDINTERFACE 
                                             interface_declaration_10 non_port_interface_item 
                                                                      VIRTUAL CLASS identifier SEMICOLON class_declaration_11 ENDCLASS 
                                                                                                         class_declaration_11 class_item 
                                                                                                                              (?)

** In state 4480, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 4480, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 4480, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 4480, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 4476.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 INTERFACE identifier SEMICOLON interface_declaration_10 VIRTUAL CLASS identifier SEMICOLON timeunits_declaration class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier SEMICOLON interface_declaration_10 ENDINTERFACE 
                                             interface_declaration_10 non_port_interface_item 
                                                                      VIRTUAL CLASS identifier SEMICOLON timeunits_declaration class_declaration_11 ENDCLASS 
                                                                                                                               class_declaration_11 class_item 
                                                                                                                                                    (?)

** In state 4476, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 4476, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 4476, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 4476, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 4469.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 INTERFACE identifier SEMICOLON interface_declaration_10 VIRTUAL CLASS lifetime identifier EXTENDS identifier SEMICOLON class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier SEMICOLON interface_declaration_10 ENDINTERFACE 
                                             interface_declaration_10 non_port_interface_item 
                                                                      VIRTUAL CLASS lifetime identifier EXTENDS identifier SEMICOLON class_declaration_11 ENDCLASS 
                                                                                                                                     class_declaration_11 class_item 
                                                                                                                                                          (?)

** In state 4469, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 4469, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 4469, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 4469, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 4465.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 INTERFACE identifier SEMICOLON interface_declaration_10 VIRTUAL CLASS lifetime identifier EXTENDS identifier SEMICOLON timeunits_declaration class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier SEMICOLON interface_declaration_10 ENDINTERFACE 
                                             interface_declaration_10 non_port_interface_item 
                                                                      VIRTUAL CLASS lifetime identifier EXTENDS identifier SEMICOLON timeunits_declaration class_declaration_11 ENDCLASS 
                                                                                                                                                           class_declaration_11 class_item 
                                                                                                                                                                                (?)

** In state 4465, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 4465, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 4465, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 4465, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 4457.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 INTERFACE identifier SEMICOLON interface_declaration_10 VIRTUAL CLASS lifetime identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN EXTENDS identifier SEMICOLON class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier SEMICOLON interface_declaration_10 ENDINTERFACE 
                                             interface_declaration_10 non_port_interface_item 
                                                                      VIRTUAL CLASS lifetime identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN EXTENDS identifier SEMICOLON class_declaration_11 ENDCLASS 
                                                                                                                                                                                                    class_declaration_11 class_item 
                                                                                                                                                                                                                         (?)

** In state 4457, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 4457, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 4457, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 4457, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 4453.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 INTERFACE identifier SEMICOLON interface_declaration_10 VIRTUAL CLASS lifetime identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN EXTENDS identifier SEMICOLON timeunits_declaration class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier SEMICOLON interface_declaration_10 ENDINTERFACE 
                                             interface_declaration_10 non_port_interface_item 
                                                                      VIRTUAL CLASS lifetime identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN EXTENDS identifier SEMICOLON timeunits_declaration class_declaration_11 ENDCLASS 
                                                                                                                                                                                                                          class_declaration_11 class_item 
                                                                                                                                                                                                                                               (?)

** In state 4453, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 4453, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 4453, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 4453, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 4445.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 INTERFACE identifier SEMICOLON interface_declaration_10 VIRTUAL CLASS lifetime identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN SEMICOLON class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier SEMICOLON interface_declaration_10 ENDINTERFACE 
                                             interface_declaration_10 non_port_interface_item 
                                                                      VIRTUAL CLASS lifetime identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN SEMICOLON class_declaration_11 ENDCLASS 
                                                                                                                                                                                 class_declaration_11 class_item 
                                                                                                                                                                                                      (?)

** In state 4445, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 4445, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 4445, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 4445, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 4441.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 INTERFACE identifier SEMICOLON interface_declaration_10 VIRTUAL CLASS lifetime identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN SEMICOLON timeunits_declaration class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier SEMICOLON interface_declaration_10 ENDINTERFACE 
                                             interface_declaration_10 non_port_interface_item 
                                                                      VIRTUAL CLASS lifetime identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN SEMICOLON timeunits_declaration class_declaration_11 ENDCLASS 
                                                                                                                                                                                                       class_declaration_11 class_item 
                                                                                                                                                                                                                            (?)

** In state 4441, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 4441, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 4441, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 4441, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 4430.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 INTERFACE identifier SEMICOLON interface_declaration_10 VIRTUAL CLASS lifetime identifier SEMICOLON class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier SEMICOLON interface_declaration_10 ENDINTERFACE 
                                             interface_declaration_10 non_port_interface_item 
                                                                      VIRTUAL CLASS lifetime identifier SEMICOLON class_declaration_11 ENDCLASS 
                                                                                                                  class_declaration_11 class_item 
                                                                                                                                       (?)

** In state 4430, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 4430, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 4430, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 4430, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 4426.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 INTERFACE identifier SEMICOLON interface_declaration_10 VIRTUAL CLASS lifetime identifier SEMICOLON timeunits_declaration class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier SEMICOLON interface_declaration_10 ENDINTERFACE 
                                             interface_declaration_10 non_port_interface_item 
                                                                      VIRTUAL CLASS lifetime identifier SEMICOLON timeunits_declaration class_declaration_11 ENDCLASS 
                                                                                                                                        class_declaration_11 class_item 
                                                                                                                                                             (?)

** In state 4426, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 4426, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 4426, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 4426, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce) in state 4396.
** Token involved: COMMA
** This state is reached from start after reading:

source_text_3 PRIMITIVE identifier LPAREN udp_output_declaration COMMA INPUT identifier list_of_udp_port_identifiers_3 udp_declaration_port_list_5 COMMA INPUT identifier list_of_udp_port_identifiers_3

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              udp_declaration 
              PRIMITIVE identifier LPAREN udp_output_declaration COMMA INPUT identifier list_of_udp_port_identifiers_3 udp_declaration_port_list_5 RPAREN SEMICOLON udp_body ENDPRIMITIVE 
                                                                                                                       (?)

** In state 4396, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

udp_declaration_port_list_5 COMMA INPUT identifier list_of_udp_port_identifiers_3 
                                                   list_of_udp_port_identifiers_3 . COMMA identifier 

** In state 4396, looking ahead at COMMA, reducing production
** udp_declaration_port_list_5 -> udp_declaration_port_list_5 COMMA INPUT identifier list_of_udp_port_identifiers_3
** is permitted because of the following sub-derivation:

udp_declaration_port_list_5 COMMA INPUT identifier list_of_udp_port_identifiers_3 // lookahead token appears
udp_declaration_port_list_5 COMMA INPUT identifier list_of_udp_port_identifiers_3 . 

** Conflict (shift/reduce) in state 4385.
** Token involved: COMMA
** This state is reached from start after reading:

source_text_3 PRIMITIVE identifier LPAREN udp_output_declaration COMMA INPUT identifier list_of_udp_port_identifiers_3

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              udp_declaration 
              (?)

** In state 4385, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

PRIMITIVE identifier LPAREN udp_output_declaration COMMA INPUT identifier list_of_udp_port_identifiers_3 udp_declaration_port_list_5 RPAREN SEMICOLON udp_body ENDPRIMITIVE 
                                                                          list_of_udp_port_identifiers_3 . COMMA identifier 

** In state 4385, looking ahead at COMMA, reducing production
** udp_declaration_port_list_5 ->
** is permitted because of the following sub-derivation:

PRIMITIVE identifier LPAREN udp_output_declaration COMMA INPUT identifier list_of_udp_port_identifiers_3 udp_declaration_port_list_5 RPAREN SEMICOLON udp_body ENDPRIMITIVE 
                                                                                                         udp_declaration_port_list_5 COMMA INPUT identifier list_of_udp_port_identifiers_3 // lookahead token appears
                                                                                                         . 

** Conflict (shift/reduce) in state 4372.
** Token involved: LEVEL_SYMBOL
** This state is reached from start after reading:

source_text_3 PRIMITIVE identifier LPAREN P_DOTSTAR RPAREN SEMICOLON udp_declaration_27 INITIAL identifier EQUALS init_val SEMICOLON TABLE seq_input_list COLON LEVEL_SYMBOL COLON next_state SEMICOLON sequential_body_5

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              udp_declaration 
              PRIMITIVE identifier LPAREN P_DOTSTAR RPAREN SEMICOLON udp_declaration_27 udp_body ENDPRIMITIVE 
                                                                                        INITIAL identifier EQUALS init_val SEMICOLON TABLE seq_input_list COLON LEVEL_SYMBOL COLON next_state SEMICOLON sequential_body_5 ENDTABLE 
                                                                                                                                                                                                        sequential_body_5 seq_input_list COLON LEVEL_SYMBOL COLON next_state SEMICOLON 
                                                                                                                                                                                                                          (?)

** In state 4372, looking ahead at LEVEL_SYMBOL, reducing production
** edge_input_list_2 ->
** is permitted because of the following sub-derivation:

edge_input_list_2 edge_indicator edge_input_list_4 
edge_input_list_2 LEVEL_SYMBOL // lookahead token appears
. 

** In state 4372, looking ahead at LEVEL_SYMBOL, shifting is permitted
** because of the following sub-derivation:

. LEVEL_SYMBOL level_input_list_3 

** Conflict (shift/reduce) in state 4365.
** Token involved: LEVEL_SYMBOL
** This state is reached from start after reading:

source_text_3 PRIMITIVE identifier LPAREN P_DOTSTAR RPAREN SEMICOLON udp_declaration_27 INITIAL identifier EQUALS init_val SEMICOLON TABLE

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              udp_declaration 
              PRIMITIVE identifier LPAREN P_DOTSTAR RPAREN SEMICOLON udp_declaration_27 udp_body ENDPRIMITIVE 
                                                                                        INITIAL identifier EQUALS init_val SEMICOLON TABLE seq_input_list COLON LEVEL_SYMBOL COLON next_state SEMICOLON sequential_body_5 ENDTABLE 
                                                                                                                                           (?)

** In state 4365, looking ahead at LEVEL_SYMBOL, reducing production
** edge_input_list_2 ->
** is permitted because of the following sub-derivation:

edge_input_list_2 edge_indicator edge_input_list_4 
edge_input_list_2 LEVEL_SYMBOL // lookahead token appears
. 

** In state 4365, looking ahead at LEVEL_SYMBOL, shifting is permitted
** because of the following sub-derivation:

. LEVEL_SYMBOL level_input_list_3 

** Conflict (shift/reduce) in state 4315.
** Token involved: LEVEL_SYMBOL
** This state is reached from start after reading:

source_text_3 PRIMITIVE identifier LPAREN P_DOTSTAR RPAREN SEMICOLON udp_declaration_27 TABLE seq_input_list COLON LEVEL_SYMBOL COLON next_state SEMICOLON sequential_body_5

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              udp_declaration 
              PRIMITIVE identifier LPAREN P_DOTSTAR RPAREN SEMICOLON udp_declaration_27 udp_body ENDPRIMITIVE 
                                                                                        TABLE seq_input_list COLON LEVEL_SYMBOL COLON next_state SEMICOLON sequential_body_5 ENDTABLE 
                                                                                                                                                           sequential_body_5 seq_input_list COLON LEVEL_SYMBOL COLON next_state SEMICOLON 
                                                                                                                                                                             (?)

** In state 4315, looking ahead at LEVEL_SYMBOL, reducing production
** edge_input_list_2 ->
** is permitted because of the following sub-derivation:

edge_input_list_2 edge_indicator edge_input_list_4 
edge_input_list_2 LEVEL_SYMBOL // lookahead token appears
. 

** In state 4315, looking ahead at LEVEL_SYMBOL, shifting is permitted
** because of the following sub-derivation:

. LEVEL_SYMBOL level_input_list_3 

** Conflict (shift/reduce) in state 4295.
** Token involved: COLON
** This state is reached from start after reading:

source_text_3 PRIMITIVE identifier LPAREN P_DOTSTAR RPAREN SEMICOLON udp_declaration_27 TABLE LEVEL_SYMBOL level_input_list_3

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              udp_declaration 
              PRIMITIVE identifier LPAREN P_DOTSTAR RPAREN SEMICOLON udp_declaration_27 udp_body ENDPRIMITIVE 
                                                                                        (?)

** In state 4295, looking ahead at COLON, reducing production
** seq_input_list -> LEVEL_SYMBOL level_input_list_3
** is permitted because of the following sub-derivation:

TABLE seq_input_list COLON LEVEL_SYMBOL COLON next_state SEMICOLON sequential_body_5 ENDTABLE // lookahead token appears
      LEVEL_SYMBOL level_input_list_3 . 

** In state 4295, looking ahead at COLON, shifting is permitted
** because of the following sub-derivation:

TABLE LEVEL_SYMBOL level_input_list_3 . COLON OUTPUT_SYMBOL SEMICOLON combinational_body_4 ENDTABLE 

** Conflict (shift/reduce) in state 4293.
** Token involved: LEVEL_SYMBOL
** This state is reached from start after reading:

source_text_3 PRIMITIVE identifier LPAREN P_DOTSTAR RPAREN SEMICOLON udp_declaration_27 TABLE

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              udp_declaration 
              PRIMITIVE identifier LPAREN P_DOTSTAR RPAREN SEMICOLON udp_declaration_27 udp_body ENDPRIMITIVE 
                                                                                        TABLE seq_input_list COLON LEVEL_SYMBOL COLON next_state SEMICOLON sequential_body_5 ENDTABLE 
                                                                                              (?)

** In state 4293, looking ahead at LEVEL_SYMBOL, reducing production
** edge_input_list_2 ->
** is permitted because of the following sub-derivation:

edge_input_list_2 edge_indicator edge_input_list_4 
edge_input_list_2 LEVEL_SYMBOL // lookahead token appears
. 

** In state 4293, looking ahead at LEVEL_SYMBOL, shifting is permitted
** because of the following sub-derivation:

. LEVEL_SYMBOL level_input_list_3 

** Conflict (shift/reduce) in state 4250.
** Token involved: RPAREN
** This state is reached from start after reading:

source_text_3 PROGRAM identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              program_declaration 
              (?)

** In state 4250, looking ahead at RPAREN, shifting is permitted
** because of the following sub-derivation:

PROGRAM identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN list_of_port_declarations SEMICOLON program_declaration_10 ENDPROGRAM 
                                                                                  LPAREN . RPAREN 

** In state 4250, looking ahead at RPAREN, reducing production
** port ->
** is permitted because of the following sub-derivation:

PROGRAM identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN LPAREN port list_of_ports_4 RPAREN SEMICOLON program_declaration_4 ENDPROGRAM // lookahead token appears because list_of_ports_4 can vanish
                                                                                         . 

** Conflict (shift/reduce) in state 4208.
** Token involved: RPAREN
** This state is reached from start after reading:

source_text_3 PROGRAM identifier LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              program_declaration 
              (?)

** In state 4208, looking ahead at RPAREN, shifting is permitted
** because of the following sub-derivation:

PROGRAM identifier list_of_port_declarations SEMICOLON program_declaration_10 ENDPROGRAM 
                   LPAREN . RPAREN 

** In state 4208, looking ahead at RPAREN, reducing production
** port ->
** is permitted because of the following sub-derivation:

PROGRAM identifier LPAREN port list_of_ports_4 RPAREN SEMICOLON program_declaration_4 ENDPROGRAM // lookahead token appears because list_of_ports_4 can vanish
                          . 

** Conflict (shift/reduce) in state 4161.
** Token involved: RPAREN
** This state is reached from start after reading:

source_text_3 PROGRAM lifetime identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              program_declaration 
              (?)

** In state 4161, looking ahead at RPAREN, shifting is permitted
** because of the following sub-derivation:

PROGRAM lifetime identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN list_of_port_declarations SEMICOLON program_declaration_10 ENDPROGRAM 
                                                                                           LPAREN . RPAREN 

** In state 4161, looking ahead at RPAREN, reducing production
** port ->
** is permitted because of the following sub-derivation:

PROGRAM lifetime identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN LPAREN port list_of_ports_4 RPAREN SEMICOLON program_declaration_4 ENDPROGRAM // lookahead token appears because list_of_ports_4 can vanish
                                                                                                  . 

** Conflict (shift/reduce) in state 4138.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 PROGRAM identifier LPAREN P_DOTSTAR RPAREN SEMICOLON program_declaration_22 identifier

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              program_declaration 
              PROGRAM identifier LPAREN P_DOTSTAR RPAREN SEMICOLON program_declaration_22 ENDPROGRAM 
                                                                   program_declaration_22 program_item 
                                                                                          (?)

** In state 4138, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

port_declaration SEMICOLON 
non_generic_port_declaration 
interface_port_declaration 
identifier identifier list_of_interface_identifiers_3 list_of_interface_identifiers_4 
           . SIMPLE_IDENTIFIER 

** In state 4138, looking ahead at SIMPLE_IDENTIFIER, reducing production
** type_declaration_identifier_3 ->
** is permitted because of the following sub-derivation:

non_port_program_item 
module_or_generate_item_declaration 
data_declaration 
data_type list_of_variable_identifiers_or_assignments SEMICOLON // lookahead token appears because list_of_variable_identifiers_or_assignments can begin with SIMPLE_IDENTIFIER
identifier type_declaration_identifier_3 data_type_11 // lookahead token is inherited because data_type_11 can vanish
           . 

** Conflict (shift/reduce) in state 4123.
** Token involved: COMMA
** This state is reached from start after reading:

source_text_3 PROGRAM identifier LPAREN identifier identifier list_of_interface_identifiers_3 list_of_interface_identifiers_4

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              program_declaration 
              PROGRAM identifier list_of_port_declarations SEMICOLON program_declaration_10 ENDPROGRAM 
                                 (?)

** In state 4123, looking ahead at COMMA, reducing production
** interface_port_declaration -> identifier identifier list_of_interface_identifiers_3 list_of_interface_identifiers_4
** is permitted because of the following sub-derivation:

LPAREN port_declaration list_of_port_declarations_4 RPAREN // lookahead token appears because list_of_port_declarations_4 can begin with COMMA
       non_generic_port_declaration // lookahead token is inherited
       interface_port_declaration // lookahead token is inherited
       identifier identifier list_of_interface_identifiers_3 list_of_interface_identifiers_4 . 

** In state 4123, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

LPAREN port_declaration list_of_port_declarations_4 RPAREN 
       non_generic_port_declaration 
       interface_port_declaration 
       identifier identifier list_of_interface_identifiers_3 list_of_interface_identifiers_4 
                                                             list_of_interface_identifiers_4 . COMMA identifier list_of_interface_identifiers_4_6 

** Conflict (shift/reduce) in state 4120.
** Token involved: COMMA
** This state is reached from start after reading:

source_text_3 PROGRAM identifier LPAREN identifier DOT identifier identifier list_of_interface_identifiers_3 list_of_interface_identifiers_4

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              program_declaration 
              PROGRAM identifier list_of_port_declarations SEMICOLON program_declaration_10 ENDPROGRAM 
                                 (?)

** In state 4120, looking ahead at COMMA, reducing production
** interface_port_declaration -> identifier DOT identifier identifier list_of_interface_identifiers_3 list_of_interface_identifiers_4
** is permitted because of the following sub-derivation:

LPAREN port_declaration list_of_port_declarations_4 RPAREN // lookahead token appears because list_of_port_declarations_4 can begin with COMMA
       non_generic_port_declaration // lookahead token is inherited
       interface_port_declaration // lookahead token is inherited
       identifier DOT identifier identifier list_of_interface_identifiers_3 list_of_interface_identifiers_4 . 

** In state 4120, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

LPAREN port_declaration list_of_port_declarations_4 RPAREN 
       non_generic_port_declaration 
       interface_port_declaration 
       identifier DOT identifier identifier list_of_interface_identifiers_3 list_of_interface_identifiers_4 
                                                                            list_of_interface_identifiers_4 . COMMA identifier list_of_interface_identifiers_4_6 

** Conflict (shift/reduce) in state 4093.
** Token involved: COMMA
** This state is reached from start after reading:

source_text_3 PROGRAM identifier LPAREN INOUT data_type identifier variable_dimension list_of_variable_identifiers_4

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              program_declaration 
              PROGRAM identifier list_of_port_declarations SEMICOLON program_declaration_10 ENDPROGRAM 
                                 (?)

** In state 4093, looking ahead at COMMA, reducing production
** inout_declaration -> INOUT data_type identifier variable_dimension list_of_variable_identifiers_4
** is permitted because of the following sub-derivation:

LPAREN port_declaration list_of_port_declarations_4 RPAREN // lookahead token appears because list_of_port_declarations_4 can begin with COMMA
       non_generic_port_declaration // lookahead token is inherited
       inout_declaration // lookahead token is inherited
       INOUT data_type identifier variable_dimension list_of_variable_identifiers_4 . 

** In state 4093, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

LPAREN port_declaration list_of_port_declarations_4 RPAREN 
       non_generic_port_declaration 
       inout_declaration 
       INOUT data_type identifier variable_dimension list_of_variable_identifiers_4 
                                                     list_of_variable_identifiers_4 . COMMA identifier variable_dimension 

** Conflict (shift/reduce) in state 4091.
** Token involved: LBRACK
** This state is reached from start after reading:

source_text_3 PROGRAM identifier LPAREN INOUT data_type identifier

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              program_declaration 
              PROGRAM identifier list_of_port_declarations SEMICOLON program_declaration_10 ENDPROGRAM 
                                 LPAREN port_declaration list_of_port_declarations_4 RPAREN 
                                        non_generic_port_declaration 
                                        inout_declaration 
                                        INOUT data_type identifier variable_dimension list_of_variable_identifiers_4 
                                                                   (?)

** In state 4091, looking ahead at LBRACK, shifting is permitted
** because of the following sub-derivation:

associative_dimension 
. LBRACK data_type RBRACK 

** In state 4091, looking ahead at LBRACK, reducing production
** variable_dimension_2 ->
** is permitted because of the following sub-derivation:

variable_dimension_2 
variable_dimension_2 unpacked_dimension // lookahead token appears because unpacked_dimension can begin with LBRACK
. 

** Conflict (shift/reduce) in state 4090.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 PROGRAM identifier LPAREN INOUT data_type

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              program_declaration 
              PROGRAM identifier list_of_port_declarations SEMICOLON program_declaration_10 ENDPROGRAM 
                                 LPAREN port_declaration list_of_port_declarations_4 RPAREN 
                                        non_generic_port_declaration 
                                        inout_declaration 
                                        (?)

** In state 4090, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

INOUT data_type identifier variable_dimension list_of_variable_identifiers_4 
                . SIMPLE_IDENTIFIER 

** In state 4090, looking ahead at SIMPLE_IDENTIFIER, reducing production
** port_type -> data_type
** is permitted because of the following sub-derivation:

INOUT port_type identifier list_of_port_identifiers_3 list_of_port_identifiers_4 // lookahead token appears because identifier can begin with SIMPLE_IDENTIFIER
      data_type . 

** Conflict (shift/reduce) in state 4089.
** Token involved: COMMA
** This state is reached from start after reading:

source_text_3 PROGRAM identifier LPAREN INOUT identifier list_of_port_identifiers_3 list_of_port_identifiers_4

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              program_declaration 
              PROGRAM identifier list_of_port_declarations SEMICOLON program_declaration_10 ENDPROGRAM 
                                 (?)

** In state 4089, looking ahead at COMMA, reducing production
** inout_declaration -> INOUT identifier list_of_port_identifiers_3 list_of_port_identifiers_4
** is permitted because of the following sub-derivation:

LPAREN port_declaration list_of_port_declarations_4 RPAREN // lookahead token appears because list_of_port_declarations_4 can begin with COMMA
       non_generic_port_declaration // lookahead token is inherited
       inout_declaration // lookahead token is inherited
       INOUT identifier list_of_port_identifiers_3 list_of_port_identifiers_4 . 

** In state 4089, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

LPAREN port_declaration list_of_port_declarations_4 RPAREN 
       non_generic_port_declaration 
       inout_declaration 
       INOUT identifier list_of_port_identifiers_3 list_of_port_identifiers_4 
                                                   list_of_port_identifiers_4 . COMMA identifier list_of_port_identifiers_4_6 

** Conflict (reduce/reduce) in state 4087.
** Token involved: LBRACK
** This state is reached from start after reading:

source_text_3 PROGRAM identifier LPAREN INOUT identifier

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              program_declaration 
              PROGRAM identifier list_of_port_declarations SEMICOLON program_declaration_10 ENDPROGRAM 
                                 LPAREN port_declaration list_of_port_declarations_4 RPAREN 
                                        non_generic_port_declaration 
                                        inout_declaration 
                                        (?)

** In state 4087, looking ahead at LBRACK, reducing production
** list_of_port_identifiers_3 ->
** is permitted because of the following sub-derivation:

INOUT identifier list_of_port_identifiers_3 list_of_port_identifiers_4 
                 list_of_port_identifiers_3 unpacked_dimension // lookahead token appears because unpacked_dimension can begin with LBRACK
                 . 

** In state 4087, looking ahead at LBRACK, reducing production
** type_declaration_identifier_3 ->
** is permitted because of the following sub-derivation:

INOUT data_type identifier variable_dimension list_of_variable_identifiers_4 
      identifier type_declaration_identifier_3 data_type_11 // lookahead token appears because data_type_11 can begin with LBRACK
                 . 

** Conflict (shift/reduce) in state 4086.
** Token involved: COMMA
** This state is reached from start after reading:

source_text_3 PROGRAM identifier LPAREN INOUT port_type identifier list_of_port_identifiers_3 list_of_port_identifiers_4

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              program_declaration 
              PROGRAM identifier list_of_port_declarations SEMICOLON program_declaration_10 ENDPROGRAM 
                                 (?)

** In state 4086, looking ahead at COMMA, reducing production
** inout_declaration -> INOUT port_type identifier list_of_port_identifiers_3 list_of_port_identifiers_4
** is permitted because of the following sub-derivation:

LPAREN port_declaration list_of_port_declarations_4 RPAREN // lookahead token appears because list_of_port_declarations_4 can begin with COMMA
       non_generic_port_declaration // lookahead token is inherited
       inout_declaration // lookahead token is inherited
       INOUT port_type identifier list_of_port_identifiers_3 list_of_port_identifiers_4 . 

** In state 4086, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

LPAREN port_declaration list_of_port_declarations_4 RPAREN 
       non_generic_port_declaration 
       inout_declaration 
       INOUT port_type identifier list_of_port_identifiers_3 list_of_port_identifiers_4 
                                                             list_of_port_identifiers_4 . COMMA identifier list_of_port_identifiers_4_6 

** Conflict (shift/reduce) in state 4081.
** Token involved: COMMA
** This state is reached from start after reading:

source_text_3 PROGRAM identifier LPAREN INPUT data_type identifier variable_dimension list_of_variable_identifiers_4

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              program_declaration 
              PROGRAM identifier list_of_port_declarations SEMICOLON program_declaration_10 ENDPROGRAM 
                                 (?)

** In state 4081, looking ahead at COMMA, reducing production
** input_declaration -> INPUT data_type identifier variable_dimension list_of_variable_identifiers_4
** is permitted because of the following sub-derivation:

LPAREN port_declaration list_of_port_declarations_4 RPAREN // lookahead token appears because list_of_port_declarations_4 can begin with COMMA
       non_generic_port_declaration // lookahead token is inherited
       input_declaration // lookahead token is inherited
       INPUT data_type identifier variable_dimension list_of_variable_identifiers_4 . 

** In state 4081, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

LPAREN port_declaration list_of_port_declarations_4 RPAREN 
       non_generic_port_declaration 
       input_declaration 
       INPUT data_type identifier variable_dimension list_of_variable_identifiers_4 
                                                     list_of_variable_identifiers_4 . COMMA identifier variable_dimension 

** Conflict (shift/reduce) in state 4079.
** Token involved: LBRACK
** This state is reached from start after reading:

source_text_3 PROGRAM identifier LPAREN INPUT data_type identifier

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              program_declaration 
              PROGRAM identifier list_of_port_declarations SEMICOLON program_declaration_10 ENDPROGRAM 
                                 LPAREN port_declaration list_of_port_declarations_4 RPAREN 
                                        non_generic_port_declaration 
                                        input_declaration 
                                        INPUT data_type identifier variable_dimension list_of_variable_identifiers_4 
                                                                   (?)

** In state 4079, looking ahead at LBRACK, shifting is permitted
** because of the following sub-derivation:

associative_dimension 
. LBRACK data_type RBRACK 

** In state 4079, looking ahead at LBRACK, reducing production
** variable_dimension_2 ->
** is permitted because of the following sub-derivation:

variable_dimension_2 
variable_dimension_2 unpacked_dimension // lookahead token appears because unpacked_dimension can begin with LBRACK
. 

** Conflict (shift/reduce) in state 4078.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 PROGRAM identifier LPAREN INPUT data_type

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              program_declaration 
              PROGRAM identifier list_of_port_declarations SEMICOLON program_declaration_10 ENDPROGRAM 
                                 LPAREN port_declaration list_of_port_declarations_4 RPAREN 
                                        non_generic_port_declaration 
                                        input_declaration 
                                        (?)

** In state 4078, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

INPUT data_type identifier variable_dimension list_of_variable_identifiers_4 
                . SIMPLE_IDENTIFIER 

** In state 4078, looking ahead at SIMPLE_IDENTIFIER, reducing production
** port_type -> data_type
** is permitted because of the following sub-derivation:

INPUT port_type identifier list_of_port_identifiers_3 list_of_port_identifiers_4 // lookahead token appears because identifier can begin with SIMPLE_IDENTIFIER
      data_type . 

** Conflict (shift/reduce) in state 4077.
** Token involved: COMMA
** This state is reached from start after reading:

source_text_3 PROGRAM identifier LPAREN INPUT identifier list_of_port_identifiers_3 list_of_port_identifiers_4

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              program_declaration 
              PROGRAM identifier list_of_port_declarations SEMICOLON program_declaration_10 ENDPROGRAM 
                                 (?)

** In state 4077, looking ahead at COMMA, reducing production
** input_declaration -> INPUT identifier list_of_port_identifiers_3 list_of_port_identifiers_4
** is permitted because of the following sub-derivation:

LPAREN port_declaration list_of_port_declarations_4 RPAREN // lookahead token appears because list_of_port_declarations_4 can begin with COMMA
       non_generic_port_declaration // lookahead token is inherited
       input_declaration // lookahead token is inherited
       INPUT identifier list_of_port_identifiers_3 list_of_port_identifiers_4 . 

** In state 4077, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

LPAREN port_declaration list_of_port_declarations_4 RPAREN 
       non_generic_port_declaration 
       input_declaration 
       INPUT identifier list_of_port_identifiers_3 list_of_port_identifiers_4 
                                                   list_of_port_identifiers_4 . COMMA identifier list_of_port_identifiers_4_6 

** Conflict (reduce/reduce) in state 4075.
** Token involved: LBRACK
** This state is reached from start after reading:

source_text_3 PROGRAM identifier LPAREN INPUT identifier

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              program_declaration 
              PROGRAM identifier list_of_port_declarations SEMICOLON program_declaration_10 ENDPROGRAM 
                                 LPAREN port_declaration list_of_port_declarations_4 RPAREN 
                                        non_generic_port_declaration 
                                        input_declaration 
                                        (?)

** In state 4075, looking ahead at LBRACK, reducing production
** list_of_port_identifiers_3 ->
** is permitted because of the following sub-derivation:

INPUT identifier list_of_port_identifiers_3 list_of_port_identifiers_4 
                 list_of_port_identifiers_3 unpacked_dimension // lookahead token appears because unpacked_dimension can begin with LBRACK
                 . 

** In state 4075, looking ahead at LBRACK, reducing production
** type_declaration_identifier_3 ->
** is permitted because of the following sub-derivation:

INPUT data_type identifier variable_dimension list_of_variable_identifiers_4 
      identifier type_declaration_identifier_3 data_type_11 // lookahead token appears because data_type_11 can begin with LBRACK
                 . 

** Conflict (shift/reduce) in state 4074.
** Token involved: COMMA
** This state is reached from start after reading:

source_text_3 PROGRAM identifier LPAREN INPUT port_type identifier list_of_port_identifiers_3 list_of_port_identifiers_4

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              program_declaration 
              PROGRAM identifier list_of_port_declarations SEMICOLON program_declaration_10 ENDPROGRAM 
                                 (?)

** In state 4074, looking ahead at COMMA, reducing production
** input_declaration -> INPUT port_type identifier list_of_port_identifiers_3 list_of_port_identifiers_4
** is permitted because of the following sub-derivation:

LPAREN port_declaration list_of_port_declarations_4 RPAREN // lookahead token appears because list_of_port_declarations_4 can begin with COMMA
       non_generic_port_declaration // lookahead token is inherited
       input_declaration // lookahead token is inherited
       INPUT port_type identifier list_of_port_identifiers_3 list_of_port_identifiers_4 . 

** In state 4074, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

LPAREN port_declaration list_of_port_declarations_4 RPAREN 
       non_generic_port_declaration 
       input_declaration 
       INPUT port_type identifier list_of_port_identifiers_3 list_of_port_identifiers_4 
                                                             list_of_port_identifiers_4 . COMMA identifier list_of_port_identifiers_4_6 

** Conflict (shift/reduce) in state 4069.
** Token involved: COMMA
** This state is reached from start after reading:

source_text_3 PROGRAM identifier LPAREN INTERFACE identifier list_of_interface_identifiers_3 list_of_interface_identifiers_4

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              program_declaration 
              PROGRAM identifier list_of_port_declarations SEMICOLON program_declaration_10 ENDPROGRAM 
                                 (?)

** In state 4069, looking ahead at COMMA, reducing production
** generic_interface_port_declaration -> INTERFACE identifier list_of_interface_identifiers_3 list_of_interface_identifiers_4
** is permitted because of the following sub-derivation:

LPAREN port_declaration list_of_port_declarations_4 RPAREN // lookahead token appears because list_of_port_declarations_4 can begin with COMMA
       generic_interface_port_declaration // lookahead token is inherited
       INTERFACE identifier list_of_interface_identifiers_3 list_of_interface_identifiers_4 . 

** In state 4069, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

LPAREN port_declaration list_of_port_declarations_4 RPAREN 
       generic_interface_port_declaration 
       INTERFACE identifier list_of_interface_identifiers_3 list_of_interface_identifiers_4 
                                                            list_of_interface_identifiers_4 . COMMA identifier list_of_interface_identifiers_4_6 

** Conflict (shift/reduce) in state 4062.
** Token involved: COMMA
** This state is reached from start after reading:

source_text_3 PROGRAM identifier LPAREN INTERFACE DOT identifier identifier list_of_interface_identifiers_3 list_of_interface_identifiers_4

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              program_declaration 
              PROGRAM identifier list_of_port_declarations SEMICOLON program_declaration_10 ENDPROGRAM 
                                 (?)

** In state 4062, looking ahead at COMMA, reducing production
** generic_interface_port_declaration -> INTERFACE DOT identifier identifier list_of_interface_identifiers_3 list_of_interface_identifiers_4
** is permitted because of the following sub-derivation:

LPAREN port_declaration list_of_port_declarations_4 RPAREN // lookahead token appears because list_of_port_declarations_4 can begin with COMMA
       generic_interface_port_declaration // lookahead token is inherited
       INTERFACE DOT identifier identifier list_of_interface_identifiers_3 list_of_interface_identifiers_4 . 

** In state 4062, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

LPAREN port_declaration list_of_port_declarations_4 RPAREN 
       generic_interface_port_declaration 
       INTERFACE DOT identifier identifier list_of_interface_identifiers_3 list_of_interface_identifiers_4 
                                                                           list_of_interface_identifiers_4 . COMMA identifier list_of_interface_identifiers_4_6 

** Conflict (shift/reduce) in state 4041.
** Token involved: COMMA
** This state is reached from start after reading:

source_text_3 PROGRAM identifier LPAREN OUTPUT data_type identifier variable_dimension list_of_variable_port_identifiers_5

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              program_declaration 
              PROGRAM identifier list_of_port_declarations SEMICOLON program_declaration_10 ENDPROGRAM 
                                 (?)

** In state 4041, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

LPAREN port_declaration list_of_port_declarations_4 RPAREN 
       non_generic_port_declaration 
       output_declaration 
       OUTPUT data_type identifier variable_dimension list_of_variable_port_identifiers_5 
                                                      list_of_variable_port_identifiers_5 . COMMA identifier variable_dimension 

** In state 4041, looking ahead at COMMA, reducing production
** output_declaration -> OUTPUT data_type identifier variable_dimension list_of_variable_port_identifiers_5
** is permitted because of the following sub-derivation:

LPAREN port_declaration list_of_port_declarations_4 RPAREN // lookahead token appears because list_of_port_declarations_4 can begin with COMMA
       non_generic_port_declaration // lookahead token is inherited
       output_declaration // lookahead token is inherited
       OUTPUT data_type identifier variable_dimension list_of_variable_port_identifiers_5 . 

** Conflict (shift/reduce) in state 4037.
** Token involved: LBRACK
** This state is reached from start after reading:

source_text_3 PROGRAM identifier LPAREN OUTPUT data_type identifier variable_dimension list_of_variable_port_identifiers_5 COMMA identifier

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              program_declaration 
              PROGRAM identifier list_of_port_declarations SEMICOLON program_declaration_10 ENDPROGRAM 
                                 LPAREN port_declaration list_of_port_declarations_4 RPAREN 
                                        non_generic_port_declaration 
                                        output_declaration 
                                        OUTPUT data_type identifier variable_dimension list_of_variable_port_identifiers_5 
                                                                                       list_of_variable_port_identifiers_5 COMMA identifier variable_dimension 
                                                                                                                                            (?)

** In state 4037, looking ahead at LBRACK, shifting is permitted
** because of the following sub-derivation:

associative_dimension 
. LBRACK data_type RBRACK 

** In state 4037, looking ahead at LBRACK, reducing production
** variable_dimension_2 ->
** is permitted because of the following sub-derivation:

variable_dimension_2 
variable_dimension_2 unpacked_dimension // lookahead token appears because unpacked_dimension can begin with LBRACK
. 

** Conflict (shift/reduce) in state 4035.
** Token involved: COMMA
** This state is reached from start after reading:

source_text_3 PROGRAM identifier LPAREN OUTPUT data_type identifier variable_dimension EQUALS constant_expression list_of_variable_port_identifiers_5

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              program_declaration 
              PROGRAM identifier list_of_port_declarations SEMICOLON program_declaration_10 ENDPROGRAM 
                                 (?)

** In state 4035, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

LPAREN port_declaration list_of_port_declarations_4 RPAREN 
       non_generic_port_declaration 
       output_declaration 
       OUTPUT data_type identifier variable_dimension EQUALS constant_expression list_of_variable_port_identifiers_5 
                                                                                 list_of_variable_port_identifiers_5 . COMMA identifier variable_dimension 

** In state 4035, looking ahead at COMMA, reducing production
** output_declaration -> OUTPUT data_type identifier variable_dimension EQUALS constant_expression list_of_variable_port_identifiers_5
** is permitted because of the following sub-derivation:

LPAREN port_declaration list_of_port_declarations_4 RPAREN // lookahead token appears because list_of_port_declarations_4 can begin with COMMA
       non_generic_port_declaration // lookahead token is inherited
       output_declaration // lookahead token is inherited
       OUTPUT data_type identifier variable_dimension EQUALS constant_expression list_of_variable_port_identifiers_5 . 

** Conflict (shift/reduce) in state 4031.
** Token involved: LBRACK
** This state is reached from start after reading:

source_text_3 PROGRAM identifier LPAREN OUTPUT data_type identifier

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              program_declaration 
              PROGRAM identifier list_of_port_declarations SEMICOLON program_declaration_10 ENDPROGRAM 
                                 LPAREN port_declaration list_of_port_declarations_4 RPAREN 
                                        non_generic_port_declaration 
                                        output_declaration 
                                        OUTPUT data_type identifier variable_dimension list_of_variable_port_identifiers_5 
                                                                    (?)

** In state 4031, looking ahead at LBRACK, shifting is permitted
** because of the following sub-derivation:

associative_dimension 
. LBRACK data_type RBRACK 

** In state 4031, looking ahead at LBRACK, reducing production
** variable_dimension_2 ->
** is permitted because of the following sub-derivation:

variable_dimension_2 
variable_dimension_2 unpacked_dimension // lookahead token appears because unpacked_dimension can begin with LBRACK
. 

** Conflict (shift/reduce) in state 4030.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 PROGRAM identifier LPAREN OUTPUT data_type

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              program_declaration 
              PROGRAM identifier list_of_port_declarations SEMICOLON program_declaration_10 ENDPROGRAM 
                                 LPAREN port_declaration list_of_port_declarations_4 RPAREN 
                                        non_generic_port_declaration 
                                        output_declaration 
                                        (?)

** In state 4030, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

OUTPUT data_type identifier variable_dimension list_of_variable_port_identifiers_5 
                 . SIMPLE_IDENTIFIER 

** In state 4030, looking ahead at SIMPLE_IDENTIFIER, reducing production
** port_type -> data_type
** is permitted because of the following sub-derivation:

OUTPUT port_type identifier list_of_port_identifiers_3 list_of_port_identifiers_4 // lookahead token appears because identifier can begin with SIMPLE_IDENTIFIER
       data_type . 

** Conflict (shift/reduce) in state 4029.
** Token involved: COMMA
** This state is reached from start after reading:

source_text_3 PROGRAM identifier LPAREN OUTPUT identifier list_of_port_identifiers_3 list_of_port_identifiers_4

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              program_declaration 
              PROGRAM identifier list_of_port_declarations SEMICOLON program_declaration_10 ENDPROGRAM 
                                 (?)

** In state 4029, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

LPAREN port_declaration list_of_port_declarations_4 RPAREN 
       non_generic_port_declaration 
       output_declaration 
       OUTPUT identifier list_of_port_identifiers_3 list_of_port_identifiers_4 
                                                    list_of_port_identifiers_4 . COMMA identifier list_of_port_identifiers_4_6 

** In state 4029, looking ahead at COMMA, reducing production
** output_declaration -> OUTPUT identifier list_of_port_identifiers_3 list_of_port_identifiers_4
** is permitted because of the following sub-derivation:

LPAREN port_declaration list_of_port_declarations_4 RPAREN // lookahead token appears because list_of_port_declarations_4 can begin with COMMA
       non_generic_port_declaration // lookahead token is inherited
       output_declaration // lookahead token is inherited
       OUTPUT identifier list_of_port_identifiers_3 list_of_port_identifiers_4 . 

** Conflict (reduce/reduce) in state 4027.
** Token involved: LBRACK
** This state is reached from start after reading:

source_text_3 PROGRAM identifier LPAREN OUTPUT identifier

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              program_declaration 
              PROGRAM identifier list_of_port_declarations SEMICOLON program_declaration_10 ENDPROGRAM 
                                 LPAREN port_declaration list_of_port_declarations_4 RPAREN 
                                        non_generic_port_declaration 
                                        output_declaration 
                                        (?)

** In state 4027, looking ahead at LBRACK, reducing production
** list_of_port_identifiers_3 ->
** is permitted because of the following sub-derivation:

OUTPUT identifier list_of_port_identifiers_3 list_of_port_identifiers_4 
                  list_of_port_identifiers_3 unpacked_dimension // lookahead token appears because unpacked_dimension can begin with LBRACK
                  . 

** In state 4027, looking ahead at LBRACK, reducing production
** type_declaration_identifier_3 ->
** is permitted because of the following sub-derivation:

OUTPUT data_type identifier variable_dimension list_of_variable_port_identifiers_5 
       identifier type_declaration_identifier_3 data_type_11 // lookahead token appears because data_type_11 can begin with LBRACK
                  . 

** Conflict (shift/reduce) in state 4026.
** Token involved: COMMA
** This state is reached from start after reading:

source_text_3 PROGRAM identifier LPAREN OUTPUT port_type identifier list_of_port_identifiers_3 list_of_port_identifiers_4

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              program_declaration 
              PROGRAM identifier list_of_port_declarations SEMICOLON program_declaration_10 ENDPROGRAM 
                                 (?)

** In state 4026, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

LPAREN port_declaration list_of_port_declarations_4 RPAREN 
       non_generic_port_declaration 
       output_declaration 
       OUTPUT port_type identifier list_of_port_identifiers_3 list_of_port_identifiers_4 
                                                              list_of_port_identifiers_4 . COMMA identifier list_of_port_identifiers_4_6 

** In state 4026, looking ahead at COMMA, reducing production
** output_declaration -> OUTPUT port_type identifier list_of_port_identifiers_3 list_of_port_identifiers_4
** is permitted because of the following sub-derivation:

LPAREN port_declaration list_of_port_declarations_4 RPAREN // lookahead token appears because list_of_port_declarations_4 can begin with COMMA
       non_generic_port_declaration // lookahead token is inherited
       output_declaration // lookahead token is inherited
       OUTPUT port_type identifier list_of_port_identifiers_3 list_of_port_identifiers_4 . 

** Conflict (shift/reduce) in state 4021.
** Token involved: COMMA
** This state is reached from start after reading:

source_text_3 PROGRAM identifier LPAREN REF data_type identifier list_of_port_identifiers_3 list_of_port_identifiers_4

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              program_declaration 
              PROGRAM identifier list_of_port_declarations SEMICOLON program_declaration_10 ENDPROGRAM 
                                 (?)

** In state 4021, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

LPAREN port_declaration list_of_port_declarations_4 RPAREN 
       non_generic_port_declaration 
       REF data_type identifier list_of_port_identifiers_3 list_of_port_identifiers_4 
                                                           list_of_port_identifiers_4 . COMMA identifier list_of_port_identifiers_4_6 

** In state 4021, looking ahead at COMMA, reducing production
** non_generic_port_declaration -> REF data_type identifier list_of_port_identifiers_3 list_of_port_identifiers_4
** is permitted because of the following sub-derivation:

LPAREN port_declaration list_of_port_declarations_4 RPAREN // lookahead token appears because list_of_port_declarations_4 can begin with COMMA
       non_generic_port_declaration // lookahead token is inherited
       REF data_type identifier list_of_port_identifiers_3 list_of_port_identifiers_4 . 

** Conflict (shift/reduce) in state 4015.
** Token involved: RPAREN
** This state is reached from start after reading:

source_text_3 PROGRAM lifetime identifier LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              program_declaration 
              (?)

** In state 4015, looking ahead at RPAREN, shifting is permitted
** because of the following sub-derivation:

PROGRAM lifetime identifier list_of_port_declarations SEMICOLON program_declaration_10 ENDPROGRAM 
                            LPAREN . RPAREN 

** In state 4015, looking ahead at RPAREN, reducing production
** port ->
** is permitted because of the following sub-derivation:

PROGRAM lifetime identifier LPAREN port list_of_ports_4 RPAREN SEMICOLON program_declaration_4 ENDPROGRAM // lookahead token appears because list_of_ports_4 can vanish
                                   . 

** Conflict (shift/reduce/reduce) in state 3989.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 net_type delay3 identifier EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              net_declaration 
              net_type delay3 identifier EQUALS expression list_of_net_decl_assignments_3 SEMICOLON 
                                                primary 
                                                (?)

** In state 3989, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 3989, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 3989, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 3983.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 net_type drive_strength delay3 identifier EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              net_declaration 
              net_type drive_strength delay3 identifier EQUALS expression list_of_net_decl_assignments_3 SEMICOLON 
                                                               primary 
                                                               (?)

** In state 3983, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 3983, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 3983, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 3977.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 net_type drive_strength identifier EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              net_declaration 
              net_type drive_strength identifier EQUALS expression list_of_net_decl_assignments_3 SEMICOLON 
                                                        primary 
                                                        (?)

** In state 3977, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 3977, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 3977, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 3972.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 net_type drive_strength net_declaration_28 LBRACK constant_expression COLON constant_expression RBRACK delay3 identifier EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              net_declaration 
              net_type drive_strength net_declaration_28 LBRACK constant_expression COLON constant_expression RBRACK delay3 identifier EQUALS expression list_of_net_decl_assignments_3 SEMICOLON 
                                                                                                                                              primary 
                                                                                                                                              (?)

** In state 3972, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 3972, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 3972, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 3966.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 net_type drive_strength net_declaration_28 LBRACK constant_expression COLON constant_expression RBRACK identifier EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              net_declaration 
              net_type drive_strength net_declaration_28 LBRACK constant_expression COLON constant_expression RBRACK identifier EQUALS expression list_of_net_decl_assignments_3 SEMICOLON 
                                                                                                                                       primary 
                                                                                                                                       (?)

** In state 3966, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 3966, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 3966, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 3955.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 net_type drive_strength signing delay3 identifier EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              net_declaration 
              net_type drive_strength signing delay3 identifier EQUALS expression list_of_net_decl_assignments_3 SEMICOLON 
                                                                       primary 
                                                                       (?)

** In state 3955, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 3955, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 3955, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 3949.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 net_type drive_strength signing identifier EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              net_declaration 
              net_type drive_strength signing identifier EQUALS expression list_of_net_decl_assignments_3 SEMICOLON 
                                                                primary 
                                                                (?)

** In state 3949, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 3949, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 3949, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 3944.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 net_type drive_strength signing net_declaration_28 LBRACK constant_expression COLON constant_expression RBRACK delay3 identifier EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              net_declaration 
              net_type drive_strength signing net_declaration_28 LBRACK constant_expression COLON constant_expression RBRACK delay3 identifier EQUALS expression list_of_net_decl_assignments_3 SEMICOLON 
                                                                                                                                                      primary 
                                                                                                                                                      (?)

** In state 3944, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 3944, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 3944, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 3938.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 net_type drive_strength signing net_declaration_28 LBRACK constant_expression COLON constant_expression RBRACK identifier EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              net_declaration 
              net_type drive_strength signing net_declaration_28 LBRACK constant_expression COLON constant_expression RBRACK identifier EQUALS expression list_of_net_decl_assignments_3 SEMICOLON 
                                                                                                                                               primary 
                                                                                                                                               (?)

** In state 3938, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 3938, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 3938, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 3926.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 net_type drive_strength SCALARED net_declaration_28 LBRACK constant_expression COLON constant_expression RBRACK delay3 identifier EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              net_declaration 
              net_type drive_strength SCALARED net_declaration_28 LBRACK constant_expression COLON constant_expression RBRACK delay3 identifier EQUALS expression list_of_net_decl_assignments_3 SEMICOLON 
                                                                                                                                                       primary 
                                                                                                                                                       (?)

** In state 3926, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 3926, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 3926, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 3920.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 net_type drive_strength SCALARED net_declaration_28 LBRACK constant_expression COLON constant_expression RBRACK identifier EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              net_declaration 
              net_type drive_strength SCALARED net_declaration_28 LBRACK constant_expression COLON constant_expression RBRACK identifier EQUALS expression list_of_net_decl_assignments_3 SEMICOLON 
                                                                                                                                                primary 
                                                                                                                                                (?)

** In state 3920, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 3920, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 3920, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 3909.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 net_type drive_strength SCALARED signing net_declaration_28 LBRACK constant_expression COLON constant_expression RBRACK delay3 identifier EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              net_declaration 
              net_type drive_strength SCALARED signing net_declaration_28 LBRACK constant_expression COLON constant_expression RBRACK delay3 identifier EQUALS expression list_of_net_decl_assignments_3 SEMICOLON 
                                                                                                                                                               primary 
                                                                                                                                                               (?)

** In state 3909, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 3909, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 3909, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 3903.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 net_type drive_strength SCALARED signing net_declaration_28 LBRACK constant_expression COLON constant_expression RBRACK identifier EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              net_declaration 
              net_type drive_strength SCALARED signing net_declaration_28 LBRACK constant_expression COLON constant_expression RBRACK identifier EQUALS expression list_of_net_decl_assignments_3 SEMICOLON 
                                                                                                                                                        primary 
                                                                                                                                                        (?)

** In state 3903, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 3903, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 3903, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 3890.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 net_type drive_strength VECTORED net_declaration_28 LBRACK constant_expression COLON constant_expression RBRACK delay3 identifier EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              net_declaration 
              net_type drive_strength VECTORED net_declaration_28 LBRACK constant_expression COLON constant_expression RBRACK delay3 identifier EQUALS expression list_of_net_decl_assignments_3 SEMICOLON 
                                                                                                                                                       primary 
                                                                                                                                                       (?)

** In state 3890, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 3890, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 3890, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 3884.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 net_type drive_strength VECTORED net_declaration_28 LBRACK constant_expression COLON constant_expression RBRACK identifier EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              net_declaration 
              net_type drive_strength VECTORED net_declaration_28 LBRACK constant_expression COLON constant_expression RBRACK identifier EQUALS expression list_of_net_decl_assignments_3 SEMICOLON 
                                                                                                                                                primary 
                                                                                                                                                (?)

** In state 3884, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 3884, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 3884, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 3873.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 net_type drive_strength VECTORED signing net_declaration_28 LBRACK constant_expression COLON constant_expression RBRACK delay3 identifier EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              net_declaration 
              net_type drive_strength VECTORED signing net_declaration_28 LBRACK constant_expression COLON constant_expression RBRACK delay3 identifier EQUALS expression list_of_net_decl_assignments_3 SEMICOLON 
                                                                                                                                                               primary 
                                                                                                                                                               (?)

** In state 3873, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 3873, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 3873, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 3867.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 net_type drive_strength VECTORED signing net_declaration_28 LBRACK constant_expression COLON constant_expression RBRACK identifier EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              net_declaration 
              net_type drive_strength VECTORED signing net_declaration_28 LBRACK constant_expression COLON constant_expression RBRACK identifier EQUALS expression list_of_net_decl_assignments_3 SEMICOLON 
                                                                                                                                                        primary 
                                                                                                                                                        (?)

** In state 3867, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 3867, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 3867, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 3850.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 net_type identifier EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              net_declaration 
              net_type identifier EQUALS expression list_of_net_decl_assignments_3 SEMICOLON 
                                         primary 
                                         (?)

** In state 3850, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 3850, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 3850, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 3830.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 net_type net_declaration_28 LBRACK constant_expression COLON constant_expression RBRACK delay3 identifier EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              net_declaration 
              net_type net_declaration_28 LBRACK constant_expression COLON constant_expression RBRACK delay3 identifier EQUALS expression list_of_net_decl_assignments_3 SEMICOLON 
                                                                                                                               primary 
                                                                                                                               (?)

** In state 3830, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 3830, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 3830, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 3824.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 net_type net_declaration_28 LBRACK constant_expression COLON constant_expression RBRACK identifier EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              net_declaration 
              net_type net_declaration_28 LBRACK constant_expression COLON constant_expression RBRACK identifier EQUALS expression list_of_net_decl_assignments_3 SEMICOLON 
                                                                                                                        primary 
                                                                                                                        (?)

** In state 3824, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 3824, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 3824, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 3810.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 net_type signing delay3 identifier EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              net_declaration 
              net_type signing delay3 identifier EQUALS expression list_of_net_decl_assignments_3 SEMICOLON 
                                                        primary 
                                                        (?)

** In state 3810, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 3810, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 3810, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 3801.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 net_type signing identifier EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              net_declaration 
              net_type signing identifier EQUALS expression list_of_net_decl_assignments_3 SEMICOLON 
                                                 primary 
                                                 (?)

** In state 3801, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 3801, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 3801, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 3781.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 net_type signing net_declaration_28 LBRACK constant_expression COLON constant_expression RBRACK delay3 identifier EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              net_declaration 
              net_type signing net_declaration_28 LBRACK constant_expression COLON constant_expression RBRACK delay3 identifier EQUALS expression list_of_net_decl_assignments_3 SEMICOLON 
                                                                                                                                       primary 
                                                                                                                                       (?)

** In state 3781, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 3781, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 3781, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 3775.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 net_type signing net_declaration_28 LBRACK constant_expression COLON constant_expression RBRACK identifier EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              net_declaration 
              net_type signing net_declaration_28 LBRACK constant_expression COLON constant_expression RBRACK identifier EQUALS expression list_of_net_decl_assignments_3 SEMICOLON 
                                                                                                                                primary 
                                                                                                                                (?)

** In state 3775, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 3775, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 3775, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (reduce/reduce) in state 3767.
** Token involved: LBRACK
** This state is reached from start after reading:

source_text_3 net_type signing

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              net_declaration 
              (?)

** In state 3767, looking ahead at LBRACK, reducing production
** net_declaration_18 ->
** is permitted because of the following sub-derivation:

net_type signing net_declaration_18 LBRACK constant_expression COLON constant_expression RBRACK identifier list_of_net_identifiers_3 list_of_net_identifiers_4 SEMICOLON // lookahead token appears
                 . 

** In state 3767, looking ahead at LBRACK, reducing production
** net_declaration_28 ->
** is permitted because of the following sub-derivation:

net_type signing net_declaration_28 LBRACK constant_expression COLON constant_expression RBRACK identifier EQUALS expression list_of_net_decl_assignments_3 SEMICOLON // lookahead token appears
                 . 

** Conflict (shift/reduce/reduce) in state 3748.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 net_type SCALARED net_declaration_28 LBRACK constant_expression COLON constant_expression RBRACK delay3 identifier EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              net_declaration 
              net_type SCALARED net_declaration_28 LBRACK constant_expression COLON constant_expression RBRACK delay3 identifier EQUALS expression list_of_net_decl_assignments_3 SEMICOLON 
                                                                                                                                        primary 
                                                                                                                                        (?)

** In state 3748, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 3748, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 3748, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 3742.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 net_type SCALARED net_declaration_28 LBRACK constant_expression COLON constant_expression RBRACK identifier EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              net_declaration 
              net_type SCALARED net_declaration_28 LBRACK constant_expression COLON constant_expression RBRACK identifier EQUALS expression list_of_net_decl_assignments_3 SEMICOLON 
                                                                                                                                 primary 
                                                                                                                                 (?)

** In state 3742, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 3742, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 3742, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 3716.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 net_type SCALARED signing net_declaration_28 LBRACK constant_expression COLON constant_expression RBRACK delay3 identifier EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              net_declaration 
              net_type SCALARED signing net_declaration_28 LBRACK constant_expression COLON constant_expression RBRACK delay3 identifier EQUALS expression list_of_net_decl_assignments_3 SEMICOLON 
                                                                                                                                                primary 
                                                                                                                                                (?)

** In state 3716, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 3716, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 3716, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 3710.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 net_type SCALARED signing net_declaration_28 LBRACK constant_expression COLON constant_expression RBRACK identifier EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              net_declaration 
              net_type SCALARED signing net_declaration_28 LBRACK constant_expression COLON constant_expression RBRACK identifier EQUALS expression list_of_net_decl_assignments_3 SEMICOLON 
                                                                                                                                         primary 
                                                                                                                                         (?)

** In state 3710, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 3710, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 3710, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (reduce/reduce) in state 3702.
** Token involved: LBRACK
** This state is reached from start after reading:

source_text_3 net_type SCALARED signing

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              net_declaration 
              (?)

** In state 3702, looking ahead at LBRACK, reducing production
** net_declaration_18 ->
** is permitted because of the following sub-derivation:

net_type SCALARED signing net_declaration_18 LBRACK constant_expression COLON constant_expression RBRACK identifier list_of_net_identifiers_3 list_of_net_identifiers_4 SEMICOLON // lookahead token appears
                          . 

** In state 3702, looking ahead at LBRACK, reducing production
** net_declaration_28 ->
** is permitted because of the following sub-derivation:

net_type SCALARED signing net_declaration_28 LBRACK constant_expression COLON constant_expression RBRACK identifier EQUALS expression list_of_net_decl_assignments_3 SEMICOLON // lookahead token appears
                          . 

** Conflict (reduce/reduce) in state 3701.
** Token involved: LBRACK
** This state is reached from start after reading:

source_text_3 net_type SCALARED

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              net_declaration 
              (?)

** In state 3701, looking ahead at LBRACK, reducing production
** net_declaration_18 ->
** is permitted because of the following sub-derivation:

net_type SCALARED net_declaration_18 LBRACK constant_expression COLON constant_expression RBRACK identifier list_of_net_identifiers_3 list_of_net_identifiers_4 SEMICOLON // lookahead token appears
                  . 

** In state 3701, looking ahead at LBRACK, reducing production
** net_declaration_28 ->
** is permitted because of the following sub-derivation:

net_type SCALARED net_declaration_28 LBRACK constant_expression COLON constant_expression RBRACK identifier EQUALS expression list_of_net_decl_assignments_3 SEMICOLON // lookahead token appears
                  . 

** Conflict (shift/reduce/reduce) in state 3682.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 net_type VECTORED net_declaration_28 LBRACK constant_expression COLON constant_expression RBRACK delay3 identifier EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              net_declaration 
              net_type VECTORED net_declaration_28 LBRACK constant_expression COLON constant_expression RBRACK delay3 identifier EQUALS expression list_of_net_decl_assignments_3 SEMICOLON 
                                                                                                                                        primary 
                                                                                                                                        (?)

** In state 3682, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 3682, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 3682, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 3676.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 net_type VECTORED net_declaration_28 LBRACK constant_expression COLON constant_expression RBRACK identifier EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              net_declaration 
              net_type VECTORED net_declaration_28 LBRACK constant_expression COLON constant_expression RBRACK identifier EQUALS expression list_of_net_decl_assignments_3 SEMICOLON 
                                                                                                                                 primary 
                                                                                                                                 (?)

** In state 3676, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 3676, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 3676, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 3648.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 net_type VECTORED signing net_declaration_28 LBRACK constant_expression COLON constant_expression RBRACK delay3 identifier EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              net_declaration 
              net_type VECTORED signing net_declaration_28 LBRACK constant_expression COLON constant_expression RBRACK delay3 identifier EQUALS expression list_of_net_decl_assignments_3 SEMICOLON 
                                                                                                                                                primary 
                                                                                                                                                (?)

** In state 3648, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 3648, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 3648, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 3642.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 net_type VECTORED signing net_declaration_28 LBRACK constant_expression COLON constant_expression RBRACK identifier EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              net_declaration 
              net_type VECTORED signing net_declaration_28 LBRACK constant_expression COLON constant_expression RBRACK identifier EQUALS expression list_of_net_decl_assignments_3 SEMICOLON 
                                                                                                                                         primary 
                                                                                                                                         (?)

** In state 3642, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 3642, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 3642, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (reduce/reduce) in state 3634.
** Token involved: LBRACK
** This state is reached from start after reading:

source_text_3 net_type VECTORED signing

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              net_declaration 
              (?)

** In state 3634, looking ahead at LBRACK, reducing production
** net_declaration_18 ->
** is permitted because of the following sub-derivation:

net_type VECTORED signing net_declaration_18 LBRACK constant_expression COLON constant_expression RBRACK identifier list_of_net_identifiers_3 list_of_net_identifiers_4 SEMICOLON // lookahead token appears
                          . 

** In state 3634, looking ahead at LBRACK, reducing production
** net_declaration_28 ->
** is permitted because of the following sub-derivation:

net_type VECTORED signing net_declaration_28 LBRACK constant_expression COLON constant_expression RBRACK identifier EQUALS expression list_of_net_decl_assignments_3 SEMICOLON // lookahead token appears
                          . 

** Conflict (reduce/reduce) in state 3633.
** Token involved: LBRACK
** This state is reached from start after reading:

source_text_3 net_type VECTORED

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              net_declaration 
              (?)

** In state 3633, looking ahead at LBRACK, reducing production
** net_declaration_18 ->
** is permitted because of the following sub-derivation:

net_type VECTORED net_declaration_18 LBRACK constant_expression COLON constant_expression RBRACK identifier list_of_net_identifiers_3 list_of_net_identifiers_4 SEMICOLON // lookahead token appears
                  . 

** In state 3633, looking ahead at LBRACK, reducing production
** net_declaration_28 ->
** is permitted because of the following sub-derivation:

net_type VECTORED net_declaration_28 LBRACK constant_expression COLON constant_expression RBRACK identifier EQUALS expression list_of_net_decl_assignments_3 SEMICOLON // lookahead token appears
                  . 

** Conflict (reduce/reduce) in state 3632.
** Token involved: LBRACK
** This state is reached from start after reading:

source_text_3 net_type

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              net_declaration 
              (?)

** In state 3632, looking ahead at LBRACK, reducing production
** net_declaration_18 ->
** is permitted because of the following sub-derivation:

net_type net_declaration_18 LBRACK constant_expression COLON constant_expression RBRACK identifier list_of_net_identifiers_3 list_of_net_identifiers_4 SEMICOLON // lookahead token appears
         . 

** In state 3632, looking ahead at LBRACK, reducing production
** net_declaration_28 ->
** is permitted because of the following sub-derivation:

net_type net_declaration_28 LBRACK constant_expression COLON constant_expression RBRACK identifier EQUALS expression list_of_net_decl_assignments_3 SEMICOLON // lookahead token appears
         . 

** Conflict (shift/reduce/reduce) in state 3624.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 PROGRAM identifier SEMICOLON program_declaration_10 ASSIGN delay3 net_lvalue EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              program_declaration 
              PROGRAM identifier SEMICOLON program_declaration_10 ENDPROGRAM 
                                           program_declaration_10 non_port_program_item 
                                                                  continuous_assign 
                                                                  ASSIGN delay3 net_lvalue EQUALS expression list_of_net_assignments_3 SEMICOLON 
                                                                                                  primary 
                                                                                                  (?)

** In state 3624, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 3624, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 3624, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 3614.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 PROGRAM identifier SEMICOLON program_declaration_10 ASSIGN drive_strength delay3 net_lvalue EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              program_declaration 
              PROGRAM identifier SEMICOLON program_declaration_10 ENDPROGRAM 
                                           program_declaration_10 non_port_program_item 
                                                                  continuous_assign 
                                                                  ASSIGN drive_strength delay3 net_lvalue EQUALS expression list_of_net_assignments_3 SEMICOLON 
                                                                                                                 primary 
                                                                                                                 (?)

** In state 3614, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 3614, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 3614, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 3608.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 PROGRAM identifier SEMICOLON program_declaration_10 ASSIGN drive_strength net_lvalue EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              program_declaration 
              PROGRAM identifier SEMICOLON program_declaration_10 ENDPROGRAM 
                                           program_declaration_10 non_port_program_item 
                                                                  continuous_assign 
                                                                  ASSIGN drive_strength net_lvalue EQUALS expression list_of_net_assignments_3 SEMICOLON 
                                                                                                          primary 
                                                                                                          (?)

** In state 3608, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 3608, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 3608, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 3604.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 PROGRAM identifier SEMICOLON program_declaration_10 ASSIGN net_lvalue EQUALS expression list_of_net_assignments_3 COMMA net_lvalue EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              program_declaration 
              PROGRAM identifier SEMICOLON program_declaration_10 ENDPROGRAM 
                                           program_declaration_10 non_port_program_item 
                                                                  continuous_assign 
                                                                  ASSIGN net_lvalue EQUALS expression list_of_net_assignments_3 SEMICOLON 
                                                                                                      list_of_net_assignments_3 COMMA net_lvalue EQUALS expression 
                                                                                                                                                        primary 
                                                                                                                                                        (?)

** In state 3604, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 3604, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 3604, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 3598.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 PROGRAM identifier SEMICOLON program_declaration_10 ASSIGN net_lvalue EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              program_declaration 
              PROGRAM identifier SEMICOLON program_declaration_10 ENDPROGRAM 
                                           program_declaration_10 non_port_program_item 
                                                                  continuous_assign 
                                                                  ASSIGN net_lvalue EQUALS expression list_of_net_assignments_3 SEMICOLON 
                                                                                           primary 
                                                                                           (?)

** In state 3598, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 3598, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 3598, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (reduce/reduce) in state 3591.
** Tokens involved: SIMPLE_IDENTIFIER LCURLY BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 PROGRAM identifier SEMICOLON program_declaration_10 ASSIGN HASH delay_value

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              program_declaration 
              PROGRAM identifier SEMICOLON program_declaration_10 ENDPROGRAM 
                                           program_declaration_10 non_port_program_item 
                                                                  continuous_assign 
                                                                  (?)

** In state 3591, looking ahead at SIMPLE_IDENTIFIER, reducing production
** delay3 -> HASH delay_value
** is permitted because of the following sub-derivation:

ASSIGN delay3 net_lvalue EQUALS expression list_of_net_assignments_3 SEMICOLON // lookahead token appears because net_lvalue can begin with SIMPLE_IDENTIFIER
       HASH delay_value . 

** In state 3591, looking ahead at SIMPLE_IDENTIFIER, reducing production
** delay_control -> HASH delay_value
** is permitted because of the following sub-derivation:

ASSIGN delay_control variable_assignment list_of_variable_assignments_3 SEMICOLON // lookahead token appears because variable_assignment can begin with SIMPLE_IDENTIFIER
       HASH delay_value . 

** Conflict (reduce/reduce) in state 3590.
** Tokens involved: SIMPLE_IDENTIFIER LCURLY BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 PROGRAM identifier SEMICOLON program_declaration_10 ASSIGN HASH LPAREN mintypmax_expression RPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              program_declaration 
              PROGRAM identifier SEMICOLON program_declaration_10 ENDPROGRAM 
                                           program_declaration_10 non_port_program_item 
                                                                  continuous_assign 
                                                                  (?)

** In state 3590, looking ahead at SIMPLE_IDENTIFIER, reducing production
** delay3 -> HASH LPAREN mintypmax_expression RPAREN
** is permitted because of the following sub-derivation:

ASSIGN delay3 net_lvalue EQUALS expression list_of_net_assignments_3 SEMICOLON // lookahead token appears because net_lvalue can begin with SIMPLE_IDENTIFIER
       HASH LPAREN mintypmax_expression RPAREN . 

** In state 3590, looking ahead at SIMPLE_IDENTIFIER, reducing production
** delay_control -> HASH LPAREN mintypmax_expression RPAREN
** is permitted because of the following sub-derivation:

ASSIGN delay_control variable_assignment list_of_variable_assignments_3 SEMICOLON // lookahead token appears because variable_assignment can begin with SIMPLE_IDENTIFIER
       HASH LPAREN mintypmax_expression RPAREN . 

** Conflict (shift/reduce/reduce) in state 3588.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 PROGRAM identifier SEMICOLON program_declaration_10 ASSIGN HASH LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              program_declaration 
              PROGRAM identifier SEMICOLON program_declaration_10 ENDPROGRAM 
                                           program_declaration_10 non_port_program_item 
                                                                  continuous_assign 
                                                                  ASSIGN delay3 net_lvalue EQUALS expression list_of_net_assignments_3 SEMICOLON 
                                                                         HASH LPAREN mintypmax_expression RPAREN 
                                                                                     expression 
                                                                                     primary 
                                                                                     (?)

** In state 3588, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 3588, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 3588, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 3581.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 PROGRAM identifier SEMICOLON program_declaration_10 CLASS identifier EXTENDS identifier SEMICOLON class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              program_declaration 
              PROGRAM identifier SEMICOLON program_declaration_10 ENDPROGRAM 
                                           program_declaration_10 non_port_program_item 
                                                                  CLASS identifier EXTENDS identifier SEMICOLON class_declaration_11 ENDCLASS 
                                                                                                                class_declaration_11 class_item 
                                                                                                                                     (?)

** In state 3581, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 3581, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 3581, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 3581, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 3577.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 PROGRAM identifier SEMICOLON program_declaration_10 CLASS identifier EXTENDS identifier SEMICOLON timeunits_declaration class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              program_declaration 
              PROGRAM identifier SEMICOLON program_declaration_10 ENDPROGRAM 
                                           program_declaration_10 non_port_program_item 
                                                                  CLASS identifier EXTENDS identifier SEMICOLON timeunits_declaration class_declaration_11 ENDCLASS 
                                                                                                                                      class_declaration_11 class_item 
                                                                                                                                                           (?)

** In state 3577, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 3577, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 3577, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 3577, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 3569.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 PROGRAM identifier SEMICOLON program_declaration_10 CLASS identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN EXTENDS identifier SEMICOLON class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              program_declaration 
              PROGRAM identifier SEMICOLON program_declaration_10 ENDPROGRAM 
                                           program_declaration_10 non_port_program_item 
                                                                  CLASS identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN EXTENDS identifier SEMICOLON class_declaration_11 ENDCLASS 
                                                                                                                                                                               class_declaration_11 class_item 
                                                                                                                                                                                                    (?)

** In state 3569, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 3569, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 3569, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 3569, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 3565.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 PROGRAM identifier SEMICOLON program_declaration_10 CLASS identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN EXTENDS identifier SEMICOLON timeunits_declaration class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              program_declaration 
              PROGRAM identifier SEMICOLON program_declaration_10 ENDPROGRAM 
                                           program_declaration_10 non_port_program_item 
                                                                  CLASS identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN EXTENDS identifier SEMICOLON timeunits_declaration class_declaration_11 ENDCLASS 
                                                                                                                                                                                                     class_declaration_11 class_item 
                                                                                                                                                                                                                          (?)

** In state 3565, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 3565, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 3565, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 3565, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 3557.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 PROGRAM identifier SEMICOLON program_declaration_10 CLASS identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN SEMICOLON class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              program_declaration 
              PROGRAM identifier SEMICOLON program_declaration_10 ENDPROGRAM 
                                           program_declaration_10 non_port_program_item 
                                                                  CLASS identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN SEMICOLON class_declaration_11 ENDCLASS 
                                                                                                                                                            class_declaration_11 class_item 
                                                                                                                                                                                 (?)

** In state 3557, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 3557, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 3557, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 3557, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 3553.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 PROGRAM identifier SEMICOLON program_declaration_10 CLASS identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN SEMICOLON timeunits_declaration class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              program_declaration 
              PROGRAM identifier SEMICOLON program_declaration_10 ENDPROGRAM 
                                           program_declaration_10 non_port_program_item 
                                                                  CLASS identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN SEMICOLON timeunits_declaration class_declaration_11 ENDCLASS 
                                                                                                                                                                                  class_declaration_11 class_item 
                                                                                                                                                                                                       (?)

** In state 3553, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 3553, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 3553, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 3553, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 3542.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 PROGRAM identifier SEMICOLON program_declaration_10 CLASS identifier SEMICOLON class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              program_declaration 
              PROGRAM identifier SEMICOLON program_declaration_10 ENDPROGRAM 
                                           program_declaration_10 non_port_program_item 
                                                                  CLASS identifier SEMICOLON class_declaration_11 ENDCLASS 
                                                                                             class_declaration_11 class_item 
                                                                                                                  (?)

** In state 3542, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 3542, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 3542, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 3542, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 3538.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 PROGRAM identifier SEMICOLON program_declaration_10 CLASS identifier SEMICOLON timeunits_declaration class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              program_declaration 
              PROGRAM identifier SEMICOLON program_declaration_10 ENDPROGRAM 
                                           program_declaration_10 non_port_program_item 
                                                                  CLASS identifier SEMICOLON timeunits_declaration class_declaration_11 ENDCLASS 
                                                                                                                   class_declaration_11 class_item 
                                                                                                                                        (?)

** In state 3538, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 3538, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 3538, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 3538, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 3531.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 PROGRAM identifier SEMICOLON program_declaration_10 CLASS lifetime identifier EXTENDS identifier SEMICOLON class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              program_declaration 
              PROGRAM identifier SEMICOLON program_declaration_10 ENDPROGRAM 
                                           program_declaration_10 non_port_program_item 
                                                                  CLASS lifetime identifier EXTENDS identifier SEMICOLON class_declaration_11 ENDCLASS 
                                                                                                                         class_declaration_11 class_item 
                                                                                                                                              (?)

** In state 3531, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 3531, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 3531, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 3531, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 3527.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 PROGRAM identifier SEMICOLON program_declaration_10 CLASS lifetime identifier EXTENDS identifier SEMICOLON timeunits_declaration class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              program_declaration 
              PROGRAM identifier SEMICOLON program_declaration_10 ENDPROGRAM 
                                           program_declaration_10 non_port_program_item 
                                                                  CLASS lifetime identifier EXTENDS identifier SEMICOLON timeunits_declaration class_declaration_11 ENDCLASS 
                                                                                                                                               class_declaration_11 class_item 
                                                                                                                                                                    (?)

** In state 3527, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 3527, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 3527, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 3527, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 3519.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 PROGRAM identifier SEMICOLON program_declaration_10 CLASS lifetime identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN EXTENDS identifier SEMICOLON class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              program_declaration 
              PROGRAM identifier SEMICOLON program_declaration_10 ENDPROGRAM 
                                           program_declaration_10 non_port_program_item 
                                                                  CLASS lifetime identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN EXTENDS identifier SEMICOLON class_declaration_11 ENDCLASS 
                                                                                                                                                                                        class_declaration_11 class_item 
                                                                                                                                                                                                             (?)

** In state 3519, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 3519, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 3519, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 3519, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 3515.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 PROGRAM identifier SEMICOLON program_declaration_10 CLASS lifetime identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN EXTENDS identifier SEMICOLON timeunits_declaration class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              program_declaration 
              PROGRAM identifier SEMICOLON program_declaration_10 ENDPROGRAM 
                                           program_declaration_10 non_port_program_item 
                                                                  CLASS lifetime identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN EXTENDS identifier SEMICOLON timeunits_declaration class_declaration_11 ENDCLASS 
                                                                                                                                                                                                              class_declaration_11 class_item 
                                                                                                                                                                                                                                   (?)

** In state 3515, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 3515, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 3515, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 3515, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 3507.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 PROGRAM identifier SEMICOLON program_declaration_10 CLASS lifetime identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN SEMICOLON class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              program_declaration 
              PROGRAM identifier SEMICOLON program_declaration_10 ENDPROGRAM 
                                           program_declaration_10 non_port_program_item 
                                                                  CLASS lifetime identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN SEMICOLON class_declaration_11 ENDCLASS 
                                                                                                                                                                     class_declaration_11 class_item 
                                                                                                                                                                                          (?)

** In state 3507, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 3507, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 3507, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 3507, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 3503.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 PROGRAM identifier SEMICOLON program_declaration_10 CLASS lifetime identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN SEMICOLON timeunits_declaration class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              program_declaration 
              PROGRAM identifier SEMICOLON program_declaration_10 ENDPROGRAM 
                                           program_declaration_10 non_port_program_item 
                                                                  CLASS lifetime identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN SEMICOLON timeunits_declaration class_declaration_11 ENDCLASS 
                                                                                                                                                                                           class_declaration_11 class_item 
                                                                                                                                                                                                                (?)

** In state 3503, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 3503, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 3503, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 3503, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 3492.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 PROGRAM identifier SEMICOLON program_declaration_10 CLASS lifetime identifier SEMICOLON class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              program_declaration 
              PROGRAM identifier SEMICOLON program_declaration_10 ENDPROGRAM 
                                           program_declaration_10 non_port_program_item 
                                                                  CLASS lifetime identifier SEMICOLON class_declaration_11 ENDCLASS 
                                                                                                      class_declaration_11 class_item 
                                                                                                                           (?)

** In state 3492, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 3492, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 3492, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 3492, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 3488.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 PROGRAM identifier SEMICOLON program_declaration_10 CLASS lifetime identifier SEMICOLON timeunits_declaration class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              program_declaration 
              PROGRAM identifier SEMICOLON program_declaration_10 ENDPROGRAM 
                                           program_declaration_10 non_port_program_item 
                                                                  CLASS lifetime identifier SEMICOLON timeunits_declaration class_declaration_11 ENDCLASS 
                                                                                                                            class_declaration_11 class_item 
                                                                                                                                                 (?)

** In state 3488, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 3488, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 3488, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 3488, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 3471.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 CONSTRAINT identifier P_COLONCOLON identifier LCURLY extern_constraint_declaration_8

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              CONSTRAINT identifier P_COLONCOLON identifier LCURLY extern_constraint_declaration_8 RCURLY 
                                                                   extern_constraint_declaration_8 constraint_block 
                                                                                                   expression DIST LCURLY dist_item dist_list_3 RCURLY SEMICOLON 
                                                                                                   primary 
                                                                                                   (?)

** In state 3471, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 3471, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 3471, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce) in state 3375.
** Token involved: COMMA
** This state is reached from start after reading:

source_text_3 IMPORT TOKEN_DPI function_data_type identifier LPAREN data_type identifier dpi_dimension dpi_proto_formal_3_5

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              dpi_import_export 
              IMPORT TOKEN_DPI dpi_function_proto SEMICOLON 
                               (?)

** In state 3375, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

function_data_type identifier LPAREN data_type identifier dpi_dimension dpi_proto_formal_3_5 list_of_dpi_proto_formals_2_5 RPAREN 
                                                                        dpi_proto_formal_3_5 . COMMA identifier dpi_dimension 

** In state 3375, looking ahead at COMMA, reducing production
** list_of_dpi_proto_formals_2_5 ->
** is permitted because of the following sub-derivation:

function_data_type identifier LPAREN data_type identifier dpi_dimension dpi_proto_formal_3_5 list_of_dpi_proto_formals_2_5 RPAREN 
                                                                                             list_of_dpi_proto_formals_2_5 COMMA data_type // lookahead token appears
                                                                                             . 

** Conflict (shift/reduce/reduce) in state 3373.
** Tokens involved: RPAREN LBRACK COMMA
** The following explanations concentrate on token LBRACK.
** This state is reached from start after reading:

source_text_3 IMPORT TOKEN_DPI function_data_type identifier LPAREN data_type identifier

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              dpi_import_export 
              IMPORT TOKEN_DPI dpi_function_proto SEMICOLON 
                               function_data_type identifier LPAREN data_type identifier dpi_dimension dpi_proto_formal_3_5 list_of_dpi_proto_formals_2_5 RPAREN 
                                                                                         (?)

** In state 3373, looking ahead at LBRACK, shifting is permitted
** because of the following sub-derivation:

variable_dimension 
associative_dimension 
. LBRACK data_type RBRACK 

** In state 3373, looking ahead at LBRACK, reducing production
** dpi_dimension_4 ->
** is permitted because of the following sub-derivation:

dpi_dimension_4 
dpi_dimension_4 LBRACK RBRACK // lookahead token appears
. 

** In state 3373, looking ahead at LBRACK, reducing production
** variable_dimension_2 ->
** is permitted because of the following sub-derivation:

variable_dimension 
variable_dimension_2 
variable_dimension_2 unpacked_dimension // lookahead token appears because unpacked_dimension can begin with LBRACK
. 

** Conflict (reduce/reduce) in state 3366.
** Token involved: SEMICOLON
** This state is reached from start after reading:

source_text_3 IMPORT TOKEN_DPI function_data_type identifier LPAREN RPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              dpi_import_export 
              IMPORT TOKEN_DPI dpi_function_proto SEMICOLON // lookahead token appears
                               (?)

** In state 3366, looking ahead at SEMICOLON, reducing production
** dpi_function_proto -> function_data_type identifier LPAREN RPAREN
** is permitted because of the following sub-derivation:

function_data_type identifier LPAREN RPAREN . 

** In state 3366, looking ahead at SEMICOLON, reducing production
** dpi_function_proto -> function_data_type identifier LPAREN RPAREN
** is permitted because of the following sub-derivation:

function_data_type identifier LPAREN RPAREN . 

** Conflict (shift/reduce) in state 3360.
** Token involved: COMMA
** This state is reached from start after reading:

source_text_3 IMPORT TOKEN_DPI signing function_data_type identifier LPAREN data_type identifier dpi_dimension dpi_proto_formal_3_5

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              dpi_import_export 
              IMPORT TOKEN_DPI dpi_function_proto SEMICOLON 
                               (?)

** In state 3360, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

signing function_data_type identifier LPAREN data_type identifier dpi_dimension dpi_proto_formal_3_5 list_of_dpi_proto_formals_2_5 RPAREN 
                                                                                dpi_proto_formal_3_5 . COMMA identifier dpi_dimension 

** In state 3360, looking ahead at COMMA, reducing production
** list_of_dpi_proto_formals_2_5 ->
** is permitted because of the following sub-derivation:

signing function_data_type identifier LPAREN data_type identifier dpi_dimension dpi_proto_formal_3_5 list_of_dpi_proto_formals_2_5 RPAREN 
                                                                                                     list_of_dpi_proto_formals_2_5 COMMA data_type // lookahead token appears
                                                                                                     . 

** Conflict (shift/reduce/reduce) in state 3358.
** Tokens involved: RPAREN LBRACK COMMA
** The following explanations concentrate on token LBRACK.
** This state is reached from start after reading:

source_text_3 IMPORT TOKEN_DPI signing function_data_type identifier LPAREN data_type identifier

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              dpi_import_export 
              IMPORT TOKEN_DPI dpi_function_proto SEMICOLON 
                               signing function_data_type identifier LPAREN data_type identifier dpi_dimension dpi_proto_formal_3_5 list_of_dpi_proto_formals_2_5 RPAREN 
                                                                                                 (?)

** In state 3358, looking ahead at LBRACK, shifting is permitted
** because of the following sub-derivation:

variable_dimension 
associative_dimension 
. LBRACK data_type RBRACK 

** In state 3358, looking ahead at LBRACK, reducing production
** dpi_dimension_4 ->
** is permitted because of the following sub-derivation:

dpi_dimension_4 
dpi_dimension_4 LBRACK RBRACK // lookahead token appears
. 

** In state 3358, looking ahead at LBRACK, reducing production
** variable_dimension_2 ->
** is permitted because of the following sub-derivation:

variable_dimension 
variable_dimension_2 
variable_dimension_2 unpacked_dimension // lookahead token appears because unpacked_dimension can begin with LBRACK
. 

** Conflict (shift/reduce/reduce) in state 3356.
** Tokens involved: RPAREN LBRACK COMMA
** The following explanations concentrate on token LBRACK.
** This state is reached from start after reading:

source_text_3 IMPORT TOKEN_DPI function_data_type identifier LPAREN data_type identifier dpi_dimension dpi_proto_formal_3_5 COMMA identifier

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              dpi_import_export 
              IMPORT TOKEN_DPI dpi_function_proto SEMICOLON 
                               function_data_type identifier LPAREN data_type identifier dpi_dimension dpi_proto_formal_3_5 list_of_dpi_proto_formals_2_5 RPAREN 
                                                                                                       dpi_proto_formal_3_5 COMMA identifier dpi_dimension 
                                                                                                                                             (?)

** In state 3356, looking ahead at LBRACK, shifting is permitted
** because of the following sub-derivation:

variable_dimension 
associative_dimension 
. LBRACK data_type RBRACK 

** In state 3356, looking ahead at LBRACK, reducing production
** dpi_dimension_4 ->
** is permitted because of the following sub-derivation:

dpi_dimension_4 
dpi_dimension_4 LBRACK RBRACK // lookahead token appears
. 

** In state 3356, looking ahead at LBRACK, reducing production
** variable_dimension_2 ->
** is permitted because of the following sub-derivation:

variable_dimension 
variable_dimension_2 
variable_dimension_2 unpacked_dimension // lookahead token appears because unpacked_dimension can begin with LBRACK
. 

** Conflict (shift/reduce) in state 3354.
** Token involved: COMMA
** This state is reached from start after reading:

source_text_3 IMPORT TOKEN_DPI function_data_type identifier LPAREN data_type list_of_dpi_proto_formals_2_5 COMMA data_type identifier dpi_dimension dpi_proto_formal_3_5

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              dpi_import_export 
              IMPORT TOKEN_DPI dpi_function_proto SEMICOLON 
                               function_data_type identifier LPAREN data_type list_of_dpi_proto_formals_2_5 RPAREN 
                                                                              (?)

** In state 3354, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

list_of_dpi_proto_formals_2_5 COMMA data_type identifier dpi_dimension dpi_proto_formal_3_5 
                                                                       dpi_proto_formal_3_5 . COMMA identifier dpi_dimension 

** In state 3354, looking ahead at COMMA, reducing production
** list_of_dpi_proto_formals_2_5 -> list_of_dpi_proto_formals_2_5 COMMA data_type identifier dpi_dimension dpi_proto_formal_3_5
** is permitted because of the following sub-derivation:

list_of_dpi_proto_formals_2_5 COMMA data_type // lookahead token appears
list_of_dpi_proto_formals_2_5 COMMA data_type identifier dpi_dimension dpi_proto_formal_3_5 . 

** Conflict (shift/reduce/reduce) in state 3348.
** Tokens involved: RPAREN LBRACK COMMA
** The following explanations concentrate on token LBRACK.
** This state is reached from start after reading:

source_text_3 IMPORT TOKEN_DPI function_data_type identifier LPAREN data_type list_of_dpi_proto_formals_2_5 COMMA data_type identifier

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              dpi_import_export 
              IMPORT TOKEN_DPI dpi_function_proto SEMICOLON 
                               function_data_type identifier LPAREN data_type list_of_dpi_proto_formals_2_5 RPAREN 
                                                                              list_of_dpi_proto_formals_2_5 COMMA data_type identifier dpi_dimension dpi_proto_formal_3_5 
                                                                                                                                       (?)

** In state 3348, looking ahead at LBRACK, shifting is permitted
** because of the following sub-derivation:

variable_dimension 
associative_dimension 
. LBRACK data_type RBRACK 

** In state 3348, looking ahead at LBRACK, reducing production
** dpi_dimension_4 ->
** is permitted because of the following sub-derivation:

dpi_dimension_4 
dpi_dimension_4 LBRACK RBRACK // lookahead token appears
. 

** In state 3348, looking ahead at LBRACK, reducing production
** variable_dimension_2 ->
** is permitted because of the following sub-derivation:

variable_dimension 
variable_dimension_2 
variable_dimension_2 unpacked_dimension // lookahead token appears because unpacked_dimension can begin with LBRACK
. 

** Conflict (reduce/reduce) in state 3339.
** Token involved: SEMICOLON
** This state is reached from start after reading:

source_text_3 IMPORT TOKEN_DPI signing function_data_type identifier LPAREN RPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              dpi_import_export 
              IMPORT TOKEN_DPI dpi_function_proto SEMICOLON // lookahead token appears
                               (?)

** In state 3339, looking ahead at SEMICOLON, reducing production
** dpi_function_proto -> signing function_data_type identifier LPAREN RPAREN
** is permitted because of the following sub-derivation:

signing function_data_type identifier LPAREN RPAREN . 

** In state 3339, looking ahead at SEMICOLON, reducing production
** dpi_function_proto -> signing function_data_type identifier LPAREN RPAREN
** is permitted because of the following sub-derivation:

signing function_data_type identifier LPAREN RPAREN . 

** Conflict (reduce/reduce) in state 3310.
** Tokens involved: P_EQGT P_ASTGT PLUS MINUS LBRACK DOLLAR COMMA
** The following explanations concentrate on token LBRACK.
** This state is reached from start after reading:

source_text_3 PROGRAM identifier SEMICOLON program_declaration_10 SPECPARAM PATHPULSE identifier

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              program_declaration 
              PROGRAM identifier SEMICOLON program_declaration_10 ENDPROGRAM 
                                           program_declaration_10 non_port_program_item 
                                                                  SPECPARAM specparam_assignment list_of_specparam_assignments_3 SEMICOLON 
                                                                            pulse_control_specparam 
                                                                            PATHPULSE input_identifier LBRACK constant_range_expression RBRACK DOLLAR output_identifier EQUALS LPAREN constant_mintypmax_expression RPAREN SEMICOLON // lookahead token appears
                                                                                      (?)

** In state 3310, looking ahead at LBRACK, reducing production
** input_identifier -> identifier
** is permitted because of the following sub-derivation:

identifier . 

** In state 3310, looking ahead at LBRACK, reducing production
** input_identifier -> identifier
** is permitted because of the following sub-derivation:

identifier . 

** Conflict (reduce/reduce) in state 3286.
** Tokens involved: SEMICOLON RPAREN PLUS MINUS LBRACK EQUALS COMMA COLON
** The following explanations concentrate on token SEMICOLON.
** This state is reached from start after reading:

source_text_3 module_keyword identifier SEMICOLON module_declaration_10 SPECIFY specify_block_3 SHOWCANCELLED identifier

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_declaration 
              module_keyword identifier SEMICOLON module_declaration_10 ENDMODULE 
                                                  module_declaration_10 non_port_module_item 
                                                                        SPECIFY specify_block_3 ENDSPECIFY 
                                                                                specify_block_3 specify_item 
                                                                                                showcancelled_declaration 
                                                                                                SHOWCANCELLED output_identifier list_of_path_outputs_3 SEMICOLON // lookahead token appears because list_of_path_outputs_3 can vanish
                                                                                                              (?)

** In state 3286, looking ahead at SEMICOLON, reducing production
** output_identifier -> identifier
** is permitted because of the following sub-derivation:

identifier . 

** In state 3286, looking ahead at SEMICOLON, reducing production
** output_identifier -> identifier
** is permitted because of the following sub-derivation:

identifier . 

** Conflict (shift/reduce/reduce) in state 3243.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 PROGRAM identifier SEMICOLON program_declaration_10 VIRTUAL CLASS identifier EXTENDS identifier SEMICOLON class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              program_declaration 
              PROGRAM identifier SEMICOLON program_declaration_10 ENDPROGRAM 
                                           program_declaration_10 non_port_program_item 
                                                                  VIRTUAL CLASS identifier EXTENDS identifier SEMICOLON class_declaration_11 ENDCLASS 
                                                                                                                        class_declaration_11 class_item 
                                                                                                                                             (?)

** In state 3243, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 3243, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 3243, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 3243, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 3239.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 PROGRAM identifier SEMICOLON program_declaration_10 VIRTUAL CLASS identifier EXTENDS identifier SEMICOLON timeunits_declaration class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              program_declaration 
              PROGRAM identifier SEMICOLON program_declaration_10 ENDPROGRAM 
                                           program_declaration_10 non_port_program_item 
                                                                  VIRTUAL CLASS identifier EXTENDS identifier SEMICOLON timeunits_declaration class_declaration_11 ENDCLASS 
                                                                                                                                              class_declaration_11 class_item 
                                                                                                                                                                   (?)

** In state 3239, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 3239, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 3239, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 3239, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 3231.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 PROGRAM identifier SEMICOLON program_declaration_10 VIRTUAL CLASS identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN EXTENDS identifier SEMICOLON class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              program_declaration 
              PROGRAM identifier SEMICOLON program_declaration_10 ENDPROGRAM 
                                           program_declaration_10 non_port_program_item 
                                                                  VIRTUAL CLASS identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN EXTENDS identifier SEMICOLON class_declaration_11 ENDCLASS 
                                                                                                                                                                                       class_declaration_11 class_item 
                                                                                                                                                                                                            (?)

** In state 3231, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 3231, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 3231, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 3231, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 3227.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 PROGRAM identifier SEMICOLON program_declaration_10 VIRTUAL CLASS identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN EXTENDS identifier SEMICOLON timeunits_declaration class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              program_declaration 
              PROGRAM identifier SEMICOLON program_declaration_10 ENDPROGRAM 
                                           program_declaration_10 non_port_program_item 
                                                                  VIRTUAL CLASS identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN EXTENDS identifier SEMICOLON timeunits_declaration class_declaration_11 ENDCLASS 
                                                                                                                                                                                                             class_declaration_11 class_item 
                                                                                                                                                                                                                                  (?)

** In state 3227, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 3227, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 3227, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 3227, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 3219.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 PROGRAM identifier SEMICOLON program_declaration_10 VIRTUAL CLASS identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN SEMICOLON class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              program_declaration 
              PROGRAM identifier SEMICOLON program_declaration_10 ENDPROGRAM 
                                           program_declaration_10 non_port_program_item 
                                                                  VIRTUAL CLASS identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN SEMICOLON class_declaration_11 ENDCLASS 
                                                                                                                                                                    class_declaration_11 class_item 
                                                                                                                                                                                         (?)

** In state 3219, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 3219, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 3219, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 3219, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 3215.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 PROGRAM identifier SEMICOLON program_declaration_10 VIRTUAL CLASS identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN SEMICOLON timeunits_declaration class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              program_declaration 
              PROGRAM identifier SEMICOLON program_declaration_10 ENDPROGRAM 
                                           program_declaration_10 non_port_program_item 
                                                                  VIRTUAL CLASS identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN SEMICOLON timeunits_declaration class_declaration_11 ENDCLASS 
                                                                                                                                                                                          class_declaration_11 class_item 
                                                                                                                                                                                                               (?)

** In state 3215, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 3215, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 3215, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 3215, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 3204.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 PROGRAM identifier SEMICOLON program_declaration_10 VIRTUAL CLASS identifier SEMICOLON class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              program_declaration 
              PROGRAM identifier SEMICOLON program_declaration_10 ENDPROGRAM 
                                           program_declaration_10 non_port_program_item 
                                                                  VIRTUAL CLASS identifier SEMICOLON class_declaration_11 ENDCLASS 
                                                                                                     class_declaration_11 class_item 
                                                                                                                          (?)

** In state 3204, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 3204, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 3204, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 3204, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 3200.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 PROGRAM identifier SEMICOLON program_declaration_10 VIRTUAL CLASS identifier SEMICOLON timeunits_declaration class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              program_declaration 
              PROGRAM identifier SEMICOLON program_declaration_10 ENDPROGRAM 
                                           program_declaration_10 non_port_program_item 
                                                                  VIRTUAL CLASS identifier SEMICOLON timeunits_declaration class_declaration_11 ENDCLASS 
                                                                                                                           class_declaration_11 class_item 
                                                                                                                                                (?)

** In state 3200, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 3200, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 3200, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 3200, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 3193.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 PROGRAM identifier SEMICOLON program_declaration_10 VIRTUAL CLASS lifetime identifier EXTENDS identifier SEMICOLON class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              program_declaration 
              PROGRAM identifier SEMICOLON program_declaration_10 ENDPROGRAM 
                                           program_declaration_10 non_port_program_item 
                                                                  VIRTUAL CLASS lifetime identifier EXTENDS identifier SEMICOLON class_declaration_11 ENDCLASS 
                                                                                                                                 class_declaration_11 class_item 
                                                                                                                                                      (?)

** In state 3193, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 3193, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 3193, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 3193, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 3189.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 PROGRAM identifier SEMICOLON program_declaration_10 VIRTUAL CLASS lifetime identifier EXTENDS identifier SEMICOLON timeunits_declaration class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              program_declaration 
              PROGRAM identifier SEMICOLON program_declaration_10 ENDPROGRAM 
                                           program_declaration_10 non_port_program_item 
                                                                  VIRTUAL CLASS lifetime identifier EXTENDS identifier SEMICOLON timeunits_declaration class_declaration_11 ENDCLASS 
                                                                                                                                                       class_declaration_11 class_item 
                                                                                                                                                                            (?)

** In state 3189, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 3189, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 3189, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 3189, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 3181.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 PROGRAM identifier SEMICOLON program_declaration_10 VIRTUAL CLASS lifetime identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN EXTENDS identifier SEMICOLON class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              program_declaration 
              PROGRAM identifier SEMICOLON program_declaration_10 ENDPROGRAM 
                                           program_declaration_10 non_port_program_item 
                                                                  VIRTUAL CLASS lifetime identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN EXTENDS identifier SEMICOLON class_declaration_11 ENDCLASS 
                                                                                                                                                                                                class_declaration_11 class_item 
                                                                                                                                                                                                                     (?)

** In state 3181, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 3181, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 3181, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 3181, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 3177.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 PROGRAM identifier SEMICOLON program_declaration_10 VIRTUAL CLASS lifetime identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN EXTENDS identifier SEMICOLON timeunits_declaration class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              program_declaration 
              PROGRAM identifier SEMICOLON program_declaration_10 ENDPROGRAM 
                                           program_declaration_10 non_port_program_item 
                                                                  VIRTUAL CLASS lifetime identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN EXTENDS identifier SEMICOLON timeunits_declaration class_declaration_11 ENDCLASS 
                                                                                                                                                                                                                      class_declaration_11 class_item 
                                                                                                                                                                                                                                           (?)

** In state 3177, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 3177, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 3177, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 3177, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 3169.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 PROGRAM identifier SEMICOLON program_declaration_10 VIRTUAL CLASS lifetime identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN SEMICOLON class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              program_declaration 
              PROGRAM identifier SEMICOLON program_declaration_10 ENDPROGRAM 
                                           program_declaration_10 non_port_program_item 
                                                                  VIRTUAL CLASS lifetime identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN SEMICOLON class_declaration_11 ENDCLASS 
                                                                                                                                                                             class_declaration_11 class_item 
                                                                                                                                                                                                  (?)

** In state 3169, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 3169, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 3169, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 3169, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 3165.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 PROGRAM identifier SEMICOLON program_declaration_10 VIRTUAL CLASS lifetime identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN SEMICOLON timeunits_declaration class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              program_declaration 
              PROGRAM identifier SEMICOLON program_declaration_10 ENDPROGRAM 
                                           program_declaration_10 non_port_program_item 
                                                                  VIRTUAL CLASS lifetime identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN SEMICOLON timeunits_declaration class_declaration_11 ENDCLASS 
                                                                                                                                                                                                   class_declaration_11 class_item 
                                                                                                                                                                                                                        (?)

** In state 3165, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 3165, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 3165, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 3165, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 3154.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 PROGRAM identifier SEMICOLON program_declaration_10 VIRTUAL CLASS lifetime identifier SEMICOLON class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              program_declaration 
              PROGRAM identifier SEMICOLON program_declaration_10 ENDPROGRAM 
                                           program_declaration_10 non_port_program_item 
                                                                  VIRTUAL CLASS lifetime identifier SEMICOLON class_declaration_11 ENDCLASS 
                                                                                                              class_declaration_11 class_item 
                                                                                                                                   (?)

** In state 3154, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 3154, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 3154, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 3154, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 3150.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 PROGRAM identifier SEMICOLON program_declaration_10 VIRTUAL CLASS lifetime identifier SEMICOLON timeunits_declaration class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              program_declaration 
              PROGRAM identifier SEMICOLON program_declaration_10 ENDPROGRAM 
                                           program_declaration_10 non_port_program_item 
                                                                  VIRTUAL CLASS lifetime identifier SEMICOLON timeunits_declaration class_declaration_11 ENDCLASS 
                                                                                                                                    class_declaration_11 class_item 
                                                                                                                                                         (?)

** In state 3150, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 3150, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 3150, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 3150, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce) in state 3128.
** Token involved: COMMA
** This state is reached from start after reading:

source_text_3 PROPERTY identifier LPAREN identifier property_formal_list_4 COMMA identifier EQUALS event_expression

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              concurrent_assertion_item 
              concurrent_assertion_item_declaration 
              PROPERTY identifier LPAREN identifier property_formal_list_4 RPAREN SEMICOLON property_declaration_6 property_spec SEMICOLON ENDPROPERTY 
                                                    (?)

** In state 3128, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

property_formal_list_4 COMMA identifier EQUALS event_expression 
                                               event_expression . COMMA event_expression 

** In state 3128, looking ahead at COMMA, reducing production
** property_formal_list_4 -> property_formal_list_4 COMMA identifier EQUALS event_expression
** is permitted because of the following sub-derivation:

property_formal_list_4 COMMA identifier // lookahead token appears
property_formal_list_4 COMMA identifier EQUALS event_expression . 

** Conflict (shift/reduce/reduce) in state 3127.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 PROPERTY identifier LPAREN identifier property_formal_list_4 COMMA identifier EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              concurrent_assertion_item 
              concurrent_assertion_item_declaration 
              PROPERTY identifier LPAREN identifier property_formal_list_4 RPAREN SEMICOLON property_declaration_6 property_spec SEMICOLON ENDPROPERTY 
                                                    property_formal_list_4 COMMA identifier EQUALS event_expression 
                                                                                                   expression 
                                                                                                   primary 
                                                                                                   (?)

** In state 3127, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 3127, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 3127, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce) in state 3115.
** Token involved: COMMA
** This state is reached from start after reading:

source_text_3 PROPERTY identifier LPAREN identifier EQUALS event_expression

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              concurrent_assertion_item 
              concurrent_assertion_item_declaration 
              (?)

** In state 3115, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

PROPERTY identifier LPAREN identifier EQUALS event_expression property_formal_list_4 RPAREN SEMICOLON property_declaration_6 property_spec SEMICOLON ENDPROPERTY 
                                             event_expression . COMMA event_expression 

** In state 3115, looking ahead at COMMA, reducing production
** property_formal_list_4 ->
** is permitted because of the following sub-derivation:

PROPERTY identifier LPAREN identifier EQUALS event_expression property_formal_list_4 RPAREN SEMICOLON property_declaration_6 property_spec SEMICOLON ENDPROPERTY 
                                                              property_formal_list_4 COMMA identifier // lookahead token appears
                                                              . 

** Conflict (shift/reduce/reduce) in state 3114.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 PROPERTY identifier LPAREN identifier EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              concurrent_assertion_item 
              concurrent_assertion_item_declaration 
              PROPERTY identifier LPAREN identifier EQUALS event_expression property_formal_list_4 RPAREN SEMICOLON property_declaration_6 property_spec SEMICOLON ENDPROPERTY 
                                                           expression 
                                                           primary 
                                                           (?)

** In state 3114, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 3114, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 3114, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce) in state 3108.
** Token involved: LBRACK
** This state is reached from start after reading:

source_text_3 PROPERTY identifier SEMICOLON property_declaration_6 data_type identifier

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              concurrent_assertion_item 
              concurrent_assertion_item_declaration 
              PROPERTY identifier SEMICOLON property_declaration_6 property_spec SEMICOLON ENDPROPERTY 
                                            property_declaration_6 data_type identifier variable_dimension list_of_variable_identifiers_4 SEMICOLON 
                                                                                        (?)

** In state 3108, looking ahead at LBRACK, shifting is permitted
** because of the following sub-derivation:

associative_dimension 
. LBRACK data_type RBRACK 

** In state 3108, looking ahead at LBRACK, reducing production
** variable_dimension_2 ->
** is permitted because of the following sub-derivation:

variable_dimension_2 
variable_dimension_2 unpacked_dimension // lookahead token appears because unpacked_dimension can begin with LBRACK
. 

** Conflict (shift/reduce/reduce) in state 3092.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 SEQUENCE identifier LPAREN identifier sequence_formal_list_4 RPAREN SEMICOLON sequence_declaration_6

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              concurrent_assertion_item 
              concurrent_assertion_item_declaration 
              SEQUENCE identifier LPAREN identifier sequence_formal_list_4 RPAREN SEMICOLON sequence_declaration_6 sequence_spec SEMICOLON ENDSEQUENCE 
                                                                                                                   sequence_expr 
                                                                                                                   expression sequence_expr_12 
                                                                                                                   primary 
                                                                                                                   (?)

** In state 3092, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 3092, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 3092, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce) in state 3088.
** Token involved: COMMA
** This state is reached from start after reading:

source_text_3 SEQUENCE identifier LPAREN identifier sequence_formal_list_4 COMMA identifier EQUALS event_expression

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              concurrent_assertion_item 
              concurrent_assertion_item_declaration 
              SEQUENCE identifier LPAREN identifier sequence_formal_list_4 RPAREN SEMICOLON sequence_declaration_6 sequence_spec SEMICOLON ENDSEQUENCE 
                                                    (?)

** In state 3088, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

sequence_formal_list_4 COMMA identifier EQUALS event_expression 
                                               event_expression . COMMA event_expression 

** In state 3088, looking ahead at COMMA, reducing production
** sequence_formal_list_4 -> sequence_formal_list_4 COMMA identifier EQUALS event_expression
** is permitted because of the following sub-derivation:

sequence_formal_list_4 COMMA identifier // lookahead token appears
sequence_formal_list_4 COMMA identifier EQUALS event_expression . 

** Conflict (shift/reduce/reduce) in state 3087.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 SEQUENCE identifier LPAREN identifier sequence_formal_list_4 COMMA identifier EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              concurrent_assertion_item 
              concurrent_assertion_item_declaration 
              SEQUENCE identifier LPAREN identifier sequence_formal_list_4 RPAREN SEMICOLON sequence_declaration_6 sequence_spec SEMICOLON ENDSEQUENCE 
                                                    sequence_formal_list_4 COMMA identifier EQUALS event_expression 
                                                                                                   expression 
                                                                                                   primary 
                                                                                                   (?)

** In state 3087, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 3087, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 3087, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 3079.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 SEQUENCE identifier LPAREN identifier EQUALS event_expression sequence_formal_list_4 RPAREN SEMICOLON sequence_declaration_6

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              concurrent_assertion_item 
              concurrent_assertion_item_declaration 
              SEQUENCE identifier LPAREN identifier EQUALS event_expression sequence_formal_list_4 RPAREN SEMICOLON sequence_declaration_6 sequence_spec SEMICOLON ENDSEQUENCE 
                                                                                                                                           sequence_expr 
                                                                                                                                           expression sequence_expr_12 
                                                                                                                                           primary 
                                                                                                                                           (?)

** In state 3079, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 3079, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 3079, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce) in state 3075.
** Token involved: COMMA
** This state is reached from start after reading:

source_text_3 SEQUENCE identifier LPAREN identifier EQUALS event_expression

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              concurrent_assertion_item 
              concurrent_assertion_item_declaration 
              (?)

** In state 3075, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

SEQUENCE identifier LPAREN identifier EQUALS event_expression sequence_formal_list_4 RPAREN SEMICOLON sequence_declaration_6 sequence_spec SEMICOLON ENDSEQUENCE 
                                             event_expression . COMMA event_expression 

** In state 3075, looking ahead at COMMA, reducing production
** sequence_formal_list_4 ->
** is permitted because of the following sub-derivation:

SEQUENCE identifier LPAREN identifier EQUALS event_expression sequence_formal_list_4 RPAREN SEMICOLON sequence_declaration_6 sequence_spec SEMICOLON ENDSEQUENCE 
                                                              sequence_formal_list_4 COMMA identifier // lookahead token appears
                                                              . 

** Conflict (shift/reduce/reduce) in state 3074.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 SEQUENCE identifier LPAREN identifier EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              concurrent_assertion_item 
              concurrent_assertion_item_declaration 
              SEQUENCE identifier LPAREN identifier EQUALS event_expression sequence_formal_list_4 RPAREN SEMICOLON sequence_declaration_6 sequence_spec SEMICOLON ENDSEQUENCE 
                                                           expression 
                                                           primary 
                                                           (?)

** In state 3074, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 3074, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 3074, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce) in state 3070.
** Token involved: P_POUNDPOUND
** This state is reached from start after reading:

source_text_3 SEQUENCE identifier SEMICOLON sequence_declaration_6 clocking_event sequence_expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              concurrent_assertion_item 
              concurrent_assertion_item_declaration 
              SEQUENCE identifier SEMICOLON sequence_declaration_6 sequence_spec SEMICOLON ENDSEQUENCE 
                                                                   (?)

** In state 3070, looking ahead at P_POUNDPOUND, shifting is permitted
** because of the following sub-derivation:

clocking_event sequence_expr multi_clock_sequence_3 
               sequence_expr cycle_delay_range sequence_expr sequence_expr_9 
                             . P_POUNDPOUND constant_expression 

** In state 3070, looking ahead at P_POUNDPOUND, reducing production
** multi_clock_sequence_3 ->
** is permitted because of the following sub-derivation:

clocking_event sequence_expr multi_clock_sequence_3 
                             multi_clock_sequence_3 P_POUNDPOUND clocking_event sequence_expr // lookahead token appears
                             . 

** Conflict (shift/reduce/reduce) in state 3069.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 SEQUENCE identifier SEMICOLON sequence_declaration_6 clocking_event

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              concurrent_assertion_item 
              concurrent_assertion_item_declaration 
              SEQUENCE identifier SEMICOLON sequence_declaration_6 sequence_spec SEMICOLON ENDSEQUENCE 
                                                                   clocking_event sequence_expr multi_clock_sequence_3 
                                                                                  expression sequence_expr_12 
                                                                                  primary 
                                                                                  (?)

** In state 3069, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 3069, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 3069, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce) in state 3065.
** Token involved: LBRACK
** This state is reached from start after reading:

source_text_3 SEQUENCE identifier SEMICOLON sequence_declaration_6 data_type identifier

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              concurrent_assertion_item 
              concurrent_assertion_item_declaration 
              SEQUENCE identifier SEMICOLON sequence_declaration_6 sequence_spec SEMICOLON ENDSEQUENCE 
                                            sequence_declaration_6 data_type identifier variable_dimension list_of_variable_identifiers_4 SEMICOLON 
                                                                                        (?)

** In state 3065, looking ahead at LBRACK, shifting is permitted
** because of the following sub-derivation:

associative_dimension 
. LBRACK data_type RBRACK 

** In state 3065, looking ahead at LBRACK, reducing production
** variable_dimension_2 ->
** is permitted because of the following sub-derivation:

variable_dimension_2 
variable_dimension_2 unpacked_dimension // lookahead token appears because unpacked_dimension can begin with LBRACK
. 

** Conflict (reduce/reduce) in state 3063.
** Tokens involved: WITHIN SEMICOLON P_POUNDPOUND OR LBRACK_STAR INTERSECT AND
** The following explanations concentrate on token WITHIN.
** This state is reached from start after reading:

source_text_3 SEQUENCE identifier SEMICOLON sequence_declaration_6 identifier

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              concurrent_assertion_item 
              concurrent_assertion_item_declaration 
              SEQUENCE identifier SEMICOLON sequence_declaration_6 sequence_spec SEMICOLON ENDSEQUENCE 
                                                                   sequence_expr 
                                                                   sequence_expr WITHIN sequence_expr // lookahead token appears
                                                                   (?)

** In state 3063, looking ahead at WITHIN, reducing production
** primary -> identifier
** is permitted because of the following sub-derivation:

expression sequence_expr_12 // lookahead token is inherited because sequence_expr_12 can vanish
primary // lookahead token is inherited
identifier . 

** In state 3063, looking ahead at WITHIN, reducing production
** sequence_expr -> identifier
** is permitted because of the following sub-derivation:

identifier . 

** Conflict (shift/reduce/reduce) in state 3056.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 SEQUENCE identifier SEMICOLON sequence_declaration_6

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              concurrent_assertion_item 
              concurrent_assertion_item_declaration 
              SEQUENCE identifier SEMICOLON sequence_declaration_6 sequence_spec SEMICOLON ENDSEQUENCE 
                                                                   sequence_expr 
                                                                   expression sequence_expr_12 
                                                                   primary 
                                                                   (?)

** In state 3056, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 3056, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 3056, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 3050.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 STATIC CONSTRAINT identifier P_COLONCOLON identifier LCURLY extern_constraint_declaration_8

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              STATIC CONSTRAINT identifier P_COLONCOLON identifier LCURLY extern_constraint_declaration_8 RCURLY 
                                                                          extern_constraint_declaration_8 constraint_block 
                                                                                                          expression DIST LCURLY dist_item dist_list_3 RCURLY SEMICOLON 
                                                                                                          primary 
                                                                                                          (?)

** In state 3050, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 3050, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 3050, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 2913.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 TRIREG delay3 identifier EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              net_declaration 
              TRIREG delay3 identifier EQUALS expression list_of_net_decl_assignments_3 SEMICOLON 
                                              primary 
                                              (?)

** In state 2913, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 2913, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 2913, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 2907.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 TRIREG drive_strength delay3 identifier EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              net_declaration 
              TRIREG drive_strength delay3 identifier EQUALS expression list_of_net_decl_assignments_3 SEMICOLON 
                                                             primary 
                                                             (?)

** In state 2907, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 2907, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 2907, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 2901.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 TRIREG drive_strength identifier EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              net_declaration 
              TRIREG drive_strength identifier EQUALS expression list_of_net_decl_assignments_3 SEMICOLON 
                                                      primary 
                                                      (?)

** In state 2901, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 2901, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 2901, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 2896.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 TRIREG drive_strength net_declaration_62 LBRACK constant_expression COLON constant_expression RBRACK delay3 identifier EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              net_declaration 
              TRIREG drive_strength net_declaration_62 LBRACK constant_expression COLON constant_expression RBRACK delay3 identifier EQUALS expression list_of_net_decl_assignments_3 SEMICOLON 
                                                                                                                                            primary 
                                                                                                                                            (?)

** In state 2896, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 2896, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 2896, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 2890.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 TRIREG drive_strength net_declaration_62 LBRACK constant_expression COLON constant_expression RBRACK identifier EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              net_declaration 
              TRIREG drive_strength net_declaration_62 LBRACK constant_expression COLON constant_expression RBRACK identifier EQUALS expression list_of_net_decl_assignments_3 SEMICOLON 
                                                                                                                                     primary 
                                                                                                                                     (?)

** In state 2890, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 2890, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 2890, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 2879.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 TRIREG drive_strength signing delay3 identifier EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              net_declaration 
              TRIREG drive_strength signing delay3 identifier EQUALS expression list_of_net_decl_assignments_3 SEMICOLON 
                                                                     primary 
                                                                     (?)

** In state 2879, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 2879, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 2879, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 2873.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 TRIREG drive_strength signing identifier EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              net_declaration 
              TRIREG drive_strength signing identifier EQUALS expression list_of_net_decl_assignments_3 SEMICOLON 
                                                              primary 
                                                              (?)

** In state 2873, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 2873, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 2873, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 2868.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 TRIREG drive_strength signing net_declaration_62 LBRACK constant_expression COLON constant_expression RBRACK delay3 identifier EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              net_declaration 
              TRIREG drive_strength signing net_declaration_62 LBRACK constant_expression COLON constant_expression RBRACK delay3 identifier EQUALS expression list_of_net_decl_assignments_3 SEMICOLON 
                                                                                                                                                    primary 
                                                                                                                                                    (?)

** In state 2868, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 2868, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 2868, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 2862.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 TRIREG drive_strength signing net_declaration_62 LBRACK constant_expression COLON constant_expression RBRACK identifier EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              net_declaration 
              TRIREG drive_strength signing net_declaration_62 LBRACK constant_expression COLON constant_expression RBRACK identifier EQUALS expression list_of_net_decl_assignments_3 SEMICOLON 
                                                                                                                                             primary 
                                                                                                                                             (?)

** In state 2862, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 2862, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 2862, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 2850.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 TRIREG drive_strength SCALARED net_declaration_62 LBRACK constant_expression COLON constant_expression RBRACK delay3 identifier EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              net_declaration 
              TRIREG drive_strength SCALARED net_declaration_62 LBRACK constant_expression COLON constant_expression RBRACK delay3 identifier EQUALS expression list_of_net_decl_assignments_3 SEMICOLON 
                                                                                                                                                     primary 
                                                                                                                                                     (?)

** In state 2850, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 2850, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 2850, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 2844.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 TRIREG drive_strength SCALARED net_declaration_62 LBRACK constant_expression COLON constant_expression RBRACK identifier EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              net_declaration 
              TRIREG drive_strength SCALARED net_declaration_62 LBRACK constant_expression COLON constant_expression RBRACK identifier EQUALS expression list_of_net_decl_assignments_3 SEMICOLON 
                                                                                                                                              primary 
                                                                                                                                              (?)

** In state 2844, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 2844, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 2844, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 2833.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 TRIREG drive_strength SCALARED signing net_declaration_62 LBRACK constant_expression COLON constant_expression RBRACK delay3 identifier EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              net_declaration 
              TRIREG drive_strength SCALARED signing net_declaration_62 LBRACK constant_expression COLON constant_expression RBRACK delay3 identifier EQUALS expression list_of_net_decl_assignments_3 SEMICOLON 
                                                                                                                                                             primary 
                                                                                                                                                             (?)

** In state 2833, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 2833, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 2833, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 2827.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 TRIREG drive_strength SCALARED signing net_declaration_62 LBRACK constant_expression COLON constant_expression RBRACK identifier EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              net_declaration 
              TRIREG drive_strength SCALARED signing net_declaration_62 LBRACK constant_expression COLON constant_expression RBRACK identifier EQUALS expression list_of_net_decl_assignments_3 SEMICOLON 
                                                                                                                                                      primary 
                                                                                                                                                      (?)

** In state 2827, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 2827, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 2827, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 2814.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 TRIREG drive_strength VECTORED net_declaration_62 LBRACK constant_expression COLON constant_expression RBRACK delay3 identifier EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              net_declaration 
              TRIREG drive_strength VECTORED net_declaration_62 LBRACK constant_expression COLON constant_expression RBRACK delay3 identifier EQUALS expression list_of_net_decl_assignments_3 SEMICOLON 
                                                                                                                                                     primary 
                                                                                                                                                     (?)

** In state 2814, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 2814, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 2814, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 2808.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 TRIREG drive_strength VECTORED net_declaration_62 LBRACK constant_expression COLON constant_expression RBRACK identifier EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              net_declaration 
              TRIREG drive_strength VECTORED net_declaration_62 LBRACK constant_expression COLON constant_expression RBRACK identifier EQUALS expression list_of_net_decl_assignments_3 SEMICOLON 
                                                                                                                                              primary 
                                                                                                                                              (?)

** In state 2808, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 2808, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 2808, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 2797.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 TRIREG drive_strength VECTORED signing net_declaration_62 LBRACK constant_expression COLON constant_expression RBRACK delay3 identifier EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              net_declaration 
              TRIREG drive_strength VECTORED signing net_declaration_62 LBRACK constant_expression COLON constant_expression RBRACK delay3 identifier EQUALS expression list_of_net_decl_assignments_3 SEMICOLON 
                                                                                                                                                             primary 
                                                                                                                                                             (?)

** In state 2797, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 2797, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 2797, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 2791.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 TRIREG drive_strength VECTORED signing net_declaration_62 LBRACK constant_expression COLON constant_expression RBRACK identifier EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              net_declaration 
              TRIREG drive_strength VECTORED signing net_declaration_62 LBRACK constant_expression COLON constant_expression RBRACK identifier EQUALS expression list_of_net_decl_assignments_3 SEMICOLON 
                                                                                                                                                      primary 
                                                                                                                                                      (?)

** In state 2791, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 2791, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 2791, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 2774.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 TRIREG identifier EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              net_declaration 
              TRIREG identifier EQUALS expression list_of_net_decl_assignments_3 SEMICOLON 
                                       primary 
                                       (?)

** In state 2774, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 2774, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 2774, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 2754.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 TRIREG net_declaration_62 LBRACK constant_expression COLON constant_expression RBRACK delay3 identifier EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              net_declaration 
              TRIREG net_declaration_62 LBRACK constant_expression COLON constant_expression RBRACK delay3 identifier EQUALS expression list_of_net_decl_assignments_3 SEMICOLON 
                                                                                                                             primary 
                                                                                                                             (?)

** In state 2754, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 2754, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 2754, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 2748.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 TRIREG net_declaration_62 LBRACK constant_expression COLON constant_expression RBRACK identifier EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              net_declaration 
              TRIREG net_declaration_62 LBRACK constant_expression COLON constant_expression RBRACK identifier EQUALS expression list_of_net_decl_assignments_3 SEMICOLON 
                                                                                                                      primary 
                                                                                                                      (?)

** In state 2748, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 2748, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 2748, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 2734.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 TRIREG signing delay3 identifier EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              net_declaration 
              TRIREG signing delay3 identifier EQUALS expression list_of_net_decl_assignments_3 SEMICOLON 
                                                      primary 
                                                      (?)

** In state 2734, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 2734, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 2734, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 2725.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 TRIREG signing identifier EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              net_declaration 
              TRIREG signing identifier EQUALS expression list_of_net_decl_assignments_3 SEMICOLON 
                                               primary 
                                               (?)

** In state 2725, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 2725, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 2725, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 2705.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 TRIREG signing net_declaration_62 LBRACK constant_expression COLON constant_expression RBRACK delay3 identifier EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              net_declaration 
              TRIREG signing net_declaration_62 LBRACK constant_expression COLON constant_expression RBRACK delay3 identifier EQUALS expression list_of_net_decl_assignments_3 SEMICOLON 
                                                                                                                                     primary 
                                                                                                                                     (?)

** In state 2705, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 2705, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 2705, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 2699.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 TRIREG signing net_declaration_62 LBRACK constant_expression COLON constant_expression RBRACK identifier EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              net_declaration 
              TRIREG signing net_declaration_62 LBRACK constant_expression COLON constant_expression RBRACK identifier EQUALS expression list_of_net_decl_assignments_3 SEMICOLON 
                                                                                                                              primary 
                                                                                                                              (?)

** In state 2699, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 2699, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 2699, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (reduce/reduce) in state 2691.
** Token involved: LBRACK
** This state is reached from start after reading:

source_text_3 TRIREG signing

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              net_declaration 
              (?)

** In state 2691, looking ahead at LBRACK, reducing production
** net_declaration_52 ->
** is permitted because of the following sub-derivation:

TRIREG signing net_declaration_52 LBRACK constant_expression COLON constant_expression RBRACK identifier list_of_net_identifiers_3 list_of_net_identifiers_4 SEMICOLON // lookahead token appears
               . 

** In state 2691, looking ahead at LBRACK, reducing production
** net_declaration_62 ->
** is permitted because of the following sub-derivation:

TRIREG signing net_declaration_62 LBRACK constant_expression COLON constant_expression RBRACK identifier EQUALS expression list_of_net_decl_assignments_3 SEMICOLON // lookahead token appears
               . 

** Conflict (shift/reduce/reduce) in state 2637.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 TRIREG SCALARED net_declaration_62 LBRACK constant_expression COLON constant_expression RBRACK delay3 identifier EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              net_declaration 
              TRIREG SCALARED net_declaration_62 LBRACK constant_expression COLON constant_expression RBRACK delay3 identifier EQUALS expression list_of_net_decl_assignments_3 SEMICOLON 
                                                                                                                                      primary 
                                                                                                                                      (?)

** In state 2637, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 2637, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 2637, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 2631.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 TRIREG SCALARED net_declaration_62 LBRACK constant_expression COLON constant_expression RBRACK identifier EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              net_declaration 
              TRIREG SCALARED net_declaration_62 LBRACK constant_expression COLON constant_expression RBRACK identifier EQUALS expression list_of_net_decl_assignments_3 SEMICOLON 
                                                                                                                               primary 
                                                                                                                               (?)

** In state 2631, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 2631, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 2631, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 2605.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 TRIREG SCALARED signing net_declaration_62 LBRACK constant_expression COLON constant_expression RBRACK delay3 identifier EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              net_declaration 
              TRIREG SCALARED signing net_declaration_62 LBRACK constant_expression COLON constant_expression RBRACK delay3 identifier EQUALS expression list_of_net_decl_assignments_3 SEMICOLON 
                                                                                                                                              primary 
                                                                                                                                              (?)

** In state 2605, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 2605, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 2605, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 2599.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 TRIREG SCALARED signing net_declaration_62 LBRACK constant_expression COLON constant_expression RBRACK identifier EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              net_declaration 
              TRIREG SCALARED signing net_declaration_62 LBRACK constant_expression COLON constant_expression RBRACK identifier EQUALS expression list_of_net_decl_assignments_3 SEMICOLON 
                                                                                                                                       primary 
                                                                                                                                       (?)

** In state 2599, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 2599, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 2599, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (reduce/reduce) in state 2591.
** Token involved: LBRACK
** This state is reached from start after reading:

source_text_3 TRIREG SCALARED signing

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              net_declaration 
              (?)

** In state 2591, looking ahead at LBRACK, reducing production
** net_declaration_52 ->
** is permitted because of the following sub-derivation:

TRIREG SCALARED signing net_declaration_52 LBRACK constant_expression COLON constant_expression RBRACK identifier list_of_net_identifiers_3 list_of_net_identifiers_4 SEMICOLON // lookahead token appears
                        . 

** In state 2591, looking ahead at LBRACK, reducing production
** net_declaration_62 ->
** is permitted because of the following sub-derivation:

TRIREG SCALARED signing net_declaration_62 LBRACK constant_expression COLON constant_expression RBRACK identifier EQUALS expression list_of_net_decl_assignments_3 SEMICOLON // lookahead token appears
                        . 

** Conflict (reduce/reduce) in state 2590.
** Token involved: LBRACK
** This state is reached from start after reading:

source_text_3 TRIREG SCALARED

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              net_declaration 
              (?)

** In state 2590, looking ahead at LBRACK, reducing production
** net_declaration_52 ->
** is permitted because of the following sub-derivation:

TRIREG SCALARED net_declaration_52 LBRACK constant_expression COLON constant_expression RBRACK identifier list_of_net_identifiers_3 list_of_net_identifiers_4 SEMICOLON // lookahead token appears
                . 

** In state 2590, looking ahead at LBRACK, reducing production
** net_declaration_62 ->
** is permitted because of the following sub-derivation:

TRIREG SCALARED net_declaration_62 LBRACK constant_expression COLON constant_expression RBRACK identifier EQUALS expression list_of_net_decl_assignments_3 SEMICOLON // lookahead token appears
                . 

** Conflict (shift/reduce/reduce) in state 2571.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 TRIREG VECTORED net_declaration_62 LBRACK constant_expression COLON constant_expression RBRACK delay3 identifier EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              net_declaration 
              TRIREG VECTORED net_declaration_62 LBRACK constant_expression COLON constant_expression RBRACK delay3 identifier EQUALS expression list_of_net_decl_assignments_3 SEMICOLON 
                                                                                                                                      primary 
                                                                                                                                      (?)

** In state 2571, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 2571, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 2571, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 2565.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 TRIREG VECTORED net_declaration_62 LBRACK constant_expression COLON constant_expression RBRACK identifier EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              net_declaration 
              TRIREG VECTORED net_declaration_62 LBRACK constant_expression COLON constant_expression RBRACK identifier EQUALS expression list_of_net_decl_assignments_3 SEMICOLON 
                                                                                                                               primary 
                                                                                                                               (?)

** In state 2565, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 2565, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 2565, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 2532.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 TRIREG VECTORED signing net_declaration_62 LBRACK constant_expression COLON constant_expression RBRACK delay3 identifier EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              net_declaration 
              TRIREG VECTORED signing net_declaration_62 LBRACK constant_expression COLON constant_expression RBRACK delay3 identifier EQUALS expression list_of_net_decl_assignments_3 SEMICOLON 
                                                                                                                                              primary 
                                                                                                                                              (?)

** In state 2532, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 2532, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 2532, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 2528.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 TRIREG identifier EQUALS expression list_of_net_decl_assignments_3 COMMA identifier EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              net_declaration 
              TRIREG identifier EQUALS expression list_of_net_decl_assignments_3 SEMICOLON 
                                                  list_of_net_decl_assignments_3 COMMA identifier EQUALS expression 
                                                                                                         primary 
                                                                                                         (?)

** In state 2528, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 2528, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 2528, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 2522.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 TRIREG VECTORED signing net_declaration_62 LBRACK constant_expression COLON constant_expression RBRACK identifier EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              net_declaration 
              TRIREG VECTORED signing net_declaration_62 LBRACK constant_expression COLON constant_expression RBRACK identifier EQUALS expression list_of_net_decl_assignments_3 SEMICOLON 
                                                                                                                                       primary 
                                                                                                                                       (?)

** In state 2522, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 2522, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 2522, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 2517.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 TRIREG HASH LPAREN mintypmax_expression COMMA mintypmax_expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              net_declaration 
              TRIREG delay3 identifier list_of_net_identifiers_3 list_of_net_identifiers_4 SEMICOLON 
                     HASH LPAREN mintypmax_expression COMMA mintypmax_expression COMMA mintypmax_expression RPAREN 
                                                                                       expression 
                                                                                       primary 
                                                                                       (?)

** In state 2517, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 2517, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 2517, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 2514.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 TRIREG HASH LPAREN mintypmax_expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              net_declaration 
              TRIREG delay3 identifier list_of_net_identifiers_3 list_of_net_identifiers_4 SEMICOLON 
                     HASH LPAREN mintypmax_expression COMMA mintypmax_expression RPAREN 
                                                            expression 
                                                            primary 
                                                            (?)

** In state 2514, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 2514, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 2514, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 2511.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 TRIREG HASH LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              net_declaration 
              TRIREG delay3 identifier list_of_net_identifiers_3 list_of_net_identifiers_4 SEMICOLON 
                     HASH LPAREN mintypmax_expression RPAREN 
                                 expression 
                                 primary 
                                 (?)

** In state 2511, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 2511, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 2511, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (reduce/reduce) in state 2503.
** Token involved: LBRACK
** This state is reached from start after reading:

source_text_3 TRIREG VECTORED signing

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              net_declaration 
              (?)

** In state 2503, looking ahead at LBRACK, reducing production
** net_declaration_52 ->
** is permitted because of the following sub-derivation:

TRIREG VECTORED signing net_declaration_52 LBRACK constant_expression COLON constant_expression RBRACK identifier list_of_net_identifiers_3 list_of_net_identifiers_4 SEMICOLON // lookahead token appears
                        . 

** In state 2503, looking ahead at LBRACK, reducing production
** net_declaration_62 ->
** is permitted because of the following sub-derivation:

TRIREG VECTORED signing net_declaration_62 LBRACK constant_expression COLON constant_expression RBRACK identifier EQUALS expression list_of_net_decl_assignments_3 SEMICOLON // lookahead token appears
                        . 

** Conflict (reduce/reduce) in state 2502.
** Token involved: LBRACK
** This state is reached from start after reading:

source_text_3 TRIREG VECTORED

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              net_declaration 
              (?)

** In state 2502, looking ahead at LBRACK, reducing production
** net_declaration_52 ->
** is permitted because of the following sub-derivation:

TRIREG VECTORED net_declaration_52 LBRACK constant_expression COLON constant_expression RBRACK identifier list_of_net_identifiers_3 list_of_net_identifiers_4 SEMICOLON // lookahead token appears
                . 

** In state 2502, looking ahead at LBRACK, reducing production
** net_declaration_62 ->
** is permitted because of the following sub-derivation:

TRIREG VECTORED net_declaration_62 LBRACK constant_expression COLON constant_expression RBRACK identifier EQUALS expression list_of_net_decl_assignments_3 SEMICOLON // lookahead token appears
                . 

** Conflict (reduce/reduce) in state 2501.
** Token involved: LBRACK
** This state is reached from start after reading:

source_text_3 TRIREG

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              net_declaration 
              (?)

** In state 2501, looking ahead at LBRACK, reducing production
** net_declaration_52 ->
** is permitted because of the following sub-derivation:

TRIREG net_declaration_52 LBRACK constant_expression COLON constant_expression RBRACK identifier list_of_net_identifiers_3 list_of_net_identifiers_4 SEMICOLON // lookahead token appears
       . 

** In state 2501, looking ahead at LBRACK, reducing production
** net_declaration_62 ->
** is permitted because of the following sub-derivation:

TRIREG net_declaration_62 LBRACK constant_expression COLON constant_expression RBRACK identifier EQUALS expression list_of_net_decl_assignments_3 SEMICOLON // lookahead token appears
       . 

** Conflict (shift/reduce/reduce) in state 2497.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 VIRTUAL CLASS identifier EXTENDS identifier SEMICOLON class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              VIRTUAL CLASS identifier EXTENDS identifier SEMICOLON class_declaration_11 ENDCLASS 
                                                                    class_declaration_11 class_item 
                                                                                         (?)

** In state 2497, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 2497, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 2497, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 2497, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 2493.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 VIRTUAL CLASS identifier EXTENDS identifier SEMICOLON timeunits_declaration class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              VIRTUAL CLASS identifier EXTENDS identifier SEMICOLON timeunits_declaration class_declaration_11 ENDCLASS 
                                                                                          class_declaration_11 class_item 
                                                                                                               (?)

** In state 2493, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 2493, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 2493, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 2493, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 2485.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 VIRTUAL CLASS identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN EXTENDS identifier SEMICOLON class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              VIRTUAL CLASS identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN EXTENDS identifier SEMICOLON class_declaration_11 ENDCLASS 
                                                                                                                                   class_declaration_11 class_item 
                                                                                                                                                        (?)

** In state 2485, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 2485, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 2485, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 2485, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 2481.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 VIRTUAL CLASS identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN EXTENDS identifier SEMICOLON timeunits_declaration class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              VIRTUAL CLASS identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN EXTENDS identifier SEMICOLON timeunits_declaration class_declaration_11 ENDCLASS 
                                                                                                                                                         class_declaration_11 class_item 
                                                                                                                                                                              (?)

** In state 2481, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 2481, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 2481, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 2481, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 2473.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 VIRTUAL CLASS identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN SEMICOLON class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              VIRTUAL CLASS identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN SEMICOLON class_declaration_11 ENDCLASS 
                                                                                                                class_declaration_11 class_item 
                                                                                                                                     (?)

** In state 2473, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 2473, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 2473, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 2473, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 2469.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 VIRTUAL CLASS identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN SEMICOLON timeunits_declaration class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              VIRTUAL CLASS identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN SEMICOLON timeunits_declaration class_declaration_11 ENDCLASS 
                                                                                                                                      class_declaration_11 class_item 
                                                                                                                                                           (?)

** In state 2469, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 2469, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 2469, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 2469, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 2458.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 VIRTUAL CLASS identifier SEMICOLON class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              VIRTUAL CLASS identifier SEMICOLON class_declaration_11 ENDCLASS 
                                                 class_declaration_11 class_item 
                                                                      (?)

** In state 2458, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 2458, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 2458, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 2458, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 2454.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 VIRTUAL CLASS identifier SEMICOLON timeunits_declaration class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              VIRTUAL CLASS identifier SEMICOLON timeunits_declaration class_declaration_11 ENDCLASS 
                                                                       class_declaration_11 class_item 
                                                                                            (?)

** In state 2454, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 2454, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 2454, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 2454, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 2447.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 VIRTUAL CLASS lifetime identifier EXTENDS identifier SEMICOLON class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              VIRTUAL CLASS lifetime identifier EXTENDS identifier SEMICOLON class_declaration_11 ENDCLASS 
                                                                             class_declaration_11 class_item 
                                                                                                  (?)

** In state 2447, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 2447, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 2447, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 2447, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 2443.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 VIRTUAL CLASS lifetime identifier EXTENDS identifier SEMICOLON timeunits_declaration class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              VIRTUAL CLASS lifetime identifier EXTENDS identifier SEMICOLON timeunits_declaration class_declaration_11 ENDCLASS 
                                                                                                   class_declaration_11 class_item 
                                                                                                                        (?)

** In state 2443, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 2443, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 2443, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 2443, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 2433.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 VIRTUAL CLASS lifetime identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN EXTENDS identifier SEMICOLON class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              VIRTUAL CLASS lifetime identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN EXTENDS identifier SEMICOLON class_declaration_11 ENDCLASS 
                                                                                                                                            class_declaration_11 class_item 
                                                                                                                                                                 (?)

** In state 2433, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 2433, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 2433, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 2433, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 2429.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 VIRTUAL CLASS lifetime identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN EXTENDS identifier SEMICOLON timeunits_declaration class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              VIRTUAL CLASS lifetime identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN EXTENDS identifier SEMICOLON timeunits_declaration class_declaration_11 ENDCLASS 
                                                                                                                                                                  class_declaration_11 class_item 
                                                                                                                                                                                       (?)

** In state 2429, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 2429, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 2429, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 2429, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 2421.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 VIRTUAL CLASS lifetime identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN SEMICOLON class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              VIRTUAL CLASS lifetime identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN SEMICOLON class_declaration_11 ENDCLASS 
                                                                                                                         class_declaration_11 class_item 
                                                                                                                                              (?)

** In state 2421, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 2421, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 2421, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 2421, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 2417.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 VIRTUAL CLASS lifetime identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN SEMICOLON timeunits_declaration class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              VIRTUAL CLASS lifetime identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN SEMICOLON timeunits_declaration class_declaration_11 ENDCLASS 
                                                                                                                                               class_declaration_11 class_item 
                                                                                                                                                                    (?)

** In state 2417, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 2417, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 2417, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 2417, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce/reduce) in state 2406.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 VIRTUAL CLASS lifetime identifier SEMICOLON class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              VIRTUAL CLASS lifetime identifier SEMICOLON class_declaration_11 ENDCLASS 
                                                          class_declaration_11 class_item 
                                                                               (?)

** In state 2406, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 2406, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 2406, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 2406, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce) in state 2397.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 TASK identifier DOT identifier LPAREN task_port_list RPAREN SEMICOLON task_body_declaration_16

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              TASK task_body_declaration 
                   (?)

** In state 2397, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

identifier DOT identifier LPAREN task_port_list RPAREN SEMICOLON task_body_declaration_16 task_body_declaration_17 ENDTASK 
                                                                 task_body_declaration_16 block_item_declaration 
                                                                                          block_data_declaration 
                                                                                          block_variable_declaration 
                                                                                          data_type identifier variable_dimension list_of_variable_identifiers_4 SEMICOLON 
                                                                                          identifier type_declaration_identifier_3 data_type_11 
                                                                                          . SIMPLE_IDENTIFIER 

** In state 2397, looking ahead at SIMPLE_IDENTIFIER, reducing production
** task_body_declaration_17 ->
** is permitted because of the following sub-derivation:

identifier DOT identifier LPAREN task_port_list RPAREN SEMICOLON task_body_declaration_16 task_body_declaration_17 ENDTASK 
                                                                                          task_body_declaration_17 statement_or_null // lookahead token appears because statement_or_null can begin with SIMPLE_IDENTIFIER
                                                                                          . 

** Conflict (shift/reduce) in state 2388.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 TASK identifier DOT identifier SEMICOLON task_body_declaration_5

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              TASK task_body_declaration 
                   (?)

** In state 2388, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

identifier DOT identifier SEMICOLON task_body_declaration_5 task_body_declaration_6 ENDTASK 
                                    task_body_declaration_5 task_item_declaration 
                                                            block_item_declaration 
                                                            block_data_declaration 
                                                            block_variable_declaration 
                                                            data_type identifier variable_dimension list_of_variable_identifiers_4 SEMICOLON 
                                                            identifier type_declaration_identifier_3 data_type_11 
                                                            . SIMPLE_IDENTIFIER 

** In state 2388, looking ahead at SIMPLE_IDENTIFIER, reducing production
** task_body_declaration_6 ->
** is permitted because of the following sub-derivation:

identifier DOT identifier SEMICOLON task_body_declaration_5 task_body_declaration_6 ENDTASK 
                                                            task_body_declaration_6 statement_or_null // lookahead token appears because statement_or_null can begin with SIMPLE_IDENTIFIER
                                                            . 

** Conflict (shift/reduce) in state 2377.
** Token involved: COMMA
** This state is reached from start after reading:

source_text_3 TASK identifier LPAREN identifier list_of_port_identifiers_3 list_of_port_identifiers_4

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              TASK task_body_declaration 
                   identifier LPAREN task_port_list RPAREN SEMICOLON task_body_declaration_16 task_body_declaration_17 ENDTASK 
                                     (?)

** In state 2377, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

identifier list_of_port_identifiers_3 list_of_port_identifiers_4 task_port_list_6 
                                      list_of_port_identifiers_4 . COMMA identifier list_of_port_identifiers_4_6 

** In state 2377, looking ahead at COMMA, reducing production
** task_port_list_6 ->
** is permitted because of the following sub-derivation:

identifier list_of_port_identifiers_3 list_of_port_identifiers_4 task_port_list_6 
                                                                 task_port_list_6 COMMA task_port_item // lookahead token appears
                                                                 . 

** Conflict (reduce/reduce) in state 2374.
** Token involved: LBRACK
** This state is reached from start after reading:

source_text_3 TASK identifier LPAREN identifier

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              TASK task_body_declaration 
                   identifier LPAREN task_port_list RPAREN SEMICOLON task_body_declaration_16 task_body_declaration_17 ENDTASK 
                                     (?)

** In state 2374, looking ahead at LBRACK, reducing production
** list_of_port_identifiers_3 ->
** is permitted because of the following sub-derivation:

identifier list_of_port_identifiers_3 list_of_port_identifiers_4 task_port_list_6 
           list_of_port_identifiers_3 unpacked_dimension // lookahead token appears because unpacked_dimension can begin with LBRACK
           . 

** In state 2374, looking ahead at LBRACK, reducing production
** type_declaration_identifier_3 ->
** is permitted because of the following sub-derivation:

task_port_item task_port_list_3 
port_type identifier list_of_tf_port_identifiers_3 list_of_tf_port_identifiers_5 
data_type 
identifier type_declaration_identifier_3 data_type_11 // lookahead token appears because data_type_11 can begin with LBRACK
           . 

** Conflict (shift/reduce) in state 2373.
** Token involved: COMMA
** This state is reached from start after reading:

source_text_3 TASK identifier LPAREN port_type identifier list_of_tf_port_identifiers_3 list_of_tf_port_identifiers_5

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              TASK task_body_declaration 
                   identifier LPAREN task_port_list RPAREN SEMICOLON task_body_declaration_16 task_body_declaration_17 ENDTASK 
                                     (?)

** In state 2373, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

task_port_item task_port_list_3 
port_type identifier list_of_tf_port_identifiers_3 list_of_tf_port_identifiers_5 
                                                   list_of_tf_port_identifiers_5 . COMMA identifier list_of_tf_port_identifiers_5_6 

** In state 2373, looking ahead at COMMA, reducing production
** task_port_item -> port_type identifier list_of_tf_port_identifiers_3 list_of_tf_port_identifiers_5
** is permitted because of the following sub-derivation:

task_port_item task_port_list_3 // lookahead token appears because task_port_list_3 can begin with COMMA
port_type identifier list_of_tf_port_identifiers_3 list_of_tf_port_identifiers_5 . 

** Conflict (shift/reduce) in state 2372.
** Token involved: COMMA
** This state is reached from start after reading:

source_text_3 TASK identifier LPAREN port_type identifier list_of_tf_port_identifiers_3 EQUALS expression list_of_tf_port_identifiers_5

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              TASK task_body_declaration 
                   identifier LPAREN task_port_list RPAREN SEMICOLON task_body_declaration_16 task_body_declaration_17 ENDTASK 
                                     (?)

** In state 2372, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

task_port_item task_port_list_3 
port_type identifier list_of_tf_port_identifiers_3 EQUALS expression list_of_tf_port_identifiers_5 
                                                                     list_of_tf_port_identifiers_5 . COMMA identifier list_of_tf_port_identifiers_5_6 

** In state 2372, looking ahead at COMMA, reducing production
** task_port_item -> port_type identifier list_of_tf_port_identifiers_3 EQUALS expression list_of_tf_port_identifiers_5
** is permitted because of the following sub-derivation:

task_port_item task_port_list_3 // lookahead token appears because task_port_list_3 can begin with COMMA
port_type identifier list_of_tf_port_identifiers_3 EQUALS expression list_of_tf_port_identifiers_5 . 

** Conflict (shift/reduce/reduce) in state 2370.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 TASK identifier LPAREN port_type identifier list_of_tf_port_identifiers_3 EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              TASK task_body_declaration 
                   identifier LPAREN task_port_list RPAREN SEMICOLON task_body_declaration_16 task_body_declaration_17 ENDTASK 
                                     task_port_item task_port_list_3 
                                     port_type identifier list_of_tf_port_identifiers_3 EQUALS expression list_of_tf_port_identifiers_5 
                                                                                               primary 
                                                                                               (?)

** In state 2370, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 2370, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 2370, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce) in state 2356.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 TASK identifier LPAREN task_port_list RPAREN SEMICOLON task_body_declaration_16

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              TASK task_body_declaration 
                   (?)

** In state 2356, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

identifier LPAREN task_port_list RPAREN SEMICOLON task_body_declaration_16 task_body_declaration_17 ENDTASK 
                                                  task_body_declaration_16 block_item_declaration 
                                                                           block_data_declaration 
                                                                           block_variable_declaration 
                                                                           data_type identifier variable_dimension list_of_variable_identifiers_4 SEMICOLON 
                                                                           identifier type_declaration_identifier_3 data_type_11 
                                                                           . SIMPLE_IDENTIFIER 

** In state 2356, looking ahead at SIMPLE_IDENTIFIER, reducing production
** task_body_declaration_17 ->
** is permitted because of the following sub-derivation:

identifier LPAREN task_port_list RPAREN SEMICOLON task_body_declaration_16 task_body_declaration_17 ENDTASK 
                                                                           task_body_declaration_17 statement_or_null // lookahead token appears because statement_or_null can begin with SIMPLE_IDENTIFIER
                                                                           . 

** Conflict (shift/reduce) in state 2352.
** Token involved: COMMA
** This state is reached from start after reading:

source_text_3 TASK identifier LPAREN tf_data_type identifier variable_dimension list_of_tf_variable_identifiers_5

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              TASK task_body_declaration 
                   identifier LPAREN task_port_list RPAREN SEMICOLON task_body_declaration_16 task_body_declaration_17 ENDTASK 
                                     (?)

** In state 2352, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

task_port_item task_port_list_3 
tf_data_type identifier variable_dimension list_of_tf_variable_identifiers_5 
                                           list_of_tf_variable_identifiers_5 . COMMA identifier variable_dimension 

** In state 2352, looking ahead at COMMA, reducing production
** task_port_item -> tf_data_type identifier variable_dimension list_of_tf_variable_identifiers_5
** is permitted because of the following sub-derivation:

task_port_item task_port_list_3 // lookahead token appears because task_port_list_3 can begin with COMMA
tf_data_type identifier variable_dimension list_of_tf_variable_identifiers_5 . 

** Conflict (shift/reduce) in state 2351.
** Token involved: COMMA
** This state is reached from start after reading:

source_text_3 TASK identifier LPAREN tf_data_type identifier variable_dimension EQUALS expression list_of_tf_variable_identifiers_5

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              TASK task_body_declaration 
                   identifier LPAREN task_port_list RPAREN SEMICOLON task_body_declaration_16 task_body_declaration_17 ENDTASK 
                                     (?)

** In state 2351, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

task_port_item task_port_list_3 
tf_data_type identifier variable_dimension EQUALS expression list_of_tf_variable_identifiers_5 
                                                             list_of_tf_variable_identifiers_5 . COMMA identifier variable_dimension 

** In state 2351, looking ahead at COMMA, reducing production
** task_port_item -> tf_data_type identifier variable_dimension EQUALS expression list_of_tf_variable_identifiers_5
** is permitted because of the following sub-derivation:

task_port_item task_port_list_3 // lookahead token appears because task_port_list_3 can begin with COMMA
tf_data_type identifier variable_dimension EQUALS expression list_of_tf_variable_identifiers_5 . 

** Conflict (shift/reduce/reduce) in state 2349.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 TASK identifier LPAREN tf_data_type identifier variable_dimension EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              TASK task_body_declaration 
                   identifier LPAREN task_port_list RPAREN SEMICOLON task_body_declaration_16 task_body_declaration_17 ENDTASK 
                                     task_port_item task_port_list_3 
                                     tf_data_type identifier variable_dimension EQUALS expression list_of_tf_variable_identifiers_5 
                                                                                       primary 
                                                                                       (?)

** In state 2349, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 2349, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 2349, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce) in state 2347.
** Token involved: LBRACK
** This state is reached from start after reading:

source_text_3 TASK identifier LPAREN tf_data_type identifier

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              TASK task_body_declaration 
                   identifier LPAREN task_port_list RPAREN SEMICOLON task_body_declaration_16 task_body_declaration_17 ENDTASK 
                                     task_port_item task_port_list_3 
                                     tf_data_type identifier variable_dimension list_of_tf_variable_identifiers_5 
                                                             (?)

** In state 2347, looking ahead at LBRACK, shifting is permitted
** because of the following sub-derivation:

associative_dimension 
. LBRACK data_type RBRACK 

** In state 2347, looking ahead at LBRACK, reducing production
** variable_dimension_2 ->
** is permitted because of the following sub-derivation:

variable_dimension_2 
variable_dimension_2 unpacked_dimension // lookahead token appears because unpacked_dimension can begin with LBRACK
. 

** Conflict (shift/reduce/reduce) in state 2337.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 TASK identifier LPAREN CONST REF tf_data_type identifier variable_dimension EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              TASK task_body_declaration 
                   identifier LPAREN task_port_list RPAREN SEMICOLON task_body_declaration_16 task_body_declaration_17 ENDTASK 
                                     task_port_item task_port_list_3 
                                     CONST REF tf_data_type identifier variable_dimension EQUALS expression list_of_tf_variable_identifiers_5 SEMICOLON 
                                                                                                 primary 
                                                                                                 (?)

** In state 2337, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 2337, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 2337, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce) in state 2335.
** Token involved: LBRACK
** This state is reached from start after reading:

source_text_3 TASK identifier LPAREN CONST REF tf_data_type identifier

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              TASK task_body_declaration 
                   identifier LPAREN task_port_list RPAREN SEMICOLON task_body_declaration_16 task_body_declaration_17 ENDTASK 
                                     task_port_item task_port_list_3 
                                     CONST REF tf_data_type identifier variable_dimension list_of_tf_variable_identifiers_5 SEMICOLON 
                                                                       (?)

** In state 2335, looking ahead at LBRACK, shifting is permitted
** because of the following sub-derivation:

associative_dimension 
. LBRACK data_type RBRACK 

** In state 2335, looking ahead at LBRACK, reducing production
** variable_dimension_2 ->
** is permitted because of the following sub-derivation:

variable_dimension_2 
variable_dimension_2 unpacked_dimension // lookahead token appears because unpacked_dimension can begin with LBRACK
. 

** Conflict (shift/reduce/reduce) in state 2326.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 TASK identifier LPAREN REF tf_data_type identifier variable_dimension EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              TASK task_body_declaration 
                   identifier LPAREN task_port_list RPAREN SEMICOLON task_body_declaration_16 task_body_declaration_17 ENDTASK 
                                     task_port_item task_port_list_3 
                                     REF tf_data_type identifier variable_dimension EQUALS expression list_of_tf_variable_identifiers_5 SEMICOLON 
                                                                                           primary 
                                                                                           (?)

** In state 2326, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 2326, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 2326, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce) in state 2324.
** Token involved: LBRACK
** This state is reached from start after reading:

source_text_3 TASK identifier LPAREN REF tf_data_type identifier

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              TASK task_body_declaration 
                   identifier LPAREN task_port_list RPAREN SEMICOLON task_body_declaration_16 task_body_declaration_17 ENDTASK 
                                     task_port_item task_port_list_3 
                                     REF tf_data_type identifier variable_dimension list_of_tf_variable_identifiers_5 SEMICOLON 
                                                                 (?)

** In state 2324, looking ahead at LBRACK, shifting is permitted
** because of the following sub-derivation:

associative_dimension 
. LBRACK data_type RBRACK 

** In state 2324, looking ahead at LBRACK, reducing production
** variable_dimension_2 ->
** is permitted because of the following sub-derivation:

variable_dimension_2 
variable_dimension_2 unpacked_dimension // lookahead token appears because unpacked_dimension can begin with LBRACK
. 

** Conflict (shift/reduce/reduce) in state 2302.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 TASK identifier SEMICOLON task_body_declaration_5 CONST REF tf_data_type identifier variable_dimension EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              TASK task_body_declaration 
                   identifier SEMICOLON task_body_declaration_5 task_body_declaration_6 ENDTASK 
                                        task_body_declaration_5 task_item_declaration 
                                                                CONST REF tf_data_type identifier variable_dimension EQUALS expression list_of_tf_variable_identifiers_5 SEMICOLON 
                                                                                                                            primary 
                                                                                                                            (?)

** In state 2302, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 2302, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 2302, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce) in state 2300.
** Token involved: LBRACK
** This state is reached from start after reading:

source_text_3 TASK identifier SEMICOLON task_body_declaration_5 CONST REF tf_data_type identifier

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              TASK task_body_declaration 
                   identifier SEMICOLON task_body_declaration_5 task_body_declaration_6 ENDTASK 
                                        task_body_declaration_5 task_item_declaration 
                                                                CONST REF tf_data_type identifier variable_dimension list_of_tf_variable_identifiers_5 SEMICOLON 
                                                                                                  (?)

** In state 2300, looking ahead at LBRACK, shifting is permitted
** because of the following sub-derivation:

associative_dimension 
. LBRACK data_type RBRACK 

** In state 2300, looking ahead at LBRACK, reducing production
** variable_dimension_2 ->
** is permitted because of the following sub-derivation:

variable_dimension_2 
variable_dimension_2 unpacked_dimension // lookahead token appears because unpacked_dimension can begin with LBRACK
. 

** Conflict (shift/reduce/reduce) in state 2291.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 TASK identifier SEMICOLON task_body_declaration_5 REF tf_data_type identifier variable_dimension EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              TASK task_body_declaration 
                   identifier SEMICOLON task_body_declaration_5 task_body_declaration_6 ENDTASK 
                                        task_body_declaration_5 task_item_declaration 
                                                                REF tf_data_type identifier variable_dimension EQUALS expression list_of_tf_variable_identifiers_5 SEMICOLON 
                                                                                                                      primary 
                                                                                                                      (?)

** In state 2291, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 2291, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 2291, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce) in state 2289.
** Token involved: LBRACK
** This state is reached from start after reading:

source_text_3 TASK identifier SEMICOLON task_body_declaration_5 REF tf_data_type identifier

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              TASK task_body_declaration 
                   identifier SEMICOLON task_body_declaration_5 task_body_declaration_6 ENDTASK 
                                        task_body_declaration_5 task_item_declaration 
                                                                REF tf_data_type identifier variable_dimension list_of_tf_variable_identifiers_5 SEMICOLON 
                                                                                            (?)

** In state 2289, looking ahead at LBRACK, shifting is permitted
** because of the following sub-derivation:

associative_dimension 
. LBRACK data_type RBRACK 

** In state 2289, looking ahead at LBRACK, reducing production
** variable_dimension_2 ->
** is permitted because of the following sub-derivation:

variable_dimension_2 
variable_dimension_2 unpacked_dimension // lookahead token appears because unpacked_dimension can begin with LBRACK
. 

** Conflict (shift/reduce) in state 2286.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 TASK identifier SEMICOLON task_body_declaration_5

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              TASK task_body_declaration 
                   (?)

** In state 2286, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

identifier SEMICOLON task_body_declaration_5 task_body_declaration_6 ENDTASK 
                     task_body_declaration_5 task_item_declaration 
                                             block_item_declaration 
                                             block_data_declaration 
                                             block_variable_declaration 
                                             data_type identifier variable_dimension list_of_variable_identifiers_4 SEMICOLON 
                                             identifier type_declaration_identifier_3 data_type_11 
                                             . SIMPLE_IDENTIFIER 

** In state 2286, looking ahead at SIMPLE_IDENTIFIER, reducing production
** task_body_declaration_6 ->
** is permitted because of the following sub-derivation:

identifier SEMICOLON task_body_declaration_5 task_body_declaration_6 ENDTASK 
                                             task_body_declaration_6 statement_or_null // lookahead token appears because statement_or_null can begin with SIMPLE_IDENTIFIER
                                             . 

** Conflict (shift/reduce) in state 2271.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 FUNCTION identifier DOT identifier LPAREN function_port_item function_port_list_3 RPAREN SEMICOLON function_body_declaration_20

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              FUNCTION function_body_declaration 
                       (?)

** In state 2271, looking ahead at SIMPLE_IDENTIFIER, reducing production
** function_body_declaration_21 ->
** is permitted because of the following sub-derivation:

identifier DOT identifier LPAREN function_port_item function_port_list_3 RPAREN SEMICOLON function_body_declaration_20 function_body_declaration_21 ENDFUNCTION 
                                                                                                                       function_body_declaration_21 function_statement_or_null // lookahead token appears because function_statement_or_null can begin with SIMPLE_IDENTIFIER
                                                                                                                       . 

** In state 2271, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

identifier DOT identifier LPAREN function_port_item function_port_list_3 RPAREN SEMICOLON function_body_declaration_20 function_body_declaration_21 ENDFUNCTION 
                                                                                          function_body_declaration_20 block_item_declaration 
                                                                                                                       block_data_declaration 
                                                                                                                       block_variable_declaration 
                                                                                                                       data_type identifier variable_dimension list_of_variable_identifiers_4 SEMICOLON 
                                                                                                                       identifier type_declaration_identifier_3 data_type_11 
                                                                                                                       . SIMPLE_IDENTIFIER 

** Conflict (shift/reduce) in state 2261.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 FUNCTION identifier DOT identifier SEMICOLON function_body_declaration_7

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              FUNCTION function_body_declaration 
                       (?)

** In state 2261, looking ahead at SIMPLE_IDENTIFIER, reducing production
** function_body_declaration_8 ->
** is permitted because of the following sub-derivation:

identifier DOT identifier SEMICOLON function_body_declaration_7 function_body_declaration_8 ENDFUNCTION 
                                                                function_body_declaration_8 function_statement_or_null // lookahead token appears because function_statement_or_null can begin with SIMPLE_IDENTIFIER
                                                                . 

** In state 2261, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

identifier DOT identifier SEMICOLON function_body_declaration_7 function_body_declaration_8 ENDFUNCTION 
                                    function_body_declaration_7 function_item_declaration 
                                                                block_item_declaration 
                                                                block_data_declaration 
                                                                block_variable_declaration 
                                                                data_type identifier variable_dimension list_of_variable_identifiers_4 SEMICOLON 
                                                                identifier type_declaration_identifier_3 data_type_11 
                                                                . SIMPLE_IDENTIFIER 

** Conflict (shift/reduce) in state 2253.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 FUNCTION identifier LPAREN function_port_item function_port_list_3 RPAREN SEMICOLON function_body_declaration_20

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              FUNCTION function_body_declaration 
                       (?)

** In state 2253, looking ahead at SIMPLE_IDENTIFIER, reducing production
** function_body_declaration_21 ->
** is permitted because of the following sub-derivation:

identifier LPAREN function_port_item function_port_list_3 RPAREN SEMICOLON function_body_declaration_20 function_body_declaration_21 ENDFUNCTION 
                                                                                                        function_body_declaration_21 function_statement_or_null // lookahead token appears because function_statement_or_null can begin with SIMPLE_IDENTIFIER
                                                                                                        . 

** In state 2253, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

identifier LPAREN function_port_item function_port_list_3 RPAREN SEMICOLON function_body_declaration_20 function_body_declaration_21 ENDFUNCTION 
                                                                           function_body_declaration_20 block_item_declaration 
                                                                                                        block_data_declaration 
                                                                                                        block_variable_declaration 
                                                                                                        data_type identifier variable_dimension list_of_variable_identifiers_4 SEMICOLON 
                                                                                                        identifier type_declaration_identifier_3 data_type_11 
                                                                                                        . SIMPLE_IDENTIFIER 

** Conflict (shift/reduce) in state 2243.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 FUNCTION identifier SEMICOLON function_body_declaration_7

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              FUNCTION function_body_declaration 
                       (?)

** In state 2243, looking ahead at SIMPLE_IDENTIFIER, reducing production
** function_body_declaration_8 ->
** is permitted because of the following sub-derivation:

identifier SEMICOLON function_body_declaration_7 function_body_declaration_8 ENDFUNCTION 
                                                 function_body_declaration_8 function_statement_or_null // lookahead token appears because function_statement_or_null can begin with SIMPLE_IDENTIFIER
                                                 . 

** In state 2243, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

identifier SEMICOLON function_body_declaration_7 function_body_declaration_8 ENDFUNCTION 
                     function_body_declaration_7 function_item_declaration 
                                                 block_item_declaration 
                                                 block_data_declaration 
                                                 block_variable_declaration 
                                                 data_type identifier variable_dimension list_of_variable_identifiers_4 SEMICOLON 
                                                 identifier type_declaration_identifier_3 data_type_11 
                                                 . SIMPLE_IDENTIFIER 

** Conflict (shift/reduce) in state 2235.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 FUNCTION range_or_type identifier DOT identifier LPAREN function_port_item function_port_list_3 RPAREN SEMICOLON function_body_declaration_20

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              FUNCTION function_body_declaration 
                       (?)

** In state 2235, looking ahead at SIMPLE_IDENTIFIER, reducing production
** function_body_declaration_21 ->
** is permitted because of the following sub-derivation:

range_or_type identifier DOT identifier LPAREN function_port_item function_port_list_3 RPAREN SEMICOLON function_body_declaration_20 function_body_declaration_21 ENDFUNCTION 
                                                                                                                                     function_body_declaration_21 function_statement_or_null // lookahead token appears because function_statement_or_null can begin with SIMPLE_IDENTIFIER
                                                                                                                                     . 

** In state 2235, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

range_or_type identifier DOT identifier LPAREN function_port_item function_port_list_3 RPAREN SEMICOLON function_body_declaration_20 function_body_declaration_21 ENDFUNCTION 
                                                                                                        function_body_declaration_20 block_item_declaration 
                                                                                                                                     block_data_declaration 
                                                                                                                                     block_variable_declaration 
                                                                                                                                     data_type identifier variable_dimension list_of_variable_identifiers_4 SEMICOLON 
                                                                                                                                     identifier type_declaration_identifier_3 data_type_11 
                                                                                                                                     . SIMPLE_IDENTIFIER 

** Conflict (shift/reduce) in state 2225.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 FUNCTION range_or_type identifier DOT identifier SEMICOLON function_body_declaration_7

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              FUNCTION function_body_declaration 
                       (?)

** In state 2225, looking ahead at SIMPLE_IDENTIFIER, reducing production
** function_body_declaration_8 ->
** is permitted because of the following sub-derivation:

range_or_type identifier DOT identifier SEMICOLON function_body_declaration_7 function_body_declaration_8 ENDFUNCTION 
                                                                              function_body_declaration_8 function_statement_or_null // lookahead token appears because function_statement_or_null can begin with SIMPLE_IDENTIFIER
                                                                              . 

** In state 2225, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

range_or_type identifier DOT identifier SEMICOLON function_body_declaration_7 function_body_declaration_8 ENDFUNCTION 
                                                  function_body_declaration_7 function_item_declaration 
                                                                              block_item_declaration 
                                                                              block_data_declaration 
                                                                              block_variable_declaration 
                                                                              data_type identifier variable_dimension list_of_variable_identifiers_4 SEMICOLON 
                                                                              identifier type_declaration_identifier_3 data_type_11 
                                                                              . SIMPLE_IDENTIFIER 

** Conflict (shift/reduce) in state 2217.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 FUNCTION range_or_type identifier LPAREN function_port_item function_port_list_3 RPAREN SEMICOLON function_body_declaration_20

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              FUNCTION function_body_declaration 
                       (?)

** In state 2217, looking ahead at SIMPLE_IDENTIFIER, reducing production
** function_body_declaration_21 ->
** is permitted because of the following sub-derivation:

range_or_type identifier LPAREN function_port_item function_port_list_3 RPAREN SEMICOLON function_body_declaration_20 function_body_declaration_21 ENDFUNCTION 
                                                                                                                      function_body_declaration_21 function_statement_or_null // lookahead token appears because function_statement_or_null can begin with SIMPLE_IDENTIFIER
                                                                                                                      . 

** In state 2217, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

range_or_type identifier LPAREN function_port_item function_port_list_3 RPAREN SEMICOLON function_body_declaration_20 function_body_declaration_21 ENDFUNCTION 
                                                                                         function_body_declaration_20 block_item_declaration 
                                                                                                                      block_data_declaration 
                                                                                                                      block_variable_declaration 
                                                                                                                      data_type identifier variable_dimension list_of_variable_identifiers_4 SEMICOLON 
                                                                                                                      identifier type_declaration_identifier_3 data_type_11 
                                                                                                                      . SIMPLE_IDENTIFIER 

** Conflict (shift/reduce) in state 2207.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 FUNCTION range_or_type identifier SEMICOLON function_body_declaration_7

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              FUNCTION function_body_declaration 
                       (?)

** In state 2207, looking ahead at SIMPLE_IDENTIFIER, reducing production
** function_body_declaration_8 ->
** is permitted because of the following sub-derivation:

range_or_type identifier SEMICOLON function_body_declaration_7 function_body_declaration_8 ENDFUNCTION 
                                                               function_body_declaration_8 function_statement_or_null // lookahead token appears because function_statement_or_null can begin with SIMPLE_IDENTIFIER
                                                               . 

** In state 2207, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

range_or_type identifier SEMICOLON function_body_declaration_7 function_body_declaration_8 ENDFUNCTION 
                                   function_body_declaration_7 function_item_declaration 
                                                               block_item_declaration 
                                                               block_data_declaration 
                                                               block_variable_declaration 
                                                               data_type identifier variable_dimension list_of_variable_identifiers_4 SEMICOLON 
                                                               identifier type_declaration_identifier_3 data_type_11 
                                                               . SIMPLE_IDENTIFIER 

** Conflict (shift/reduce) in state 2198.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 FUNCTION signing identifier DOT identifier LPAREN function_port_item function_port_list_3 RPAREN SEMICOLON function_body_declaration_20

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              FUNCTION function_body_declaration 
                       (?)

** In state 2198, looking ahead at SIMPLE_IDENTIFIER, reducing production
** function_body_declaration_21 ->
** is permitted because of the following sub-derivation:

signing identifier DOT identifier LPAREN function_port_item function_port_list_3 RPAREN SEMICOLON function_body_declaration_20 function_body_declaration_21 ENDFUNCTION 
                                                                                                                               function_body_declaration_21 function_statement_or_null // lookahead token appears because function_statement_or_null can begin with SIMPLE_IDENTIFIER
                                                                                                                               . 

** In state 2198, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

signing identifier DOT identifier LPAREN function_port_item function_port_list_3 RPAREN SEMICOLON function_body_declaration_20 function_body_declaration_21 ENDFUNCTION 
                                                                                                  function_body_declaration_20 block_item_declaration 
                                                                                                                               block_data_declaration 
                                                                                                                               block_variable_declaration 
                                                                                                                               data_type identifier variable_dimension list_of_variable_identifiers_4 SEMICOLON 
                                                                                                                               identifier type_declaration_identifier_3 data_type_11 
                                                                                                                               . SIMPLE_IDENTIFIER 

** Conflict (shift/reduce) in state 2188.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 FUNCTION signing identifier DOT identifier SEMICOLON function_body_declaration_7

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              FUNCTION function_body_declaration 
                       (?)

** In state 2188, looking ahead at SIMPLE_IDENTIFIER, reducing production
** function_body_declaration_8 ->
** is permitted because of the following sub-derivation:

signing identifier DOT identifier SEMICOLON function_body_declaration_7 function_body_declaration_8 ENDFUNCTION 
                                                                        function_body_declaration_8 function_statement_or_null // lookahead token appears because function_statement_or_null can begin with SIMPLE_IDENTIFIER
                                                                        . 

** In state 2188, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

signing identifier DOT identifier SEMICOLON function_body_declaration_7 function_body_declaration_8 ENDFUNCTION 
                                            function_body_declaration_7 function_item_declaration 
                                                                        block_item_declaration 
                                                                        block_data_declaration 
                                                                        block_variable_declaration 
                                                                        data_type identifier variable_dimension list_of_variable_identifiers_4 SEMICOLON 
                                                                        identifier type_declaration_identifier_3 data_type_11 
                                                                        . SIMPLE_IDENTIFIER 

** Conflict (shift/reduce) in state 2180.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 FUNCTION signing identifier LPAREN function_port_item function_port_list_3 RPAREN SEMICOLON function_body_declaration_20

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              FUNCTION function_body_declaration 
                       (?)

** In state 2180, looking ahead at SIMPLE_IDENTIFIER, reducing production
** function_body_declaration_21 ->
** is permitted because of the following sub-derivation:

signing identifier LPAREN function_port_item function_port_list_3 RPAREN SEMICOLON function_body_declaration_20 function_body_declaration_21 ENDFUNCTION 
                                                                                                                function_body_declaration_21 function_statement_or_null // lookahead token appears because function_statement_or_null can begin with SIMPLE_IDENTIFIER
                                                                                                                . 

** In state 2180, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

signing identifier LPAREN function_port_item function_port_list_3 RPAREN SEMICOLON function_body_declaration_20 function_body_declaration_21 ENDFUNCTION 
                                                                                   function_body_declaration_20 block_item_declaration 
                                                                                                                block_data_declaration 
                                                                                                                block_variable_declaration 
                                                                                                                data_type identifier variable_dimension list_of_variable_identifiers_4 SEMICOLON 
                                                                                                                identifier type_declaration_identifier_3 data_type_11 
                                                                                                                . SIMPLE_IDENTIFIER 

** Conflict (shift/reduce) in state 2170.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 FUNCTION signing identifier SEMICOLON function_body_declaration_7

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              FUNCTION function_body_declaration 
                       (?)

** In state 2170, looking ahead at SIMPLE_IDENTIFIER, reducing production
** function_body_declaration_8 ->
** is permitted because of the following sub-derivation:

signing identifier SEMICOLON function_body_declaration_7 function_body_declaration_8 ENDFUNCTION 
                                                         function_body_declaration_8 function_statement_or_null // lookahead token appears because function_statement_or_null can begin with SIMPLE_IDENTIFIER
                                                         . 

** In state 2170, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

signing identifier SEMICOLON function_body_declaration_7 function_body_declaration_8 ENDFUNCTION 
                             function_body_declaration_7 function_item_declaration 
                                                         block_item_declaration 
                                                         block_data_declaration 
                                                         block_variable_declaration 
                                                         data_type identifier variable_dimension list_of_variable_identifiers_4 SEMICOLON 
                                                         identifier type_declaration_identifier_3 data_type_11 
                                                         . SIMPLE_IDENTIFIER 

** Conflict (shift/reduce) in state 2163.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 FUNCTION signing range_or_type identifier DOT identifier LPAREN function_port_item function_port_list_3 RPAREN SEMICOLON function_body_declaration_20

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              FUNCTION function_body_declaration 
                       (?)

** In state 2163, looking ahead at SIMPLE_IDENTIFIER, reducing production
** function_body_declaration_21 ->
** is permitted because of the following sub-derivation:

signing range_or_type identifier DOT identifier LPAREN function_port_item function_port_list_3 RPAREN SEMICOLON function_body_declaration_20 function_body_declaration_21 ENDFUNCTION 
                                                                                                                                             function_body_declaration_21 function_statement_or_null // lookahead token appears because function_statement_or_null can begin with SIMPLE_IDENTIFIER
                                                                                                                                             . 

** In state 2163, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

signing range_or_type identifier DOT identifier LPAREN function_port_item function_port_list_3 RPAREN SEMICOLON function_body_declaration_20 function_body_declaration_21 ENDFUNCTION 
                                                                                                                function_body_declaration_20 block_item_declaration 
                                                                                                                                             block_data_declaration 
                                                                                                                                             block_variable_declaration 
                                                                                                                                             data_type identifier variable_dimension list_of_variable_identifiers_4 SEMICOLON 
                                                                                                                                             identifier type_declaration_identifier_3 data_type_11 
                                                                                                                                             . SIMPLE_IDENTIFIER 

** Conflict (shift/reduce) in state 2153.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 FUNCTION signing range_or_type identifier DOT identifier SEMICOLON function_body_declaration_7

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              FUNCTION function_body_declaration 
                       (?)

** In state 2153, looking ahead at SIMPLE_IDENTIFIER, reducing production
** function_body_declaration_8 ->
** is permitted because of the following sub-derivation:

signing range_or_type identifier DOT identifier SEMICOLON function_body_declaration_7 function_body_declaration_8 ENDFUNCTION 
                                                                                      function_body_declaration_8 function_statement_or_null // lookahead token appears because function_statement_or_null can begin with SIMPLE_IDENTIFIER
                                                                                      . 

** In state 2153, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

signing range_or_type identifier DOT identifier SEMICOLON function_body_declaration_7 function_body_declaration_8 ENDFUNCTION 
                                                          function_body_declaration_7 function_item_declaration 
                                                                                      block_item_declaration 
                                                                                      block_data_declaration 
                                                                                      block_variable_declaration 
                                                                                      data_type identifier variable_dimension list_of_variable_identifiers_4 SEMICOLON 
                                                                                      identifier type_declaration_identifier_3 data_type_11 
                                                                                      . SIMPLE_IDENTIFIER 

** Conflict (reduce/reduce) in state 2149.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 TASK identifier LPAREN data_type

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              TASK task_body_declaration 
                   identifier LPAREN task_port_list RPAREN SEMICOLON task_body_declaration_16 task_body_declaration_17 ENDTASK 
                                     task_port_item task_port_list_3 
                                     (?)

** In state 2149, looking ahead at SIMPLE_IDENTIFIER, reducing production
** port_type -> data_type
** is permitted because of the following sub-derivation:

port_type identifier list_of_tf_port_identifiers_3 list_of_tf_port_identifiers_5 // lookahead token appears because identifier can begin with SIMPLE_IDENTIFIER
data_type . 

** In state 2149, looking ahead at SIMPLE_IDENTIFIER, reducing production
** tf_data_type -> data_type
** is permitted because of the following sub-derivation:

tf_data_type identifier variable_dimension list_of_tf_variable_identifiers_5 // lookahead token appears because identifier can begin with SIMPLE_IDENTIFIER
data_type . 

** Conflict (shift/reduce) in state 2140.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 FUNCTION signing range_or_type identifier LPAREN function_port_item function_port_list_3 RPAREN SEMICOLON function_body_declaration_20

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              FUNCTION function_body_declaration 
                       (?)

** In state 2140, looking ahead at SIMPLE_IDENTIFIER, reducing production
** function_body_declaration_21 ->
** is permitted because of the following sub-derivation:

signing range_or_type identifier LPAREN function_port_item function_port_list_3 RPAREN SEMICOLON function_body_declaration_20 function_body_declaration_21 ENDFUNCTION 
                                                                                                                              function_body_declaration_21 function_statement_or_null // lookahead token appears because function_statement_or_null can begin with SIMPLE_IDENTIFIER
                                                                                                                              . 

** In state 2140, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

signing range_or_type identifier LPAREN function_port_item function_port_list_3 RPAREN SEMICOLON function_body_declaration_20 function_body_declaration_21 ENDFUNCTION 
                                                                                                 function_body_declaration_20 block_item_declaration 
                                                                                                                              block_data_declaration 
                                                                                                                              block_variable_declaration 
                                                                                                                              data_type identifier variable_dimension list_of_variable_identifiers_4 SEMICOLON 
                                                                                                                              identifier type_declaration_identifier_3 data_type_11 
                                                                                                                              . SIMPLE_IDENTIFIER 

** Conflict (shift/reduce) in state 2130.
** Token involved: COMMA
** This state is reached from start after reading:

source_text_3 FUNCTION identifier LPAREN port_type identifier list_of_tf_port_identifiers_3 list_of_tf_port_identifiers_5

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              FUNCTION function_body_declaration 
                       (?)

** In state 2130, looking ahead at COMMA, reducing production
** function_port_item -> port_type identifier list_of_tf_port_identifiers_3 list_of_tf_port_identifiers_5
** is permitted because of the following sub-derivation:

identifier LPAREN function_port_item function_port_list_3 RPAREN SEMICOLON function_body_declaration_20 function_body_declaration_21 ENDFUNCTION // lookahead token appears because function_port_list_3 can begin with COMMA
                  port_type identifier list_of_tf_port_identifiers_3 list_of_tf_port_identifiers_5 . 

** In state 2130, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

identifier LPAREN function_port_item function_port_list_3 RPAREN SEMICOLON function_body_declaration_20 function_body_declaration_21 ENDFUNCTION 
                  port_type identifier list_of_tf_port_identifiers_3 list_of_tf_port_identifiers_5 
                                                                     list_of_tf_port_identifiers_5 . COMMA identifier list_of_tf_port_identifiers_5_6 

** Conflict (shift/reduce) in state 2129.
** Token involved: COMMA
** This state is reached from start after reading:

source_text_3 FUNCTION identifier LPAREN port_type identifier list_of_tf_port_identifiers_3 EQUALS expression list_of_tf_port_identifiers_5

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              FUNCTION function_body_declaration 
                       (?)

** In state 2129, looking ahead at COMMA, reducing production
** function_port_item -> port_type identifier list_of_tf_port_identifiers_3 EQUALS expression list_of_tf_port_identifiers_5
** is permitted because of the following sub-derivation:

identifier LPAREN function_port_item function_port_list_3 RPAREN SEMICOLON function_body_declaration_20 function_body_declaration_21 ENDFUNCTION // lookahead token appears because function_port_list_3 can begin with COMMA
                  port_type identifier list_of_tf_port_identifiers_3 EQUALS expression list_of_tf_port_identifiers_5 . 

** In state 2129, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

identifier LPAREN function_port_item function_port_list_3 RPAREN SEMICOLON function_body_declaration_20 function_body_declaration_21 ENDFUNCTION 
                  port_type identifier list_of_tf_port_identifiers_3 EQUALS expression list_of_tf_port_identifiers_5 
                                                                                       list_of_tf_port_identifiers_5 . COMMA identifier list_of_tf_port_identifiers_5_6 

** Conflict (shift/reduce/reduce) in state 2127.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 FUNCTION identifier LPAREN port_type identifier list_of_tf_port_identifiers_3 EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              FUNCTION function_body_declaration 
                       identifier LPAREN function_port_item function_port_list_3 RPAREN SEMICOLON function_body_declaration_20 function_body_declaration_21 ENDFUNCTION 
                                         port_type identifier list_of_tf_port_identifiers_3 EQUALS expression list_of_tf_port_identifiers_5 
                                                                                                   primary 
                                                                                                   (?)

** In state 2127, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 2127, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 2127, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce) in state 2109.
** Token involved: COMMA
** This state is reached from start after reading:

source_text_3 FUNCTION identifier LPAREN tf_data_type identifier variable_dimension list_of_tf_variable_identifiers_5

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              FUNCTION function_body_declaration 
                       (?)

** In state 2109, looking ahead at COMMA, reducing production
** function_port_item -> tf_data_type identifier variable_dimension list_of_tf_variable_identifiers_5
** is permitted because of the following sub-derivation:

identifier LPAREN function_port_item function_port_list_3 RPAREN SEMICOLON function_body_declaration_20 function_body_declaration_21 ENDFUNCTION // lookahead token appears because function_port_list_3 can begin with COMMA
                  tf_data_type identifier variable_dimension list_of_tf_variable_identifiers_5 . 

** In state 2109, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

identifier LPAREN function_port_item function_port_list_3 RPAREN SEMICOLON function_body_declaration_20 function_body_declaration_21 ENDFUNCTION 
                  tf_data_type identifier variable_dimension list_of_tf_variable_identifiers_5 
                                                             list_of_tf_variable_identifiers_5 . COMMA identifier variable_dimension 

** Conflict (shift/reduce) in state 2108.
** Token involved: COMMA
** This state is reached from start after reading:

source_text_3 FUNCTION identifier LPAREN tf_data_type identifier variable_dimension EQUALS expression list_of_tf_variable_identifiers_5

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              FUNCTION function_body_declaration 
                       (?)

** In state 2108, looking ahead at COMMA, reducing production
** function_port_item -> tf_data_type identifier variable_dimension EQUALS expression list_of_tf_variable_identifiers_5
** is permitted because of the following sub-derivation:

identifier LPAREN function_port_item function_port_list_3 RPAREN SEMICOLON function_body_declaration_20 function_body_declaration_21 ENDFUNCTION // lookahead token appears because function_port_list_3 can begin with COMMA
                  tf_data_type identifier variable_dimension EQUALS expression list_of_tf_variable_identifiers_5 . 

** In state 2108, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

identifier LPAREN function_port_item function_port_list_3 RPAREN SEMICOLON function_body_declaration_20 function_body_declaration_21 ENDFUNCTION 
                  tf_data_type identifier variable_dimension EQUALS expression list_of_tf_variable_identifiers_5 
                                                                               list_of_tf_variable_identifiers_5 . COMMA identifier variable_dimension 

** Conflict (shift/reduce/reduce) in state 2106.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 FUNCTION identifier LPAREN tf_data_type identifier variable_dimension EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              FUNCTION function_body_declaration 
                       identifier LPAREN function_port_item function_port_list_3 RPAREN SEMICOLON function_body_declaration_20 function_body_declaration_21 ENDFUNCTION 
                                         tf_data_type identifier variable_dimension EQUALS expression list_of_tf_variable_identifiers_5 
                                                                                           primary 
                                                                                           (?)

** In state 2106, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 2106, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 2106, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce) in state 2104.
** Token involved: LBRACK
** This state is reached from start after reading:

source_text_3 FUNCTION identifier LPAREN tf_data_type identifier

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              FUNCTION function_body_declaration 
                       identifier LPAREN function_port_item function_port_list_3 RPAREN SEMICOLON function_body_declaration_20 function_body_declaration_21 ENDFUNCTION 
                                         tf_data_type identifier variable_dimension list_of_tf_variable_identifiers_5 
                                                                 (?)

** In state 2104, looking ahead at LBRACK, shifting is permitted
** because of the following sub-derivation:

associative_dimension 
. LBRACK data_type RBRACK 

** In state 2104, looking ahead at LBRACK, reducing production
** variable_dimension_2 ->
** is permitted because of the following sub-derivation:

variable_dimension_2 
variable_dimension_2 unpacked_dimension // lookahead token appears because unpacked_dimension can begin with LBRACK
. 

** Conflict (shift/reduce) in state 2099.
** Token involved: COMMA
** This state is reached from start after reading:

source_text_3 FUNCTION identifier LPAREN CONST REF tf_data_type identifier variable_dimension list_of_tf_variable_identifiers_5

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              FUNCTION function_body_declaration 
                       (?)

** In state 2099, looking ahead at COMMA, reducing production
** function_port_item -> CONST REF tf_data_type identifier variable_dimension list_of_tf_variable_identifiers_5
** is permitted because of the following sub-derivation:

identifier LPAREN function_port_item function_port_list_3 RPAREN SEMICOLON function_body_declaration_20 function_body_declaration_21 ENDFUNCTION // lookahead token appears because function_port_list_3 can begin with COMMA
                  CONST REF tf_data_type identifier variable_dimension list_of_tf_variable_identifiers_5 . 

** In state 2099, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

identifier LPAREN function_port_item function_port_list_3 RPAREN SEMICOLON function_body_declaration_20 function_body_declaration_21 ENDFUNCTION 
                  CONST REF tf_data_type identifier variable_dimension list_of_tf_variable_identifiers_5 
                                                                       list_of_tf_variable_identifiers_5 . COMMA identifier variable_dimension 

** Conflict (shift/reduce) in state 2098.
** Token involved: COMMA
** This state is reached from start after reading:

source_text_3 FUNCTION identifier LPAREN CONST REF tf_data_type identifier variable_dimension EQUALS expression list_of_tf_variable_identifiers_5

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              FUNCTION function_body_declaration 
                       (?)

** In state 2098, looking ahead at COMMA, reducing production
** function_port_item -> CONST REF tf_data_type identifier variable_dimension EQUALS expression list_of_tf_variable_identifiers_5
** is permitted because of the following sub-derivation:

identifier LPAREN function_port_item function_port_list_3 RPAREN SEMICOLON function_body_declaration_20 function_body_declaration_21 ENDFUNCTION // lookahead token appears because function_port_list_3 can begin with COMMA
                  CONST REF tf_data_type identifier variable_dimension EQUALS expression list_of_tf_variable_identifiers_5 . 

** In state 2098, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

identifier LPAREN function_port_item function_port_list_3 RPAREN SEMICOLON function_body_declaration_20 function_body_declaration_21 ENDFUNCTION 
                  CONST REF tf_data_type identifier variable_dimension EQUALS expression list_of_tf_variable_identifiers_5 
                                                                                         list_of_tf_variable_identifiers_5 . COMMA identifier variable_dimension 

** Conflict (shift/reduce/reduce) in state 2096.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 FUNCTION identifier LPAREN CONST REF tf_data_type identifier variable_dimension EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              FUNCTION function_body_declaration 
                       identifier LPAREN function_port_item function_port_list_3 RPAREN SEMICOLON function_body_declaration_20 function_body_declaration_21 ENDFUNCTION 
                                         CONST REF tf_data_type identifier variable_dimension EQUALS expression list_of_tf_variable_identifiers_5 
                                                                                                     primary 
                                                                                                     (?)

** In state 2096, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 2096, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 2096, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce) in state 2094.
** Token involved: LBRACK
** This state is reached from start after reading:

source_text_3 FUNCTION identifier LPAREN CONST REF tf_data_type identifier

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              FUNCTION function_body_declaration 
                       identifier LPAREN function_port_item function_port_list_3 RPAREN SEMICOLON function_body_declaration_20 function_body_declaration_21 ENDFUNCTION 
                                         CONST REF tf_data_type identifier variable_dimension list_of_tf_variable_identifiers_5 
                                                                           (?)

** In state 2094, looking ahead at LBRACK, shifting is permitted
** because of the following sub-derivation:

associative_dimension 
. LBRACK data_type RBRACK 

** In state 2094, looking ahead at LBRACK, reducing production
** variable_dimension_2 ->
** is permitted because of the following sub-derivation:

variable_dimension_2 
variable_dimension_2 unpacked_dimension // lookahead token appears because unpacked_dimension can begin with LBRACK
. 

** Conflict (shift/reduce) in state 2090.
** Token involved: COMMA
** This state is reached from start after reading:

source_text_3 FUNCTION identifier LPAREN REF tf_data_type identifier variable_dimension list_of_tf_variable_identifiers_5

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              FUNCTION function_body_declaration 
                       (?)

** In state 2090, looking ahead at COMMA, reducing production
** function_port_item -> REF tf_data_type identifier variable_dimension list_of_tf_variable_identifiers_5
** is permitted because of the following sub-derivation:

identifier LPAREN function_port_item function_port_list_3 RPAREN SEMICOLON function_body_declaration_20 function_body_declaration_21 ENDFUNCTION // lookahead token appears because function_port_list_3 can begin with COMMA
                  REF tf_data_type identifier variable_dimension list_of_tf_variable_identifiers_5 . 

** In state 2090, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

identifier LPAREN function_port_item function_port_list_3 RPAREN SEMICOLON function_body_declaration_20 function_body_declaration_21 ENDFUNCTION 
                  REF tf_data_type identifier variable_dimension list_of_tf_variable_identifiers_5 
                                                                 list_of_tf_variable_identifiers_5 . COMMA identifier variable_dimension 

** Conflict (shift/reduce) in state 2089.
** Token involved: COMMA
** This state is reached from start after reading:

source_text_3 FUNCTION identifier LPAREN REF tf_data_type identifier variable_dimension EQUALS expression list_of_tf_variable_identifiers_5

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              FUNCTION function_body_declaration 
                       (?)

** In state 2089, looking ahead at COMMA, reducing production
** function_port_item -> REF tf_data_type identifier variable_dimension EQUALS expression list_of_tf_variable_identifiers_5
** is permitted because of the following sub-derivation:

identifier LPAREN function_port_item function_port_list_3 RPAREN SEMICOLON function_body_declaration_20 function_body_declaration_21 ENDFUNCTION // lookahead token appears because function_port_list_3 can begin with COMMA
                  REF tf_data_type identifier variable_dimension EQUALS expression list_of_tf_variable_identifiers_5 . 

** In state 2089, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

identifier LPAREN function_port_item function_port_list_3 RPAREN SEMICOLON function_body_declaration_20 function_body_declaration_21 ENDFUNCTION 
                  REF tf_data_type identifier variable_dimension EQUALS expression list_of_tf_variable_identifiers_5 
                                                                                   list_of_tf_variable_identifiers_5 . COMMA identifier variable_dimension 

** Conflict (shift/reduce/reduce) in state 2087.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 FUNCTION identifier LPAREN REF tf_data_type identifier variable_dimension EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              FUNCTION function_body_declaration 
                       identifier LPAREN function_port_item function_port_list_3 RPAREN SEMICOLON function_body_declaration_20 function_body_declaration_21 ENDFUNCTION 
                                         REF tf_data_type identifier variable_dimension EQUALS expression list_of_tf_variable_identifiers_5 
                                                                                               primary 
                                                                                               (?)

** In state 2087, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 2087, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 2087, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce) in state 2085.
** Token involved: LBRACK
** This state is reached from start after reading:

source_text_3 FUNCTION identifier LPAREN REF tf_data_type identifier

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              FUNCTION function_body_declaration 
                       identifier LPAREN function_port_item function_port_list_3 RPAREN SEMICOLON function_body_declaration_20 function_body_declaration_21 ENDFUNCTION 
                                         REF tf_data_type identifier variable_dimension list_of_tf_variable_identifiers_5 
                                                                     (?)

** In state 2085, looking ahead at LBRACK, shifting is permitted
** because of the following sub-derivation:

associative_dimension 
. LBRACK data_type RBRACK 

** In state 2085, looking ahead at LBRACK, reducing production
** variable_dimension_2 ->
** is permitted because of the following sub-derivation:

variable_dimension_2 
variable_dimension_2 unpacked_dimension // lookahead token appears because unpacked_dimension can begin with LBRACK
. 

** Conflict (shift/reduce) in state 2062.
** Tokens involved: XOR XNOR WOR WIRE WHILE WAND VOID VIRTUAL VBAR UNSIGNED_NUMBER UNSIGNED UNIQUE UNION TYPEDEF TRIREG TRIOR TRIAND TRI1 TRI0 TRI TRANIF1 TRANIF0 TRAN TOKEN_TWO TOKEN_THREE TOKEN_SIX TOKEN_SEVEN TOKEN_QUOTE_Z2 TOKEN_QUOTE_Z1 TOKEN_QUOTE_X2 TOKEN_QUOTE_X1 TOKEN_QUOTE_TRUE TOKEN_QUOTE_FALSE TOKEN_PLUS_PLUS TOKEN_ONE TOKEN_NINE TOKEN_FOUR TOKEN_FIVE TOKEN_EIGHT TOKEN_DASH_DASH TIME TILDE_VBAR TILDE THIS TASK SYSTEM_TASK_IDENTIFIER SYSTEM_FUNCTION_IDENTIFIER SVINT SUPPLY1 SUPPLY0 SUPER STRUCT STRING STATIC SPECPARAM SPECIFY SIMPLE_IDENTIFIER SIGNED SHORTREAL SHORTINT SEQUENCE SEMICOLON RTRANIF1 RTRANIF0 RTRAN RPMOS RNMOS RETURN REPEAT REG REF REALTIME REAL RCMOS P_XNOR P_NXOR P_NAND PULLUP PULLDOWN PROPERTY PROGRAM PRIORITY PMOS PLUS PLING PARAMETER OUTPUT OR OCTAL_BASE NULL NOTIF1 NOTIF0 NOT NOR NMOS NAND MODULE MODPORT MINUS MACROMODULE LPAREN LONGINT LOGIC LOCALPARAM LCURLY INTERFACE INTEGER INPUT INOUT INITIAL IMPORT IF HEX_BASE GENVAR GENERATE FUNCTION FOREVER FOR FINAL EXTERN EXPORT EVENT ENUM ENDMODULE ENDINTERFACE ENDGENERATE ENDFUNCTION ENDCASE END ELSE DOUBLE_QUOTES DO DISABLE DEFPARAM DEFAULT DECIMAL_BASE COVER CONTINUE CONSTRAINT CONST CMOS CLOCKING CLASS CHANDLE CASEZ CASEX CASE CARET BYTE BUFIF1 BUFIF0 BUF BREAK BIT BIND BINARY_BASE BEGIN BACKSLASH AUTOMATIC ASSIGN ASSERT AND AMPERSAND ALWAYS_LATCH ALWAYS_FF ALWAYS_COMB ALWAYS ALIAS
** The following explanations concentrate on token ELSE.
** This state is reached from start after reading:

source_text_3 INTERFACE identifier SEMICOLON interface_declaration_10 FINAL IF LPAREN expression RPAREN function_statement_or_null

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier SEMICOLON interface_declaration_10 ENDINTERFACE 
                                             interface_declaration_10 non_port_interface_item 
                                                                      interface_or_generate_item 
                                                                      FINAL function_statement_item 
                                                                            function_conditional_statement 
                                                                            (?)

** In state 2062, looking ahead at ELSE, shifting is permitted
** because of the following sub-derivation:

IF LPAREN expression RPAREN function_statement_or_null . ELSE function_statement_or_null 

** In state 2062, looking ahead at ELSE, reducing production
** function_if_else_if_statement_8 ->
** is permitted because of the following sub-derivation:

IF LPAREN expression RPAREN function_statement_or_null function_if_else_if_statement_8 ELSE function_statement_or_null // lookahead token appears
                                                       . 

** Conflict (shift/reduce/reduce) in state 2052.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 INTERFACE identifier SEMICOLON interface_declaration_10 FINAL DO function_statement_or_null WHILE LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier SEMICOLON interface_declaration_10 ENDINTERFACE 
                                             interface_declaration_10 non_port_interface_item 
                                                                      interface_or_generate_item 
                                                                      FINAL function_statement_item 
                                                                            function_loop_statement 
                                                                            DO function_statement_or_null WHILE LPAREN expression RPAREN SEMICOLON 
                                                                                                                       primary 
                                                                                                                       (?)

** In state 2052, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 2052, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 2052, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 2048.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 INTERFACE identifier SEMICOLON interface_declaration_10 FINAL CASEZ LPAREN expression RPAREN function_case_item function_case_statement_17

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier SEMICOLON interface_declaration_10 ENDINTERFACE 
                                             interface_declaration_10 non_port_interface_item 
                                                                      interface_or_generate_item 
                                                                      FINAL function_statement_item 
                                                                            function_case_statement 
                                                                            CASEZ LPAREN expression RPAREN function_case_item function_case_statement_17 ENDCASE 
                                                                                                                              function_case_statement_17 function_case_item 
                                                                                                                                                         expression function_case_item_3 COLON function_statement_or_null 
                                                                                                                                                         primary 
                                                                                                                                                         (?)

** In state 2048, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 2048, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 2048, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 2034.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 INTERFACE identifier SEMICOLON interface_declaration_10 FINAL unique_priority CASE LPAREN expression RPAREN function_case_item function_case_statement_8

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier SEMICOLON interface_declaration_10 ENDINTERFACE 
                                             interface_declaration_10 non_port_interface_item 
                                                                      interface_or_generate_item 
                                                                      FINAL function_statement_item 
                                                                            function_case_statement 
                                                                            unique_priority CASE LPAREN expression RPAREN function_case_item function_case_statement_8 ENDCASE 
                                                                                                                                             function_case_statement_8 function_case_item 
                                                                                                                                                                       expression function_case_item_3 COLON function_statement_or_null 
                                                                                                                                                                       primary 
                                                                                                                                                                       (?)

** In state 2034, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 2034, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 2034, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 2032.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 INTERFACE identifier SEMICOLON interface_declaration_10 FINAL unique_priority CASE LPAREN expression RPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier SEMICOLON interface_declaration_10 ENDINTERFACE 
                                             interface_declaration_10 non_port_interface_item 
                                                                      interface_or_generate_item 
                                                                      FINAL function_statement_item 
                                                                            function_case_statement 
                                                                            unique_priority CASE LPAREN expression RPAREN function_case_item function_case_statement_8 ENDCASE 
                                                                                                                          expression function_case_item_3 COLON function_statement_or_null 
                                                                                                                          primary 
                                                                                                                          (?)

** In state 2032, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 2032, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 2032, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 2030.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 INTERFACE identifier SEMICOLON interface_declaration_10 FINAL unique_priority CASE LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier SEMICOLON interface_declaration_10 ENDINTERFACE 
                                             interface_declaration_10 non_port_interface_item 
                                                                      interface_or_generate_item 
                                                                      FINAL function_statement_item 
                                                                            function_case_statement 
                                                                            unique_priority CASE LPAREN expression RPAREN function_case_item function_case_statement_8 ENDCASE 
                                                                                                        primary 
                                                                                                        (?)

** In state 2030, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 2030, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 2030, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 2027.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 INTERFACE identifier SEMICOLON interface_declaration_10 FINAL unique_priority CASEX LPAREN expression RPAREN function_case_item function_case_statement_26

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier SEMICOLON interface_declaration_10 ENDINTERFACE 
                                             interface_declaration_10 non_port_interface_item 
                                                                      interface_or_generate_item 
                                                                      FINAL function_statement_item 
                                                                            function_case_statement 
                                                                            unique_priority CASEX LPAREN expression RPAREN function_case_item function_case_statement_26 ENDCASE 
                                                                                                                                              function_case_statement_26 function_case_item 
                                                                                                                                                                         expression function_case_item_3 COLON function_statement_or_null 
                                                                                                                                                                         primary 
                                                                                                                                                                         (?)

** In state 2027, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 2027, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 2027, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 2025.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 INTERFACE identifier SEMICOLON interface_declaration_10 FINAL unique_priority CASEX LPAREN expression RPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier SEMICOLON interface_declaration_10 ENDINTERFACE 
                                             interface_declaration_10 non_port_interface_item 
                                                                      interface_or_generate_item 
                                                                      FINAL function_statement_item 
                                                                            function_case_statement 
                                                                            unique_priority CASEX LPAREN expression RPAREN function_case_item function_case_statement_26 ENDCASE 
                                                                                                                           expression function_case_item_3 COLON function_statement_or_null 
                                                                                                                           primary 
                                                                                                                           (?)

** In state 2025, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 2025, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 2025, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 2023.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 INTERFACE identifier SEMICOLON interface_declaration_10 FINAL unique_priority CASEX LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier SEMICOLON interface_declaration_10 ENDINTERFACE 
                                             interface_declaration_10 non_port_interface_item 
                                                                      interface_or_generate_item 
                                                                      FINAL function_statement_item 
                                                                            function_case_statement 
                                                                            unique_priority CASEX LPAREN expression RPAREN function_case_item function_case_statement_26 ENDCASE 
                                                                                                         primary 
                                                                                                         (?)

** In state 2023, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 2023, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 2023, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 2019.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 INTERFACE identifier SEMICOLON interface_declaration_10 FINAL unique_priority CASEZ LPAREN expression RPAREN function_case_item function_case_statement_17

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier SEMICOLON interface_declaration_10 ENDINTERFACE 
                                             interface_declaration_10 non_port_interface_item 
                                                                      interface_or_generate_item 
                                                                      FINAL function_statement_item 
                                                                            function_case_statement 
                                                                            unique_priority CASEZ LPAREN expression RPAREN function_case_item function_case_statement_17 ENDCASE 
                                                                                                                                              function_case_statement_17 function_case_item 
                                                                                                                                                                         expression function_case_item_3 COLON function_statement_or_null 
                                                                                                                                                                         primary 
                                                                                                                                                                         (?)

** In state 2019, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 2019, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 2019, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 2017.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 INTERFACE identifier SEMICOLON interface_declaration_10 FINAL unique_priority CASEZ LPAREN expression RPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier SEMICOLON interface_declaration_10 ENDINTERFACE 
                                             interface_declaration_10 non_port_interface_item 
                                                                      interface_or_generate_item 
                                                                      FINAL function_statement_item 
                                                                            function_case_statement 
                                                                            unique_priority CASEZ LPAREN expression RPAREN function_case_item function_case_statement_17 ENDCASE 
                                                                                                                           expression function_case_item_3 COLON function_statement_or_null 
                                                                                                                           primary 
                                                                                                                           (?)

** In state 2017, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 2017, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 2017, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 2015.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 INTERFACE identifier SEMICOLON interface_declaration_10 FINAL unique_priority CASEZ LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier SEMICOLON interface_declaration_10 ENDINTERFACE 
                                             interface_declaration_10 non_port_interface_item 
                                                                      interface_or_generate_item 
                                                                      FINAL function_statement_item 
                                                                            function_case_statement 
                                                                            unique_priority CASEZ LPAREN expression RPAREN function_case_item function_case_statement_17 ENDCASE 
                                                                                                         primary 
                                                                                                         (?)

** In state 2015, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 2015, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 2015, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 2013.
** Tokens involved: XOR XNOR WOR WIRE WHILE WAND VOID VIRTUAL VBAR UNSIGNED_NUMBER UNSIGNED UNIQUE UNION TYPEDEF TRIREG TRIOR TRIAND TRI1 TRI0 TRI TRANIF1 TRANIF0 TRAN TOKEN_TWO TOKEN_THREE TOKEN_SIX TOKEN_SEVEN TOKEN_QUOTE_Z2 TOKEN_QUOTE_Z1 TOKEN_QUOTE_X2 TOKEN_QUOTE_X1 TOKEN_QUOTE_TRUE TOKEN_QUOTE_FALSE TOKEN_PLUS_PLUS TOKEN_ONE TOKEN_NINE TOKEN_FOUR TOKEN_FIVE TOKEN_EIGHT TOKEN_DASH_DASH TIME TILDE_VBAR TILDE THIS TASK SYSTEM_TASK_IDENTIFIER SYSTEM_FUNCTION_IDENTIFIER SVINT SUPPLY1 SUPPLY0 SUPER STRUCT STRING STATIC SPECPARAM SPECIFY SIMPLE_IDENTIFIER SIGNED SHORTREAL SHORTINT SEQUENCE SEMICOLON RTRANIF1 RTRANIF0 RTRAN RPMOS RNMOS RETURN REPEAT REG REF REALTIME REAL RCMOS P_XNOR P_NXOR P_NAND PULLUP PULLDOWN PROPERTY PROGRAM PRIORITY PMOS PLUS PLING PARAMETER OUTPUT OR OCTAL_BASE NULL NOTIF1 NOTIF0 NOT NOR NMOS NAND MODULE MODPORT MINUS MACROMODULE LPAREN LONGINT LOGIC LOCALPARAM LCURLY INTERFACE INTEGER INPUT INOUT INITIAL IMPORT IF HEX_BASE GENVAR GENERATE FUNCTION FOREVER FOR FINAL EXTERN EXPORT EVENT ENUM ENDMODULE ENDINTERFACE ENDGENERATE ENDFUNCTION ENDCASE END ELSE DOUBLE_QUOTES DO DISABLE DEFPARAM DEFAULT DECIMAL_BASE COVER CONTINUE CONSTRAINT CONST CMOS CLOCKING CLASS CHANDLE CASEZ CASEX CASE CARET BYTE BUFIF1 BUFIF0 BUF BREAK BIT BIND BINARY_BASE BEGIN BACKSLASH AUTOMATIC ASSIGN ASSERT AND AMPERSAND ALWAYS_LATCH ALWAYS_FF ALWAYS_COMB ALWAYS ALIAS
** The following explanations concentrate on token ELSE.
** This state is reached from start after reading:

source_text_3 INTERFACE identifier SEMICOLON interface_declaration_10 FINAL IF LPAREN expression RPAREN function_statement_or_null function_if_else_if_statement_8 ELSE unique_priority IF LPAREN expression RPAREN function_statement_or_null

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier SEMICOLON interface_declaration_10 ENDINTERFACE 
                                             interface_declaration_10 non_port_interface_item 
                                                                      interface_or_generate_item 
                                                                      FINAL function_statement_item 
                                                                            function_conditional_statement 
                                                                            (?)

** In state 2013, looking ahead at ELSE, shifting is permitted
** because of the following sub-derivation:

IF LPAREN expression RPAREN function_statement_or_null function_if_else_if_statement_8 ELSE function_statement_or_null 
                                                                                            function_statement_item 
                                                                                            function_conditional_statement 
                                                                                            unique_priority IF LPAREN expression RPAREN function_statement_or_null . ELSE function_statement_or_null 

** In state 2013, looking ahead at ELSE, reducing production
** function_if_else_if_statement_8 ->
** is permitted because of the following sub-derivation:

IF LPAREN expression RPAREN function_statement_or_null function_if_else_if_statement_8 ELSE function_statement_or_null 
                                                                                            function_statement_item 
                                                                                            function_conditional_statement 
                                                                                            unique_priority IF LPAREN expression RPAREN function_statement_or_null function_if_else_if_statement_8 ELSE function_statement_or_null // lookahead token appears
                                                                                                                                                                   . 

** In state 2013, looking ahead at ELSE, reducing production
** function_if_else_if_statement_8 -> function_if_else_if_statement_8 ELSE unique_priority IF LPAREN expression RPAREN function_statement_or_null
** is permitted because of the following sub-derivation:

IF LPAREN expression RPAREN function_statement_or_null function_if_else_if_statement_8 ELSE function_statement_or_null // lookahead token appears
                                                       function_if_else_if_statement_8 ELSE unique_priority IF LPAREN expression RPAREN function_statement_or_null . 

** Conflict (shift/reduce/reduce) in state 2010.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 INTERFACE identifier SEMICOLON interface_declaration_10 FINAL IF LPAREN expression RPAREN function_statement_or_null function_if_else_if_statement_8 ELSE unique_priority IF LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier SEMICOLON interface_declaration_10 ENDINTERFACE 
                                             interface_declaration_10 non_port_interface_item 
                                                                      interface_or_generate_item 
                                                                      FINAL function_statement_item 
                                                                            function_conditional_statement 
                                                                            IF LPAREN expression RPAREN function_statement_or_null function_if_else_if_statement_8 
                                                                                                                                   function_if_else_if_statement_8 ELSE unique_priority IF LPAREN expression RPAREN function_statement_or_null 
                                                                                                                                                                                                  primary 
                                                                                                                                                                                                  (?)

** In state 2010, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 2010, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 2010, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce) in state 2006.
** Token involved: ELSE
** This state is reached from start after reading:

source_text_3 INTERFACE identifier SEMICOLON interface_declaration_10 FINAL IF LPAREN expression RPAREN IF LPAREN expression RPAREN function_statement_or_null function_if_else_if_statement_8

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier SEMICOLON interface_declaration_10 ENDINTERFACE 
                                             interface_declaration_10 non_port_interface_item 
                                                                      interface_or_generate_item 
                                                                      FINAL function_statement_item 
                                                                            function_conditional_statement 
                                                                            (?)

** In state 2006, looking ahead at ELSE, reducing production
** function_conditional_statement -> IF LPAREN expression RPAREN function_statement_or_null function_if_else_if_statement_8
** is permitted because of the following sub-derivation:

IF LPAREN expression RPAREN function_statement_or_null ELSE function_statement_or_null // lookahead token appears
                            function_statement_item // lookahead token is inherited
                            function_conditional_statement // lookahead token is inherited
                            IF LPAREN expression RPAREN function_statement_or_null function_if_else_if_statement_8 . 

** In state 2006, looking ahead at ELSE, shifting is permitted
** because of the following sub-derivation:

IF LPAREN expression RPAREN function_statement_or_null 
                            function_statement_item 
                            function_conditional_statement 
                            IF LPAREN expression RPAREN function_statement_or_null function_if_else_if_statement_8 . ELSE function_statement_or_null 

** Conflict (shift/reduce/reduce) in state 2003.
** Tokens involved: XOR XNOR WOR WIRE WHILE WAND VOID VIRTUAL VBAR UNSIGNED_NUMBER UNSIGNED UNIQUE UNION TYPEDEF TRIREG TRIOR TRIAND TRI1 TRI0 TRI TRANIF1 TRANIF0 TRAN TOKEN_TWO TOKEN_THREE TOKEN_SIX TOKEN_SEVEN TOKEN_QUOTE_Z2 TOKEN_QUOTE_Z1 TOKEN_QUOTE_X2 TOKEN_QUOTE_X1 TOKEN_QUOTE_TRUE TOKEN_QUOTE_FALSE TOKEN_PLUS_PLUS TOKEN_ONE TOKEN_NINE TOKEN_FOUR TOKEN_FIVE TOKEN_EIGHT TOKEN_DASH_DASH TIME TILDE_VBAR TILDE THIS TASK SYSTEM_TASK_IDENTIFIER SYSTEM_FUNCTION_IDENTIFIER SVINT SUPPLY1 SUPPLY0 SUPER STRUCT STRING STATIC SPECPARAM SPECIFY SIMPLE_IDENTIFIER SIGNED SHORTREAL SHORTINT SEQUENCE SEMICOLON RTRANIF1 RTRANIF0 RTRAN RPMOS RNMOS RETURN REPEAT REG REF REALTIME REAL RCMOS P_XNOR P_NXOR P_NAND PULLUP PULLDOWN PROPERTY PROGRAM PRIORITY PMOS PLUS PLING PARAMETER OUTPUT OR OCTAL_BASE NULL NOTIF1 NOTIF0 NOT NOR NMOS NAND MODULE MODPORT MINUS MACROMODULE LPAREN LONGINT LOGIC LOCALPARAM LCURLY INTERFACE INTEGER INPUT INOUT INITIAL IMPORT IF HEX_BASE GENVAR GENERATE FUNCTION FOREVER FOR FINAL EXTERN EXPORT EVENT ENUM ENDMODULE ENDINTERFACE ENDGENERATE ENDFUNCTION ENDCASE END ELSE DOUBLE_QUOTES DO DISABLE DEFPARAM DEFAULT DECIMAL_BASE COVER CONTINUE CONSTRAINT CONST CMOS CLOCKING CLASS CHANDLE CASEZ CASEX CASE CARET BYTE BUFIF1 BUFIF0 BUF BREAK BIT BIND BINARY_BASE BEGIN BACKSLASH AUTOMATIC ASSIGN ASSERT AND AMPERSAND ALWAYS_LATCH ALWAYS_FF ALWAYS_COMB ALWAYS ALIAS
** The following explanations concentrate on token ELSE.
** This state is reached from start after reading:

source_text_3 INTERFACE identifier SEMICOLON interface_declaration_10 FINAL IF LPAREN expression RPAREN function_statement_or_null function_if_else_if_statement_8 ELSE IF LPAREN expression RPAREN function_statement_or_null

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier SEMICOLON interface_declaration_10 ENDINTERFACE 
                                             interface_declaration_10 non_port_interface_item 
                                                                      interface_or_generate_item 
                                                                      FINAL function_statement_item 
                                                                            function_conditional_statement 
                                                                            (?)

** In state 2003, looking ahead at ELSE, shifting is permitted
** because of the following sub-derivation:

IF LPAREN expression RPAREN function_statement_or_null function_if_else_if_statement_8 ELSE function_statement_or_null 
                                                                                            function_statement_item 
                                                                                            function_conditional_statement 
                                                                                            IF LPAREN expression RPAREN function_statement_or_null . ELSE function_statement_or_null 

** In state 2003, looking ahead at ELSE, reducing production
** function_if_else_if_statement_8 ->
** is permitted because of the following sub-derivation:

IF LPAREN expression RPAREN function_statement_or_null function_if_else_if_statement_8 ELSE function_statement_or_null 
                                                                                            function_statement_item 
                                                                                            function_conditional_statement 
                                                                                            IF LPAREN expression RPAREN function_statement_or_null function_if_else_if_statement_8 ELSE function_statement_or_null // lookahead token appears
                                                                                                                                                   . 

** In state 2003, looking ahead at ELSE, reducing production
** function_if_else_if_statement_8 -> function_if_else_if_statement_8 ELSE IF LPAREN expression RPAREN function_statement_or_null
** is permitted because of the following sub-derivation:

IF LPAREN expression RPAREN function_statement_or_null function_if_else_if_statement_8 ELSE function_statement_or_null // lookahead token appears
                                                       function_if_else_if_statement_8 ELSE IF LPAREN expression RPAREN function_statement_or_null . 

** Conflict (shift/reduce/reduce) in state 2000.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 INTERFACE identifier SEMICOLON interface_declaration_10 FINAL IF LPAREN expression RPAREN function_statement_or_null function_if_else_if_statement_8 ELSE IF LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier SEMICOLON interface_declaration_10 ENDINTERFACE 
                                             interface_declaration_10 non_port_interface_item 
                                                                      interface_or_generate_item 
                                                                      FINAL function_statement_item 
                                                                            function_conditional_statement 
                                                                            IF LPAREN expression RPAREN function_statement_or_null function_if_else_if_statement_8 
                                                                                                                                   function_if_else_if_statement_8 ELSE IF LPAREN expression RPAREN function_statement_or_null 
                                                                                                                                                                                  primary 
                                                                                                                                                                                  (?)

** In state 2000, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 2000, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 2000, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce) in state 1997.
** Token involved: ELSE
** This state is reached from start after reading:

source_text_3 INTERFACE identifier SEMICOLON interface_declaration_10 FINAL IF LPAREN expression RPAREN unique_priority IF LPAREN expression RPAREN function_statement_or_null function_if_else_if_statement_8

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier SEMICOLON interface_declaration_10 ENDINTERFACE 
                                             interface_declaration_10 non_port_interface_item 
                                                                      interface_or_generate_item 
                                                                      FINAL function_statement_item 
                                                                            function_conditional_statement 
                                                                            (?)

** In state 1997, looking ahead at ELSE, reducing production
** function_conditional_statement -> unique_priority IF LPAREN expression RPAREN function_statement_or_null function_if_else_if_statement_8
** is permitted because of the following sub-derivation:

IF LPAREN expression RPAREN function_statement_or_null ELSE function_statement_or_null // lookahead token appears
                            function_statement_item // lookahead token is inherited
                            function_conditional_statement // lookahead token is inherited
                            unique_priority IF LPAREN expression RPAREN function_statement_or_null function_if_else_if_statement_8 . 

** In state 1997, looking ahead at ELSE, shifting is permitted
** because of the following sub-derivation:

IF LPAREN expression RPAREN function_statement_or_null 
                            function_statement_item 
                            function_conditional_statement 
                            unique_priority IF LPAREN expression RPAREN function_statement_or_null function_if_else_if_statement_8 . ELSE function_statement_or_null 

** Conflict (shift/reduce) in state 1993.
** Tokens involved: XOR XNOR WOR WIRE WHILE WAND VOID VIRTUAL VBAR UNSIGNED_NUMBER UNSIGNED UNIQUE UNION TYPEDEF TRIREG TRIOR TRIAND TRI1 TRI0 TRI TRANIF1 TRANIF0 TRAN TOKEN_TWO TOKEN_THREE TOKEN_SIX TOKEN_SEVEN TOKEN_QUOTE_Z2 TOKEN_QUOTE_Z1 TOKEN_QUOTE_X2 TOKEN_QUOTE_X1 TOKEN_QUOTE_TRUE TOKEN_QUOTE_FALSE TOKEN_PLUS_PLUS TOKEN_ONE TOKEN_NINE TOKEN_FOUR TOKEN_FIVE TOKEN_EIGHT TOKEN_DASH_DASH TIME TILDE_VBAR TILDE THIS TASK SYSTEM_TASK_IDENTIFIER SYSTEM_FUNCTION_IDENTIFIER SVINT SUPPLY1 SUPPLY0 SUPER STRUCT STRING STATIC SPECPARAM SPECIFY SIMPLE_IDENTIFIER SIGNED SHORTREAL SHORTINT SEQUENCE SEMICOLON RTRANIF1 RTRANIF0 RTRAN RPMOS RNMOS RETURN REPEAT REG REF REALTIME REAL RCMOS P_XNOR P_NXOR P_NAND PULLUP PULLDOWN PROPERTY PROGRAM PRIORITY PMOS PLUS PLING PARAMETER OUTPUT OR OCTAL_BASE NULL NOTIF1 NOTIF0 NOT NOR NMOS NAND MODULE MODPORT MINUS MACROMODULE LPAREN LONGINT LOGIC LOCALPARAM LCURLY INTERFACE INTEGER INPUT INOUT INITIAL IMPORT IF HEX_BASE GENVAR GENERATE FUNCTION FOREVER FOR FINAL EXTERN EXPORT EVENT ENUM ENDMODULE ENDINTERFACE ENDGENERATE ENDFUNCTION ENDCASE END ELSE DOUBLE_QUOTES DO DISABLE DEFPARAM DEFAULT DECIMAL_BASE COVER CONTINUE CONSTRAINT CONST CMOS CLOCKING CLASS CHANDLE CASEZ CASEX CASE CARET BYTE BUFIF1 BUFIF0 BUF BREAK BIT BIND BINARY_BASE BEGIN BACKSLASH AUTOMATIC ASSIGN ASSERT AND AMPERSAND ALWAYS_LATCH ALWAYS_FF ALWAYS_COMB ALWAYS ALIAS
** The following explanations concentrate on token ELSE.
** This state is reached from start after reading:

source_text_3 INTERFACE identifier SEMICOLON interface_declaration_10 FINAL unique_priority IF LPAREN expression RPAREN function_statement_or_null

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier SEMICOLON interface_declaration_10 ENDINTERFACE 
                                             interface_declaration_10 non_port_interface_item 
                                                                      interface_or_generate_item 
                                                                      FINAL function_statement_item 
                                                                            function_conditional_statement 
                                                                            (?)

** In state 1993, looking ahead at ELSE, shifting is permitted
** because of the following sub-derivation:

unique_priority IF LPAREN expression RPAREN function_statement_or_null . ELSE function_statement_or_null 

** In state 1993, looking ahead at ELSE, reducing production
** function_if_else_if_statement_8 ->
** is permitted because of the following sub-derivation:

unique_priority IF LPAREN expression RPAREN function_statement_or_null function_if_else_if_statement_8 ELSE function_statement_or_null // lookahead token appears
                                                                       . 

** Conflict (shift/reduce/reduce) in state 1984.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 INTERFACE identifier SEMICOLON interface_declaration_10 FINAL hierarchical_identifier LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier SEMICOLON interface_declaration_10 ENDINTERFACE 
                                             interface_declaration_10 non_port_interface_item 
                                                                      interface_or_generate_item 
                                                                      FINAL function_statement_item 
                                                                            hierarchical_identifier LPAREN list_of_arguments RPAREN SEMICOLON 
                                                                                                           expression list_of_arguments_3 
                                                                                                           primary 
                                                                                                           (?)

** In state 1984, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1984, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1984, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 1974.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 INTERFACE identifier SEMICOLON interface_declaration_10 FINAL unique_priority IF LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier SEMICOLON interface_declaration_10 ENDINTERFACE 
                                             interface_declaration_10 non_port_interface_item 
                                                                      interface_or_generate_item 
                                                                      FINAL function_statement_item 
                                                                            function_conditional_statement 
                                                                            unique_priority IF LPAREN expression RPAREN function_statement_or_null 
                                                                                                      primary 
                                                                                                      (?)

** In state 1974, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1974, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1974, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 1969.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 INTERFACE identifier SEMICOLON interface_declaration_10 FINAL variable_lvalue EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier SEMICOLON interface_declaration_10 ENDINTERFACE 
                                             interface_declaration_10 non_port_interface_item 
                                                                      interface_or_generate_item 
                                                                      FINAL function_statement_item 
                                                                            variable_lvalue EQUALS expression SEMICOLON 
                                                                                                   primary 
                                                                                                   (?)

** In state 1969, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1969, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1969, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce) in state 1963.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 INTERFACE identifier SEMICOLON interface_declaration_10 FINAL BEGIN COLON identifier function_seq_block_3_5

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier SEMICOLON interface_declaration_10 ENDINTERFACE 
                                             interface_declaration_10 non_port_interface_item 
                                                                      interface_or_generate_item 
                                                                      FINAL function_statement_item 
                                                                            (?)

** In state 1963, looking ahead at SIMPLE_IDENTIFIER, reducing production
** function_seq_block_4 ->
** is permitted because of the following sub-derivation:

BEGIN COLON identifier function_seq_block_3_5 function_seq_block_4 END 
                                              function_seq_block_4 function_statement_or_null // lookahead token appears because function_statement_or_null can begin with SIMPLE_IDENTIFIER
                                              . 

** In state 1963, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

BEGIN COLON identifier function_seq_block_3_5 function_seq_block_4 END 
                       function_seq_block_3_5 block_item_declaration 
                                              block_data_declaration 
                                              block_variable_declaration 
                                              data_type identifier variable_dimension list_of_variable_identifiers_4 SEMICOLON 
                                              identifier type_declaration_identifier_3 data_type_11 
                                              . SIMPLE_IDENTIFIER 

** Conflict (shift/reduce/reduce) in state 1957.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 INTERFACE identifier SEMICOLON interface_declaration_10 FINAL CASE LPAREN expression RPAREN function_case_item function_case_statement_8

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier SEMICOLON interface_declaration_10 ENDINTERFACE 
                                             interface_declaration_10 non_port_interface_item 
                                                                      interface_or_generate_item 
                                                                      FINAL function_statement_item 
                                                                            function_case_statement 
                                                                            CASE LPAREN expression RPAREN function_case_item function_case_statement_8 ENDCASE 
                                                                                                                             function_case_statement_8 function_case_item 
                                                                                                                                                       expression function_case_item_3 COLON function_statement_or_null 
                                                                                                                                                       primary 
                                                                                                                                                       (?)

** In state 1957, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1957, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1957, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 1955.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 INTERFACE identifier SEMICOLON interface_declaration_10 FINAL CASE LPAREN expression RPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier SEMICOLON interface_declaration_10 ENDINTERFACE 
                                             interface_declaration_10 non_port_interface_item 
                                                                      interface_or_generate_item 
                                                                      FINAL function_statement_item 
                                                                            function_case_statement 
                                                                            CASE LPAREN expression RPAREN function_case_item function_case_statement_8 ENDCASE 
                                                                                                          expression function_case_item_3 COLON function_statement_or_null 
                                                                                                          primary 
                                                                                                          (?)

** In state 1955, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1955, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1955, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 1953.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 INTERFACE identifier SEMICOLON interface_declaration_10 FINAL CASE LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier SEMICOLON interface_declaration_10 ENDINTERFACE 
                                             interface_declaration_10 non_port_interface_item 
                                                                      interface_or_generate_item 
                                                                      FINAL function_statement_item 
                                                                            function_case_statement 
                                                                            CASE LPAREN expression RPAREN function_case_item function_case_statement_8 ENDCASE 
                                                                                        primary 
                                                                                        (?)

** In state 1953, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1953, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1953, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 1949.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 INTERFACE identifier SEMICOLON interface_declaration_10 FINAL CASEZ LPAREN expression RPAREN expression function_case_item_3 COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier SEMICOLON interface_declaration_10 ENDINTERFACE 
                                             interface_declaration_10 non_port_interface_item 
                                                                      interface_or_generate_item 
                                                                      FINAL function_statement_item 
                                                                            function_case_statement 
                                                                            CASEZ LPAREN expression RPAREN function_case_item function_case_statement_17 ENDCASE 
                                                                                                           expression function_case_item_3 COLON function_statement_or_null 
                                                                                                                      function_case_item_3 COMMA expression 
                                                                                                                                                 primary 
                                                                                                                                                 (?)

** In state 1949, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1949, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1949, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 1944.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 INTERFACE identifier SEMICOLON interface_declaration_10 FINAL CASEX LPAREN expression RPAREN function_case_item function_case_statement_26

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier SEMICOLON interface_declaration_10 ENDINTERFACE 
                                             interface_declaration_10 non_port_interface_item 
                                                                      interface_or_generate_item 
                                                                      FINAL function_statement_item 
                                                                            function_case_statement 
                                                                            CASEX LPAREN expression RPAREN function_case_item function_case_statement_26 ENDCASE 
                                                                                                                              function_case_statement_26 function_case_item 
                                                                                                                                                         expression function_case_item_3 COLON function_statement_or_null 
                                                                                                                                                         primary 
                                                                                                                                                         (?)

** In state 1944, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1944, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1944, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 1942.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 INTERFACE identifier SEMICOLON interface_declaration_10 FINAL CASEX LPAREN expression RPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier SEMICOLON interface_declaration_10 ENDINTERFACE 
                                             interface_declaration_10 non_port_interface_item 
                                                                      interface_or_generate_item 
                                                                      FINAL function_statement_item 
                                                                            function_case_statement 
                                                                            CASEX LPAREN expression RPAREN function_case_item function_case_statement_26 ENDCASE 
                                                                                                           expression function_case_item_3 COLON function_statement_or_null 
                                                                                                           primary 
                                                                                                           (?)

** In state 1942, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1942, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1942, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 1940.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 INTERFACE identifier SEMICOLON interface_declaration_10 FINAL CASEX LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier SEMICOLON interface_declaration_10 ENDINTERFACE 
                                             interface_declaration_10 non_port_interface_item 
                                                                      interface_or_generate_item 
                                                                      FINAL function_statement_item 
                                                                            function_case_statement 
                                                                            CASEX LPAREN expression RPAREN function_case_item function_case_statement_26 ENDCASE 
                                                                                         primary 
                                                                                         (?)

** In state 1940, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1940, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1940, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 1936.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 INTERFACE identifier SEMICOLON interface_declaration_10 FINAL CASEZ LPAREN expression RPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier SEMICOLON interface_declaration_10 ENDINTERFACE 
                                             interface_declaration_10 non_port_interface_item 
                                                                      interface_or_generate_item 
                                                                      FINAL function_statement_item 
                                                                            function_case_statement 
                                                                            CASEZ LPAREN expression RPAREN function_case_item function_case_statement_17 ENDCASE 
                                                                                                           expression function_case_item_3 COLON function_statement_or_null 
                                                                                                           primary 
                                                                                                           (?)

** In state 1936, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1936, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1936, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 1934.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 INTERFACE identifier SEMICOLON interface_declaration_10 FINAL CASEZ LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier SEMICOLON interface_declaration_10 ENDINTERFACE 
                                             interface_declaration_10 non_port_interface_item 
                                                                      interface_or_generate_item 
                                                                      FINAL function_statement_item 
                                                                            function_case_statement 
                                                                            CASEZ LPAREN expression RPAREN function_case_item function_case_statement_17 ENDCASE 
                                                                                         primary 
                                                                                         (?)

** In state 1934, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1934, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1934, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 1926.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 INTERFACE identifier SEMICOLON interface_declaration_10 FINAL FOR LPAREN variable_decl_or_assignment function_loop_statement_20 SEMICOLON

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier SEMICOLON interface_declaration_10 ENDINTERFACE 
                                             interface_declaration_10 non_port_interface_item 
                                                                      interface_or_generate_item 
                                                                      FINAL function_statement_item 
                                                                            function_loop_statement 
                                                                            FOR LPAREN variable_decl_or_assignment function_loop_statement_20 SEMICOLON expression SEMICOLON variable_assignment function_loop_statement_25 RPAREN function_statement_or_null 
                                                                                                                                                        primary 
                                                                                                                                                        (?)

** In state 1926, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1926, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1926, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 1918.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 INTERFACE identifier SEMICOLON interface_declaration_10 FINAL IF LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier SEMICOLON interface_declaration_10 ENDINTERFACE 
                                             interface_declaration_10 non_port_interface_item 
                                                                      interface_or_generate_item 
                                                                      FINAL function_statement_item 
                                                                            function_conditional_statement 
                                                                            IF LPAREN expression RPAREN function_statement_or_null 
                                                                                      primary 
                                                                                      (?)

** In state 1918, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1918, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1918, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 1914.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 INTERFACE identifier SEMICOLON interface_declaration_10 FINAL REPEAT LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier SEMICOLON interface_declaration_10 ENDINTERFACE 
                                             interface_declaration_10 non_port_interface_item 
                                                                      interface_or_generate_item 
                                                                      FINAL function_statement_item 
                                                                            function_loop_statement 
                                                                            REPEAT LPAREN expression RPAREN function_statement_or_null 
                                                                                          primary 
                                                                                          (?)

** In state 1914, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1914, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1914, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 1904.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 INTERFACE identifier SEMICOLON interface_declaration_10 FINAL SYSTEM_TASK_IDENTIFIER LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier SEMICOLON interface_declaration_10 ENDINTERFACE 
                                             interface_declaration_10 non_port_interface_item 
                                                                      interface_or_generate_item 
                                                                      FINAL function_statement_item 
                                                                            SYSTEM_TASK_IDENTIFIER LPAREN expression system_task_enable_3_5 RPAREN SEMICOLON 
                                                                                                          primary 
                                                                                                          (?)

** In state 1904, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1904, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1904, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 1899.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 INTERFACE identifier SEMICOLON interface_declaration_10 FINAL WHILE LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier SEMICOLON interface_declaration_10 ENDINTERFACE 
                                             interface_declaration_10 non_port_interface_item 
                                                                      interface_or_generate_item 
                                                                      FINAL function_statement_item 
                                                                            function_loop_statement 
                                                                            WHILE LPAREN expression RPAREN function_statement_or_null 
                                                                                         primary 
                                                                                         (?)

** In state 1899, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1899, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1899, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 1884.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 FUNCTION identifier SEMICOLON function_body_declaration_7 CONST REF tf_data_type identifier variable_dimension EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              FUNCTION function_body_declaration 
                       identifier SEMICOLON function_body_declaration_7 function_body_declaration_8 ENDFUNCTION 
                                            function_body_declaration_7 function_item_declaration 
                                                                        CONST REF tf_data_type identifier variable_dimension EQUALS expression list_of_tf_variable_identifiers_5 SEMICOLON 
                                                                                                                                    primary 
                                                                                                                                    (?)

** In state 1884, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1884, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1884, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce) in state 1882.
** Token involved: LBRACK
** This state is reached from start after reading:

source_text_3 FUNCTION identifier SEMICOLON function_body_declaration_7 CONST REF tf_data_type identifier

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              FUNCTION function_body_declaration 
                       identifier SEMICOLON function_body_declaration_7 function_body_declaration_8 ENDFUNCTION 
                                            function_body_declaration_7 function_item_declaration 
                                                                        CONST REF tf_data_type identifier variable_dimension list_of_tf_variable_identifiers_5 SEMICOLON 
                                                                                                          (?)

** In state 1882, looking ahead at LBRACK, shifting is permitted
** because of the following sub-derivation:

associative_dimension 
. LBRACK data_type RBRACK 

** In state 1882, looking ahead at LBRACK, reducing production
** variable_dimension_2 ->
** is permitted because of the following sub-derivation:

variable_dimension_2 
variable_dimension_2 unpacked_dimension // lookahead token appears because unpacked_dimension can begin with LBRACK
. 

** Conflict (shift/reduce/reduce) in state 1873.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 FUNCTION identifier SEMICOLON function_body_declaration_7 REF tf_data_type identifier variable_dimension EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              FUNCTION function_body_declaration 
                       identifier SEMICOLON function_body_declaration_7 function_body_declaration_8 ENDFUNCTION 
                                            function_body_declaration_7 function_item_declaration 
                                                                        REF tf_data_type identifier variable_dimension EQUALS expression list_of_tf_variable_identifiers_5 SEMICOLON 
                                                                                                                              primary 
                                                                                                                              (?)

** In state 1873, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1873, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1873, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce) in state 1871.
** Token involved: LBRACK
** This state is reached from start after reading:

source_text_3 FUNCTION identifier SEMICOLON function_body_declaration_7 REF tf_data_type identifier

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              FUNCTION function_body_declaration 
                       identifier SEMICOLON function_body_declaration_7 function_body_declaration_8 ENDFUNCTION 
                                            function_body_declaration_7 function_item_declaration 
                                                                        REF tf_data_type identifier variable_dimension list_of_tf_variable_identifiers_5 SEMICOLON 
                                                                                                    (?)

** In state 1871, looking ahead at LBRACK, shifting is permitted
** because of the following sub-derivation:

associative_dimension 
. LBRACK data_type RBRACK 

** In state 1871, looking ahead at LBRACK, reducing production
** variable_dimension_2 ->
** is permitted because of the following sub-derivation:

variable_dimension_2 
variable_dimension_2 unpacked_dimension // lookahead token appears because unpacked_dimension can begin with LBRACK
. 

** Conflict (shift/reduce) in state 1868.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 FUNCTION signing range_or_type identifier SEMICOLON function_body_declaration_7

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              FUNCTION function_body_declaration 
                       (?)

** In state 1868, looking ahead at SIMPLE_IDENTIFIER, reducing production
** function_body_declaration_8 ->
** is permitted because of the following sub-derivation:

signing range_or_type identifier SEMICOLON function_body_declaration_7 function_body_declaration_8 ENDFUNCTION 
                                                                       function_body_declaration_8 function_statement_or_null // lookahead token appears because function_statement_or_null can begin with SIMPLE_IDENTIFIER
                                                                       . 

** In state 1868, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

signing range_or_type identifier SEMICOLON function_body_declaration_7 function_body_declaration_8 ENDFUNCTION 
                                           function_body_declaration_7 function_item_declaration 
                                                                       block_item_declaration 
                                                                       block_data_declaration 
                                                                       block_variable_declaration 
                                                                       data_type identifier variable_dimension list_of_variable_identifiers_4 SEMICOLON 
                                                                       identifier type_declaration_identifier_3 data_type_11 
                                                                       . SIMPLE_IDENTIFIER 

** Conflict (reduce/reduce) in state 1834.
** Tokens involved: UNION TIME SVINT STRUCT STRING SIMPLE_IDENTIFIER SHORTREAL SHORTINT REG REALTIME REAL LONGINT LOGIC INTEGER EVENT ENUM CHANDLE BYTE BIT BACKSLASH
** The following explanations concentrate on token UNION.
** This state is reached from start after reading:

source_text_3 CLASS identifier SEMICOLON class_declaration_11 class_property_2 STATIC

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              CLASS identifier SEMICOLON class_declaration_11 ENDCLASS 
                                         class_declaration_11 class_item 
                                                              class_property 
                                                              (?)

** In state 1834, looking ahead at UNION, reducing production
** class_item_qualifier -> STATIC
** is permitted because of the following sub-derivation:

class_property_2 data_declaration // lookahead token appears because data_declaration can begin with UNION
class_property_2 property_qualifier // lookahead token is inherited
                 class_item_qualifier // lookahead token is inherited
                 STATIC . 

** In state 1834, looking ahead at UNION, reducing production
** lifetime -> STATIC
** is permitted because of the following sub-derivation:

class_property_2 data_declaration 
                 lifetime data_type list_of_variable_identifiers_or_assignments SEMICOLON // lookahead token appears because data_type can begin with UNION
                 STATIC . 

** Conflict (shift/reduce/reduce) in state 1822.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 CLASS identifier SEMICOLON class_declaration_11 CONSTRAINT identifier LCURLY constraint_declaration_6

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              CLASS identifier SEMICOLON class_declaration_11 ENDCLASS 
                                         class_declaration_11 class_item 
                                                              class_constraint 
                                                              CONSTRAINT identifier LCURLY constraint_declaration_6 RCURLY 
                                                                                           constraint_declaration_6 constraint_block 
                                                                                                                    expression DIST LCURLY dist_item dist_list_3 RCURLY SEMICOLON 
                                                                                                                    primary 
                                                                                                                    (?)

** In state 1822, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1822, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1822, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce) in state 1794.
** Token involved: COMMA
** This state is reached from start after reading:

source_text_3 IMPORT TOKEN_DPI function_data_type identifier LPAREN CONST REF tf_data_type identifier variable_dimension list_of_tf_variable_identifiers_5

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              dpi_import_export 
              IMPORT TOKEN_DPI dpi_function_proto SEMICOLON 
                               (?)

** In state 1794, looking ahead at COMMA, reducing production
** function_proto_formal -> CONST REF tf_data_type identifier variable_dimension list_of_tf_variable_identifiers_5
** is permitted because of the following sub-derivation:

function_data_type identifier LPAREN function_proto_formal list_of_function_proto_formals_2_5 RPAREN // lookahead token appears because list_of_function_proto_formals_2_5 can begin with COMMA
                                     CONST REF tf_data_type identifier variable_dimension list_of_tf_variable_identifiers_5 . 

** In state 1794, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

function_data_type identifier LPAREN function_proto_formal list_of_function_proto_formals_2_5 RPAREN 
                                     CONST REF tf_data_type identifier variable_dimension list_of_tf_variable_identifiers_5 
                                                                                          list_of_tf_variable_identifiers_5 . COMMA identifier variable_dimension 

** Conflict (shift/reduce) in state 1793.
** Token involved: COMMA
** This state is reached from start after reading:

source_text_3 IMPORT TOKEN_DPI function_data_type identifier LPAREN CONST REF tf_data_type identifier variable_dimension EQUALS expression list_of_tf_variable_identifiers_5

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              dpi_import_export 
              IMPORT TOKEN_DPI dpi_function_proto SEMICOLON 
                               (?)

** In state 1793, looking ahead at COMMA, reducing production
** function_proto_formal -> CONST REF tf_data_type identifier variable_dimension EQUALS expression list_of_tf_variable_identifiers_5
** is permitted because of the following sub-derivation:

function_data_type identifier LPAREN function_proto_formal list_of_function_proto_formals_2_5 RPAREN // lookahead token appears because list_of_function_proto_formals_2_5 can begin with COMMA
                                     CONST REF tf_data_type identifier variable_dimension EQUALS expression list_of_tf_variable_identifiers_5 . 

** In state 1793, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

function_data_type identifier LPAREN function_proto_formal list_of_function_proto_formals_2_5 RPAREN 
                                     CONST REF tf_data_type identifier variable_dimension EQUALS expression list_of_tf_variable_identifiers_5 
                                                                                                            list_of_tf_variable_identifiers_5 . COMMA identifier variable_dimension 

** Conflict (shift/reduce/reduce) in state 1791.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 IMPORT TOKEN_DPI function_data_type identifier LPAREN CONST REF tf_data_type identifier variable_dimension EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              dpi_import_export 
              IMPORT TOKEN_DPI dpi_function_proto SEMICOLON 
                               function_data_type identifier LPAREN function_proto_formal list_of_function_proto_formals_2_5 RPAREN 
                                                                    CONST REF tf_data_type identifier variable_dimension EQUALS expression list_of_tf_variable_identifiers_5 
                                                                                                                                primary 
                                                                                                                                (?)

** In state 1791, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1791, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1791, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce) in state 1789.
** Token involved: LBRACK
** This state is reached from start after reading:

source_text_3 IMPORT TOKEN_DPI function_data_type identifier LPAREN CONST REF tf_data_type identifier

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              dpi_import_export 
              IMPORT TOKEN_DPI dpi_function_proto SEMICOLON 
                               function_data_type identifier LPAREN function_proto_formal list_of_function_proto_formals_2_5 RPAREN 
                                                                    CONST REF tf_data_type identifier variable_dimension list_of_tf_variable_identifiers_5 
                                                                                                      (?)

** In state 1789, looking ahead at LBRACK, shifting is permitted
** because of the following sub-derivation:

associative_dimension 
. LBRACK data_type RBRACK 

** In state 1789, looking ahead at LBRACK, reducing production
** variable_dimension_2 ->
** is permitted because of the following sub-derivation:

variable_dimension_2 
variable_dimension_2 unpacked_dimension // lookahead token appears because unpacked_dimension can begin with LBRACK
. 

** Conflict (shift/reduce) in state 1785.
** Token involved: COMMA
** This state is reached from start after reading:

source_text_3 IMPORT TOKEN_DPI function_data_type identifier LPAREN REF tf_data_type identifier variable_dimension list_of_tf_variable_identifiers_5

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              dpi_import_export 
              IMPORT TOKEN_DPI dpi_function_proto SEMICOLON 
                               (?)

** In state 1785, looking ahead at COMMA, reducing production
** function_proto_formal -> REF tf_data_type identifier variable_dimension list_of_tf_variable_identifiers_5
** is permitted because of the following sub-derivation:

function_data_type identifier LPAREN function_proto_formal list_of_function_proto_formals_2_5 RPAREN // lookahead token appears because list_of_function_proto_formals_2_5 can begin with COMMA
                                     REF tf_data_type identifier variable_dimension list_of_tf_variable_identifiers_5 . 

** In state 1785, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

function_data_type identifier LPAREN function_proto_formal list_of_function_proto_formals_2_5 RPAREN 
                                     REF tf_data_type identifier variable_dimension list_of_tf_variable_identifiers_5 
                                                                                    list_of_tf_variable_identifiers_5 . COMMA identifier variable_dimension 

** Conflict (shift/reduce) in state 1784.
** Token involved: COMMA
** This state is reached from start after reading:

source_text_3 IMPORT TOKEN_DPI function_data_type identifier LPAREN REF tf_data_type identifier variable_dimension EQUALS expression list_of_tf_variable_identifiers_5

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              dpi_import_export 
              IMPORT TOKEN_DPI dpi_function_proto SEMICOLON 
                               (?)

** In state 1784, looking ahead at COMMA, reducing production
** function_proto_formal -> REF tf_data_type identifier variable_dimension EQUALS expression list_of_tf_variable_identifiers_5
** is permitted because of the following sub-derivation:

function_data_type identifier LPAREN function_proto_formal list_of_function_proto_formals_2_5 RPAREN // lookahead token appears because list_of_function_proto_formals_2_5 can begin with COMMA
                                     REF tf_data_type identifier variable_dimension EQUALS expression list_of_tf_variable_identifiers_5 . 

** In state 1784, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

function_data_type identifier LPAREN function_proto_formal list_of_function_proto_formals_2_5 RPAREN 
                                     REF tf_data_type identifier variable_dimension EQUALS expression list_of_tf_variable_identifiers_5 
                                                                                                      list_of_tf_variable_identifiers_5 . COMMA identifier variable_dimension 

** Conflict (shift/reduce/reduce) in state 1782.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 IMPORT TOKEN_DPI function_data_type identifier LPAREN REF tf_data_type identifier variable_dimension EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              dpi_import_export 
              IMPORT TOKEN_DPI dpi_function_proto SEMICOLON 
                               function_data_type identifier LPAREN function_proto_formal list_of_function_proto_formals_2_5 RPAREN 
                                                                    REF tf_data_type identifier variable_dimension EQUALS expression list_of_tf_variable_identifiers_5 
                                                                                                                          primary 
                                                                                                                          (?)

** In state 1782, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1782, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1782, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce) in state 1780.
** Token involved: LBRACK
** This state is reached from start after reading:

source_text_3 IMPORT TOKEN_DPI function_data_type identifier LPAREN REF tf_data_type identifier

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              dpi_import_export 
              IMPORT TOKEN_DPI dpi_function_proto SEMICOLON 
                               function_data_type identifier LPAREN function_proto_formal list_of_function_proto_formals_2_5 RPAREN 
                                                                    REF tf_data_type identifier variable_dimension list_of_tf_variable_identifiers_5 
                                                                                                (?)

** In state 1780, looking ahead at LBRACK, shifting is permitted
** because of the following sub-derivation:

associative_dimension 
. LBRACK data_type RBRACK 

** In state 1780, looking ahead at LBRACK, reducing production
** variable_dimension_2 ->
** is permitted because of the following sub-derivation:

variable_dimension_2 
variable_dimension_2 unpacked_dimension // lookahead token appears because unpacked_dimension can begin with LBRACK
. 

** Conflict (shift/reduce) in state 1770.
** Token involved: LBRACK
** This state is reached from start after reading:

source_text_3 FUNCTION identifier type_declaration_identifier_3

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              FUNCTION function_body_declaration 
                       range_or_type identifier SEMICOLON function_body_declaration_7 function_body_declaration_8 ENDFUNCTION 
                       function_data_type 
                       (?)

** In state 1770, looking ahead at LBRACK, reducing production
** function_data_type_9 ->
** is permitted because of the following sub-derivation:

identifier type_declaration_identifier_3 function_data_type_9 
                                         function_data_type_9 packed_dimension // lookahead token appears because packed_dimension can begin with LBRACK
                                         . 

** In state 1770, looking ahead at LBRACK, shifting is permitted
** because of the following sub-derivation:

identifier type_declaration_identifier_3 function_data_type_9 
           type_declaration_identifier_3 unpacked_dimension 
                                         . LBRACK constant_expression COLON constant_expression RBRACK 

** Conflict (reduce/reduce) in state 1766.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 FUNCTION integer_vector_type function_data_type_3 LBRACK constant_expression COLON constant_expression RBRACK

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              FUNCTION function_body_declaration 
                       range_or_type identifier SEMICOLON function_body_declaration_7 function_body_declaration_8 ENDFUNCTION // lookahead token appears because identifier can begin with SIMPLE_IDENTIFIER
                       function_data_type // lookahead token is inherited
                       (?)

** In state 1766, looking ahead at SIMPLE_IDENTIFIER, reducing production
** function_data_type -> integer_vector_type function_data_type_3 LBRACK constant_expression COLON constant_expression RBRACK
** is permitted because of the following sub-derivation:

integer_vector_type function_data_type_3 LBRACK constant_expression COLON constant_expression RBRACK . 

** In state 1766, looking ahead at SIMPLE_IDENTIFIER, reducing production
** packed_dimension -> LBRACK constant_expression COLON constant_expression RBRACK
** is permitted because of the following sub-derivation:

integer_vector_type function_data_type_3 // lookahead token is inherited
                    function_data_type_3 packed_dimension // lookahead token is inherited
                                         LBRACK constant_expression COLON constant_expression RBRACK . 

** Conflict (shift/reduce) in state 1689.
** Token involved: COMMA
** This state is reached from start after reading:

source_text_3 INTERFACE identifier SEMICOLON interface_declaration_10 EXTERN TASK identifier LPAREN CONST REF tf_data_type identifier variable_dimension list_of_tf_variable_identifiers_5

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier SEMICOLON interface_declaration_10 ENDINTERFACE 
                                             interface_declaration_10 non_port_interface_item 
                                                                      interface_or_generate_item 
                                                                      extern_tf_declaration 
                                                                      EXTERN method_prototype 
                                                                             (?)

** In state 1689, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

TASK identifier LPAREN task_proto_formal named_task_proto_5 RPAREN SEMICOLON 
                       CONST REF tf_data_type identifier variable_dimension list_of_tf_variable_identifiers_5 
                                                                            list_of_tf_variable_identifiers_5 . COMMA identifier variable_dimension 

** In state 1689, looking ahead at COMMA, reducing production
** task_proto_formal -> CONST REF tf_data_type identifier variable_dimension list_of_tf_variable_identifiers_5
** is permitted because of the following sub-derivation:

TASK identifier LPAREN task_proto_formal named_task_proto_5 RPAREN SEMICOLON // lookahead token appears because named_task_proto_5 can begin with COMMA
                       CONST REF tf_data_type identifier variable_dimension list_of_tf_variable_identifiers_5 . 

** Conflict (shift/reduce) in state 1688.
** Token involved: COMMA
** This state is reached from start after reading:

source_text_3 INTERFACE identifier SEMICOLON interface_declaration_10 EXTERN TASK identifier LPAREN CONST REF tf_data_type identifier variable_dimension EQUALS expression list_of_tf_variable_identifiers_5

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier SEMICOLON interface_declaration_10 ENDINTERFACE 
                                             interface_declaration_10 non_port_interface_item 
                                                                      interface_or_generate_item 
                                                                      extern_tf_declaration 
                                                                      EXTERN method_prototype 
                                                                             (?)

** In state 1688, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

TASK identifier LPAREN task_proto_formal named_task_proto_5 RPAREN SEMICOLON 
                       CONST REF tf_data_type identifier variable_dimension EQUALS expression list_of_tf_variable_identifiers_5 
                                                                                              list_of_tf_variable_identifiers_5 . COMMA identifier variable_dimension 

** In state 1688, looking ahead at COMMA, reducing production
** task_proto_formal -> CONST REF tf_data_type identifier variable_dimension EQUALS expression list_of_tf_variable_identifiers_5
** is permitted because of the following sub-derivation:

TASK identifier LPAREN task_proto_formal named_task_proto_5 RPAREN SEMICOLON // lookahead token appears because named_task_proto_5 can begin with COMMA
                       CONST REF tf_data_type identifier variable_dimension EQUALS expression list_of_tf_variable_identifiers_5 . 

** Conflict (shift/reduce/reduce) in state 1686.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 INTERFACE identifier SEMICOLON interface_declaration_10 EXTERN TASK identifier LPAREN CONST REF tf_data_type identifier variable_dimension EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier SEMICOLON interface_declaration_10 ENDINTERFACE 
                                             interface_declaration_10 non_port_interface_item 
                                                                      interface_or_generate_item 
                                                                      extern_tf_declaration 
                                                                      EXTERN method_prototype 
                                                                             TASK identifier LPAREN task_proto_formal named_task_proto_5 RPAREN SEMICOLON 
                                                                                                    CONST REF tf_data_type identifier variable_dimension EQUALS expression list_of_tf_variable_identifiers_5 
                                                                                                                                                                primary 
                                                                                                                                                                (?)

** In state 1686, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1686, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1686, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce) in state 1684.
** Token involved: LBRACK
** This state is reached from start after reading:

source_text_3 INTERFACE identifier SEMICOLON interface_declaration_10 EXTERN TASK identifier LPAREN CONST REF tf_data_type identifier

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier SEMICOLON interface_declaration_10 ENDINTERFACE 
                                             interface_declaration_10 non_port_interface_item 
                                                                      interface_or_generate_item 
                                                                      extern_tf_declaration 
                                                                      EXTERN method_prototype 
                                                                             TASK identifier LPAREN task_proto_formal named_task_proto_5 RPAREN SEMICOLON 
                                                                                                    CONST REF tf_data_type identifier variable_dimension list_of_tf_variable_identifiers_5 
                                                                                                                                      (?)

** In state 1684, looking ahead at LBRACK, shifting is permitted
** because of the following sub-derivation:

associative_dimension 
. LBRACK data_type RBRACK 

** In state 1684, looking ahead at LBRACK, reducing production
** variable_dimension_2 ->
** is permitted because of the following sub-derivation:

variable_dimension_2 
variable_dimension_2 unpacked_dimension // lookahead token appears because unpacked_dimension can begin with LBRACK
. 

** Conflict (shift/reduce) in state 1680.
** Token involved: COMMA
** This state is reached from start after reading:

source_text_3 TASK identifier LPAREN INOUT signing tf_inout_declaration_4 identifier list_of_tf_port_identifiers_3 list_of_tf_port_identifiers_5

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              TASK task_body_declaration 
                   identifier LPAREN task_port_list RPAREN SEMICOLON task_body_declaration_16 task_body_declaration_17 ENDTASK 
                                     (?)

** In state 1680, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

task_port_item task_port_list_3 
tf_inout_declaration 
INOUT signing tf_inout_declaration_4 identifier list_of_tf_port_identifiers_3 list_of_tf_port_identifiers_5 
                                                                              list_of_tf_port_identifiers_5 . COMMA identifier list_of_tf_port_identifiers_5_6 

** In state 1680, looking ahead at COMMA, reducing production
** tf_inout_declaration -> INOUT signing tf_inout_declaration_4 identifier list_of_tf_port_identifiers_3 list_of_tf_port_identifiers_5
** is permitted because of the following sub-derivation:

task_port_item task_port_list_3 // lookahead token appears because task_port_list_3 can begin with COMMA
tf_inout_declaration // lookahead token is inherited
INOUT signing tf_inout_declaration_4 identifier list_of_tf_port_identifiers_3 list_of_tf_port_identifiers_5 . 

** Conflict (shift/reduce) in state 1679.
** Token involved: COMMA
** This state is reached from start after reading:

source_text_3 TASK identifier LPAREN INOUT signing tf_inout_declaration_4 identifier list_of_tf_port_identifiers_3 EQUALS expression list_of_tf_port_identifiers_5

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              TASK task_body_declaration 
                   identifier LPAREN task_port_list RPAREN SEMICOLON task_body_declaration_16 task_body_declaration_17 ENDTASK 
                                     (?)

** In state 1679, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

task_port_item task_port_list_3 
tf_inout_declaration 
INOUT signing tf_inout_declaration_4 identifier list_of_tf_port_identifiers_3 EQUALS expression list_of_tf_port_identifiers_5 
                                                                                                list_of_tf_port_identifiers_5 . COMMA identifier list_of_tf_port_identifiers_5_6 

** In state 1679, looking ahead at COMMA, reducing production
** tf_inout_declaration -> INOUT signing tf_inout_declaration_4 identifier list_of_tf_port_identifiers_3 EQUALS expression list_of_tf_port_identifiers_5
** is permitted because of the following sub-derivation:

task_port_item task_port_list_3 // lookahead token appears because task_port_list_3 can begin with COMMA
tf_inout_declaration // lookahead token is inherited
INOUT signing tf_inout_declaration_4 identifier list_of_tf_port_identifiers_3 EQUALS expression list_of_tf_port_identifiers_5 . 

** Conflict (shift/reduce/reduce) in state 1677.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 TASK identifier LPAREN INOUT signing tf_inout_declaration_4 identifier list_of_tf_port_identifiers_3 EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              TASK task_body_declaration 
                   identifier LPAREN task_port_list RPAREN SEMICOLON task_body_declaration_16 task_body_declaration_17 ENDTASK 
                                     task_port_item task_port_list_3 
                                     tf_inout_declaration 
                                     INOUT signing tf_inout_declaration_4 identifier list_of_tf_port_identifiers_3 EQUALS expression list_of_tf_port_identifiers_5 
                                                                                                                          primary 
                                                                                                                          (?)

** In state 1677, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1677, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1677, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce) in state 1672.
** Token involved: COMMA
** This state is reached from start after reading:

source_text_3 TASK identifier LPAREN INOUT tf_data_type identifier variable_dimension list_of_tf_variable_identifiers_5

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              TASK task_body_declaration 
                   identifier LPAREN task_port_list RPAREN SEMICOLON task_body_declaration_16 task_body_declaration_17 ENDTASK 
                                     (?)

** In state 1672, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

task_port_item task_port_list_3 
tf_inout_declaration 
INOUT tf_data_type identifier variable_dimension list_of_tf_variable_identifiers_5 
                                                 list_of_tf_variable_identifiers_5 . COMMA identifier variable_dimension 

** In state 1672, looking ahead at COMMA, reducing production
** tf_inout_declaration -> INOUT tf_data_type identifier variable_dimension list_of_tf_variable_identifiers_5
** is permitted because of the following sub-derivation:

task_port_item task_port_list_3 // lookahead token appears because task_port_list_3 can begin with COMMA
tf_inout_declaration // lookahead token is inherited
INOUT tf_data_type identifier variable_dimension list_of_tf_variable_identifiers_5 . 

** Conflict (shift/reduce) in state 1671.
** Token involved: COMMA
** This state is reached from start after reading:

source_text_3 TASK identifier LPAREN INOUT tf_data_type identifier variable_dimension EQUALS expression list_of_tf_variable_identifiers_5

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              TASK task_body_declaration 
                   identifier LPAREN task_port_list RPAREN SEMICOLON task_body_declaration_16 task_body_declaration_17 ENDTASK 
                                     (?)

** In state 1671, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

task_port_item task_port_list_3 
tf_inout_declaration 
INOUT tf_data_type identifier variable_dimension EQUALS expression list_of_tf_variable_identifiers_5 
                                                                   list_of_tf_variable_identifiers_5 . COMMA identifier variable_dimension 

** In state 1671, looking ahead at COMMA, reducing production
** tf_inout_declaration -> INOUT tf_data_type identifier variable_dimension EQUALS expression list_of_tf_variable_identifiers_5
** is permitted because of the following sub-derivation:

task_port_item task_port_list_3 // lookahead token appears because task_port_list_3 can begin with COMMA
tf_inout_declaration // lookahead token is inherited
INOUT tf_data_type identifier variable_dimension EQUALS expression list_of_tf_variable_identifiers_5 . 

** Conflict (shift/reduce/reduce) in state 1669.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 TASK identifier LPAREN INOUT tf_data_type identifier variable_dimension EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              TASK task_body_declaration 
                   identifier LPAREN task_port_list RPAREN SEMICOLON task_body_declaration_16 task_body_declaration_17 ENDTASK 
                                     task_port_item task_port_list_3 
                                     tf_inout_declaration 
                                     INOUT tf_data_type identifier variable_dimension EQUALS expression list_of_tf_variable_identifiers_5 
                                                                                             primary 
                                                                                             (?)

** In state 1669, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1669, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1669, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce) in state 1667.
** Token involved: LBRACK
** This state is reached from start after reading:

source_text_3 TASK identifier LPAREN INOUT tf_data_type identifier

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              TASK task_body_declaration 
                   identifier LPAREN task_port_list RPAREN SEMICOLON task_body_declaration_16 task_body_declaration_17 ENDTASK 
                                     task_port_item task_port_list_3 
                                     tf_inout_declaration 
                                     INOUT tf_data_type identifier variable_dimension list_of_tf_variable_identifiers_5 
                                                                   (?)

** In state 1667, looking ahead at LBRACK, shifting is permitted
** because of the following sub-derivation:

associative_dimension 
. LBRACK data_type RBRACK 

** In state 1667, looking ahead at LBRACK, reducing production
** variable_dimension_2 ->
** is permitted because of the following sub-derivation:

variable_dimension_2 
variable_dimension_2 unpacked_dimension // lookahead token appears because unpacked_dimension can begin with LBRACK
. 

** Conflict (shift/reduce) in state 1665.
** Token involved: COMMA
** This state is reached from start after reading:

source_text_3 TASK identifier LPAREN INOUT tf_inout_declaration_4 identifier list_of_tf_port_identifiers_3 list_of_tf_port_identifiers_5

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              TASK task_body_declaration 
                   identifier LPAREN task_port_list RPAREN SEMICOLON task_body_declaration_16 task_body_declaration_17 ENDTASK 
                                     (?)

** In state 1665, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

task_port_item task_port_list_3 
tf_inout_declaration 
INOUT tf_inout_declaration_4 identifier list_of_tf_port_identifiers_3 list_of_tf_port_identifiers_5 
                                                                      list_of_tf_port_identifiers_5 . COMMA identifier list_of_tf_port_identifiers_5_6 

** In state 1665, looking ahead at COMMA, reducing production
** tf_inout_declaration -> INOUT tf_inout_declaration_4 identifier list_of_tf_port_identifiers_3 list_of_tf_port_identifiers_5
** is permitted because of the following sub-derivation:

task_port_item task_port_list_3 // lookahead token appears because task_port_list_3 can begin with COMMA
tf_inout_declaration // lookahead token is inherited
INOUT tf_inout_declaration_4 identifier list_of_tf_port_identifiers_3 list_of_tf_port_identifiers_5 . 

** Conflict (shift/reduce) in state 1664.
** Token involved: COMMA
** This state is reached from start after reading:

source_text_3 TASK identifier LPAREN INOUT tf_inout_declaration_4 identifier list_of_tf_port_identifiers_3 EQUALS expression list_of_tf_port_identifiers_5

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              TASK task_body_declaration 
                   identifier LPAREN task_port_list RPAREN SEMICOLON task_body_declaration_16 task_body_declaration_17 ENDTASK 
                                     (?)

** In state 1664, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

task_port_item task_port_list_3 
tf_inout_declaration 
INOUT tf_inout_declaration_4 identifier list_of_tf_port_identifiers_3 EQUALS expression list_of_tf_port_identifiers_5 
                                                                                        list_of_tf_port_identifiers_5 . COMMA identifier list_of_tf_port_identifiers_5_6 

** In state 1664, looking ahead at COMMA, reducing production
** tf_inout_declaration -> INOUT tf_inout_declaration_4 identifier list_of_tf_port_identifiers_3 EQUALS expression list_of_tf_port_identifiers_5
** is permitted because of the following sub-derivation:

task_port_item task_port_list_3 // lookahead token appears because task_port_list_3 can begin with COMMA
tf_inout_declaration // lookahead token is inherited
INOUT tf_inout_declaration_4 identifier list_of_tf_port_identifiers_3 EQUALS expression list_of_tf_port_identifiers_5 . 

** Conflict (shift/reduce/reduce) in state 1662.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 TASK identifier LPAREN INOUT tf_inout_declaration_4 identifier list_of_tf_port_identifiers_3 EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              TASK task_body_declaration 
                   identifier LPAREN task_port_list RPAREN SEMICOLON task_body_declaration_16 task_body_declaration_17 ENDTASK 
                                     task_port_item task_port_list_3 
                                     tf_inout_declaration 
                                     INOUT tf_inout_declaration_4 identifier list_of_tf_port_identifiers_3 EQUALS expression list_of_tf_port_identifiers_5 
                                                                                                                  primary 
                                                                                                                  (?)

** In state 1662, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1662, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1662, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce) in state 1657.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 TASK identifier LPAREN INOUT

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              TASK task_body_declaration 
                   identifier LPAREN task_port_list RPAREN SEMICOLON task_body_declaration_16 task_body_declaration_17 ENDTASK 
                                     task_port_item task_port_list_3 
                                     tf_inout_declaration 
                                     (?)

** In state 1657, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

INOUT tf_data_type identifier variable_dimension list_of_tf_variable_identifiers_5 
      data_type 
      identifier type_declaration_identifier_3 data_type_11 
      . SIMPLE_IDENTIFIER 

** In state 1657, looking ahead at SIMPLE_IDENTIFIER, reducing production
** tf_inout_declaration_4 ->
** is permitted because of the following sub-derivation:

INOUT tf_inout_declaration_4 identifier list_of_tf_port_identifiers_3 list_of_tf_port_identifiers_5 // lookahead token appears because identifier can begin with SIMPLE_IDENTIFIER
      . 

** Conflict (shift/reduce) in state 1656.
** Token involved: COMMA
** This state is reached from start after reading:

source_text_3 TASK identifier LPAREN INPUT signing tf_input_declaration_4 identifier list_of_tf_port_identifiers_3 list_of_tf_port_identifiers_5

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              TASK task_body_declaration 
                   identifier LPAREN task_port_list RPAREN SEMICOLON task_body_declaration_16 task_body_declaration_17 ENDTASK 
                                     (?)

** In state 1656, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

task_port_item task_port_list_3 
tf_input_declaration 
INPUT signing tf_input_declaration_4 identifier list_of_tf_port_identifiers_3 list_of_tf_port_identifiers_5 
                                                                              list_of_tf_port_identifiers_5 . COMMA identifier list_of_tf_port_identifiers_5_6 

** In state 1656, looking ahead at COMMA, reducing production
** tf_input_declaration -> INPUT signing tf_input_declaration_4 identifier list_of_tf_port_identifiers_3 list_of_tf_port_identifiers_5
** is permitted because of the following sub-derivation:

task_port_item task_port_list_3 // lookahead token appears because task_port_list_3 can begin with COMMA
tf_input_declaration // lookahead token is inherited
INPUT signing tf_input_declaration_4 identifier list_of_tf_port_identifiers_3 list_of_tf_port_identifiers_5 . 

** Conflict (shift/reduce) in state 1655.
** Token involved: COMMA
** This state is reached from start after reading:

source_text_3 TASK identifier LPAREN INPUT signing tf_input_declaration_4 identifier list_of_tf_port_identifiers_3 EQUALS expression list_of_tf_port_identifiers_5

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              TASK task_body_declaration 
                   identifier LPAREN task_port_list RPAREN SEMICOLON task_body_declaration_16 task_body_declaration_17 ENDTASK 
                                     (?)

** In state 1655, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

task_port_item task_port_list_3 
tf_input_declaration 
INPUT signing tf_input_declaration_4 identifier list_of_tf_port_identifiers_3 EQUALS expression list_of_tf_port_identifiers_5 
                                                                                                list_of_tf_port_identifiers_5 . COMMA identifier list_of_tf_port_identifiers_5_6 

** In state 1655, looking ahead at COMMA, reducing production
** tf_input_declaration -> INPUT signing tf_input_declaration_4 identifier list_of_tf_port_identifiers_3 EQUALS expression list_of_tf_port_identifiers_5
** is permitted because of the following sub-derivation:

task_port_item task_port_list_3 // lookahead token appears because task_port_list_3 can begin with COMMA
tf_input_declaration // lookahead token is inherited
INPUT signing tf_input_declaration_4 identifier list_of_tf_port_identifiers_3 EQUALS expression list_of_tf_port_identifiers_5 . 

** Conflict (shift/reduce/reduce) in state 1653.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 TASK identifier LPAREN INPUT signing tf_input_declaration_4 identifier list_of_tf_port_identifiers_3 EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              TASK task_body_declaration 
                   identifier LPAREN task_port_list RPAREN SEMICOLON task_body_declaration_16 task_body_declaration_17 ENDTASK 
                                     task_port_item task_port_list_3 
                                     tf_input_declaration 
                                     INPUT signing tf_input_declaration_4 identifier list_of_tf_port_identifiers_3 EQUALS expression list_of_tf_port_identifiers_5 
                                                                                                                          primary 
                                                                                                                          (?)

** In state 1653, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1653, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1653, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce) in state 1648.
** Token involved: COMMA
** This state is reached from start after reading:

source_text_3 TASK identifier LPAREN INPUT tf_data_type identifier variable_dimension list_of_tf_variable_identifiers_5

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              TASK task_body_declaration 
                   identifier LPAREN task_port_list RPAREN SEMICOLON task_body_declaration_16 task_body_declaration_17 ENDTASK 
                                     (?)

** In state 1648, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

task_port_item task_port_list_3 
tf_input_declaration 
INPUT tf_data_type identifier variable_dimension list_of_tf_variable_identifiers_5 
                                                 list_of_tf_variable_identifiers_5 . COMMA identifier variable_dimension 

** In state 1648, looking ahead at COMMA, reducing production
** tf_input_declaration -> INPUT tf_data_type identifier variable_dimension list_of_tf_variable_identifiers_5
** is permitted because of the following sub-derivation:

task_port_item task_port_list_3 // lookahead token appears because task_port_list_3 can begin with COMMA
tf_input_declaration // lookahead token is inherited
INPUT tf_data_type identifier variable_dimension list_of_tf_variable_identifiers_5 . 

** Conflict (shift/reduce) in state 1647.
** Token involved: COMMA
** This state is reached from start after reading:

source_text_3 TASK identifier LPAREN INPUT tf_data_type identifier variable_dimension EQUALS expression list_of_tf_variable_identifiers_5

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              TASK task_body_declaration 
                   identifier LPAREN task_port_list RPAREN SEMICOLON task_body_declaration_16 task_body_declaration_17 ENDTASK 
                                     (?)

** In state 1647, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

task_port_item task_port_list_3 
tf_input_declaration 
INPUT tf_data_type identifier variable_dimension EQUALS expression list_of_tf_variable_identifiers_5 
                                                                   list_of_tf_variable_identifiers_5 . COMMA identifier variable_dimension 

** In state 1647, looking ahead at COMMA, reducing production
** tf_input_declaration -> INPUT tf_data_type identifier variable_dimension EQUALS expression list_of_tf_variable_identifiers_5
** is permitted because of the following sub-derivation:

task_port_item task_port_list_3 // lookahead token appears because task_port_list_3 can begin with COMMA
tf_input_declaration // lookahead token is inherited
INPUT tf_data_type identifier variable_dimension EQUALS expression list_of_tf_variable_identifiers_5 . 

** Conflict (shift/reduce/reduce) in state 1645.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 TASK identifier LPAREN INPUT tf_data_type identifier variable_dimension EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              TASK task_body_declaration 
                   identifier LPAREN task_port_list RPAREN SEMICOLON task_body_declaration_16 task_body_declaration_17 ENDTASK 
                                     task_port_item task_port_list_3 
                                     tf_input_declaration 
                                     INPUT tf_data_type identifier variable_dimension EQUALS expression list_of_tf_variable_identifiers_5 
                                                                                             primary 
                                                                                             (?)

** In state 1645, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1645, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1645, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce) in state 1643.
** Token involved: LBRACK
** This state is reached from start after reading:

source_text_3 TASK identifier LPAREN INPUT tf_data_type identifier

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              TASK task_body_declaration 
                   identifier LPAREN task_port_list RPAREN SEMICOLON task_body_declaration_16 task_body_declaration_17 ENDTASK 
                                     task_port_item task_port_list_3 
                                     tf_input_declaration 
                                     INPUT tf_data_type identifier variable_dimension list_of_tf_variable_identifiers_5 
                                                                   (?)

** In state 1643, looking ahead at LBRACK, shifting is permitted
** because of the following sub-derivation:

associative_dimension 
. LBRACK data_type RBRACK 

** In state 1643, looking ahead at LBRACK, reducing production
** variable_dimension_2 ->
** is permitted because of the following sub-derivation:

variable_dimension_2 
variable_dimension_2 unpacked_dimension // lookahead token appears because unpacked_dimension can begin with LBRACK
. 

** Conflict (shift/reduce) in state 1641.
** Token involved: COMMA
** This state is reached from start after reading:

source_text_3 TASK identifier LPAREN INPUT tf_input_declaration_4 identifier list_of_tf_port_identifiers_3 list_of_tf_port_identifiers_5

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              TASK task_body_declaration 
                   identifier LPAREN task_port_list RPAREN SEMICOLON task_body_declaration_16 task_body_declaration_17 ENDTASK 
                                     (?)

** In state 1641, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

task_port_item task_port_list_3 
tf_input_declaration 
INPUT tf_input_declaration_4 identifier list_of_tf_port_identifiers_3 list_of_tf_port_identifiers_5 
                                                                      list_of_tf_port_identifiers_5 . COMMA identifier list_of_tf_port_identifiers_5_6 

** In state 1641, looking ahead at COMMA, reducing production
** tf_input_declaration -> INPUT tf_input_declaration_4 identifier list_of_tf_port_identifiers_3 list_of_tf_port_identifiers_5
** is permitted because of the following sub-derivation:

task_port_item task_port_list_3 // lookahead token appears because task_port_list_3 can begin with COMMA
tf_input_declaration // lookahead token is inherited
INPUT tf_input_declaration_4 identifier list_of_tf_port_identifiers_3 list_of_tf_port_identifiers_5 . 

** Conflict (shift/reduce) in state 1640.
** Token involved: COMMA
** This state is reached from start after reading:

source_text_3 TASK identifier LPAREN INPUT tf_input_declaration_4 identifier list_of_tf_port_identifiers_3 EQUALS expression list_of_tf_port_identifiers_5

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              TASK task_body_declaration 
                   identifier LPAREN task_port_list RPAREN SEMICOLON task_body_declaration_16 task_body_declaration_17 ENDTASK 
                                     (?)

** In state 1640, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

task_port_item task_port_list_3 
tf_input_declaration 
INPUT tf_input_declaration_4 identifier list_of_tf_port_identifiers_3 EQUALS expression list_of_tf_port_identifiers_5 
                                                                                        list_of_tf_port_identifiers_5 . COMMA identifier list_of_tf_port_identifiers_5_6 

** In state 1640, looking ahead at COMMA, reducing production
** tf_input_declaration -> INPUT tf_input_declaration_4 identifier list_of_tf_port_identifiers_3 EQUALS expression list_of_tf_port_identifiers_5
** is permitted because of the following sub-derivation:

task_port_item task_port_list_3 // lookahead token appears because task_port_list_3 can begin with COMMA
tf_input_declaration // lookahead token is inherited
INPUT tf_input_declaration_4 identifier list_of_tf_port_identifiers_3 EQUALS expression list_of_tf_port_identifiers_5 . 

** Conflict (shift/reduce/reduce) in state 1638.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 TASK identifier LPAREN INPUT tf_input_declaration_4 identifier list_of_tf_port_identifiers_3 EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              TASK task_body_declaration 
                   identifier LPAREN task_port_list RPAREN SEMICOLON task_body_declaration_16 task_body_declaration_17 ENDTASK 
                                     task_port_item task_port_list_3 
                                     tf_input_declaration 
                                     INPUT tf_input_declaration_4 identifier list_of_tf_port_identifiers_3 EQUALS expression list_of_tf_port_identifiers_5 
                                                                                                                  primary 
                                                                                                                  (?)

** In state 1638, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1638, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1638, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce) in state 1633.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 TASK identifier LPAREN INPUT

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              TASK task_body_declaration 
                   identifier LPAREN task_port_list RPAREN SEMICOLON task_body_declaration_16 task_body_declaration_17 ENDTASK 
                                     task_port_item task_port_list_3 
                                     tf_input_declaration 
                                     (?)

** In state 1633, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

INPUT tf_data_type identifier variable_dimension list_of_tf_variable_identifiers_5 
      data_type 
      identifier type_declaration_identifier_3 data_type_11 
      . SIMPLE_IDENTIFIER 

** In state 1633, looking ahead at SIMPLE_IDENTIFIER, reducing production
** tf_input_declaration_4 ->
** is permitted because of the following sub-derivation:

INPUT tf_input_declaration_4 identifier list_of_tf_port_identifiers_3 list_of_tf_port_identifiers_5 // lookahead token appears because identifier can begin with SIMPLE_IDENTIFIER
      . 

** Conflict (shift/reduce) in state 1632.
** Token involved: COMMA
** This state is reached from start after reading:

source_text_3 TASK identifier LPAREN OUTPUT signing tf_output_declaration_4 identifier list_of_tf_port_identifiers_3 list_of_tf_port_identifiers_5

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              TASK task_body_declaration 
                   identifier LPAREN task_port_list RPAREN SEMICOLON task_body_declaration_16 task_body_declaration_17 ENDTASK 
                                     (?)

** In state 1632, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

task_port_item task_port_list_3 
tf_output_declaration 
OUTPUT signing tf_output_declaration_4 identifier list_of_tf_port_identifiers_3 list_of_tf_port_identifiers_5 
                                                                                list_of_tf_port_identifiers_5 . COMMA identifier list_of_tf_port_identifiers_5_6 

** In state 1632, looking ahead at COMMA, reducing production
** tf_output_declaration -> OUTPUT signing tf_output_declaration_4 identifier list_of_tf_port_identifiers_3 list_of_tf_port_identifiers_5
** is permitted because of the following sub-derivation:

task_port_item task_port_list_3 // lookahead token appears because task_port_list_3 can begin with COMMA
tf_output_declaration // lookahead token is inherited
OUTPUT signing tf_output_declaration_4 identifier list_of_tf_port_identifiers_3 list_of_tf_port_identifiers_5 . 

** Conflict (shift/reduce) in state 1631.
** Token involved: COMMA
** This state is reached from start after reading:

source_text_3 TASK identifier LPAREN OUTPUT signing tf_output_declaration_4 identifier list_of_tf_port_identifiers_3 EQUALS expression list_of_tf_port_identifiers_5

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              TASK task_body_declaration 
                   identifier LPAREN task_port_list RPAREN SEMICOLON task_body_declaration_16 task_body_declaration_17 ENDTASK 
                                     (?)

** In state 1631, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

task_port_item task_port_list_3 
tf_output_declaration 
OUTPUT signing tf_output_declaration_4 identifier list_of_tf_port_identifiers_3 EQUALS expression list_of_tf_port_identifiers_5 
                                                                                                  list_of_tf_port_identifiers_5 . COMMA identifier list_of_tf_port_identifiers_5_6 

** In state 1631, looking ahead at COMMA, reducing production
** tf_output_declaration -> OUTPUT signing tf_output_declaration_4 identifier list_of_tf_port_identifiers_3 EQUALS expression list_of_tf_port_identifiers_5
** is permitted because of the following sub-derivation:

task_port_item task_port_list_3 // lookahead token appears because task_port_list_3 can begin with COMMA
tf_output_declaration // lookahead token is inherited
OUTPUT signing tf_output_declaration_4 identifier list_of_tf_port_identifiers_3 EQUALS expression list_of_tf_port_identifiers_5 . 

** Conflict (shift/reduce/reduce) in state 1629.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 TASK identifier LPAREN OUTPUT signing tf_output_declaration_4 identifier list_of_tf_port_identifiers_3 EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              TASK task_body_declaration 
                   identifier LPAREN task_port_list RPAREN SEMICOLON task_body_declaration_16 task_body_declaration_17 ENDTASK 
                                     task_port_item task_port_list_3 
                                     tf_output_declaration 
                                     OUTPUT signing tf_output_declaration_4 identifier list_of_tf_port_identifiers_3 EQUALS expression list_of_tf_port_identifiers_5 
                                                                                                                            primary 
                                                                                                                            (?)

** In state 1629, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1629, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1629, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce) in state 1624.
** Token involved: COMMA
** This state is reached from start after reading:

source_text_3 TASK identifier LPAREN OUTPUT tf_data_type identifier variable_dimension list_of_tf_variable_identifiers_5

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              TASK task_body_declaration 
                   identifier LPAREN task_port_list RPAREN SEMICOLON task_body_declaration_16 task_body_declaration_17 ENDTASK 
                                     (?)

** In state 1624, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

task_port_item task_port_list_3 
tf_output_declaration 
OUTPUT tf_data_type identifier variable_dimension list_of_tf_variable_identifiers_5 
                                                  list_of_tf_variable_identifiers_5 . COMMA identifier variable_dimension 

** In state 1624, looking ahead at COMMA, reducing production
** tf_output_declaration -> OUTPUT tf_data_type identifier variable_dimension list_of_tf_variable_identifiers_5
** is permitted because of the following sub-derivation:

task_port_item task_port_list_3 // lookahead token appears because task_port_list_3 can begin with COMMA
tf_output_declaration // lookahead token is inherited
OUTPUT tf_data_type identifier variable_dimension list_of_tf_variable_identifiers_5 . 

** Conflict (shift/reduce) in state 1623.
** Token involved: COMMA
** This state is reached from start after reading:

source_text_3 TASK identifier LPAREN OUTPUT tf_data_type identifier variable_dimension EQUALS expression list_of_tf_variable_identifiers_5

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              TASK task_body_declaration 
                   identifier LPAREN task_port_list RPAREN SEMICOLON task_body_declaration_16 task_body_declaration_17 ENDTASK 
                                     (?)

** In state 1623, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

task_port_item task_port_list_3 
tf_output_declaration 
OUTPUT tf_data_type identifier variable_dimension EQUALS expression list_of_tf_variable_identifiers_5 
                                                                    list_of_tf_variable_identifiers_5 . COMMA identifier variable_dimension 

** In state 1623, looking ahead at COMMA, reducing production
** tf_output_declaration -> OUTPUT tf_data_type identifier variable_dimension EQUALS expression list_of_tf_variable_identifiers_5
** is permitted because of the following sub-derivation:

task_port_item task_port_list_3 // lookahead token appears because task_port_list_3 can begin with COMMA
tf_output_declaration // lookahead token is inherited
OUTPUT tf_data_type identifier variable_dimension EQUALS expression list_of_tf_variable_identifiers_5 . 

** Conflict (shift/reduce/reduce) in state 1621.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 TASK identifier LPAREN OUTPUT tf_data_type identifier variable_dimension EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              TASK task_body_declaration 
                   identifier LPAREN task_port_list RPAREN SEMICOLON task_body_declaration_16 task_body_declaration_17 ENDTASK 
                                     task_port_item task_port_list_3 
                                     tf_output_declaration 
                                     OUTPUT tf_data_type identifier variable_dimension EQUALS expression list_of_tf_variable_identifiers_5 
                                                                                              primary 
                                                                                              (?)

** In state 1621, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1621, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1621, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce) in state 1619.
** Token involved: LBRACK
** This state is reached from start after reading:

source_text_3 TASK identifier LPAREN OUTPUT tf_data_type identifier

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              TASK task_body_declaration 
                   identifier LPAREN task_port_list RPAREN SEMICOLON task_body_declaration_16 task_body_declaration_17 ENDTASK 
                                     task_port_item task_port_list_3 
                                     tf_output_declaration 
                                     OUTPUT tf_data_type identifier variable_dimension list_of_tf_variable_identifiers_5 
                                                                    (?)

** In state 1619, looking ahead at LBRACK, shifting is permitted
** because of the following sub-derivation:

associative_dimension 
. LBRACK data_type RBRACK 

** In state 1619, looking ahead at LBRACK, reducing production
** variable_dimension_2 ->
** is permitted because of the following sub-derivation:

variable_dimension_2 
variable_dimension_2 unpacked_dimension // lookahead token appears because unpacked_dimension can begin with LBRACK
. 

** Conflict (shift/reduce) in state 1617.
** Token involved: COMMA
** This state is reached from start after reading:

source_text_3 TASK identifier LPAREN OUTPUT tf_output_declaration_4 identifier list_of_tf_port_identifiers_3 list_of_tf_port_identifiers_5

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              TASK task_body_declaration 
                   identifier LPAREN task_port_list RPAREN SEMICOLON task_body_declaration_16 task_body_declaration_17 ENDTASK 
                                     (?)

** In state 1617, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

task_port_item task_port_list_3 
tf_output_declaration 
OUTPUT tf_output_declaration_4 identifier list_of_tf_port_identifiers_3 list_of_tf_port_identifiers_5 
                                                                        list_of_tf_port_identifiers_5 . COMMA identifier list_of_tf_port_identifiers_5_6 

** In state 1617, looking ahead at COMMA, reducing production
** tf_output_declaration -> OUTPUT tf_output_declaration_4 identifier list_of_tf_port_identifiers_3 list_of_tf_port_identifiers_5
** is permitted because of the following sub-derivation:

task_port_item task_port_list_3 // lookahead token appears because task_port_list_3 can begin with COMMA
tf_output_declaration // lookahead token is inherited
OUTPUT tf_output_declaration_4 identifier list_of_tf_port_identifiers_3 list_of_tf_port_identifiers_5 . 

** Conflict (shift/reduce/reduce) in state 1613.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 TASK identifier LPAREN port_type identifier list_of_tf_port_identifiers_3 list_of_tf_port_identifiers_5 COMMA identifier list_of_tf_port_identifiers_5_6 EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              TASK task_body_declaration 
                   identifier LPAREN task_port_list RPAREN SEMICOLON task_body_declaration_16 task_body_declaration_17 ENDTASK 
                                     task_port_item task_port_list_3 
                                     port_type identifier list_of_tf_port_identifiers_3 list_of_tf_port_identifiers_5 
                                                                                        list_of_tf_port_identifiers_5 COMMA identifier list_of_tf_port_identifiers_5_6 EQUALS expression 
                                                                                                                                                                              primary 
                                                                                                                                                                              (?)

** In state 1613, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1613, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1613, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce) in state 1609.
** Token involved: COMMA
** This state is reached from start after reading:

source_text_3 TASK identifier LPAREN OUTPUT tf_output_declaration_4 identifier list_of_tf_port_identifiers_3 EQUALS expression list_of_tf_port_identifiers_5

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              TASK task_body_declaration 
                   identifier LPAREN task_port_list RPAREN SEMICOLON task_body_declaration_16 task_body_declaration_17 ENDTASK 
                                     (?)

** In state 1609, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

task_port_item task_port_list_3 
tf_output_declaration 
OUTPUT tf_output_declaration_4 identifier list_of_tf_port_identifiers_3 EQUALS expression list_of_tf_port_identifiers_5 
                                                                                          list_of_tf_port_identifiers_5 . COMMA identifier list_of_tf_port_identifiers_5_6 

** In state 1609, looking ahead at COMMA, reducing production
** tf_output_declaration -> OUTPUT tf_output_declaration_4 identifier list_of_tf_port_identifiers_3 EQUALS expression list_of_tf_port_identifiers_5
** is permitted because of the following sub-derivation:

task_port_item task_port_list_3 // lookahead token appears because task_port_list_3 can begin with COMMA
tf_output_declaration // lookahead token is inherited
OUTPUT tf_output_declaration_4 identifier list_of_tf_port_identifiers_3 EQUALS expression list_of_tf_port_identifiers_5 . 

** Conflict (shift/reduce/reduce) in state 1607.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 TASK identifier LPAREN OUTPUT tf_output_declaration_4 identifier list_of_tf_port_identifiers_3 EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              TASK task_body_declaration 
                   identifier LPAREN task_port_list RPAREN SEMICOLON task_body_declaration_16 task_body_declaration_17 ENDTASK 
                                     task_port_item task_port_list_3 
                                     tf_output_declaration 
                                     OUTPUT tf_output_declaration_4 identifier list_of_tf_port_identifiers_3 EQUALS expression list_of_tf_port_identifiers_5 
                                                                                                                    primary 
                                                                                                                    (?)

** In state 1607, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1607, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1607, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce) in state 1602.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 TASK identifier LPAREN OUTPUT

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              TASK task_body_declaration 
                   identifier LPAREN task_port_list RPAREN SEMICOLON task_body_declaration_16 task_body_declaration_17 ENDTASK 
                                     task_port_item task_port_list_3 
                                     tf_output_declaration 
                                     (?)

** In state 1602, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

OUTPUT tf_data_type identifier variable_dimension list_of_tf_variable_identifiers_5 
       data_type 
       identifier type_declaration_identifier_3 data_type_11 
       . SIMPLE_IDENTIFIER 

** In state 1602, looking ahead at SIMPLE_IDENTIFIER, reducing production
** tf_output_declaration_4 ->
** is permitted because of the following sub-derivation:

OUTPUT tf_output_declaration_4 identifier list_of_tf_port_identifiers_3 list_of_tf_port_identifiers_5 // lookahead token appears because identifier can begin with SIMPLE_IDENTIFIER
       . 

** Conflict (shift/reduce) in state 1600.
** Token involved: COMMA
** This state is reached from start after reading:

source_text_3 INTERFACE identifier SEMICOLON interface_declaration_10 EXTERN TASK identifier LPAREN REF tf_data_type identifier variable_dimension list_of_tf_variable_identifiers_5

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier SEMICOLON interface_declaration_10 ENDINTERFACE 
                                             interface_declaration_10 non_port_interface_item 
                                                                      interface_or_generate_item 
                                                                      extern_tf_declaration 
                                                                      EXTERN method_prototype 
                                                                             (?)

** In state 1600, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

TASK identifier LPAREN task_proto_formal named_task_proto_5 RPAREN SEMICOLON 
                       REF tf_data_type identifier variable_dimension list_of_tf_variable_identifiers_5 
                                                                      list_of_tf_variable_identifiers_5 . COMMA identifier variable_dimension 

** In state 1600, looking ahead at COMMA, reducing production
** task_proto_formal -> REF tf_data_type identifier variable_dimension list_of_tf_variable_identifiers_5
** is permitted because of the following sub-derivation:

TASK identifier LPAREN task_proto_formal named_task_proto_5 RPAREN SEMICOLON // lookahead token appears because named_task_proto_5 can begin with COMMA
                       REF tf_data_type identifier variable_dimension list_of_tf_variable_identifiers_5 . 

** Conflict (shift/reduce/reduce) in state 1598.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 TASK identifier LPAREN tf_data_type identifier variable_dimension list_of_tf_variable_identifiers_5 COMMA identifier variable_dimension EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              TASK task_body_declaration 
                   identifier LPAREN task_port_list RPAREN SEMICOLON task_body_declaration_16 task_body_declaration_17 ENDTASK 
                                     task_port_item task_port_list_3 
                                     tf_data_type identifier variable_dimension list_of_tf_variable_identifiers_5 
                                                                                list_of_tf_variable_identifiers_5 COMMA identifier variable_dimension EQUALS expression 
                                                                                                                                                             primary 
                                                                                                                                                             (?)

** In state 1598, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1598, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1598, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce) in state 1596.
** Token involved: LBRACK
** This state is reached from start after reading:

source_text_3 TASK identifier LPAREN tf_data_type identifier variable_dimension list_of_tf_variable_identifiers_5 COMMA identifier

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              TASK task_body_declaration 
                   identifier LPAREN task_port_list RPAREN SEMICOLON task_body_declaration_16 task_body_declaration_17 ENDTASK 
                                     task_port_item task_port_list_3 
                                     tf_data_type identifier variable_dimension list_of_tf_variable_identifiers_5 
                                                                                list_of_tf_variable_identifiers_5 COMMA identifier variable_dimension 
                                                                                                                                   (?)

** In state 1596, looking ahead at LBRACK, shifting is permitted
** because of the following sub-derivation:

associative_dimension 
. LBRACK data_type RBRACK 

** In state 1596, looking ahead at LBRACK, reducing production
** variable_dimension_2 ->
** is permitted because of the following sub-derivation:

variable_dimension_2 
variable_dimension_2 unpacked_dimension // lookahead token appears because unpacked_dimension can begin with LBRACK
. 

** Conflict (shift/reduce) in state 1594.
** Token involved: COMMA
** This state is reached from start after reading:

source_text_3 INTERFACE identifier SEMICOLON interface_declaration_10 EXTERN TASK identifier LPAREN REF tf_data_type identifier variable_dimension EQUALS expression list_of_tf_variable_identifiers_5

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier SEMICOLON interface_declaration_10 ENDINTERFACE 
                                             interface_declaration_10 non_port_interface_item 
                                                                      interface_or_generate_item 
                                                                      extern_tf_declaration 
                                                                      EXTERN method_prototype 
                                                                             (?)

** In state 1594, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

TASK identifier LPAREN task_proto_formal named_task_proto_5 RPAREN SEMICOLON 
                       REF tf_data_type identifier variable_dimension EQUALS expression list_of_tf_variable_identifiers_5 
                                                                                        list_of_tf_variable_identifiers_5 . COMMA identifier variable_dimension 

** In state 1594, looking ahead at COMMA, reducing production
** task_proto_formal -> REF tf_data_type identifier variable_dimension EQUALS expression list_of_tf_variable_identifiers_5
** is permitted because of the following sub-derivation:

TASK identifier LPAREN task_proto_formal named_task_proto_5 RPAREN SEMICOLON // lookahead token appears because named_task_proto_5 can begin with COMMA
                       REF tf_data_type identifier variable_dimension EQUALS expression list_of_tf_variable_identifiers_5 . 

** Conflict (shift/reduce/reduce) in state 1592.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 INTERFACE identifier SEMICOLON interface_declaration_10 EXTERN TASK identifier LPAREN REF tf_data_type identifier variable_dimension EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier SEMICOLON interface_declaration_10 ENDINTERFACE 
                                             interface_declaration_10 non_port_interface_item 
                                                                      interface_or_generate_item 
                                                                      extern_tf_declaration 
                                                                      EXTERN method_prototype 
                                                                             TASK identifier LPAREN task_proto_formal named_task_proto_5 RPAREN SEMICOLON 
                                                                                                    REF tf_data_type identifier variable_dimension EQUALS expression list_of_tf_variable_identifiers_5 
                                                                                                                                                          primary 
                                                                                                                                                          (?)

** In state 1592, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1592, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1592, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce) in state 1590.
** Token involved: LBRACK
** This state is reached from start after reading:

source_text_3 INTERFACE identifier SEMICOLON interface_declaration_10 EXTERN TASK identifier LPAREN REF tf_data_type identifier

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              interface_declaration 
              INTERFACE identifier SEMICOLON interface_declaration_10 ENDINTERFACE 
                                             interface_declaration_10 non_port_interface_item 
                                                                      interface_or_generate_item 
                                                                      extern_tf_declaration 
                                                                      EXTERN method_prototype 
                                                                             TASK identifier LPAREN task_proto_formal named_task_proto_5 RPAREN SEMICOLON 
                                                                                                    REF tf_data_type identifier variable_dimension list_of_tf_variable_identifiers_5 
                                                                                                                                (?)

** In state 1590, looking ahead at LBRACK, shifting is permitted
** because of the following sub-derivation:

associative_dimension 
. LBRACK data_type RBRACK 

** In state 1590, looking ahead at LBRACK, reducing production
** variable_dimension_2 ->
** is permitted because of the following sub-derivation:

variable_dimension_2 
variable_dimension_2 unpacked_dimension // lookahead token appears because unpacked_dimension can begin with LBRACK
. 

** Conflict (reduce/reduce) in state 1588.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 TASK identifier LPAREN CHANDLE

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              TASK task_body_declaration 
                   identifier LPAREN task_port_list RPAREN SEMICOLON task_body_declaration_16 task_body_declaration_17 ENDTASK 
                                     task_port_item task_port_list_3 
                                     (?)

** In state 1588, looking ahead at SIMPLE_IDENTIFIER, reducing production
** data_type -> CHANDLE
** is permitted because of the following sub-derivation:

port_type identifier list_of_tf_port_identifiers_3 list_of_tf_port_identifiers_5 // lookahead token appears because identifier can begin with SIMPLE_IDENTIFIER
data_type // lookahead token is inherited
CHANDLE . 

** In state 1588, looking ahead at SIMPLE_IDENTIFIER, reducing production
** tf_data_type -> CHANDLE
** is permitted because of the following sub-derivation:

tf_data_type identifier variable_dimension list_of_tf_variable_identifiers_5 // lookahead token appears because identifier can begin with SIMPLE_IDENTIFIER
CHANDLE . 

** Conflict (shift/reduce/reduce) in state 1578.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 CLASS identifier SEMICOLON class_declaration_11 STATIC CONSTRAINT identifier LCURLY constraint_declaration_6

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              CLASS identifier SEMICOLON class_declaration_11 ENDCLASS 
                                         class_declaration_11 class_item 
                                                              class_constraint 
                                                              STATIC CONSTRAINT identifier LCURLY constraint_declaration_6 RCURLY 
                                                                                                  constraint_declaration_6 constraint_block 
                                                                                                                           expression DIST LCURLY dist_item dist_list_3 RCURLY SEMICOLON 
                                                                                                                           primary 
                                                                                                                           (?)

** In state 1578, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1578, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1578, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 1573.
** Tokens involved: VIRTUAL STATIC PROTECTED LOCAL CONST
** The following explanations concentrate on token STATIC.
** This state is reached from start after reading:

source_text_3 VIRTUAL CLASS lifetime identifier SEMICOLON timeunits_declaration class_declaration_11

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              VIRTUAL CLASS lifetime identifier SEMICOLON timeunits_declaration class_declaration_11 ENDCLASS 
                                                                                class_declaration_11 class_item 
                                                                                                     (?)

** In state 1573, looking ahead at STATIC, shifting is permitted
** because of the following sub-derivation:

class_constraint 
. STATIC CONSTRAINT identifier 

** In state 1573, looking ahead at STATIC, reducing production
** class_method_2 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_2 TASK task_body_declaration 
class_method_2 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 1573, looking ahead at STATIC, reducing production
** class_method_5 ->
** is permitted because of the following sub-derivation:

class_method 
class_method_5 FUNCTION function_body_declaration 
class_method_5 method_qualifier // lookahead token appears because method_qualifier can begin with STATIC
. 

** In state 1573, looking ahead at STATIC, reducing production
** class_property_2 ->
** is permitted because of the following sub-derivation:

class_property 
class_property_2 data_declaration // lookahead token appears because data_declaration can begin with STATIC
. 

** Conflict (shift/reduce) in state 1555.
** Tokens involved: XOR XNOR WOR WIRE WHILE WAND WAIT_ORDER WAIT VOID VIRTUAL VBAR UNSIGNED_NUMBER UNSIGNED UNIQUE UNION TYPEDEF TRIREG TRIOR TRIAND TRI1 TRI0 TRI TRANIF1 TRANIF0 TRAN TOKEN_TWO TOKEN_THREE TOKEN_SIX TOKEN_SEVEN TOKEN_QUOTE_Z2 TOKEN_QUOTE_Z1 TOKEN_QUOTE_X2 TOKEN_QUOTE_X1 TOKEN_QUOTE_TRUE TOKEN_QUOTE_FALSE TOKEN_PLUS_PLUS TOKEN_ONE TOKEN_NINE TOKEN_FOUR TOKEN_FIVE TOKEN_EIGHT TOKEN_DASH_DASH TIME TILDE_VBAR TILDE THIS TASK SYSTEM_TASK_IDENTIFIER SYSTEM_FUNCTION_IDENTIFIER SVINT SUPPLY1 SUPPLY0 SUPER STRUCT STRING STATIC SPECPARAM SPECIFY SIMPLE_IDENTIFIER SIGNED SHORTREAL SHORTINT SEQUENCE SEMICOLON RTRANIF1 RTRANIF0 RTRAN RPMOS RNMOS RETURN REPEAT RELEASE REG REF REALTIME REAL RCMOS P_XNOR P_POUNDPOUND P_NXOR P_NAND P_MINUSGT PULLUP PULLDOWN PROPERTY PROGRAM PRIORITY PRIMITIVE PMOS PLUS PLING PARAMETER OUTPUT OR OCTAL_BASE NULL NOTIF1 NOTIF0 NOT NOR NMOS NAND MODULE MODPORT MINUS MACROMODULE LPAREN LONGINT LOGIC LOCALPARAM LCURLY JOIN_NONE JOIN_ANY JOIN INTERFACE INTEGER INPUT INOUT INITIAL IMPORT IF HEX_BASE HASH GENVAR GENERATE FUNCTION FORK FOREVER FORCE FOR FINAL EXTERN EXPORT EVENT ENUM ENDTASK ENDPROGRAM ENDMODULE ENDINTERFACE ENDGENERATE ENDCASE END ELSE DOUBLE_QUOTES DO DISABLE DEFPARAM DEFAULT DECIMAL_BASE DEASSIGN DASH_GT_GT COVER CONTINUE CONSTRAINT CONST CMOS CLOCKING CLASS CHANDLE CASEZ CASEX CASE CARET BYTE BUFIF1 BUFIF0 BUF BREAK BIT BIND BINARY_BASE BEGIN BACKSLASH AUTOMATIC AT_STAR AT ASSIGN ASSERT AND AMPERSAND ALWAYS_LATCH ALWAYS_FF ALWAYS_COMB ALWAYS ALIAS #
** The following explanations concentrate on token ELSE.
** This state is reached from start after reading:

source_text_3 IF LPAREN expression RPAREN statement_or_null

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              conditional_statement 
              (?)

** In state 1555, looking ahead at ELSE, shifting is permitted
** because of the following sub-derivation:

IF LPAREN expression RPAREN statement_or_null . ELSE statement_or_null 

** In state 1555, looking ahead at ELSE, reducing production
** if_else_if_statement_8 ->
** is permitted because of the following sub-derivation:

IF LPAREN expression RPAREN statement_or_null if_else_if_statement_8 ELSE statement_or_null // lookahead token appears
                                              . 

** Conflict (shift/reduce) in state 1550.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 FORK par_block_4

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              (?)

** In state 1550, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

FORK par_block_4 par_block_5 join_keyword 
     par_block_4 block_item_declaration 
                 block_data_declaration 
                 block_variable_declaration 
                 data_type identifier variable_dimension list_of_variable_identifiers_4 SEMICOLON 
                 identifier type_declaration_identifier_3 data_type_11 
                 . SIMPLE_IDENTIFIER 

** In state 1550, looking ahead at SIMPLE_IDENTIFIER, reducing production
** par_block_5 ->
** is permitted because of the following sub-derivation:

FORK par_block_4 par_block_5 join_keyword 
                 par_block_5 statement_or_null // lookahead token appears because statement_or_null can begin with SIMPLE_IDENTIFIER
                 . 

** Conflict (shift/reduce/reduce) in state 1530.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 FOR LPAREN variable_decl_or_assignment loop_statement_30 SEMICOLON

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              loop_statement 
              FOR LPAREN variable_decl_or_assignment loop_statement_30 SEMICOLON expression SEMICOLON variable_assignment loop_statement_35 RPAREN statement_or_null 
                                                                                 primary 
                                                                                 (?)

** In state 1530, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1530, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1530, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 1524.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 DO statement_or_null WHILE LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              loop_statement 
              DO statement_or_null WHILE LPAREN expression RPAREN SEMICOLON 
                                                primary 
                                                (?)

** In state 1524, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1524, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1524, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 1511.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 CASEZ LPAREN expression RPAREN case_item case_statement_17

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              case_statement 
              CASEZ LPAREN expression RPAREN case_item case_statement_17 ENDCASE 
                                                       case_statement_17 case_item 
                                                                         expression case_item_3 COLON statement_or_null 
                                                                         primary 
                                                                         (?)

** In state 1511, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1511, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1511, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 1506.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 CASEX LPAREN expression RPAREN case_item case_statement_26

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              case_statement 
              CASEX LPAREN expression RPAREN case_item case_statement_26 ENDCASE 
                                                       case_statement_26 case_item 
                                                                         expression case_item_3 COLON statement_or_null 
                                                                         primary 
                                                                         (?)

** In state 1506, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1506, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1506, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce) in state 1499.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 BEGIN seq_block_4

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              (?)

** In state 1499, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

BEGIN seq_block_4 seq_block_5 END 
      seq_block_4 block_item_declaration 
                  block_data_declaration 
                  block_variable_declaration 
                  data_type identifier variable_dimension list_of_variable_identifiers_4 SEMICOLON 
                  identifier type_declaration_identifier_3 data_type_11 
                  . SIMPLE_IDENTIFIER 

** In state 1499, looking ahead at SIMPLE_IDENTIFIER, reducing production
** seq_block_5 ->
** is permitted because of the following sub-derivation:

BEGIN seq_block_4 seq_block_5 END 
                  seq_block_5 statement_or_null // lookahead token appears because statement_or_null can begin with SIMPLE_IDENTIFIER
                  . 

** Conflict (shift/reduce) in state 1492.
** Token involved: LBRACK
** This state is reached from start after reading:

source_text_3 FORK par_block_4 data_type identifier

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              FORK par_block_4 par_block_5 join_keyword 
                   par_block_4 block_item_declaration 
                               block_data_declaration 
                               block_variable_declaration 
                               data_type identifier variable_dimension list_of_variable_identifiers_4 SEMICOLON 
                                                    (?)

** In state 1492, looking ahead at LBRACK, shifting is permitted
** because of the following sub-derivation:

associative_dimension 
. LBRACK data_type RBRACK 

** In state 1492, looking ahead at LBRACK, reducing production
** variable_dimension_2 ->
** is permitted because of the following sub-derivation:

variable_dimension_2 
variable_dimension_2 unpacked_dimension // lookahead token appears because unpacked_dimension can begin with LBRACK
. 

** Conflict (reduce/reduce) in state 1488.
** Tokens involved: SEMICOLON COMMA
** The following explanations concentrate on token SEMICOLON.
** This state is reached from start after reading:

source_text_3 FORK par_block_4 lifetime data_type identifier variable_dimension

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              FORK par_block_4 par_block_5 join_keyword 
                   par_block_4 block_item_declaration 
                               block_data_declaration 
                               block_variable_declaration 
                               (?)

** In state 1488, looking ahead at SEMICOLON, reducing production
** list_of_variable_identifiers_4 ->
** is permitted because of the following sub-derivation:

lifetime data_type identifier variable_dimension list_of_variable_identifiers_4 SEMICOLON // lookahead token appears
                                                 . 

** In state 1488, looking ahead at SEMICOLON, reducing production
** variable_decl_assignment -> identifier variable_dimension
** is permitted because of the following sub-derivation:

lifetime data_type variable_decl_assignment list_of_variable_decl_assignments_3 SEMICOLON // lookahead token appears because list_of_variable_decl_assignments_3 can vanish
                   identifier variable_dimension . 

** Conflict (shift/reduce) in state 1487.
** Tokens involved: SEMICOLON LBRACK EQUALS COMMA
** The following explanations concentrate on token LBRACK.
** This state is reached from start after reading:

source_text_3 FORK par_block_4 lifetime data_type identifier

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              FORK par_block_4 par_block_5 join_keyword 
                   par_block_4 block_item_declaration 
                               block_data_declaration 
                               block_variable_declaration 
                               lifetime data_type identifier variable_dimension list_of_variable_identifiers_4 SEMICOLON 
                                                             (?)

** In state 1487, looking ahead at LBRACK, shifting is permitted
** because of the following sub-derivation:

associative_dimension 
. LBRACK data_type RBRACK 

** In state 1487, looking ahead at LBRACK, reducing production
** variable_dimension_2 ->
** is permitted because of the following sub-derivation:

variable_dimension_2 
variable_dimension_2 unpacked_dimension // lookahead token appears because unpacked_dimension can begin with LBRACK
. 

** Conflict (shift/reduce/reduce) in state 1476.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 ASSERT LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              procedural_assertion_item 
              ASSERT LPAREN expression RPAREN action_block 
                            primary 
                            (?)

** In state 1476, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1476, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1476, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 1473.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 COVER PROPERTY LPAREN clocking_event DISABLE IFF LPAREN expression RPAREN NOT

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              concurrent_assertion_item 
              cover_property_statement 
              COVER PROPERTY LPAREN property_spec RPAREN statement_or_null 
                                    clocking_event DISABLE IFF LPAREN expression RPAREN NOT property_expr 
                                                                                            sequence_expr 
                                                                                            expression sequence_expr_12 
                                                                                            primary 
                                                                                            (?)

** In state 1473, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1473, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1473, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 1472.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 COVER PROPERTY LPAREN clocking_event DISABLE IFF LPAREN expression RPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              concurrent_assertion_item 
              cover_property_statement 
              COVER PROPERTY LPAREN property_spec RPAREN statement_or_null 
                                    clocking_event DISABLE IFF LPAREN expression RPAREN property_expr 
                                                                                        sequence_expr 
                                                                                        expression sequence_expr_12 
                                                                                        primary 
                                                                                        (?)

** In state 1472, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1472, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1472, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 1470.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 COVER PROPERTY LPAREN clocking_event DISABLE IFF LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              concurrent_assertion_item 
              cover_property_statement 
              COVER PROPERTY LPAREN property_spec RPAREN statement_or_null 
                                    clocking_event DISABLE IFF LPAREN expression RPAREN property_expr 
                                                                      primary 
                                                                      (?)

** In state 1470, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1470, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1470, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 1465.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 COVER PROPERTY LPAREN clocking_event LPAREN expression RPAREN NOT

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              concurrent_assertion_item 
              cover_property_statement 
              COVER PROPERTY LPAREN property_spec RPAREN statement_or_null 
                                    clocking_event LPAREN expression RPAREN NOT property_expr 
                                                                                sequence_expr 
                                                                                expression sequence_expr_12 
                                                                                primary 
                                                                                (?)

** In state 1465, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1465, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1465, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 1464.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 COVER PROPERTY LPAREN clocking_event LPAREN expression RPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              concurrent_assertion_item 
              cover_property_statement 
              COVER PROPERTY LPAREN property_spec RPAREN statement_or_null 
                                    clocking_event LPAREN expression RPAREN property_expr 
                                                                            sequence_expr 
                                                                            expression sequence_expr_12 
                                                                            primary 
                                                                            (?)

** In state 1464, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1464, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1464, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 1463.
** Tokens involved: RPAREN COMMA
** The following explanations concentrate on token RPAREN.
** This state is reached from start after reading:

source_text_3 COVER PROPERTY LPAREN clocking_event LPAREN expression

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              concurrent_assertion_item 
              cover_property_statement 
              COVER PROPERTY LPAREN property_spec RPAREN statement_or_null 
                                    (?)

** In state 1463, looking ahead at RPAREN, reducing production
** mintypmax_expression -> expression
** is permitted because of the following sub-derivation:

multi_clock_property_expr 
clocking_event sequence_expr multi_clock_sequence_3 
               expression sequence_expr_12 
               primary 
               LPAREN mintypmax_expression RPAREN // lookahead token appears
                      expression . 

** In state 1463, looking ahead at RPAREN, shifting is permitted
** because of the following sub-derivation:

clocking_event LPAREN expression . RPAREN property_expr 

** In state 1463, looking ahead at RPAREN, reducing production
** sequence_expr_12 ->
** is permitted because of the following sub-derivation:

multi_clock_property_expr 
clocking_event sequence_expr multi_clock_sequence_3 
               LPAREN sequence_expr RPAREN // lookahead token appears
                      expression sequence_expr_12 // lookahead token is inherited
                                 . 

** In state 1463, looking ahead at RPAREN, reducing production
** sequence_expr_17 ->
** is permitted because of the following sub-derivation:

multi_clock_property_expr 
clocking_event sequence_expr multi_clock_sequence_3 
               LPAREN expression sequence_expr_17 RPAREN // lookahead token appears
                                 . 

** Conflict (shift/reduce/reduce) in state 1462.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 COVER PROPERTY LPAREN clocking_event LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              concurrent_assertion_item 
              cover_property_statement 
              COVER PROPERTY LPAREN property_spec RPAREN statement_or_null 
                                    clocking_event LPAREN expression RPAREN property_expr 
                                                          primary 
                                                          (?)

** In state 1462, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1462, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1462, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 1461.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 COVER PROPERTY LPAREN clocking_event

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              concurrent_assertion_item 
              cover_property_statement 
              COVER PROPERTY LPAREN property_spec RPAREN statement_or_null 
                                    multi_clock_property_expr 
                                    clocking_event sequence_expr multi_clock_sequence_3 
                                                   expression sequence_expr_12 
                                                   primary 
                                                   (?)

** In state 1461, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1461, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1461, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 1456.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 COVER PROPERTY LPAREN identifier LPAREN LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              concurrent_assertion_item 
              cover_property_statement 
              COVER PROPERTY LPAREN identifier LPAREN actual_arg_list RPAREN RPAREN statement_or_null 
                                                      LPAREN event_expression actual_arg_list_4 RPAREN 
                                                             expression 
                                                             primary 
                                                             (?)

** In state 1456, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1456, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1456, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce) in state 1447.
** Token involved: ELSE
** This state is reached from start after reading:

source_text_3 WAIT_ORDER LPAREN hierarchical_identifier RPAREN WAIT_ORDER LPAREN hierarchical_identifier RPAREN identifier COLON statement_item

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              wait_statement 
              WAIT_ORDER LPAREN hierarchical_identifier RPAREN action_block 
                                                               (?)

** In state 1447, looking ahead at ELSE, shifting is permitted
** because of the following sub-derivation:

statement_item ELSE statement_or_null 
wait_statement 
WAIT_ORDER LPAREN hierarchical_identifier RPAREN action_block 
                                                 identifier COLON statement_item . ELSE statement_or_null 

** In state 1447, looking ahead at ELSE, reducing production
** statement_or_null -> identifier COLON statement_item
** is permitted because of the following sub-derivation:

statement_item ELSE statement_or_null // lookahead token appears
wait_statement // lookahead token is inherited
WAIT_ORDER LPAREN hierarchical_identifier RPAREN action_block // lookahead token is inherited
                                                 statement_or_null // lookahead token is inherited
                                                 identifier COLON statement_item . 

** Conflict (shift/reduce) in state 1442.
** Token involved: ELSE
** This state is reached from start after reading:

source_text_3 WAIT_ORDER LPAREN hierarchical_identifier RPAREN WAIT_ORDER LPAREN hierarchical_identifier RPAREN statement_item

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              wait_statement 
              WAIT_ORDER LPAREN hierarchical_identifier RPAREN action_block 
                                                               (?)

** In state 1442, looking ahead at ELSE, shifting is permitted
** because of the following sub-derivation:

statement_item ELSE statement_or_null 
wait_statement 
WAIT_ORDER LPAREN hierarchical_identifier RPAREN action_block 
                                                 statement_item . ELSE statement_or_null 

** In state 1442, looking ahead at ELSE, reducing production
** statement_or_null -> statement_item
** is permitted because of the following sub-derivation:

statement_item ELSE statement_or_null // lookahead token appears
wait_statement // lookahead token is inherited
WAIT_ORDER LPAREN hierarchical_identifier RPAREN action_block // lookahead token is inherited
                                                 statement_or_null // lookahead token is inherited
                                                 statement_item . 

** Conflict (shift/reduce/reduce) in state 1436.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 unique_priority CASE LPAREN expression RPAREN case_item case_statement_8

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              case_statement 
              unique_priority CASE LPAREN expression RPAREN case_item case_statement_8 ENDCASE 
                                                                      case_statement_8 case_item 
                                                                                       expression case_item_3 COLON statement_or_null 
                                                                                       primary 
                                                                                       (?)

** In state 1436, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1436, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1436, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 1434.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 unique_priority CASE LPAREN expression RPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              case_statement 
              unique_priority CASE LPAREN expression RPAREN case_item case_statement_8 ENDCASE 
                                                            expression case_item_3 COLON statement_or_null 
                                                            primary 
                                                            (?)

** In state 1434, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1434, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1434, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 1432.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 unique_priority CASE LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              case_statement 
              unique_priority CASE LPAREN expression RPAREN case_item case_statement_8 ENDCASE 
                                          primary 
                                          (?)

** In state 1432, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1432, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1432, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 1428.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 unique_priority CASEX LPAREN expression RPAREN case_item case_statement_26

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              case_statement 
              unique_priority CASEX LPAREN expression RPAREN case_item case_statement_26 ENDCASE 
                                                                       case_statement_26 case_item 
                                                                                         expression case_item_3 COLON statement_or_null 
                                                                                         primary 
                                                                                         (?)

** In state 1428, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1428, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1428, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 1426.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 unique_priority CASEX LPAREN expression RPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              case_statement 
              unique_priority CASEX LPAREN expression RPAREN case_item case_statement_26 ENDCASE 
                                                             expression case_item_3 COLON statement_or_null 
                                                             primary 
                                                             (?)

** In state 1426, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1426, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1426, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 1424.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 unique_priority CASEX LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              case_statement 
              unique_priority CASEX LPAREN expression RPAREN case_item case_statement_26 ENDCASE 
                                           primary 
                                           (?)

** In state 1424, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1424, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1424, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 1420.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 unique_priority CASEZ LPAREN expression RPAREN case_item case_statement_17

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              case_statement 
              unique_priority CASEZ LPAREN expression RPAREN case_item case_statement_17 ENDCASE 
                                                                       case_statement_17 case_item 
                                                                                         expression case_item_3 COLON statement_or_null 
                                                                                         primary 
                                                                                         (?)

** In state 1420, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1420, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1420, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 1418.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 unique_priority CASEZ LPAREN expression RPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              case_statement 
              unique_priority CASEZ LPAREN expression RPAREN case_item case_statement_17 ENDCASE 
                                                             expression case_item_3 COLON statement_or_null 
                                                             primary 
                                                             (?)

** In state 1418, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1418, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1418, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 1416.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 unique_priority CASEZ LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              case_statement 
              unique_priority CASEZ LPAREN expression RPAREN case_item case_statement_17 ENDCASE 
                                           primary 
                                           (?)

** In state 1416, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1416, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1416, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 1414.
** Tokens involved: XOR XNOR WOR WIRE WHILE WAND WAIT_ORDER WAIT VOID VIRTUAL VBAR UNSIGNED_NUMBER UNSIGNED UNIQUE UNION TYPEDEF TRIREG TRIOR TRIAND TRI1 TRI0 TRI TRANIF1 TRANIF0 TRAN TOKEN_TWO TOKEN_THREE TOKEN_SIX TOKEN_SEVEN TOKEN_QUOTE_Z2 TOKEN_QUOTE_Z1 TOKEN_QUOTE_X2 TOKEN_QUOTE_X1 TOKEN_QUOTE_TRUE TOKEN_QUOTE_FALSE TOKEN_PLUS_PLUS TOKEN_ONE TOKEN_NINE TOKEN_FOUR TOKEN_FIVE TOKEN_EIGHT TOKEN_DASH_DASH TIME TILDE_VBAR TILDE THIS TASK SYSTEM_TASK_IDENTIFIER SYSTEM_FUNCTION_IDENTIFIER SVINT SUPPLY1 SUPPLY0 SUPER STRUCT STRING STATIC SPECPARAM SPECIFY SIMPLE_IDENTIFIER SIGNED SHORTREAL SHORTINT SEQUENCE SEMICOLON RTRANIF1 RTRANIF0 RTRAN RPMOS RNMOS RETURN REPEAT RELEASE REG REF REALTIME REAL RCMOS P_XNOR P_POUNDPOUND P_NXOR P_NAND P_MINUSGT PULLUP PULLDOWN PROPERTY PROGRAM PRIORITY PRIMITIVE PMOS PLUS PLING PARAMETER OUTPUT OR OCTAL_BASE NULL NOTIF1 NOTIF0 NOT NOR NMOS NAND MODULE MODPORT MINUS MACROMODULE LPAREN LONGINT LOGIC LOCALPARAM LCURLY JOIN_NONE JOIN_ANY JOIN INTERFACE INTEGER INPUT INOUT INITIAL IMPORT IF HEX_BASE HASH GENVAR GENERATE FUNCTION FORK FOREVER FORCE FOR FINAL EXTERN EXPORT EVENT ENUM ENDTASK ENDPROGRAM ENDMODULE ENDINTERFACE ENDGENERATE ENDCASE END ELSE DOUBLE_QUOTES DO DISABLE DEFPARAM DEFAULT DECIMAL_BASE DEASSIGN DASH_GT_GT COVER CONTINUE CONSTRAINT CONST CMOS CLOCKING CLASS CHANDLE CASEZ CASEX CASE CARET BYTE BUFIF1 BUFIF0 BUF BREAK BIT BIND BINARY_BASE BEGIN BACKSLASH AUTOMATIC AT_STAR AT ASSIGN ASSERT AND AMPERSAND ALWAYS_LATCH ALWAYS_FF ALWAYS_COMB ALWAYS ALIAS #
** The following explanations concentrate on token ELSE.
** This state is reached from start after reading:

source_text_3 IF LPAREN expression RPAREN statement_or_null if_else_if_statement_8 ELSE unique_priority IF LPAREN expression RPAREN statement_or_null

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              conditional_statement 
              (?)

** In state 1414, looking ahead at ELSE, shifting is permitted
** because of the following sub-derivation:

IF LPAREN expression RPAREN statement_or_null if_else_if_statement_8 ELSE statement_or_null 
                                                                          statement_item 
                                                                          conditional_statement 
                                                                          unique_priority IF LPAREN expression RPAREN statement_or_null . ELSE statement_or_null 

** In state 1414, looking ahead at ELSE, reducing production
** if_else_if_statement_8 ->
** is permitted because of the following sub-derivation:

IF LPAREN expression RPAREN statement_or_null if_else_if_statement_8 ELSE statement_or_null 
                                                                          statement_item 
                                                                          conditional_statement 
                                                                          unique_priority IF LPAREN expression RPAREN statement_or_null if_else_if_statement_8 ELSE statement_or_null // lookahead token appears
                                                                                                                                        . 

** In state 1414, looking ahead at ELSE, reducing production
** if_else_if_statement_8 -> if_else_if_statement_8 ELSE unique_priority IF LPAREN expression RPAREN statement_or_null
** is permitted because of the following sub-derivation:

IF LPAREN expression RPAREN statement_or_null if_else_if_statement_8 ELSE statement_or_null // lookahead token appears
                                              if_else_if_statement_8 ELSE unique_priority IF LPAREN expression RPAREN statement_or_null . 

** Conflict (shift/reduce/reduce) in state 1411.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 IF LPAREN expression RPAREN statement_or_null if_else_if_statement_8 ELSE unique_priority IF LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              conditional_statement 
              IF LPAREN expression RPAREN statement_or_null if_else_if_statement_8 
                                                            if_else_if_statement_8 ELSE unique_priority IF LPAREN expression RPAREN statement_or_null 
                                                                                                                  primary 
                                                                                                                  (?)

** In state 1411, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1411, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1411, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce) in state 1407.
** Token involved: ELSE
** This state is reached from start after reading:

source_text_3 WAIT_ORDER LPAREN hierarchical_identifier RPAREN IF LPAREN expression RPAREN statement_or_null if_else_if_statement_8

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              wait_statement 
              WAIT_ORDER LPAREN hierarchical_identifier RPAREN action_block 
                                                               (?)

** In state 1407, looking ahead at ELSE, reducing production
** conditional_statement -> IF LPAREN expression RPAREN statement_or_null if_else_if_statement_8
** is permitted because of the following sub-derivation:

statement_item ELSE statement_or_null // lookahead token appears
conditional_statement // lookahead token is inherited
IF LPAREN expression RPAREN statement_or_null if_else_if_statement_8 . 

** In state 1407, looking ahead at ELSE, shifting is permitted
** because of the following sub-derivation:

statement_item ELSE statement_or_null 
conditional_statement 
IF LPAREN expression RPAREN statement_or_null if_else_if_statement_8 . ELSE statement_or_null 

** Conflict (shift/reduce/reduce) in state 1404.
** Tokens involved: XOR XNOR WOR WIRE WHILE WAND WAIT_ORDER WAIT VOID VIRTUAL VBAR UNSIGNED_NUMBER UNSIGNED UNIQUE UNION TYPEDEF TRIREG TRIOR TRIAND TRI1 TRI0 TRI TRANIF1 TRANIF0 TRAN TOKEN_TWO TOKEN_THREE TOKEN_SIX TOKEN_SEVEN TOKEN_QUOTE_Z2 TOKEN_QUOTE_Z1 TOKEN_QUOTE_X2 TOKEN_QUOTE_X1 TOKEN_QUOTE_TRUE TOKEN_QUOTE_FALSE TOKEN_PLUS_PLUS TOKEN_ONE TOKEN_NINE TOKEN_FOUR TOKEN_FIVE TOKEN_EIGHT TOKEN_DASH_DASH TIME TILDE_VBAR TILDE THIS TASK SYSTEM_TASK_IDENTIFIER SYSTEM_FUNCTION_IDENTIFIER SVINT SUPPLY1 SUPPLY0 SUPER STRUCT STRING STATIC SPECPARAM SPECIFY SIMPLE_IDENTIFIER SIGNED SHORTREAL SHORTINT SEQUENCE SEMICOLON RTRANIF1 RTRANIF0 RTRAN RPMOS RNMOS RETURN REPEAT RELEASE REG REF REALTIME REAL RCMOS P_XNOR P_POUNDPOUND P_NXOR P_NAND P_MINUSGT PULLUP PULLDOWN PROPERTY PROGRAM PRIORITY PRIMITIVE PMOS PLUS PLING PARAMETER OUTPUT OR OCTAL_BASE NULL NOTIF1 NOTIF0 NOT NOR NMOS NAND MODULE MODPORT MINUS MACROMODULE LPAREN LONGINT LOGIC LOCALPARAM LCURLY JOIN_NONE JOIN_ANY JOIN INTERFACE INTEGER INPUT INOUT INITIAL IMPORT IF HEX_BASE HASH GENVAR GENERATE FUNCTION FORK FOREVER FORCE FOR FINAL EXTERN EXPORT EVENT ENUM ENDTASK ENDPROGRAM ENDMODULE ENDINTERFACE ENDGENERATE ENDCASE END ELSE DOUBLE_QUOTES DO DISABLE DEFPARAM DEFAULT DECIMAL_BASE DEASSIGN DASH_GT_GT COVER CONTINUE CONSTRAINT CONST CMOS CLOCKING CLASS CHANDLE CASEZ CASEX CASE CARET BYTE BUFIF1 BUFIF0 BUF BREAK BIT BIND BINARY_BASE BEGIN BACKSLASH AUTOMATIC AT_STAR AT ASSIGN ASSERT AND AMPERSAND ALWAYS_LATCH ALWAYS_FF ALWAYS_COMB ALWAYS ALIAS #
** The following explanations concentrate on token ELSE.
** This state is reached from start after reading:

source_text_3 IF LPAREN expression RPAREN statement_or_null if_else_if_statement_8 ELSE IF LPAREN expression RPAREN statement_or_null

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              conditional_statement 
              (?)

** In state 1404, looking ahead at ELSE, shifting is permitted
** because of the following sub-derivation:

IF LPAREN expression RPAREN statement_or_null if_else_if_statement_8 ELSE statement_or_null 
                                                                          statement_item 
                                                                          conditional_statement 
                                                                          IF LPAREN expression RPAREN statement_or_null . ELSE statement_or_null 

** In state 1404, looking ahead at ELSE, reducing production
** if_else_if_statement_8 ->
** is permitted because of the following sub-derivation:

IF LPAREN expression RPAREN statement_or_null if_else_if_statement_8 ELSE statement_or_null 
                                                                          statement_item 
                                                                          conditional_statement 
                                                                          IF LPAREN expression RPAREN statement_or_null if_else_if_statement_8 ELSE statement_or_null // lookahead token appears
                                                                                                                        . 

** In state 1404, looking ahead at ELSE, reducing production
** if_else_if_statement_8 -> if_else_if_statement_8 ELSE IF LPAREN expression RPAREN statement_or_null
** is permitted because of the following sub-derivation:

IF LPAREN expression RPAREN statement_or_null if_else_if_statement_8 ELSE statement_or_null // lookahead token appears
                                              if_else_if_statement_8 ELSE IF LPAREN expression RPAREN statement_or_null . 

** Conflict (shift/reduce/reduce) in state 1401.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 IF LPAREN expression RPAREN statement_or_null if_else_if_statement_8 ELSE IF LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              conditional_statement 
              IF LPAREN expression RPAREN statement_or_null if_else_if_statement_8 
                                                            if_else_if_statement_8 ELSE IF LPAREN expression RPAREN statement_or_null 
                                                                                                  primary 
                                                                                                  (?)

** In state 1401, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1401, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1401, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce) in state 1398.
** Token involved: ELSE
** This state is reached from start after reading:

source_text_3 WAIT_ORDER LPAREN hierarchical_identifier RPAREN unique_priority IF LPAREN expression RPAREN statement_or_null if_else_if_statement_8

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              wait_statement 
              WAIT_ORDER LPAREN hierarchical_identifier RPAREN action_block 
                                                               (?)

** In state 1398, looking ahead at ELSE, reducing production
** conditional_statement -> unique_priority IF LPAREN expression RPAREN statement_or_null if_else_if_statement_8
** is permitted because of the following sub-derivation:

statement_item ELSE statement_or_null // lookahead token appears
conditional_statement // lookahead token is inherited
unique_priority IF LPAREN expression RPAREN statement_or_null if_else_if_statement_8 . 

** In state 1398, looking ahead at ELSE, shifting is permitted
** because of the following sub-derivation:

statement_item ELSE statement_or_null 
conditional_statement 
unique_priority IF LPAREN expression RPAREN statement_or_null if_else_if_statement_8 . ELSE statement_or_null 

** Conflict (shift/reduce) in state 1392.
** Tokens involved: VBAR P_XNOR P_NXOR PLUS MINUS CARET AMPERSAND
** The following explanations concentrate on token VBAR.
** This state is reached from start after reading:

source_text_3 CASEZ LPAREN expression RPAREN DEFAULT clockvar_expression P_LTE expression

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              case_statement 
              (?)

** In state 1392, looking ahead at VBAR, shifting is permitted
** because of the following sub-derivation:

CASEZ LPAREN expression RPAREN case_item case_statement_17 ENDCASE 
                               DEFAULT statement_or_null 
                                       statement_item 
                                       clocking_drive 
                                       clockvar_expression P_LTE expression 
                                                                 expression binary_operator expression 
                                                                            . VBAR 

** In state 1392, looking ahead at VBAR, reducing production
** clocking_drive -> clockvar_expression P_LTE expression
** is permitted because of the following sub-derivation:

CASEZ LPAREN expression RPAREN case_item case_statement_17 ENDCASE // lookahead token appears because case_statement_17 can begin with VBAR
                               DEFAULT statement_or_null // lookahead token is inherited
                                       statement_item // lookahead token is inherited
                                       clocking_drive // lookahead token is inherited
                                       clockvar_expression P_LTE expression . 

** Conflict (shift/reduce) in state 1391.
** Tokens involved: VBAR P_XNOR P_NXOR PLUS MINUS CARET AMPERSAND
** The following explanations concentrate on token VBAR.
** This state is reached from start after reading:

source_text_3 CASEZ LPAREN expression RPAREN DEFAULT clockvar_expression P_LTE P_POUNDPOUND expression expression

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              case_statement 
              (?)

** In state 1391, looking ahead at VBAR, shifting is permitted
** because of the following sub-derivation:

CASEZ LPAREN expression RPAREN case_item case_statement_17 ENDCASE 
                               DEFAULT statement_or_null 
                                       statement_item 
                                       clocking_drive 
                                       clockvar_expression P_LTE P_POUNDPOUND expression expression 
                                                                                         expression binary_operator expression 
                                                                                                    . VBAR 

** In state 1391, looking ahead at VBAR, reducing production
** clocking_drive -> clockvar_expression P_LTE P_POUNDPOUND expression expression
** is permitted because of the following sub-derivation:

CASEZ LPAREN expression RPAREN case_item case_statement_17 ENDCASE // lookahead token appears because case_statement_17 can begin with VBAR
                               DEFAULT statement_or_null // lookahead token is inherited
                                       statement_item // lookahead token is inherited
                                       clocking_drive // lookahead token is inherited
                                       clockvar_expression P_LTE P_POUNDPOUND expression expression . 

** Conflict (reduce/reduce) in state 1390.
** Tokens involved: VOID UNSIGNED_NUMBER UNSIGNED TOKEN_TWO TOKEN_THREE TOKEN_SIX TOKEN_SEVEN TOKEN_QUOTE_Z2 TOKEN_QUOTE_Z1 TOKEN_QUOTE_X2 TOKEN_QUOTE_X1 TOKEN_QUOTE_TRUE TOKEN_QUOTE_FALSE TOKEN_ONE TOKEN_NINE TOKEN_FOUR TOKEN_FIVE TOKEN_EIGHT TIME THIS SYSTEM_FUNCTION_IDENTIFIER SVINT SUPER SIMPLE_IDENTIFIER SIGNED SHORTREAL SHORTINT REG REALTIME REAL OCTAL_BASE NULL LPAREN LONGINT LOGIC LCURLY INTEGER HEX_BASE DECIMAL_BASE BYTE BIT BINARY_BASE BACKSLASH
** The following explanations concentrate on token VOID.
** This state is reached from start after reading:

source_text_3 clockvar_expression P_LTE P_POUNDPOUND expression AMPERSAND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              clocking_drive 
              (?)

** In state 1390, looking ahead at VOID, reducing production
** binary_operator -> AMPERSAND
** is permitted because of the following sub-derivation:

clockvar_expression P_LTE P_POUNDPOUND expression expression 
                                       expression binary_operator expression // lookahead token appears because expression can begin with VOID
                                                  AMPERSAND . 

** In state 1390, looking ahead at VOID, reducing production
** unary_operator -> AMPERSAND
** is permitted because of the following sub-derivation:

clockvar_expression P_LTE P_POUNDPOUND expression expression 
                                                  unary_operator primary // lookahead token appears because primary can begin with VOID
                                                  AMPERSAND . 

** Conflict (reduce/reduce) in state 1389.
** Tokens involved: VOID UNSIGNED_NUMBER UNSIGNED TOKEN_TWO TOKEN_THREE TOKEN_SIX TOKEN_SEVEN TOKEN_QUOTE_Z2 TOKEN_QUOTE_Z1 TOKEN_QUOTE_X2 TOKEN_QUOTE_X1 TOKEN_QUOTE_TRUE TOKEN_QUOTE_FALSE TOKEN_ONE TOKEN_NINE TOKEN_FOUR TOKEN_FIVE TOKEN_EIGHT TIME THIS SYSTEM_FUNCTION_IDENTIFIER SVINT SUPER SIMPLE_IDENTIFIER SIGNED SHORTREAL SHORTINT REG REALTIME REAL OCTAL_BASE NULL LPAREN LONGINT LOGIC LCURLY INTEGER HEX_BASE DECIMAL_BASE BYTE BIT BINARY_BASE BACKSLASH
** The following explanations concentrate on token VOID.
** This state is reached from start after reading:

source_text_3 clockvar_expression P_LTE P_POUNDPOUND expression CARET

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              clocking_drive 
              (?)

** In state 1389, looking ahead at VOID, reducing production
** binary_operator -> CARET
** is permitted because of the following sub-derivation:

clockvar_expression P_LTE P_POUNDPOUND expression expression 
                                       expression binary_operator expression // lookahead token appears because expression can begin with VOID
                                                  CARET . 

** In state 1389, looking ahead at VOID, reducing production
** unary_operator -> CARET
** is permitted because of the following sub-derivation:

clockvar_expression P_LTE P_POUNDPOUND expression expression 
                                                  unary_operator primary // lookahead token appears because primary can begin with VOID
                                                  CARET . 

** Conflict (reduce/reduce) in state 1388.
** Tokens involved: VOID UNSIGNED_NUMBER UNSIGNED TOKEN_TWO TOKEN_THREE TOKEN_SIX TOKEN_SEVEN TOKEN_QUOTE_Z2 TOKEN_QUOTE_Z1 TOKEN_QUOTE_X2 TOKEN_QUOTE_X1 TOKEN_QUOTE_TRUE TOKEN_QUOTE_FALSE TOKEN_ONE TOKEN_NINE TOKEN_FOUR TOKEN_FIVE TOKEN_EIGHT TIME THIS SYSTEM_FUNCTION_IDENTIFIER SVINT SUPER SIMPLE_IDENTIFIER SIGNED SHORTREAL SHORTINT REG REALTIME REAL OCTAL_BASE NULL LPAREN LONGINT LOGIC LCURLY INTEGER HEX_BASE DECIMAL_BASE BYTE BIT BINARY_BASE BACKSLASH
** The following explanations concentrate on token VOID.
** This state is reached from start after reading:

source_text_3 clockvar_expression P_LTE P_POUNDPOUND expression MINUS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              clocking_drive 
              (?)

** In state 1388, looking ahead at VOID, reducing production
** binary_operator -> MINUS
** is permitted because of the following sub-derivation:

clockvar_expression P_LTE P_POUNDPOUND expression expression 
                                       expression binary_operator expression // lookahead token appears because expression can begin with VOID
                                                  MINUS . 

** In state 1388, looking ahead at VOID, reducing production
** unary_operator -> MINUS
** is permitted because of the following sub-derivation:

clockvar_expression P_LTE P_POUNDPOUND expression expression 
                                                  unary_operator primary // lookahead token appears because primary can begin with VOID
                                                  MINUS . 

** Conflict (reduce/reduce) in state 1387.
** Tokens involved: VOID UNSIGNED_NUMBER UNSIGNED TOKEN_TWO TOKEN_THREE TOKEN_SIX TOKEN_SEVEN TOKEN_QUOTE_Z2 TOKEN_QUOTE_Z1 TOKEN_QUOTE_X2 TOKEN_QUOTE_X1 TOKEN_QUOTE_TRUE TOKEN_QUOTE_FALSE TOKEN_ONE TOKEN_NINE TOKEN_FOUR TOKEN_FIVE TOKEN_EIGHT TIME THIS SYSTEM_FUNCTION_IDENTIFIER SVINT SUPER SIMPLE_IDENTIFIER SIGNED SHORTREAL SHORTINT REG REALTIME REAL OCTAL_BASE NULL LPAREN LONGINT LOGIC LCURLY INTEGER HEX_BASE DECIMAL_BASE BYTE BIT BINARY_BASE BACKSLASH
** The following explanations concentrate on token VOID.
** This state is reached from start after reading:

source_text_3 clockvar_expression P_LTE P_POUNDPOUND expression PLUS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              clocking_drive 
              (?)

** In state 1387, looking ahead at VOID, reducing production
** binary_operator -> PLUS
** is permitted because of the following sub-derivation:

clockvar_expression P_LTE P_POUNDPOUND expression expression 
                                       expression binary_operator expression // lookahead token appears because expression can begin with VOID
                                                  PLUS . 

** In state 1387, looking ahead at VOID, reducing production
** unary_operator -> PLUS
** is permitted because of the following sub-derivation:

clockvar_expression P_LTE P_POUNDPOUND expression expression 
                                                  unary_operator primary // lookahead token appears because primary can begin with VOID
                                                  PLUS . 

** Conflict (reduce/reduce) in state 1386.
** Tokens involved: VOID UNSIGNED_NUMBER UNSIGNED TOKEN_TWO TOKEN_THREE TOKEN_SIX TOKEN_SEVEN TOKEN_QUOTE_Z2 TOKEN_QUOTE_Z1 TOKEN_QUOTE_X2 TOKEN_QUOTE_X1 TOKEN_QUOTE_TRUE TOKEN_QUOTE_FALSE TOKEN_ONE TOKEN_NINE TOKEN_FOUR TOKEN_FIVE TOKEN_EIGHT TIME THIS SYSTEM_FUNCTION_IDENTIFIER SVINT SUPER SIMPLE_IDENTIFIER SIGNED SHORTREAL SHORTINT REG REALTIME REAL OCTAL_BASE NULL LPAREN LONGINT LOGIC LCURLY INTEGER HEX_BASE DECIMAL_BASE BYTE BIT BINARY_BASE BACKSLASH
** The following explanations concentrate on token VOID.
** This state is reached from start after reading:

source_text_3 clockvar_expression P_LTE P_POUNDPOUND expression P_NXOR

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              clocking_drive 
              (?)

** In state 1386, looking ahead at VOID, reducing production
** binary_operator -> P_NXOR
** is permitted because of the following sub-derivation:

clockvar_expression P_LTE P_POUNDPOUND expression expression 
                                       expression binary_operator expression // lookahead token appears because expression can begin with VOID
                                                  P_NXOR . 

** In state 1386, looking ahead at VOID, reducing production
** unary_operator -> P_NXOR
** is permitted because of the following sub-derivation:

clockvar_expression P_LTE P_POUNDPOUND expression expression 
                                                  unary_operator primary // lookahead token appears because primary can begin with VOID
                                                  P_NXOR . 

** Conflict (reduce/reduce) in state 1385.
** Tokens involved: VOID UNSIGNED_NUMBER UNSIGNED TOKEN_TWO TOKEN_THREE TOKEN_SIX TOKEN_SEVEN TOKEN_QUOTE_Z2 TOKEN_QUOTE_Z1 TOKEN_QUOTE_X2 TOKEN_QUOTE_X1 TOKEN_QUOTE_TRUE TOKEN_QUOTE_FALSE TOKEN_ONE TOKEN_NINE TOKEN_FOUR TOKEN_FIVE TOKEN_EIGHT TIME THIS SYSTEM_FUNCTION_IDENTIFIER SVINT SUPER SIMPLE_IDENTIFIER SIGNED SHORTREAL SHORTINT REG REALTIME REAL OCTAL_BASE NULL LPAREN LONGINT LOGIC LCURLY INTEGER HEX_BASE DECIMAL_BASE BYTE BIT BINARY_BASE BACKSLASH
** The following explanations concentrate on token VOID.
** This state is reached from start after reading:

source_text_3 clockvar_expression P_LTE P_POUNDPOUND expression P_XNOR

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              clocking_drive 
              (?)

** In state 1385, looking ahead at VOID, reducing production
** binary_operator -> P_XNOR
** is permitted because of the following sub-derivation:

clockvar_expression P_LTE P_POUNDPOUND expression expression 
                                       expression binary_operator expression // lookahead token appears because expression can begin with VOID
                                                  P_XNOR . 

** In state 1385, looking ahead at VOID, reducing production
** unary_operator -> P_XNOR
** is permitted because of the following sub-derivation:

clockvar_expression P_LTE P_POUNDPOUND expression expression 
                                                  unary_operator primary // lookahead token appears because primary can begin with VOID
                                                  P_XNOR . 

** Conflict (reduce/reduce) in state 1384.
** Tokens involved: VOID UNSIGNED_NUMBER UNSIGNED TOKEN_TWO TOKEN_THREE TOKEN_SIX TOKEN_SEVEN TOKEN_QUOTE_Z2 TOKEN_QUOTE_Z1 TOKEN_QUOTE_X2 TOKEN_QUOTE_X1 TOKEN_QUOTE_TRUE TOKEN_QUOTE_FALSE TOKEN_ONE TOKEN_NINE TOKEN_FOUR TOKEN_FIVE TOKEN_EIGHT TIME THIS SYSTEM_FUNCTION_IDENTIFIER SVINT SUPER SIMPLE_IDENTIFIER SIGNED SHORTREAL SHORTINT REG REALTIME REAL OCTAL_BASE NULL LPAREN LONGINT LOGIC LCURLY INTEGER HEX_BASE DECIMAL_BASE BYTE BIT BINARY_BASE BACKSLASH
** The following explanations concentrate on token VOID.
** This state is reached from start after reading:

source_text_3 clockvar_expression P_LTE P_POUNDPOUND expression VBAR

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              clocking_drive 
              (?)

** In state 1384, looking ahead at VOID, reducing production
** binary_operator -> VBAR
** is permitted because of the following sub-derivation:

clockvar_expression P_LTE P_POUNDPOUND expression expression 
                                       expression binary_operator expression // lookahead token appears because expression can begin with VOID
                                                  VBAR . 

** In state 1384, looking ahead at VOID, reducing production
** unary_operator -> VBAR
** is permitted because of the following sub-derivation:

clockvar_expression P_LTE P_POUNDPOUND expression expression 
                                                  unary_operator primary // lookahead token appears because primary can begin with VOID
                                                  VBAR . 

** Conflict (shift/reduce/reduce) in state 1383.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 clockvar_expression P_LTE P_POUNDPOUND expression

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              clocking_drive 
              clockvar_expression P_LTE P_POUNDPOUND expression expression 
                                                                primary 
                                                                (?)

** In state 1383, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1383, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1383, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 1382.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 clockvar_expression P_LTE P_POUNDPOUND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              clocking_drive 
              clockvar_expression P_LTE P_POUNDPOUND expression expression 
                                                     primary 
                                                     (?)

** In state 1382, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1382, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1382, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 1381.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 clockvar_expression P_LTE

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              clocking_drive 
              clockvar_expression P_LTE expression 
                                        primary 
                                        (?)

** In state 1381, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1381, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1381, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (reduce/reduce) in state 1365.
** Tokens involved: XOR XNOR WOR WIRE WHILE WAND WAIT_ORDER WAIT VOID VIRTUAL VBAR UNSIGNED_NUMBER UNSIGNED UNIQUE UNION TYPEDEF TRIREG TRIOR TRIAND TRI1 TRI0 TRI TRANIF1 TRANIF0 TRAN TOKEN_TWO TOKEN_THREE TOKEN_SIX TOKEN_SEVEN TOKEN_QUOTE_Z2 TOKEN_QUOTE_Z1 TOKEN_QUOTE_X2 TOKEN_QUOTE_X1 TOKEN_QUOTE_TRUE TOKEN_QUOTE_FALSE TOKEN_PLUS_PLUS TOKEN_ONE TOKEN_NINE TOKEN_FOUR TOKEN_FIVE TOKEN_EIGHT TOKEN_DASH_DASH TIME TILDE_VBAR TILDE THIS TASK SYSTEM_TASK_IDENTIFIER SYSTEM_FUNCTION_IDENTIFIER SVINT SUPPLY1 SUPPLY0 SUPER STRUCT STRING STATIC SPECPARAM SPECIFY SIMPLE_IDENTIFIER SIGNED SHORTREAL SHORTINT SEQUENCE SEMICOLON RTRANIF1 RTRANIF0 RTRAN RPMOS RNMOS RETURN REPEAT RELEASE REG REF REALTIME REAL RCMOS P_XNOR P_POUNDPOUND P_NXOR P_NAND P_MINUSGT PULLUP PULLDOWN PROPERTY PROGRAM PRIORITY PRIMITIVE PMOS PLUS PLING PARAMETER OUTPUT OR OCTAL_BASE NULL NOTIF1 NOTIF0 NOT NOR NMOS NAND MODULE MODPORT MINUS MACROMODULE LPAREN LONGINT LOGIC LOCALPARAM LCURLY JOIN_NONE JOIN_ANY JOIN INTERFACE INTEGER INPUT INOUT INITIAL IMPORT IF HEX_BASE HASH GENVAR GENERATE FUNCTION FORK FOREVER FORCE FOR FINAL EXTERN EXPORT EVENT ENUM ENDTASK ENDPROGRAM ENDMODULE ENDINTERFACE ENDGENERATE ENDCASE END ELSE DOUBLE_QUOTES DO DISABLE DEFPARAM DEFAULT DECIMAL_BASE DEASSIGN DASH_GT_GT COVER CONTINUE CONSTRAINT CONST CMOS CLOCKING CLASS CHANDLE CASEZ CASEX CASE CARET BYTE BUFIF1 BUFIF0 BUF BREAK BIT BIND BINARY_BASE BEGIN BACKSLASH AUTOMATIC AT_STAR AT ASSIGN ASSERT AND AMPERSAND ALWAYS_LATCH ALWAYS_FF ALWAYS_COMB ALWAYS ALIAS #
** The following explanations concentrate on token WOR.
** This state is reached from start after reading:

source_text_3 hierarchical_identifier LPAREN list_of_arguments RPAREN SEMICOLON

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description // lookahead token appears because description can begin with WOR
source_text_3 description // lookahead token is inherited
              statement_or_null // lookahead token is inherited
              statement_item // lookahead token is inherited
              (?)

** In state 1365, looking ahead at WOR, reducing production
** statement_item -> hierarchical_identifier LPAREN list_of_arguments RPAREN SEMICOLON
** is permitted because of the following sub-derivation:

hierarchical_identifier LPAREN list_of_arguments RPAREN SEMICOLON . 

** In state 1365, looking ahead at WOR, reducing production
** statement_item -> hierarchical_identifier LPAREN list_of_arguments RPAREN SEMICOLON
** is permitted because of the following sub-derivation:

hierarchical_identifier LPAREN list_of_arguments RPAREN SEMICOLON . 

** Conflict (shift/reduce/reduce) in state 1362.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 hierarchical_identifier LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              hierarchical_identifier LPAREN list_of_arguments RPAREN SEMICOLON 
                                             expression list_of_arguments_3 
                                             primary 
                                             (?)

** In state 1362, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1362, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1362, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (reduce/reduce) in state 1361.
** Tokens involved: XOR XNOR WOR WIRE WHILE WAND WAIT_ORDER WAIT VOID VIRTUAL VBAR UNSIGNED_NUMBER UNSIGNED UNIQUE UNION TYPEDEF TRIREG TRIOR TRIAND TRI1 TRI0 TRI TRANIF1 TRANIF0 TRAN TOKEN_TWO TOKEN_THREE TOKEN_SIX TOKEN_SEVEN TOKEN_QUOTE_Z2 TOKEN_QUOTE_Z1 TOKEN_QUOTE_X2 TOKEN_QUOTE_X1 TOKEN_QUOTE_TRUE TOKEN_QUOTE_FALSE TOKEN_PLUS_PLUS TOKEN_ONE TOKEN_NINE TOKEN_FOUR TOKEN_FIVE TOKEN_EIGHT TOKEN_DASH_DASH TIME TILDE_VBAR TILDE THIS TASK SYSTEM_TASK_IDENTIFIER SYSTEM_FUNCTION_IDENTIFIER SVINT SUPPLY1 SUPPLY0 SUPER STRUCT STRING STATIC SPECPARAM SPECIFY SIMPLE_IDENTIFIER SIGNED SHORTREAL SHORTINT SEQUENCE SEMICOLON RTRANIF1 RTRANIF0 RTRAN RPMOS RNMOS RETURN REPEAT RELEASE REG REF REALTIME REAL RCMOS P_XNOR P_POUNDPOUND P_NXOR P_NAND P_MINUSGT PULLUP PULLDOWN PROPERTY PROGRAM PRIORITY PRIMITIVE PMOS PLUS PLING PARAMETER OUTPUT OR OCTAL_BASE NULL NOTIF1 NOTIF0 NOT NOR NMOS NAND MODULE MODPORT MINUS MACROMODULE LPAREN LONGINT LOGIC LOCALPARAM LCURLY JOIN_NONE JOIN_ANY JOIN INTERFACE INTEGER INPUT INOUT INITIAL IMPORT IF HEX_BASE HASH GENVAR GENERATE FUNCTION FORK FOREVER FORCE FOR FINAL EXTERN EXPORT EVENT ENUM ENDTASK ENDPROGRAM ENDMODULE ENDINTERFACE ENDGENERATE ENDCASE END ELSE DOUBLE_QUOTES DO DISABLE DEFPARAM DEFAULT DECIMAL_BASE DEASSIGN DASH_GT_GT COVER CONTINUE CONSTRAINT CONST CMOS CLOCKING CLASS CHANDLE CASEZ CASEX CASE CARET BYTE BUFIF1 BUFIF0 BUF BREAK BIT BIND BINARY_BASE BEGIN BACKSLASH AUTOMATIC AT_STAR AT ASSIGN ASSERT AND AMPERSAND ALWAYS_LATCH ALWAYS_FF ALWAYS_COMB ALWAYS ALIAS #
** The following explanations concentrate on token WOR.
** This state is reached from start after reading:

source_text_3 hierarchical_identifier SEMICOLON

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description // lookahead token appears because description can begin with WOR
source_text_3 description // lookahead token is inherited
              statement_or_null // lookahead token is inherited
              statement_item // lookahead token is inherited
              (?)

** In state 1361, looking ahead at WOR, reducing production
** statement_item -> hierarchical_identifier SEMICOLON
** is permitted because of the following sub-derivation:

hierarchical_identifier SEMICOLON . 

** In state 1361, looking ahead at WOR, reducing production
** statement_item -> hierarchical_identifier SEMICOLON
** is permitted because of the following sub-derivation:

hierarchical_identifier SEMICOLON . 

** Conflict (shift/reduce) in state 1360.
** Token involved: EQUALS
** This state is reached from start after reading:

source_text_3 hierarchical_identifier

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              blocking_assignment SEMICOLON 
              (?)

** In state 1360, looking ahead at EQUALS, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier . EQUALS NEW LBRACK constant_expression RBRACK 

** In state 1360, looking ahead at EQUALS, reducing production
** variable_lvalue_3 ->
** is permitted because of the following sub-derivation:

variable_lvalue EQUALS delay_or_event_control expression // lookahead token appears
hierarchical_identifier variable_lvalue_3 // lookahead token is inherited
                        . 

** Conflict (shift/reduce/reduce) in state 1354.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 identifier DOT RANDOMIZE LPAREN RPAREN WITH

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              blocking_assignment SEMICOLON 
              identifier DOT RANDOMIZE LPAREN RPAREN WITH constraint_block SEMICOLON 
                                                          expression DIST LCURLY dist_item dist_list_3 RCURLY SEMICOLON 
                                                          primary 
                                                          (?)

** In state 1354, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1354, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1354, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 1347.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 identifier DOT RANDOMIZE WITH expression DIST LCURLY dist_item dist_list_3 COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              blocking_assignment SEMICOLON 
              identifier DOT RANDOMIZE WITH constraint_block SEMICOLON 
                                            expression DIST LCURLY dist_item dist_list_3 RCURLY SEMICOLON 
                                                                             dist_list_3 COMMA dist_item 
                                                                                               value_range P_COLONEQ expression 
                                                                                               expression 
                                                                                               primary 
                                                                                               (?)

** In state 1347, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1347, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1347, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 1341.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 identifier DOT RANDOMIZE WITH expression DIST LCURLY value_range P_COLONDIV

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              blocking_assignment SEMICOLON 
              identifier DOT RANDOMIZE WITH constraint_block SEMICOLON 
                                            expression DIST LCURLY dist_item dist_list_3 RCURLY SEMICOLON 
                                                                   value_range P_COLONDIV expression 
                                                                                          primary 
                                                                                          (?)

** In state 1341, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1341, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1341, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 1339.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 identifier DOT RANDOMIZE WITH expression DIST LCURLY value_range P_COLONEQ

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              blocking_assignment SEMICOLON 
              identifier DOT RANDOMIZE WITH constraint_block SEMICOLON 
                                            expression DIST LCURLY dist_item dist_list_3 RCURLY SEMICOLON 
                                                                   value_range P_COLONEQ expression 
                                                                                         primary 
                                                                                         (?)

** In state 1339, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1339, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1339, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 1337.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 identifier DOT RANDOMIZE WITH expression DIST LCURLY

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              blocking_assignment SEMICOLON 
              identifier DOT RANDOMIZE WITH constraint_block SEMICOLON 
                                            expression DIST LCURLY dist_item dist_list_3 RCURLY SEMICOLON 
                                                                   value_range P_COLONEQ expression 
                                                                   expression 
                                                                   primary 
                                                                   (?)

** In state 1337, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1337, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1337, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 1333.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 identifier DOT RANDOMIZE WITH IF LPAREN expression RPAREN constraint_set ELSE

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              blocking_assignment SEMICOLON 
              identifier DOT RANDOMIZE WITH constraint_block SEMICOLON 
                                            constraint_expression 
                                            IF LPAREN expression RPAREN constraint_set ELSE constraint_set 
                                                                                            constraint_expression 
                                                                                            expression SEMICOLON 
                                                                                            primary 
                                                                                            (?)

** In state 1333, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1333, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1333, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce) in state 1332.
** Token involved: ELSE
** This state is reached from start after reading:

source_text_3 identifier DOT RANDOMIZE WITH IF LPAREN expression RPAREN IF LPAREN expression RPAREN constraint_set

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              blocking_assignment SEMICOLON 
              identifier DOT RANDOMIZE WITH constraint_block SEMICOLON 
                                            constraint_expression 
                                            (?)

** In state 1332, looking ahead at ELSE, reducing production
** constraint_expression -> IF LPAREN expression RPAREN constraint_set
** is permitted because of the following sub-derivation:

IF LPAREN expression RPAREN constraint_set ELSE constraint_set // lookahead token appears
                            constraint_expression // lookahead token is inherited
                            IF LPAREN expression RPAREN constraint_set . 

** In state 1332, looking ahead at ELSE, shifting is permitted
** because of the following sub-derivation:

IF LPAREN expression RPAREN constraint_set 
                            constraint_expression 
                            IF LPAREN expression RPAREN constraint_set . ELSE constraint_set 

** Conflict (shift/reduce/reduce) in state 1328.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 identifier DOT RANDOMIZE WITH expression P_EQGT

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              blocking_assignment SEMICOLON 
              identifier DOT RANDOMIZE WITH constraint_block SEMICOLON 
                                            constraint_expression 
                                            expression P_EQGT constraint_set 
                                                              constraint_expression 
                                                              expression SEMICOLON 
                                                              primary 
                                                              (?)

** In state 1328, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1328, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1328, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 1324.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 identifier DOT RANDOMIZE WITH expression P_EQGT LCURLY constraint_set_5

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              blocking_assignment SEMICOLON 
              identifier DOT RANDOMIZE WITH constraint_block SEMICOLON 
                                            constraint_expression 
                                            expression P_EQGT constraint_set 
                                                              LCURLY constraint_set_5 RCURLY 
                                                                     constraint_set_5 constraint_expression 
                                                                                      expression SEMICOLON 
                                                                                      primary 
                                                                                      (?)

** In state 1324, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1324, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1324, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 1323.
** Tokens involved: VOID VBAR UNSIGNED_NUMBER UNSIGNED TOKEN_TWO TOKEN_THREE TOKEN_SIX TOKEN_SEVEN TOKEN_QUOTE_Z2 TOKEN_QUOTE_Z1 TOKEN_QUOTE_X2 TOKEN_QUOTE_X1 TOKEN_QUOTE_TRUE TOKEN_QUOTE_FALSE TOKEN_PLUS_PLUS TOKEN_ONE TOKEN_NINE TOKEN_FOUR TOKEN_FIVE TOKEN_EIGHT TOKEN_DASH_DASH TIME TILDE_VBAR TILDE THIS SYSTEM_FUNCTION_IDENTIFIER SVINT SUPER SIMPLE_IDENTIFIER SIGNED SHORTREAL SHORTINT REG REALTIME REAL P_XNOR P_NXOR P_NAND PLUS PLING OCTAL_BASE NULL MINUS LPAREN LONGINT LOGIC LCURLY INTEGER HEX_BASE DOUBLE_QUOTES DECIMAL_BASE CARET BYTE BIT BINARY_BASE BACKSLASH AMPERSAND
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 identifier DOT RANDOMIZE WITH expression P_EQGT LCURLY

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              blocking_assignment SEMICOLON 
              identifier DOT RANDOMIZE WITH constraint_block SEMICOLON 
                                            constraint_expression 
                                            expression P_EQGT constraint_set 
                                                              (?)

** In state 1323, looking ahead at SIMPLE_IDENTIFIER, reducing production
** constraint_set_5 ->
** is permitted because of the following sub-derivation:

LCURLY constraint_set_5 RCURLY 
       constraint_set_5 constraint_expression // lookahead token appears because constraint_expression can begin with SIMPLE_IDENTIFIER
       . 

** In state 1323, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

constraint_expression 
expression SEMICOLON 
inc_or_dec_expression 
variable_lvalue inc_or_dec_operator 
LCURLY variable_lvalue variable_lvalue_8 RCURLY 
       hierarchical_identifier variable_lvalue_3 
       . SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1323, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

constraint_expression 
expression SEMICOLON 
primary 
concatenation 
LCURLY expression concatenation_4 RCURLY 
       primary 
       implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
       . 

** In state 1323, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

constraint_expression 
expression SEMICOLON 
primary 
concatenation 
LCURLY expression concatenation_4 RCURLY 
       primary 
       implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
       . 

** Conflict (shift/reduce/reduce) in state 1322.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 identifier DOT RANDOMIZE WITH IF LPAREN expression RPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              blocking_assignment SEMICOLON 
              identifier DOT RANDOMIZE WITH constraint_block SEMICOLON 
                                            constraint_expression 
                                            IF LPAREN expression RPAREN constraint_set 
                                                                        constraint_expression 
                                                                        expression SEMICOLON 
                                                                        primary 
                                                                        (?)

** In state 1322, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1322, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1322, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 1320.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 identifier DOT RANDOMIZE WITH IF LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              blocking_assignment SEMICOLON 
              identifier DOT RANDOMIZE WITH constraint_block SEMICOLON 
                                            constraint_expression 
                                            IF LPAREN expression RPAREN constraint_set 
                                                      primary 
                                                      (?)

** In state 1320, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1320, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1320, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 1309.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 identifier DOT RANDOMIZE WITH

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              blocking_assignment SEMICOLON 
              identifier DOT RANDOMIZE WITH constraint_block SEMICOLON 
                                            expression DIST LCURLY dist_item dist_list_3 RCURLY SEMICOLON 
                                            primary 
                                            (?)

** In state 1309, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1309, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1309, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 1304.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 identifier EQUALS NEW LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              blocking_assignment SEMICOLON 
              identifier EQUALS NEW LPAREN list_of_arguments RPAREN 
                                           expression list_of_arguments_3 
                                           primary 
                                           (?)

** In state 1304, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1304, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1304, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 1299.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 identifier HASH LPAREN list_of_parameter_assignments RPAREN EQUALS NEW LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              blocking_assignment SEMICOLON 
              identifier HASH LPAREN list_of_parameter_assignments RPAREN EQUALS NEW LPAREN list_of_arguments RPAREN 
                                                                                            expression list_of_arguments_3 
                                                                                            primary 
                                                                                            (?)

** In state 1299, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1299, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1299, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 1294.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 FOREVER identifier HASH LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              loop_statement 
              FOREVER statement_or_null 
                      statement_item 
                      blocking_assignment SEMICOLON 
                      identifier HASH LPAREN list_of_parameter_assignments RPAREN EQUALS NEW 
                                             ordered_parameter_assignment list_of_parameter_assignments_3 
                                             expression 
                                             primary 
                                             (?)

** In state 1294, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1294, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1294, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce) in state 1279.
** Tokens involved: XOR XNOR WOR WIRE WHILE WAND WAIT_ORDER WAIT VOID VIRTUAL VBAR UNSIGNED_NUMBER UNSIGNED UNIQUE UNION TYPEDEF TRIREG TRIOR TRIAND TRI1 TRI0 TRI TRANIF1 TRANIF0 TRAN TOKEN_TWO TOKEN_THREE TOKEN_SIX TOKEN_SEVEN TOKEN_QUOTE_Z2 TOKEN_QUOTE_Z1 TOKEN_QUOTE_X2 TOKEN_QUOTE_X1 TOKEN_QUOTE_TRUE TOKEN_QUOTE_FALSE TOKEN_PLUS_PLUS TOKEN_ONE TOKEN_NINE TOKEN_FOUR TOKEN_FIVE TOKEN_EIGHT TOKEN_DASH_DASH TIME TILDE_VBAR TILDE THIS TASK SYSTEM_TASK_IDENTIFIER SYSTEM_FUNCTION_IDENTIFIER SVINT SUPPLY1 SUPPLY0 SUPER STRUCT STRING STATIC SPECPARAM SPECIFY SIMPLE_IDENTIFIER SIGNED SHORTREAL SHORTINT SEQUENCE SEMICOLON RTRANIF1 RTRANIF0 RTRAN RPMOS RNMOS RETURN REPEAT RELEASE REG REF REALTIME REAL RCMOS P_XNOR P_POUNDPOUND P_NXOR P_NAND P_MINUSGT PULLUP PULLDOWN PROPERTY PROGRAM PRIORITY PRIMITIVE PMOS PLUS PLING PARAMETER OUTPUT OR OCTAL_BASE NULL NOTIF1 NOTIF0 NOT NOR NMOS NAND MODULE MODPORT MINUS MACROMODULE LPAREN LONGINT LOGIC LOCALPARAM LCURLY JOIN_NONE JOIN_ANY JOIN INTERFACE INTEGER INPUT INOUT INITIAL IMPORT IF HEX_BASE HASH GENVAR GENERATE FUNCTION FORK FOREVER FORCE FOR FINAL EXTERN EXPORT EVENT ENUM ENDTASK ENDPROGRAM ENDMODULE ENDINTERFACE ENDGENERATE ENDCASE END ELSE DOUBLE_QUOTES DO DISABLE DEFPARAM DEFAULT DECIMAL_BASE DEASSIGN DASH_GT_GT COVER CONTINUE CONSTRAINT CONST CMOS CLOCKING CLASS CHANDLE CASEZ CASEX CASE CARET BYTE BUFIF1 BUFIF0 BUF BREAK BIT BIND BINARY_BASE BEGIN BACKSLASH AUTOMATIC AT_STAR AT ASSIGN ASSERT AND AMPERSAND ALWAYS_LATCH ALWAYS_FF ALWAYS_COMB ALWAYS ALIAS #
** The following explanations concentrate on token ELSE.
** This state is reached from start after reading:

source_text_3 unique_priority IF LPAREN expression RPAREN statement_or_null

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              conditional_statement 
              (?)

** In state 1279, looking ahead at ELSE, shifting is permitted
** because of the following sub-derivation:

unique_priority IF LPAREN expression RPAREN statement_or_null . ELSE statement_or_null 

** In state 1279, looking ahead at ELSE, reducing production
** if_else_if_statement_8 ->
** is permitted because of the following sub-derivation:

unique_priority IF LPAREN expression RPAREN statement_or_null if_else_if_statement_8 ELSE statement_or_null // lookahead token appears
                                                              . 

** Conflict (shift/reduce/reduce) in state 1276.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 unique_priority IF LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              conditional_statement 
              unique_priority IF LPAREN expression RPAREN statement_or_null 
                                        primary 
                                        (?)

** In state 1276, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1276, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1276, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 1272.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 variable_lvalue assignment_operator

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              blocking_assignment SEMICOLON 
              variable_lvalue assignment_operator expression 
                                                  primary 
                                                  (?)

** In state 1272, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1272, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1272, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 1270.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 variable_lvalue EQUALS delay_or_event_control

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              blocking_assignment SEMICOLON 
              variable_lvalue EQUALS delay_or_event_control expression 
                                                            primary 
                                                            (?)

** In state 1270, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1270, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1270, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 1266.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 variable_lvalue P_LTE delay_or_event_control

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              variable_lvalue P_LTE delay_or_event_control expression SEMICOLON 
                                                           primary 
                                                           (?)

** In state 1266, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1266, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1266, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 1263.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 variable_lvalue P_LTE

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              variable_lvalue P_LTE expression SEMICOLON 
                                    primary 
                                    (?)

** In state 1263, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1263, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1263, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce) in state 1248.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 BEGIN COLON identifier seq_block_4

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              (?)

** In state 1248, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

BEGIN COLON identifier seq_block_4 seq_block_5 END 
                       seq_block_4 block_item_declaration 
                                   block_data_declaration 
                                   block_variable_declaration 
                                   data_type identifier variable_dimension list_of_variable_identifiers_4 SEMICOLON 
                                   identifier type_declaration_identifier_3 data_type_11 
                                   . SIMPLE_IDENTIFIER 

** In state 1248, looking ahead at SIMPLE_IDENTIFIER, reducing production
** seq_block_5 ->
** is permitted because of the following sub-derivation:

BEGIN COLON identifier seq_block_4 seq_block_5 END 
                                   seq_block_5 statement_or_null // lookahead token appears because statement_or_null can begin with SIMPLE_IDENTIFIER
                                   . 

** Conflict (shift/reduce/reduce) in state 1240.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 CASE LPAREN expression RPAREN case_item case_statement_8

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              case_statement 
              CASE LPAREN expression RPAREN case_item case_statement_8 ENDCASE 
                                                      case_statement_8 case_item 
                                                                       expression case_item_3 COLON statement_or_null 
                                                                       primary 
                                                                       (?)

** In state 1240, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1240, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1240, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 1238.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 CASE LPAREN expression RPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              case_statement 
              CASE LPAREN expression RPAREN case_item case_statement_8 ENDCASE 
                                            expression case_item_3 COLON statement_or_null 
                                            primary 
                                            (?)

** In state 1238, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1238, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1238, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 1236.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 CASE LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              case_statement 
              CASE LPAREN expression RPAREN case_item case_statement_8 ENDCASE 
                          primary 
                          (?)

** In state 1236, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1236, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1236, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 1232.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 CASEZ LPAREN expression RPAREN expression case_item_3 COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              case_statement 
              CASEZ LPAREN expression RPAREN case_item case_statement_17 ENDCASE 
                                             expression case_item_3 COLON statement_or_null 
                                                        case_item_3 COMMA expression 
                                                                          primary 
                                                                          (?)

** In state 1232, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1232, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1232, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 1229.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 CASEX LPAREN expression RPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              case_statement 
              CASEX LPAREN expression RPAREN case_item case_statement_26 ENDCASE 
                                             expression case_item_3 COLON statement_or_null 
                                             primary 
                                             (?)

** In state 1229, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1229, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1229, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 1227.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 CASEX LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              case_statement 
              CASEX LPAREN expression RPAREN case_item case_statement_26 ENDCASE 
                           primary 
                           (?)

** In state 1227, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1227, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1227, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 1223.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 CASEZ LPAREN expression RPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              case_statement 
              CASEZ LPAREN expression RPAREN case_item case_statement_17 ENDCASE 
                                             expression case_item_3 COLON statement_or_null 
                                             primary 
                                             (?)

** In state 1223, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1223, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1223, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 1221.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 CASEZ LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              case_statement 
              CASEZ LPAREN expression RPAREN case_item case_statement_17 ENDCASE 
                           primary 
                           (?)

** In state 1221, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1221, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1221, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 1211.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 COVER PROPERTY LPAREN DISABLE IFF LPAREN expression RPAREN LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              concurrent_assertion_item 
              cover_property_statement 
              COVER PROPERTY LPAREN property_spec RPAREN statement_or_null 
                                    DISABLE IFF LPAREN expression RPAREN property_expr 
                                                                         sequence_expr 
                                                                         (?)

** In state 1211, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

expression sequence_expr_12 
LPAREN variable_lvalue assignment_operator expression RPAREN 
       hierarchical_identifier variable_lvalue_3 
       . SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1211, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

LPAREN expression sequence_expr_17 RPAREN 
       primary 
       implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
       . 

** In state 1211, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

LPAREN expression sequence_expr_17 RPAREN 
       primary 
       implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
       . 

** Conflict (shift/reduce/reduce) in state 1210.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 COVER PROPERTY LPAREN DISABLE IFF LPAREN expression RPAREN NOT

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              concurrent_assertion_item 
              cover_property_statement 
              COVER PROPERTY LPAREN property_spec RPAREN statement_or_null 
                                    DISABLE IFF LPAREN expression RPAREN NOT property_expr 
                                                                             sequence_expr 
                                                                             expression sequence_expr_12 
                                                                             primary 
                                                                             (?)

** In state 1210, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1210, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1210, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 1209.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 COVER PROPERTY LPAREN DISABLE IFF LPAREN expression RPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              concurrent_assertion_item 
              cover_property_statement 
              COVER PROPERTY LPAREN property_spec RPAREN statement_or_null 
                                    DISABLE IFF LPAREN expression RPAREN property_expr 
                                                                         sequence_expr 
                                                                         expression sequence_expr_12 
                                                                         primary 
                                                                         (?)

** In state 1209, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1209, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1209, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 1207.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 COVER PROPERTY LPAREN DISABLE IFF LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              concurrent_assertion_item 
              cover_property_statement 
              COVER PROPERTY LPAREN property_spec RPAREN statement_or_null 
                                    DISABLE IFF LPAREN expression RPAREN property_expr 
                                                       primary 
                                                       (?)

** In state 1207, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1207, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1207, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 1197.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 COVER PROPERTY LPAREN LPAREN expression RPAREN sequence_expr TOKEN_PLING_EQUALS_GT NOT

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              concurrent_assertion_item 
              cover_property_statement 
              COVER PROPERTY LPAREN property_spec RPAREN statement_or_null 
                                    LPAREN expression RPAREN property_expr 
                                                             sequence_expr TOKEN_PLING_EQUALS_GT NOT sequence_expr 
                                                                                                     expression sequence_expr_12 
                                                                                                     primary 
                                                                                                     (?)

** In state 1197, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1197, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1197, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 1196.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 COVER PROPERTY LPAREN LPAREN expression RPAREN sequence_expr TOKEN_PLING_EQUALS_GT

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              concurrent_assertion_item 
              cover_property_statement 
              COVER PROPERTY LPAREN property_spec RPAREN statement_or_null 
                                    LPAREN expression RPAREN property_expr 
                                                             sequence_expr TOKEN_PLING_EQUALS_GT sequence_expr 
                                                                                                 expression sequence_expr_12 
                                                                                                 primary 
                                                                                                 (?)

** In state 1196, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1196, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1196, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 1193.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 COVER PROPERTY LPAREN LPAREN expression RPAREN sequence_expr VBAR_DASH_GT NOT

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              concurrent_assertion_item 
              cover_property_statement 
              COVER PROPERTY LPAREN property_spec RPAREN statement_or_null 
                                    LPAREN expression RPAREN property_expr 
                                                             sequence_expr VBAR_DASH_GT NOT sequence_expr 
                                                                                            expression sequence_expr_12 
                                                                                            primary 
                                                                                            (?)

** In state 1193, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1193, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1193, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 1192.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 COVER PROPERTY LPAREN LPAREN expression RPAREN sequence_expr VBAR_DASH_GT

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              concurrent_assertion_item 
              cover_property_statement 
              COVER PROPERTY LPAREN property_spec RPAREN statement_or_null 
                                    LPAREN expression RPAREN property_expr 
                                                             sequence_expr VBAR_DASH_GT sequence_expr 
                                                                                        expression sequence_expr_12 
                                                                                        primary 
                                                                                        (?)

** In state 1192, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1192, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1192, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce) in state 1191.
** Token involved: RPAREN
** This state is reached from start after reading:

source_text_3 COVER PROPERTY LPAREN LPAREN expression RPAREN LPAREN sequence_expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              concurrent_assertion_item 
              cover_property_statement 
              COVER PROPERTY LPAREN property_spec RPAREN statement_or_null 
                                    LPAREN expression RPAREN property_expr 
                                                             (?)

** In state 1191, looking ahead at RPAREN, reducing production
** property_expr -> sequence_expr
** is permitted because of the following sub-derivation:

LPAREN property_expr RPAREN // lookahead token appears
       sequence_expr . 

** In state 1191, looking ahead at RPAREN, shifting is permitted
** because of the following sub-derivation:

sequence_expr 
LPAREN sequence_expr . RPAREN 

** Conflict (shift/reduce/reduce) in state 1190.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 COVER PROPERTY LPAREN LPAREN expression RPAREN LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              concurrent_assertion_item 
              cover_property_statement 
              COVER PROPERTY LPAREN property_spec RPAREN statement_or_null 
                                    LPAREN expression RPAREN property_expr 
                                                             sequence_expr 
                                                             (?)

** In state 1190, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

expression sequence_expr_12 
LPAREN variable_lvalue assignment_operator expression RPAREN 
       hierarchical_identifier variable_lvalue_3 
       . SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1190, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

LPAREN expression sequence_expr_17 RPAREN 
       primary 
       implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
       . 

** In state 1190, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

LPAREN expression sequence_expr_17 RPAREN 
       primary 
       implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
       . 

** Conflict (shift/reduce/reduce) in state 1189.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 COVER PROPERTY LPAREN LPAREN expression RPAREN NOT

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              concurrent_assertion_item 
              cover_property_statement 
              COVER PROPERTY LPAREN property_spec RPAREN statement_or_null 
                                    LPAREN expression RPAREN NOT property_expr 
                                                                 sequence_expr 
                                                                 expression sequence_expr_12 
                                                                 primary 
                                                                 (?)

** In state 1189, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1189, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1189, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 1188.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 COVER PROPERTY LPAREN LPAREN expression RPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              concurrent_assertion_item 
              cover_property_statement 
              COVER PROPERTY LPAREN property_spec RPAREN statement_or_null 
                                    LPAREN expression RPAREN property_expr 
                                                             sequence_expr 
                                                             expression sequence_expr_12 
                                                             primary 
                                                             (?)

** In state 1188, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1188, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1188, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 1186.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 COVER PROPERTY LPAREN LPAREN LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              concurrent_assertion_item 
              cover_property_statement 
              COVER PROPERTY LPAREN property_spec RPAREN statement_or_null 
                                    LPAREN expression RPAREN property_expr 
                                           (?)

** In state 1186, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

LPAREN variable_lvalue assignment_operator expression RPAREN 
       hierarchical_identifier variable_lvalue_3 
       . SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1186, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

primary 
LPAREN mintypmax_expression RPAREN 
       expression 
       primary 
       implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
       . 

** In state 1186, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

primary 
LPAREN mintypmax_expression RPAREN 
       expression 
       primary 
       implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
       . 

** Conflict (shift/reduce/reduce) in state 1185.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 COVER PROPERTY LPAREN LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              concurrent_assertion_item 
              cover_property_statement 
              COVER PROPERTY LPAREN property_spec RPAREN statement_or_null 
                                    LPAREN expression RPAREN property_expr 
                                           primary 
                                           (?)

** In state 1185, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1185, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1185, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce) in state 1182.
** Token involved: P_POUNDPOUND
** This state is reached from start after reading:

source_text_3 COVER PROPERTY LPAREN clocking_event sequence_expr multi_clock_sequence_3 TOKEN_PLING_EQUALS_GT clocking_event sequence_expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              concurrent_assertion_item 
              cover_property_statement 
              COVER PROPERTY LPAREN property_spec RPAREN statement_or_null 
                                    multi_clock_property_expr 
                                    (?)

** In state 1182, looking ahead at P_POUNDPOUND, shifting is permitted
** because of the following sub-derivation:

clocking_event sequence_expr multi_clock_sequence_3 TOKEN_PLING_EQUALS_GT clocking_event sequence_expr multi_clock_sequence_3 
                                                                                         sequence_expr cycle_delay_range sequence_expr sequence_expr_9 
                                                                                                       . P_POUNDPOUND constant_expression 

** In state 1182, looking ahead at P_POUNDPOUND, reducing production
** multi_clock_sequence_3 ->
** is permitted because of the following sub-derivation:

clocking_event sequence_expr multi_clock_sequence_3 TOKEN_PLING_EQUALS_GT clocking_event sequence_expr multi_clock_sequence_3 
                                                                                                       multi_clock_sequence_3 P_POUNDPOUND clocking_event sequence_expr // lookahead token appears
                                                                                                       . 

** Conflict (shift/reduce/reduce) in state 1181.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 COVER PROPERTY LPAREN clocking_event sequence_expr multi_clock_sequence_3 TOKEN_PLING_EQUALS_GT clocking_event

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              concurrent_assertion_item 
              cover_property_statement 
              COVER PROPERTY LPAREN property_spec RPAREN statement_or_null 
                                    multi_clock_property_expr 
                                    clocking_event sequence_expr multi_clock_sequence_3 TOKEN_PLING_EQUALS_GT clocking_event sequence_expr multi_clock_sequence_3 
                                                                                                                             expression sequence_expr_12 
                                                                                                                             primary 
                                                                                                                             (?)

** In state 1181, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1181, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1181, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce) in state 1180.
** Token involved: P_POUNDPOUND
** This state is reached from start after reading:

source_text_3 COVER PROPERTY LPAREN clocking_event sequence_expr multi_clock_sequence_3 P_POUNDPOUND clocking_event sequence_expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              concurrent_assertion_item 
              cover_property_statement 
              COVER PROPERTY LPAREN property_spec RPAREN statement_or_null 
                                    multi_clock_property_expr 
                                    clocking_event sequence_expr multi_clock_sequence_3 
                                                                 (?)

** In state 1180, looking ahead at P_POUNDPOUND, shifting is permitted
** because of the following sub-derivation:

multi_clock_sequence_3 P_POUNDPOUND clocking_event sequence_expr 
                                                   sequence_expr cycle_delay_range sequence_expr sequence_expr_9 
                                                                 . P_POUNDPOUND constant_expression 

** In state 1180, looking ahead at P_POUNDPOUND, reducing production
** multi_clock_sequence_3 -> multi_clock_sequence_3 P_POUNDPOUND clocking_event sequence_expr
** is permitted because of the following sub-derivation:

multi_clock_sequence_3 P_POUNDPOUND clocking_event sequence_expr // lookahead token appears
multi_clock_sequence_3 P_POUNDPOUND clocking_event sequence_expr . 

** Conflict (shift/reduce/reduce) in state 1179.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 COVER PROPERTY LPAREN clocking_event sequence_expr multi_clock_sequence_3 P_POUNDPOUND clocking_event

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              concurrent_assertion_item 
              cover_property_statement 
              COVER PROPERTY LPAREN property_spec RPAREN statement_or_null 
                                    multi_clock_property_expr 
                                    clocking_event sequence_expr multi_clock_sequence_3 
                                                                 multi_clock_sequence_3 P_POUNDPOUND clocking_event sequence_expr 
                                                                                                                    expression sequence_expr_12 
                                                                                                                    primary 
                                                                                                                    (?)

** In state 1179, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1179, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1179, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce) in state 1176.
** Token involved: P_POUNDPOUND
** This state is reached from start after reading:

source_text_3 COVER PROPERTY LPAREN clocking_event sequence_expr multi_clock_sequence_3 TOKEN_PLING_EQUALS_GT NOT clocking_event sequence_expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              concurrent_assertion_item 
              cover_property_statement 
              COVER PROPERTY LPAREN property_spec RPAREN statement_or_null 
                                    multi_clock_property_expr 
                                    (?)

** In state 1176, looking ahead at P_POUNDPOUND, shifting is permitted
** because of the following sub-derivation:

clocking_event sequence_expr multi_clock_sequence_3 TOKEN_PLING_EQUALS_GT NOT clocking_event sequence_expr multi_clock_sequence_3 
                                                                                             sequence_expr cycle_delay_range sequence_expr sequence_expr_9 
                                                                                                           . P_POUNDPOUND constant_expression 

** In state 1176, looking ahead at P_POUNDPOUND, reducing production
** multi_clock_sequence_3 ->
** is permitted because of the following sub-derivation:

clocking_event sequence_expr multi_clock_sequence_3 TOKEN_PLING_EQUALS_GT NOT clocking_event sequence_expr multi_clock_sequence_3 
                                                                                                           multi_clock_sequence_3 P_POUNDPOUND clocking_event sequence_expr // lookahead token appears
                                                                                                           . 

** Conflict (shift/reduce/reduce) in state 1175.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 COVER PROPERTY LPAREN clocking_event sequence_expr multi_clock_sequence_3 TOKEN_PLING_EQUALS_GT NOT clocking_event

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              concurrent_assertion_item 
              cover_property_statement 
              COVER PROPERTY LPAREN property_spec RPAREN statement_or_null 
                                    multi_clock_property_expr 
                                    clocking_event sequence_expr multi_clock_sequence_3 TOKEN_PLING_EQUALS_GT NOT clocking_event sequence_expr multi_clock_sequence_3 
                                                                                                                                 expression sequence_expr_12 
                                                                                                                                 primary 
                                                                                                                                 (?)

** In state 1175, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1175, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1175, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce) in state 1171.
** Token involved: P_POUNDPOUND
** This state is reached from start after reading:

source_text_3 COVER PROPERTY LPAREN clocking_event sequence_expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              concurrent_assertion_item 
              cover_property_statement 
              COVER PROPERTY LPAREN property_spec RPAREN statement_or_null 
                                    multi_clock_property_expr 
                                    (?)

** In state 1171, looking ahead at P_POUNDPOUND, shifting is permitted
** because of the following sub-derivation:

clocking_event sequence_expr multi_clock_sequence_3 
               sequence_expr cycle_delay_range sequence_expr sequence_expr_9 
                             . P_POUNDPOUND constant_expression 

** In state 1171, looking ahead at P_POUNDPOUND, reducing production
** multi_clock_sequence_3 ->
** is permitted because of the following sub-derivation:

clocking_event sequence_expr multi_clock_sequence_3 
                             multi_clock_sequence_3 P_POUNDPOUND clocking_event sequence_expr // lookahead token appears
                             . 

** Conflict (shift/reduce/reduce) in state 1169.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 SEQUENCE identifier SEMICOLON sequence_declaration_6 LPAREN expression sequence_expr_17 COMMA variable_lvalue EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              concurrent_assertion_item 
              concurrent_assertion_item_declaration 
              SEQUENCE identifier SEMICOLON sequence_declaration_6 sequence_spec SEMICOLON ENDSEQUENCE 
                                                                   sequence_expr 
                                                                   LPAREN expression sequence_expr_17 RPAREN 
                                                                                     sequence_expr_17 COMMA variable_lvalue EQUALS expression 
                                                                                                                                   primary 
                                                                                                                                   (?)

** In state 1169, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1169, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1169, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (reduce/reduce) in state 1163.
** Tokens involved: RPAREN COMMA
** The following explanations concentrate on token RPAREN.
** This state is reached from start after reading:

source_text_3 SEQUENCE identifier SEMICOLON sequence_declaration_6 LPAREN expression

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              concurrent_assertion_item 
              concurrent_assertion_item_declaration 
              SEQUENCE identifier SEMICOLON sequence_declaration_6 sequence_spec SEMICOLON ENDSEQUENCE 
                                                                   sequence_expr 
                                                                   (?)

** In state 1163, looking ahead at RPAREN, reducing production
** mintypmax_expression -> expression
** is permitted because of the following sub-derivation:

expression sequence_expr_12 
primary 
LPAREN mintypmax_expression RPAREN // lookahead token appears
       expression . 

** In state 1163, looking ahead at RPAREN, reducing production
** sequence_expr_12 ->
** is permitted because of the following sub-derivation:

LPAREN sequence_expr RPAREN // lookahead token appears
       expression sequence_expr_12 // lookahead token is inherited
                  . 

** In state 1163, looking ahead at RPAREN, reducing production
** sequence_expr_17 ->
** is permitted because of the following sub-derivation:

LPAREN expression sequence_expr_17 RPAREN // lookahead token appears
                  . 

** Conflict (shift/reduce/reduce) in state 1154.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 SEQUENCE identifier SEMICOLON sequence_declaration_6 expression sequence_expr_12 COMMA variable_lvalue EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              concurrent_assertion_item 
              concurrent_assertion_item_declaration 
              SEQUENCE identifier SEMICOLON sequence_declaration_6 sequence_spec SEMICOLON ENDSEQUENCE 
                                                                   sequence_expr 
                                                                   expression sequence_expr_12 
                                                                              sequence_expr_12 COMMA variable_lvalue EQUALS expression 
                                                                                                                            primary 
                                                                                                                            (?)

** In state 1154, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1154, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1154, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce) in state 1141.
** Tokens involved: WITHIN P_POUNDPOUND OR INTERSECT AND
** The following explanations concentrate on token WITHIN.
** This state is reached from start after reading:

source_text_3 SEQUENCE identifier SEMICOLON sequence_declaration_6 cycle_delay_range sequence_expr sequence_expr_4 cycle_delay_range sequence_expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              concurrent_assertion_item 
              concurrent_assertion_item_declaration 
              SEQUENCE identifier SEMICOLON sequence_declaration_6 sequence_spec SEMICOLON ENDSEQUENCE 
                                                                   sequence_expr 
                                                                   (?)

** In state 1141, looking ahead at WITHIN, shifting is permitted
** because of the following sub-derivation:

cycle_delay_range sequence_expr sequence_expr_4 
                                sequence_expr_4 cycle_delay_range sequence_expr 
                                                                  sequence_expr . WITHIN sequence_expr 

** In state 1141, looking ahead at WITHIN, reducing production
** sequence_expr_4 -> sequence_expr_4 cycle_delay_range sequence_expr
** is permitted because of the following sub-derivation:

sequence_expr WITHIN sequence_expr // lookahead token appears
cycle_delay_range sequence_expr sequence_expr_4 // lookahead token is inherited
                                sequence_expr_4 cycle_delay_range sequence_expr . 

** Conflict (shift/reduce/reduce) in state 1140.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 SEQUENCE identifier SEMICOLON sequence_declaration_6 cycle_delay_range sequence_expr sequence_expr_4 cycle_delay_range

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              concurrent_assertion_item 
              concurrent_assertion_item_declaration 
              SEQUENCE identifier SEMICOLON sequence_declaration_6 sequence_spec SEMICOLON ENDSEQUENCE 
                                                                   sequence_expr 
                                                                   cycle_delay_range sequence_expr sequence_expr_4 
                                                                                                   sequence_expr_4 cycle_delay_range sequence_expr 
                                                                                                                                     expression sequence_expr_12 
                                                                                                                                     primary 
                                                                                                                                     (?)

** In state 1140, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1140, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1140, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce) in state 1139.
** Token involved: P_POUNDPOUND
** This state is reached from start after reading:

source_text_3 SEQUENCE identifier SEMICOLON sequence_declaration_6 cycle_delay_range sequence_expr sequence_expr_4

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              concurrent_assertion_item 
              concurrent_assertion_item_declaration 
              SEQUENCE identifier SEMICOLON sequence_declaration_6 sequence_spec SEMICOLON ENDSEQUENCE 
                                                                   sequence_expr 
                                                                   (?)

** In state 1139, looking ahead at P_POUNDPOUND, shifting is permitted
** because of the following sub-derivation:

cycle_delay_range sequence_expr sequence_expr_4 
                                sequence_expr_4 cycle_delay_range sequence_expr 
                                                . P_POUNDPOUND constant_expression 

** In state 1139, looking ahead at P_POUNDPOUND, reducing production
** sequence_expr -> cycle_delay_range sequence_expr sequence_expr_4
** is permitted because of the following sub-derivation:

sequence_expr cycle_delay_range sequence_expr sequence_expr_9 // lookahead token appears because cycle_delay_range can begin with P_POUNDPOUND
cycle_delay_range sequence_expr sequence_expr_4 . 

** Conflict (shift/reduce) in state 1138.
** Tokens involved: WITHIN P_POUNDPOUND OR INTERSECT AND
** The following explanations concentrate on token WITHIN.
** This state is reached from start after reading:

source_text_3 SEQUENCE identifier SEMICOLON sequence_declaration_6 cycle_delay_range sequence_expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              concurrent_assertion_item 
              concurrent_assertion_item_declaration 
              SEQUENCE identifier SEMICOLON sequence_declaration_6 sequence_spec SEMICOLON ENDSEQUENCE 
                                                                   sequence_expr 
                                                                   (?)

** In state 1138, looking ahead at WITHIN, shifting is permitted
** because of the following sub-derivation:

cycle_delay_range sequence_expr sequence_expr_4 
                  sequence_expr . WITHIN sequence_expr 

** In state 1138, looking ahead at WITHIN, reducing production
** sequence_expr_4 ->
** is permitted because of the following sub-derivation:

sequence_expr WITHIN sequence_expr // lookahead token appears
cycle_delay_range sequence_expr sequence_expr_4 // lookahead token is inherited
                                . 

** Conflict (shift/reduce/reduce) in state 1137.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 SEQUENCE identifier SEMICOLON sequence_declaration_6 cycle_delay_range

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              concurrent_assertion_item 
              concurrent_assertion_item_declaration 
              SEQUENCE identifier SEMICOLON sequence_declaration_6 sequence_spec SEMICOLON ENDSEQUENCE 
                                                                   sequence_expr 
                                                                   cycle_delay_range sequence_expr sequence_expr_4 
                                                                                     expression sequence_expr_12 
                                                                                     primary 
                                                                                     (?)

** In state 1137, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1137, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1137, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce) in state 1136.
** Tokens involved: WITHIN P_POUNDPOUND OR INTERSECT AND
** The following explanations concentrate on token WITHIN.
** This state is reached from start after reading:

source_text_3 SEQUENCE identifier SEMICOLON sequence_declaration_6 expression THROUGHOUT sequence_expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              concurrent_assertion_item 
              concurrent_assertion_item_declaration 
              SEQUENCE identifier SEMICOLON sequence_declaration_6 sequence_spec SEMICOLON ENDSEQUENCE 
                                                                   sequence_expr 
                                                                   (?)

** In state 1136, looking ahead at WITHIN, reducing production
** sequence_expr -> expression THROUGHOUT sequence_expr
** is permitted because of the following sub-derivation:

sequence_expr WITHIN sequence_expr // lookahead token appears
expression THROUGHOUT sequence_expr . 

** In state 1136, looking ahead at WITHIN, shifting is permitted
** because of the following sub-derivation:

expression THROUGHOUT sequence_expr 
                      sequence_expr . WITHIN sequence_expr 

** Conflict (shift/reduce/reduce) in state 1135.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 SEQUENCE identifier SEMICOLON sequence_declaration_6 expression THROUGHOUT

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              concurrent_assertion_item 
              concurrent_assertion_item_declaration 
              SEQUENCE identifier SEMICOLON sequence_declaration_6 sequence_spec SEMICOLON ENDSEQUENCE 
                                                                   sequence_expr 
                                                                   expression THROUGHOUT sequence_expr 
                                                                                         expression sequence_expr_12 
                                                                                         primary 
                                                                                         (?)

** In state 1135, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1135, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1135, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce) in state 1123.
** Token involved: COMMA
** This state is reached from start after reading:

source_text_3 COVER PROPERTY LPAREN identifier LPAREN LPAREN event_expression actual_arg_list_4 COMMA event_expression

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              concurrent_assertion_item 
              cover_property_statement 
              COVER PROPERTY LPAREN identifier LPAREN actual_arg_list RPAREN RPAREN statement_or_null 
                                                      LPAREN event_expression actual_arg_list_4 RPAREN 
                                                                              (?)

** In state 1123, looking ahead at COMMA, reducing production
** actual_arg_list_4 -> actual_arg_list_4 COMMA event_expression
** is permitted because of the following sub-derivation:

actual_arg_list_4 COMMA event_expression // lookahead token appears
actual_arg_list_4 COMMA event_expression . 

** In state 1123, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

actual_arg_list_4 COMMA event_expression 
                        event_expression . COMMA event_expression 

** Conflict (shift/reduce/reduce) in state 1122.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 COVER PROPERTY LPAREN identifier LPAREN LPAREN event_expression actual_arg_list_4 COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              concurrent_assertion_item 
              cover_property_statement 
              COVER PROPERTY LPAREN identifier LPAREN actual_arg_list RPAREN RPAREN statement_or_null 
                                                      LPAREN event_expression actual_arg_list_4 RPAREN 
                                                                              actual_arg_list_4 COMMA event_expression 
                                                                                                      expression 
                                                                                                      primary 
                                                                                                      (?)

** In state 1122, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1122, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1122, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce) in state 1119.
** Token involved: COMMA
** This state is reached from start after reading:

source_text_3 COVER PROPERTY LPAREN identifier LPAREN LPAREN event_expression

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              concurrent_assertion_item 
              cover_property_statement 
              COVER PROPERTY LPAREN identifier LPAREN actual_arg_list RPAREN RPAREN statement_or_null 
                                                      (?)

** In state 1119, looking ahead at COMMA, reducing production
** actual_arg_list_4 ->
** is permitted because of the following sub-derivation:

LPAREN event_expression actual_arg_list_4 RPAREN 
                        actual_arg_list_4 COMMA event_expression // lookahead token appears
                        . 

** In state 1119, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

LPAREN event_expression actual_arg_list_4 RPAREN 
       event_expression . COMMA event_expression 

** Conflict (shift/reduce/reduce) in state 1116.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 COVER PROPERTY LPAREN identifier LPAREN LPAREN DOT identifier LPAREN event_expression RPAREN actual_arg_list_13 COMMA DOT identifier LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              concurrent_assertion_item 
              cover_property_statement 
              COVER PROPERTY LPAREN identifier LPAREN actual_arg_list RPAREN RPAREN statement_or_null 
                                                      LPAREN DOT identifier LPAREN event_expression RPAREN actual_arg_list_13 RPAREN 
                                                                                                           actual_arg_list_13 COMMA DOT identifier LPAREN event_expression RPAREN 
                                                                                                                                                          expression 
                                                                                                                                                          primary 
                                                                                                                                                          (?)

** In state 1116, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1116, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1116, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 1108.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 COVER PROPERTY LPAREN identifier LPAREN LPAREN DOT identifier LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              concurrent_assertion_item 
              cover_property_statement 
              COVER PROPERTY LPAREN identifier LPAREN actual_arg_list RPAREN RPAREN statement_or_null 
                                                      LPAREN DOT identifier LPAREN event_expression RPAREN actual_arg_list_13 RPAREN 
                                                                                   expression 
                                                                                   primary 
                                                                                   (?)

** In state 1108, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1108, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1108, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 1105.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 SEQUENCE identifier SEMICOLON sequence_declaration_6 identifier LPAREN LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              concurrent_assertion_item 
              concurrent_assertion_item_declaration 
              SEQUENCE identifier SEMICOLON sequence_declaration_6 sequence_spec SEMICOLON ENDSEQUENCE 
                                                                   sequence_expr 
                                                                   identifier LPAREN actual_arg_list RPAREN 
                                                                                     LPAREN event_expression actual_arg_list_4 RPAREN 
                                                                                            expression 
                                                                                            primary 
                                                                                            (?)

** In state 1105, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1105, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1105, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (reduce/reduce) in state 1103.
** Tokens involved: WITHIN VBAR_DASH_GT TOKEN_PLING_EQUALS_GT SEMICOLON RPAREN P_POUNDPOUND OR LBRACK_STAR INTERSECT AND
** The following explanations concentrate on token WITHIN.
** This state is reached from start after reading:

source_text_3 COVER PROPERTY LPAREN clocking_event identifier

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              concurrent_assertion_item 
              cover_property_statement 
              COVER PROPERTY LPAREN property_spec RPAREN statement_or_null 
                                    multi_clock_property_expr 
                                    clocking_event sequence_expr multi_clock_sequence_3 
                                                   sequence_expr WITHIN sequence_expr // lookahead token appears
                                                   (?)

** In state 1103, looking ahead at WITHIN, reducing production
** primary -> identifier
** is permitted because of the following sub-derivation:

expression sequence_expr_12 // lookahead token is inherited because sequence_expr_12 can vanish
primary // lookahead token is inherited
identifier . 

** In state 1103, looking ahead at WITHIN, reducing production
** sequence_expr -> identifier
** is permitted because of the following sub-derivation:

identifier . 

** Conflict (shift/reduce) in state 1102.
** Tokens involved: WITHIN P_POUNDPOUND OR INTERSECT AND
** The following explanations concentrate on token WITHIN.
** This state is reached from start after reading:

source_text_3 SEQUENCE identifier SEMICOLON sequence_declaration_6 sequence_expr cycle_delay_range sequence_expr sequence_expr_9 cycle_delay_range sequence_expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              concurrent_assertion_item 
              concurrent_assertion_item_declaration 
              SEQUENCE identifier SEMICOLON sequence_declaration_6 sequence_spec SEMICOLON ENDSEQUENCE 
                                                                   sequence_expr 
                                                                   (?)

** In state 1102, looking ahead at WITHIN, shifting is permitted
** because of the following sub-derivation:

sequence_expr cycle_delay_range sequence_expr sequence_expr_9 
                                              sequence_expr_9 cycle_delay_range sequence_expr 
                                                                                sequence_expr . WITHIN sequence_expr 

** In state 1102, looking ahead at WITHIN, reducing production
** sequence_expr_9 -> sequence_expr_9 cycle_delay_range sequence_expr
** is permitted because of the following sub-derivation:

sequence_expr WITHIN sequence_expr // lookahead token appears
sequence_expr cycle_delay_range sequence_expr sequence_expr_9 // lookahead token is inherited
                                              sequence_expr_9 cycle_delay_range sequence_expr . 

** Conflict (shift/reduce/reduce) in state 1101.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 SEQUENCE identifier SEMICOLON sequence_declaration_6 sequence_expr cycle_delay_range sequence_expr sequence_expr_9 cycle_delay_range

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              concurrent_assertion_item 
              concurrent_assertion_item_declaration 
              SEQUENCE identifier SEMICOLON sequence_declaration_6 sequence_spec SEMICOLON ENDSEQUENCE 
                                                                   sequence_expr 
                                                                   sequence_expr cycle_delay_range sequence_expr sequence_expr_9 
                                                                                                                 sequence_expr_9 cycle_delay_range sequence_expr 
                                                                                                                                                   expression sequence_expr_12 
                                                                                                                                                   primary 
                                                                                                                                                   (?)

** In state 1101, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1101, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1101, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce) in state 1100.
** Token involved: P_POUNDPOUND
** This state is reached from start after reading:

source_text_3 SEQUENCE identifier SEMICOLON sequence_declaration_6 sequence_expr cycle_delay_range sequence_expr sequence_expr_9

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              concurrent_assertion_item 
              concurrent_assertion_item_declaration 
              SEQUENCE identifier SEMICOLON sequence_declaration_6 sequence_spec SEMICOLON ENDSEQUENCE 
                                                                   sequence_expr 
                                                                   (?)

** In state 1100, looking ahead at P_POUNDPOUND, shifting is permitted
** because of the following sub-derivation:

sequence_expr cycle_delay_range sequence_expr sequence_expr_9 
                                              sequence_expr_9 cycle_delay_range sequence_expr 
                                                              . P_POUNDPOUND constant_expression 

** In state 1100, looking ahead at P_POUNDPOUND, reducing production
** sequence_expr -> sequence_expr cycle_delay_range sequence_expr sequence_expr_9
** is permitted because of the following sub-derivation:

sequence_expr cycle_delay_range sequence_expr sequence_expr_9 // lookahead token appears because cycle_delay_range can begin with P_POUNDPOUND
sequence_expr cycle_delay_range sequence_expr sequence_expr_9 . 

** Conflict (shift/reduce) in state 1099.
** Tokens involved: WITHIN P_POUNDPOUND OR INTERSECT AND
** The following explanations concentrate on token WITHIN.
** This state is reached from start after reading:

source_text_3 SEQUENCE identifier SEMICOLON sequence_declaration_6 sequence_expr cycle_delay_range sequence_expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              concurrent_assertion_item 
              concurrent_assertion_item_declaration 
              SEQUENCE identifier SEMICOLON sequence_declaration_6 sequence_spec SEMICOLON ENDSEQUENCE 
                                                                   sequence_expr 
                                                                   (?)

** In state 1099, looking ahead at WITHIN, shifting is permitted
** because of the following sub-derivation:

sequence_expr cycle_delay_range sequence_expr sequence_expr_9 
                                sequence_expr . WITHIN sequence_expr 

** In state 1099, looking ahead at WITHIN, reducing production
** sequence_expr_9 ->
** is permitted because of the following sub-derivation:

sequence_expr WITHIN sequence_expr // lookahead token appears
sequence_expr cycle_delay_range sequence_expr sequence_expr_9 // lookahead token is inherited
                                              . 

** Conflict (shift/reduce/reduce) in state 1098.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 SEQUENCE identifier SEMICOLON sequence_declaration_6 sequence_expr cycle_delay_range

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              concurrent_assertion_item 
              concurrent_assertion_item_declaration 
              SEQUENCE identifier SEMICOLON sequence_declaration_6 sequence_spec SEMICOLON ENDSEQUENCE 
                                                                   sequence_expr 
                                                                   sequence_expr cycle_delay_range sequence_expr sequence_expr_9 
                                                                                                   expression sequence_expr_12 
                                                                                                   primary 
                                                                                                   (?)

** In state 1098, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1098, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1098, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce) in state 1097.
** Tokens involved: WITHIN P_POUNDPOUND OR INTERSECT AND
** The following explanations concentrate on token WITHIN.
** This state is reached from start after reading:

source_text_3 SEQUENCE identifier SEMICOLON sequence_declaration_6 sequence_expr AND sequence_expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              concurrent_assertion_item 
              concurrent_assertion_item_declaration 
              SEQUENCE identifier SEMICOLON sequence_declaration_6 sequence_spec SEMICOLON ENDSEQUENCE 
                                                                   sequence_expr 
                                                                   (?)

** In state 1097, looking ahead at WITHIN, reducing production
** sequence_expr -> sequence_expr AND sequence_expr
** is permitted because of the following sub-derivation:

sequence_expr WITHIN sequence_expr // lookahead token appears
sequence_expr AND sequence_expr . 

** In state 1097, looking ahead at WITHIN, shifting is permitted
** because of the following sub-derivation:

sequence_expr AND sequence_expr 
                  sequence_expr . WITHIN sequence_expr 

** Conflict (shift/reduce/reduce) in state 1096.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 SEQUENCE identifier SEMICOLON sequence_declaration_6 sequence_expr AND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              concurrent_assertion_item 
              concurrent_assertion_item_declaration 
              SEQUENCE identifier SEMICOLON sequence_declaration_6 sequence_spec SEMICOLON ENDSEQUENCE 
                                                                   sequence_expr 
                                                                   sequence_expr AND sequence_expr 
                                                                                     expression sequence_expr_12 
                                                                                     primary 
                                                                                     (?)

** In state 1096, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1096, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1096, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce) in state 1095.
** Tokens involved: WITHIN P_POUNDPOUND OR INTERSECT AND
** The following explanations concentrate on token WITHIN.
** This state is reached from start after reading:

source_text_3 SEQUENCE identifier SEMICOLON sequence_declaration_6 sequence_expr INTERSECT sequence_expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              concurrent_assertion_item 
              concurrent_assertion_item_declaration 
              SEQUENCE identifier SEMICOLON sequence_declaration_6 sequence_spec SEMICOLON ENDSEQUENCE 
                                                                   sequence_expr 
                                                                   (?)

** In state 1095, looking ahead at WITHIN, reducing production
** sequence_expr -> sequence_expr INTERSECT sequence_expr
** is permitted because of the following sub-derivation:

sequence_expr WITHIN sequence_expr // lookahead token appears
sequence_expr INTERSECT sequence_expr . 

** In state 1095, looking ahead at WITHIN, shifting is permitted
** because of the following sub-derivation:

sequence_expr INTERSECT sequence_expr 
                        sequence_expr . WITHIN sequence_expr 

** Conflict (shift/reduce/reduce) in state 1094.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 SEQUENCE identifier SEMICOLON sequence_declaration_6 sequence_expr INTERSECT

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              concurrent_assertion_item 
              concurrent_assertion_item_declaration 
              SEQUENCE identifier SEMICOLON sequence_declaration_6 sequence_spec SEMICOLON ENDSEQUENCE 
                                                                   sequence_expr 
                                                                   sequence_expr INTERSECT sequence_expr 
                                                                                           expression sequence_expr_12 
                                                                                           primary 
                                                                                           (?)

** In state 1094, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1094, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1094, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce) in state 1093.
** Tokens involved: WITHIN P_POUNDPOUND OR INTERSECT AND
** The following explanations concentrate on token WITHIN.
** This state is reached from start after reading:

source_text_3 SEQUENCE identifier SEMICOLON sequence_declaration_6 sequence_expr OR sequence_expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              concurrent_assertion_item 
              concurrent_assertion_item_declaration 
              SEQUENCE identifier SEMICOLON sequence_declaration_6 sequence_spec SEMICOLON ENDSEQUENCE 
                                                                   sequence_expr 
                                                                   (?)

** In state 1093, looking ahead at WITHIN, reducing production
** sequence_expr -> sequence_expr OR sequence_expr
** is permitted because of the following sub-derivation:

sequence_expr WITHIN sequence_expr // lookahead token appears
sequence_expr OR sequence_expr . 

** In state 1093, looking ahead at WITHIN, shifting is permitted
** because of the following sub-derivation:

sequence_expr OR sequence_expr 
                 sequence_expr . WITHIN sequence_expr 

** Conflict (shift/reduce/reduce) in state 1092.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 SEQUENCE identifier SEMICOLON sequence_declaration_6 sequence_expr OR

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              concurrent_assertion_item 
              concurrent_assertion_item_declaration 
              SEQUENCE identifier SEMICOLON sequence_declaration_6 sequence_spec SEMICOLON ENDSEQUENCE 
                                                                   sequence_expr 
                                                                   sequence_expr OR sequence_expr 
                                                                                    expression sequence_expr_12 
                                                                                    primary 
                                                                                    (?)

** In state 1092, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1092, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1092, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce) in state 1091.
** Tokens involved: WITHIN P_POUNDPOUND OR INTERSECT AND
** The following explanations concentrate on token WITHIN.
** This state is reached from start after reading:

source_text_3 SEQUENCE identifier SEMICOLON sequence_declaration_6 sequence_expr WITHIN sequence_expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              concurrent_assertion_item 
              concurrent_assertion_item_declaration 
              SEQUENCE identifier SEMICOLON sequence_declaration_6 sequence_spec SEMICOLON ENDSEQUENCE 
                                                                   sequence_expr 
                                                                   (?)

** In state 1091, looking ahead at WITHIN, shifting is permitted
** because of the following sub-derivation:

sequence_expr WITHIN sequence_expr 
                     sequence_expr . WITHIN sequence_expr 

** In state 1091, looking ahead at WITHIN, reducing production
** sequence_expr -> sequence_expr WITHIN sequence_expr
** is permitted because of the following sub-derivation:

sequence_expr WITHIN sequence_expr // lookahead token appears
sequence_expr WITHIN sequence_expr . 

** Conflict (shift/reduce/reduce) in state 1090.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 SEQUENCE identifier SEMICOLON sequence_declaration_6 sequence_expr WITHIN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              concurrent_assertion_item 
              concurrent_assertion_item_declaration 
              SEQUENCE identifier SEMICOLON sequence_declaration_6 sequence_spec SEMICOLON ENDSEQUENCE 
                                                                   sequence_expr 
                                                                   sequence_expr WITHIN sequence_expr 
                                                                                        expression sequence_expr_12 
                                                                                        primary 
                                                                                        (?)

** In state 1090, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1090, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1090, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 1088.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 SEQUENCE identifier SEMICOLON sequence_declaration_6 FIRST_MATCH LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              concurrent_assertion_item 
              concurrent_assertion_item_declaration 
              SEQUENCE identifier SEMICOLON sequence_declaration_6 sequence_spec SEMICOLON ENDSEQUENCE 
                                                                   sequence_expr 
                                                                   FIRST_MATCH LPAREN sequence_expr RPAREN 
                                                                                      expression sequence_expr_12 
                                                                                      primary 
                                                                                      (?)

** In state 1088, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1088, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1088, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 1086.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 SEQUENCE identifier SEMICOLON sequence_declaration_6 LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              concurrent_assertion_item 
              concurrent_assertion_item_declaration 
              SEQUENCE identifier SEMICOLON sequence_declaration_6 sequence_spec SEMICOLON ENDSEQUENCE 
                                                                   sequence_expr 
                                                                   (?)

** In state 1086, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

expression sequence_expr_12 
LPAREN variable_lvalue assignment_operator expression RPAREN 
       hierarchical_identifier variable_lvalue_3 
       . SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1086, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

LPAREN expression sequence_expr_17 RPAREN 
       primary 
       implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
       . 

** In state 1086, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

LPAREN expression sequence_expr_17 RPAREN 
       primary 
       implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
       . 

** Conflict (shift/reduce) in state 1085.
** Tokens involved: VBAR P_XNOR P_NXOR PLUS MINUS CARET AMPERSAND
** The following explanations concentrate on token VBAR.
** This state is reached from start after reading:

source_text_3 SEQUENCE identifier SEMICOLON sequence_declaration_6 P_POUNDPOUND constant_expression

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              concurrent_assertion_item 
              concurrent_assertion_item_declaration 
              SEQUENCE identifier SEMICOLON sequence_declaration_6 sequence_spec SEMICOLON ENDSEQUENCE 
                                                                   sequence_expr 
                                                                   (?)

** In state 1085, looking ahead at VBAR, shifting is permitted
** because of the following sub-derivation:

cycle_delay_range sequence_expr sequence_expr_4 
P_POUNDPOUND constant_expression 
             constant_expression binary_operator constant_expression 
                                 . VBAR 

** In state 1085, looking ahead at VBAR, reducing production
** cycle_delay_range -> P_POUNDPOUND constant_expression
** is permitted because of the following sub-derivation:

cycle_delay_range sequence_expr sequence_expr_4 // lookahead token appears because sequence_expr can begin with VBAR
P_POUNDPOUND constant_expression . 

** Conflict (shift/reduce/reduce) in state 1076.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 COVER PROPERTY LPAREN NOT clocking_event

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              concurrent_assertion_item 
              cover_property_statement 
              COVER PROPERTY LPAREN property_spec RPAREN statement_or_null 
                                    NOT multi_clock_property_expr 
                                        clocking_event sequence_expr multi_clock_sequence_3 
                                                       expression sequence_expr_12 
                                                       primary 
                                                       (?)

** In state 1076, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1076, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1076, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 1070.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 CLOCKING AT LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              CLOCKING clocking_event SEMICOLON clocking_decl_7 ENDCLOCKING 
                       AT LPAREN event_expression RPAREN 
                                 expression 
                                 primary 
                                 (?)

** In state 1070, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1070, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1070, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 1053.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 AT LPAREN edge_identifier expression IFF

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              procedural_timing_control statement_or_null 
              event_control 
              AT LPAREN event_expression RPAREN 
                        edge_identifier expression IFF expression 
                                                       primary 
                                                       (?)

** In state 1053, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1053, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1053, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 1051.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 AT LPAREN edge_identifier

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              procedural_timing_control statement_or_null 
              event_control 
              AT LPAREN event_expression RPAREN 
                        edge_identifier expression 
                                        primary 
                                        (?)

** In state 1051, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1051, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1051, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce) in state 1050.
** Tokens involved: OR COMMA
** The following explanations concentrate on token OR.
** This state is reached from start after reading:

source_text_3 AT LPAREN event_expression COMMA event_expression

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              procedural_timing_control statement_or_null 
              event_control 
              AT LPAREN event_expression RPAREN 
                        (?)

** In state 1050, looking ahead at OR, shifting is permitted
** because of the following sub-derivation:

event_expression COMMA event_expression 
                       event_expression . OR event_expression 

** In state 1050, looking ahead at OR, reducing production
** event_expression -> event_expression COMMA event_expression
** is permitted because of the following sub-derivation:

event_expression OR event_expression // lookahead token appears
event_expression COMMA event_expression . 

** Conflict (shift/reduce/reduce) in state 1049.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 AT LPAREN event_expression COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              procedural_timing_control statement_or_null 
              event_control 
              AT LPAREN event_expression RPAREN 
                        event_expression COMMA event_expression 
                                               expression 
                                               primary 
                                               (?)

** In state 1049, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1049, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1049, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce) in state 1048.
** Tokens involved: OR COMMA
** The following explanations concentrate on token OR.
** This state is reached from start after reading:

source_text_3 AT LPAREN event_expression OR event_expression

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              procedural_timing_control statement_or_null 
              event_control 
              AT LPAREN event_expression RPAREN 
                        (?)

** In state 1048, looking ahead at OR, shifting is permitted
** because of the following sub-derivation:

event_expression OR event_expression 
                    event_expression . OR event_expression 

** In state 1048, looking ahead at OR, reducing production
** event_expression -> event_expression OR event_expression
** is permitted because of the following sub-derivation:

event_expression OR event_expression // lookahead token appears
event_expression OR event_expression . 

** Conflict (shift/reduce/reduce) in state 1047.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 AT LPAREN event_expression OR

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              procedural_timing_control statement_or_null 
              event_control 
              AT LPAREN event_expression RPAREN 
                        event_expression OR event_expression 
                                            expression 
                                            primary 
                                            (?)

** In state 1047, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1047, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1047, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 1043.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 AT LPAREN expression IFF

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              procedural_timing_control statement_or_null 
              event_control 
              AT LPAREN event_expression RPAREN 
                        expression IFF expression 
                                       primary 
                                       (?)

** In state 1043, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1043, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1043, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 1039.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 AT LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              procedural_timing_control statement_or_null 
              event_control 
              AT LPAREN event_expression RPAREN 
                        expression 
                        primary 
                        (?)

** In state 1039, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1039, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1039, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 1033.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 DASH_GT_GT REPEAT LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              event_trigger 
              DASH_GT_GT delay_or_event_control hierarchical_identifier SEMICOLON 
                         REPEAT LPAREN expression RPAREN event_control 
                                       primary 
                                       (?)

** In state 1033, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1033, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1033, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (reduce/reduce) in state 1028.
** Tokens involved: XOR XNOR WOR WIRE WHILE WAND WAIT_ORDER WAIT VOID VIRTUAL VBAR UNSIGNED_NUMBER UNSIGNED UNIQUE UNION TYPEDEF TRIREG TRIOR TRIAND TRI1 TRI0 TRI TRANIF1 TRANIF0 TRAN TOKEN_TWO TOKEN_THREE TOKEN_SIX TOKEN_SEVEN TOKEN_QUOTE_Z2 TOKEN_QUOTE_Z1 TOKEN_QUOTE_X2 TOKEN_QUOTE_X1 TOKEN_QUOTE_TRUE TOKEN_QUOTE_FALSE TOKEN_PLUS_PLUS TOKEN_ONE TOKEN_NINE TOKEN_FOUR TOKEN_FIVE TOKEN_EIGHT TOKEN_DASH_DASH TIME TILDE_VBAR TILDE THIS TASK SYSTEM_TASK_IDENTIFIER SYSTEM_FUNCTION_IDENTIFIER SVINT SUPPLY1 SUPPLY0 SUPER STRUCT STRING STATIC SPECPARAM SPECIFY SIMPLE_IDENTIFIER SIGNED SHORTREAL SHORTINT SEQUENCE SEMICOLON RTRANIF1 RTRANIF0 RTRAN RPMOS RNMOS RETURN REPEAT RELEASE REG REF REALTIME REAL RCMOS P_XNOR P_POUNDPOUND P_NXOR P_NAND P_MINUSGT PULLUP PULLDOWN PROPERTY PROGRAM PRIORITY PRIMITIVE PMOS PLUS PLING PARAMETER OUTPUT OR OCTAL_BASE NULL NOTIF1 NOTIF0 NOT NOR NMOS NAND MODULE MODPORT MINUS MACROMODULE LPAREN LONGINT LOGIC LOCALPARAM LCURLY JOIN_NONE JOIN_ANY JOIN INTERFACE INTEGER INPUT INOUT INITIAL IMPORT IF HEX_BASE HASH GENVAR GENERATE FUNCTION FORK FOREVER FORCE FOR FINAL EXTERN EXPORT EVENT ENUM ENDTASK ENDPROGRAM ENDMODULE ENDINTERFACE ENDGENERATE ENDFUNCTION ENDCASE END ELSE DOUBLE_QUOTES DO DISABLE DEFPARAM DEFAULT DECIMAL_BASE DEASSIGN DASH_GT_GT COVER CONTINUE CONSTRAINT CONST CMOS CLOCKING CLASS CHANDLE CASEZ CASEX CASE CARET BYTE BUFIF1 BUFIF0 BUF BREAK BIT BIND BINARY_BASE BEGIN BACKSLASH AUTOMATIC AT_STAR AT ASSIGN ASSERT AND AMPERSAND ALWAYS_LATCH ALWAYS_FF ALWAYS_COMB ALWAYS ALIAS #
** The following explanations concentrate on token WOR.
** This state is reached from start after reading:

source_text_3 DISABLE hierarchical_identifier SEMICOLON

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description // lookahead token appears because description can begin with WOR
source_text_3 description // lookahead token is inherited
              statement_or_null // lookahead token is inherited
              statement_item // lookahead token is inherited
              disable_statement // lookahead token is inherited
              (?)

** In state 1028, looking ahead at WOR, reducing production
** disable_statement -> DISABLE hierarchical_identifier SEMICOLON
** is permitted because of the following sub-derivation:

DISABLE hierarchical_identifier SEMICOLON . 

** In state 1028, looking ahead at WOR, reducing production
** disable_statement -> DISABLE hierarchical_identifier SEMICOLON
** is permitted because of the following sub-derivation:

DISABLE hierarchical_identifier SEMICOLON . 

** Conflict (shift/reduce/reduce) in state 1018.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 FOR LPAREN variable_decl_or_assignment SEMICOLON

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              loop_statement 
              FOR LPAREN variable_decl_or_assignment SEMICOLON expression SEMICOLON variable_assignment RPAREN statement_or_null 
                                                               primary 
                                                               (?)

** In state 1018, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1018, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1018, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce) in state 1017.
** Token involved: SEMICOLON
** This state is reached from start after reading:

source_text_3 FOR LPAREN variable_decl_or_assignment

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              loop_statement 
              (?)

** In state 1017, looking ahead at SEMICOLON, shifting is permitted
** because of the following sub-derivation:

FOR LPAREN variable_decl_or_assignment . SEMICOLON expression SEMICOLON variable_assignment RPAREN statement_or_null 

** In state 1017, looking ahead at SEMICOLON, reducing production
** loop_statement_30 ->
** is permitted because of the following sub-derivation:

FOR LPAREN variable_decl_or_assignment loop_statement_30 SEMICOLON expression SEMICOLON variable_assignment loop_statement_35 RPAREN statement_or_null // lookahead token appears
                                       . 

** Conflict (shift/reduce/reduce) in state 1012.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 FORCE net_lvalue EQUALS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              procedural_continuous_assignments SEMICOLON 
              FORCE net_lvalue EQUALS expression 
                                      primary 
                                      (?)

** In state 1012, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1012, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1012, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 1008.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 FORCE variable_lvalue assignment_operator

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              procedural_continuous_assignments SEMICOLON 
              FORCE variable_assignment 
                    variable_lvalue assignment_operator expression 
                                                        primary 
                                                        (?)

** In state 1008, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 1008, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 1008, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce) in state 974.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 LOCALPARAM local_parameter_declaration_4 LBRACK constant_expression COLON constant_expression RBRACK

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              local_parameter_declaration 
              (?)

** In state 974, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

LOCALPARAM local_parameter_declaration_4 LBRACK constant_expression COLON constant_expression RBRACK identifier EQUALS constant_expression list_of_param_assignments_3 SEMICOLON 
                                                                                                     . SIMPLE_IDENTIFIER 

** In state 974, looking ahead at SIMPLE_IDENTIFIER, reducing production
** packed_dimension -> LBRACK constant_expression COLON constant_expression RBRACK
** is permitted because of the following sub-derivation:

LOCALPARAM local_parameter_declaration_4 identifier EQUALS constant_expression list_of_param_assignments_3 SEMICOLON // lookahead token appears because identifier can begin with SIMPLE_IDENTIFIER
           local_parameter_declaration_4 packed_dimension // lookahead token is inherited
                                         LBRACK constant_expression COLON constant_expression RBRACK . 

** Conflict (shift/reduce) in state 957.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 LOCALPARAM signing local_parameter_declaration_4 LBRACK constant_expression COLON constant_expression RBRACK

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              local_parameter_declaration 
              (?)

** In state 957, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

LOCALPARAM signing local_parameter_declaration_4 LBRACK constant_expression COLON constant_expression RBRACK identifier EQUALS constant_expression list_of_param_assignments_3 SEMICOLON 
                                                                                                             . SIMPLE_IDENTIFIER 

** In state 957, looking ahead at SIMPLE_IDENTIFIER, reducing production
** packed_dimension -> LBRACK constant_expression COLON constant_expression RBRACK
** is permitted because of the following sub-derivation:

LOCALPARAM signing local_parameter_declaration_4 identifier EQUALS constant_expression list_of_param_assignments_3 SEMICOLON // lookahead token appears because identifier can begin with SIMPLE_IDENTIFIER
                   local_parameter_declaration_4 packed_dimension // lookahead token is inherited
                                                 LBRACK constant_expression COLON constant_expression RBRACK . 

** Conflict (shift/reduce) in state 950.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 LOCALPARAM

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              local_parameter_declaration 
              (?)

** In state 950, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

LOCALPARAM data_type identifier EQUALS constant_expression list_of_param_assignments_3 SEMICOLON 
           identifier type_declaration_identifier_3 data_type_11 
           . SIMPLE_IDENTIFIER 

** In state 950, looking ahead at SIMPLE_IDENTIFIER, reducing production
** local_parameter_declaration_4 ->
** is permitted because of the following sub-derivation:

LOCALPARAM local_parameter_declaration_4 identifier EQUALS constant_expression list_of_param_assignments_3 SEMICOLON // lookahead token appears because identifier can begin with SIMPLE_IDENTIFIER
           . 

** Conflict (shift/reduce) in state 949.
** Token involved: COMMA
** This state is reached from start after reading:

source_text_3 PROGRAM identifier HASH LPAREN PARAMETER data_type identifier EQUALS constant_expression list_of_param_assignments_3

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              program_declaration 
              (?)

** In state 949, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

PROGRAM identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN LPAREN port list_of_ports_4 RPAREN SEMICOLON program_declaration_4 ENDPROGRAM 
                               PARAMETER data_type identifier EQUALS constant_expression list_of_param_assignments_3 
                                                                                         list_of_param_assignments_3 . COMMA identifier EQUALS constant_expression 

** In state 949, looking ahead at COMMA, reducing production
** parameter_declaration -> PARAMETER data_type identifier EQUALS constant_expression list_of_param_assignments_3
** is permitted because of the following sub-derivation:

PROGRAM identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN LPAREN port list_of_ports_4 RPAREN SEMICOLON program_declaration_4 ENDPROGRAM // lookahead token appears because parameter_port_list_5 can begin with COMMA
                               PARAMETER data_type identifier EQUALS constant_expression list_of_param_assignments_3 . 

** Conflict (shift/reduce) in state 944.
** Token involved: COMMA
** This state is reached from start after reading:

source_text_3 PROGRAM identifier HASH LPAREN PARAMETER parameter_declaration_4 identifier EQUALS constant_expression list_of_param_assignments_3

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              program_declaration 
              (?)

** In state 944, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

PROGRAM identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN LPAREN port list_of_ports_4 RPAREN SEMICOLON program_declaration_4 ENDPROGRAM 
                               PARAMETER parameter_declaration_4 identifier EQUALS constant_expression list_of_param_assignments_3 
                                                                                                       list_of_param_assignments_3 . COMMA identifier EQUALS constant_expression 

** In state 944, looking ahead at COMMA, reducing production
** parameter_declaration -> PARAMETER parameter_declaration_4 identifier EQUALS constant_expression list_of_param_assignments_3
** is permitted because of the following sub-derivation:

PROGRAM identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN LPAREN port list_of_ports_4 RPAREN SEMICOLON program_declaration_4 ENDPROGRAM // lookahead token appears because parameter_port_list_5 can begin with COMMA
                               PARAMETER parameter_declaration_4 identifier EQUALS constant_expression list_of_param_assignments_3 . 

** Conflict (shift/reduce) in state 940.
** Token involved: COMMA
** This state is reached from start after reading:

source_text_3 PROGRAM identifier HASH LPAREN PARAMETER parameter_declaration_4 LBRACK constant_expression COLON constant_expression RBRACK identifier EQUALS constant_expression list_of_param_assignments_3

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              program_declaration 
              (?)

** In state 940, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

PROGRAM identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN LPAREN port list_of_ports_4 RPAREN SEMICOLON program_declaration_4 ENDPROGRAM 
                               PARAMETER parameter_declaration_4 LBRACK constant_expression COLON constant_expression RBRACK identifier EQUALS constant_expression list_of_param_assignments_3 
                                                                                                                                                                   list_of_param_assignments_3 . COMMA identifier EQUALS constant_expression 

** In state 940, looking ahead at COMMA, reducing production
** parameter_declaration -> PARAMETER parameter_declaration_4 LBRACK constant_expression COLON constant_expression RBRACK identifier EQUALS constant_expression list_of_param_assignments_3
** is permitted because of the following sub-derivation:

PROGRAM identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN LPAREN port list_of_ports_4 RPAREN SEMICOLON program_declaration_4 ENDPROGRAM // lookahead token appears because parameter_port_list_5 can begin with COMMA
                               PARAMETER parameter_declaration_4 LBRACK constant_expression COLON constant_expression RBRACK identifier EQUALS constant_expression list_of_param_assignments_3 . 

** Conflict (shift/reduce) in state 936.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 FORK par_block_4 PARAMETER parameter_declaration_4 LBRACK constant_expression COLON constant_expression RBRACK

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              FORK par_block_4 par_block_5 join_keyword 
                   par_block_4 block_item_declaration 
                               parameter_declaration SEMICOLON 
                               (?)

** In state 936, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

PARAMETER parameter_declaration_4 LBRACK constant_expression COLON constant_expression RBRACK identifier EQUALS constant_expression list_of_param_assignments_3 
                                                                                              . SIMPLE_IDENTIFIER 

** In state 936, looking ahead at SIMPLE_IDENTIFIER, reducing production
** packed_dimension -> LBRACK constant_expression COLON constant_expression RBRACK
** is permitted because of the following sub-derivation:

PARAMETER parameter_declaration_4 identifier EQUALS constant_expression list_of_param_assignments_3 // lookahead token appears because identifier can begin with SIMPLE_IDENTIFIER
          parameter_declaration_4 packed_dimension // lookahead token is inherited
                                  LBRACK constant_expression COLON constant_expression RBRACK . 

** Conflict (shift/reduce) in state 930.
** Token involved: COMMA
** This state is reached from start after reading:

source_text_3 PROGRAM identifier HASH LPAREN PARAMETER signing parameter_declaration_4 identifier EQUALS constant_expression list_of_param_assignments_3

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              program_declaration 
              (?)

** In state 930, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

PROGRAM identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN LPAREN port list_of_ports_4 RPAREN SEMICOLON program_declaration_4 ENDPROGRAM 
                               PARAMETER signing parameter_declaration_4 identifier EQUALS constant_expression list_of_param_assignments_3 
                                                                                                               list_of_param_assignments_3 . COMMA identifier EQUALS constant_expression 

** In state 930, looking ahead at COMMA, reducing production
** parameter_declaration -> PARAMETER signing parameter_declaration_4 identifier EQUALS constant_expression list_of_param_assignments_3
** is permitted because of the following sub-derivation:

PROGRAM identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN LPAREN port list_of_ports_4 RPAREN SEMICOLON program_declaration_4 ENDPROGRAM // lookahead token appears because parameter_port_list_5 can begin with COMMA
                               PARAMETER signing parameter_declaration_4 identifier EQUALS constant_expression list_of_param_assignments_3 . 

** Conflict (shift/reduce) in state 921.
** Token involved: COMMA
** This state is reached from start after reading:

source_text_3 PROGRAM identifier HASH LPAREN PARAMETER signing parameter_declaration_4 LBRACK constant_expression COLON constant_expression RBRACK identifier EQUALS constant_expression list_of_param_assignments_3

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              program_declaration 
              (?)

** In state 921, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

PROGRAM identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN LPAREN port list_of_ports_4 RPAREN SEMICOLON program_declaration_4 ENDPROGRAM 
                               PARAMETER signing parameter_declaration_4 LBRACK constant_expression COLON constant_expression RBRACK identifier EQUALS constant_expression list_of_param_assignments_3 
                                                                                                                                                                           list_of_param_assignments_3 . COMMA identifier EQUALS constant_expression 

** In state 921, looking ahead at COMMA, reducing production
** parameter_declaration -> PARAMETER signing parameter_declaration_4 LBRACK constant_expression COLON constant_expression RBRACK identifier EQUALS constant_expression list_of_param_assignments_3
** is permitted because of the following sub-derivation:

PROGRAM identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN LPAREN port list_of_ports_4 RPAREN SEMICOLON program_declaration_4 ENDPROGRAM // lookahead token appears because parameter_port_list_5 can begin with COMMA
                               PARAMETER signing parameter_declaration_4 LBRACK constant_expression COLON constant_expression RBRACK identifier EQUALS constant_expression list_of_param_assignments_3 . 

** Conflict (shift/reduce) in state 917.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 FORK par_block_4 PARAMETER signing parameter_declaration_4 LBRACK constant_expression COLON constant_expression RBRACK

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              FORK par_block_4 par_block_5 join_keyword 
                   par_block_4 block_item_declaration 
                               parameter_declaration SEMICOLON 
                               (?)

** In state 917, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

PARAMETER signing parameter_declaration_4 LBRACK constant_expression COLON constant_expression RBRACK identifier EQUALS constant_expression list_of_param_assignments_3 
                                                                                                      . SIMPLE_IDENTIFIER 

** In state 917, looking ahead at SIMPLE_IDENTIFIER, reducing production
** packed_dimension -> LBRACK constant_expression COLON constant_expression RBRACK
** is permitted because of the following sub-derivation:

PARAMETER signing parameter_declaration_4 identifier EQUALS constant_expression list_of_param_assignments_3 // lookahead token appears because identifier can begin with SIMPLE_IDENTIFIER
                  parameter_declaration_4 packed_dimension // lookahead token is inherited
                                          LBRACK constant_expression COLON constant_expression RBRACK . 

** Conflict (shift/reduce) in state 906.
** Token involved: COMMA
** This state is reached from start after reading:

source_text_3 PROGRAM identifier HASH LPAREN PARAMETER TYPE identifier EQUALS data_type list_of_type_assignments_3

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              program_declaration 
              (?)

** In state 906, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

PROGRAM identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN LPAREN port list_of_ports_4 RPAREN SEMICOLON program_declaration_4 ENDPROGRAM 
                               PARAMETER TYPE identifier EQUALS data_type list_of_type_assignments_3 
                                                                          list_of_type_assignments_3 . COMMA identifier EQUALS data_type 

** In state 906, looking ahead at COMMA, reducing production
** parameter_declaration -> PARAMETER TYPE identifier EQUALS data_type list_of_type_assignments_3
** is permitted because of the following sub-derivation:

PROGRAM identifier HASH LPAREN parameter_declaration parameter_port_list_5 RPAREN LPAREN port list_of_ports_4 RPAREN SEMICOLON program_declaration_4 ENDPROGRAM // lookahead token appears because parameter_port_list_5 can begin with COMMA
                               PARAMETER TYPE identifier EQUALS data_type list_of_type_assignments_3 . 

** Conflict (shift/reduce) in state 901.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 FORK par_block_4 PARAMETER

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              FORK par_block_4 par_block_5 join_keyword 
                   par_block_4 block_item_declaration 
                               parameter_declaration SEMICOLON 
                               (?)

** In state 901, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

PARAMETER data_type identifier EQUALS constant_expression list_of_param_assignments_3 
          identifier type_declaration_identifier_3 data_type_11 
          . SIMPLE_IDENTIFIER 

** In state 901, looking ahead at SIMPLE_IDENTIFIER, reducing production
** parameter_declaration_4 ->
** is permitted because of the following sub-derivation:

PARAMETER parameter_declaration_4 identifier EQUALS constant_expression list_of_param_assignments_3 // lookahead token appears because identifier can begin with SIMPLE_IDENTIFIER
          . 

** Conflict (shift/reduce) in state 885.
** Token involved: LBRACK
** This state is reached from start after reading:

source_text_3 TYPEDEF identifier type_declaration_identifier_3

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              data_declaration 
              type_declaration 
              (?)

** In state 885, looking ahead at LBRACK, reducing production
** data_type_11 ->
** is permitted because of the following sub-derivation:

TYPEDEF data_type identifier type_declaration_identifier_3 SEMICOLON 
        identifier type_declaration_identifier_3 data_type_11 
                                                 data_type_11 packed_dimension // lookahead token appears because packed_dimension can begin with LBRACK
                                                 . 

** In state 885, looking ahead at LBRACK, shifting is permitted
** because of the following sub-derivation:

TYPEDEF identifier type_declaration_identifier_3 SEMICOLON 
                   type_declaration_identifier_3 unpacked_dimension 
                                                 . LBRACK constant_expression COLON constant_expression RBRACK 

** Conflict (shift/reduce/reduce) in state 879.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 TYPEDEF identifier HASH LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              data_declaration 
              type_declaration 
              TYPEDEF identifier HASH LPAREN list_of_parameter_assignments RPAREN identifier type_declaration_identifier_3 SEMICOLON 
                                             ordered_parameter_assignment list_of_parameter_assignments_3 
                                             expression 
                                             primary 
                                             (?)

** In state 879, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 879, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 879, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce) in state 876.
** Tokens involved: SIMPLE_IDENTIFIER SEMICOLON BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 TYPEDEF identifier

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              data_declaration 
              type_declaration 
              (?)

** In state 876, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

TYPEDEF identifier identifier type_declaration_identifier_3 SEMICOLON 
                   . SIMPLE_IDENTIFIER 

** In state 876, looking ahead at SIMPLE_IDENTIFIER, reducing production
** type_declaration_identifier_3 ->
** is permitted because of the following sub-derivation:

TYPEDEF data_type identifier type_declaration_identifier_3 SEMICOLON // lookahead token appears because identifier can begin with SIMPLE_IDENTIFIER
        identifier type_declaration_identifier_3 data_type_11 // lookahead token is inherited because data_type_11 can vanish
                   . 

** Conflict (reduce/reduce) in state 875.
** Token involved: LBRACK
** This state is reached from start after reading:

source_text_3 TYPEDEF BACKSLASH TOKEN_ANY_ASCII white_space

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              data_declaration 
              type_declaration 
              (?)

** In state 875, looking ahead at LBRACK, reducing production
** escaped_hierarchical_branch_3 ->
** is permitted because of the following sub-derivation:

TYPEDEF hierarchical_identifier DOT identifier identifier type_declaration_identifier_3 SEMICOLON 
        BACKSLASH TOKEN_ANY_ASCII white_space escaped_hierarchical_branch_3 escaped_hierarchical_identifier_3 
                                              escaped_hierarchical_branch_3 LBRACK UNSIGNED_NUMBER RBRACK // lookahead token appears
                                              . 

** In state 875, looking ahead at LBRACK, reducing production
** identifier -> BACKSLASH TOKEN_ANY_ASCII white_space
** is permitted because of the following sub-derivation:

TYPEDEF identifier type_declaration_identifier_3 SEMICOLON // lookahead token appears because type_declaration_identifier_3 can begin with LBRACK
        BACKSLASH TOKEN_ANY_ASCII white_space . 

** Conflict (reduce/reduce) in state 869.
** Token involved: LBRACK
** This state is reached from start after reading:

source_text_3 TYPEDEF SIMPLE_IDENTIFIER

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              data_declaration 
              type_declaration 
              (?)

** In state 869, looking ahead at LBRACK, reducing production
** identifier -> SIMPLE_IDENTIFIER
** is permitted because of the following sub-derivation:

TYPEDEF identifier type_declaration_identifier_3 SEMICOLON // lookahead token appears because type_declaration_identifier_3 can begin with LBRACK
        SIMPLE_IDENTIFIER . 

** In state 869, looking ahead at LBRACK, reducing production
** simple_hierarchical_branch_3 ->
** is permitted because of the following sub-derivation:

TYPEDEF hierarchical_identifier DOT identifier identifier type_declaration_identifier_3 SEMICOLON 
        SIMPLE_IDENTIFIER simple_hierarchical_branch_3 
                          simple_hierarchical_branch_3 LBRACK UNSIGNED_NUMBER RBRACK // lookahead token appears
                          . 

** Conflict (shift/reduce) in state 828.
** Token involved: LBRACK
** This state is reached from start after reading:

source_text_3 data_type identifier variable_dimension list_of_variable_identifiers_4 COMMA identifier

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              data_declaration 
              data_type list_of_variable_identifiers_or_assignments SEMICOLON 
                        identifier variable_dimension list_of_variable_identifiers_4 
                                                      list_of_variable_identifiers_4 COMMA identifier variable_dimension 
                                                                                                      (?)

** In state 828, looking ahead at LBRACK, shifting is permitted
** because of the following sub-derivation:

associative_dimension 
. LBRACK data_type RBRACK 

** In state 828, looking ahead at LBRACK, reducing production
** variable_dimension_2 ->
** is permitted because of the following sub-derivation:

variable_dimension_2 
variable_dimension_2 unpacked_dimension // lookahead token appears because unpacked_dimension can begin with LBRACK
. 

** Conflict (shift/reduce) in state 826.
** Token involved: COMMA
** This state is reached from start after reading:

source_text_3 FOR LPAREN data_type identifier variable_dimension list_of_variable_identifiers_4

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              loop_statement 
              (?)

** In state 826, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

FOR LPAREN variable_decl_or_assignment SEMICOLON expression SEMICOLON variable_assignment RPAREN statement_or_null 
           data_type list_of_variable_identifiers_or_assignments 
                     identifier variable_dimension list_of_variable_identifiers_4 
                                                   list_of_variable_identifiers_4 . COMMA identifier variable_dimension 

** In state 826, looking ahead at COMMA, reducing production
** list_of_variable_identifiers_or_assignments -> identifier variable_dimension list_of_variable_identifiers_4
** is permitted because of the following sub-derivation:

FOR LPAREN variable_decl_or_assignment loop_statement_30 SEMICOLON expression SEMICOLON variable_assignment loop_statement_35 RPAREN statement_or_null // lookahead token appears because loop_statement_30 can begin with COMMA
           data_type list_of_variable_identifiers_or_assignments // lookahead token is inherited
                     identifier variable_dimension list_of_variable_identifiers_4 . 

** Conflict (reduce/reduce) in state 825.
** Tokens involved: SEMICOLON COMMA
** The following explanations concentrate on token SEMICOLON.
** This state is reached from start after reading:

source_text_3 data_type identifier variable_dimension

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              data_declaration 
              data_type list_of_variable_identifiers_or_assignments SEMICOLON // lookahead token appears
                        (?)

** In state 825, looking ahead at SEMICOLON, reducing production
** list_of_variable_identifiers_4 ->
** is permitted because of the following sub-derivation:

identifier variable_dimension list_of_variable_identifiers_4 // lookahead token is inherited
                              . 

** In state 825, looking ahead at SEMICOLON, reducing production
** variable_decl_assignment -> identifier variable_dimension
** is permitted because of the following sub-derivation:

variable_decl_assignment list_of_variable_decl_assignments_3 // lookahead token is inherited because list_of_variable_decl_assignments_3 can vanish
identifier variable_dimension . 

** Conflict (shift/reduce) in state 824.
** Tokens involved: SEMICOLON LBRACK EQUALS COMMA
** The following explanations concentrate on token LBRACK.
** This state is reached from start after reading:

source_text_3 data_type identifier

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              data_declaration 
              data_type list_of_variable_identifiers_or_assignments SEMICOLON 
                        identifier variable_dimension list_of_variable_identifiers_4 
                                   (?)

** In state 824, looking ahead at LBRACK, shifting is permitted
** because of the following sub-derivation:

associative_dimension 
. LBRACK data_type RBRACK 

** In state 824, looking ahead at LBRACK, reducing production
** variable_dimension_2 ->
** is permitted because of the following sub-derivation:

variable_dimension_2 
variable_dimension_2 unpacked_dimension // lookahead token appears because unpacked_dimension can begin with LBRACK
. 

** Conflict (shift/reduce/reduce) in state 812.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 data_type identifier EQUALS NEW LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              data_declaration 
              data_type list_of_variable_identifiers_or_assignments SEMICOLON 
                        variable_decl_assignment list_of_variable_decl_assignments_3 
                        identifier EQUALS NEW LPAREN list_of_arguments RPAREN 
                                                     expression list_of_arguments_3 
                                                     primary 
                                                     (?)

** In state 812, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 812, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 812, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 807.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 data_type identifier HASH LPAREN list_of_parameter_assignments RPAREN EQUALS NEW LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              data_declaration 
              data_type list_of_variable_identifiers_or_assignments SEMICOLON 
                        variable_decl_assignment list_of_variable_decl_assignments_3 
                        identifier HASH LPAREN list_of_parameter_assignments RPAREN EQUALS NEW LPAREN list_of_arguments RPAREN 
                                                                                                      expression list_of_arguments_3 
                                                                                                      primary 
                                                                                                      (?)

** In state 807, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 807, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 807, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 795.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 identifier HASH LPAREN ordered_parameter_assignment list_of_parameter_assignments_3 COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              identifier HASH LPAREN list_of_parameter_assignments RPAREN identifier name_of_instance_3 LPAREN RPAREN module_instantiation_5 SEMICOLON 
                                     ordered_parameter_assignment list_of_parameter_assignments_3 
                                                                  list_of_parameter_assignments_3 COMMA ordered_parameter_assignment 
                                                                                                        expression 
                                                                                                        primary 
                                                                                                        (?)

** In state 795, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 795, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 795, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (reduce/reduce) in state 788.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 identifier HASH LPAREN identifier P_COLONCOLON

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              identifier HASH LPAREN list_of_parameter_assignments RPAREN identifier name_of_instance_3 LPAREN RPAREN module_instantiation_5 SEMICOLON 
                                     ordered_parameter_assignment list_of_parameter_assignments_3 
                                     (?)

** In state 788, looking ahead at SIMPLE_IDENTIFIER, reducing production
** class_scope_type_identifier_4 ->
** is permitted because of the following sub-derivation:

data_type 
class_scope_type_identifier 
identifier P_COLONCOLON class_scope_type_identifier_4 identifier type_declaration_identifier_3 // lookahead token appears because identifier can begin with SIMPLE_IDENTIFIER
                        . 

** In state 788, looking ahead at SIMPLE_IDENTIFIER, reducing production
** class_scope_type_identifier_9 ->
** is permitted because of the following sub-derivation:

data_type 
class_scope_type_identifier 
identifier P_COLONCOLON class_scope_type_identifier_9 identifier // lookahead token appears because identifier can begin with SIMPLE_IDENTIFIER
                        . 

** In state 788, looking ahead at SIMPLE_IDENTIFIER, reducing production
** primary_22 ->
** is permitted because of the following sub-derivation:

expression 
primary 
identifier P_COLONCOLON primary_22 identifier // lookahead token appears because identifier can begin with SIMPLE_IDENTIFIER
                        . 

** Conflict (reduce/reduce) in state 787.
** Tokens involved: RPAREN COMMA
** The following explanations concentrate on token RPAREN.
** This state is reached from start after reading:

source_text_3 identifier HASH LPAREN identifier

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              identifier HASH LPAREN list_of_parameter_assignments RPAREN identifier name_of_instance_3 LPAREN RPAREN module_instantiation_5 SEMICOLON // lookahead token appears
                                     ordered_parameter_assignment list_of_parameter_assignments_3 // lookahead token is inherited because list_of_parameter_assignments_3 can vanish
                                     (?)

** In state 787, looking ahead at RPAREN, reducing production
** primary -> identifier
** is permitted because of the following sub-derivation:

expression // lookahead token is inherited
primary // lookahead token is inherited
identifier . 

** In state 787, looking ahead at RPAREN, reducing production
** type_declaration_identifier_3 ->
** is permitted because of the following sub-derivation:

data_type // lookahead token is inherited
identifier type_declaration_identifier_3 data_type_11 // lookahead token is inherited because data_type_11 can vanish
           . 

** Conflict (shift/reduce/reduce) in state 782.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 identifier HASH LPAREN DOT identifier LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              identifier HASH LPAREN list_of_parameter_assignments RPAREN identifier name_of_instance_3 LPAREN RPAREN module_instantiation_5 SEMICOLON 
                                     named_parameter_assignment list_of_parameter_assignments_6 
                                     DOT identifier LPAREN expression RPAREN 
                                                           primary 
                                                           (?)

** In state 782, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 782, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 782, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 779.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 data_type identifier HASH LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              data_declaration 
              data_type list_of_variable_identifiers_or_assignments SEMICOLON 
                        variable_decl_assignment list_of_variable_decl_assignments_3 
                        identifier HASH LPAREN list_of_parameter_assignments RPAREN EQUALS NEW 
                                               ordered_parameter_assignment list_of_parameter_assignments_3 
                                               expression 
                                               primary 
                                               (?)

** In state 779, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 779, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 779, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce) in state 766.
** Token involved: EQUALS
** This state is reached from start after reading:

source_text_3 data_type identifier LBRACK RBRACK

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              data_declaration 
              data_type list_of_variable_identifiers_or_assignments SEMICOLON 
                        variable_decl_assignment list_of_variable_decl_assignments_3 
                        (?)

** In state 766, looking ahead at EQUALS, shifting is permitted
** because of the following sub-derivation:

identifier LBRACK RBRACK . EQUALS NEW LBRACK constant_expression RBRACK 

** In state 766, looking ahead at EQUALS, reducing production
** variable_dimension -> LBRACK RBRACK
** is permitted because of the following sub-derivation:

identifier variable_dimension EQUALS constant_expression // lookahead token appears
           LBRACK RBRACK . 

** Conflict (shift/reduce) in state 762.
** Tokens involved: SEMICOLON LBRACK EQUALS COMMA
** The following explanations concentrate on token LBRACK.
** This state is reached from start after reading:

source_text_3 data_type variable_decl_assignment list_of_variable_decl_assignments_3 COMMA identifier

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              data_declaration 
              data_type list_of_variable_identifiers_or_assignments SEMICOLON 
                        variable_decl_assignment list_of_variable_decl_assignments_3 
                                                 list_of_variable_decl_assignments_3 COMMA variable_decl_assignment 
                                                                                           identifier variable_dimension 
                                                                                                      (?)

** In state 762, looking ahead at LBRACK, shifting is permitted
** because of the following sub-derivation:

associative_dimension 
. LBRACK data_type RBRACK 

** In state 762, looking ahead at LBRACK, reducing production
** variable_dimension_2 ->
** is permitted because of the following sub-derivation:

variable_dimension_2 
variable_dimension_2 unpacked_dimension // lookahead token appears because unpacked_dimension can begin with LBRACK
. 

** Conflict (shift/reduce) in state 759.
** Token involved: COMMA
** This state is reached from start after reading:

source_text_3 FOR LPAREN data_type variable_decl_assignment list_of_variable_decl_assignments_3

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              loop_statement 
              (?)

** In state 759, looking ahead at COMMA, shifting is permitted
** because of the following sub-derivation:

FOR LPAREN variable_decl_or_assignment SEMICOLON expression SEMICOLON variable_assignment RPAREN statement_or_null 
           data_type list_of_variable_identifiers_or_assignments 
                     variable_decl_assignment list_of_variable_decl_assignments_3 
                                              list_of_variable_decl_assignments_3 . COMMA variable_decl_assignment 

** In state 759, looking ahead at COMMA, reducing production
** list_of_variable_identifiers_or_assignments -> variable_decl_assignment list_of_variable_decl_assignments_3
** is permitted because of the following sub-derivation:

FOR LPAREN variable_decl_or_assignment loop_statement_30 SEMICOLON expression SEMICOLON variable_assignment loop_statement_35 RPAREN statement_or_null // lookahead token appears because loop_statement_30 can begin with COMMA
           data_type list_of_variable_identifiers_or_assignments // lookahead token is inherited
                     variable_decl_assignment list_of_variable_decl_assignments_3 . 

** Conflict (shift/reduce) in state 754.
** Token involved: LBRACK
** This state is reached from start after reading:

source_text_3 identifier type_declaration_identifier_3

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              data_declaration 
              data_type list_of_variable_identifiers_or_assignments SEMICOLON 
              (?)

** In state 754, looking ahead at LBRACK, reducing production
** data_type_11 ->
** is permitted because of the following sub-derivation:

identifier type_declaration_identifier_3 data_type_11 
                                         data_type_11 packed_dimension // lookahead token appears because packed_dimension can begin with LBRACK
                                         . 

** In state 754, looking ahead at LBRACK, shifting is permitted
** because of the following sub-derivation:

identifier type_declaration_identifier_3 data_type_11 
           type_declaration_identifier_3 unpacked_dimension 
                                         . LBRACK constant_expression COLON constant_expression RBRACK 

** Conflict (reduce/reduce) in state 739.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 identifier P_COLONCOLON

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              data_declaration 
              data_type list_of_variable_identifiers_or_assignments SEMICOLON 
              class_scope_type_identifier 
              (?)

** In state 739, looking ahead at SIMPLE_IDENTIFIER, reducing production
** class_scope_type_identifier_4 ->
** is permitted because of the following sub-derivation:

identifier P_COLONCOLON class_scope_type_identifier_4 identifier type_declaration_identifier_3 // lookahead token appears because identifier can begin with SIMPLE_IDENTIFIER
                        . 

** In state 739, looking ahead at SIMPLE_IDENTIFIER, reducing production
** class_scope_type_identifier_9 ->
** is permitted because of the following sub-derivation:

identifier P_COLONCOLON class_scope_type_identifier_9 identifier // lookahead token appears because identifier can begin with SIMPLE_IDENTIFIER
                        . 

** Conflict (reduce/reduce) in state 735.
** Tokens involved: SIMPLE_IDENTIFIER SEMICOLON RPAREN RBRACK COMMA BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 integer_vector_type data_type_4 LBRACK constant_expression COLON constant_expression RBRACK

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              data_declaration 
              data_type list_of_variable_identifiers_or_assignments SEMICOLON // lookahead token appears because list_of_variable_identifiers_or_assignments can begin with SIMPLE_IDENTIFIER
              (?)

** In state 735, looking ahead at SIMPLE_IDENTIFIER, reducing production
** data_type -> integer_vector_type data_type_4 LBRACK constant_expression COLON constant_expression RBRACK
** is permitted because of the following sub-derivation:

integer_vector_type data_type_4 LBRACK constant_expression COLON constant_expression RBRACK . 

** In state 735, looking ahead at SIMPLE_IDENTIFIER, reducing production
** packed_dimension -> LBRACK constant_expression COLON constant_expression RBRACK
** is permitted because of the following sub-derivation:

integer_vector_type data_type_4 // lookahead token is inherited
                    data_type_4 packed_dimension // lookahead token is inherited
                                LBRACK constant_expression COLON constant_expression RBRACK . 

** Conflict (reduce/reduce) in state 728.
** Tokens involved: SIMPLE_IDENTIFIER SEMICOLON RPAREN RBRACK COMMA BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 integer_vector_type signing data_type_4 LBRACK constant_expression COLON constant_expression RBRACK

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              data_declaration 
              data_type list_of_variable_identifiers_or_assignments SEMICOLON // lookahead token appears because list_of_variable_identifiers_or_assignments can begin with SIMPLE_IDENTIFIER
              (?)

** In state 728, looking ahead at SIMPLE_IDENTIFIER, reducing production
** data_type -> integer_vector_type signing data_type_4 LBRACK constant_expression COLON constant_expression RBRACK
** is permitted because of the following sub-derivation:

integer_vector_type signing data_type_4 LBRACK constant_expression COLON constant_expression RBRACK . 

** In state 728, looking ahead at SIMPLE_IDENTIFIER, reducing production
** packed_dimension -> LBRACK constant_expression COLON constant_expression RBRACK
** is permitted because of the following sub-derivation:

integer_vector_type signing data_type_4 // lookahead token is inherited
                            data_type_4 packed_dimension // lookahead token is inherited
                                        LBRACK constant_expression COLON constant_expression RBRACK . 

** Conflict (shift/reduce) in state 665.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 FORK COLON identifier par_block_4

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              (?)

** In state 665, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

FORK COLON identifier par_block_4 par_block_5 join_keyword 
                      par_block_4 block_item_declaration 
                                  block_data_declaration 
                                  block_variable_declaration 
                                  data_type identifier variable_dimension list_of_variable_identifiers_4 SEMICOLON 
                                  identifier type_declaration_identifier_3 data_type_11 
                                  . SIMPLE_IDENTIFIER 

** In state 665, looking ahead at SIMPLE_IDENTIFIER, reducing production
** par_block_5 ->
** is permitted because of the following sub-derivation:

FORK COLON identifier par_block_4 par_block_5 join_keyword 
                                  par_block_5 statement_or_null // lookahead token appears because statement_or_null can begin with SIMPLE_IDENTIFIER
                                  . 

** Conflict (shift/reduce/reduce) in state 656.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 HASH LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              procedural_timing_control statement_or_null 
              delay_control 
              HASH LPAREN mintypmax_expression RPAREN 
                          expression 
                          primary 
                          (?)

** In state 656, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 656, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 656, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 649.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 IF LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              conditional_statement 
              IF LPAREN expression RPAREN statement_or_null 
                        primary 
                        (?)

** In state 649, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 649, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 649, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce) in state 643.
** Tokens involved: VBAR P_XNOR P_NXOR PLUS MINUS CARET AMPERSAND
** The following explanations concentrate on token VBAR.
** This state is reached from start after reading:

source_text_3 CASEZ LPAREN expression RPAREN DEFAULT P_POUNDPOUND expression clockvar_expression P_LTE expression

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              case_statement 
              (?)

** In state 643, looking ahead at VBAR, shifting is permitted
** because of the following sub-derivation:

CASEZ LPAREN expression RPAREN case_item case_statement_17 ENDCASE 
                               DEFAULT statement_or_null 
                                       statement_item 
                                       clocking_drive 
                                       P_POUNDPOUND expression clockvar_expression P_LTE expression 
                                                                                         expression binary_operator expression 
                                                                                                    . VBAR 

** In state 643, looking ahead at VBAR, reducing production
** clocking_drive -> P_POUNDPOUND expression clockvar_expression P_LTE expression
** is permitted because of the following sub-derivation:

CASEZ LPAREN expression RPAREN case_item case_statement_17 ENDCASE // lookahead token appears because case_statement_17 can begin with VBAR
                               DEFAULT statement_or_null // lookahead token is inherited
                                       statement_item // lookahead token is inherited
                                       clocking_drive // lookahead token is inherited
                                       P_POUNDPOUND expression clockvar_expression P_LTE expression . 

** Conflict (shift/reduce/reduce) in state 642.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 P_POUNDPOUND expression clockvar_expression P_LTE

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              clocking_drive 
              P_POUNDPOUND expression clockvar_expression P_LTE expression 
                                                                primary 
                                                                (?)

** In state 642, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 642, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 642, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce) in state 639.
** Token involved: RBRACK
** This state is reached from start after reading:

source_text_3 identifier DOT identifier LBRACK constant_expression COLON constant_expression

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              clocking_drive 
              clockvar_expression P_LTE expression 
              (?)

** In state 639, looking ahead at RBRACK, shifting is permitted
** because of the following sub-derivation:

identifier DOT identifier LBRACK constant_expression COLON constant_expression . RBRACK 

** In state 639, looking ahead at RBRACK, reducing production
** range_expression -> constant_expression COLON constant_expression
** is permitted because of the following sub-derivation:

identifier DOT identifier LBRACK range_expression RBRACK // lookahead token appears
                                 constant_expression COLON constant_expression . 

** Conflict (shift/reduce/reduce) in state 633.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 identifier DOT identifier LBRACK

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              clocking_drive 
              clockvar_expression P_LTE expression 
              identifier DOT identifier LBRACK range_expression RBRACK 
                                               expression 
                                               primary 
                                               (?)

** In state 633, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 633, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 633, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 628.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 P_POUNDPOUND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              clocking_drive 
              P_POUNDPOUND expression clockvar_expression P_LTE expression 
                           primary 
                           (?)

** In state 628, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 628, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 628, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (reduce/reduce) in state 625.
** Tokens involved: SEMICOLON RCURLY LBRACK EQUALS COMMA
** The following explanations concentrate on token SEMICOLON.
** This state is reached from start after reading:

source_text_3 RELEASE hierarchical_identifier

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              procedural_continuous_assignments SEMICOLON // lookahead token appears
              (?)

** In state 625, looking ahead at SEMICOLON, reducing production
** net_lvalue_3 ->
** is permitted because of the following sub-derivation:

RELEASE net_lvalue // lookahead token is inherited
        hierarchical_identifier net_lvalue_3 // lookahead token is inherited
                                . 

** In state 625, looking ahead at SEMICOLON, reducing production
** variable_lvalue_3 ->
** is permitted because of the following sub-derivation:

RELEASE variable_lvalue // lookahead token is inherited
        hierarchical_identifier variable_lvalue_3 // lookahead token is inherited
                                . 

** Conflict (shift/reduce) in state 616.
** Token involved: RBRACK
** This state is reached from start after reading:

source_text_3 RELEASE hierarchical_identifier net_lvalue_3 LBRACK constant_expression

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              procedural_continuous_assignments SEMICOLON 
              RELEASE net_lvalue 
                      (?)

** In state 616, looking ahead at RBRACK, reducing production
** constant_range_expression -> constant_expression
** is permitted because of the following sub-derivation:

hierarchical_identifier net_lvalue_3 LBRACK constant_range_expression RBRACK // lookahead token appears
                                            constant_expression . 

** In state 616, looking ahead at RBRACK, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier net_lvalue_3 
                        net_lvalue_3 LBRACK constant_expression . RBRACK 

** Conflict (shift/reduce/reduce) in state 601.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 REPEAT LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              loop_statement 
              REPEAT LPAREN expression RPAREN statement_or_null 
                            primary 
                            (?)

** In state 601, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 601, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 601, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 596.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 RETURN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              jump_statement 
              RETURN expression SEMICOLON 
                     primary 
                     (?)

** In state 596, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 596, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 596, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 589.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 SYSTEM_TASK_IDENTIFIER LPAREN system_task_enable_3_5 COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              SYSTEM_TASK_IDENTIFIER LPAREN system_task_enable_3_5 RPAREN SEMICOLON 
                                            system_task_enable_3_5 COMMA expression 
                                                                         primary 
                                                                         (?)

** In state 589, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 589, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 589, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 585.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 SYSTEM_TASK_IDENTIFIER LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              SYSTEM_TASK_IDENTIFIER LPAREN expression system_task_enable_3_5 RPAREN SEMICOLON 
                                            primary 
                                            (?)

** In state 585, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 585, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 585, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 579.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 WAIT LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              wait_statement 
              WAIT LPAREN expression RPAREN statement_or_null 
                          primary 
                          (?)

** In state 579, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 579, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 579, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 567.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 RETURN SYSTEM_FUNCTION_IDENTIFIER LPAREN expression system_function_call_3_5 COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              jump_statement 
              RETURN expression SEMICOLON 
                     primary 
                     SYSTEM_FUNCTION_IDENTIFIER LPAREN expression system_function_call_3_5 RPAREN 
                                                                  system_function_call_3_5 COMMA expression 
                                                                                                 primary 
                                                                                                 (?)

** In state 567, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 567, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 567, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 561.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 RETURN LPAREN variable_lvalue assignment_operator

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              jump_statement 
              RETURN expression SEMICOLON 
                     LPAREN variable_lvalue assignment_operator expression RPAREN 
                                                                primary 
                                                                (?)

** In state 561, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 561, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 561, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce) in state 544.
** Token involved: RBRACK
** This state is reached from start after reading:

source_text_3 hierarchical_identifier variable_lvalue_3 LBRACK expression

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              variable_lvalue P_LTE expression SEMICOLON 
              (?)

** In state 544, looking ahead at RBRACK, reducing production
** range_expression -> expression
** is permitted because of the following sub-derivation:

hierarchical_identifier variable_lvalue_3 LBRACK range_expression RBRACK // lookahead token appears
                                                 expression . 

** In state 544, looking ahead at RBRACK, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier variable_lvalue_3 
                        variable_lvalue_3 LBRACK expression . RBRACK 

** Conflict (shift/reduce/reduce) in state 540.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 RETURN LCURLY unary_operator LCURLY

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              jump_statement 
              RETURN expression SEMICOLON 
                     primary 
                     concatenation 
                     LCURLY expression concatenation_4 RCURLY 
                            unary_operator primary 
                                           concatenation 
                                           LCURLY expression concatenation_4 RCURLY 
                                                  primary 
                                                  (?)

** In state 540, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 540, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 540, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 536.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 RETURN implicit_class_handle hierarchical_identifier primary_6 DOT identifier LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              jump_statement 
              RETURN expression SEMICOLON 
                     primary 
                     implicit_class_handle hierarchical_identifier primary_6 DOT identifier LPAREN expression primary_8_6_5 RPAREN 
                                                                                                   primary 
                                                                                                   (?)

** In state 536, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 536, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 536, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce) in state 535.
** Token involved: LPAREN
** This state is reached from start after reading:

source_text_3 clockvar_expression P_LTE P_POUNDPOUND implicit_class_handle hierarchical_identifier primary_6 DOT identifier

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              clocking_drive 
              (?)

** In state 535, looking ahead at LPAREN, reducing production
** primary -> implicit_class_handle hierarchical_identifier primary_6 DOT identifier
** is permitted because of the following sub-derivation:

clockvar_expression P_LTE P_POUNDPOUND expression expression // lookahead token appears because expression can begin with LPAREN
                                       primary // lookahead token is inherited
                                       implicit_class_handle hierarchical_identifier primary_6 DOT identifier . 

** In state 535, looking ahead at LPAREN, shifting is permitted
** because of the following sub-derivation:

clockvar_expression P_LTE P_POUNDPOUND expression expression 
                                       primary 
                                       implicit_class_handle hierarchical_identifier primary_6 DOT identifier . LPAREN expression primary_8_6_5 RPAREN 

** Conflict (shift/reduce) in state 525.
** Token involved: RBRACK
** This state is reached from start after reading:

source_text_3 RETURN implicit_class_handle hierarchical_identifier primary_6 LBRACK expression

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              jump_statement 
              RETURN expression SEMICOLON 
                     primary 
                     (?)

** In state 525, looking ahead at RBRACK, shifting is permitted
** because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 
                                              primary_6 LBRACK expression . RBRACK 

** In state 525, looking ahead at RBRACK, reducing production
** range_expression -> expression
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 LBRACK range_expression RBRACK // lookahead token appears
                                                               expression . 

** Conflict (shift/reduce/reduce) in state 523.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 RETURN implicit_class_handle hierarchical_identifier primary_6 DOT identifier LPAREN expression primary_8_6_5 COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              jump_statement 
              RETURN expression SEMICOLON 
                     primary 
                     implicit_class_handle hierarchical_identifier primary_6 DOT identifier LPAREN expression primary_8_6_5 RPAREN 
                                                                                                              primary_8_6_5 COMMA expression 
                                                                                                                                  primary 
                                                                                                                                  (?)

** In state 523, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 523, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 523, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce) in state 519.
** Token involved: LPAREN
** This state is reached from start after reading:

source_text_3 clockvar_expression P_LTE P_POUNDPOUND unary_operator hierarchical_identifier

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              clocking_drive 
              (?)

** In state 519, looking ahead at LPAREN, reducing production
** primary -> hierarchical_identifier
** is permitted because of the following sub-derivation:

clockvar_expression P_LTE P_POUNDPOUND expression expression // lookahead token appears because expression can begin with LPAREN
                                       unary_operator primary // lookahead token is inherited
                                                      hierarchical_identifier . 

** In state 519, looking ahead at LPAREN, shifting is permitted
** because of the following sub-derivation:

clockvar_expression P_LTE P_POUNDPOUND expression expression 
                                       unary_operator primary 
                                                      hierarchical_identifier . LPAREN list_of_arguments RPAREN 

** Conflict (shift/reduce/reduce) in state 514.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 RETURN unary_operator LCURLY

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              jump_statement 
              RETURN expression SEMICOLON 
                     unary_operator primary 
                                    concatenation 
                                    LCURLY expression concatenation_4 RCURLY 
                                           primary 
                                           (?)

** In state 514, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 514, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 514, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 512.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 RETURN LPAREN expression COLON expression COLON

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              jump_statement 
              RETURN expression SEMICOLON 
                     primary 
                     LPAREN mintypmax_expression RPAREN 
                            expression COLON expression COLON expression 
                                                              primary 
                                                              (?)

** In state 512, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 512, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 512, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 510.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 RETURN LPAREN expression COLON

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              jump_statement 
              RETURN expression SEMICOLON 
                     primary 
                     LPAREN mintypmax_expression RPAREN 
                            expression COLON expression COLON expression 
                                             primary 
                                             (?)

** In state 510, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 510, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 510, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 503.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 hierarchical_identifier LPAREN list_of_arguments_3 COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              hierarchical_identifier LPAREN list_of_arguments RPAREN SEMICOLON 
                                             list_of_arguments_3 
                                             list_of_arguments_3 COMMA expression 
                                                                       primary 
                                                                       (?)

** In state 503, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 503, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 503, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce) in state 498.
** Tokens involved: VBAR TOKEN_VBAR_VBAR TOKEN_PLING_QUERY_EQUALS TIMES QUERY P_XNOR P_SSRIGHT3 P_SRIGHT P_SLEFT3 P_SLEFT P_POW P_NXOR P_NOTEQUAL P_LTE P_GTE P_EQUAL P_CASENOTEQUAL P_CASEEQUAL P_ANDAND PLUS MODULO MINUS LESS INSIDE GREATER EQUALS_QUERY_EQUALS DIVIDE CARET AMPERSAND
** The following explanations concentrate on token VBAR.
** This state is reached from start after reading:

source_text_3 RETURN expression QUERY expression COLON expression

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              jump_statement 
              RETURN expression SEMICOLON 
                     (?)

** In state 498, looking ahead at VBAR, shifting is permitted
** because of the following sub-derivation:

expression QUERY expression COLON expression 
                                  expression binary_operator expression 
                                             . VBAR 

** In state 498, looking ahead at VBAR, reducing production
** expression -> expression QUERY expression COLON expression
** is permitted because of the following sub-derivation:

expression binary_operator expression // lookahead token appears because binary_operator can begin with VBAR
expression QUERY expression COLON expression . 

** Conflict (shift/reduce/reduce) in state 497.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 RETURN expression QUERY expression COLON

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              jump_statement 
              RETURN expression SEMICOLON 
                     expression QUERY expression COLON expression 
                                                       primary 
                                                       (?)

** In state 497, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 497, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 497, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 492.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 RETURN expression INSIDE LCURLY value_range range_list_or_array_6 COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              jump_statement 
              RETURN expression SEMICOLON 
                     expression INSIDE range_list_or_array 
                                       LCURLY value_range range_list_or_array_6 RCURLY 
                                                          range_list_or_array_6 COMMA value_range 
                                                                                      expression 
                                                                                      primary 
                                                                                      (?)

** In state 492, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 492, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 492, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 488.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 RETURN LCURLY array_member_label COLON

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              jump_statement 
              RETURN expression SEMICOLON 
                     primary 
                     concatenation 
                     LCURLY array_member_label COLON expression concatenation_18 RCURLY 
                                                     primary 
                                                     (?)

** In state 488, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 488, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 488, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 482.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 RETURN LCURLY array_member_label COLON expression concatenation_18 COMMA array_member_label COLON

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              jump_statement 
              RETURN expression SEMICOLON 
                     primary 
                     concatenation 
                     LCURLY array_member_label COLON expression concatenation_18 RCURLY 
                                                                concatenation_18 COMMA array_member_label COLON expression 
                                                                                                                primary 
                                                                                                                (?)

** In state 482, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 482, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 482, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 476.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 RETURN LCURLY LCURLY array_member_label COLON

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              jump_statement 
              RETURN expression SEMICOLON 
                     primary 
                     concatenation 
                     LCURLY expression concatenation_4 RCURLY 
                            primary 
                            concatenation 
                            LCURLY array_member_label COLON expression concatenation_18 RCURLY 
                                                            primary 
                                                            (?)

** In state 476, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 476, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 476, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 474.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 RETURN LCURLY LCURLY constant_expression LCURLY

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              jump_statement 
              RETURN expression SEMICOLON 
                     primary 
                     concatenation 
                     LCURLY expression concatenation_4 RCURLY 
                            primary 
                            LCURLY constant_expression concatenation RCURLY 
                                                       LCURLY expression concatenation_4 RCURLY 
                                                              primary 
                                                              (?)

** In state 474, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 474, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 474, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 472.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 RETURN LCURLY LCURLY struct_member_label COLON

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              jump_statement 
              RETURN expression SEMICOLON 
                     primary 
                     concatenation 
                     LCURLY expression concatenation_4 RCURLY 
                            primary 
                            concatenation 
                            LCURLY struct_member_label COLON expression concatenation_11 RCURLY 
                                                             primary 
                                                             (?)

** In state 472, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 472, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 472, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 470.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 RETURN LCURLY casting_type SQUOTE LCURLY

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              jump_statement 
              RETURN expression SEMICOLON 
                     primary 
                     concatenation 
                     LCURLY expression concatenation_4 RCURLY 
                            primary 
                            casting_type SQUOTE concatenation 
                                                LCURLY expression concatenation_4 RCURLY 
                                                       primary 
                                                       (?)

** In state 470, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 470, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 470, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (reduce/reduce) in state 469.
** Tokens involved: VBAR TOKEN_VBAR_VBAR TOKEN_PLING_QUERY_EQUALS TIMES RPAREN RCURLY QUERY P_XNOR P_SSRIGHT3 P_SRIGHT P_SLEFT3 P_SLEFT P_POW P_NXOR P_NOTEQUAL P_LTE P_GTE P_EQUAL P_CASENOTEQUAL P_CASEEQUAL P_ANDAND PLUS MODULO MINUS LESS LCURLY GREATER EQUALS_QUERY_EQUALS DIVIDE COMMA COLON CARET AMPERSAND
** The following explanations concentrate on token VBAR.
** This state is reached from start after reading:

source_text_3 RETURN LCURLY LPAREN identifier

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              jump_statement 
              RETURN expression SEMICOLON 
                     primary 
                     (?)

** In state 469, looking ahead at VBAR, reducing production
** constant_primary -> identifier
** is permitted because of the following sub-derivation:

LCURLY constant_expression concatenation RCURLY 
       constant_primary 
       LPAREN constant_mintypmax_expression RPAREN 
              constant_expression 
              constant_expression binary_operator constant_expression // lookahead token appears because binary_operator can begin with VBAR
              constant_primary // lookahead token is inherited
              identifier . 

** In state 469, looking ahead at VBAR, reducing production
** constant_primary -> identifier
** is permitted because of the following sub-derivation:

LCURLY constant_expression concatenation RCURLY 
       constant_primary 
       LPAREN constant_mintypmax_expression RPAREN 
              constant_expression 
              constant_expression binary_operator constant_expression // lookahead token appears because binary_operator can begin with VBAR
              constant_primary // lookahead token is inherited
              identifier . 

** In state 469, looking ahead at VBAR, reducing production
** constant_primary -> identifier
** is permitted because of the following sub-derivation:

LCURLY constant_expression concatenation RCURLY 
       constant_primary 
       LPAREN constant_mintypmax_expression RPAREN 
              constant_expression 
              constant_expression binary_operator constant_expression // lookahead token appears because binary_operator can begin with VBAR
              constant_primary // lookahead token is inherited
              identifier . 

** In state 469, looking ahead at VBAR, reducing production
** constant_primary -> identifier
** is permitted because of the following sub-derivation:

LCURLY constant_expression concatenation RCURLY 
       constant_primary 
       LPAREN constant_mintypmax_expression RPAREN 
              constant_expression 
              constant_expression binary_operator constant_expression // lookahead token appears because binary_operator can begin with VBAR
              constant_primary // lookahead token is inherited
              identifier . 

** In state 469, looking ahead at VBAR, reducing production
** primary -> identifier
** is permitted because of the following sub-derivation:

concatenation 
LCURLY expression concatenation_4 RCURLY 
       primary 
       LPAREN mintypmax_expression RPAREN 
              expression 
              expression binary_operator expression // lookahead token appears because binary_operator can begin with VBAR
              primary // lookahead token is inherited
              identifier . 

** Conflict (shift/reduce/reduce) in state 468.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 RETURN LCURLY casting_type SQUOTE LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              jump_statement 
              RETURN expression SEMICOLON 
                     primary 
                     concatenation 
                     LCURLY expression concatenation_4 RCURLY 
                            primary 
                            casting_type SQUOTE LPAREN expression RPAREN 
                                                       primary 
                                                       (?)

** In state 468, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 468, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 468, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 465.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 RETURN LCURLY constant_expression LCURLY

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              jump_statement 
              RETURN expression SEMICOLON 
                     primary 
                     LCURLY constant_expression concatenation RCURLY 
                                                LCURLY expression concatenation_4 RCURLY 
                                                       primary 
                                                       (?)

** In state 465, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 465, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 465, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 462.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 RETURN LCURLY expression concatenation_4 COMMA

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              jump_statement 
              RETURN expression SEMICOLON 
                     primary 
                     concatenation 
                     LCURLY expression concatenation_4 RCURLY 
                                       concatenation_4 COMMA expression 
                                                             primary 
                                                             (?)

** In state 462, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 462, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 462, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (reduce/reduce) in state 458.
** Tokens involved: VBAR TOKEN_VBAR_VBAR TOKEN_PLING_QUERY_EQUALS TIMES RPAREN RCURLY QUERY P_XNOR P_SSRIGHT3 P_SRIGHT P_SLEFT3 P_SLEFT P_POW P_NXOR P_NOTEQUAL P_LTE P_GTE P_EQUAL P_CASENOTEQUAL P_CASEEQUAL P_ANDAND PLUS MODULO MINUS LESS GREATER EQUALS_QUERY_EQUALS DIVIDE COMMA COLON CARET AMPERSAND
** The following explanations concentrate on token VBAR.
** This state is reached from start after reading:

source_text_3 RETURN LCURLY identifier LPAREN list_of_constant_arguments RPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              jump_statement 
              RETURN expression SEMICOLON 
                     primary 
                     (?)

** In state 458, looking ahead at VBAR, reducing production
** constant_primary -> identifier LPAREN list_of_constant_arguments RPAREN
** is permitted because of the following sub-derivation:

LCURLY constant_expression concatenation RCURLY 
       constant_expression binary_operator constant_expression // lookahead token appears because binary_operator can begin with VBAR
       constant_primary // lookahead token is inherited
       identifier LPAREN list_of_constant_arguments RPAREN . 

** In state 458, looking ahead at VBAR, reducing production
** primary -> identifier LPAREN list_of_constant_arguments RPAREN
** is permitted because of the following sub-derivation:

concatenation 
LCURLY expression concatenation_4 RCURLY 
       expression binary_operator expression // lookahead token appears because binary_operator can begin with VBAR
       primary // lookahead token is inherited
       identifier LPAREN list_of_constant_arguments RPAREN . 

** Conflict (reduce/reduce) in state 455.
** Tokens involved: VBAR TOKEN_VBAR_VBAR TOKEN_PLING_QUERY_EQUALS TIMES RCURLY QUERY P_XNOR P_SSRIGHT3 P_SRIGHT P_SLEFT3 P_SLEFT P_POW P_NXOR P_NOTEQUAL P_LTE P_GTE P_EQUAL P_CASENOTEQUAL P_CASEEQUAL P_ANDAND PLUS MODULO MINUS LESS LCURLY GREATER EQUALS_QUERY_EQUALS DIVIDE COMMA COLON CARET AMPERSAND
** The following explanations concentrate on token COLON.
** This state is reached from start after reading:

source_text_3 RETURN LCURLY identifier

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              jump_statement 
              RETURN expression SEMICOLON 
                     primary 
                     concatenation 
                     (?)

** In state 455, looking ahead at COLON, reducing production
** array_member_label -> identifier
** is permitted because of the following sub-derivation:

LCURLY array_member_label COLON expression concatenation_18 RCURLY // lookahead token appears
       identifier . 

** In state 455, looking ahead at COLON, reducing production
** constant_primary -> identifier
** is permitted because of the following sub-derivation:

LCURLY array_member_label COLON expression concatenation_18 RCURLY // lookahead token appears
       constant_expression // lookahead token is inherited
       constant_primary // lookahead token is inherited
       identifier . 

** In state 455, looking ahead at COLON, reducing production
** constant_primary -> identifier
** is permitted because of the following sub-derivation:

LCURLY array_member_label COLON expression concatenation_18 RCURLY // lookahead token appears
       constant_expression // lookahead token is inherited
       constant_primary // lookahead token is inherited
       identifier . 

** In state 455, looking ahead at COLON, reducing production
** constant_primary -> identifier
** is permitted because of the following sub-derivation:

LCURLY array_member_label COLON expression concatenation_18 RCURLY // lookahead token appears
       constant_expression // lookahead token is inherited
       constant_primary // lookahead token is inherited
       identifier . 

** In state 455, looking ahead at COLON, reducing production
** constant_primary -> identifier
** is permitted because of the following sub-derivation:

LCURLY array_member_label COLON expression concatenation_18 RCURLY // lookahead token appears
       constant_expression // lookahead token is inherited
       constant_primary // lookahead token is inherited
       identifier . 

** In state 455, looking ahead at COLON, reducing production
** struct_member_label -> identifier
** is permitted because of the following sub-derivation:

LCURLY struct_member_label COLON expression concatenation_11 RCURLY // lookahead token appears
       identifier . 

** In state 455, looking ahead at COLON, reducing production
** struct_member_label -> identifier
** is permitted because of the following sub-derivation:

LCURLY struct_member_label COLON expression concatenation_11 RCURLY // lookahead token appears
       identifier . 

** Conflict (shift/reduce/reduce) in state 453.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 RETURN LCURLY struct_member_label COLON expression concatenation_11 COMMA struct_member_label COLON

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              jump_statement 
              RETURN expression SEMICOLON 
                     primary 
                     concatenation 
                     LCURLY struct_member_label COLON expression concatenation_11 RCURLY 
                                                                 concatenation_11 COMMA struct_member_label COLON expression 
                                                                                                                  primary 
                                                                                                                  (?)

** In state 453, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 453, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 453, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 447.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 RETURN LCURLY struct_member_label COLON

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              jump_statement 
              RETURN expression SEMICOLON 
                     primary 
                     concatenation 
                     LCURLY struct_member_label COLON expression concatenation_11 RCURLY 
                                                      primary 
                                                      (?)

** In state 447, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 447, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 447, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 445.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 RETURN casting_type SQUOTE LCURLY

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              jump_statement 
              RETURN expression SEMICOLON 
                     primary 
                     casting_type SQUOTE concatenation 
                                         LCURLY expression concatenation_4 RCURLY 
                                                primary 
                                                (?)

** In state 445, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 445, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 445, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 442.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 RETURN casting_type SQUOTE LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              jump_statement 
              RETURN expression SEMICOLON 
                     primary 
                     casting_type SQUOTE LPAREN expression RPAREN 
                                                primary 
                                                (?)

** In state 442, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 442, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 442, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce) in state 438.
** Tokens involved: VBAR TOKEN_VBAR_VBAR TOKEN_PLING_QUERY_EQUALS TIMES QUERY P_XNOR P_SSRIGHT3 P_SRIGHT P_SLEFT3 P_SLEFT P_POW P_NXOR P_NOTEQUAL P_LTE P_GTE P_EQUAL P_CASENOTEQUAL P_CASEEQUAL P_ANDAND PLUS MODULO MINUS LESS INSIDE GREATER EQUALS_QUERY_EQUALS DIVIDE CARET AMPERSAND
** The following explanations concentrate on token VBAR.
** This state is reached from start after reading:

source_text_3 RETURN expression binary_operator expression

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              jump_statement 
              RETURN expression SEMICOLON 
                     (?)

** In state 438, looking ahead at VBAR, shifting is permitted
** because of the following sub-derivation:

expression binary_operator expression 
                           expression binary_operator expression 
                                      . VBAR 

** In state 438, looking ahead at VBAR, reducing production
** expression -> expression binary_operator expression
** is permitted because of the following sub-derivation:

expression binary_operator expression // lookahead token appears because binary_operator can begin with VBAR
expression binary_operator expression . 

** Conflict (shift/reduce/reduce) in state 437.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 RETURN expression binary_operator

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              jump_statement 
              RETURN expression SEMICOLON 
                     expression binary_operator expression 
                                                primary 
                                                (?)

** In state 437, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 437, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 437, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 434.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 RETURN expression INSIDE LCURLY LBRACK expression COLON

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              jump_statement 
              RETURN expression SEMICOLON 
                     expression INSIDE range_list_or_array 
                                       LCURLY value_range range_list_or_array_6 RCURLY 
                                              LBRACK expression COLON expression RBRACK 
                                                                      primary 
                                                                      (?)

** In state 434, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 434, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 434, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 432.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 RETURN expression INSIDE LCURLY LBRACK

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              jump_statement 
              RETURN expression SEMICOLON 
                     expression INSIDE range_list_or_array 
                                       LCURLY value_range range_list_or_array_6 RCURLY 
                                              LBRACK expression COLON expression RBRACK 
                                                     primary 
                                                     (?)

** In state 432, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 432, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 432, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 431.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 RETURN expression INSIDE LCURLY

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              jump_statement 
              RETURN expression SEMICOLON 
                     expression INSIDE range_list_or_array 
                                       LCURLY value_range range_list_or_array_6 RCURLY 
                                              expression 
                                              primary 
                                              (?)

** In state 431, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 431, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 431, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 428.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 RETURN expression QUERY

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              jump_statement 
              RETURN expression SEMICOLON 
                     expression QUERY expression COLON expression 
                                      primary 
                                      (?)

** In state 428, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 428, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 428, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 424.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 hierarchical_identifier LPAREN DOT identifier LPAREN RPAREN list_of_arguments_10 COMMA DOT identifier LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              hierarchical_identifier LPAREN list_of_arguments RPAREN SEMICOLON 
                                             DOT identifier LPAREN RPAREN list_of_arguments_10 
                                                                          list_of_arguments_10 COMMA DOT identifier LPAREN expression RPAREN 
                                                                                                                           primary 
                                                                                                                           (?)

** In state 424, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 424, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 424, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 418.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 hierarchical_identifier LPAREN DOT identifier LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              hierarchical_identifier LPAREN list_of_arguments RPAREN SEMICOLON 
                                             DOT identifier LPAREN expression RPAREN list_of_arguments_10 
                                                                   primary 
                                                                   (?)

** In state 418, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 418, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 418, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 415.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 RETURN hierarchical_identifier LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              jump_statement 
              RETURN expression SEMICOLON 
                     primary 
                     hierarchical_identifier LPAREN list_of_arguments RPAREN 
                                                    expression list_of_arguments_3 
                                                    primary 
                                                    (?)

** In state 415, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 415, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 415, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (reduce/reduce) in state 414.
** Tokens involved: TOKEN_PLUS_PLUS TOKEN_DASH_DASH RCURLY LPAREN COMMA
** The following explanations concentrate on token RCURLY.
** This state is reached from start after reading:

source_text_3 RETURN LCURLY hierarchical_identifier

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              jump_statement 
              RETURN expression SEMICOLON 
                     (?)

** In state 414, looking ahead at RCURLY, reducing production
** primary -> hierarchical_identifier
** is permitted because of the following sub-derivation:

primary 
concatenation 
LCURLY expression concatenation_4 RCURLY // lookahead token appears because concatenation_4 can vanish
       primary // lookahead token is inherited
       hierarchical_identifier . 

** In state 414, looking ahead at RCURLY, reducing production
** variable_lvalue_3 ->
** is permitted because of the following sub-derivation:

inc_or_dec_expression 
variable_lvalue inc_or_dec_operator 
LCURLY variable_lvalue variable_lvalue_8 RCURLY // lookahead token appears because variable_lvalue_8 can vanish
       hierarchical_identifier variable_lvalue_3 // lookahead token is inherited
                               . 

** Conflict (reduce/reduce) in state 383.
** Tokens involved: VBAR TOKEN_VBAR_VBAR TOKEN_PLING_QUERY_EQUALS TIMES QUERY P_XNOR P_SSRIGHT3 P_SRIGHT P_SLEFT3 P_SLEFT P_POW P_NXOR P_NOTEQUAL P_LTE P_GTE P_EQUAL P_CASENOTEQUAL P_CASEEQUAL P_ANDAND PLUS MODULO MINUS LESS GREATER EQUALS_QUERY_EQUALS DIVIDE COLON CARET AMPERSAND
** The following explanations concentrate on token VBAR.
** This state is reached from start after reading:

source_text_3 RETURN LCURLY array_member_label COLON expression concatenation_18 COMMA identifier

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              jump_statement 
              RETURN expression SEMICOLON 
                     primary 
                     concatenation 
                     LCURLY array_member_label COLON expression concatenation_18 RCURLY 
                                                                concatenation_18 COMMA array_member_label COLON expression 
                                                                                       constant_expression 
                                                                                       constant_expression binary_operator constant_expression // lookahead token appears because binary_operator can begin with VBAR
                                                                                       constant_primary // lookahead token is inherited
                                                                                       (?)

** In state 383, looking ahead at VBAR, reducing production
** constant_primary -> identifier
** is permitted because of the following sub-derivation:

identifier . 

** In state 383, looking ahead at VBAR, reducing production
** constant_primary -> identifier
** is permitted because of the following sub-derivation:

identifier . 

** In state 383, looking ahead at VBAR, reducing production
** constant_primary -> identifier
** is permitted because of the following sub-derivation:

identifier . 

** In state 383, looking ahead at VBAR, reducing production
** constant_primary -> identifier
** is permitted because of the following sub-derivation:

identifier . 

** Conflict (reduce/reduce) in state 368.
** Tokens involved: VBAR TOKEN_VBAR_VBAR TOKEN_PLING_QUERY_EQUALS TIMES RCURLY QUERY P_XNOR P_SSRIGHT3 P_SRIGHT P_SLEFT3 P_SLEFT P_POW P_NXOR P_NOTEQUAL P_LTE P_GTE P_EQUAL P_CASENOTEQUAL P_CASEEQUAL P_ANDAND PLUS MODULO MINUS LESS LCURLY GREATER EQUALS_QUERY_EQUALS DIVIDE COMMA COLON CARET AMPERSAND
** The following explanations concentrate on token COLON.
** This state is reached from start after reading:

source_text_3 TRIREG net_declaration_62 LBRACK LCURLY identifier

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              net_declaration 
              TRIREG net_declaration_62 LBRACK constant_expression COLON constant_expression RBRACK identifier EQUALS expression list_of_net_decl_assignments_3 SEMICOLON 
                                               constant_primary 
                                               constant_concatenation 
                                               (?)

** In state 368, looking ahead at COLON, reducing production
** array_member_label -> identifier
** is permitted because of the following sub-derivation:

LCURLY array_member_label COLON constant_expression constant_concatenation_18 RCURLY // lookahead token appears
       identifier . 

** In state 368, looking ahead at COLON, reducing production
** constant_primary -> identifier
** is permitted because of the following sub-derivation:

LCURLY array_member_label COLON constant_expression constant_concatenation_18 RCURLY // lookahead token appears
       constant_expression // lookahead token is inherited
       constant_primary // lookahead token is inherited
       identifier . 

** In state 368, looking ahead at COLON, reducing production
** constant_primary -> identifier
** is permitted because of the following sub-derivation:

LCURLY array_member_label COLON constant_expression constant_concatenation_18 RCURLY // lookahead token appears
       constant_expression // lookahead token is inherited
       constant_primary // lookahead token is inherited
       identifier . 

** In state 368, looking ahead at COLON, reducing production
** constant_primary -> identifier
** is permitted because of the following sub-derivation:

LCURLY array_member_label COLON constant_expression constant_concatenation_18 RCURLY // lookahead token appears
       constant_expression // lookahead token is inherited
       constant_primary // lookahead token is inherited
       identifier . 

** In state 368, looking ahead at COLON, reducing production
** constant_primary -> identifier
** is permitted because of the following sub-derivation:

LCURLY array_member_label COLON constant_expression constant_concatenation_18 RCURLY // lookahead token appears
       constant_expression // lookahead token is inherited
       constant_primary // lookahead token is inherited
       identifier . 

** In state 368, looking ahead at COLON, reducing production
** struct_member_label -> identifier
** is permitted because of the following sub-derivation:

LCURLY struct_member_label COLON constant_expression constant_concatenation_11 RCURLY // lookahead token appears
       identifier . 

** In state 368, looking ahead at COLON, reducing production
** struct_member_label -> identifier
** is permitted because of the following sub-derivation:

LCURLY struct_member_label COLON constant_expression constant_concatenation_11 RCURLY // lookahead token appears
       identifier . 

** Conflict (reduce/reduce) in state 367.
** Token involved: COLON
** This state is reached from start after reading:

source_text_3 RETURN LCURLY struct_member_label COLON expression concatenation_11 COMMA identifier

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              jump_statement 
              RETURN expression SEMICOLON 
                     primary 
                     concatenation 
                     LCURLY struct_member_label COLON expression concatenation_11 RCURLY 
                                                                 concatenation_11 COMMA struct_member_label COLON expression // lookahead token appears
                                                                                        (?)

** In state 367, looking ahead at COLON, reducing production
** struct_member_label -> identifier
** is permitted because of the following sub-derivation:

identifier . 

** In state 367, looking ahead at COLON, reducing production
** struct_member_label -> identifier
** is permitted because of the following sub-derivation:

identifier . 

** Conflict (shift/reduce) in state 349.
** Tokens involved: VBAR TOKEN_VBAR_VBAR TOKEN_PLING_QUERY_EQUALS TIMES QUERY P_XNOR P_SSRIGHT3 P_SRIGHT P_SLEFT3 P_SLEFT P_POW P_NXOR P_NOTEQUAL P_LTE P_GTE P_EQUAL P_CASENOTEQUAL P_CASEEQUAL P_ANDAND PLUS MODULO MINUS LESS GREATER EQUALS_QUERY_EQUALS DIVIDE CARET AMPERSAND
** The following explanations concentrate on token VBAR.
** This state is reached from start after reading:

source_text_3 RETURN LCURLY constant_expression binary_operator constant_expression

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              jump_statement 
              RETURN expression SEMICOLON 
                     primary 
                     LCURLY constant_expression concatenation RCURLY 
                            (?)

** In state 349, looking ahead at VBAR, shifting is permitted
** because of the following sub-derivation:

constant_expression binary_operator constant_expression 
                                    constant_expression binary_operator constant_expression 
                                                        . VBAR 

** In state 349, looking ahead at VBAR, reducing production
** constant_expression -> constant_expression binary_operator constant_expression
** is permitted because of the following sub-derivation:

constant_expression binary_operator constant_expression // lookahead token appears because binary_operator can begin with VBAR
constant_expression binary_operator constant_expression . 

** Conflict (shift/reduce) in state 345.
** Tokens involved: VBAR TOKEN_VBAR_VBAR TOKEN_PLING_QUERY_EQUALS TIMES QUERY P_XNOR P_SSRIGHT3 P_SRIGHT P_SLEFT3 P_SLEFT P_POW P_NXOR P_NOTEQUAL P_LTE P_GTE P_EQUAL P_CASENOTEQUAL P_CASEEQUAL P_ANDAND PLUS MODULO MINUS LESS GREATER EQUALS_QUERY_EQUALS DIVIDE CARET AMPERSAND
** The following explanations concentrate on token VBAR.
** This state is reached from start after reading:

source_text_3 RETURN LCURLY constant_expression QUERY constant_expression COLON constant_expression

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              jump_statement 
              RETURN expression SEMICOLON 
                     primary 
                     LCURLY constant_expression concatenation RCURLY 
                            (?)

** In state 345, looking ahead at VBAR, shifting is permitted
** because of the following sub-derivation:

constant_expression QUERY constant_expression COLON constant_expression 
                                                    constant_expression binary_operator constant_expression 
                                                                        . VBAR 

** In state 345, looking ahead at VBAR, reducing production
** constant_expression -> constant_expression QUERY constant_expression COLON constant_expression
** is permitted because of the following sub-derivation:

constant_expression binary_operator constant_expression // lookahead token appears because binary_operator can begin with VBAR
constant_expression QUERY constant_expression COLON constant_expression . 

** Conflict (reduce/reduce) in state 301.
** Tokens involved: VOID VBAR UNSIGNED_NUMBER UNSIGNED TOKEN_VBAR_VBAR TOKEN_TWO TOKEN_THREE TOKEN_SIX TOKEN_SEVEN TOKEN_QUOTE_Z2 TOKEN_QUOTE_Z1 TOKEN_QUOTE_X2 TOKEN_QUOTE_X1 TOKEN_QUOTE_TRUE TOKEN_QUOTE_FALSE TOKEN_PLUS_PLUS TOKEN_PLING_QUERY_EQUALS TOKEN_ONE TOKEN_NINE TOKEN_FOUR TOKEN_FIVE TOKEN_EIGHT TOKEN_DASH_DASH TIMES TIME TILDE_VBAR TILDE THIS SYSTEM_FUNCTION_IDENTIFIER SVINT SUPER SIMPLE_IDENTIFIER SIGNED SHORTREAL SHORTINT SEMICOLON RPAREN REG REALTIME REAL RCURLY RBRACK QUERY P_XNOR P_SSRIGHT3 P_SRIGHT P_SLEFT3 P_SLEFT P_POW P_POUNDPOUND P_PLUSCOLON P_NXOR P_NOTEQUAL P_NAND P_MINUSCOLON P_LTE P_GTE P_EQUAL P_CASENOTEQUAL P_CASEEQUAL P_ANDAND PLUS PLING OCTAL_BASE NULL MODULO MINUS LPAREN LONGINT LOGIC LESS LCURLY INTEGER HEX_BASE GREATER FIRST_MATCH EQUALS_QUERY_EQUALS DOUBLE_QUOTES DIVIDE DECIMAL_BASE COMMA COLON CARET BYTE BIT BINARY_BASE BACKSLASH AMPERSAND
** The following explanations concentrate on token VBAR.
** This state is reached from start after reading:

source_text_3 TRIREG net_declaration_62 LBRACK identifier

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              net_declaration 
              TRIREG net_declaration_62 LBRACK constant_expression COLON constant_expression RBRACK identifier EQUALS expression list_of_net_decl_assignments_3 SEMICOLON 
                                               constant_expression binary_operator constant_expression // lookahead token appears because binary_operator can begin with VBAR
                                               constant_primary // lookahead token is inherited
                                               (?)

** In state 301, looking ahead at VBAR, reducing production
** constant_primary -> identifier
** is permitted because of the following sub-derivation:

identifier . 

** In state 301, looking ahead at VBAR, reducing production
** constant_primary -> identifier
** is permitted because of the following sub-derivation:

identifier . 

** In state 301, looking ahead at VBAR, reducing production
** constant_primary -> identifier
** is permitted because of the following sub-derivation:

identifier . 

** In state 301, looking ahead at VBAR, reducing production
** constant_primary -> identifier
** is permitted because of the following sub-derivation:

identifier . 

** Conflict (shift/reduce) in state 281.
** Token involved: LPAREN
** This state is reached from start after reading:

source_text_3 clockvar_expression P_LTE P_POUNDPOUND identifier

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              clocking_drive 
              (?)

** In state 281, looking ahead at LPAREN, reducing production
** primary -> identifier
** is permitted because of the following sub-derivation:

clockvar_expression P_LTE P_POUNDPOUND expression expression // lookahead token appears because expression can begin with LPAREN
                                       primary // lookahead token is inherited
                                       identifier . 

** In state 281, looking ahead at LPAREN, shifting is permitted
** because of the following sub-derivation:

clockvar_expression P_LTE P_POUNDPOUND expression expression 
                                       primary 
                                       identifier . LPAREN list_of_constant_arguments RPAREN 

** Conflict (shift/reduce/reduce) in state 278.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 RETURN unary_operator LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              jump_statement 
              RETURN expression SEMICOLON 
                     unary_operator primary 
                                    LPAREN mintypmax_expression RPAREN 
                                           expression 
                                           primary 
                                           (?)

** In state 278, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 278, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 278, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 277.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 RETURN unary_operator

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              jump_statement 
              RETURN expression SEMICOLON 
                     unary_operator primary 
                                    (?)

** In state 277, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 277, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 277, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 273.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 RETURN implicit_class_handle hierarchical_identifier primary_6 LBRACK range_expression RBRACK DOT identifier LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              jump_statement 
              RETURN expression SEMICOLON 
                     primary 
                     implicit_class_handle hierarchical_identifier primary_6 LBRACK range_expression RBRACK DOT identifier LPAREN expression primary_8_6_5 RPAREN 
                                                                                                                                  primary 
                                                                                                                                  (?)

** In state 273, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 273, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 273, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce) in state 272.
** Token involved: LPAREN
** This state is reached from start after reading:

source_text_3 clockvar_expression P_LTE P_POUNDPOUND implicit_class_handle hierarchical_identifier primary_6 LBRACK range_expression RBRACK DOT identifier

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              clocking_drive 
              (?)

** In state 272, looking ahead at LPAREN, reducing production
** primary -> implicit_class_handle hierarchical_identifier primary_6 LBRACK range_expression RBRACK DOT identifier
** is permitted because of the following sub-derivation:

clockvar_expression P_LTE P_POUNDPOUND expression expression // lookahead token appears because expression can begin with LPAREN
                                       primary // lookahead token is inherited
                                       implicit_class_handle hierarchical_identifier primary_6 LBRACK range_expression RBRACK DOT identifier . 

** In state 272, looking ahead at LPAREN, shifting is permitted
** because of the following sub-derivation:

clockvar_expression P_LTE P_POUNDPOUND expression expression 
                                       primary 
                                       implicit_class_handle hierarchical_identifier primary_6 LBRACK range_expression RBRACK DOT identifier . LPAREN expression primary_8_6_5 RPAREN 

** Conflict (shift/reduce/reduce) in state 264.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 RETURN implicit_class_handle hierarchical_identifier primary_6 LBRACK

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              jump_statement 
              RETURN expression SEMICOLON 
                     primary 
                     implicit_class_handle hierarchical_identifier primary_6 
                                                                   primary_6 LBRACK expression RBRACK 
                                                                                    primary 
                                                                                    (?)

** In state 264, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 264, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 264, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce) in state 249.
** Token involved: TOKEN_ONE
** This state is reached from start after reading:

source_text_3 clockvar_expression P_LTE P_POUNDPOUND non_zero_decimal_digit non_zero_unsigned_number_3 BINARY_BASE binary_digit

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              clocking_drive 
              (?)

** In state 249, looking ahead at TOKEN_ONE, shifting is permitted
** because of the following sub-derivation:

clockvar_expression P_LTE P_POUNDPOUND expression expression 
                                       primary 
                                       number 
                                       non_zero_decimal_digit non_zero_unsigned_number_3 BINARY_BASE binary_digit binary_value_3 
                                                                                                                  binary_digit 
                                                                                                                  . TOKEN_ONE 

** In state 249, looking ahead at TOKEN_ONE, reducing production
** binary_value_3 ->
** is permitted because of the following sub-derivation:

clockvar_expression P_LTE P_POUNDPOUND expression expression // lookahead token appears because expression can begin with TOKEN_ONE
                                       primary // lookahead token is inherited
                                       number // lookahead token is inherited
                                       non_zero_decimal_digit non_zero_unsigned_number_3 BINARY_BASE binary_digit binary_value_3 // lookahead token is inherited
                                                                                                                  . 

** Conflict (shift/reduce) in state 237.
** Tokens involved: TOKEN_TWO TOKEN_THREE TOKEN_SIX TOKEN_SEVEN TOKEN_ONE TOKEN_FOUR TOKEN_FIVE
** The following explanations concentrate on token TOKEN_TWO.
** This state is reached from start after reading:

source_text_3 clockvar_expression P_LTE P_POUNDPOUND non_zero_decimal_digit non_zero_unsigned_number_3 OCTAL_BASE octal_digit

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              clocking_drive 
              (?)

** In state 237, looking ahead at TOKEN_TWO, shifting is permitted
** because of the following sub-derivation:

clockvar_expression P_LTE P_POUNDPOUND expression expression 
                                       primary 
                                       number 
                                       non_zero_decimal_digit non_zero_unsigned_number_3 OCTAL_BASE octal_digit octal_value_3 
                                                                                                                octal_digit 
                                                                                                                . TOKEN_TWO 

** In state 237, looking ahead at TOKEN_TWO, reducing production
** octal_value_3 ->
** is permitted because of the following sub-derivation:

clockvar_expression P_LTE P_POUNDPOUND expression expression // lookahead token appears because expression can begin with TOKEN_TWO
                                       primary // lookahead token is inherited
                                       number // lookahead token is inherited
                                       non_zero_decimal_digit non_zero_unsigned_number_3 OCTAL_BASE octal_digit octal_value_3 // lookahead token is inherited
                                                                                                                . 

** Conflict (reduce/reduce) in state 222.
** Tokens involved: VBAR TOKEN_VBAR_VBAR TOKEN_PLING_QUERY_EQUALS TIMES RPAREN RCURLY QUERY P_XNOR P_SSRIGHT3 P_SRIGHT P_SLEFT3 P_SLEFT P_POW P_NXOR P_NOTEQUAL P_LTE P_GTE P_EQUAL P_CASENOTEQUAL P_CASEEQUAL P_ANDAND PLUS MODULO MINUS LESS GREATER EQUALS_QUERY_EQUALS DIVIDE COMMA COLON CARET AMPERSAND
** The following explanations concentrate on token VBAR.
** This state is reached from start after reading:

source_text_3 RETURN LCURLY number

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              jump_statement 
              RETURN expression SEMICOLON 
                     primary 
                     (?)

** In state 222, looking ahead at VBAR, reducing production
** constant_primary -> number
** is permitted because of the following sub-derivation:

LCURLY constant_expression concatenation RCURLY 
       constant_expression binary_operator constant_expression // lookahead token appears because binary_operator can begin with VBAR
       constant_primary // lookahead token is inherited
       number . 

** In state 222, looking ahead at VBAR, reducing production
** primary -> number
** is permitted because of the following sub-derivation:

concatenation 
LCURLY expression concatenation_4 RCURLY 
       expression binary_operator expression // lookahead token appears because binary_operator can begin with VBAR
       primary // lookahead token is inherited
       number . 

** Conflict (reduce/reduce) in state 217.
** Tokens involved: VBAR TOKEN_VBAR_VBAR TOKEN_PLING_QUERY_EQUALS TIMES RPAREN RCURLY QUERY P_XNOR P_SSRIGHT3 P_SRIGHT P_SLEFT3 P_SLEFT P_POW P_NXOR P_NOTEQUAL P_LTE P_GTE P_EQUAL P_CASENOTEQUAL P_CASEEQUAL P_ANDAND PLUS MODULO MINUS LESS GREATER EQUALS_QUERY_EQUALS DIVIDE COMMA COLON CARET AMPERSAND
** The following explanations concentrate on token VBAR.
** This state is reached from start after reading:

source_text_3 RETURN LCURLY time_literal

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              jump_statement 
              RETURN expression SEMICOLON 
                     primary 
                     (?)

** In state 217, looking ahead at VBAR, reducing production
** constant_primary -> time_literal
** is permitted because of the following sub-derivation:

LCURLY constant_expression concatenation RCURLY 
       constant_expression binary_operator constant_expression // lookahead token appears because binary_operator can begin with VBAR
       constant_primary // lookahead token is inherited
       time_literal . 

** In state 217, looking ahead at VBAR, reducing production
** primary -> time_literal
** is permitted because of the following sub-derivation:

concatenation 
LCURLY expression concatenation_4 RCURLY 
       expression binary_operator expression // lookahead token appears because binary_operator can begin with VBAR
       primary // lookahead token is inherited
       time_literal . 

** Conflict (shift/reduce/reduce) in state 216.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 RETURN LCURLY unary_operator LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              jump_statement 
              RETURN expression SEMICOLON 
                     primary 
                     concatenation 
                     LCURLY expression concatenation_4 RCURLY 
                            unary_operator primary 
                                           LPAREN mintypmax_expression RPAREN 
                                                  expression 
                                                  primary 
                                                  (?)

** In state 216, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 216, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 216, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 215.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 RETURN LCURLY unary_operator

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              jump_statement 
              RETURN expression SEMICOLON 
                     primary 
                     concatenation 
                     LCURLY expression concatenation_4 RCURLY 
                            unary_operator primary 
                                           (?)

** In state 215, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 215, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 215, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce/reduce) in state 212.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 hierarchical_identifier variable_lvalue_3 LBRACK

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              variable_lvalue P_LTE expression SEMICOLON 
              hierarchical_identifier variable_lvalue_3 
                                      variable_lvalue_3 LBRACK expression RBRACK 
                                                               primary 
                                                               (?)

** In state 212, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 212, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 212, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (reduce/reduce) in state 202.
** Tokens involved: XOR XNOR WOR WITHIN WIRE WHILE WAND WAIT_ORDER WAIT VOID VIRTUAL VBAR_DASH_GT VBAR UNSIGNED_NUMBER UNSIGNED UNIQUE UNION TYPEDEF TRIREG TRIOR TRIAND TRI1 TRI0 TRI TRANIF1 TRANIF0 TRAN TOKEN_VBAR_VBAR TOKEN_TWO TOKEN_THREE TOKEN_SIX TOKEN_SEVEN TOKEN_QUOTE_Z2 TOKEN_QUOTE_Z1 TOKEN_QUOTE_X2 TOKEN_QUOTE_X1 TOKEN_QUOTE_TRUE TOKEN_QUOTE_FALSE TOKEN_PLUS_PLUS TOKEN_PLING_QUERY_EQUALS TOKEN_PLING_EQUALS_GT TOKEN_ONE TOKEN_NINE TOKEN_LBRACK_STAR_EQUALS TOKEN_FOUR TOKEN_FIVE TOKEN_EIGHT TOKEN_DASH_DASH TIMES TIME TILDE_VBAR TILDE THROUGHOUT THIS TASK SYSTEM_TASK_IDENTIFIER SYSTEM_FUNCTION_IDENTIFIER SVINT SUPPLY1 SUPPLY0 SUPER STRUCT STRING STATIC SPECPARAM SPECIFY SIMPLE_IDENTIFIER SIGNED SHORTREAL SHORTINT SEQUENCE SEMICOLON RTRANIF1 RTRANIF0 RTRAN RPMOS RPAREN RNMOS RETURN REPEAT RELEASE REG REF REALTIME REAL RCURLY RCMOS RBRACK QUERY P_XNOR P_SSRIGHT3 P_SRIGHT P_SLEFT3 P_SLEFT P_POW P_POUNDPOUND P_PLUSCOLON P_NXOR P_NOTEQUAL P_NAND P_MINUSGT P_MINUSCOLON P_LTE P_GTE P_EQUAL P_EQGT P_COLONEQ P_COLONDIV P_CASENOTEQUAL P_CASEEQUAL P_ANDAND PULLUP PULLDOWN PROPERTY PROGRAM PRIORITY PRIMITIVE PMOS PLUS PLING PARAMETER OUTPUT OR OCTAL_BASE NULL NOTIF1 NOTIF0 NOT NOR NMOS NAND MODULO MODULE MODPORT MINUS MACROMODULE LPAREN LONGINT LOGIC LOCALPARAM LESS LCURLY LBRACK_STAR_DASH_GT LBRACK_STAR LBRACK JOIN_NONE JOIN_ANY JOIN INTERSECT INTERFACE INTEGER INSIDE INPUT INOUT INITIAL IMPORT IFF IF HEX_BASE HASH GREATER GENVAR GENERATE FUNCTION FORK FOREVER FORCE FOR FINAL EXTERN EXPORT EVENT EQUALS_QUERY_EQUALS EQUALS ENUM ENDTASK ENDPROGRAM ENDMODULE ENDINTERFACE ENDGENERATE ENDCASE END ELSE DOUBLE_QUOTES DOT DO DIVIDE DIST DISABLE DEFPARAM DEFAULT DECIMAL_BASE DEASSIGN DASH_GT_GT COVER CONTINUE CONSTRAINT CONST COMMA COLON CMOS CLOCKING CLASS CHANDLE CASEZ CASEX CASE CARET BYTE BUFIF1 BUFIF0 BUF BREAK BIT BIND BINARY_BASE BEGIN BACKSLASH AUTOMATIC AT_STAR AT ASSIGN ASSERT AND AMPERSAND ALWAYS_LATCH ALWAYS_FF ALWAYS_COMB ALWAYS ALIAS #
** The following explanations concentrate on token LBRACK.
** This state is reached from start after reading:

source_text_3 BACKSLASH TOKEN_ANY_ASCII white_space

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              (?)

** In state 202, looking ahead at LBRACK, reducing production
** escaped_hierarchical_branch_3 ->
** is permitted because of the following sub-derivation:

statement_or_null 
statement_item 
variable_lvalue P_LTE expression SEMICOLON 
hierarchical_identifier variable_lvalue_3 // lookahead token appears because variable_lvalue_3 can begin with LBRACK
BACKSLASH TOKEN_ANY_ASCII white_space escaped_hierarchical_branch_3 escaped_hierarchical_identifier_3 // lookahead token is inherited because escaped_hierarchical_identifier_3 can vanish
                                      . 

** In state 202, looking ahead at LBRACK, reducing production
** identifier -> BACKSLASH TOKEN_ANY_ASCII white_space
** is permitted because of the following sub-derivation:

module_root_item 
module_common_item 
module_or_generate_item_declaration 
data_declaration 
data_type list_of_variable_identifiers_or_assignments SEMICOLON 
identifier type_declaration_identifier_3 data_type_11 // lookahead token appears because type_declaration_identifier_3 can begin with LBRACK
BACKSLASH TOKEN_ANY_ASCII white_space . 

** Conflict (shift/reduce) in state 196.
** Token involved: TOKEN_ONE
** This state is reached from start after reading:

source_text_3 clockvar_expression P_LTE P_POUNDPOUND BINARY_BASE binary_digit

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              clocking_drive 
              (?)

** In state 196, looking ahead at TOKEN_ONE, shifting is permitted
** because of the following sub-derivation:

clockvar_expression P_LTE P_POUNDPOUND expression expression 
                                       primary 
                                       number 
                                       BINARY_BASE binary_digit binary_value_3 
                                                                binary_digit 
                                                                . TOKEN_ONE 

** In state 196, looking ahead at TOKEN_ONE, reducing production
** binary_value_3 ->
** is permitted because of the following sub-derivation:

clockvar_expression P_LTE P_POUNDPOUND expression expression // lookahead token appears because expression can begin with TOKEN_ONE
                                       primary // lookahead token is inherited
                                       number // lookahead token is inherited
                                       BINARY_BASE binary_digit binary_value_3 // lookahead token is inherited
                                                                . 

** Conflict (reduce/reduce) in state 179.
** Token involved: COLON
** This state is reached from start after reading:

source_text_3 RETURN LCURLY DEFAULT

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              jump_statement 
              RETURN expression SEMICOLON 
                     primary 
                     concatenation 
                     (?)

** In state 179, looking ahead at COLON, reducing production
** array_member_label -> DEFAULT
** is permitted because of the following sub-derivation:

LCURLY array_member_label COLON expression concatenation_18 RCURLY // lookahead token appears
       DEFAULT . 

** In state 179, looking ahead at COLON, reducing production
** struct_member_label -> DEFAULT
** is permitted because of the following sub-derivation:

LCURLY struct_member_label COLON expression concatenation_11 RCURLY // lookahead token appears
       DEFAULT . 

** Conflict (reduce/reduce) in state 177.
** Tokens involved: VBAR TOKEN_VBAR_VBAR TOKEN_PLING_QUERY_EQUALS TIMES RPAREN RCURLY QUERY P_XNOR P_SSRIGHT3 P_SRIGHT P_SLEFT3 P_SLEFT P_POW P_NXOR P_NOTEQUAL P_LTE P_GTE P_EQUAL P_CASENOTEQUAL P_CASEEQUAL P_ANDAND PLUS MODULO MINUS LESS GREATER EQUALS_QUERY_EQUALS DIVIDE COMMA COLON CARET AMPERSAND
** The following explanations concentrate on token VBAR.
** This state is reached from start after reading:

source_text_3 RETURN LCURLY DOUBLE_QUOTES string_literal_3 DOUBLE_QUOTES

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              jump_statement 
              RETURN expression SEMICOLON 
                     primary 
                     (?)

** In state 177, looking ahead at VBAR, reducing production
** constant_expression -> DOUBLE_QUOTES string_literal_3 DOUBLE_QUOTES
** is permitted because of the following sub-derivation:

LCURLY constant_expression concatenation RCURLY 
       constant_expression binary_operator constant_expression // lookahead token appears because binary_operator can begin with VBAR
       DOUBLE_QUOTES string_literal_3 DOUBLE_QUOTES . 

** In state 177, looking ahead at VBAR, reducing production
** expression -> DOUBLE_QUOTES string_literal_3 DOUBLE_QUOTES
** is permitted because of the following sub-derivation:

concatenation 
LCURLY expression concatenation_4 RCURLY 
       expression binary_operator expression // lookahead token appears because binary_operator can begin with VBAR
       DOUBLE_QUOTES string_literal_3 DOUBLE_QUOTES . 

** Conflict (shift/reduce/reduce) in state 168.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 RETURN LCURLY LCURLY

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              jump_statement 
              RETURN expression SEMICOLON 
                     (?)

** In state 168, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

inc_or_dec_expression 
variable_lvalue inc_or_dec_operator 
LCURLY variable_lvalue variable_lvalue_8 RCURLY 
       LCURLY variable_lvalue variable_lvalue_8 RCURLY 
              hierarchical_identifier variable_lvalue_3 
              . SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 168, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

primary 
concatenation 
LCURLY expression concatenation_4 RCURLY 
       primary 
       concatenation 
       LCURLY expression concatenation_4 RCURLY 
              primary 
              implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
              . 

** In state 168, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

primary 
concatenation 
LCURLY expression concatenation_4 RCURLY 
       primary 
       concatenation 
       LCURLY expression concatenation_4 RCURLY 
              primary 
              implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
              . 

** Conflict (shift/reduce/reduce) in state 167.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 RETURN LCURLY LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              jump_statement 
              RETURN expression SEMICOLON 
                     primary 
                     concatenation 
                     LCURLY expression concatenation_4 RCURLY 
                            (?)

** In state 167, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

LPAREN variable_lvalue assignment_operator expression RPAREN 
       hierarchical_identifier variable_lvalue_3 
       . SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 167, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

primary 
LPAREN mintypmax_expression RPAREN 
       expression 
       primary 
       implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
       . 

** In state 167, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

primary 
LPAREN mintypmax_expression RPAREN 
       expression 
       primary 
       implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
       . 

** Conflict (reduce/reduce) in state 166.
** Tokens involved: VBAR TOKEN_VBAR_VBAR TOKEN_PLING_QUERY_EQUALS TIMES RPAREN RCURLY QUERY P_XNOR P_SSRIGHT3 P_SRIGHT P_SLEFT3 P_SLEFT P_POW P_NXOR P_NOTEQUAL P_LTE P_GTE P_EQUAL P_CASENOTEQUAL P_CASEEQUAL P_ANDAND PLUS MODULO MINUS LESS GREATER EQUALS_QUERY_EQUALS DIVIDE COMMA COLON CARET AMPERSAND
** The following explanations concentrate on token VBAR.
** This state is reached from start after reading:

source_text_3 RETURN LCURLY TOKEN_QUOTE_FALSE

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              jump_statement 
              RETURN expression SEMICOLON 
                     primary 
                     (?)

** In state 166, looking ahead at VBAR, reducing production
** constant_primary -> TOKEN_QUOTE_FALSE
** is permitted because of the following sub-derivation:

LCURLY constant_expression concatenation RCURLY 
       constant_expression binary_operator constant_expression // lookahead token appears because binary_operator can begin with VBAR
       constant_primary // lookahead token is inherited
       TOKEN_QUOTE_FALSE . 

** In state 166, looking ahead at VBAR, reducing production
** primary -> TOKEN_QUOTE_FALSE
** is permitted because of the following sub-derivation:

concatenation 
LCURLY expression concatenation_4 RCURLY 
       expression binary_operator expression // lookahead token appears because binary_operator can begin with VBAR
       primary // lookahead token is inherited
       TOKEN_QUOTE_FALSE . 

** Conflict (reduce/reduce) in state 165.
** Tokens involved: VBAR TOKEN_VBAR_VBAR TOKEN_PLING_QUERY_EQUALS TIMES RPAREN RCURLY QUERY P_XNOR P_SSRIGHT3 P_SRIGHT P_SLEFT3 P_SLEFT P_POW P_NXOR P_NOTEQUAL P_LTE P_GTE P_EQUAL P_CASENOTEQUAL P_CASEEQUAL P_ANDAND PLUS MODULO MINUS LESS GREATER EQUALS_QUERY_EQUALS DIVIDE COMMA COLON CARET AMPERSAND
** The following explanations concentrate on token VBAR.
** This state is reached from start after reading:

source_text_3 RETURN LCURLY TOKEN_QUOTE_TRUE

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              jump_statement 
              RETURN expression SEMICOLON 
                     primary 
                     (?)

** In state 165, looking ahead at VBAR, reducing production
** constant_primary -> TOKEN_QUOTE_TRUE
** is permitted because of the following sub-derivation:

LCURLY constant_expression concatenation RCURLY 
       constant_expression binary_operator constant_expression // lookahead token appears because binary_operator can begin with VBAR
       constant_primary // lookahead token is inherited
       TOKEN_QUOTE_TRUE . 

** In state 165, looking ahead at VBAR, reducing production
** primary -> TOKEN_QUOTE_TRUE
** is permitted because of the following sub-derivation:

concatenation 
LCURLY expression concatenation_4 RCURLY 
       expression binary_operator expression // lookahead token appears because binary_operator can begin with VBAR
       primary // lookahead token is inherited
       TOKEN_QUOTE_TRUE . 

** Conflict (reduce/reduce) in state 164.
** Tokens involved: VBAR TOKEN_VBAR_VBAR TOKEN_PLING_QUERY_EQUALS TIMES RPAREN RCURLY QUERY P_XNOR P_SSRIGHT3 P_SRIGHT P_SLEFT3 P_SLEFT P_POW P_NXOR P_NOTEQUAL P_LTE P_GTE P_EQUAL P_CASENOTEQUAL P_CASEEQUAL P_ANDAND PLUS MODULO MINUS LESS GREATER EQUALS_QUERY_EQUALS DIVIDE COMMA COLON CARET AMPERSAND
** The following explanations concentrate on token VBAR.
** This state is reached from start after reading:

source_text_3 RETURN LCURLY TOKEN_QUOTE_X1

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              jump_statement 
              RETURN expression SEMICOLON 
                     primary 
                     (?)

** In state 164, looking ahead at VBAR, reducing production
** constant_primary -> TOKEN_QUOTE_X1
** is permitted because of the following sub-derivation:

LCURLY constant_expression concatenation RCURLY 
       constant_expression binary_operator constant_expression // lookahead token appears because binary_operator can begin with VBAR
       constant_primary // lookahead token is inherited
       TOKEN_QUOTE_X1 . 

** In state 164, looking ahead at VBAR, reducing production
** primary -> TOKEN_QUOTE_X1
** is permitted because of the following sub-derivation:

concatenation 
LCURLY expression concatenation_4 RCURLY 
       expression binary_operator expression // lookahead token appears because binary_operator can begin with VBAR
       primary // lookahead token is inherited
       TOKEN_QUOTE_X1 . 

** Conflict (reduce/reduce) in state 163.
** Tokens involved: VBAR TOKEN_VBAR_VBAR TOKEN_PLING_QUERY_EQUALS TIMES RPAREN RCURLY QUERY P_XNOR P_SSRIGHT3 P_SRIGHT P_SLEFT3 P_SLEFT P_POW P_NXOR P_NOTEQUAL P_LTE P_GTE P_EQUAL P_CASENOTEQUAL P_CASEEQUAL P_ANDAND PLUS MODULO MINUS LESS GREATER EQUALS_QUERY_EQUALS DIVIDE COMMA COLON CARET AMPERSAND
** The following explanations concentrate on token VBAR.
** This state is reached from start after reading:

source_text_3 RETURN LCURLY TOKEN_QUOTE_X2

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              jump_statement 
              RETURN expression SEMICOLON 
                     primary 
                     (?)

** In state 163, looking ahead at VBAR, reducing production
** constant_primary -> TOKEN_QUOTE_X2
** is permitted because of the following sub-derivation:

LCURLY constant_expression concatenation RCURLY 
       constant_expression binary_operator constant_expression // lookahead token appears because binary_operator can begin with VBAR
       constant_primary // lookahead token is inherited
       TOKEN_QUOTE_X2 . 

** In state 163, looking ahead at VBAR, reducing production
** primary -> TOKEN_QUOTE_X2
** is permitted because of the following sub-derivation:

concatenation 
LCURLY expression concatenation_4 RCURLY 
       expression binary_operator expression // lookahead token appears because binary_operator can begin with VBAR
       primary // lookahead token is inherited
       TOKEN_QUOTE_X2 . 

** Conflict (reduce/reduce) in state 162.
** Tokens involved: VBAR TOKEN_VBAR_VBAR TOKEN_PLING_QUERY_EQUALS TIMES RPAREN RCURLY QUERY P_XNOR P_SSRIGHT3 P_SRIGHT P_SLEFT3 P_SLEFT P_POW P_NXOR P_NOTEQUAL P_LTE P_GTE P_EQUAL P_CASENOTEQUAL P_CASEEQUAL P_ANDAND PLUS MODULO MINUS LESS GREATER EQUALS_QUERY_EQUALS DIVIDE COMMA COLON CARET AMPERSAND
** The following explanations concentrate on token VBAR.
** This state is reached from start after reading:

source_text_3 RETURN LCURLY TOKEN_QUOTE_Z1

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              jump_statement 
              RETURN expression SEMICOLON 
                     primary 
                     (?)

** In state 162, looking ahead at VBAR, reducing production
** constant_primary -> TOKEN_QUOTE_Z1
** is permitted because of the following sub-derivation:

LCURLY constant_expression concatenation RCURLY 
       constant_expression binary_operator constant_expression // lookahead token appears because binary_operator can begin with VBAR
       constant_primary // lookahead token is inherited
       TOKEN_QUOTE_Z1 . 

** In state 162, looking ahead at VBAR, reducing production
** primary -> TOKEN_QUOTE_Z1
** is permitted because of the following sub-derivation:

concatenation 
LCURLY expression concatenation_4 RCURLY 
       expression binary_operator expression // lookahead token appears because binary_operator can begin with VBAR
       primary // lookahead token is inherited
       TOKEN_QUOTE_Z1 . 

** Conflict (reduce/reduce) in state 161.
** Tokens involved: VBAR TOKEN_VBAR_VBAR TOKEN_PLING_QUERY_EQUALS TIMES RPAREN RCURLY QUERY P_XNOR P_SSRIGHT3 P_SRIGHT P_SLEFT3 P_SLEFT P_POW P_NXOR P_NOTEQUAL P_LTE P_GTE P_EQUAL P_CASENOTEQUAL P_CASEEQUAL P_ANDAND PLUS MODULO MINUS LESS GREATER EQUALS_QUERY_EQUALS DIVIDE COMMA COLON CARET AMPERSAND
** The following explanations concentrate on token VBAR.
** This state is reached from start after reading:

source_text_3 RETURN LCURLY TOKEN_QUOTE_Z2

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              jump_statement 
              RETURN expression SEMICOLON 
                     primary 
                     (?)

** In state 161, looking ahead at VBAR, reducing production
** constant_primary -> TOKEN_QUOTE_Z2
** is permitted because of the following sub-derivation:

LCURLY constant_expression concatenation RCURLY 
       constant_expression binary_operator constant_expression // lookahead token appears because binary_operator can begin with VBAR
       constant_primary // lookahead token is inherited
       TOKEN_QUOTE_Z2 . 

** In state 161, looking ahead at VBAR, reducing production
** primary -> TOKEN_QUOTE_Z2
** is permitted because of the following sub-derivation:

concatenation 
LCURLY expression concatenation_4 RCURLY 
       expression binary_operator expression // lookahead token appears because binary_operator can begin with VBAR
       primary // lookahead token is inherited
       TOKEN_QUOTE_Z2 . 

** Conflict (shift/reduce/reduce) in state 160.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 RETURN LCURLY

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              jump_statement 
              RETURN expression SEMICOLON 
                     (?)

** In state 160, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

inc_or_dec_expression 
variable_lvalue inc_or_dec_operator 
LCURLY variable_lvalue variable_lvalue_8 RCURLY 
       hierarchical_identifier variable_lvalue_3 
       . SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 160, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

primary 
concatenation 
LCURLY expression concatenation_4 RCURLY 
       primary 
       implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
       . 

** In state 160, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

primary 
concatenation 
LCURLY expression concatenation_4 RCURLY 
       primary 
       implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
       . 

** Conflict (shift/reduce/reduce) in state 157.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 RETURN LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              jump_statement 
              RETURN expression SEMICOLON 
                     (?)

** In state 157, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

LPAREN variable_lvalue assignment_operator expression RPAREN 
       hierarchical_identifier variable_lvalue_3 
       . SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 157, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

primary 
LPAREN mintypmax_expression RPAREN 
       expression 
       primary 
       implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
       . 

** In state 157, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

primary 
LPAREN mintypmax_expression RPAREN 
       expression 
       primary 
       implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
       . 

** Conflict (shift/reduce) in state 151.
** Tokens involved: TOKEN_TWO TOKEN_THREE TOKEN_SIX TOKEN_SEVEN TOKEN_ONE TOKEN_FOUR TOKEN_FIVE
** The following explanations concentrate on token TOKEN_TWO.
** This state is reached from start after reading:

source_text_3 clockvar_expression P_LTE P_POUNDPOUND OCTAL_BASE octal_digit

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              clocking_drive 
              (?)

** In state 151, looking ahead at TOKEN_TWO, shifting is permitted
** because of the following sub-derivation:

clockvar_expression P_LTE P_POUNDPOUND expression expression 
                                       primary 
                                       number 
                                       OCTAL_BASE octal_digit octal_value_3 
                                                              octal_digit 
                                                              . TOKEN_TWO 

** In state 151, looking ahead at TOKEN_TWO, reducing production
** octal_value_3 ->
** is permitted because of the following sub-derivation:

clockvar_expression P_LTE P_POUNDPOUND expression expression // lookahead token appears because expression can begin with TOKEN_TWO
                                       primary // lookahead token is inherited
                                       number // lookahead token is inherited
                                       OCTAL_BASE octal_digit octal_value_3 // lookahead token is inherited
                                                              . 

** Conflict (reduce/reduce) in state 128.
** Tokens involved: XOR XNOR WOR WITHIN WIRE WHILE WAND WAIT_ORDER WAIT VOID VIRTUAL VBAR_DASH_GT VBAR UNSIGNED_NUMBER UNSIGNED UNIQUE UNION TYPEDEF TRIREG TRIOR TRIAND TRI1 TRI0 TRI TRANIF1 TRANIF0 TRAN TOKEN_VBAR_VBAR TOKEN_TWO TOKEN_THREE TOKEN_SIX TOKEN_SEVEN TOKEN_QUOTE_Z2 TOKEN_QUOTE_Z1 TOKEN_QUOTE_X2 TOKEN_QUOTE_X1 TOKEN_QUOTE_TRUE TOKEN_QUOTE_FALSE TOKEN_PLUS_PLUS TOKEN_PLING_QUERY_EQUALS TOKEN_PLING_EQUALS_GT TOKEN_ONE TOKEN_NINE TOKEN_LBRACK_STAR_EQUALS TOKEN_FOUR TOKEN_FIVE TOKEN_EIGHT TOKEN_DASH_DASH TIMES TIME TILDE_VBAR TILDE THROUGHOUT THIS TASK SYSTEM_TASK_IDENTIFIER SYSTEM_FUNCTION_IDENTIFIER SVINT SUPPLY1 SUPPLY0 SUPER STRUCT STRING STATIC SPECPARAM SPECIFY SIMPLE_IDENTIFIER SIGNED SHORTREAL SHORTINT SEQUENCE SEMICOLON RTRANIF1 RTRANIF0 RTRAN RPMOS RPAREN RNMOS RETURN REPEAT RELEASE REG REF REALTIME REAL RCURLY RCMOS RBRACK QUERY P_XNOR P_SSRIGHT3 P_SRIGHT P_SLEFT3 P_SLEFT P_POW P_POUNDPOUND P_PLUSCOLON P_NXOR P_NOTEQUAL P_NAND P_MINUSGT P_MINUSCOLON P_LTE P_GTE P_EQUAL P_EQGT P_COLONEQ P_COLONDIV P_CASENOTEQUAL P_CASEEQUAL P_ANDAND PULLUP PULLDOWN PROPERTY PROGRAM PRIORITY PRIMITIVE PMOS PLUS PLING PARAMETER OUTPUT OR OCTAL_BASE NULL NOTIF1 NOTIF0 NOT NOR NMOS NAND MODULO MODULE MODPORT MINUS MACROMODULE LPAREN LONGINT LOGIC LOCALPARAM LESS LCURLY LBRACK_STAR_DASH_GT LBRACK_STAR LBRACK JOIN_NONE JOIN_ANY JOIN INTERSECT INTERFACE INTEGER INSIDE INPUT INOUT INITIAL IMPORT IFF IF HEX_BASE HASH GREATER GENVAR GENERATE FUNCTION FORK FOREVER FORCE FOR FINAL EXTERN EXPORT EVENT EQUALS_QUERY_EQUALS EQUALS ENUM ENDTASK ENDPROGRAM ENDMODULE ENDINTERFACE ENDGENERATE ENDCASE END ELSE DOUBLE_QUOTES DOT DO DIVIDE DIST DISABLE DEFPARAM DEFAULT DECIMAL_BASE DEASSIGN DASH_GT_GT COVER CONTINUE CONSTRAINT CONST COMMA COLON CMOS CLOCKING CLASS CHANDLE CASEZ CASEX CASE CARET BYTE BUFIF1 BUFIF0 BUF BREAK BIT BIND BINARY_BASE BEGIN BACKSLASH AUTOMATIC AT_STAR AT ASSIGN ASSERT AND AMPERSAND ALWAYS_LATCH ALWAYS_FF ALWAYS_COMB ALWAYS ALIAS #
** The following explanations concentrate on token LBRACK.
** This state is reached from start after reading:

source_text_3 SIMPLE_IDENTIFIER

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              (?)

** In state 128, looking ahead at LBRACK, reducing production
** identifier -> SIMPLE_IDENTIFIER
** is permitted because of the following sub-derivation:

module_root_item 
module_common_item 
module_or_generate_item_declaration 
data_declaration 
data_type list_of_variable_identifiers_or_assignments SEMICOLON 
identifier type_declaration_identifier_3 data_type_11 // lookahead token appears because type_declaration_identifier_3 can begin with LBRACK
SIMPLE_IDENTIFIER . 

** In state 128, looking ahead at LBRACK, reducing production
** simple_hierarchical_branch_3 ->
** is permitted because of the following sub-derivation:

statement_or_null 
statement_item 
variable_lvalue P_LTE expression SEMICOLON 
hierarchical_identifier variable_lvalue_3 // lookahead token appears because variable_lvalue_3 can begin with LBRACK
SIMPLE_IDENTIFIER simple_hierarchical_branch_3 // lookahead token is inherited
                  . 

** Conflict (shift/reduce/reduce) in state 124.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 RETURN SYSTEM_FUNCTION_IDENTIFIER LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              jump_statement 
              RETURN expression SEMICOLON 
                     primary 
                     SYSTEM_FUNCTION_IDENTIFIER LPAREN expression system_function_call_3_5 RPAREN 
                                                       primary 
                                                       (?)

** In state 124, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 124, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 124, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce) in state 123.
** Token involved: LPAREN
** This state is reached from start after reading:

source_text_3 clockvar_expression P_LTE P_POUNDPOUND SYSTEM_FUNCTION_IDENTIFIER

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              clocking_drive 
              (?)

** In state 123, looking ahead at LPAREN, reducing production
** primary -> SYSTEM_FUNCTION_IDENTIFIER
** is permitted because of the following sub-derivation:

clockvar_expression P_LTE P_POUNDPOUND expression expression // lookahead token appears because expression can begin with LPAREN
                                       primary // lookahead token is inherited
                                       SYSTEM_FUNCTION_IDENTIFIER . 

** In state 123, looking ahead at LPAREN, shifting is permitted
** because of the following sub-derivation:

clockvar_expression P_LTE P_POUNDPOUND expression expression 
                                       primary 
                                       SYSTEM_FUNCTION_IDENTIFIER . LPAREN expression system_function_call_3_5 RPAREN 

** Conflict (shift/reduce/reduce) in state 85.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 RETURN VOID SQUOTE LPAREN hierarchical_identifier LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              jump_statement 
              RETURN expression SEMICOLON 
                     primary 
                     VOID SQUOTE LPAREN hierarchical_identifier LPAREN list_of_arguments RPAREN RPAREN 
                                                                       expression list_of_arguments_3 
                                                                       primary 
                                                                       (?)

** In state 85, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 85, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 85, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** Conflict (shift/reduce) in state 82.
** Token involved: DOT
** This state is reached from start after reading:

source_text_3 TYPEDEF BACKSLASH TOKEN_ANY_ASCII white_space escaped_hierarchical_branch_3 escaped_hierarchical_branch_4_3 escaped_hierarchical_identifier_3

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              data_declaration 
              type_declaration 
              (?)

** In state 82, looking ahead at DOT, shifting is permitted
** because of the following sub-derivation:

TYPEDEF hierarchical_identifier DOT identifier identifier type_declaration_identifier_3 SEMICOLON 
        BACKSLASH TOKEN_ANY_ASCII white_space escaped_hierarchical_branch_3 escaped_hierarchical_branch_4_3 escaped_hierarchical_identifier_3 
                                                                                                            escaped_hierarchical_identifier_3 . DOT SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 82, looking ahead at DOT, reducing production
** hierarchical_identifier -> BACKSLASH TOKEN_ANY_ASCII white_space escaped_hierarchical_branch_3 escaped_hierarchical_branch_4_3 escaped_hierarchical_identifier_3
** is permitted because of the following sub-derivation:

TYPEDEF hierarchical_identifier DOT identifier identifier type_declaration_identifier_3 SEMICOLON // lookahead token appears
        BACKSLASH TOKEN_ANY_ASCII white_space escaped_hierarchical_branch_3 escaped_hierarchical_branch_4_3 escaped_hierarchical_identifier_3 . 

** Conflict (reduce/reduce) in state 81.
** Tokens involved: XOR XNOR WOR WITHIN WIRE WHILE WAND WAIT_ORDER WAIT VOID VIRTUAL VBAR_DASH_GT VBAR UNSIGNED_NUMBER UNSIGNED UNIQUE UNION TYPEDEF TRIREG TRIOR TRIAND TRI1 TRI0 TRI TRANIF1 TRANIF0 TRAN TOKEN_VBAR_VBAR TOKEN_VBAR_EQUALS TOKEN_TWO TOKEN_THREE TOKEN_SIX TOKEN_SEVEN TOKEN_QUOTE_Z2 TOKEN_QUOTE_Z1 TOKEN_QUOTE_X2 TOKEN_QUOTE_X1 TOKEN_QUOTE_TRUE TOKEN_QUOTE_FALSE TOKEN_PLUS_PLUS TOKEN_PLING_QUERY_EQUALS TOKEN_PLING_EQUALS_GT TOKEN_ONE TOKEN_NINE TOKEN_LBRACK_STAR_EQUALS TOKEN_FOUR TOKEN_FIVE TOKEN_EIGHT TOKEN_DASH_DASH TIMES TIME TILDE_VBAR TILDE THROUGHOUT THIS TASK SYSTEM_TASK_IDENTIFIER SYSTEM_FUNCTION_IDENTIFIER SVINT SUPPLY1 SUPPLY0 SUPER STRUCT STRING STATIC SPECPARAM SPECIFY SIMPLE_IDENTIFIER SIGNED SHORTREAL SHORTINT SEQUENCE SEMICOLON RTRANIF1 RTRANIF0 RTRAN RPMOS RPAREN RNMOS RETURN REPEAT RELEASE REG REF REALTIME REAL RCURLY RCMOS RBRACK QUERY P_XOREQ P_XNOR P_TIMESEQ P_SSRIGHT3EQ P_SSRIGHT3 P_SRIGHTEQ P_SRIGHT P_SLEFTEQ P_SLEFT3EQ P_SLEFT3 P_SLEFT P_POW P_POUNDPOUND P_PLUSEQ P_PLUSCOLON P_NXOR P_NOTEQUAL P_NAND P_MODEQ P_MINUSGT P_MINUSEQ P_MINUSCOLON P_LTE P_GTE P_EQUAL P_EQGT P_DIVEQ P_COLONEQ P_COLONDIV P_CASENOTEQUAL P_CASEEQUAL P_ANDEQ P_ANDAND PULLUP PULLDOWN PROPERTY PROGRAM PRIORITY PRIMITIVE PMOS PLUS PLING PARAMETER OUTPUT OR OCTAL_BASE NULL NOTIF1 NOTIF0 NOT NOR NMOS NAND MODULO MODULE MODPORT MINUS MACROMODULE LPAREN LONGINT LOGIC LOCALPARAM LESS LCURLY LBRACK_STAR_DASH_GT LBRACK_STAR LBRACK JOIN_NONE JOIN_ANY JOIN INTERSECT INTERFACE INTEGER INSIDE INPUT INOUT INITIAL IMPORT IFF IF HEX_BASE HASH GREATER GENVAR GENERATE FUNCTION FORK FOREVER FORCE FOR FINAL EXTERN EXPORT EVENT EQUALS_QUERY_EQUALS EQUALS ENUM ENDTASK ENDPROGRAM ENDMODULE ENDINTERFACE ENDGENERATE ENDCASE END ELSE DOUBLE_QUOTES DOT DO DIVIDE DIST DISABLE DEFPARAM DEFAULT DECIMAL_BASE DEASSIGN DASH_GT_GT COVER CONTINUE CONSTRAINT CONST COMMA COLON CMOS CLOCKING CLASS CHANDLE CASEZ CASEX CASE CARET BYTE BUFIF1 BUFIF0 BUF BREAK BIT BIND BINARY_BASE BEGIN BACKSLASH AUTOMATIC AT_STAR AT ASSIGN ASSERT AND AMPERSAND ALWAYS_LATCH ALWAYS_FF ALWAYS_COMB ALWAYS ALIAS #
** The following explanations concentrate on token TOKEN_VBAR_EQUALS.
** This state is reached from start after reading:

source_text_3 BACKSLASH TOKEN_ANY_ASCII white_space escaped_hierarchical_branch_3 escaped_hierarchical_branch_4_3 DOT BACKSLASH TOKEN_ANY_ASCII white_space

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              blocking_assignment SEMICOLON 
              variable_lvalue assignment_operator expression // lookahead token appears because assignment_operator can begin with TOKEN_VBAR_EQUALS
              hierarchical_identifier variable_lvalue_3 // lookahead token is inherited because variable_lvalue_3 can vanish
              (?)

** In state 81, looking ahead at TOKEN_VBAR_EQUALS, reducing production
** escaped_hierarchical_branch_3 ->
** is permitted because of the following sub-derivation:

BACKSLASH TOKEN_ANY_ASCII white_space escaped_hierarchical_branch_3 escaped_hierarchical_branch_4_3 escaped_hierarchical_identifier_3 // lookahead token is inherited
                                                                                                    DOT BACKSLASH TOKEN_ANY_ASCII white_space escaped_hierarchical_branch_3 // lookahead token is inherited
                                                                                                                                              . 

** In state 81, looking ahead at TOKEN_VBAR_EQUALS, reducing production
** escaped_hierarchical_branch_4_3_6 ->
** is permitted because of the following sub-derivation:

BACKSLASH TOKEN_ANY_ASCII white_space escaped_hierarchical_branch_3 escaped_hierarchical_branch_4_3 escaped_hierarchical_identifier_3 // lookahead token is inherited because escaped_hierarchical_identifier_3 can vanish
                                                                    escaped_hierarchical_branch_4_3 DOT BACKSLASH TOKEN_ANY_ASCII white_space escaped_hierarchical_branch_4_3_6 // lookahead token is inherited
                                                                                                                                              . 

** Conflict (shift/reduce) in state 77.
** Token involved: DOT
** This state is reached from start after reading:

source_text_3 BACKSLASH TOKEN_ANY_ASCII white_space escaped_hierarchical_branch_3 escaped_hierarchical_branch_4_3

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              hierarchical_identifier SEMICOLON 
              (?)

** In state 77, looking ahead at DOT, shifting is permitted
** because of the following sub-derivation:

BACKSLASH TOKEN_ANY_ASCII white_space escaped_hierarchical_branch_3 escaped_hierarchical_branch_4_3 escaped_hierarchical_identifier_3 
                                                                    escaped_hierarchical_branch_4_3 . DOT BACKSLASH TOKEN_ANY_ASCII white_space escaped_hierarchical_branch_4_3_6 

** In state 77, looking ahead at DOT, reducing production
** escaped_hierarchical_identifier_3 ->
** is permitted because of the following sub-derivation:

BACKSLASH TOKEN_ANY_ASCII white_space escaped_hierarchical_branch_3 escaped_hierarchical_branch_4_3 escaped_hierarchical_identifier_3 
                                                                                                    escaped_hierarchical_identifier_3 DOT SIMPLE_IDENTIFIER simple_hierarchical_branch_3 // lookahead token appears
                                                                                                    . 

** Conflict (shift/reduce) in state 75.
** Token involved: DOT
** This state is reached from start after reading:

source_text_3 BACKSLASH TOKEN_ANY_ASCII white_space escaped_hierarchical_branch_3 escaped_hierarchical_identifier_3 DOT SIMPLE_IDENTIFIER simple_hierarchical_branch_3 simple_hierarchical_branch_4_3

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              hierarchical_identifier SEMICOLON 
              BACKSLASH TOKEN_ANY_ASCII white_space escaped_hierarchical_branch_3 escaped_hierarchical_identifier_3 
                                                                                  (?)

** In state 75, looking ahead at DOT, reducing production
** escaped_hierarchical_identifier_3 -> escaped_hierarchical_identifier_3 DOT SIMPLE_IDENTIFIER simple_hierarchical_branch_3 simple_hierarchical_branch_4_3
** is permitted because of the following sub-derivation:

escaped_hierarchical_identifier_3 DOT SIMPLE_IDENTIFIER simple_hierarchical_branch_3 // lookahead token appears
escaped_hierarchical_identifier_3 DOT SIMPLE_IDENTIFIER simple_hierarchical_branch_3 simple_hierarchical_branch_4_3 . 

** In state 75, looking ahead at DOT, shifting is permitted
** because of the following sub-derivation:

escaped_hierarchical_identifier_3 DOT SIMPLE_IDENTIFIER simple_hierarchical_branch_3 simple_hierarchical_branch_4_3 
                                                                                     simple_hierarchical_branch_4_3 . DOT SIMPLE_IDENTIFIER simple_hierarchical_branch_4_3_6 

** Conflict (shift/reduce/reduce) in state 74.
** Tokens involved: XOR XNOR WOR WITHIN WIRE WHILE WAND WAIT_ORDER WAIT VOID VIRTUAL VBAR_DASH_GT VBAR UNSIGNED_NUMBER UNSIGNED UNIQUE UNION TYPEDEF TRIREG TRIOR TRIAND TRI1 TRI0 TRI TRANIF1 TRANIF0 TRAN TOKEN_VBAR_VBAR TOKEN_VBAR_EQUALS TOKEN_TWO TOKEN_THREE TOKEN_SIX TOKEN_SEVEN TOKEN_QUOTE_Z2 TOKEN_QUOTE_Z1 TOKEN_QUOTE_X2 TOKEN_QUOTE_X1 TOKEN_QUOTE_TRUE TOKEN_QUOTE_FALSE TOKEN_PLUS_PLUS TOKEN_PLING_QUERY_EQUALS TOKEN_PLING_EQUALS_GT TOKEN_ONE TOKEN_NINE TOKEN_LBRACK_STAR_EQUALS TOKEN_FOUR TOKEN_FIVE TOKEN_EIGHT TOKEN_DASH_DASH TIMES TIME TILDE_VBAR TILDE THROUGHOUT THIS TASK SYSTEM_TASK_IDENTIFIER SYSTEM_FUNCTION_IDENTIFIER SVINT SUPPLY1 SUPPLY0 SUPER STRUCT STRING STATIC SPECPARAM SPECIFY SIMPLE_IDENTIFIER SIGNED SHORTREAL SHORTINT SEQUENCE SEMICOLON RTRANIF1 RTRANIF0 RTRAN RPMOS RPAREN RNMOS RETURN REPEAT RELEASE REG REF REALTIME REAL RCURLY RCMOS RBRACK QUERY P_XOREQ P_XNOR P_TIMESEQ P_SSRIGHT3EQ P_SSRIGHT3 P_SRIGHTEQ P_SRIGHT P_SLEFTEQ P_SLEFT3EQ P_SLEFT3 P_SLEFT P_POW P_POUNDPOUND P_PLUSEQ P_PLUSCOLON P_NXOR P_NOTEQUAL P_NAND P_MODEQ P_MINUSGT P_MINUSEQ P_MINUSCOLON P_LTE P_GTE P_EQUAL P_EQGT P_DIVEQ P_COLONEQ P_COLONDIV P_CASENOTEQUAL P_CASEEQUAL P_ANDEQ P_ANDAND PULLUP PULLDOWN PROPERTY PROGRAM PRIORITY PRIMITIVE PMOS PLUS PLING PARAMETER OUTPUT OR OCTAL_BASE NULL NOTIF1 NOTIF0 NOT NOR NMOS NAND MODULO MODULE MODPORT MINUS MACROMODULE LPAREN LONGINT LOGIC LOCALPARAM LESS LCURLY LBRACK_STAR_DASH_GT LBRACK_STAR LBRACK JOIN_NONE JOIN_ANY JOIN INTERSECT INTERFACE INTEGER INSIDE INPUT INOUT INITIAL IMPORT IFF IF HEX_BASE HASH GREATER GENVAR GENERATE FUNCTION FORK FOREVER FORCE FOR FINAL EXTERN EXPORT EVENT EQUALS_QUERY_EQUALS EQUALS ENUM ENDTASK ENDPROGRAM ENDMODULE ENDINTERFACE ENDGENERATE ENDCASE END ELSE DOUBLE_QUOTES DOT DO DIVIDE DIST DISABLE DEFPARAM DEFAULT DECIMAL_BASE DEASSIGN DASH_GT_GT COVER CONTINUE CONSTRAINT CONST COMMA COLON CMOS CLOCKING CLASS CHANDLE CASEZ CASEX CASE CARET BYTE BUFIF1 BUFIF0 BUF BREAK BIT BIND BINARY_BASE BEGIN BACKSLASH AUTOMATIC AT_STAR AT ASSIGN ASSERT AND AMPERSAND ALWAYS_LATCH ALWAYS_FF ALWAYS_COMB ALWAYS ALIAS #
** The following explanations concentrate on token LBRACK.
** This state is reached from start after reading:

source_text_3 BACKSLASH TOKEN_ANY_ASCII white_space escaped_hierarchical_branch_3 escaped_hierarchical_identifier_3 DOT SIMPLE_IDENTIFIER simple_hierarchical_branch_3

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              (?)

** In state 74, looking ahead at LBRACK, reducing production
** escaped_hierarchical_identifier_3 -> escaped_hierarchical_identifier_3 DOT SIMPLE_IDENTIFIER simple_hierarchical_branch_3
** is permitted because of the following sub-derivation:

variable_lvalue P_LTE expression SEMICOLON 
hierarchical_identifier variable_lvalue_3 // lookahead token appears because variable_lvalue_3 can begin with LBRACK
BACKSLASH TOKEN_ANY_ASCII white_space escaped_hierarchical_branch_3 escaped_hierarchical_identifier_3 // lookahead token is inherited
                                                                    escaped_hierarchical_identifier_3 DOT SIMPLE_IDENTIFIER simple_hierarchical_branch_3 . 

** In state 74, looking ahead at LBRACK, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier SEMICOLON 
BACKSLASH TOKEN_ANY_ASCII white_space escaped_hierarchical_branch_3 escaped_hierarchical_identifier_3 
                                                                    escaped_hierarchical_identifier_3 DOT SIMPLE_IDENTIFIER simple_hierarchical_branch_3 
                                                                                                                            simple_hierarchical_branch_3 . LBRACK UNSIGNED_NUMBER RBRACK 

** In state 74, looking ahead at LBRACK, reducing production
** simple_hierarchical_branch_4_3 ->
** is permitted because of the following sub-derivation:

variable_lvalue P_LTE expression SEMICOLON 
hierarchical_identifier variable_lvalue_3 // lookahead token appears because variable_lvalue_3 can begin with LBRACK
BACKSLASH TOKEN_ANY_ASCII white_space escaped_hierarchical_branch_3 escaped_hierarchical_identifier_3 // lookahead token is inherited
                                                                    escaped_hierarchical_identifier_3 DOT SIMPLE_IDENTIFIER simple_hierarchical_branch_3 simple_hierarchical_branch_4_3 // lookahead token is inherited
                                                                                                                                                         . 

** Conflict (shift/reduce) in state 71.
** Token involved: DOT
** This state is reached from start after reading:

source_text_3 TYPEDEF BACKSLASH TOKEN_ANY_ASCII white_space escaped_hierarchical_branch_3 escaped_hierarchical_identifier_3

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              data_declaration 
              type_declaration 
              (?)

** In state 71, looking ahead at DOT, shifting is permitted
** because of the following sub-derivation:

TYPEDEF hierarchical_identifier DOT identifier identifier type_declaration_identifier_3 SEMICOLON 
        BACKSLASH TOKEN_ANY_ASCII white_space escaped_hierarchical_branch_3 escaped_hierarchical_identifier_3 
                                                                            escaped_hierarchical_identifier_3 . DOT SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 71, looking ahead at DOT, reducing production
** hierarchical_identifier -> BACKSLASH TOKEN_ANY_ASCII white_space escaped_hierarchical_branch_3 escaped_hierarchical_identifier_3
** is permitted because of the following sub-derivation:

TYPEDEF hierarchical_identifier DOT identifier identifier type_declaration_identifier_3 SEMICOLON // lookahead token appears
        BACKSLASH TOKEN_ANY_ASCII white_space escaped_hierarchical_branch_3 escaped_hierarchical_identifier_3 . 

** Conflict (shift/reduce) in state 67.
** Token involved: LBRACK
** This state is reached from start after reading:

source_text_3 BACKSLASH TOKEN_ANY_ASCII white_space escaped_hierarchical_branch_3 escaped_hierarchical_branch_4_3 DOT BACKSLASH TOKEN_ANY_ASCII white_space escaped_hierarchical_branch_4_3_6

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              (?)

** In state 67, looking ahead at LBRACK, reducing production
** escaped_hierarchical_branch_4_3 -> escaped_hierarchical_branch_4_3 DOT BACKSLASH TOKEN_ANY_ASCII white_space escaped_hierarchical_branch_4_3_6
** is permitted because of the following sub-derivation:

variable_lvalue P_LTE expression SEMICOLON 
hierarchical_identifier variable_lvalue_3 // lookahead token appears because variable_lvalue_3 can begin with LBRACK
BACKSLASH TOKEN_ANY_ASCII white_space escaped_hierarchical_branch_3 escaped_hierarchical_branch_4_3 escaped_hierarchical_identifier_3 // lookahead token is inherited because escaped_hierarchical_identifier_3 can vanish
                                                                    escaped_hierarchical_branch_4_3 DOT BACKSLASH TOKEN_ANY_ASCII white_space escaped_hierarchical_branch_4_3_6 . 

** In state 67, looking ahead at LBRACK, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier SEMICOLON 
BACKSLASH TOKEN_ANY_ASCII white_space escaped_hierarchical_branch_3 escaped_hierarchical_branch_4_3 escaped_hierarchical_identifier_3 
                                                                    escaped_hierarchical_branch_4_3 DOT BACKSLASH TOKEN_ANY_ASCII white_space escaped_hierarchical_branch_4_3_6 
                                                                                                                                              escaped_hierarchical_branch_4_3_6 . LBRACK UNSIGNED_NUMBER RBRACK 

** Conflict (shift/reduce) in state 62.
** Token involved: DOT
** This state is reached from start after reading:

source_text_3 BACKSLASH TOKEN_ANY_ASCII white_space escaped_hierarchical_branch_3 DOT BACKSLASH TOKEN_ANY_ASCII white_space escaped_hierarchical_branch_3 escaped_hierarchical_branch_4_3

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              hierarchical_identifier SEMICOLON 
              BACKSLASH TOKEN_ANY_ASCII white_space escaped_hierarchical_branch_3 escaped_hierarchical_identifier_3 
                                                                                  (?)

** In state 62, looking ahead at DOT, shifting is permitted
** because of the following sub-derivation:

DOT BACKSLASH TOKEN_ANY_ASCII white_space escaped_hierarchical_branch_3 escaped_hierarchical_branch_4_3 
                                                                        escaped_hierarchical_branch_4_3 . DOT BACKSLASH TOKEN_ANY_ASCII white_space escaped_hierarchical_branch_4_3_6 

** In state 62, looking ahead at DOT, reducing production
** escaped_hierarchical_identifier_3 -> DOT BACKSLASH TOKEN_ANY_ASCII white_space escaped_hierarchical_branch_3 escaped_hierarchical_branch_4_3
** is permitted because of the following sub-derivation:

escaped_hierarchical_identifier_3 DOT SIMPLE_IDENTIFIER simple_hierarchical_branch_3 // lookahead token appears
DOT BACKSLASH TOKEN_ANY_ASCII white_space escaped_hierarchical_branch_3 escaped_hierarchical_branch_4_3 . 

** Conflict (shift/reduce/reduce) in state 61.
** Tokens involved: XOR XNOR WOR WITHIN WIRE WHILE WAND WAIT_ORDER WAIT VOID VIRTUAL VBAR_DASH_GT VBAR UNSIGNED_NUMBER UNSIGNED UNIQUE UNION TYPEDEF TRIREG TRIOR TRIAND TRI1 TRI0 TRI TRANIF1 TRANIF0 TRAN TOKEN_VBAR_VBAR TOKEN_VBAR_EQUALS TOKEN_TWO TOKEN_THREE TOKEN_SIX TOKEN_SEVEN TOKEN_QUOTE_Z2 TOKEN_QUOTE_Z1 TOKEN_QUOTE_X2 TOKEN_QUOTE_X1 TOKEN_QUOTE_TRUE TOKEN_QUOTE_FALSE TOKEN_PLUS_PLUS TOKEN_PLING_QUERY_EQUALS TOKEN_PLING_EQUALS_GT TOKEN_ONE TOKEN_NINE TOKEN_LBRACK_STAR_EQUALS TOKEN_FOUR TOKEN_FIVE TOKEN_EIGHT TOKEN_DASH_DASH TIMES TIME TILDE_VBAR TILDE THROUGHOUT THIS TASK SYSTEM_TASK_IDENTIFIER SYSTEM_FUNCTION_IDENTIFIER SVINT SUPPLY1 SUPPLY0 SUPER STRUCT STRING STATIC SPECPARAM SPECIFY SIMPLE_IDENTIFIER SIGNED SHORTREAL SHORTINT SEQUENCE SEMICOLON RTRANIF1 RTRANIF0 RTRAN RPMOS RPAREN RNMOS RETURN REPEAT RELEASE REG REF REALTIME REAL RCURLY RCMOS RBRACK QUERY P_XOREQ P_XNOR P_TIMESEQ P_SSRIGHT3EQ P_SSRIGHT3 P_SRIGHTEQ P_SRIGHT P_SLEFTEQ P_SLEFT3EQ P_SLEFT3 P_SLEFT P_POW P_POUNDPOUND P_PLUSEQ P_PLUSCOLON P_NXOR P_NOTEQUAL P_NAND P_MODEQ P_MINUSGT P_MINUSEQ P_MINUSCOLON P_LTE P_GTE P_EQUAL P_EQGT P_DIVEQ P_COLONEQ P_COLONDIV P_CASENOTEQUAL P_CASEEQUAL P_ANDEQ P_ANDAND PULLUP PULLDOWN PROPERTY PROGRAM PRIORITY PRIMITIVE PMOS PLUS PLING PARAMETER OUTPUT OR OCTAL_BASE NULL NOTIF1 NOTIF0 NOT NOR NMOS NAND MODULO MODULE MODPORT MINUS MACROMODULE LPAREN LONGINT LOGIC LOCALPARAM LESS LCURLY LBRACK_STAR_DASH_GT LBRACK_STAR LBRACK JOIN_NONE JOIN_ANY JOIN INTERSECT INTERFACE INTEGER INSIDE INPUT INOUT INITIAL IMPORT IFF IF HEX_BASE HASH GREATER GENVAR GENERATE FUNCTION FORK FOREVER FORCE FOR FINAL EXTERN EXPORT EVENT EQUALS_QUERY_EQUALS EQUALS ENUM ENDTASK ENDPROGRAM ENDMODULE ENDINTERFACE ENDGENERATE ENDCASE END ELSE DOUBLE_QUOTES DOT DO DIVIDE DIST DISABLE DEFPARAM DEFAULT DECIMAL_BASE DEASSIGN DASH_GT_GT COVER CONTINUE CONSTRAINT CONST COMMA COLON CMOS CLOCKING CLASS CHANDLE CASEZ CASEX CASE CARET BYTE BUFIF1 BUFIF0 BUF BREAK BIT BIND BINARY_BASE BEGIN BACKSLASH AUTOMATIC AT_STAR AT ASSIGN ASSERT AND AMPERSAND ALWAYS_LATCH ALWAYS_FF ALWAYS_COMB ALWAYS ALIAS #
** The following explanations concentrate on token LBRACK.
** This state is reached from start after reading:

source_text_3 BACKSLASH TOKEN_ANY_ASCII white_space escaped_hierarchical_branch_3 DOT BACKSLASH TOKEN_ANY_ASCII white_space escaped_hierarchical_branch_3

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              (?)

** In state 61, looking ahead at LBRACK, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier SEMICOLON 
BACKSLASH TOKEN_ANY_ASCII white_space escaped_hierarchical_branch_3 escaped_hierarchical_identifier_3 
                                                                    DOT BACKSLASH TOKEN_ANY_ASCII white_space escaped_hierarchical_branch_3 
                                                                                                              escaped_hierarchical_branch_3 . LBRACK UNSIGNED_NUMBER RBRACK 

** In state 61, looking ahead at LBRACK, reducing production
** escaped_hierarchical_branch_4_3 ->
** is permitted because of the following sub-derivation:

variable_lvalue P_LTE expression SEMICOLON 
hierarchical_identifier variable_lvalue_3 // lookahead token appears because variable_lvalue_3 can begin with LBRACK
BACKSLASH TOKEN_ANY_ASCII white_space escaped_hierarchical_branch_3 escaped_hierarchical_identifier_3 // lookahead token is inherited
                                                                    DOT BACKSLASH TOKEN_ANY_ASCII white_space escaped_hierarchical_branch_3 escaped_hierarchical_branch_4_3 // lookahead token is inherited
                                                                                                                                            . 

** In state 61, looking ahead at LBRACK, reducing production
** escaped_hierarchical_identifier_3 -> DOT BACKSLASH TOKEN_ANY_ASCII white_space escaped_hierarchical_branch_3
** is permitted because of the following sub-derivation:

variable_lvalue P_LTE expression SEMICOLON 
hierarchical_identifier variable_lvalue_3 // lookahead token appears because variable_lvalue_3 can begin with LBRACK
BACKSLASH TOKEN_ANY_ASCII white_space escaped_hierarchical_branch_3 escaped_hierarchical_identifier_3 // lookahead token is inherited
                                                                    DOT BACKSLASH TOKEN_ANY_ASCII white_space escaped_hierarchical_branch_3 . 

** Conflict (shift/reduce/reduce) in state 53.
** Tokens involved: XOR XNOR WOR WITHIN WIRE WHILE WAND WAIT_ORDER WAIT VOID VIRTUAL VBAR_DASH_GT VBAR UNSIGNED_NUMBER UNSIGNED UNIQUE UNION TYPEDEF TRIREG TRIOR TRIAND TRI1 TRI0 TRI TRANIF1 TRANIF0 TRAN TOKEN_VBAR_VBAR TOKEN_VBAR_EQUALS TOKEN_TWO TOKEN_THREE TOKEN_SIX TOKEN_SEVEN TOKEN_QUOTE_Z2 TOKEN_QUOTE_Z1 TOKEN_QUOTE_X2 TOKEN_QUOTE_X1 TOKEN_QUOTE_TRUE TOKEN_QUOTE_FALSE TOKEN_PLUS_PLUS TOKEN_PLING_QUERY_EQUALS TOKEN_PLING_EQUALS_GT TOKEN_ONE TOKEN_NINE TOKEN_LBRACK_STAR_EQUALS TOKEN_FOUR TOKEN_FIVE TOKEN_EIGHT TOKEN_DASH_DASH TIMES TIME TILDE_VBAR TILDE THROUGHOUT THIS TASK SYSTEM_TASK_IDENTIFIER SYSTEM_FUNCTION_IDENTIFIER SVINT SUPPLY1 SUPPLY0 SUPER STRUCT STRING STATIC SPECPARAM SPECIFY SIMPLE_IDENTIFIER SIGNED SHORTREAL SHORTINT SEQUENCE SEMICOLON RTRANIF1 RTRANIF0 RTRAN RPMOS RPAREN RNMOS RETURN REPEAT RELEASE REG REF REALTIME REAL RCURLY RCMOS RBRACK QUERY P_XOREQ P_XNOR P_TIMESEQ P_SSRIGHT3EQ P_SSRIGHT3 P_SRIGHTEQ P_SRIGHT P_SLEFTEQ P_SLEFT3EQ P_SLEFT3 P_SLEFT P_POW P_POUNDPOUND P_PLUSEQ P_PLUSCOLON P_NXOR P_NOTEQUAL P_NAND P_MODEQ P_MINUSGT P_MINUSEQ P_MINUSCOLON P_LTE P_GTE P_EQUAL P_EQGT P_DIVEQ P_COLONEQ P_COLONDIV P_CASENOTEQUAL P_CASEEQUAL P_ANDEQ P_ANDAND PULLUP PULLDOWN PROPERTY PROGRAM PRIORITY PRIMITIVE PMOS PLUS PLING PARAMETER OUTPUT OR OCTAL_BASE NULL NOTIF1 NOTIF0 NOT NOR NMOS NAND MODULO MODULE MODPORT MINUS MACROMODULE LPAREN LONGINT LOGIC LOCALPARAM LESS LCURLY LBRACK_STAR_DASH_GT LBRACK_STAR LBRACK JOIN_NONE JOIN_ANY JOIN INTERSECT INTERFACE INTEGER INSIDE INPUT INOUT INITIAL IMPORT IFF IF HEX_BASE HASH GREATER GENVAR GENERATE FUNCTION FORK FOREVER FORCE FOR FINAL EXTERN EXPORT EVENT EQUALS_QUERY_EQUALS EQUALS ENUM ENDTASK ENDPROGRAM ENDMODULE ENDINTERFACE ENDGENERATE ENDCASE END ELSE DOUBLE_QUOTES DOT DO DIVIDE DIST DISABLE DEFPARAM DEFAULT DECIMAL_BASE DEASSIGN DASH_GT_GT COVER CONTINUE CONSTRAINT CONST COMMA COLON CMOS CLOCKING CLASS CHANDLE CASEZ CASEX CASE CARET BYTE BUFIF1 BUFIF0 BUF BREAK BIT BIND BINARY_BASE BEGIN BACKSLASH AUTOMATIC AT_STAR AT ASSIGN ASSERT AND AMPERSAND ALWAYS_LATCH ALWAYS_FF ALWAYS_COMB ALWAYS ALIAS #
** The following explanations concentrate on token LBRACK.
** This state is reached from start after reading:

source_text_3 BACKSLASH TOKEN_ANY_ASCII white_space escaped_hierarchical_branch_3

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              (?)

** In state 53, looking ahead at LBRACK, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier SEMICOLON 
BACKSLASH TOKEN_ANY_ASCII white_space escaped_hierarchical_branch_3 escaped_hierarchical_identifier_3 
                                      escaped_hierarchical_branch_3 . LBRACK UNSIGNED_NUMBER RBRACK 

** In state 53, looking ahead at LBRACK, reducing production
** escaped_hierarchical_branch_4_3 ->
** is permitted because of the following sub-derivation:

variable_lvalue P_LTE expression SEMICOLON 
hierarchical_identifier variable_lvalue_3 // lookahead token appears because variable_lvalue_3 can begin with LBRACK
BACKSLASH TOKEN_ANY_ASCII white_space escaped_hierarchical_branch_3 escaped_hierarchical_branch_4_3 escaped_hierarchical_identifier_3 // lookahead token is inherited because escaped_hierarchical_identifier_3 can vanish
                                                                    . 

** In state 53, looking ahead at LBRACK, reducing production
** escaped_hierarchical_identifier_3 ->
** is permitted because of the following sub-derivation:

variable_lvalue P_LTE expression SEMICOLON 
hierarchical_identifier variable_lvalue_3 // lookahead token appears because variable_lvalue_3 can begin with LBRACK
BACKSLASH TOKEN_ANY_ASCII white_space escaped_hierarchical_branch_3 escaped_hierarchical_identifier_3 // lookahead token is inherited
                                                                    . 

** Conflict (shift/reduce) in state 43.
** Token involved: LBRACK
** This state is reached from start after reading:

source_text_3 SIMPLE_IDENTIFIER simple_hierarchical_branch_3 simple_hierarchical_branch_4_3 DOT SIMPLE_IDENTIFIER simple_hierarchical_branch_4_3_6

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              (?)

** In state 43, looking ahead at LBRACK, reducing production
** simple_hierarchical_branch_4_3 -> simple_hierarchical_branch_4_3 DOT SIMPLE_IDENTIFIER simple_hierarchical_branch_4_3_6
** is permitted because of the following sub-derivation:

variable_lvalue P_LTE expression SEMICOLON 
hierarchical_identifier variable_lvalue_3 // lookahead token appears because variable_lvalue_3 can begin with LBRACK
SIMPLE_IDENTIFIER simple_hierarchical_branch_3 simple_hierarchical_branch_4_3 // lookahead token is inherited
                                               simple_hierarchical_branch_4_3 DOT SIMPLE_IDENTIFIER simple_hierarchical_branch_4_3_6 . 

** In state 43, looking ahead at LBRACK, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier SEMICOLON 
SIMPLE_IDENTIFIER simple_hierarchical_branch_3 simple_hierarchical_branch_4_3 
                                               simple_hierarchical_branch_4_3 DOT SIMPLE_IDENTIFIER simple_hierarchical_branch_4_3_6 
                                                                                                    simple_hierarchical_branch_4_3_6 . LBRACK UNSIGNED_NUMBER RBRACK 

** Conflict (shift/reduce) in state 40.
** Token involved: DOT
** This state is reached from start after reading:

source_text_3 TYPEDEF SIMPLE_IDENTIFIER simple_hierarchical_branch_3 simple_hierarchical_branch_4_3

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              module_root_item 
              module_common_item 
              module_or_generate_item_declaration 
              data_declaration 
              type_declaration 
              (?)

** In state 40, looking ahead at DOT, reducing production
** hierarchical_identifier -> SIMPLE_IDENTIFIER simple_hierarchical_branch_3 simple_hierarchical_branch_4_3
** is permitted because of the following sub-derivation:

TYPEDEF hierarchical_identifier DOT identifier identifier type_declaration_identifier_3 SEMICOLON // lookahead token appears
        SIMPLE_IDENTIFIER simple_hierarchical_branch_3 simple_hierarchical_branch_4_3 . 

** In state 40, looking ahead at DOT, shifting is permitted
** because of the following sub-derivation:

TYPEDEF hierarchical_identifier DOT identifier identifier type_declaration_identifier_3 SEMICOLON 
        SIMPLE_IDENTIFIER simple_hierarchical_branch_3 simple_hierarchical_branch_4_3 . DOT BACKSLASH TOKEN_ANY_ASCII white_space 

** Conflict (shift/reduce/reduce) in state 28.
** Tokens involved: XOR XNOR WOR WITHIN WIRE WHILE WAND WAIT_ORDER WAIT VOID VIRTUAL VBAR_DASH_GT VBAR UNSIGNED_NUMBER UNSIGNED UNIQUE UNION TYPEDEF TRIREG TRIOR TRIAND TRI1 TRI0 TRI TRANIF1 TRANIF0 TRAN TOKEN_VBAR_VBAR TOKEN_VBAR_EQUALS TOKEN_TWO TOKEN_THREE TOKEN_SIX TOKEN_SEVEN TOKEN_QUOTE_Z2 TOKEN_QUOTE_Z1 TOKEN_QUOTE_X2 TOKEN_QUOTE_X1 TOKEN_QUOTE_TRUE TOKEN_QUOTE_FALSE TOKEN_PLUS_PLUS TOKEN_PLING_QUERY_EQUALS TOKEN_PLING_EQUALS_GT TOKEN_ONE TOKEN_NINE TOKEN_LBRACK_STAR_EQUALS TOKEN_FOUR TOKEN_FIVE TOKEN_EIGHT TOKEN_DASH_DASH TIMES TIME TILDE_VBAR TILDE THROUGHOUT THIS TASK SYSTEM_TASK_IDENTIFIER SYSTEM_FUNCTION_IDENTIFIER SVINT SUPPLY1 SUPPLY0 SUPER STRUCT STRING STATIC SPECPARAM SPECIFY SIMPLE_IDENTIFIER SIGNED SHORTREAL SHORTINT SEQUENCE SEMICOLON RTRANIF1 RTRANIF0 RTRAN RPMOS RPAREN RNMOS RETURN REPEAT RELEASE REG REF REALTIME REAL RCURLY RCMOS RBRACK QUERY P_XOREQ P_XNOR P_TIMESEQ P_SSRIGHT3EQ P_SSRIGHT3 P_SRIGHTEQ P_SRIGHT P_SLEFTEQ P_SLEFT3EQ P_SLEFT3 P_SLEFT P_POW P_POUNDPOUND P_PLUSEQ P_PLUSCOLON P_NXOR P_NOTEQUAL P_NAND P_MODEQ P_MINUSGT P_MINUSEQ P_MINUSCOLON P_LTE P_GTE P_EQUAL P_EQGT P_DIVEQ P_COLONEQ P_COLONDIV P_CASENOTEQUAL P_CASEEQUAL P_ANDEQ P_ANDAND PULLUP PULLDOWN PROPERTY PROGRAM PRIORITY PRIMITIVE PMOS PLUS PLING PARAMETER OUTPUT OR OCTAL_BASE NULL NOTIF1 NOTIF0 NOT NOR NMOS NAND MODULO MODULE MODPORT MINUS MACROMODULE LPAREN LONGINT LOGIC LOCALPARAM LESS LCURLY LBRACK_STAR_DASH_GT LBRACK_STAR LBRACK JOIN_NONE JOIN_ANY JOIN INTERSECT INTERFACE INTEGER INSIDE INPUT INOUT INITIAL IMPORT IFF IF HEX_BASE HASH GREATER GENVAR GENERATE FUNCTION FORK FOREVER FORCE FOR FINAL EXTERN EXPORT EVENT EQUALS_QUERY_EQUALS EQUALS ENUM ENDTASK ENDPROGRAM ENDMODULE ENDINTERFACE ENDGENERATE ENDCASE END ELSE DOUBLE_QUOTES DOT DO DIVIDE DIST DISABLE DEFPARAM DEFAULT DECIMAL_BASE DEASSIGN DASH_GT_GT COVER CONTINUE CONSTRAINT CONST COMMA COLON CMOS CLOCKING CLASS CHANDLE CASEZ CASEX CASE CARET BYTE BUFIF1 BUFIF0 BUF BREAK BIT BIND BINARY_BASE BEGIN BACKSLASH AUTOMATIC AT_STAR AT ASSIGN ASSERT AND AMPERSAND ALWAYS_LATCH ALWAYS_FF ALWAYS_COMB ALWAYS ALIAS #
** The following explanations concentrate on token LBRACK.
** This state is reached from start after reading:

source_text_3 SIMPLE_IDENTIFIER simple_hierarchical_branch_3

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              (?)

** In state 28, looking ahead at LBRACK, reducing production
** hierarchical_identifier -> SIMPLE_IDENTIFIER simple_hierarchical_branch_3
** is permitted because of the following sub-derivation:

variable_lvalue P_LTE expression SEMICOLON 
hierarchical_identifier variable_lvalue_3 // lookahead token appears because variable_lvalue_3 can begin with LBRACK
SIMPLE_IDENTIFIER simple_hierarchical_branch_3 . 

** In state 28, looking ahead at LBRACK, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier SEMICOLON 
SIMPLE_IDENTIFIER simple_hierarchical_branch_3 
                  simple_hierarchical_branch_3 . LBRACK UNSIGNED_NUMBER RBRACK 

** In state 28, looking ahead at LBRACK, reducing production
** simple_hierarchical_branch_4_3 ->
** is permitted because of the following sub-derivation:

variable_lvalue P_LTE expression SEMICOLON 
hierarchical_identifier variable_lvalue_3 // lookahead token appears because variable_lvalue_3 can begin with LBRACK
SIMPLE_IDENTIFIER simple_hierarchical_branch_3 simple_hierarchical_branch_4_3 // lookahead token is inherited
                                               . 

** Conflict (shift/reduce/reduce) in state 23.
** Tokens involved: SIMPLE_IDENTIFIER BACKSLASH
** The following explanations concentrate on token SIMPLE_IDENTIFIER.
** This state is reached from start after reading:

source_text_3 WHILE LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
source_text_3 
source_text_3 description 
              statement_or_null 
              statement_item 
              loop_statement 
              WHILE LPAREN expression RPAREN statement_or_null 
                           primary 
                           (?)

** In state 23, looking ahead at SIMPLE_IDENTIFIER, shifting is permitted
** because of the following sub-derivation:

hierarchical_identifier 
. SIMPLE_IDENTIFIER simple_hierarchical_branch_3 

** In state 23, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 

** In state 23, looking ahead at SIMPLE_IDENTIFIER, reducing production
** implicit_class_handle ->
** is permitted because of the following sub-derivation:

implicit_class_handle hierarchical_identifier primary_6 // lookahead token appears because hierarchical_identifier can begin with SIMPLE_IDENTIFIER
. 
