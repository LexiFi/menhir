File "tilde-used-warning.mly", line 44, characters 2-3:
Warning: one nameless variable has been introduced by a ~ pattern,
yet this sequence does not end in a point-free semantic action <...>.
Perhaps a wildcard pattern _ should be used instead.
File "tilde-used-warning.mly", line 21, characters 6-7:
File "tilde-used-warning.mly", line 21, characters 3-4:
Warning: two nameless variables have been introduced by ~ patterns,
yet this sequence does not end in a point-free semantic action <...>.
Perhaps wildcard patterns _ should be used instead.
File "tilde-used-warning.mly", line 17, characters 6-7:
Warning: one nameless variable has been introduced by a ~ pattern,
yet this sequence does not end in a point-free semantic action <...>.
Perhaps a wildcard pattern _ should be used instead.
Grammar has 8 nonterminal symbols, among which 1 start symbols.
Grammar has 5 terminal symbols.
Grammar has 8 productions.
nullable(snd(paire(A,B))) = false
nullable(odd) = false
nullable(main) = false
nullable(hop(paire(A,B))) = false
nullable(fst(paire(A,B))) = false
nullable(bizarre_fst(paire(A,B))) = false
nullable(b) = false
nullable(a) = false
first(snd(paire(A,B))) = A
first(odd) = A
first(main) = A
first(hop(paire(A,B))) = A
first(fst(paire(A,B))) = A
first(bizarre_fst(paire(A,B))) = A
first(b) = B
first(a) = A
minimal(snd(paire(A,B))) = (* 2 *) A B
minimal(odd) = (* 2 *) A B
minimal(main) = (* 15 *) A B A B A B A B A B A B C D EOF
minimal(hop(paire(A,B))) = (* 2 *) A B
minimal(fst(paire(A,B))) = (* 2 *) A B
minimal(bizarre_fst(paire(A,B))) = (* 2 *) A B
minimal(b) = (* 1 *) B
minimal(a) = (* 1 *) A
follow(snd(paire(A,B))) = A
follow(odd) = C
follow(main) = #
follow(hop(paire(A,B))) = A
follow(fst(paire(A,B))) = A
follow(bizarre_fst(paire(A,B))) = A
follow(b) = C
follow(a) = B
Built an LR(0) automaton with 24 states.
The grammar is SLR(1).
The construction mode is pager.
Built an LR(1) automaton with 24 states.
9 out of 24 states have a default reduction.
0 out of 24 states are represented.
0 out of 16 symbols keep track of their start position.
0 out of 16 symbols keep track of their end position.
9 out of 9 productions exploit shiftreduce optimization.
0 out of 24 states can peek at an error.
70 functions before inlining, 2 functions after inlining.
