%{
open Parser_utils

%}
%start toml_ast
%token ARRAY_END
%token ARRAY_START
%token <string> BOOLEAN
%token COMMA
%token DOT
%token EOF
%token EQ
%token <string> FLOAT
%token <string> INTEGER
%token <string> KEY
%token LEFT_BRACE
%token <string> LOCAL_DATE
%token <string> LOCAL_DATETIME
%token <string> LOCAL_TIME
%token <string> MULTILINE_STRING
%token NEWLINE
%token <string> OFFSET_DATETIME
%token RIGHT_BRACE
%token <string> STRING
%token TABLE_ARRAY_HEADER_END
%token TABLE_ARRAY_HEADER_START
%token TABLE_HEADER_END
%token TABLE_HEADER_START
%type <node list> toml_ast
%%

loption_separated_nonempty_list_COMMA_key_value_pair__:
  
    {    ( [] )}
| x = separated_nonempty_list_COMMA_key_value_pair_
    {    ( x )}

list_NEWLINE_:
  
    {    ( [] )}
| x = NEWLINE xs = list_NEWLINE_
    {    ( x :: xs )}

nonempty_list_NEWLINE_:
  x = NEWLINE
    {    ( [ x ] )}
| x = NEWLINE xs = nonempty_list_NEWLINE_
    {    ( x :: xs )}

separated_nonempty_list_COMMA_key_value_pair_:
  x = key_value_pair
    {    ( [ x ] )}
| x = key_value_pair _2 = COMMA xs = separated_nonempty_list_COMMA_key_value_pair_
    {    ( x :: xs )}

separated_nonempty_list_DOT_key_:
  x = key
    {    ( [ x ] )}
| x = key _2 = DOT xs = separated_nonempty_list_DOT_key_
    {    ( x :: xs )}

key:
  s = KEY
    {            ( s )}

value:
  b = BOOLEAN
    {    ( NodeBoolean b )}
| i = INTEGER
    {    ( NodeInteger i )}
| f = FLOAT
    {    ( NodeFloat f )}
| s = STRING
    {    ( NodeString s )}
| s = MULTILINE_STRING
    {    ( NodeString s )}
| t = LOCAL_TIME
    {    ( NodeLocalTime t )}
| d = LOCAL_DATE
    {    ( NodeLocalDate d )}
| dt = LOCAL_DATETIME
    {    ( NodeLocalDateTime dt )}
| dt = OFFSET_DATETIME
    {    ( NodeOffsetDateTime dt )}
| a = array
    {    ( NodeArray a )}
| i = inline_table
    {    ( NodeInlineTable i )}

item_sequence_COMMA_value_:
  
    {    ( [] )}
| x = value
    {    ( [x] )}
| x = value _2 = COMMA xs = item_sequence_COMMA_value_
    {    ( x :: xs )}

array:
  _1 = ARRAY_START _2 = ARRAY_END
    {                           ( [] )}
| _1 = ARRAY_START vs = item_sequence_COMMA_value_ _3 = ARRAY_END
    {                                                             ( vs )}

table_path:
  ks = separated_nonempty_list_DOT_key_
    {                                           ( ks )}

key_value_pair:
  k = table_path _2 = EQ v = value
    {                                   ( (k, v) )}

inline_table:
  _1 = LEFT_BRACE xs = loption_separated_nonempty_list_COMMA_key_value_pair__ _3 = RIGHT_BRACE
    {let kvs =     ( xs ) in
                                                                         ( kvs )}

table_header:
  _1 = TABLE_HEADER_START ks = table_path _3 = TABLE_HEADER_END
    {                                                          ( ks )}

table_array_header:
  _1 = TABLE_ARRAY_HEADER_START ks = table_path _3 = TABLE_ARRAY_HEADER_END
    {                                                                      ( ks )}

table_entry:
  kv = key_value_pair
    {    ( let (k, v) = kv in Pair (k, v) )}
| ks = table_header
    {    ( TableHeader ks )}
| ks = table_array_header
    {    ( TableArrayHeader ks )}

items_on_lines_table_entry_:
  
    {                ( [] )}
| x = table_entry
    {    ( [x] )}
| x = table_entry _2 = nonempty_list_NEWLINE_ xs = items_on_lines_table_entry_
    {    ( x :: xs )}

table:
  es = items_on_lines_table_entry_
    {                                    ( es )}

toml_ast:
  _1 = list_NEWLINE_ t = table _3 = EOF
    {                             ( t )}

%%


