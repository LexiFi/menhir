File "tony-xmlparse.mly", line 43, characters 7-14:
Warning: the token DOCTYPE is unused.
File "tony-xmlparse.mly", line 49, characters 7-12:
Warning: the token ERROR is unused.
File "tony-xmlparse.mly", line 52, characters 7-8:
Warning: the token S is unused.
File "tony-xmlparse.mly", line 58, characters 7-14:
Warning: the token XMLDECL is unused.
File "tony-xmlparse.mly", line 59, characters 7-14:
Warning: the token XMLNAME is unused.
%{

(* Helpers *)

open Xml		(* XML abstract syntax 	*)
open Error		(* error() 		*)
open Xmlstate		(* setContext()		*)

let n    = None		(* just to save space 	*)

%}
%start document
%token <string> CHUNK
%token CLOSE
%token COMMENT
%token DOCTYPE
%token DTDCLOSE
%token DTDOPEN
%token ENCODING
%token EOF
%token EQ
%token ERROR
%token <string> NAME
%token <string> OPEN
%token <string> OPENSLASH
%token PICLOSE
%token <string> PIOPEN
%token PUBLIC
%token S
%token SLASHCLOSE
%token STANDALONE
%token <string> STRING
%token SYSTEM
%token VERSION
%token <string> WORD
%token XMLCLOSE
%token XMLDECL
%token XMLNAME
%token XMLOPEN
%type <Xml.document> document
%%

document:
  _1 = prolog _2 = topelement _3 = misc _4 = EOF
    {                                            ( XML(_1,_2,_3) )}

topelement:
  _1 = element
    {                                            ( setContext DataContext;
                                              _1
                                            )}

prolog:
  _1 = xmldecl _2 = misc
    {                                            ( Prolog(_1,None    ,_2   ) )}
| _1 = xmldecl _2 = misc _3 = doctype _4 = misc
    {                                            ( Prolog(_1,Some(_3),_2@_4) )}
| _1 = misc _2 = doctype _3 = misc
    {                                            ( Prolog(n ,Some(_2),_1@_3) )}
| _1 = misc
    {                                            ( Prolog(n ,None    ,_1   ) )}

misc:
  
    {                                            (     [] )}
| _1 = misc _2 = pi
    {                                            ( _2::_1 )}
| _1 = misc _2 = CHUNK
    {                                            (     _1 )}
| _1 = misc _2 = COMMENT
    {                                            (     _1 )}

dtdopen:
  _1 = DTDOPEN
    {                                            ( setContext DeclContext)}

dtdclose:
  _1 = DTDCLOSE
    {                                            ( setContext DataContext )}

doctype:
  _1 = dtdopen _2 = NAME _3 = ext _4 = markup _5 = dtdclose
    {                                            ( DTD(_2,_3) )}

ext:
  
    {                                            ( None )}
| _1 = SYSTEM _2 = STRING
    {                                            ( Some (DTDsys(_2))    )}
| _1 = PUBLIC _2 = STRING _3 = STRING
    {                                            ( Some (DTDpub(_2,_3)) )}

markup:
  
    {                                            ( None )}
| _1 = error
    {                                            ( error "DTDs are unsupported" )}

element:
  _1 = emptyElemTag
    {                                            ( let (n,a) = _1 in
                                                single n a
                                            )}
| _1 = sTag _2 = content _3 = eTag
    {                                            (   let (sn,a) = _1 in
                                                let  en    = _3 in
                                                let  c     = _2 in
                                                  if sn = en then
                                                  element sn a c
                                                  else error ("tag mismatch")
                                            )}

opn:
  _1 = OPEN
    {                                            ( setContext ElementContext; _1 )}

opnslash:
  _1 = OPENSLASH
    {                                            ( setContext ElementContext; _1 )}

cls:
  _1 = CLOSE
    {                                            ( setContext DataContext  )}

slashcls:
  _1 = SLASHCLOSE
    {                                            ( setContext DataContext  )}

sTag:
  _1 = opn _2 = attributes _3 = cls
    {                                            ( (_1,_2) )}

eTag:
  _1 = opnslash _2 = cls
    {                                            (  _1     )}

emptyElemTag:
  _1 = opn _2 = attributes _3 = slashcls
    {                                            ( (_1,_2) )}

attributes:
  
    {                                            (     []  )}
| _1 = attributes _2 = attribute
    {                                            ( _2::_1  )}

attribute:
  _1 = NAME _2 = EQ _3 = STRING
    {                                            ( (_1,_3) )}

content:
  
    {                                            ( empty                    	)}
| _1 = content _2 = CHUNK
    {                                            ( _1 ^^ chunk _2     	)}
| _1 = content _2 = element
    {                                            ( _1 ^^ _2            	)}
| _1 = content _2 = pi
    {                                            ( match _2 with
                                              name,strings ->
                                                _1 ^^ pi name strings   )}
| _1 = content _2 = COMMENT
    {                                            ( _1                        )}

xmlopen:
  _1 = XMLOPEN
    {                                            ( setContext DeclContext)}

xmlclose:
  _1 = XMLCLOSE
    {                                            ( setContext DataContext )}

xmlinfo:
  _1 = version _2 = encoding _3 = sddecl
    {                                            ( (_1,_2,Some _3) )}
| _1 = version
    {                                            ( (_1,n ,None   ) )}
| _1 = version _2 = encoding
    {                                            ( (_1,_2,None   ) )}
| _1 = version _2 = sddecl
    {                                            ( (_1,n ,Some _2) )}

xmldecl:
  _1 = xmlopen _2 = xmlinfo _3 = xmlclose
    {                                            ( match _2 with
                                              (vers,enc,sa) ->
                                              Some (XMLDecl(
                                                    vers,       (* version *)
                                                    sa,         (* standalone *)
                                                    enc         (* encoding *)
                                                   ))
                                            )}

version:
  _1 = VERSION _2 = EQ _3 = STRING
    {                                            ( _3 )}

encoding:
  _1 = ENCODING _2 = EQ _3 = STRING
    {                                            ( Some _3 )}

sddecl:
  _1 = STANDALONE _2 = EQ _3 = STRING
    {                                            ( match _3 with
                                            | "yes" -> true
                                            | "no"  -> false
                                            | _     -> error "yes/no expected"
                                            )}

piopen:
  _1 = PIOPEN
    {                                            ( setContext PiContext; _1)}

pi:
  _1 = piopen _2 = picontent _3 = PICLOSE
    {                                            ( setContext DataContext;
                                                  (_1,List.rev _2)
                                            )}

picontent:
  
    {                                            ( []        )}
| _1 = picontent _2 = WORD
    {                                            ( _2 :: _1  )}

%%
