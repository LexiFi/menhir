
** Conflict (shift/reduce) in state 409.
** Token involved: NEWLINE
** This state is reached from touist_smt after reading:

formula_smt

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

touist_smt 
nonempty_list(affect_or(formula_smt)) EOF 
(?)

** In state 409, looking ahead at NEWLINE, shifting is permitted
** because of the following sub-derivation:

affect_or(formula_smt) 
formula_smt option(DATA) 
formula_smt . NEWLINE 

** In state 409, looking ahead at NEWLINE, reducing production
** option(DATA) ->
** is permitted because of the following sub-derivation:

affect_or(formula_smt) nonempty_list(affect_or(formula_smt)) // lookahead token appears because nonempty_list(affect_or(formula_smt)) can begin with NEWLINE
formula_smt option(DATA) // lookahead token is inherited
            . 

** Conflict (shift/reduce) in state 400.
** Token involved: RPAREN
** This state is reached from touist_smt after reading:

LPAREN expr_smt

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

touist_smt 
nonempty_list(affect_or(formula_smt)) EOF 
affect_or(formula_smt) 
formula_smt option(DATA) 
(?)

** In state 400, looking ahead at RPAREN, shifting is permitted
** because of the following sub-derivation:

expr_smt 
LPAREN expr_smt . RPAREN 

** In state 400, looking ahead at RPAREN, reducing production
** formula_smt -> expr_smt
** is permitted because of the following sub-derivation:

LPAREN formula_smt RPAREN // lookahead token appears
       expr_smt . 

** Conflict (shift/reduce) in state 380.
** Token involved: SUB
** This state is reached from touist_smt after reading:

expr_smt

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

touist_smt 
nonempty_list(affect_or(formula_smt)) EOF 
(?)

** In state 380, looking ahead at SUB, shifting is permitted
** because of the following sub-derivation:

affect_or(formula_smt) 
formula_smt option(DATA) 
expr_smt 
expr_smt . SUB expr_smt 

** In state 380, looking ahead at SUB, reducing production
** formula_smt -> expr_smt
** is permitted because of the following sub-derivation:

affect_or(formula_smt) nonempty_list(affect_or(formula_smt)) // lookahead token appears because nonempty_list(affect_or(formula_smt)) can begin with SUB
formula_smt option(DATA) // lookahead token is inherited because option(DATA) can vanish
expr_smt . 

** Conflict (shift/reduce) in state 302.
** Token involved: NEWLINE
** This state is reached from touist_simple after reading:

formula_simple

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

touist_simple 
nonempty_list(affect_or(formula_simple)) EOF 
(?)

** In state 302, looking ahead at NEWLINE, shifting is permitted
** because of the following sub-derivation:

affect_or(formula_simple) 
formula_simple option(DATA) 
formula_simple . NEWLINE 

** In state 302, looking ahead at NEWLINE, reducing production
** option(DATA) ->
** is permitted because of the following sub-derivation:

affect_or(formula_simple) nonempty_list(affect_or(formula_simple)) // lookahead token appears because nonempty_list(affect_or(formula_simple)) can begin with NEWLINE
formula_simple option(DATA) // lookahead token is inherited
               . 

** Conflict (shift/reduce) in state 223.
** Token involved: NEWLINE
** This state is reached from touist_qbf after reading:

formula_qbf

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

touist_qbf 
nonempty_list(affect_or(formula_qbf)) EOF 
(?)

** In state 223, looking ahead at NEWLINE, shifting is permitted
** because of the following sub-derivation:

affect_or(formula_qbf) 
formula_qbf option(DATA) 
formula_qbf . NEWLINE 

** In state 223, looking ahead at NEWLINE, reducing production
** option(DATA) ->
** is permitted because of the following sub-derivation:

affect_or(formula_qbf) nonempty_list(affect_or(formula_qbf)) // lookahead token appears because nonempty_list(affect_or(formula_qbf)) can begin with NEWLINE
formula_qbf option(DATA) // lookahead token is inherited
            . 

** Conflict (shift/reduce) in state 207.
** Tokens involved: XOR OR NEWLINE IMPLIES EQUIV AND
** The following explanations concentrate on token XOR.
** This state is reached from touist_qbf after reading:

FORALL comma_list(prop_or_var) option(for_statement) COLON formula_qbf

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

touist_qbf 
nonempty_list(affect_or(formula_qbf)) EOF 
affect_or(formula_qbf) 
formula_qbf option(DATA) 
(?)

** In state 207, looking ahead at XOR, shifting is permitted
** because of the following sub-derivation:

FORALL comma_list(prop_or_var) option(for_statement) COLON formula_qbf 
                                                           formula_qbf . XOR formula_qbf 

** In state 207, looking ahead at XOR, reducing production
** formula_qbf -> FORALL comma_list(prop_or_var) option(for_statement) COLON formula_qbf
** is permitted because of the following sub-derivation:

formula_qbf XOR formula_qbf // lookahead token appears
FORALL comma_list(prop_or_var) option(for_statement) COLON formula_qbf . 

** Conflict (shift/reduce) in state 206.
** Tokens involved: XOR OR NEWLINE IMPLIES EQUIV AND
** The following explanations concentrate on token XOR.
** This state is reached from touist_qbf after reading:

EXISTS comma_list(prop_or_var) option(for_statement) COLON formula_qbf

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

touist_qbf 
nonempty_list(affect_or(formula_qbf)) EOF 
affect_or(formula_qbf) 
formula_qbf option(DATA) 
(?)

** In state 206, looking ahead at XOR, shifting is permitted
** because of the following sub-derivation:

EXISTS comma_list(prop_or_var) option(for_statement) COLON formula_qbf 
                                                           formula_qbf . XOR formula_qbf 

** In state 206, looking ahead at XOR, reducing production
** formula_qbf -> EXISTS comma_list(prop_or_var) option(for_statement) COLON formula_qbf
** is permitted because of the following sub-derivation:

formula_qbf XOR formula_qbf // lookahead token appears
EXISTS comma_list(prop_or_var) option(for_statement) COLON formula_qbf . 
