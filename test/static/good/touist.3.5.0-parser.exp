File "touist.3.5.0-parser.mly", line 144, characters 0-10:
Warning: symbol comma_list(expr_smt) is unreachable from any of the start symbol(s).
Grammar has 26 nonterminal symbols, among which 3 start symbols.
Grammar has 67 terminal symbols.
Grammar has 159 productions.
nullable(var) = false
nullable(touist_smt) = false
nullable(touist_simple) = false
nullable(touist_qbf) = false
nullable(prop) = false
nullable(option(when_cond)) = true
nullable(option(for_statement)) = true
nullable(option(DATA)) = true
nullable(nonempty_list(affect_or(formula_smt))) = false
nullable(nonempty_list(affect_or(formula_simple))) = false
nullable(nonempty_list(affect_or(formula_qbf))) = false
nullable(let_affect(expr,formula_smt)) = false
nullable(let_affect(expr,formula_simple)) = false
nullable(let_affect(expr,formula_qbf)) = false
nullable(formula_smt) = false
nullable(formula_simple) = false
nullable(formula_qbf) = false
nullable(expr_smt) = false
nullable(expr) = false
nullable(comma_list(var)) = false
nullable(comma_list(prop_or_var)) = false
nullable(comma_list(indices)) = false
nullable(comma_list(expr)) = false
nullable(affect_or(formula_smt)) = false
nullable(affect_or(formula_simple)) = false
nullable(affect_or(formula_qbf)) = false
first(var) = VARTUPLE VAR
first(touist_smt) = VARTUPLE VAR TUPLE TOP TERM SUB NOT NEWLINE LPAREN LET INT IF FLOAT EXACT BOTTOM BIGOR BIGAND ATMOST ATLEAST
first(touist_simple) = VARTUPLE VAR TUPLE TOP TERM NOT NEWLINE LPAREN LET IF EXACT BOTTOM BIGOR BIGAND ATMOST ATLEAST
first(touist_qbf) = VARTUPLE VAR TUPLE TOP TERM NOT NEWLINE LPAREN LET IF FORALL EXISTS EXACT BOTTOM BIGOR BIGAND ATMOST ATLEAST
first(prop) = TUPLE TERM
first(option(when_cond)) = WHEN
first(option(for_statement)) = FOR
first(option(DATA)) = DATA
first(nonempty_list(affect_or(formula_smt))) = VARTUPLE VAR TUPLE TOP TERM SUB NOT NEWLINE LPAREN LET INT IF FLOAT EXACT BOTTOM BIGOR BIGAND ATMOST ATLEAST
first(nonempty_list(affect_or(formula_simple))) = VARTUPLE VAR TUPLE TOP TERM NOT NEWLINE LPAREN LET IF EXACT BOTTOM BIGOR BIGAND ATMOST ATLEAST
first(nonempty_list(affect_or(formula_qbf))) = VARTUPLE VAR TUPLE TOP TERM NOT NEWLINE LPAREN LET IF FORALL EXISTS EXACT BOTTOM BIGOR BIGAND ATMOST ATLEAST
first(let_affect(expr,formula_smt)) = LET
first(let_affect(expr,formula_simple)) = LET
first(let_affect(expr,formula_qbf)) = LET
first(formula_smt) = VARTUPLE VAR TUPLE TOP TERM SUB NOT NEWLINE LPAREN LET INT IF FLOAT EXACT BOTTOM BIGOR BIGAND ATMOST ATLEAST
first(formula_simple) = VARTUPLE VAR TUPLE TOP TERM NOT NEWLINE LPAREN LET IF EXACT BOTTOM BIGOR BIGAND ATMOST ATLEAST
first(formula_qbf) = VARTUPLE VAR TUPLE TOP TERM NOT NEWLINE LPAREN LET IF FORALL EXISTS EXACT BOTTOM BIGOR BIGAND ATMOST ATLEAST
first(expr_smt) = VARTUPLE VAR TUPLE TOP TERM SUB LPAREN INT FLOAT BOTTOM
first(expr) = VARTUPLE VAR UNION_PR TUPLE TOINT TOFLOAT TERM SUBSET_PR SUB SQRT POWERSET NOT LPAREN LBRACK INTER_PR INT IF FLOAT EMPTY DIFF_PR CARD BOOL ABS
first(comma_list(var)) = VARTUPLE VAR
first(comma_list(prop_or_var)) = VARTUPLE VAR TUPLE TERM
first(comma_list(indices)) = VARTUPLE VAR UNION_PR TUPLE TOINT TOFLOAT TERM SUBSET_PR SUB SQRT POWERSET NOT LPAREN LBRACK INTER_PR INT IF FLOAT EMPTY DIFF_PR CARD BOOL ABS
first(comma_list(expr)) = VARTUPLE VAR UNION_PR TUPLE TOINT TOFLOAT TERM SUBSET_PR SUB SQRT POWERSET NOT LPAREN LBRACK INTER_PR INT IF FLOAT EMPTY DIFF_PR CARD BOOL ABS
first(affect_or(formula_smt)) = VARTUPLE VAR TUPLE TOP TERM SUB NOT NEWLINE LPAREN LET INT IF FLOAT EXACT BOTTOM BIGOR BIGAND ATMOST ATLEAST
first(affect_or(formula_simple)) = VARTUPLE VAR TUPLE TOP TERM NOT NEWLINE LPAREN LET IF EXACT BOTTOM BIGOR BIGAND ATMOST ATLEAST
first(affect_or(formula_qbf)) = VARTUPLE VAR TUPLE TOP TERM NOT NEWLINE LPAREN LET IF FORALL EXISTS EXACT BOTTOM BIGOR BIGAND ATMOST ATLEAST
minimal(var) = (* 1 *) VAR
minimal(touist_smt) = (* 2 *) TERM EOF
minimal(touist_simple) = (* 2 *) VAR EOF
minimal(touist_qbf) = (* 2 *) VAR EOF
minimal(prop) = (* 1 *) TERM
minimal(option(when_cond)) = (* 0 *)
minimal(option(for_statement)) = (* 0 *)
minimal(option(DATA)) = (* 0 *)
minimal(nonempty_list(affect_or(formula_smt))) = (* 1 *) TERM
minimal(nonempty_list(affect_or(formula_simple))) = (* 1 *) VAR
minimal(nonempty_list(affect_or(formula_qbf))) = (* 1 *) VAR
minimal(let_affect(expr,formula_smt)) = (* 6 *) LET VAR AFFECT INT COLON TERM
minimal(let_affect(expr,formula_simple)) = (* 6 *) LET VAR AFFECT INT COLON VAR
minimal(let_affect(expr,formula_qbf)) = (* 6 *) LET VAR AFFECT INT COLON VAR
minimal(formula_smt) = (* 1 *) TERM
minimal(formula_simple) = (* 1 *) VAR
minimal(formula_qbf) = (* 1 *) VAR
minimal(expr_smt) = (* 1 *) TERM
minimal(expr) = (* 1 *) INT
minimal(comma_list(var)) = (* 1 *) VAR
minimal(comma_list(prop_or_var)) = (* 1 *) TERM
minimal(comma_list(indices)) = (* 1 *) INT
minimal(comma_list(expr)) = (* 1 *) INT
minimal(affect_or(formula_smt)) = (* 1 *) TERM
minimal(affect_or(formula_simple)) = (* 1 *) VAR
minimal(affect_or(formula_qbf)) = (* 1 *) VAR
follow(var) = XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DATA COMMA COLON BOTTOM BIGOR BIGAND ATMOST ATLEAST AND AFFECT ADD
follow(touist_smt) = #
follow(touist_simple) = #
follow(touist_qbf) = #
follow(prop) = XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FOR FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF DATA COMMA COLON BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD
follow(option(when_cond)) = COLON
follow(option(for_statement)) = COLON
follow(option(DATA)) = VARTUPLE VAR TUPLE TOP TERM SUB NOT NEWLINE LPAREN LET INT IF FORALL FLOAT EXISTS EXACT EOF BOTTOM BIGOR BIGAND ATMOST ATLEAST
follow(nonempty_list(affect_or(formula_smt))) = EOF
follow(nonempty_list(affect_or(formula_simple))) = EOF
follow(nonempty_list(affect_or(formula_qbf))) = EOF
follow(let_affect(expr,formula_smt)) = XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOT NEWLINE LPAREN LET INT IMPLIES IF FLOAT EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND
follow(let_affect(expr,formula_simple)) = XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND
follow(let_affect(expr,formula_qbf)) = XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND
follow(formula_smt) = XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOT NEWLINE LPAREN LET INT IMPLIES IF FLOAT EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND
follow(formula_simple) = XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND
follow(formula_qbf) = XOR VARTUPLE VAR TUPLE TOP TERM RPAREN OR NOT NEWLINE LPAREN LET IMPLIES IF FORALL EXISTS EXACT EQUIV EOF END ELSE DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND
follow(expr_smt) = XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT NEWLINE MUL LT LPAREN LET LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL EOF END ELSE DIV DATA BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD
follow(expr) = XOR WHEN VARTUPLE VAR UNION TUPLE TOP THEN TERM SUBSET SUB RPAREN RBRACK RANGE OR NOTEQUAL NOT NEWLINE MUL MOD LT LPAREN LET LE INTER INT IN IMPLIES IF GT GE FORALL FLOAT EXISTS EXACT EQUIV EQUAL EOF END ELSE DIV DIFF COMMA COLON BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD
follow(comma_list(var)) = IN AFFECT
follow(comma_list(prop_or_var)) = FOR COLON
follow(comma_list(indices)) = RPAREN
follow(comma_list(expr)) = WHEN RBRACK COLON
follow(affect_or(formula_smt)) = VARTUPLE VAR TUPLE TOP TERM SUB NOT NEWLINE LPAREN LET INT IF FLOAT EXACT EOF BOTTOM BIGOR BIGAND ATMOST ATLEAST
follow(affect_or(formula_simple)) = VARTUPLE VAR TUPLE TOP TERM NOT NEWLINE LPAREN LET IF EXACT EOF BOTTOM BIGOR BIGAND ATMOST ATLEAST
follow(affect_or(formula_qbf)) = VARTUPLE VAR TUPLE TOP TERM NOT NEWLINE LPAREN LET IF FORALL EXISTS EXACT EOF BOTTOM BIGOR BIGAND ATMOST ATLEAST
Built an LR(0) automaton with 413 states.
The grammar is not SLR(1) -- 66 states have a conflict.
The construction mode is pager.
Built an LR(1) automaton with 413 states.
738 shift/reduce conflicts were silently solved.
Warning: 7 states have shift/reduce conflicts.
Warning: 17 shift/reduce conflicts were arbitrarily resolved.
Extra reductions on error were added in 7 states.
Priority played a role in 0 of these states.
94 out of 413 states have a default reduction.
203 out of 413 states are represented.
50 out of 98 symbols keep track of their start position.
22 out of 98 symbols keep track of their end position.
69 out of 162 productions exploit shiftreduce optimization.
0 out of 413 states can peek at an error.
1021 functions before inlining, 153 functions after inlining.
