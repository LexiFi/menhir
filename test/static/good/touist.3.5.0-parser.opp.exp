File "touist.3.5.0-parser.mly", line 144, characters 0-10:
Warning: symbol comma_list(expr_smt) is unreachable from any of the start symbol(s).
%{
  open Types.Ast
  open Err
%}
%start touist_qbf
%start touist_simple
%start touist_smt
%token ABS
%token ADD
%token AFFECT
%token AND
%token ATLEAST
%token ATMOST
%token BIGAND
%token BIGOR
%token <bool> BOOL
%token BOTTOM
%token CARD
%token COLON
%token COMMA
%token DATA
%token DIFF
%token DIFF_PR
%token DIV
%token ELSE
%token EMPTY
%token END
%token EOF
%token EQUAL
%token EQUIV
%token EXACT
%token EXISTS
%token <float> FLOAT
%token FOR
%token FORALL
%token GE
%token GT
%token IF
%token IMPLIES
%token IN
%token <int> INT
%token INTER
%token INTER_PR
%token LBRACK
%token LE
%token LET
%token LPAREN
%token LT
%token MOD
%token MUL
%token NEWLINE
%token NOT
%token NOTEQUAL
%token OR
%token POWERSET
%token RANGE
%token RBRACK
%token RPAREN
%token SQRT
%token SUB
%token SUBSET
%token SUBSET_PR
%token <string> TERM
%token THEN
%token TOFLOAT
%token TOINT
%token TOP
%token <string> TUPLE
%token UNION
%token UNION_PR
%token <string> VAR
%token <string> VARTUPLE
%token WHEN
%token XOR
%left NEWLINE
%left newlineBefore
%nonassoc affect_before_exprsmt
%nonassoc low_precedence
%left INTER
%left DIFF UNION
%left SUBSET
%right EQUIV IMPLIES
%left OR
%left AND
%left XOR
%left NOT
%nonassoc EQUAL GE GT IN LE LT NOTEQUAL
%left ADD SUB neg_prec sub_prec
%left DIV MUL
%left MOD
%type <Types.Ast.t> touist_qbf
%type <Types.Ast.t> touist_simple
%type <Types.Ast.t> touist_smt
%on_error_reduce comma_list_expr_
%on_error_reduce comma_list_indices_
%on_error_reduce comma_list_var_
%%

option_DATA_:
  
    {    ( None )} [@name none_DATA]
| x = DATA
    {    ( Some x )} [@name some_DATA]

option_for_statement_:
  
    {    ( None )} [@name none_for_statement]
| _1 = FOR v = var _3 = IN content = expr
    {let x =                                                  ( (v,content) ) in
    ( Some x )} [@name some_for_statement]

option_when_cond_:
  
    {    ( None )} [@name none_when_cond]
| _1 = WHEN x = expr
    {let x =                                ( x ) in
    ( Some x )} [@name some_when_cond]

nonempty_list_affect_or_formula_qbf__:
  x = affect_or_formula_qbf_
    {    ( [ x ] )} [@name one_affect_or_formula_qbf_]
| x = affect_or_formula_qbf_ xs = nonempty_list_affect_or_formula_qbf__
    {    ( x :: xs )} [@name more_affect_or_formula_qbf_]

nonempty_list_affect_or_formula_simple__:
  x = affect_or_formula_simple_
    {    ( [ x ] )} [@name one_affect_or_formula_simple_]
| x = affect_or_formula_simple_ xs = nonempty_list_affect_or_formula_simple__
    {    ( x :: xs )} [@name more_affect_or_formula_simple_]

nonempty_list_affect_or_formula_smt__:
  x = affect_or_formula_smt_
    {    ( [ x ] )} [@name one_affect_or_formula_smt_]
| x = affect_or_formula_smt_ xs = nonempty_list_affect_or_formula_smt__
    {    ( x :: xs )} [@name more_affect_or_formula_smt_]

comma_list_expr_:
  x = expr
    {        ( x::[] )}
| x = expr _2 = COMMA l = comma_list_expr_
    {                              ( x::l )}

comma_list_indices_:
  i = expr
    {let x =                         ( i ) in
        ( x::[] )}
| i = expr _2 = COMMA l = comma_list_indices_
    {let x =                         ( i ) in
                              ( x::l )}

comma_list_prop_or_var_:
  p = prop
    {let x =                                     (p) in
        ( x::[] )}
| p = var
    {let x =                                     (p) in
        ( x::[] )}
| p = prop _2 = COMMA l = comma_list_prop_or_var_
    {let x =                                     (p) in
                              ( x::l )}
| p = var _2 = COMMA l = comma_list_prop_or_var_
    {let x =                                     (p) in
                              ( x::l )}

comma_list_var_:
  x = var
    {        ( x::[] )}
| x = var _2 = COMMA l = comma_list_var_
    {                              ( x::l )}

affect_or_formula_qbf_:
  v = var _2 = AFFECT e = expr %prec affect_before_exprsmt
    {let a =
  let _endpos = _endpos_e_ in
  let _startpos = _startpos_v_ in
                                             (Loc (Affect (v,e),(_startpos,_endpos)))
in
                    (a)}
| f = formula_qbf _2 = option_DATA_
    {                     (f)}

affect_or_formula_simple_:
  v = var _2 = AFFECT e = expr %prec affect_before_exprsmt
    {let a =
  let _endpos = _endpos_e_ in
  let _startpos = _startpos_v_ in
                                             (Loc (Affect (v,e),(_startpos,_endpos)))
in
                    (a)}
| f = formula_simple _2 = option_DATA_
    {                     (f)}

affect_or_formula_smt_:
  v = var _2 = AFFECT e = expr %prec affect_before_exprsmt
    {let a =
  let _endpos = _endpos_e_ in
  let _startpos = _startpos_v_ in
                                             (Loc (Affect (v,e),(_startpos,_endpos)))
in
                    (a)}
| f = formula_smt _2 = option_DATA_
    {                     (f)}

touist_simple:
  f = nonempty_list_affect_or_formula_simple__ _2 = EOF
    {let _endpos = _endpos__2_ in
let _startpos = _startpos_f_ in
                                     (Loc (Touist_code (f),(_startpos,_endpos)))}

touist_smt:
  f = nonempty_list_affect_or_formula_smt__ _2 = EOF
    {let _endpos = _endpos__2_ in
let _startpos = _startpos_f_ in
                                  (Loc (Touist_code (f),(_startpos,_endpos)))}

touist_qbf:
  f = nonempty_list_affect_or_formula_qbf__ _2 = EOF
    {let _endpos = _endpos__2_ in
let _startpos = _startpos_f_ in
                                          (Loc (Touist_code (f),(_startpos,_endpos)))}

prop:
  t = TERM
    {let _endpos = _endpos_t_ in
let _startpos = _startpos_t_ in
           (Loc (Prop t,(_startpos,_endpos)))}
| t = TUPLE l = comma_list_indices_ _3 = RPAREN
    {let _endpos = _endpos__3_ in
let _startpos = _startpos_t_ in
    (Loc (UnexpProp (t, Some l),(_startpos,_endpos)))}

var:
  v = VAR
    {let _endpos = _endpos_v_ in
let _startpos = _startpos_v_ in
          (Loc (Var (v,None),(_startpos,_endpos)))}
| v = VARTUPLE l = comma_list_indices_ _3 = RPAREN
    {let _endpos = _endpos__3_ in
let _startpos = _startpos_v_ in
    (Loc (Var (v,Some l),(_startpos,_endpos)))}

expr:
  b = var
    {          (b)}
| x = INT
    {let x =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                     (Loc (Int x,(_startpos,_endpos)))
in
          (x)}
| _1 = TOINT x = expr _3 = RPAREN
    {let _endpos = _endpos__3_ in
let _startpos = _startpos__1_ in
                                   (Loc (To_int x,(_startpos,_endpos)))}
| _1 = CARD s = expr _3 = RPAREN
    {let _endpos = _endpos__3_ in
let _startpos = _startpos__1_ in
                                   (Loc (Card s,(_startpos,_endpos)))}
| x = FLOAT
    {let x =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                         (Loc (Float x,(_startpos,_endpos)))
in
            (x)}
| _1 = LPAREN x = expr _3 = RPAREN
    {let x =
  let _endpos = _endpos__3_ in
  let _startpos = _startpos__1_ in
                                               (Loc (Paren x,(_startpos,_endpos)))
in
                         ( x )}
| x = expr _2 = ADD y = expr
    {let x =
  let _endpos = _endpos_y_ in
  let _startpos = _startpos_x_ in
                          (Loc (Add (x,y),(_startpos,_endpos)))
in
                         ( x )}
| x = expr _2 = SUB y = expr %prec sub_prec
    {let x =
  let _endpos = _endpos_y_ in
  let _startpos = _startpos_x_ in
                          (Loc (Sub (x,y),(_startpos,_endpos)))
in
                         ( x )}
| _1 = SUB x = expr %prec neg_prec
    {let x =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos__1_ in
                          (Loc (Neg x,(_startpos,_endpos))     )
in
                         ( x )}
| x = expr _2 = MUL y = expr
    {let x =
  let _endpos = _endpos_y_ in
  let _startpos = _startpos_x_ in
                          (Loc (Mul (x,y),(_startpos,_endpos)))
in
                         ( x )}
| x = expr _2 = DIV y = expr
    {let x =
  let _endpos = _endpos_y_ in
  let _startpos = _startpos_x_ in
                          (Loc (Div (x,y),(_startpos,_endpos)))
in
                         ( x )}
| x = expr _2 = MOD y = expr
    {let x =
  let _endpos = _endpos_y_ in
  let _startpos = _startpos_x_ in
                          (Loc (Mod (x,y),(_startpos,_endpos)))
in
                         ( x )}
| _1 = ABS x = expr _3 = RPAREN
    {let x =
  let _endpos = _endpos__3_ in
  let _startpos = _startpos__1_ in
                                (Loc (Abs x,(_startpos,_endpos)))
in
                         ( x )}
| _1 = IF cond = expr _3 = THEN v1 = expr _5 = ELSE v2 = expr _7 = END
    {let x =
  let _endpos = _endpos__7_ in
  let _startpos = _startpos__1_ in
                                                                (Loc (If (cond,v1,v2),(_startpos,_endpos)))
in
                         ( x )}
| _1 = SQRT x = expr _3 = RPAREN
    {let _endpos = _endpos__3_ in
let _startpos = _startpos__1_ in
                                     (Loc (Sqrt x,(_startpos,_endpos)))}
| _1 = TOFLOAT x = expr _3 = RPAREN
    {let _endpos = _endpos__3_ in
let _startpos = _startpos__1_ in
                                     (Loc (To_float x,(_startpos,_endpos)))}
| x = BOOL
    {let b =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                       (Loc (Bool x,(_startpos,_endpos)))
in
           (b)}
| _1 = NOT x = expr
    {let b =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos__1_ in
                          (Loc (Not x,(_startpos,_endpos)))
in
                  (b)}
| x = expr _2 = AND y = expr
    {let b =
  let _endpos = _endpos_y_ in
  let _startpos = _startpos_x_ in
                          (Loc (And (x,y),(_startpos,_endpos)) )
in
                  (b)}
| x = expr _2 = OR y = expr
    {let b =
  let _endpos = _endpos_y_ in
  let _startpos = _startpos_x_ in
                          (Loc (Or (x,y),(_startpos,_endpos)) )
in
                  (b)}
| x = expr _2 = XOR y = expr
    {let b =
  let _endpos = _endpos_y_ in
  let _startpos = _startpos_x_ in
                          (Loc (Xor (x,y),(_startpos,_endpos)) )
in
                  (b)}
| x = expr _2 = IMPLIES y = expr
    {let b =
  let _endpos = _endpos_y_ in
  let _startpos = _startpos_x_ in
                          (Loc (Implies (x,y),(_startpos,_endpos)) )
in
                  (b)}
| x = expr _2 = EQUIV y = expr
    {let b =
  let _endpos = _endpos_y_ in
  let _startpos = _startpos_x_ in
                          (Loc (Equiv (x,y),(_startpos,_endpos)) )
in
                  (b)}
| x = expr _2 = EQUAL y = expr
    {let b =
  let _endpos = _endpos_y_ in
  let _startpos = _startpos_x_ in
                          (Loc (Equal (x,y),(_startpos,_endpos)) )
in
                  (b)}
| x = expr _2 = NOTEQUAL y = expr
    {let b =
  let _endpos = _endpos_y_ in
  let _startpos = _startpos_x_ in
                          (Loc (Not_equal (x,y),(_startpos,_endpos)) )
in
                  (b)}
| x = expr _2 = LT y = expr
    {let b =
  let _endpos = _endpos_y_ in
  let _startpos = _startpos_x_ in
                          (Loc (Lesser_than (x,y),(_startpos,_endpos)) )
in
                  (b)}
| x = expr _2 = LE y = expr
    {let b =
  let _endpos = _endpos_y_ in
  let _startpos = _startpos_x_ in
                          (Loc (Lesser_or_equal (x,y),(_startpos,_endpos)) )
in
                  (b)}
| x = expr _2 = GT y = expr
    {let b =
  let _endpos = _endpos_y_ in
  let _startpos = _startpos_x_ in
                          (Loc (Greater_than (x,y),(_startpos,_endpos)) )
in
                  (b)}
| x = expr _2 = GE y = expr
    {let b =
  let _endpos = _endpos_y_ in
  let _startpos = _startpos_x_ in
                          (Loc (Greater_or_equal (x,y),(_startpos,_endpos)) )
in
                  (b)}
| _1 = EMPTY s = expr _3 = RPAREN
    {let _endpos = _endpos__3_ in
let _startpos = _startpos__1_ in
                                    (Loc (Empty s,(_startpos,_endpos)))}
| s1 = expr _2 = SUBSET s2 = expr
    {let _endpos = _endpos_s2_ in
let _startpos = _startpos_s1_ in
                           (Loc (Subset (s1,s2),(_startpos,_endpos)))}
| _1 = SUBSET_PR s1 = expr _3 = COMMA s2 = expr _5 = RPAREN
    {let _endpos = _endpos__5_ in
let _startpos = _startpos__1_ in
                                                      (
      let loc = (_startpos,_endpos) in
      warn (Warning,Parse,"'subset(A,B)' is deprecated, please use \
        'A subset B' instead.
",Some loc);
      Loc (Subset (s1,s2),loc))}
| p = prop
    {           (p)}
| x = expr _2 = IN s = expr
    {let _endpos = _endpos_s_ in
let _startpos = _startpos_x_ in
                       (Loc (In (x,s),(_startpos,_endpos)))}
| _1 = LBRACK s1 = expr _3 = RANGE s2 = expr _5 = RBRACK
    {let x =
  let _endpos = _endpos__5_ in
  let _startpos = _startpos__1_ in
                                                           (Loc (Range (s1,s2),(_startpos,_endpos)))
in
                          (x)}
| _1 = LBRACK _2 = RBRACK
    {let x =
  let _endpos = _endpos__2_ in
  let _startpos = _startpos__1_ in
                                   (Loc (Set_decl [],(_startpos,_endpos)))
in
                          (x)}
| _1 = LBRACK l = comma_list_expr_ _3 = RBRACK
    {let x =
  let _endpos = _endpos__3_ in
  let _startpos = _startpos__1_ in
                                                              (Loc (Set_decl l,(_startpos,_endpos)))
in
                          (x)}
| s1 = expr _2 = UNION s2 = expr
    {let x =
  let _endpos = _endpos_s2_ in
  let _startpos = _startpos_s1_ in
                      (Loc (Union (s1,s2),(_startpos,_endpos)))
in
                          (x)}
| s1 = expr _2 = INTER s2 = expr
    {let x =
  let _endpos = _endpos_s2_ in
  let _startpos = _startpos_s1_ in
                      (Loc (Inter (s1,s2),(_startpos,_endpos)))
in
                          (x)}
| s1 = expr _2 = DIFF s2 = expr
    {let x =
  let _endpos = _endpos_s2_ in
  let _startpos = _startpos_s1_ in
                     (Loc (Diff (s1,s2),(_startpos,_endpos)))
in
                          (x)}
| _1 = UNION_PR s1 = expr _3 = COMMA s2 = expr _5 = RPAREN
    {let x =
  let _endpos = _endpos__5_ in
  let _startpos = _startpos__1_ in
                                                 (
      let loc = (_startpos,_endpos) in
      warn (Warning,Parse,"'union(A,B)' is deprecated, please use \
        'A union B' instead.
",Some loc);
      Loc (Union (s1,s2),loc))
in
                          (x)}
| _1 = INTER_PR s1 = expr _3 = COMMA s2 = expr _5 = RPAREN
    {let x =
  let _endpos = _endpos__5_ in
  let _startpos = _startpos__1_ in
                                                 (
      let loc = (_startpos,_endpos) in
      warn (Warning,Parse,"'inter(A,B)' is deprecated, please use \
        'A inter B' instead.
",Some loc);
      Loc (Inter (s1,s2),loc))
in
                          (x)}
| _1 = DIFF_PR s1 = expr _3 = COMMA s2 = expr _5 = RPAREN
    {let x =
  let _endpos = _endpos__5_ in
  let _startpos = _startpos__1_ in
                                                 (
      let loc = (_startpos,_endpos) in
      warn (Warning,Parse,"'diff(A,B)' is deprecated, please use \
        'A diff B' instead.
",Some loc);
      Loc (Diff (s1,s2),loc))
in
                          (x)}
| _1 = POWERSET s = expr _3 = RPAREN
    {let x =
  let _endpos = _endpos__3_ in
  let _startpos = _startpos__1_ in
                                     (Loc (Powerset s,(_startpos,_endpos)))
in
                          (x)}

let_affect_expr_formula_qbf_:
  _1 = LET vars = comma_list_var_ _3 = AFFECT contents = comma_list_expr_ _5 = COLON form = formula_qbf %prec low_precedence
    {let _endpos = _endpos_form_ in
let _startpos = _startpos__1_ in
    (try List.fold_right2 (fun var content acc ->
      Loc (Let (var,content,acc),(_startpos,_endpos))) vars contents form
    with Invalid_argument _ ->
      fatal (Error,Parse,
        ("'let' statement does not have the same number of variables and values.
"),
        Some (_startpos,_endpos))
    )}

let_affect_expr_formula_simple_:
  _1 = LET vars = comma_list_var_ _3 = AFFECT contents = comma_list_expr_ _5 = COLON form = formula_simple %prec low_precedence
    {let _endpos = _endpos_form_ in
let _startpos = _startpos__1_ in
    (try List.fold_right2 (fun var content acc ->
      Loc (Let (var,content,acc),(_startpos,_endpos))) vars contents form
    with Invalid_argument _ ->
      fatal (Error,Parse,
        ("'let' statement does not have the same number of variables and values.
"),
        Some (_startpos,_endpos))
    )}

let_affect_expr_formula_smt_:
  _1 = LET vars = comma_list_var_ _3 = AFFECT contents = comma_list_expr_ _5 = COLON form = formula_smt %prec low_precedence
    {let _endpos = _endpos_form_ in
let _startpos = _startpos__1_ in
    (try List.fold_right2 (fun var content acc ->
      Loc (Let (var,content,acc),(_startpos,_endpos))) vars contents form
    with Invalid_argument _ ->
      fatal (Error,Parse,
        ("'let' statement does not have the same number of variables and values.
"),
        Some (_startpos,_endpos))
    )}

formula_simple:
  f = var
    {          (f)}
| _1 = LPAREN x = formula_simple _3 = RPAREN
    {let f =
  let f =
    let _endpos = _endpos__3_ in
    let _startpos = _startpos__1_ in
                                                 (Loc (Paren x,(_startpos,_endpos)))
  in
                           (f)
in
           (f)}
| _1 = IF cond = expr _3 = THEN v1 = formula_simple _5 = ELSE v2 = formula_simple _7 = END
    {let f =
  let f =
    let _endpos = _endpos__7_ in
    let _startpos = _startpos__1_ in
                                                                  (Loc (If (cond,v1,v2),(_startpos,_endpos)))
  in
                           (f)
in
           (f)}
| _1 = NOT x = formula_simple
    {let f =
  let f =
    let _endpos = _endpos_x_ in
    let _startpos = _startpos__1_ in
                            (Loc (Not x,(_startpos,_endpos)))
  in
                           (f)
in
           (f)}
| x = formula_simple _2 = AND y = formula_simple
    {let f =
  let f =
    let _endpos = _endpos_y_ in
    let _startpos = _startpos_x_ in
                            (Loc (And (x,y),(_startpos,_endpos)) )
  in
                           (f)
in
           (f)}
| x = formula_simple _2 = OR y = formula_simple
    {let f =
  let f =
    let _endpos = _endpos_y_ in
    let _startpos = _startpos_x_ in
                            (Loc (Or (x,y),(_startpos,_endpos)) )
  in
                           (f)
in
           (f)}
| x = formula_simple _2 = XOR y = formula_simple
    {let f =
  let f =
    let _endpos = _endpos_y_ in
    let _startpos = _startpos_x_ in
                            (Loc (Xor (x,y),(_startpos,_endpos)) )
  in
                           (f)
in
           (f)}
| x = formula_simple _2 = IMPLIES y = formula_simple
    {let f =
  let f =
    let _endpos = _endpos_y_ in
    let _startpos = _startpos_x_ in
                            (Loc (Implies (x,y),(_startpos,_endpos)) )
  in
                           (f)
in
           (f)}
| x = formula_simple _2 = EQUIV y = formula_simple
    {let f =
  let f =
    let _endpos = _endpos_y_ in
    let _startpos = _startpos_x_ in
                            (Loc (Equiv (x,y),(_startpos,_endpos)) )
  in
                           (f)
in
           (f)}
| _1 = BIGAND v = comma_list_var_ _3 = IN s = comma_list_expr_ c = option_when_cond_ _6 = COLON f = formula_simple _8 = END
    {let f =
  let f =
    let _endpos = _endpos__8_ in
    let _startpos = _startpos__1_ in
        (Loc (Bigand (v,s,c,f),(_startpos,_endpos)))
  in
                           (f)
in
           (f)}
| _1 = BIGOR v = comma_list_var_ _3 = IN s = comma_list_expr_ c = option_when_cond_ _6 = COLON f = formula_simple _8 = END
    {let f =
  let f =
    let _endpos = _endpos__8_ in
    let _startpos = _startpos__1_ in
        (Loc (Bigor (v,s,c,f),(_startpos,_endpos)))
  in
                           (f)
in
           (f)}
| _1 = EXACT x = expr _3 = COMMA s = expr _5 = RPAREN
    {let f =
  let f =
    let _endpos = _endpos__5_ in
    let _startpos = _startpos__1_ in
                                                      (Loc (Exact (x,s),(_startpos,_endpos)))
  in
                           (f)
in
           (f)}
| _1 = ATLEAST x = expr _3 = COMMA s = expr _5 = RPAREN
    {let f =
  let f =
    let _endpos = _endpos__5_ in
    let _startpos = _startpos__1_ in
                                                      (Loc (Atleast (x,s),(_startpos,_endpos)))
  in
                           (f)
in
           (f)}
| _1 = ATMOST x = expr _3 = COMMA s = expr _5 = RPAREN
    {let f =
  let f =
    let _endpos = _endpos__5_ in
    let _startpos = _startpos__1_ in
                                                      (Loc (Atmost (x,s),(_startpos,_endpos)))
  in
                           (f)
in
           (f)}
| f = let_affect_expr_formula_simple_
    {let f =                          (f) in
           (f)}
| _1 = NEWLINE f = formula_simple %prec newlineBefore
    {let f =                 ( NewlineBefore f ) in
           (f)}
| f = formula_simple _2 = NEWLINE
    {let f =                 ( NewlineAfter f ) in
           (f)}
| f = prop
    {           (f)}
| _1 = TOP
    {        ( Top )}
| _1 = BOTTOM
    {           ( Bottom )}

formula_qbf:
  f = var
    {          (f)}
| _1 = LPAREN x = formula_qbf _3 = RPAREN
    {let f =
  let f =
    let _endpos = _endpos__3_ in
    let _startpos = _startpos__1_ in
                                                 (Loc (Paren x,(_startpos,_endpos)))
  in
                           (f)
in
           (f)}
| _1 = IF cond = expr _3 = THEN v1 = formula_qbf _5 = ELSE v2 = formula_qbf _7 = END
    {let f =
  let f =
    let _endpos = _endpos__7_ in
    let _startpos = _startpos__1_ in
                                                                  (Loc (If (cond,v1,v2),(_startpos,_endpos)))
  in
                           (f)
in
           (f)}
| _1 = NOT x = formula_qbf
    {let f =
  let f =
    let _endpos = _endpos_x_ in
    let _startpos = _startpos__1_ in
                            (Loc (Not x,(_startpos,_endpos)))
  in
                           (f)
in
           (f)}
| x = formula_qbf _2 = AND y = formula_qbf
    {let f =
  let f =
    let _endpos = _endpos_y_ in
    let _startpos = _startpos_x_ in
                            (Loc (And (x,y),(_startpos,_endpos)) )
  in
                           (f)
in
           (f)}
| x = formula_qbf _2 = OR y = formula_qbf
    {let f =
  let f =
    let _endpos = _endpos_y_ in
    let _startpos = _startpos_x_ in
                            (Loc (Or (x,y),(_startpos,_endpos)) )
  in
                           (f)
in
           (f)}
| x = formula_qbf _2 = XOR y = formula_qbf
    {let f =
  let f =
    let _endpos = _endpos_y_ in
    let _startpos = _startpos_x_ in
                            (Loc (Xor (x,y),(_startpos,_endpos)) )
  in
                           (f)
in
           (f)}
| x = formula_qbf _2 = IMPLIES y = formula_qbf
    {let f =
  let f =
    let _endpos = _endpos_y_ in
    let _startpos = _startpos_x_ in
                            (Loc (Implies (x,y),(_startpos,_endpos)) )
  in
                           (f)
in
           (f)}
| x = formula_qbf _2 = EQUIV y = formula_qbf
    {let f =
  let f =
    let _endpos = _endpos_y_ in
    let _startpos = _startpos_x_ in
                            (Loc (Equiv (x,y),(_startpos,_endpos)) )
  in
                           (f)
in
           (f)}
| _1 = BIGAND v = comma_list_var_ _3 = IN s = comma_list_expr_ c = option_when_cond_ _6 = COLON f = formula_qbf _8 = END
    {let f =
  let f =
    let _endpos = _endpos__8_ in
    let _startpos = _startpos__1_ in
        (Loc (Bigand (v,s,c,f),(_startpos,_endpos)))
  in
                           (f)
in
           (f)}
| _1 = BIGOR v = comma_list_var_ _3 = IN s = comma_list_expr_ c = option_when_cond_ _6 = COLON f = formula_qbf _8 = END
    {let f =
  let f =
    let _endpos = _endpos__8_ in
    let _startpos = _startpos__1_ in
        (Loc (Bigor (v,s,c,f),(_startpos,_endpos)))
  in
                           (f)
in
           (f)}
| _1 = EXACT x = expr _3 = COMMA s = expr _5 = RPAREN
    {let f =
  let f =
    let _endpos = _endpos__5_ in
    let _startpos = _startpos__1_ in
                                                      (Loc (Exact (x,s),(_startpos,_endpos)))
  in
                           (f)
in
           (f)}
| _1 = ATLEAST x = expr _3 = COMMA s = expr _5 = RPAREN
    {let f =
  let f =
    let _endpos = _endpos__5_ in
    let _startpos = _startpos__1_ in
                                                      (Loc (Atleast (x,s),(_startpos,_endpos)))
  in
                           (f)
in
           (f)}
| _1 = ATMOST x = expr _3 = COMMA s = expr _5 = RPAREN
    {let f =
  let f =
    let _endpos = _endpos__5_ in
    let _startpos = _startpos__1_ in
                                                      (Loc (Atmost (x,s),(_startpos,_endpos)))
  in
                           (f)
in
           (f)}
| f = let_affect_expr_formula_qbf_
    {let f =                          (f) in
           (f)}
| _1 = NEWLINE f = formula_qbf %prec newlineBefore
    {let f =                 ( NewlineBefore f ) in
           (f)}
| f = formula_qbf _2 = NEWLINE
    {let f =                 ( NewlineAfter f ) in
           (f)}
| f = prop
    {           (f)}
| _1 = TOP
    {        ( Top )}
| _1 = BOTTOM
    {           ( Bottom )}
| _1 = EXISTS v = comma_list_prop_or_var_ for_opt = option_for_statement_ _4 = COLON form = formula_qbf
    {let f =
  let _endpos = _endpos_form_ in
  let _startpos = _startpos__1_ in
    ( let res = form |> List.fold_right (fun v acc -> Loc (Exists (v,acc),(_startpos,_endpos))) v in
    match for_opt with
    | None -> res
    | Some (var,content) -> Loc (For (var,content,res),(_startpos,_endpos))
  )
in
                          (f)}
| _1 = FORALL v = comma_list_prop_or_var_ for_opt = option_for_statement_ _4 = COLON form = formula_qbf
    {let f =
  let _endpos = _endpos_form_ in
  let _startpos = _startpos__1_ in
    ( let res = form |> List.fold_right (fun v acc -> Loc (Forall (v,acc),(_startpos,_endpos))) v in
    match for_opt with
    | None -> res
    | Some (var,content) -> Loc (For (var,content,res),(_startpos,_endpos))
  )
in
                          (f)}

formula_smt:
  _1 = LPAREN x = formula_smt _3 = RPAREN
    {let f =
  let f =
    let _endpos = _endpos__3_ in
    let _startpos = _startpos__1_ in
                                                 (Loc (Paren x,(_startpos,_endpos)))
  in
                           (f)
in
               ( f )}
| _1 = IF cond = expr _3 = THEN v1 = formula_smt _5 = ELSE v2 = formula_smt _7 = END
    {let f =
  let f =
    let _endpos = _endpos__7_ in
    let _startpos = _startpos__1_ in
                                                                  (Loc (If (cond,v1,v2),(_startpos,_endpos)))
  in
                           (f)
in
               ( f )}
| _1 = NOT x = formula_smt
    {let f =
  let f =
    let _endpos = _endpos_x_ in
    let _startpos = _startpos__1_ in
                            (Loc (Not x,(_startpos,_endpos)))
  in
                           (f)
in
               ( f )}
| x = formula_smt _2 = AND y = formula_smt
    {let f =
  let f =
    let _endpos = _endpos_y_ in
    let _startpos = _startpos_x_ in
                            (Loc (And (x,y),(_startpos,_endpos)) )
  in
                           (f)
in
               ( f )}
| x = formula_smt _2 = OR y = formula_smt
    {let f =
  let f =
    let _endpos = _endpos_y_ in
    let _startpos = _startpos_x_ in
                            (Loc (Or (x,y),(_startpos,_endpos)) )
  in
                           (f)
in
               ( f )}
| x = formula_smt _2 = XOR y = formula_smt
    {let f =
  let f =
    let _endpos = _endpos_y_ in
    let _startpos = _startpos_x_ in
                            (Loc (Xor (x,y),(_startpos,_endpos)) )
  in
                           (f)
in
               ( f )}
| x = formula_smt _2 = IMPLIES y = formula_smt
    {let f =
  let f =
    let _endpos = _endpos_y_ in
    let _startpos = _startpos_x_ in
                            (Loc (Implies (x,y),(_startpos,_endpos)) )
  in
                           (f)
in
               ( f )}
| x = formula_smt _2 = EQUIV y = formula_smt
    {let f =
  let f =
    let _endpos = _endpos_y_ in
    let _startpos = _startpos_x_ in
                            (Loc (Equiv (x,y),(_startpos,_endpos)) )
  in
                           (f)
in
               ( f )}
| _1 = BIGAND v = comma_list_var_ _3 = IN s = comma_list_expr_ c = option_when_cond_ _6 = COLON f = formula_smt _8 = END
    {let f =
  let f =
    let _endpos = _endpos__8_ in
    let _startpos = _startpos__1_ in
        (Loc (Bigand (v,s,c,f),(_startpos,_endpos)))
  in
                           (f)
in
               ( f )}
| _1 = BIGOR v = comma_list_var_ _3 = IN s = comma_list_expr_ c = option_when_cond_ _6 = COLON f = formula_smt _8 = END
    {let f =
  let f =
    let _endpos = _endpos__8_ in
    let _startpos = _startpos__1_ in
        (Loc (Bigor (v,s,c,f),(_startpos,_endpos)))
  in
                           (f)
in
               ( f )}
| _1 = EXACT x = expr _3 = COMMA s = expr _5 = RPAREN
    {let f =
  let f =
    let _endpos = _endpos__5_ in
    let _startpos = _startpos__1_ in
                                                      (Loc (Exact (x,s),(_startpos,_endpos)))
  in
                           (f)
in
               ( f )}
| _1 = ATLEAST x = expr _3 = COMMA s = expr _5 = RPAREN
    {let f =
  let f =
    let _endpos = _endpos__5_ in
    let _startpos = _startpos__1_ in
                                                      (Loc (Atleast (x,s),(_startpos,_endpos)))
  in
                           (f)
in
               ( f )}
| _1 = ATMOST x = expr _3 = COMMA s = expr _5 = RPAREN
    {let f =
  let f =
    let _endpos = _endpos__5_ in
    let _startpos = _startpos__1_ in
                                                      (Loc (Atmost (x,s),(_startpos,_endpos)))
  in
                           (f)
in
               ( f )}
| f = let_affect_expr_formula_smt_
    {let f =                          (f) in
               ( f )}
| _1 = NEWLINE f = formula_smt %prec newlineBefore
    {let f =                 ( NewlineBefore f ) in
               ( f )}
| f = formula_smt _2 = NEWLINE
    {let f =                 ( NewlineAfter f ) in
               ( f )}
| f = expr_smt
    {               ( f )}

expr_smt:
  f = prop
    {           (f)}
| _1 = TOP
    {        ( Top )}
| _1 = BOTTOM
    {           ( Bottom )}
| x = var
    {          (x)}
| x = INT
    {let x =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                     (Loc (Int x,(_startpos,_endpos)))
in
                         (x)}
| x = FLOAT
    {let x =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                         (Loc (Float x,(_startpos,_endpos)))
in
                         (x)}
| x = expr_smt _2 = LT y = expr_smt
    {let x =
  let _endpos = _endpos_y_ in
  let _startpos = _startpos_x_ in
                          (Loc (Lesser_than (x,y),(_startpos,_endpos)) )
in
                         (x)}
| x = expr_smt _2 = LE y = expr_smt
    {let x =
  let _endpos = _endpos_y_ in
  let _startpos = _startpos_x_ in
                          (Loc (Lesser_or_equal (x,y),(_startpos,_endpos)) )
in
                         (x)}
| x = expr_smt _2 = GT y = expr_smt
    {let x =
  let _endpos = _endpos_y_ in
  let _startpos = _startpos_x_ in
                          (Loc (Greater_than (x,y),(_startpos,_endpos)) )
in
                         (x)}
| x = expr_smt _2 = GE y = expr_smt
    {let x =
  let _endpos = _endpos_y_ in
  let _startpos = _startpos_x_ in
                          (Loc (Greater_or_equal (x,y),(_startpos,_endpos)) )
in
                         (x)}
| x = expr_smt _2 = ADD y = expr_smt
    {let x =
  let _endpos = _endpos_y_ in
  let _startpos = _startpos_x_ in
                          (Loc (Add (x,y),(_startpos,_endpos)))
in
                         (x)}
| x = expr_smt _2 = SUB y = expr_smt %prec sub_prec
    {let x =
  let _endpos = _endpos_y_ in
  let _startpos = _startpos_x_ in
                          (Loc (Sub (x,y),(_startpos,_endpos)))
in
                         (x)}
| _1 = SUB x = expr_smt %prec neg_prec
    {let x =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos__1_ in
                          (Loc (Neg x,(_startpos,_endpos))     )
in
                         (x)}
| x = expr_smt _2 = MUL y = expr_smt
    {let x =
  let _endpos = _endpos_y_ in
  let _startpos = _startpos_x_ in
                          (Loc (Mul (x,y),(_startpos,_endpos)))
in
                         (x)}
| x = expr_smt _2 = DIV y = expr_smt
    {let x =
  let _endpos = _endpos_y_ in
  let _startpos = _startpos_x_ in
                          (Loc (Div (x,y),(_startpos,_endpos)))
in
                         (x)}
| x = expr_smt _2 = EQUAL y = expr_smt
    {let x =
  let _endpos = _endpos_y_ in
  let _startpos = _startpos_x_ in
                          (Loc (Equal (x,y),(_startpos,_endpos)) )
in
                         (x)}
| x = expr_smt _2 = NOTEQUAL y = expr_smt
    {let x =
  let _endpos = _endpos_y_ in
  let _startpos = _startpos_x_ in
                          (Loc (Not_equal (x,y),(_startpos,_endpos)) )
in
                         (x)}
| _1 = LPAREN x = expr_smt _3 = RPAREN
    {let x =
  let _endpos = _endpos__3_ in
  let _startpos = _startpos__1_ in
                                               (Loc (Paren x,(_startpos,_endpos)))
in
                               (x)}

%%
