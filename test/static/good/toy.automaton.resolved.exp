State 0:
## Known stack suffix:
##
## LR(1) items:
phrase' -> . phrase [ # ]
## Transitions:
-- On UNIT shift to state 1
-- On TRY shift to state 2
-- On TRUE shift to state 3
-- On STRINGCONST shift to state 4
-- On SHARP shift to state 141
-- On REF shift to state 5
-- On REC shift to state 7
-- On MATCH shift to state 40
-- On LPAREN shift to state 6
-- On LET shift to state 143
-- On LBRACKETBAR shift to state 46
-- On LBRACE shift to state 47
-- On INTCONST shift to state 14
-- On INCLUDE shift to state 149
-- On IF shift to state 50
-- On IDENT shift to state 51
-- On FUNCTION shift to state 93
-- On FUN shift to state 96
-- On FLOATCONST shift to state 16
-- On FALSE shift to state 17
-- On CONSTRUCTOR shift to state 52
-- On CHARCONST shift to state 20
-- On BANG shift to state 55
-- On phrase shift to state 151
-- On expression3 shift to state 99
-- On expression2 shift to state 100
-- On expression1 shift to state 77
-- On expression0 shift to state 67
-- On expression shift to state 152
-- On constant shift to state 66
## Reductions:

State 1:
## Known stack suffix:
## UNIT
## LR(1) items:
constant -> UNIT . [ WITH UNIT UNDERSCORE TRUE THEN STRINGCONST SETMINUS SEMISEMI SEMI RPAREN RBRACE LPAREN LBRACKETBAR LBRACE INTCONST IN IDENT FLOATCONST FALSE EQUAL ELSE DOT CONSTRUCTOR COMMA CHARCONST BARRBRACKET BAR BANG ATAT AT ASSIGN AS ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constant -> UNIT

State 2:
## Known stack suffix:
## TRY
## LR(1) items:
expression -> TRY . expression WITH try_match [ WITH SEMISEMI RPAREN IN BAR AND ]
## Transitions:
-- On UNIT shift to state 1
-- On TRY shift to state 2
-- On TRUE shift to state 3
-- On STRINGCONST shift to state 4
-- On REF shift to state 5
-- On REC shift to state 7
-- On MATCH shift to state 40
-- On LPAREN shift to state 6
-- On LET shift to state 41
-- On LBRACKETBAR shift to state 46
-- On LBRACE shift to state 47
-- On INTCONST shift to state 14
-- On IF shift to state 50
-- On IDENT shift to state 51
-- On FUNCTION shift to state 93
-- On FUN shift to state 96
-- On FLOATCONST shift to state 16
-- On FALSE shift to state 17
-- On CONSTRUCTOR shift to state 52
-- On CHARCONST shift to state 20
-- On BANG shift to state 55
-- On expression3 shift to state 99
-- On expression2 shift to state 100
-- On expression1 shift to state 77
-- On expression0 shift to state 67
-- On expression shift to state 133
-- On constant shift to state 66
## Reductions:

State 3:
## Known stack suffix:
## TRUE
## LR(1) items:
constant -> TRUE . [ WITH UNIT UNDERSCORE TRUE THEN STRINGCONST SETMINUS SEMISEMI SEMI RPAREN RBRACE LPAREN LBRACKETBAR LBRACE INTCONST IN IDENT FLOATCONST FALSE EQUAL ELSE DOT CONSTRUCTOR COMMA CHARCONST BARRBRACKET BAR BANG ATAT AT ASSIGN AS ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constant -> TRUE

State 4:
## Known stack suffix:
## STRINGCONST
## LR(1) items:
constant -> STRINGCONST . [ WITH UNIT UNDERSCORE TRUE THEN STRINGCONST SETMINUS SEMISEMI SEMI RPAREN RBRACE LPAREN LBRACKETBAR LBRACE INTCONST IN IDENT FLOATCONST FALSE EQUAL ELSE DOT CONSTRUCTOR COMMA CHARCONST BARRBRACKET BAR BANG ATAT AT ASSIGN AS ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constant -> STRINGCONST

State 5:
## Known stack suffix:
## REF
## LR(1) items:
expression1 -> REF . expression0 [ WITH UNIT TRUE THEN STRINGCONST SETMINUS SEMISEMI SEMI RPAREN RBRACE LPAREN LBRACKETBAR LBRACE INTCONST IN IDENT FLOATCONST FALSE ELSE DOT CONSTRUCTOR COMMA CHARCONST BARRBRACKET BAR BANG ATAT AT ASSIGN AND ]
## Transitions:
-- On UNIT shift to state 1
-- On TRUE shift to state 3
-- On STRINGCONST shift to state 4
-- On LPAREN shift to state 6
-- On LBRACKETBAR shift to state 46
-- On LBRACE shift to state 47
-- On INTCONST shift to state 14
-- On IDENT shift to state 51
-- On FLOATCONST shift to state 16
-- On FALSE shift to state 17
-- On CONSTRUCTOR shift to state 53
-- On CHARCONST shift to state 20
-- On BANG shift to state 55
-- On expression0 shift to state 132
-- On constant shift to state 66
## Reductions:

State 6:
## Known stack suffix:
## LPAREN
## LR(1) items:
expression0 -> LPAREN . expression RPAREN [ WITH UNIT TRUE THEN STRINGCONST SETMINUS SEMISEMI SEMI RPAREN RBRACE LPAREN LBRACKETBAR LBRACE INTCONST IN IDENT FLOATCONST FALSE ELSE DOT CONSTRUCTOR COMMA CHARCONST BARRBRACKET BAR BANG ATAT AT ASSIGN AND ]
## Transitions:
-- On UNIT shift to state 1
-- On TRY shift to state 2
-- On TRUE shift to state 3
-- On STRINGCONST shift to state 4
-- On REF shift to state 5
-- On REC shift to state 7
-- On MATCH shift to state 40
-- On LPAREN shift to state 6
-- On LET shift to state 41
-- On LBRACKETBAR shift to state 46
-- On LBRACE shift to state 47
-- On INTCONST shift to state 14
-- On IF shift to state 50
-- On IDENT shift to state 51
-- On FUNCTION shift to state 93
-- On FUN shift to state 96
-- On FLOATCONST shift to state 16
-- On FALSE shift to state 17
-- On CONSTRUCTOR shift to state 52
-- On CHARCONST shift to state 20
-- On BANG shift to state 55
-- On expression3 shift to state 99
-- On expression2 shift to state 100
-- On expression1 shift to state 77
-- On expression0 shift to state 67
-- On expression shift to state 130
-- On constant shift to state 66
## Reductions:

State 7:
## Known stack suffix:
## REC
## LR(1) items:
expression -> REC . pattern IN expression [ WITH SEMISEMI RPAREN IN BAR AND ]
## Transitions:
-- On UNIT shift to state 1
-- On UNDERSCORE shift to state 8
-- On TRUE shift to state 3
-- On STRINGCONST shift to state 4
-- On REF shift to state 9
-- On LPAREN shift to state 10
-- On LBRACE shift to state 11
-- On INTCONST shift to state 14
-- On IDENT shift to state 15
-- On FLOATCONST shift to state 16
-- On FALSE shift to state 17
-- On CONSTRUCTOR shift to state 18
-- On CHARCONST shift to state 20
-- On simple_pattern shift to state 23
-- On pattern shift to state 38
-- On constant shift to state 22
## Reductions:

State 8:
## Known stack suffix:
## UNDERSCORE
## LR(1) items:
simple_pattern -> UNDERSCORE . [ UNIT UNDERSCORE TRUE STRINGCONST SEMI RPAREN RBRACE LPAREN LBRACE INTCONST IN IDENT FLOATCONST FALSE EQUAL CONSTRUCTOR COMMA CHARCONST BAR AS ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_pattern -> UNDERSCORE

State 9:
## Known stack suffix:
## REF
## LR(1) items:
pattern -> REF . simple_pattern [ SEMI RPAREN RBRACE IN EQUAL COMMA BAR AS ARROW ]
## Transitions:
-- On UNIT shift to state 1
-- On UNDERSCORE shift to state 8
-- On TRUE shift to state 3
-- On STRINGCONST shift to state 4
-- On LPAREN shift to state 10
-- On LBRACE shift to state 11
-- On INTCONST shift to state 14
-- On IDENT shift to state 15
-- On FLOATCONST shift to state 16
-- On FALSE shift to state 17
-- On CONSTRUCTOR shift to state 19
-- On CHARCONST shift to state 20
-- On simple_pattern shift to state 37
-- On constant shift to state 22
## Reductions:

State 10:
## Known stack suffix:
## LPAREN
## LR(1) items:
simple_pattern -> LPAREN . pattern RPAREN [ UNIT UNDERSCORE TRUE STRINGCONST SEMI RPAREN RBRACE LPAREN LBRACE INTCONST IN IDENT FLOATCONST FALSE EQUAL CONSTRUCTOR COMMA CHARCONST BAR AS ARROW ]
## Transitions:
-- On UNIT shift to state 1
-- On UNDERSCORE shift to state 8
-- On TRUE shift to state 3
-- On STRINGCONST shift to state 4
-- On REF shift to state 9
-- On LPAREN shift to state 10
-- On LBRACE shift to state 11
-- On INTCONST shift to state 14
-- On IDENT shift to state 15
-- On FLOATCONST shift to state 16
-- On FALSE shift to state 17
-- On CONSTRUCTOR shift to state 18
-- On CHARCONST shift to state 20
-- On simple_pattern shift to state 23
-- On pattern shift to state 35
-- On constant shift to state 22
## Reductions:

State 11:
## Known stack suffix:
## LBRACE
## LR(1) items:
simple_pattern -> LBRACE . label_pattern_list RBRACE [ UNIT UNDERSCORE TRUE STRINGCONST SEMI RPAREN RBRACE LPAREN LBRACE INTCONST IN IDENT FLOATCONST FALSE EQUAL CONSTRUCTOR COMMA CHARCONST BAR AS ARROW ]
## Transitions:
-- On IDENT shift to state 12
-- On label_pattern_list shift to state 33
## Reductions:
-- On RBRACE
--   reduce production label_pattern_list ->

State 12:
## Known stack suffix:
## IDENT
## LR(1) items:
label_pattern_list -> IDENT . EQUAL pattern [ RBRACE ]
label_pattern_list -> IDENT . EQUAL pattern SEMI label_pattern_list [ RBRACE ]
## Transitions:
-- On EQUAL shift to state 13
## Reductions:

State 13:
## Known stack suffix:
## IDENT EQUAL
## LR(1) items:
label_pattern_list -> IDENT EQUAL . pattern [ RBRACE ]
label_pattern_list -> IDENT EQUAL . pattern SEMI label_pattern_list [ RBRACE ]
## Transitions:
-- On UNIT shift to state 1
-- On UNDERSCORE shift to state 8
-- On TRUE shift to state 3
-- On STRINGCONST shift to state 4
-- On REF shift to state 9
-- On LPAREN shift to state 10
-- On LBRACE shift to state 11
-- On INTCONST shift to state 14
-- On IDENT shift to state 15
-- On FLOATCONST shift to state 16
-- On FALSE shift to state 17
-- On CONSTRUCTOR shift to state 18
-- On CHARCONST shift to state 20
-- On simple_pattern shift to state 23
-- On pattern shift to state 24
-- On constant shift to state 22
## Reductions:

State 14:
## Known stack suffix:
## INTCONST
## LR(1) items:
constant -> INTCONST . [ WITH UNIT UNDERSCORE TRUE THEN STRINGCONST SETMINUS SEMISEMI SEMI RPAREN RBRACE LPAREN LBRACKETBAR LBRACE INTCONST IN IDENT FLOATCONST FALSE EQUAL ELSE DOT CONSTRUCTOR COMMA CHARCONST BARRBRACKET BAR BANG ATAT AT ASSIGN AS ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constant -> INTCONST

State 15:
## Known stack suffix:
## IDENT
## LR(1) items:
simple_pattern -> IDENT . [ UNIT UNDERSCORE TRUE STRINGCONST SEMI RPAREN RBRACE LPAREN LBRACE INTCONST IN IDENT FLOATCONST FALSE EQUAL CONSTRUCTOR COMMA CHARCONST BAR AS ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_pattern -> IDENT

State 16:
## Known stack suffix:
## FLOATCONST
## LR(1) items:
constant -> FLOATCONST . [ WITH UNIT UNDERSCORE TRUE THEN STRINGCONST SETMINUS SEMISEMI SEMI RPAREN RBRACE LPAREN LBRACKETBAR LBRACE INTCONST IN IDENT FLOATCONST FALSE EQUAL ELSE DOT CONSTRUCTOR COMMA CHARCONST BARRBRACKET BAR BANG ATAT AT ASSIGN AS ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constant -> FLOATCONST

State 17:
## Known stack suffix:
## FALSE
## LR(1) items:
constant -> FALSE . [ WITH UNIT UNDERSCORE TRUE THEN STRINGCONST SETMINUS SEMISEMI SEMI RPAREN RBRACE LPAREN LBRACKETBAR LBRACE INTCONST IN IDENT FLOATCONST FALSE EQUAL ELSE DOT CONSTRUCTOR COMMA CHARCONST BARRBRACKET BAR BANG ATAT AT ASSIGN AS ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constant -> FALSE

State 18:
## Known stack suffix:
## CONSTRUCTOR
## LR(1) items:
pattern -> CONSTRUCTOR . simple_pattern [ SEMI RPAREN RBRACE IN EQUAL COMMA BAR AS ARROW ]
simple_pattern -> CONSTRUCTOR . [ SEMI RPAREN RBRACE IN EQUAL COMMA BAR AS ARROW ]
## Transitions:
-- On UNIT shift to state 1
-- On UNDERSCORE shift to state 8
-- On TRUE shift to state 3
-- On STRINGCONST shift to state 4
-- On LPAREN shift to state 10
-- On LBRACE shift to state 11
-- On INTCONST shift to state 14
-- On IDENT shift to state 15
-- On FLOATCONST shift to state 16
-- On FALSE shift to state 17
-- On CONSTRUCTOR shift to state 19
-- On CHARCONST shift to state 20
-- On simple_pattern shift to state 21
-- On constant shift to state 22
## Reductions:
-- On SEMI RPAREN RBRACE IN EQUAL COMMA BAR AS ARROW
--   reduce production simple_pattern -> CONSTRUCTOR

State 19:
## Known stack suffix:
## CONSTRUCTOR
## LR(1) items:
simple_pattern -> CONSTRUCTOR . [ UNIT UNDERSCORE TRUE STRINGCONST SEMI RPAREN RBRACE LPAREN LBRACE INTCONST IN IDENT FLOATCONST FALSE EQUAL CONSTRUCTOR COMMA CHARCONST BAR AS ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_pattern -> CONSTRUCTOR

State 20:
## Known stack suffix:
## CHARCONST
## LR(1) items:
constant -> CHARCONST . [ WITH UNIT UNDERSCORE TRUE THEN STRINGCONST SETMINUS SEMISEMI SEMI RPAREN RBRACE LPAREN LBRACKETBAR LBRACE INTCONST IN IDENT FLOATCONST FALSE EQUAL ELSE DOT CONSTRUCTOR COMMA CHARCONST BARRBRACKET BAR BANG ATAT AT ASSIGN AS ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constant -> CHARCONST

State 21:
## Known stack suffix:
## CONSTRUCTOR simple_pattern
## LR(1) items:
pattern -> CONSTRUCTOR simple_pattern . [ SEMI RPAREN RBRACE IN EQUAL COMMA BAR AS ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pattern -> CONSTRUCTOR simple_pattern

State 22:
## Known stack suffix:
## constant
## LR(1) items:
simple_pattern -> constant . [ UNIT UNDERSCORE TRUE STRINGCONST SEMI RPAREN RBRACE LPAREN LBRACE INTCONST IN IDENT FLOATCONST FALSE EQUAL CONSTRUCTOR COMMA CHARCONST BAR AS ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_pattern -> constant

State 23:
## Known stack suffix:
## simple_pattern
## LR(1) items:
pattern -> simple_pattern . [ SEMI RPAREN RBRACE IN EQUAL COMMA BAR AS ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pattern -> simple_pattern

State 24:
## Known stack suffix:
## IDENT EQUAL pattern
## LR(1) items:
label_pattern_list -> IDENT EQUAL pattern . [ RBRACE ]
label_pattern_list -> IDENT EQUAL pattern . SEMI label_pattern_list [ RBRACE ]
pattern -> pattern . AS IDENT [ SEMI RBRACE COMMA BAR AS ]
pattern -> pattern . COMMA pattern [ SEMI RBRACE COMMA BAR AS ]
pattern -> pattern . BAR pattern [ SEMI RBRACE COMMA BAR AS ]
## Transitions:
-- On SEMI shift to state 25
-- On COMMA shift to state 27
-- On BAR shift to state 29
-- On AS shift to state 31
## Reductions:
-- On RBRACE
--   reduce production label_pattern_list -> IDENT EQUAL pattern

State 25:
## Known stack suffix:
## IDENT EQUAL pattern SEMI
## LR(1) items:
label_pattern_list -> IDENT EQUAL pattern SEMI . label_pattern_list [ RBRACE ]
## Transitions:
-- On IDENT shift to state 12
-- On label_pattern_list shift to state 26
## Reductions:
-- On RBRACE
--   reduce production label_pattern_list ->

State 26:
## Known stack suffix:
## IDENT EQUAL pattern SEMI label_pattern_list
## LR(1) items:
label_pattern_list -> IDENT EQUAL pattern SEMI label_pattern_list . [ RBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production label_pattern_list -> IDENT EQUAL pattern SEMI label_pattern_list

State 27:
## Known stack suffix:
## pattern COMMA
## LR(1) items:
pattern -> pattern COMMA . pattern [ SEMI RPAREN RBRACE IN EQUAL COMMA BAR AS ARROW ]
## Transitions:
-- On UNIT shift to state 1
-- On UNDERSCORE shift to state 8
-- On TRUE shift to state 3
-- On STRINGCONST shift to state 4
-- On REF shift to state 9
-- On LPAREN shift to state 10
-- On LBRACE shift to state 11
-- On INTCONST shift to state 14
-- On IDENT shift to state 15
-- On FLOATCONST shift to state 16
-- On FALSE shift to state 17
-- On CONSTRUCTOR shift to state 18
-- On CHARCONST shift to state 20
-- On simple_pattern shift to state 23
-- On pattern shift to state 28
-- On constant shift to state 22
## Reductions:

State 28:
## Known stack suffix:
## pattern COMMA pattern
## LR(1) items:
pattern -> pattern . AS IDENT [ SEMI RPAREN RBRACE IN EQUAL COMMA BAR AS ARROW ]
pattern -> pattern . COMMA pattern [ SEMI RPAREN RBRACE IN EQUAL COMMA BAR AS ARROW ]
pattern -> pattern COMMA pattern . [ SEMI RPAREN RBRACE IN EQUAL COMMA BAR AS ARROW ]
pattern -> pattern . BAR pattern [ SEMI RPAREN RBRACE IN EQUAL COMMA BAR AS ARROW ]
## Transitions:
-- On COMMA shift to state 27
-- On BAR shift to state 29
-- On AS shift to state 31
## Reductions:
-- On SEMI RPAREN RBRACE IN EQUAL ARROW
--   reduce production pattern -> pattern COMMA pattern

State 29:
## Known stack suffix:
## pattern BAR
## LR(1) items:
pattern -> pattern BAR . pattern [ SEMI RPAREN RBRACE IN EQUAL COMMA BAR AS ARROW ]
## Transitions:
-- On UNIT shift to state 1
-- On UNDERSCORE shift to state 8
-- On TRUE shift to state 3
-- On STRINGCONST shift to state 4
-- On REF shift to state 9
-- On LPAREN shift to state 10
-- On LBRACE shift to state 11
-- On INTCONST shift to state 14
-- On IDENT shift to state 15
-- On FLOATCONST shift to state 16
-- On FALSE shift to state 17
-- On CONSTRUCTOR shift to state 18
-- On CHARCONST shift to state 20
-- On simple_pattern shift to state 23
-- On pattern shift to state 30
-- On constant shift to state 22
## Reductions:

State 30:
## Known stack suffix:
## pattern BAR pattern
## LR(1) items:
pattern -> pattern . AS IDENT [ SEMI RPAREN RBRACE IN EQUAL COMMA BAR AS ARROW ]
pattern -> pattern . COMMA pattern [ SEMI RPAREN RBRACE IN EQUAL COMMA BAR AS ARROW ]
pattern -> pattern . BAR pattern [ SEMI RPAREN RBRACE IN EQUAL COMMA BAR AS ARROW ]
pattern -> pattern BAR pattern . [ SEMI RPAREN RBRACE IN EQUAL COMMA BAR AS ARROW ]
## Transitions:
-- On COMMA shift to state 27
-- On BAR shift to state 29
-- On AS shift to state 31
## Reductions:
-- On SEMI RPAREN RBRACE IN EQUAL ARROW
--   reduce production pattern -> pattern BAR pattern

State 31:
## Known stack suffix:
## pattern AS
## LR(1) items:
pattern -> pattern AS . IDENT [ SEMI RPAREN RBRACE IN EQUAL COMMA BAR AS ARROW ]
## Transitions:
-- On IDENT shift to state 32
## Reductions:

State 32:
## Known stack suffix:
## pattern AS IDENT
## LR(1) items:
pattern -> pattern AS IDENT . [ SEMI RPAREN RBRACE IN EQUAL COMMA BAR AS ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pattern -> pattern AS IDENT

State 33:
## Known stack suffix:
## LBRACE label_pattern_list
## LR(1) items:
simple_pattern -> LBRACE label_pattern_list . RBRACE [ UNIT UNDERSCORE TRUE STRINGCONST SEMI RPAREN RBRACE LPAREN LBRACE INTCONST IN IDENT FLOATCONST FALSE EQUAL CONSTRUCTOR COMMA CHARCONST BAR AS ARROW ]
## Transitions:
-- On RBRACE shift to state 34
## Reductions:

State 34:
## Known stack suffix:
## LBRACE label_pattern_list RBRACE
## LR(1) items:
simple_pattern -> LBRACE label_pattern_list RBRACE . [ UNIT UNDERSCORE TRUE STRINGCONST SEMI RPAREN RBRACE LPAREN LBRACE INTCONST IN IDENT FLOATCONST FALSE EQUAL CONSTRUCTOR COMMA CHARCONST BAR AS ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_pattern -> LBRACE label_pattern_list RBRACE

State 35:
## Known stack suffix:
## LPAREN pattern
## LR(1) items:
pattern -> pattern . AS IDENT [ RPAREN COMMA BAR AS ]
pattern -> pattern . COMMA pattern [ RPAREN COMMA BAR AS ]
pattern -> pattern . BAR pattern [ RPAREN COMMA BAR AS ]
simple_pattern -> LPAREN pattern . RPAREN [ UNIT UNDERSCORE TRUE STRINGCONST SEMI RPAREN RBRACE LPAREN LBRACE INTCONST IN IDENT FLOATCONST FALSE EQUAL CONSTRUCTOR COMMA CHARCONST BAR AS ARROW ]
## Transitions:
-- On RPAREN shift to state 36
-- On COMMA shift to state 27
-- On BAR shift to state 29
-- On AS shift to state 31
## Reductions:

State 36:
## Known stack suffix:
## LPAREN pattern RPAREN
## LR(1) items:
simple_pattern -> LPAREN pattern RPAREN . [ UNIT UNDERSCORE TRUE STRINGCONST SEMI RPAREN RBRACE LPAREN LBRACE INTCONST IN IDENT FLOATCONST FALSE EQUAL CONSTRUCTOR COMMA CHARCONST BAR AS ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_pattern -> LPAREN pattern RPAREN

State 37:
## Known stack suffix:
## REF simple_pattern
## LR(1) items:
pattern -> REF simple_pattern . [ SEMI RPAREN RBRACE IN EQUAL COMMA BAR AS ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pattern -> REF simple_pattern

State 38:
## Known stack suffix:
## REC pattern
## LR(1) items:
expression -> REC pattern . IN expression [ WITH SEMISEMI RPAREN IN BAR AND ]
pattern -> pattern . AS IDENT [ IN COMMA BAR AS ]
pattern -> pattern . COMMA pattern [ IN COMMA BAR AS ]
pattern -> pattern . BAR pattern [ IN COMMA BAR AS ]
## Transitions:
-- On IN shift to state 39
-- On COMMA shift to state 27
-- On BAR shift to state 29
-- On AS shift to state 31
## Reductions:

State 39:
## Known stack suffix:
## REC pattern IN
## LR(1) items:
expression -> REC pattern IN . expression [ WITH SEMISEMI RPAREN IN BAR AND ]
## Transitions:
-- On UNIT shift to state 1
-- On TRY shift to state 2
-- On TRUE shift to state 3
-- On STRINGCONST shift to state 4
-- On REF shift to state 5
-- On REC shift to state 7
-- On MATCH shift to state 40
-- On LPAREN shift to state 6
-- On LET shift to state 41
-- On LBRACKETBAR shift to state 46
-- On LBRACE shift to state 47
-- On INTCONST shift to state 14
-- On IF shift to state 50
-- On IDENT shift to state 51
-- On FUNCTION shift to state 93
-- On FUN shift to state 96
-- On FLOATCONST shift to state 16
-- On FALSE shift to state 17
-- On CONSTRUCTOR shift to state 52
-- On CHARCONST shift to state 20
-- On BANG shift to state 55
-- On expression3 shift to state 99
-- On expression2 shift to state 100
-- On expression1 shift to state 77
-- On expression0 shift to state 67
-- On expression shift to state 129
-- On constant shift to state 66
## Reductions:

State 40:
## Known stack suffix:
## MATCH
## LR(1) items:
expression -> MATCH . expression WITH function_match [ WITH SEMISEMI RPAREN IN BAR AND ]
## Transitions:
-- On UNIT shift to state 1
-- On TRY shift to state 2
-- On TRUE shift to state 3
-- On STRINGCONST shift to state 4
-- On REF shift to state 5
-- On REC shift to state 7
-- On MATCH shift to state 40
-- On LPAREN shift to state 6
-- On LET shift to state 41
-- On LBRACKETBAR shift to state 46
-- On LBRACE shift to state 47
-- On INTCONST shift to state 14
-- On IF shift to state 50
-- On IDENT shift to state 51
-- On FUNCTION shift to state 93
-- On FUN shift to state 96
-- On FLOATCONST shift to state 16
-- On FALSE shift to state 17
-- On CONSTRUCTOR shift to state 52
-- On CHARCONST shift to state 20
-- On BANG shift to state 55
-- On expression3 shift to state 99
-- On expression2 shift to state 100
-- On expression1 shift to state 77
-- On expression0 shift to state 67
-- On expression shift to state 126
-- On constant shift to state 66
## Reductions:

State 41:
## Known stack suffix:
## LET
## LR(1) items:
expression -> LET . binding_list IN expression [ WITH SEMISEMI RPAREN IN BAR AND ]
expression -> LET . REC binding_list IN expression [ WITH SEMISEMI RPAREN IN BAR AND ]
## Transitions:
-- On UNIT shift to state 1
-- On UNDERSCORE shift to state 8
-- On TRUE shift to state 3
-- On STRINGCONST shift to state 4
-- On REF shift to state 9
-- On REC shift to state 42
-- On LPAREN shift to state 10
-- On LBRACE shift to state 11
-- On INTCONST shift to state 14
-- On IDENT shift to state 43
-- On FLOATCONST shift to state 16
-- On FALSE shift to state 17
-- On CONSTRUCTOR shift to state 18
-- On CHARCONST shift to state 20
-- On simple_pattern shift to state 23
-- On pattern shift to state 114
-- On constant shift to state 22
-- On binding_list shift to state 123
-- On binding shift to state 120
## Reductions:

State 42:
## Known stack suffix:
## LET REC
## LR(1) items:
expression -> LET REC . binding_list IN expression [ WITH SEMISEMI RPAREN IN BAR AND ]
## Transitions:
-- On UNIT shift to state 1
-- On UNDERSCORE shift to state 8
-- On TRUE shift to state 3
-- On STRINGCONST shift to state 4
-- On REF shift to state 9
-- On LPAREN shift to state 10
-- On LBRACE shift to state 11
-- On INTCONST shift to state 14
-- On IDENT shift to state 43
-- On FLOATCONST shift to state 16
-- On FALSE shift to state 17
-- On CONSTRUCTOR shift to state 18
-- On CHARCONST shift to state 20
-- On simple_pattern shift to state 23
-- On pattern shift to state 114
-- On constant shift to state 22
-- On binding_list shift to state 117
-- On binding shift to state 120
## Reductions:

State 43:
## Known stack suffix:
## IDENT
## LR(1) items:
binding -> IDENT . simple_pattern_list EQUAL expression [ SEMISEMI IN AND ]
simple_pattern -> IDENT . [ EQUAL COMMA BAR AS ]
## Transitions:
-- On UNIT shift to state 1
-- On UNDERSCORE shift to state 8
-- On TRUE shift to state 3
-- On STRINGCONST shift to state 4
-- On LPAREN shift to state 10
-- On LBRACE shift to state 11
-- On INTCONST shift to state 14
-- On IDENT shift to state 15
-- On FLOATCONST shift to state 16
-- On FALSE shift to state 17
-- On CONSTRUCTOR shift to state 19
-- On CHARCONST shift to state 20
-- On simple_pattern_list shift to state 44
-- On simple_pattern shift to state 105
-- On constant shift to state 22
## Reductions:
-- On EQUAL COMMA BAR AS
--   reduce production simple_pattern -> IDENT

State 44:
## Known stack suffix:
## IDENT simple_pattern_list
## LR(1) items:
binding -> IDENT simple_pattern_list . EQUAL expression [ SEMISEMI IN AND ]
## Transitions:
-- On EQUAL shift to state 45
## Reductions:

State 45:
## Known stack suffix:
## IDENT simple_pattern_list EQUAL
## LR(1) items:
binding -> IDENT simple_pattern_list EQUAL . expression [ SEMISEMI IN AND ]
## Transitions:
-- On UNIT shift to state 1
-- On TRY shift to state 2
-- On TRUE shift to state 3
-- On STRINGCONST shift to state 4
-- On REF shift to state 5
-- On REC shift to state 7
-- On MATCH shift to state 40
-- On LPAREN shift to state 6
-- On LET shift to state 41
-- On LBRACKETBAR shift to state 46
-- On LBRACE shift to state 47
-- On INTCONST shift to state 14
-- On IF shift to state 50
-- On IDENT shift to state 51
-- On FUNCTION shift to state 93
-- On FUN shift to state 96
-- On FLOATCONST shift to state 16
-- On FALSE shift to state 17
-- On CONSTRUCTOR shift to state 52
-- On CHARCONST shift to state 20
-- On BANG shift to state 55
-- On expression3 shift to state 99
-- On expression2 shift to state 100
-- On expression1 shift to state 77
-- On expression0 shift to state 67
-- On expression shift to state 113
-- On constant shift to state 66
## Reductions:

State 46:
## Known stack suffix:
## LBRACKETBAR
## LR(1) items:
expression0 -> LBRACKETBAR . expr_semi_list BARRBRACKET [ WITH UNIT TRUE THEN STRINGCONST SETMINUS SEMISEMI SEMI RPAREN RBRACE LPAREN LBRACKETBAR LBRACE INTCONST IN IDENT FLOATCONST FALSE ELSE DOT CONSTRUCTOR COMMA CHARCONST BARRBRACKET BAR BANG ATAT AT ASSIGN AND ]
## Transitions:
-- On UNIT shift to state 1
-- On TRUE shift to state 3
-- On STRINGCONST shift to state 4
-- On REF shift to state 5
-- On LPAREN shift to state 6
-- On LBRACKETBAR shift to state 46
-- On LBRACE shift to state 47
-- On INTCONST shift to state 14
-- On IF shift to state 50
-- On IDENT shift to state 51
-- On FLOATCONST shift to state 16
-- On FALSE shift to state 17
-- On CONSTRUCTOR shift to state 52
-- On CHARCONST shift to state 20
-- On BANG shift to state 55
-- On expression2 shift to state 88
-- On expression1 shift to state 77
-- On expression0 shift to state 67
-- On expr_semi_list shift to state 91
-- On constant shift to state 66
## Reductions:
-- On BARRBRACKET
--   reduce production expr_semi_list ->

State 47:
## Known stack suffix:
## LBRACE
## LR(1) items:
expression0 -> LBRACE . label_expression_list RBRACE [ WITH UNIT TRUE THEN STRINGCONST SETMINUS SEMISEMI SEMI RPAREN RBRACE LPAREN LBRACKETBAR LBRACE INTCONST IN IDENT FLOATCONST FALSE ELSE DOT CONSTRUCTOR COMMA CHARCONST BARRBRACKET BAR BANG ATAT AT ASSIGN AND ]
## Transitions:
-- On IDENT shift to state 48
-- On label_expression_list shift to state 83
-- On label_expression shift to state 85
## Reductions:
-- On RBRACE
--   reduce production label_expression_list ->

State 48:
## Known stack suffix:
## IDENT
## LR(1) items:
label_expression -> IDENT . EQUAL expression2 [ SEMI RBRACE ]
## Transitions:
-- On EQUAL shift to state 49
## Reductions:

State 49:
## Known stack suffix:
## IDENT EQUAL
## LR(1) items:
label_expression -> IDENT EQUAL . expression2 [ SEMI RBRACE ]
## Transitions:
-- On UNIT shift to state 1
-- On TRUE shift to state 3
-- On STRINGCONST shift to state 4
-- On REF shift to state 5
-- On LPAREN shift to state 6
-- On LBRACKETBAR shift to state 46
-- On LBRACE shift to state 47
-- On INTCONST shift to state 14
-- On IF shift to state 50
-- On IDENT shift to state 51
-- On FLOATCONST shift to state 16
-- On FALSE shift to state 17
-- On CONSTRUCTOR shift to state 52
-- On CHARCONST shift to state 20
-- On BANG shift to state 55
-- On expression2 shift to state 82
-- On expression1 shift to state 77
-- On expression0 shift to state 67
-- On constant shift to state 66
## Reductions:

State 50:
## Known stack suffix:
## IF
## LR(1) items:
expression2 -> IF . expression1 THEN expression2 ELSE expression2 [ WITH SEMISEMI SEMI RPAREN RBRACE IN ELSE BARRBRACKET BAR AND ]
## Transitions:
-- On UNIT shift to state 1
-- On TRUE shift to state 3
-- On STRINGCONST shift to state 4
-- On REF shift to state 5
-- On LPAREN shift to state 6
-- On LBRACKETBAR shift to state 46
-- On LBRACE shift to state 47
-- On INTCONST shift to state 14
-- On IDENT shift to state 51
-- On FLOATCONST shift to state 16
-- On FALSE shift to state 17
-- On CONSTRUCTOR shift to state 52
-- On CHARCONST shift to state 20
-- On BANG shift to state 55
-- On expression1 shift to state 72
-- On expression0 shift to state 67
-- On constant shift to state 66
## Reductions:

State 51:
## Known stack suffix:
## IDENT
## LR(1) items:
expression0 -> IDENT . [ WITH UNIT TRUE THEN STRINGCONST SETMINUS SEMISEMI SEMI RPAREN RBRACE LPAREN LBRACKETBAR LBRACE INTCONST IN IDENT FLOATCONST FALSE ELSE DOT CONSTRUCTOR COMMA CHARCONST BARRBRACKET BAR BANG ATAT AT ASSIGN AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression0 -> IDENT

State 52:
## Known stack suffix:
## CONSTRUCTOR
## LR(1) items:
expression0 -> CONSTRUCTOR . [ WITH UNIT TRUE THEN STRINGCONST SETMINUS SEMISEMI SEMI RPAREN RBRACE LPAREN LBRACKETBAR LBRACE INTCONST IN IDENT FLOATCONST FALSE ELSE DOT CONSTRUCTOR COMMA CHARCONST BARRBRACKET BAR BANG ATAT AT ASSIGN AND ]
expression0 -> CONSTRUCTOR . COLON expression0 [ WITH UNIT TRUE THEN STRINGCONST SETMINUS SEMISEMI SEMI RPAREN RBRACE LPAREN LBRACKETBAR LBRACE INTCONST IN IDENT FLOATCONST FALSE ELSE DOT CONSTRUCTOR COMMA CHARCONST BARRBRACKET BAR BANG ATAT AT ASSIGN AND ]
expression1 -> CONSTRUCTOR . expression0 [ WITH UNIT TRUE THEN STRINGCONST SETMINUS SEMISEMI SEMI RPAREN RBRACE LPAREN LBRACKETBAR LBRACE INTCONST IN IDENT FLOATCONST FALSE ELSE DOT CONSTRUCTOR COMMA CHARCONST BARRBRACKET BAR BANG ATAT AT ASSIGN AND ]
## Transitions:
-- On UNIT shift to state 1
-- On TRUE shift to state 3
-- On STRINGCONST shift to state 4
-- On LPAREN shift to state 6
-- On LBRACKETBAR shift to state 46
-- On LBRACE shift to state 47
-- On INTCONST shift to state 14
-- On IDENT shift to state 51
-- On FLOATCONST shift to state 16
-- On FALSE shift to state 17
-- On CONSTRUCTOR shift to state 53
-- On COLON shift to state 54
-- On CHARCONST shift to state 20
-- On BANG shift to state 55
-- On expression0 shift to state 71
-- On constant shift to state 66
## Reductions:
-- On WITH THEN SETMINUS SEMISEMI SEMI RPAREN RBRACE IN ELSE DOT COMMA BARRBRACKET BAR ATAT AT ASSIGN AND
--   reduce production expression0 -> CONSTRUCTOR

State 53:
## Known stack suffix:
## CONSTRUCTOR
## LR(1) items:
expression0 -> CONSTRUCTOR . [ WITH UNIT TRUE THEN STRINGCONST SETMINUS SEMISEMI SEMI RPAREN RBRACE LPAREN LBRACKETBAR LBRACE INTCONST IN IDENT FLOATCONST FALSE ELSE DOT CONSTRUCTOR COMMA CHARCONST BARRBRACKET BAR BANG ATAT AT ASSIGN AND ]
expression0 -> CONSTRUCTOR . COLON expression0 [ WITH UNIT TRUE THEN STRINGCONST SETMINUS SEMISEMI SEMI RPAREN RBRACE LPAREN LBRACKETBAR LBRACE INTCONST IN IDENT FLOATCONST FALSE ELSE DOT CONSTRUCTOR COMMA CHARCONST BARRBRACKET BAR BANG ATAT AT ASSIGN AND ]
## Transitions:
-- On COLON shift to state 54
## Reductions:
-- On WITH UNIT TRUE THEN STRINGCONST SETMINUS SEMISEMI SEMI RPAREN RBRACE LPAREN LBRACKETBAR LBRACE INTCONST IN IDENT FLOATCONST FALSE ELSE DOT CONSTRUCTOR COMMA CHARCONST BARRBRACKET BAR BANG ATAT AT ASSIGN AND
--   reduce production expression0 -> CONSTRUCTOR

State 54:
## Known stack suffix:
## CONSTRUCTOR COLON
## LR(1) items:
expression0 -> CONSTRUCTOR COLON . expression0 [ WITH UNIT TRUE THEN STRINGCONST SETMINUS SEMISEMI SEMI RPAREN RBRACE LPAREN LBRACKETBAR LBRACE INTCONST IN IDENT FLOATCONST FALSE ELSE DOT CONSTRUCTOR COMMA CHARCONST BARRBRACKET BAR BANG ATAT AT ASSIGN AND ]
## Transitions:
-- On UNIT shift to state 1
-- On TRUE shift to state 3
-- On STRINGCONST shift to state 4
-- On LPAREN shift to state 6
-- On LBRACKETBAR shift to state 46
-- On LBRACE shift to state 47
-- On INTCONST shift to state 14
-- On IDENT shift to state 51
-- On FLOATCONST shift to state 16
-- On FALSE shift to state 17
-- On CONSTRUCTOR shift to state 53
-- On CHARCONST shift to state 20
-- On BANG shift to state 55
-- On expression0 shift to state 70
-- On constant shift to state 66
## Reductions:

State 55:
## Known stack suffix:
## BANG
## LR(1) items:
expression0 -> BANG . expression0 [ WITH UNIT TRUE THEN STRINGCONST SETMINUS SEMISEMI SEMI RPAREN RBRACE LPAREN LBRACKETBAR LBRACE INTCONST IN IDENT FLOATCONST FALSE ELSE DOT CONSTRUCTOR COMMA CHARCONST BARRBRACKET BAR BANG ATAT AT ASSIGN AND ]
## Transitions:
-- On UNIT shift to state 1
-- On TRUE shift to state 3
-- On STRINGCONST shift to state 4
-- On LPAREN shift to state 6
-- On LBRACKETBAR shift to state 46
-- On LBRACE shift to state 47
-- On INTCONST shift to state 14
-- On IDENT shift to state 51
-- On FLOATCONST shift to state 16
-- On FALSE shift to state 17
-- On CONSTRUCTOR shift to state 53
-- On CHARCONST shift to state 20
-- On BANG shift to state 55
-- On expression0 shift to state 56
-- On constant shift to state 66
## Reductions:

State 56:
## Known stack suffix:
## BANG expression0
## LR(1) items:
expression0 -> BANG expression0 . [ WITH UNIT TRUE THEN STRINGCONST SETMINUS SEMISEMI SEMI RPAREN RBRACE LPAREN LBRACKETBAR LBRACE INTCONST IN IDENT FLOATCONST FALSE ELSE DOT CONSTRUCTOR COMMA CHARCONST BARRBRACKET BAR BANG ATAT AT ASSIGN AND ]
expression0 -> expression0 . DOT IDENT LEFTARROW expression1 [ WITH UNIT TRUE THEN STRINGCONST SETMINUS SEMISEMI SEMI RPAREN RBRACE LPAREN LBRACKETBAR LBRACE INTCONST IN IDENT FLOATCONST FALSE ELSE DOT CONSTRUCTOR COMMA CHARCONST BARRBRACKET BAR BANG ATAT AT ASSIGN AND ]
expression0 -> expression0 . DOT IDENT [ WITH UNIT TRUE THEN STRINGCONST SETMINUS SEMISEMI SEMI RPAREN RBRACE LPAREN LBRACKETBAR LBRACE INTCONST IN IDENT FLOATCONST FALSE ELSE DOT CONSTRUCTOR COMMA CHARCONST BARRBRACKET BAR BANG ATAT AT ASSIGN AND ]
expression0 -> expression0 . SETMINUS IDENT [ WITH UNIT TRUE THEN STRINGCONST SETMINUS SEMISEMI SEMI RPAREN RBRACE LPAREN LBRACKETBAR LBRACE INTCONST IN IDENT FLOATCONST FALSE ELSE DOT CONSTRUCTOR COMMA CHARCONST BARRBRACKET BAR BANG ATAT AT ASSIGN AND ]
expression0 -> expression0 . AT expression1 [ WITH UNIT TRUE THEN STRINGCONST SETMINUS SEMISEMI SEMI RPAREN RBRACE LPAREN LBRACKETBAR LBRACE INTCONST IN IDENT FLOATCONST FALSE ELSE DOT CONSTRUCTOR COMMA CHARCONST BARRBRACKET BAR BANG ATAT AT ASSIGN AND ]
expression0 -> expression0 . ATAT expression1 [ WITH UNIT TRUE THEN STRINGCONST SETMINUS SEMISEMI SEMI RPAREN RBRACE LPAREN LBRACKETBAR LBRACE INTCONST IN IDENT FLOATCONST FALSE ELSE DOT CONSTRUCTOR COMMA CHARCONST BARRBRACKET BAR BANG ATAT AT ASSIGN AND ]
## Transitions:
-- On SETMINUS shift to state 57
-- On DOT shift to state 59
-- On ATAT shift to state 64
-- On AT shift to state 68
## Reductions:
-- On WITH UNIT TRUE THEN STRINGCONST SEMISEMI SEMI RPAREN RBRACE LPAREN LBRACKETBAR LBRACE INTCONST IN IDENT FLOATCONST FALSE ELSE CONSTRUCTOR COMMA CHARCONST BARRBRACKET BAR BANG ASSIGN AND
--   reduce production expression0 -> BANG expression0

State 57:
## Known stack suffix:
## expression0 SETMINUS
## LR(1) items:
expression0 -> expression0 SETMINUS . IDENT [ WITH UNIT TRUE THEN STRINGCONST SETMINUS SEMISEMI SEMI RPAREN RBRACE LPAREN LBRACKETBAR LBRACE INTCONST IN IDENT FLOATCONST FALSE ELSE DOT CONSTRUCTOR COMMA CHARCONST BARRBRACKET BAR BANG ATAT AT ASSIGN AND ]
## Transitions:
-- On IDENT shift to state 58
## Reductions:

State 58:
## Known stack suffix:
## expression0 SETMINUS IDENT
## LR(1) items:
expression0 -> expression0 SETMINUS IDENT . [ WITH UNIT TRUE THEN STRINGCONST SETMINUS SEMISEMI SEMI RPAREN RBRACE LPAREN LBRACKETBAR LBRACE INTCONST IN IDENT FLOATCONST FALSE ELSE DOT CONSTRUCTOR COMMA CHARCONST BARRBRACKET BAR BANG ATAT AT ASSIGN AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression0 -> expression0 SETMINUS IDENT

State 59:
## Known stack suffix:
## expression0 DOT
## LR(1) items:
expression0 -> expression0 DOT . IDENT LEFTARROW expression1 [ WITH UNIT TRUE THEN STRINGCONST SETMINUS SEMISEMI SEMI RPAREN RBRACE LPAREN LBRACKETBAR LBRACE INTCONST IN IDENT FLOATCONST FALSE ELSE DOT CONSTRUCTOR COMMA CHARCONST BARRBRACKET BAR BANG ATAT AT ASSIGN AND ]
expression0 -> expression0 DOT . IDENT [ WITH UNIT TRUE THEN STRINGCONST SETMINUS SEMISEMI SEMI RPAREN RBRACE LPAREN LBRACKETBAR LBRACE INTCONST IN IDENT FLOATCONST FALSE ELSE DOT CONSTRUCTOR COMMA CHARCONST BARRBRACKET BAR BANG ATAT AT ASSIGN AND ]
## Transitions:
-- On IDENT shift to state 60
## Reductions:

State 60:
## Known stack suffix:
## expression0 DOT IDENT
## LR(1) items:
expression0 -> expression0 DOT IDENT . LEFTARROW expression1 [ WITH UNIT TRUE THEN STRINGCONST SETMINUS SEMISEMI SEMI RPAREN RBRACE LPAREN LBRACKETBAR LBRACE INTCONST IN IDENT FLOATCONST FALSE ELSE DOT CONSTRUCTOR COMMA CHARCONST BARRBRACKET BAR BANG ATAT AT ASSIGN AND ]
expression0 -> expression0 DOT IDENT . [ WITH UNIT TRUE THEN STRINGCONST SETMINUS SEMISEMI SEMI RPAREN RBRACE LPAREN LBRACKETBAR LBRACE INTCONST IN IDENT FLOATCONST FALSE ELSE DOT CONSTRUCTOR COMMA CHARCONST BARRBRACKET BAR BANG ATAT AT ASSIGN AND ]
## Transitions:
-- On LEFTARROW shift to state 61
## Reductions:
-- On WITH UNIT TRUE THEN STRINGCONST SETMINUS SEMISEMI SEMI RPAREN RBRACE LPAREN LBRACKETBAR LBRACE INTCONST IN IDENT FLOATCONST FALSE ELSE DOT CONSTRUCTOR COMMA CHARCONST BARRBRACKET BAR BANG ATAT AT ASSIGN AND
--   reduce production expression0 -> expression0 DOT IDENT

State 61:
## Known stack suffix:
## expression0 DOT IDENT LEFTARROW
## LR(1) items:
expression0 -> expression0 DOT IDENT LEFTARROW . expression1 [ WITH UNIT TRUE THEN STRINGCONST SETMINUS SEMISEMI SEMI RPAREN RBRACE LPAREN LBRACKETBAR LBRACE INTCONST IN IDENT FLOATCONST FALSE ELSE DOT CONSTRUCTOR COMMA CHARCONST BARRBRACKET BAR BANG ATAT AT ASSIGN AND ]
## Transitions:
-- On UNIT shift to state 1
-- On TRUE shift to state 3
-- On STRINGCONST shift to state 4
-- On REF shift to state 5
-- On LPAREN shift to state 6
-- On LBRACKETBAR shift to state 46
-- On LBRACE shift to state 47
-- On INTCONST shift to state 14
-- On IDENT shift to state 51
-- On FLOATCONST shift to state 16
-- On FALSE shift to state 17
-- On CONSTRUCTOR shift to state 52
-- On CHARCONST shift to state 20
-- On BANG shift to state 55
-- On expression1 shift to state 62
-- On expression0 shift to state 67
-- On constant shift to state 66
## Reductions:

State 62:
## Known stack suffix:
## expression0 DOT IDENT LEFTARROW expression1
## LR(1) items:
expression0 -> expression0 DOT IDENT LEFTARROW expression1 . [ WITH UNIT TRUE THEN STRINGCONST SETMINUS SEMISEMI SEMI RPAREN RBRACE LPAREN LBRACKETBAR LBRACE INTCONST IN IDENT FLOATCONST FALSE ELSE DOT CONSTRUCTOR COMMA CHARCONST BARRBRACKET BAR BANG ATAT AT ASSIGN AND ]
expression1 -> expression1 . expression0 [ WITH UNIT TRUE THEN STRINGCONST SETMINUS SEMISEMI SEMI RPAREN RBRACE LPAREN LBRACKETBAR LBRACE INTCONST IN IDENT FLOATCONST FALSE ELSE DOT CONSTRUCTOR COMMA CHARCONST BARRBRACKET BAR BANG ATAT AT ASSIGN AND ]
## Transitions:
-- On UNIT shift to state 1
-- On TRUE shift to state 3
-- On STRINGCONST shift to state 4
-- On LPAREN shift to state 6
-- On LBRACKETBAR shift to state 46
-- On LBRACE shift to state 47
-- On INTCONST shift to state 14
-- On IDENT shift to state 51
-- On FLOATCONST shift to state 16
-- On FALSE shift to state 17
-- On CONSTRUCTOR shift to state 53
-- On CHARCONST shift to state 20
-- On BANG shift to state 55
-- On expression0 shift to state 63
-- On constant shift to state 66
## Reductions:
-- On WITH THEN SETMINUS SEMISEMI SEMI RPAREN RBRACE IN ELSE DOT COMMA BARRBRACKET BAR ATAT AT ASSIGN AND
--   reduce production expression0 -> expression0 DOT IDENT LEFTARROW expression1

State 63:
## Known stack suffix:
## expression1 expression0
## LR(1) items:
expression0 -> expression0 . DOT IDENT LEFTARROW expression1 [ WITH UNIT TRUE THEN STRINGCONST SETMINUS SEMISEMI SEMI RPAREN RBRACE LPAREN LBRACKETBAR LBRACE INTCONST IN IDENT FLOATCONST FALSE ELSE DOT CONSTRUCTOR COMMA CHARCONST BARRBRACKET BAR BANG ATAT AT ASSIGN AND ]
expression0 -> expression0 . DOT IDENT [ WITH UNIT TRUE THEN STRINGCONST SETMINUS SEMISEMI SEMI RPAREN RBRACE LPAREN LBRACKETBAR LBRACE INTCONST IN IDENT FLOATCONST FALSE ELSE DOT CONSTRUCTOR COMMA CHARCONST BARRBRACKET BAR BANG ATAT AT ASSIGN AND ]
expression0 -> expression0 . SETMINUS IDENT [ WITH UNIT TRUE THEN STRINGCONST SETMINUS SEMISEMI SEMI RPAREN RBRACE LPAREN LBRACKETBAR LBRACE INTCONST IN IDENT FLOATCONST FALSE ELSE DOT CONSTRUCTOR COMMA CHARCONST BARRBRACKET BAR BANG ATAT AT ASSIGN AND ]
expression0 -> expression0 . AT expression1 [ WITH UNIT TRUE THEN STRINGCONST SETMINUS SEMISEMI SEMI RPAREN RBRACE LPAREN LBRACKETBAR LBRACE INTCONST IN IDENT FLOATCONST FALSE ELSE DOT CONSTRUCTOR COMMA CHARCONST BARRBRACKET BAR BANG ATAT AT ASSIGN AND ]
expression0 -> expression0 . ATAT expression1 [ WITH UNIT TRUE THEN STRINGCONST SETMINUS SEMISEMI SEMI RPAREN RBRACE LPAREN LBRACKETBAR LBRACE INTCONST IN IDENT FLOATCONST FALSE ELSE DOT CONSTRUCTOR COMMA CHARCONST BARRBRACKET BAR BANG ATAT AT ASSIGN AND ]
expression1 -> expression1 expression0 . [ WITH UNIT TRUE THEN STRINGCONST SETMINUS SEMISEMI SEMI RPAREN RBRACE LPAREN LBRACKETBAR LBRACE INTCONST IN IDENT FLOATCONST FALSE ELSE DOT CONSTRUCTOR COMMA CHARCONST BARRBRACKET BAR BANG ATAT AT ASSIGN AND ]
## Transitions:
-- On SETMINUS shift to state 57
-- On DOT shift to state 59
-- On ATAT shift to state 64
-- On AT shift to state 68
## Reductions:
-- On WITH UNIT TRUE THEN STRINGCONST SEMISEMI SEMI RPAREN RBRACE LPAREN LBRACKETBAR LBRACE INTCONST IN IDENT FLOATCONST FALSE ELSE CONSTRUCTOR COMMA CHARCONST BARRBRACKET BAR BANG ASSIGN AND
--   reduce production expression1 -> expression1 expression0

State 64:
## Known stack suffix:
## expression0 ATAT
## LR(1) items:
expression0 -> expression0 ATAT . expression1 [ WITH UNIT TRUE THEN STRINGCONST SETMINUS SEMISEMI SEMI RPAREN RBRACE LPAREN LBRACKETBAR LBRACE INTCONST IN IDENT FLOATCONST FALSE ELSE DOT CONSTRUCTOR COMMA CHARCONST BARRBRACKET BAR BANG ATAT AT ASSIGN AND ]
## Transitions:
-- On UNIT shift to state 1
-- On TRUE shift to state 3
-- On STRINGCONST shift to state 4
-- On REF shift to state 5
-- On LPAREN shift to state 6
-- On LBRACKETBAR shift to state 46
-- On LBRACE shift to state 47
-- On INTCONST shift to state 14
-- On IDENT shift to state 51
-- On FLOATCONST shift to state 16
-- On FALSE shift to state 17
-- On CONSTRUCTOR shift to state 52
-- On CHARCONST shift to state 20
-- On BANG shift to state 55
-- On expression1 shift to state 65
-- On expression0 shift to state 67
-- On constant shift to state 66
## Reductions:

State 65:
## Known stack suffix:
## expression0 ATAT expression1
## LR(1) items:
expression0 -> expression0 ATAT expression1 . [ WITH UNIT TRUE THEN STRINGCONST SETMINUS SEMISEMI SEMI RPAREN RBRACE LPAREN LBRACKETBAR LBRACE INTCONST IN IDENT FLOATCONST FALSE ELSE DOT CONSTRUCTOR COMMA CHARCONST BARRBRACKET BAR BANG ATAT AT ASSIGN AND ]
expression1 -> expression1 . expression0 [ WITH UNIT TRUE THEN STRINGCONST SETMINUS SEMISEMI SEMI RPAREN RBRACE LPAREN LBRACKETBAR LBRACE INTCONST IN IDENT FLOATCONST FALSE ELSE DOT CONSTRUCTOR COMMA CHARCONST BARRBRACKET BAR BANG ATAT AT ASSIGN AND ]
## Transitions:
-- On UNIT shift to state 1
-- On TRUE shift to state 3
-- On STRINGCONST shift to state 4
-- On LPAREN shift to state 6
-- On LBRACKETBAR shift to state 46
-- On LBRACE shift to state 47
-- On INTCONST shift to state 14
-- On IDENT shift to state 51
-- On FLOATCONST shift to state 16
-- On FALSE shift to state 17
-- On CONSTRUCTOR shift to state 53
-- On CHARCONST shift to state 20
-- On BANG shift to state 55
-- On expression0 shift to state 63
-- On constant shift to state 66
## Reductions:
-- On WITH THEN SETMINUS SEMISEMI SEMI RPAREN RBRACE IN ELSE DOT COMMA BARRBRACKET BAR ATAT AT ASSIGN AND
--   reduce production expression0 -> expression0 ATAT expression1

State 66:
## Known stack suffix:
## constant
## LR(1) items:
expression0 -> constant . [ WITH UNIT TRUE THEN STRINGCONST SETMINUS SEMISEMI SEMI RPAREN RBRACE LPAREN LBRACKETBAR LBRACE INTCONST IN IDENT FLOATCONST FALSE ELSE DOT CONSTRUCTOR COMMA CHARCONST BARRBRACKET BAR BANG ATAT AT ASSIGN AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression0 -> constant

State 67:
## Known stack suffix:
## expression0
## LR(1) items:
expression0 -> expression0 . DOT IDENT LEFTARROW expression1 [ WITH UNIT TRUE THEN STRINGCONST SETMINUS SEMISEMI SEMI RPAREN RBRACE LPAREN LBRACKETBAR LBRACE INTCONST IN IDENT FLOATCONST FALSE ELSE DOT CONSTRUCTOR COMMA CHARCONST BARRBRACKET BAR BANG ATAT AT ASSIGN AND ]
expression0 -> expression0 . DOT IDENT [ WITH UNIT TRUE THEN STRINGCONST SETMINUS SEMISEMI SEMI RPAREN RBRACE LPAREN LBRACKETBAR LBRACE INTCONST IN IDENT FLOATCONST FALSE ELSE DOT CONSTRUCTOR COMMA CHARCONST BARRBRACKET BAR BANG ATAT AT ASSIGN AND ]
expression0 -> expression0 . SETMINUS IDENT [ WITH UNIT TRUE THEN STRINGCONST SETMINUS SEMISEMI SEMI RPAREN RBRACE LPAREN LBRACKETBAR LBRACE INTCONST IN IDENT FLOATCONST FALSE ELSE DOT CONSTRUCTOR COMMA CHARCONST BARRBRACKET BAR BANG ATAT AT ASSIGN AND ]
expression0 -> expression0 . AT expression1 [ WITH UNIT TRUE THEN STRINGCONST SETMINUS SEMISEMI SEMI RPAREN RBRACE LPAREN LBRACKETBAR LBRACE INTCONST IN IDENT FLOATCONST FALSE ELSE DOT CONSTRUCTOR COMMA CHARCONST BARRBRACKET BAR BANG ATAT AT ASSIGN AND ]
expression0 -> expression0 . ATAT expression1 [ WITH UNIT TRUE THEN STRINGCONST SETMINUS SEMISEMI SEMI RPAREN RBRACE LPAREN LBRACKETBAR LBRACE INTCONST IN IDENT FLOATCONST FALSE ELSE DOT CONSTRUCTOR COMMA CHARCONST BARRBRACKET BAR BANG ATAT AT ASSIGN AND ]
expression1 -> expression0 . [ WITH UNIT TRUE THEN STRINGCONST SETMINUS SEMISEMI SEMI RPAREN RBRACE LPAREN LBRACKETBAR LBRACE INTCONST IN IDENT FLOATCONST FALSE ELSE DOT CONSTRUCTOR COMMA CHARCONST BARRBRACKET BAR BANG ATAT AT ASSIGN AND ]
## Transitions:
-- On SETMINUS shift to state 57
-- On DOT shift to state 59
-- On ATAT shift to state 64
-- On AT shift to state 68
## Reductions:
-- On WITH UNIT TRUE THEN STRINGCONST SEMISEMI SEMI RPAREN RBRACE LPAREN LBRACKETBAR LBRACE INTCONST IN IDENT FLOATCONST FALSE ELSE CONSTRUCTOR COMMA CHARCONST BARRBRACKET BAR BANG ASSIGN AND
--   reduce production expression1 -> expression0

State 68:
## Known stack suffix:
## expression0 AT
## LR(1) items:
expression0 -> expression0 AT . expression1 [ WITH UNIT TRUE THEN STRINGCONST SETMINUS SEMISEMI SEMI RPAREN RBRACE LPAREN LBRACKETBAR LBRACE INTCONST IN IDENT FLOATCONST FALSE ELSE DOT CONSTRUCTOR COMMA CHARCONST BARRBRACKET BAR BANG ATAT AT ASSIGN AND ]
## Transitions:
-- On UNIT shift to state 1
-- On TRUE shift to state 3
-- On STRINGCONST shift to state 4
-- On REF shift to state 5
-- On LPAREN shift to state 6
-- On LBRACKETBAR shift to state 46
-- On LBRACE shift to state 47
-- On INTCONST shift to state 14
-- On IDENT shift to state 51
-- On FLOATCONST shift to state 16
-- On FALSE shift to state 17
-- On CONSTRUCTOR shift to state 52
-- On CHARCONST shift to state 20
-- On BANG shift to state 55
-- On expression1 shift to state 69
-- On expression0 shift to state 67
-- On constant shift to state 66
## Reductions:

State 69:
## Known stack suffix:
## expression0 AT expression1
## LR(1) items:
expression0 -> expression0 AT expression1 . [ WITH UNIT TRUE THEN STRINGCONST SETMINUS SEMISEMI SEMI RPAREN RBRACE LPAREN LBRACKETBAR LBRACE INTCONST IN IDENT FLOATCONST FALSE ELSE DOT CONSTRUCTOR COMMA CHARCONST BARRBRACKET BAR BANG ATAT AT ASSIGN AND ]
expression1 -> expression1 . expression0 [ WITH UNIT TRUE THEN STRINGCONST SETMINUS SEMISEMI SEMI RPAREN RBRACE LPAREN LBRACKETBAR LBRACE INTCONST IN IDENT FLOATCONST FALSE ELSE DOT CONSTRUCTOR COMMA CHARCONST BARRBRACKET BAR BANG ATAT AT ASSIGN AND ]
## Transitions:
-- On UNIT shift to state 1
-- On TRUE shift to state 3
-- On STRINGCONST shift to state 4
-- On LPAREN shift to state 6
-- On LBRACKETBAR shift to state 46
-- On LBRACE shift to state 47
-- On INTCONST shift to state 14
-- On IDENT shift to state 51
-- On FLOATCONST shift to state 16
-- On FALSE shift to state 17
-- On CONSTRUCTOR shift to state 53
-- On CHARCONST shift to state 20
-- On BANG shift to state 55
-- On expression0 shift to state 63
-- On constant shift to state 66
## Reductions:
-- On WITH THEN SETMINUS SEMISEMI SEMI RPAREN RBRACE IN ELSE DOT COMMA BARRBRACKET BAR ATAT AT ASSIGN AND
--   reduce production expression0 -> expression0 AT expression1

State 70:
## Known stack suffix:
## CONSTRUCTOR COLON expression0
## LR(1) items:
expression0 -> expression0 . DOT IDENT LEFTARROW expression1 [ WITH UNIT TRUE THEN STRINGCONST SETMINUS SEMISEMI SEMI RPAREN RBRACE LPAREN LBRACKETBAR LBRACE INTCONST IN IDENT FLOATCONST FALSE ELSE DOT CONSTRUCTOR COMMA CHARCONST BARRBRACKET BAR BANG ATAT AT ASSIGN AND ]
expression0 -> expression0 . DOT IDENT [ WITH UNIT TRUE THEN STRINGCONST SETMINUS SEMISEMI SEMI RPAREN RBRACE LPAREN LBRACKETBAR LBRACE INTCONST IN IDENT FLOATCONST FALSE ELSE DOT CONSTRUCTOR COMMA CHARCONST BARRBRACKET BAR BANG ATAT AT ASSIGN AND ]
expression0 -> expression0 . SETMINUS IDENT [ WITH UNIT TRUE THEN STRINGCONST SETMINUS SEMISEMI SEMI RPAREN RBRACE LPAREN LBRACKETBAR LBRACE INTCONST IN IDENT FLOATCONST FALSE ELSE DOT CONSTRUCTOR COMMA CHARCONST BARRBRACKET BAR BANG ATAT AT ASSIGN AND ]
expression0 -> expression0 . AT expression1 [ WITH UNIT TRUE THEN STRINGCONST SETMINUS SEMISEMI SEMI RPAREN RBRACE LPAREN LBRACKETBAR LBRACE INTCONST IN IDENT FLOATCONST FALSE ELSE DOT CONSTRUCTOR COMMA CHARCONST BARRBRACKET BAR BANG ATAT AT ASSIGN AND ]
expression0 -> expression0 . ATAT expression1 [ WITH UNIT TRUE THEN STRINGCONST SETMINUS SEMISEMI SEMI RPAREN RBRACE LPAREN LBRACKETBAR LBRACE INTCONST IN IDENT FLOATCONST FALSE ELSE DOT CONSTRUCTOR COMMA CHARCONST BARRBRACKET BAR BANG ATAT AT ASSIGN AND ]
expression0 -> CONSTRUCTOR COLON expression0 . [ WITH UNIT TRUE THEN STRINGCONST SETMINUS SEMISEMI SEMI RPAREN RBRACE LPAREN LBRACKETBAR LBRACE INTCONST IN IDENT FLOATCONST FALSE ELSE DOT CONSTRUCTOR COMMA CHARCONST BARRBRACKET BAR BANG ATAT AT ASSIGN AND ]
## Transitions:
-- On SETMINUS shift to state 57
-- On DOT shift to state 59
-- On ATAT shift to state 64
-- On AT shift to state 68
## Reductions:
-- On WITH UNIT TRUE THEN STRINGCONST SEMISEMI SEMI RPAREN RBRACE LPAREN LBRACKETBAR LBRACE INTCONST IN IDENT FLOATCONST FALSE ELSE CONSTRUCTOR COMMA CHARCONST BARRBRACKET BAR BANG ASSIGN AND
--   reduce production expression0 -> CONSTRUCTOR COLON expression0

State 71:
## Known stack suffix:
## CONSTRUCTOR expression0
## LR(1) items:
expression0 -> expression0 . DOT IDENT LEFTARROW expression1 [ WITH UNIT TRUE THEN STRINGCONST SETMINUS SEMISEMI SEMI RPAREN RBRACE LPAREN LBRACKETBAR LBRACE INTCONST IN IDENT FLOATCONST FALSE ELSE DOT CONSTRUCTOR COMMA CHARCONST BARRBRACKET BAR BANG ATAT AT ASSIGN AND ]
expression0 -> expression0 . DOT IDENT [ WITH UNIT TRUE THEN STRINGCONST SETMINUS SEMISEMI SEMI RPAREN RBRACE LPAREN LBRACKETBAR LBRACE INTCONST IN IDENT FLOATCONST FALSE ELSE DOT CONSTRUCTOR COMMA CHARCONST BARRBRACKET BAR BANG ATAT AT ASSIGN AND ]
expression0 -> expression0 . SETMINUS IDENT [ WITH UNIT TRUE THEN STRINGCONST SETMINUS SEMISEMI SEMI RPAREN RBRACE LPAREN LBRACKETBAR LBRACE INTCONST IN IDENT FLOATCONST FALSE ELSE DOT CONSTRUCTOR COMMA CHARCONST BARRBRACKET BAR BANG ATAT AT ASSIGN AND ]
expression0 -> expression0 . AT expression1 [ WITH UNIT TRUE THEN STRINGCONST SETMINUS SEMISEMI SEMI RPAREN RBRACE LPAREN LBRACKETBAR LBRACE INTCONST IN IDENT FLOATCONST FALSE ELSE DOT CONSTRUCTOR COMMA CHARCONST BARRBRACKET BAR BANG ATAT AT ASSIGN AND ]
expression0 -> expression0 . ATAT expression1 [ WITH UNIT TRUE THEN STRINGCONST SETMINUS SEMISEMI SEMI RPAREN RBRACE LPAREN LBRACKETBAR LBRACE INTCONST IN IDENT FLOATCONST FALSE ELSE DOT CONSTRUCTOR COMMA CHARCONST BARRBRACKET BAR BANG ATAT AT ASSIGN AND ]
expression1 -> CONSTRUCTOR expression0 . [ WITH UNIT TRUE THEN STRINGCONST SETMINUS SEMISEMI SEMI RPAREN RBRACE LPAREN LBRACKETBAR LBRACE INTCONST IN IDENT FLOATCONST FALSE ELSE DOT CONSTRUCTOR COMMA CHARCONST BARRBRACKET BAR BANG ATAT AT ASSIGN AND ]
## Transitions:
-- On SETMINUS shift to state 57
-- On DOT shift to state 59
-- On ATAT shift to state 64
-- On AT shift to state 68
## Reductions:
-- On WITH UNIT TRUE THEN STRINGCONST SEMISEMI SEMI RPAREN RBRACE LPAREN LBRACKETBAR LBRACE INTCONST IN IDENT FLOATCONST FALSE ELSE CONSTRUCTOR COMMA CHARCONST BARRBRACKET BAR BANG ASSIGN AND
--   reduce production expression1 -> CONSTRUCTOR expression0

State 72:
## Known stack suffix:
## IF expression1
## LR(1) items:
expression1 -> expression1 . expression0 [ UNIT TRUE THEN STRINGCONST LPAREN LBRACKETBAR LBRACE INTCONST IDENT FLOATCONST FALSE CONSTRUCTOR CHARCONST BANG ]
expression2 -> IF expression1 . THEN expression2 ELSE expression2 [ WITH SEMISEMI SEMI RPAREN RBRACE IN ELSE BARRBRACKET BAR AND ]
## Transitions:
-- On UNIT shift to state 1
-- On TRUE shift to state 3
-- On THEN shift to state 73
-- On STRINGCONST shift to state 4
-- On LPAREN shift to state 6
-- On LBRACKETBAR shift to state 46
-- On LBRACE shift to state 47
-- On INTCONST shift to state 14
-- On IDENT shift to state 51
-- On FLOATCONST shift to state 16
-- On FALSE shift to state 17
-- On CONSTRUCTOR shift to state 53
-- On CHARCONST shift to state 20
-- On BANG shift to state 55
-- On expression0 shift to state 63
-- On constant shift to state 66
## Reductions:

State 73:
## Known stack suffix:
## IF expression1 THEN
## LR(1) items:
expression2 -> IF expression1 THEN . expression2 ELSE expression2 [ WITH SEMISEMI SEMI RPAREN RBRACE IN ELSE BARRBRACKET BAR AND ]
## Transitions:
-- On UNIT shift to state 1
-- On TRUE shift to state 3
-- On STRINGCONST shift to state 4
-- On REF shift to state 5
-- On LPAREN shift to state 6
-- On LBRACKETBAR shift to state 46
-- On LBRACE shift to state 47
-- On INTCONST shift to state 14
-- On IF shift to state 50
-- On IDENT shift to state 51
-- On FLOATCONST shift to state 16
-- On FALSE shift to state 17
-- On CONSTRUCTOR shift to state 52
-- On CHARCONST shift to state 20
-- On BANG shift to state 55
-- On expression2 shift to state 74
-- On expression1 shift to state 77
-- On expression0 shift to state 67
-- On constant shift to state 66
## Reductions:

State 74:
## Known stack suffix:
## IF expression1 THEN expression2
## LR(1) items:
expression2 -> IF expression1 THEN expression2 . ELSE expression2 [ WITH SEMISEMI SEMI RPAREN RBRACE IN ELSE BARRBRACKET BAR AND ]
## Transitions:
-- On ELSE shift to state 75
## Reductions:

State 75:
## Known stack suffix:
## IF expression1 THEN expression2 ELSE
## LR(1) items:
expression2 -> IF expression1 THEN expression2 ELSE . expression2 [ WITH SEMISEMI SEMI RPAREN RBRACE IN ELSE BARRBRACKET BAR AND ]
## Transitions:
-- On UNIT shift to state 1
-- On TRUE shift to state 3
-- On STRINGCONST shift to state 4
-- On REF shift to state 5
-- On LPAREN shift to state 6
-- On LBRACKETBAR shift to state 46
-- On LBRACE shift to state 47
-- On INTCONST shift to state 14
-- On IF shift to state 50
-- On IDENT shift to state 51
-- On FLOATCONST shift to state 16
-- On FALSE shift to state 17
-- On CONSTRUCTOR shift to state 52
-- On CHARCONST shift to state 20
-- On BANG shift to state 55
-- On expression2 shift to state 76
-- On expression1 shift to state 77
-- On expression0 shift to state 67
-- On constant shift to state 66
## Reductions:

State 76:
## Known stack suffix:
## IF expression1 THEN expression2 ELSE expression2
## LR(1) items:
expression2 -> IF expression1 THEN expression2 ELSE expression2 . [ WITH SEMISEMI SEMI RPAREN RBRACE IN ELSE BARRBRACKET BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression2 -> IF expression1 THEN expression2 ELSE expression2

State 77:
## Known stack suffix:
## expression1
## LR(1) items:
expression1 -> expression1 . expression0 [ WITH UNIT TRUE STRINGCONST SEMISEMI SEMI RPAREN RBRACE LPAREN LBRACKETBAR LBRACE INTCONST IN IDENT FLOATCONST FALSE ELSE CONSTRUCTOR COMMA CHARCONST BARRBRACKET BAR BANG ASSIGN AND ]
expression2 -> expression1 . [ WITH SEMISEMI SEMI RPAREN RBRACE IN ELSE BARRBRACKET BAR AND ]
expression2 -> expression1 . COMMA expression2 [ WITH SEMISEMI SEMI RPAREN RBRACE IN ELSE BARRBRACKET BAR AND ]
expression2 -> expression1 . ASSIGN expression1 [ WITH SEMISEMI SEMI RPAREN RBRACE IN ELSE BARRBRACKET BAR AND ]
## Transitions:
-- On UNIT shift to state 1
-- On TRUE shift to state 3
-- On STRINGCONST shift to state 4
-- On LPAREN shift to state 6
-- On LBRACKETBAR shift to state 46
-- On LBRACE shift to state 47
-- On INTCONST shift to state 14
-- On IDENT shift to state 51
-- On FLOATCONST shift to state 16
-- On FALSE shift to state 17
-- On CONSTRUCTOR shift to state 53
-- On COMMA shift to state 78
-- On CHARCONST shift to state 20
-- On BANG shift to state 55
-- On ASSIGN shift to state 80
-- On expression0 shift to state 63
-- On constant shift to state 66
## Reductions:
-- On WITH SEMISEMI SEMI RPAREN RBRACE IN ELSE BARRBRACKET BAR AND
--   reduce production expression2 -> expression1

State 78:
## Known stack suffix:
## expression1 COMMA
## LR(1) items:
expression2 -> expression1 COMMA . expression2 [ WITH SEMISEMI SEMI RPAREN RBRACE IN ELSE BARRBRACKET BAR AND ]
## Transitions:
-- On UNIT shift to state 1
-- On TRUE shift to state 3
-- On STRINGCONST shift to state 4
-- On REF shift to state 5
-- On LPAREN shift to state 6
-- On LBRACKETBAR shift to state 46
-- On LBRACE shift to state 47
-- On INTCONST shift to state 14
-- On IF shift to state 50
-- On IDENT shift to state 51
-- On FLOATCONST shift to state 16
-- On FALSE shift to state 17
-- On CONSTRUCTOR shift to state 52
-- On CHARCONST shift to state 20
-- On BANG shift to state 55
-- On expression2 shift to state 79
-- On expression1 shift to state 77
-- On expression0 shift to state 67
-- On constant shift to state 66
## Reductions:

State 79:
## Known stack suffix:
## expression1 COMMA expression2
## LR(1) items:
expression2 -> expression1 COMMA expression2 . [ WITH SEMISEMI SEMI RPAREN RBRACE IN ELSE BARRBRACKET BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression2 -> expression1 COMMA expression2

State 80:
## Known stack suffix:
## expression1 ASSIGN
## LR(1) items:
expression2 -> expression1 ASSIGN . expression1 [ WITH SEMISEMI SEMI RPAREN RBRACE IN ELSE BARRBRACKET BAR AND ]
## Transitions:
-- On UNIT shift to state 1
-- On TRUE shift to state 3
-- On STRINGCONST shift to state 4
-- On REF shift to state 5
-- On LPAREN shift to state 6
-- On LBRACKETBAR shift to state 46
-- On LBRACE shift to state 47
-- On INTCONST shift to state 14
-- On IDENT shift to state 51
-- On FLOATCONST shift to state 16
-- On FALSE shift to state 17
-- On CONSTRUCTOR shift to state 52
-- On CHARCONST shift to state 20
-- On BANG shift to state 55
-- On expression1 shift to state 81
-- On expression0 shift to state 67
-- On constant shift to state 66
## Reductions:

State 81:
## Known stack suffix:
## expression1 ASSIGN expression1
## LR(1) items:
expression1 -> expression1 . expression0 [ WITH UNIT TRUE STRINGCONST SEMISEMI SEMI RPAREN RBRACE LPAREN LBRACKETBAR LBRACE INTCONST IN IDENT FLOATCONST FALSE ELSE CONSTRUCTOR CHARCONST BARRBRACKET BAR BANG AND ]
expression2 -> expression1 ASSIGN expression1 . [ WITH SEMISEMI SEMI RPAREN RBRACE IN ELSE BARRBRACKET BAR AND ]
## Transitions:
-- On UNIT shift to state 1
-- On TRUE shift to state 3
-- On STRINGCONST shift to state 4
-- On LPAREN shift to state 6
-- On LBRACKETBAR shift to state 46
-- On LBRACE shift to state 47
-- On INTCONST shift to state 14
-- On IDENT shift to state 51
-- On FLOATCONST shift to state 16
-- On FALSE shift to state 17
-- On CONSTRUCTOR shift to state 53
-- On CHARCONST shift to state 20
-- On BANG shift to state 55
-- On expression0 shift to state 63
-- On constant shift to state 66
## Reductions:
-- On WITH SEMISEMI SEMI RPAREN RBRACE IN ELSE BARRBRACKET BAR AND
--   reduce production expression2 -> expression1 ASSIGN expression1

State 82:
## Known stack suffix:
## IDENT EQUAL expression2
## LR(1) items:
label_expression -> IDENT EQUAL expression2 . [ SEMI RBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production label_expression -> IDENT EQUAL expression2

State 83:
## Known stack suffix:
## LBRACE label_expression_list
## LR(1) items:
expression0 -> LBRACE label_expression_list . RBRACE [ WITH UNIT TRUE THEN STRINGCONST SETMINUS SEMISEMI SEMI RPAREN RBRACE LPAREN LBRACKETBAR LBRACE INTCONST IN IDENT FLOATCONST FALSE ELSE DOT CONSTRUCTOR COMMA CHARCONST BARRBRACKET BAR BANG ATAT AT ASSIGN AND ]
## Transitions:
-- On RBRACE shift to state 84
## Reductions:

State 84:
## Known stack suffix:
## LBRACE label_expression_list RBRACE
## LR(1) items:
expression0 -> LBRACE label_expression_list RBRACE . [ WITH UNIT TRUE THEN STRINGCONST SETMINUS SEMISEMI SEMI RPAREN RBRACE LPAREN LBRACKETBAR LBRACE INTCONST IN IDENT FLOATCONST FALSE ELSE DOT CONSTRUCTOR COMMA CHARCONST BARRBRACKET BAR BANG ATAT AT ASSIGN AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression0 -> LBRACE label_expression_list RBRACE

State 85:
## Known stack suffix:
## label_expression
## LR(1) items:
label_expression_list -> label_expression . [ RBRACE ]
label_expression_list -> label_expression . SEMI label_expression_list [ RBRACE ]
## Transitions:
-- On SEMI shift to state 86
## Reductions:
-- On RBRACE
--   reduce production label_expression_list -> label_expression

State 86:
## Known stack suffix:
## label_expression SEMI
## LR(1) items:
label_expression_list -> label_expression SEMI . label_expression_list [ RBRACE ]
## Transitions:
-- On IDENT shift to state 48
-- On label_expression_list shift to state 87
-- On label_expression shift to state 85
## Reductions:
-- On RBRACE
--   reduce production label_expression_list ->

State 87:
## Known stack suffix:
## label_expression SEMI label_expression_list
## LR(1) items:
label_expression_list -> label_expression SEMI label_expression_list . [ RBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production label_expression_list -> label_expression SEMI label_expression_list

State 88:
## Known stack suffix:
## expression2
## LR(1) items:
expr_semi_list -> expression2 . [ BARRBRACKET ]
expr_semi_list -> expression2 . SEMI expr_semi_list [ BARRBRACKET ]
## Transitions:
-- On SEMI shift to state 89
## Reductions:
-- On BARRBRACKET
--   reduce production expr_semi_list -> expression2

State 89:
## Known stack suffix:
## expression2 SEMI
## LR(1) items:
expr_semi_list -> expression2 SEMI . expr_semi_list [ BARRBRACKET ]
## Transitions:
-- On UNIT shift to state 1
-- On TRUE shift to state 3
-- On STRINGCONST shift to state 4
-- On REF shift to state 5
-- On LPAREN shift to state 6
-- On LBRACKETBAR shift to state 46
-- On LBRACE shift to state 47
-- On INTCONST shift to state 14
-- On IF shift to state 50
-- On IDENT shift to state 51
-- On FLOATCONST shift to state 16
-- On FALSE shift to state 17
-- On CONSTRUCTOR shift to state 52
-- On CHARCONST shift to state 20
-- On BANG shift to state 55
-- On expression2 shift to state 88
-- On expression1 shift to state 77
-- On expression0 shift to state 67
-- On expr_semi_list shift to state 90
-- On constant shift to state 66
## Reductions:
-- On BARRBRACKET
--   reduce production expr_semi_list ->

State 90:
## Known stack suffix:
## expression2 SEMI expr_semi_list
## LR(1) items:
expr_semi_list -> expression2 SEMI expr_semi_list . [ BARRBRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr_semi_list -> expression2 SEMI expr_semi_list

State 91:
## Known stack suffix:
## LBRACKETBAR expr_semi_list
## LR(1) items:
expression0 -> LBRACKETBAR expr_semi_list . BARRBRACKET [ WITH UNIT TRUE THEN STRINGCONST SETMINUS SEMISEMI SEMI RPAREN RBRACE LPAREN LBRACKETBAR LBRACE INTCONST IN IDENT FLOATCONST FALSE ELSE DOT CONSTRUCTOR COMMA CHARCONST BARRBRACKET BAR BANG ATAT AT ASSIGN AND ]
## Transitions:
-- On BARRBRACKET shift to state 92
## Reductions:

State 92:
## Known stack suffix:
## LBRACKETBAR expr_semi_list BARRBRACKET
## LR(1) items:
expression0 -> LBRACKETBAR expr_semi_list BARRBRACKET . [ WITH UNIT TRUE THEN STRINGCONST SETMINUS SEMISEMI SEMI RPAREN RBRACE LPAREN LBRACKETBAR LBRACE INTCONST IN IDENT FLOATCONST FALSE ELSE DOT CONSTRUCTOR COMMA CHARCONST BARRBRACKET BAR BANG ATAT AT ASSIGN AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression0 -> LBRACKETBAR expr_semi_list BARRBRACKET

State 93:
## Known stack suffix:
## FUNCTION
## LR(1) items:
expression -> FUNCTION . function_match [ WITH SEMISEMI RPAREN IN BAR AND ]
## Transitions:
-- On UNIT shift to state 1
-- On UNDERSCORE shift to state 8
-- On TRUE shift to state 3
-- On STRINGCONST shift to state 4
-- On REF shift to state 9
-- On LPAREN shift to state 10
-- On LBRACE shift to state 11
-- On INTCONST shift to state 14
-- On IDENT shift to state 15
-- On FLOATCONST shift to state 16
-- On FALSE shift to state 17
-- On CONSTRUCTOR shift to state 18
-- On CHARCONST shift to state 20
-- On simple_pattern shift to state 23
-- On pattern shift to state 94
-- On function_match shift to state 112
-- On constant shift to state 22
## Reductions:

State 94:
## Known stack suffix:
## pattern
## LR(1) items:
function_match -> pattern . ARROW expression BAR function_match [ WITH SEMISEMI RPAREN IN BAR AND ]
function_match -> pattern . ARROW expression [ WITH SEMISEMI RPAREN IN BAR AND ]
pattern -> pattern . AS IDENT [ COMMA BAR AS ARROW ]
pattern -> pattern . COMMA pattern [ COMMA BAR AS ARROW ]
pattern -> pattern . BAR pattern [ COMMA BAR AS ARROW ]
## Transitions:
-- On COMMA shift to state 27
-- On BAR shift to state 29
-- On AS shift to state 31
-- On ARROW shift to state 95
## Reductions:

State 95:
## Known stack suffix:
## pattern ARROW
## LR(1) items:
function_match -> pattern ARROW . expression BAR function_match [ WITH SEMISEMI RPAREN IN BAR AND ]
function_match -> pattern ARROW . expression [ WITH SEMISEMI RPAREN IN BAR AND ]
## Transitions:
-- On UNIT shift to state 1
-- On TRY shift to state 2
-- On TRUE shift to state 3
-- On STRINGCONST shift to state 4
-- On REF shift to state 5
-- On REC shift to state 7
-- On MATCH shift to state 40
-- On LPAREN shift to state 6
-- On LET shift to state 41
-- On LBRACKETBAR shift to state 46
-- On LBRACE shift to state 47
-- On INTCONST shift to state 14
-- On IF shift to state 50
-- On IDENT shift to state 51
-- On FUNCTION shift to state 93
-- On FUN shift to state 96
-- On FLOATCONST shift to state 16
-- On FALSE shift to state 17
-- On CONSTRUCTOR shift to state 52
-- On CHARCONST shift to state 20
-- On BANG shift to state 55
-- On expression3 shift to state 99
-- On expression2 shift to state 100
-- On expression1 shift to state 77
-- On expression0 shift to state 67
-- On expression shift to state 109
-- On constant shift to state 66
## Reductions:

State 96:
## Known stack suffix:
## FUN
## LR(1) items:
expression -> FUN . fun_match [ WITH SEMISEMI RPAREN IN BAR AND ]
## Transitions:
-- On UNIT shift to state 1
-- On UNDERSCORE shift to state 8
-- On TRUE shift to state 3
-- On STRINGCONST shift to state 4
-- On LPAREN shift to state 10
-- On LBRACE shift to state 11
-- On INTCONST shift to state 14
-- On IDENT shift to state 15
-- On FLOATCONST shift to state 16
-- On FALSE shift to state 17
-- On CONSTRUCTOR shift to state 19
-- On CHARCONST shift to state 20
-- On simple_pattern_list shift to state 97
-- On simple_pattern shift to state 105
-- On fun_match shift to state 108
-- On constant shift to state 22
## Reductions:

State 97:
## Known stack suffix:
## simple_pattern_list
## LR(1) items:
fun_match -> simple_pattern_list . ARROW expression BAR fun_match [ WITH SEMISEMI RPAREN IN BAR AND ]
fun_match -> simple_pattern_list . ARROW expression [ WITH SEMISEMI RPAREN IN BAR AND ]
## Transitions:
-- On ARROW shift to state 98
## Reductions:

State 98:
## Known stack suffix:
## simple_pattern_list ARROW
## LR(1) items:
fun_match -> simple_pattern_list ARROW . expression BAR fun_match [ WITH SEMISEMI RPAREN IN BAR AND ]
fun_match -> simple_pattern_list ARROW . expression [ WITH SEMISEMI RPAREN IN BAR AND ]
## Transitions:
-- On UNIT shift to state 1
-- On TRY shift to state 2
-- On TRUE shift to state 3
-- On STRINGCONST shift to state 4
-- On REF shift to state 5
-- On REC shift to state 7
-- On MATCH shift to state 40
-- On LPAREN shift to state 6
-- On LET shift to state 41
-- On LBRACKETBAR shift to state 46
-- On LBRACE shift to state 47
-- On INTCONST shift to state 14
-- On IF shift to state 50
-- On IDENT shift to state 51
-- On FUNCTION shift to state 93
-- On FUN shift to state 96
-- On FLOATCONST shift to state 16
-- On FALSE shift to state 17
-- On CONSTRUCTOR shift to state 52
-- On CHARCONST shift to state 20
-- On BANG shift to state 55
-- On expression3 shift to state 99
-- On expression2 shift to state 100
-- On expression1 shift to state 77
-- On expression0 shift to state 67
-- On expression shift to state 103
-- On constant shift to state 66
## Reductions:

State 99:
## Known stack suffix:
## expression3
## LR(1) items:
expression -> expression3 . [ WITH SEMISEMI RPAREN IN BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression -> expression3

State 100:
## Known stack suffix:
## expression2
## LR(1) items:
expression3 -> expression2 . [ WITH SEMISEMI RPAREN IN BAR AND ]
expression3 -> expression2 . SEMI expression [ WITH SEMISEMI RPAREN IN BAR AND ]
## Transitions:
-- On SEMI shift to state 101
## Reductions:
-- On WITH SEMISEMI RPAREN IN BAR AND
--   reduce production expression3 -> expression2

State 101:
## Known stack suffix:
## expression2 SEMI
## LR(1) items:
expression3 -> expression2 SEMI . expression [ WITH SEMISEMI RPAREN IN BAR AND ]
## Transitions:
-- On UNIT shift to state 1
-- On TRY shift to state 2
-- On TRUE shift to state 3
-- On STRINGCONST shift to state 4
-- On REF shift to state 5
-- On REC shift to state 7
-- On MATCH shift to state 40
-- On LPAREN shift to state 6
-- On LET shift to state 41
-- On LBRACKETBAR shift to state 46
-- On LBRACE shift to state 47
-- On INTCONST shift to state 14
-- On IF shift to state 50
-- On IDENT shift to state 51
-- On FUNCTION shift to state 93
-- On FUN shift to state 96
-- On FLOATCONST shift to state 16
-- On FALSE shift to state 17
-- On CONSTRUCTOR shift to state 52
-- On CHARCONST shift to state 20
-- On BANG shift to state 55
-- On expression3 shift to state 99
-- On expression2 shift to state 100
-- On expression1 shift to state 77
-- On expression0 shift to state 67
-- On expression shift to state 102
-- On constant shift to state 66
## Reductions:

State 102:
## Known stack suffix:
## expression2 SEMI expression
## LR(1) items:
expression3 -> expression2 SEMI expression . [ WITH SEMISEMI RPAREN IN BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression3 -> expression2 SEMI expression

State 103:
## Known stack suffix:
## simple_pattern_list ARROW expression
## LR(1) items:
fun_match -> simple_pattern_list ARROW expression . BAR fun_match [ WITH SEMISEMI RPAREN IN BAR AND ]
fun_match -> simple_pattern_list ARROW expression . [ WITH SEMISEMI RPAREN IN BAR AND ]
## Transitions:
-- On BAR shift to state 104
## Reductions:
-- On WITH SEMISEMI RPAREN IN AND
--   reduce production fun_match -> simple_pattern_list ARROW expression

State 104:
## Known stack suffix:
## simple_pattern_list ARROW expression BAR
## LR(1) items:
fun_match -> simple_pattern_list ARROW expression BAR . fun_match [ WITH SEMISEMI RPAREN IN BAR AND ]
## Transitions:
-- On UNIT shift to state 1
-- On UNDERSCORE shift to state 8
-- On TRUE shift to state 3
-- On STRINGCONST shift to state 4
-- On LPAREN shift to state 10
-- On LBRACE shift to state 11
-- On INTCONST shift to state 14
-- On IDENT shift to state 15
-- On FLOATCONST shift to state 16
-- On FALSE shift to state 17
-- On CONSTRUCTOR shift to state 19
-- On CHARCONST shift to state 20
-- On simple_pattern_list shift to state 97
-- On simple_pattern shift to state 105
-- On fun_match shift to state 107
-- On constant shift to state 22
## Reductions:

State 105:
## Known stack suffix:
## simple_pattern
## LR(1) items:
simple_pattern_list -> simple_pattern . [ EQUAL ARROW ]
simple_pattern_list -> simple_pattern . simple_pattern_list [ EQUAL ARROW ]
## Transitions:
-- On UNIT shift to state 1
-- On UNDERSCORE shift to state 8
-- On TRUE shift to state 3
-- On STRINGCONST shift to state 4
-- On LPAREN shift to state 10
-- On LBRACE shift to state 11
-- On INTCONST shift to state 14
-- On IDENT shift to state 15
-- On FLOATCONST shift to state 16
-- On FALSE shift to state 17
-- On CONSTRUCTOR shift to state 19
-- On CHARCONST shift to state 20
-- On simple_pattern_list shift to state 106
-- On simple_pattern shift to state 105
-- On constant shift to state 22
## Reductions:
-- On EQUAL ARROW
--   reduce production simple_pattern_list -> simple_pattern

State 106:
## Known stack suffix:
## simple_pattern simple_pattern_list
## LR(1) items:
simple_pattern_list -> simple_pattern simple_pattern_list . [ EQUAL ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_pattern_list -> simple_pattern simple_pattern_list

State 107:
## Known stack suffix:
## simple_pattern_list ARROW expression BAR fun_match
## LR(1) items:
fun_match -> simple_pattern_list ARROW expression BAR fun_match . [ WITH SEMISEMI RPAREN IN BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fun_match -> simple_pattern_list ARROW expression BAR fun_match

State 108:
## Known stack suffix:
## FUN fun_match
## LR(1) items:
expression -> FUN fun_match . [ WITH SEMISEMI RPAREN IN BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression -> FUN fun_match

State 109:
## Known stack suffix:
## pattern ARROW expression
## LR(1) items:
function_match -> pattern ARROW expression . BAR function_match [ WITH SEMISEMI RPAREN IN BAR AND ]
function_match -> pattern ARROW expression . [ WITH SEMISEMI RPAREN IN BAR AND ]
## Transitions:
-- On BAR shift to state 110
## Reductions:
-- On WITH SEMISEMI RPAREN IN AND
--   reduce production function_match -> pattern ARROW expression

State 110:
## Known stack suffix:
## pattern ARROW expression BAR
## LR(1) items:
function_match -> pattern ARROW expression BAR . function_match [ WITH SEMISEMI RPAREN IN BAR AND ]
## Transitions:
-- On UNIT shift to state 1
-- On UNDERSCORE shift to state 8
-- On TRUE shift to state 3
-- On STRINGCONST shift to state 4
-- On REF shift to state 9
-- On LPAREN shift to state 10
-- On LBRACE shift to state 11
-- On INTCONST shift to state 14
-- On IDENT shift to state 15
-- On FLOATCONST shift to state 16
-- On FALSE shift to state 17
-- On CONSTRUCTOR shift to state 18
-- On CHARCONST shift to state 20
-- On simple_pattern shift to state 23
-- On pattern shift to state 94
-- On function_match shift to state 111
-- On constant shift to state 22
## Reductions:

State 111:
## Known stack suffix:
## pattern ARROW expression BAR function_match
## LR(1) items:
function_match -> pattern ARROW expression BAR function_match . [ WITH SEMISEMI RPAREN IN BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production function_match -> pattern ARROW expression BAR function_match

State 112:
## Known stack suffix:
## FUNCTION function_match
## LR(1) items:
expression -> FUNCTION function_match . [ WITH SEMISEMI RPAREN IN BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression -> FUNCTION function_match

State 113:
## Known stack suffix:
## IDENT simple_pattern_list EQUAL expression
## LR(1) items:
binding -> IDENT simple_pattern_list EQUAL expression . [ SEMISEMI IN AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binding -> IDENT simple_pattern_list EQUAL expression

State 114:
## Known stack suffix:
## pattern
## LR(1) items:
binding -> pattern . EQUAL expression [ SEMISEMI IN AND ]
pattern -> pattern . AS IDENT [ EQUAL COMMA BAR AS ]
pattern -> pattern . COMMA pattern [ EQUAL COMMA BAR AS ]
pattern -> pattern . BAR pattern [ EQUAL COMMA BAR AS ]
## Transitions:
-- On EQUAL shift to state 115
-- On COMMA shift to state 27
-- On BAR shift to state 29
-- On AS shift to state 31
## Reductions:

State 115:
## Known stack suffix:
## pattern EQUAL
## LR(1) items:
binding -> pattern EQUAL . expression [ SEMISEMI IN AND ]
## Transitions:
-- On UNIT shift to state 1
-- On TRY shift to state 2
-- On TRUE shift to state 3
-- On STRINGCONST shift to state 4
-- On REF shift to state 5
-- On REC shift to state 7
-- On MATCH shift to state 40
-- On LPAREN shift to state 6
-- On LET shift to state 41
-- On LBRACKETBAR shift to state 46
-- On LBRACE shift to state 47
-- On INTCONST shift to state 14
-- On IF shift to state 50
-- On IDENT shift to state 51
-- On FUNCTION shift to state 93
-- On FUN shift to state 96
-- On FLOATCONST shift to state 16
-- On FALSE shift to state 17
-- On CONSTRUCTOR shift to state 52
-- On CHARCONST shift to state 20
-- On BANG shift to state 55
-- On expression3 shift to state 99
-- On expression2 shift to state 100
-- On expression1 shift to state 77
-- On expression0 shift to state 67
-- On expression shift to state 116
-- On constant shift to state 66
## Reductions:

State 116:
## Known stack suffix:
## pattern EQUAL expression
## LR(1) items:
binding -> pattern EQUAL expression . [ SEMISEMI IN AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binding -> pattern EQUAL expression

State 117:
## Known stack suffix:
## LET REC binding_list
## LR(1) items:
expression -> LET REC binding_list . IN expression [ WITH SEMISEMI RPAREN IN BAR AND ]
## Transitions:
-- On IN shift to state 118
## Reductions:

State 118:
## Known stack suffix:
## LET REC binding_list IN
## LR(1) items:
expression -> LET REC binding_list IN . expression [ WITH SEMISEMI RPAREN IN BAR AND ]
## Transitions:
-- On UNIT shift to state 1
-- On TRY shift to state 2
-- On TRUE shift to state 3
-- On STRINGCONST shift to state 4
-- On REF shift to state 5
-- On REC shift to state 7
-- On MATCH shift to state 40
-- On LPAREN shift to state 6
-- On LET shift to state 41
-- On LBRACKETBAR shift to state 46
-- On LBRACE shift to state 47
-- On INTCONST shift to state 14
-- On IF shift to state 50
-- On IDENT shift to state 51
-- On FUNCTION shift to state 93
-- On FUN shift to state 96
-- On FLOATCONST shift to state 16
-- On FALSE shift to state 17
-- On CONSTRUCTOR shift to state 52
-- On CHARCONST shift to state 20
-- On BANG shift to state 55
-- On expression3 shift to state 99
-- On expression2 shift to state 100
-- On expression1 shift to state 77
-- On expression0 shift to state 67
-- On expression shift to state 119
-- On constant shift to state 66
## Reductions:

State 119:
## Known stack suffix:
## LET REC binding_list IN expression
## LR(1) items:
expression -> LET REC binding_list IN expression . [ WITH SEMISEMI RPAREN IN BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression -> LET REC binding_list IN expression

State 120:
## Known stack suffix:
## binding
## LR(1) items:
binding_list -> binding . AND binding_list [ SEMISEMI IN ]
binding_list -> binding . [ SEMISEMI IN ]
## Transitions:
-- On AND shift to state 121
## Reductions:
-- On SEMISEMI IN
--   reduce production binding_list -> binding

State 121:
## Known stack suffix:
## binding AND
## LR(1) items:
binding_list -> binding AND . binding_list [ SEMISEMI IN ]
## Transitions:
-- On UNIT shift to state 1
-- On UNDERSCORE shift to state 8
-- On TRUE shift to state 3
-- On STRINGCONST shift to state 4
-- On REF shift to state 9
-- On LPAREN shift to state 10
-- On LBRACE shift to state 11
-- On INTCONST shift to state 14
-- On IDENT shift to state 43
-- On FLOATCONST shift to state 16
-- On FALSE shift to state 17
-- On CONSTRUCTOR shift to state 18
-- On CHARCONST shift to state 20
-- On simple_pattern shift to state 23
-- On pattern shift to state 114
-- On constant shift to state 22
-- On binding_list shift to state 122
-- On binding shift to state 120
## Reductions:

State 122:
## Known stack suffix:
## binding AND binding_list
## LR(1) items:
binding_list -> binding AND binding_list . [ SEMISEMI IN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binding_list -> binding AND binding_list

State 123:
## Known stack suffix:
## LET binding_list
## LR(1) items:
expression -> LET binding_list . IN expression [ WITH SEMISEMI RPAREN IN BAR AND ]
## Transitions:
-- On IN shift to state 124
## Reductions:

State 124:
## Known stack suffix:
## LET binding_list IN
## LR(1) items:
expression -> LET binding_list IN . expression [ WITH SEMISEMI RPAREN IN BAR AND ]
## Transitions:
-- On UNIT shift to state 1
-- On TRY shift to state 2
-- On TRUE shift to state 3
-- On STRINGCONST shift to state 4
-- On REF shift to state 5
-- On REC shift to state 7
-- On MATCH shift to state 40
-- On LPAREN shift to state 6
-- On LET shift to state 41
-- On LBRACKETBAR shift to state 46
-- On LBRACE shift to state 47
-- On INTCONST shift to state 14
-- On IF shift to state 50
-- On IDENT shift to state 51
-- On FUNCTION shift to state 93
-- On FUN shift to state 96
-- On FLOATCONST shift to state 16
-- On FALSE shift to state 17
-- On CONSTRUCTOR shift to state 52
-- On CHARCONST shift to state 20
-- On BANG shift to state 55
-- On expression3 shift to state 99
-- On expression2 shift to state 100
-- On expression1 shift to state 77
-- On expression0 shift to state 67
-- On expression shift to state 125
-- On constant shift to state 66
## Reductions:

State 125:
## Known stack suffix:
## LET binding_list IN expression
## LR(1) items:
expression -> LET binding_list IN expression . [ WITH SEMISEMI RPAREN IN BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression -> LET binding_list IN expression

State 126:
## Known stack suffix:
## MATCH expression
## LR(1) items:
expression -> MATCH expression . WITH function_match [ WITH SEMISEMI RPAREN IN BAR AND ]
## Transitions:
-- On WITH shift to state 127
## Reductions:

State 127:
## Known stack suffix:
## MATCH expression WITH
## LR(1) items:
expression -> MATCH expression WITH . function_match [ WITH SEMISEMI RPAREN IN BAR AND ]
## Transitions:
-- On UNIT shift to state 1
-- On UNDERSCORE shift to state 8
-- On TRUE shift to state 3
-- On STRINGCONST shift to state 4
-- On REF shift to state 9
-- On LPAREN shift to state 10
-- On LBRACE shift to state 11
-- On INTCONST shift to state 14
-- On IDENT shift to state 15
-- On FLOATCONST shift to state 16
-- On FALSE shift to state 17
-- On CONSTRUCTOR shift to state 18
-- On CHARCONST shift to state 20
-- On simple_pattern shift to state 23
-- On pattern shift to state 94
-- On function_match shift to state 128
-- On constant shift to state 22
## Reductions:

State 128:
## Known stack suffix:
## MATCH expression WITH function_match
## LR(1) items:
expression -> MATCH expression WITH function_match . [ WITH SEMISEMI RPAREN IN BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression -> MATCH expression WITH function_match

State 129:
## Known stack suffix:
## REC pattern IN expression
## LR(1) items:
expression -> REC pattern IN expression . [ WITH SEMISEMI RPAREN IN BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression -> REC pattern IN expression

State 130:
## Known stack suffix:
## LPAREN expression
## LR(1) items:
expression0 -> LPAREN expression . RPAREN [ WITH UNIT TRUE THEN STRINGCONST SETMINUS SEMISEMI SEMI RPAREN RBRACE LPAREN LBRACKETBAR LBRACE INTCONST IN IDENT FLOATCONST FALSE ELSE DOT CONSTRUCTOR COMMA CHARCONST BARRBRACKET BAR BANG ATAT AT ASSIGN AND ]
## Transitions:
-- On RPAREN shift to state 131
## Reductions:

State 131:
## Known stack suffix:
## LPAREN expression RPAREN
## LR(1) items:
expression0 -> LPAREN expression RPAREN . [ WITH UNIT TRUE THEN STRINGCONST SETMINUS SEMISEMI SEMI RPAREN RBRACE LPAREN LBRACKETBAR LBRACE INTCONST IN IDENT FLOATCONST FALSE ELSE DOT CONSTRUCTOR COMMA CHARCONST BARRBRACKET BAR BANG ATAT AT ASSIGN AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression0 -> LPAREN expression RPAREN

State 132:
## Known stack suffix:
## REF expression0
## LR(1) items:
expression0 -> expression0 . DOT IDENT LEFTARROW expression1 [ WITH UNIT TRUE THEN STRINGCONST SETMINUS SEMISEMI SEMI RPAREN RBRACE LPAREN LBRACKETBAR LBRACE INTCONST IN IDENT FLOATCONST FALSE ELSE DOT CONSTRUCTOR COMMA CHARCONST BARRBRACKET BAR BANG ATAT AT ASSIGN AND ]
expression0 -> expression0 . DOT IDENT [ WITH UNIT TRUE THEN STRINGCONST SETMINUS SEMISEMI SEMI RPAREN RBRACE LPAREN LBRACKETBAR LBRACE INTCONST IN IDENT FLOATCONST FALSE ELSE DOT CONSTRUCTOR COMMA CHARCONST BARRBRACKET BAR BANG ATAT AT ASSIGN AND ]
expression0 -> expression0 . SETMINUS IDENT [ WITH UNIT TRUE THEN STRINGCONST SETMINUS SEMISEMI SEMI RPAREN RBRACE LPAREN LBRACKETBAR LBRACE INTCONST IN IDENT FLOATCONST FALSE ELSE DOT CONSTRUCTOR COMMA CHARCONST BARRBRACKET BAR BANG ATAT AT ASSIGN AND ]
expression0 -> expression0 . AT expression1 [ WITH UNIT TRUE THEN STRINGCONST SETMINUS SEMISEMI SEMI RPAREN RBRACE LPAREN LBRACKETBAR LBRACE INTCONST IN IDENT FLOATCONST FALSE ELSE DOT CONSTRUCTOR COMMA CHARCONST BARRBRACKET BAR BANG ATAT AT ASSIGN AND ]
expression0 -> expression0 . ATAT expression1 [ WITH UNIT TRUE THEN STRINGCONST SETMINUS SEMISEMI SEMI RPAREN RBRACE LPAREN LBRACKETBAR LBRACE INTCONST IN IDENT FLOATCONST FALSE ELSE DOT CONSTRUCTOR COMMA CHARCONST BARRBRACKET BAR BANG ATAT AT ASSIGN AND ]
expression1 -> REF expression0 . [ WITH UNIT TRUE THEN STRINGCONST SETMINUS SEMISEMI SEMI RPAREN RBRACE LPAREN LBRACKETBAR LBRACE INTCONST IN IDENT FLOATCONST FALSE ELSE DOT CONSTRUCTOR COMMA CHARCONST BARRBRACKET BAR BANG ATAT AT ASSIGN AND ]
## Transitions:
-- On SETMINUS shift to state 57
-- On DOT shift to state 59
-- On ATAT shift to state 64
-- On AT shift to state 68
## Reductions:
-- On WITH UNIT TRUE THEN STRINGCONST SEMISEMI SEMI RPAREN RBRACE LPAREN LBRACKETBAR LBRACE INTCONST IN IDENT FLOATCONST FALSE ELSE CONSTRUCTOR COMMA CHARCONST BARRBRACKET BAR BANG ASSIGN AND
--   reduce production expression1 -> REF expression0

State 133:
## Known stack suffix:
## TRY expression
## LR(1) items:
expression -> TRY expression . WITH try_match [ WITH SEMISEMI RPAREN IN BAR AND ]
## Transitions:
-- On WITH shift to state 134
## Reductions:

State 134:
## Known stack suffix:
## TRY expression WITH
## LR(1) items:
expression -> TRY expression WITH . try_match [ WITH SEMISEMI RPAREN IN BAR AND ]
## Transitions:
-- On UNIT shift to state 1
-- On UNDERSCORE shift to state 8
-- On TRUE shift to state 3
-- On STRINGCONST shift to state 4
-- On REF shift to state 9
-- On LPAREN shift to state 10
-- On LBRACE shift to state 11
-- On INTCONST shift to state 14
-- On IDENT shift to state 15
-- On FLOATCONST shift to state 16
-- On FALSE shift to state 17
-- On CONSTRUCTOR shift to state 18
-- On CHARCONST shift to state 20
-- On try_match shift to state 135
-- On simple_pattern shift to state 23
-- On pattern shift to state 136
-- On constant shift to state 22
## Reductions:

State 135:
## Known stack suffix:
## TRY expression WITH try_match
## LR(1) items:
expression -> TRY expression WITH try_match . [ WITH SEMISEMI RPAREN IN BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression -> TRY expression WITH try_match

State 136:
## Known stack suffix:
## pattern
## LR(1) items:
pattern -> pattern . AS IDENT [ COMMA BAR AS ARROW ]
pattern -> pattern . COMMA pattern [ COMMA BAR AS ARROW ]
pattern -> pattern . BAR pattern [ COMMA BAR AS ARROW ]
try_match -> pattern . ARROW expression BAR try_match [ WITH SEMISEMI RPAREN IN BAR AND ]
try_match -> pattern . ARROW expression [ WITH SEMISEMI RPAREN IN BAR AND ]
## Transitions:
-- On COMMA shift to state 27
-- On BAR shift to state 29
-- On AS shift to state 31
-- On ARROW shift to state 137
## Reductions:

State 137:
## Known stack suffix:
## pattern ARROW
## LR(1) items:
try_match -> pattern ARROW . expression BAR try_match [ WITH SEMISEMI RPAREN IN BAR AND ]
try_match -> pattern ARROW . expression [ WITH SEMISEMI RPAREN IN BAR AND ]
## Transitions:
-- On UNIT shift to state 1
-- On TRY shift to state 2
-- On TRUE shift to state 3
-- On STRINGCONST shift to state 4
-- On REF shift to state 5
-- On REC shift to state 7
-- On MATCH shift to state 40
-- On LPAREN shift to state 6
-- On LET shift to state 41
-- On LBRACKETBAR shift to state 46
-- On LBRACE shift to state 47
-- On INTCONST shift to state 14
-- On IF shift to state 50
-- On IDENT shift to state 51
-- On FUNCTION shift to state 93
-- On FUN shift to state 96
-- On FLOATCONST shift to state 16
-- On FALSE shift to state 17
-- On CONSTRUCTOR shift to state 52
-- On CHARCONST shift to state 20
-- On BANG shift to state 55
-- On expression3 shift to state 99
-- On expression2 shift to state 100
-- On expression1 shift to state 77
-- On expression0 shift to state 67
-- On expression shift to state 138
-- On constant shift to state 66
## Reductions:

State 138:
## Known stack suffix:
## pattern ARROW expression
## LR(1) items:
try_match -> pattern ARROW expression . BAR try_match [ WITH SEMISEMI RPAREN IN BAR AND ]
try_match -> pattern ARROW expression . [ WITH SEMISEMI RPAREN IN BAR AND ]
## Transitions:
-- On BAR shift to state 139
## Reductions:
-- On WITH SEMISEMI RPAREN IN AND
--   reduce production try_match -> pattern ARROW expression

State 139:
## Known stack suffix:
## pattern ARROW expression BAR
## LR(1) items:
try_match -> pattern ARROW expression BAR . try_match [ WITH SEMISEMI RPAREN IN BAR AND ]
## Transitions:
-- On UNIT shift to state 1
-- On UNDERSCORE shift to state 8
-- On TRUE shift to state 3
-- On STRINGCONST shift to state 4
-- On REF shift to state 9
-- On LPAREN shift to state 10
-- On LBRACE shift to state 11
-- On INTCONST shift to state 14
-- On IDENT shift to state 15
-- On FLOATCONST shift to state 16
-- On FALSE shift to state 17
-- On CONSTRUCTOR shift to state 18
-- On CHARCONST shift to state 20
-- On try_match shift to state 140
-- On simple_pattern shift to state 23
-- On pattern shift to state 136
-- On constant shift to state 22
## Reductions:

State 140:
## Known stack suffix:
## pattern ARROW expression BAR try_match
## LR(1) items:
try_match -> pattern ARROW expression BAR try_match . [ WITH SEMISEMI RPAREN IN BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production try_match -> pattern ARROW expression BAR try_match

State 141:
## Known stack suffix:
## SHARP
## LR(1) items:
phrase -> SHARP . IDENT [ # ]
## Transitions:
-- On IDENT shift to state 142
## Reductions:

State 142:
## Known stack suffix:
## SHARP IDENT
## LR(1) items:
phrase -> SHARP IDENT . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production phrase -> SHARP IDENT

State 143:
## Known stack suffix:
## LET
## LR(1) items:
expression -> LET . binding_list IN expression [ SEMISEMI ]
expression -> LET . REC binding_list IN expression [ SEMISEMI ]
phrase -> LET . binding_list SEMISEMI [ # ]
phrase -> LET . REC binding_list SEMISEMI [ # ]
## Transitions:
-- On UNIT shift to state 1
-- On UNDERSCORE shift to state 8
-- On TRUE shift to state 3
-- On STRINGCONST shift to state 4
-- On REF shift to state 9
-- On REC shift to state 144
-- On LPAREN shift to state 10
-- On LBRACE shift to state 11
-- On INTCONST shift to state 14
-- On IDENT shift to state 43
-- On FLOATCONST shift to state 16
-- On FALSE shift to state 17
-- On CONSTRUCTOR shift to state 18
-- On CHARCONST shift to state 20
-- On simple_pattern shift to state 23
-- On pattern shift to state 114
-- On constant shift to state 22
-- On binding_list shift to state 147
-- On binding shift to state 120
## Reductions:

State 144:
## Known stack suffix:
## LET REC
## LR(1) items:
expression -> LET REC . binding_list IN expression [ SEMISEMI ]
phrase -> LET REC . binding_list SEMISEMI [ # ]
## Transitions:
-- On UNIT shift to state 1
-- On UNDERSCORE shift to state 8
-- On TRUE shift to state 3
-- On STRINGCONST shift to state 4
-- On REF shift to state 9
-- On LPAREN shift to state 10
-- On LBRACE shift to state 11
-- On INTCONST shift to state 14
-- On IDENT shift to state 43
-- On FLOATCONST shift to state 16
-- On FALSE shift to state 17
-- On CONSTRUCTOR shift to state 18
-- On CHARCONST shift to state 20
-- On simple_pattern shift to state 23
-- On pattern shift to state 114
-- On constant shift to state 22
-- On binding_list shift to state 145
-- On binding shift to state 120
## Reductions:

State 145:
## Known stack suffix:
## LET REC binding_list
## LR(1) items:
expression -> LET REC binding_list . IN expression [ SEMISEMI ]
phrase -> LET REC binding_list . SEMISEMI [ # ]
## Transitions:
-- On SEMISEMI shift to state 146
-- On IN shift to state 118
## Reductions:

State 146:
## Known stack suffix:
## LET REC binding_list SEMISEMI
## LR(1) items:
phrase -> LET REC binding_list SEMISEMI . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production phrase -> LET REC binding_list SEMISEMI

State 147:
## Known stack suffix:
## LET binding_list
## LR(1) items:
expression -> LET binding_list . IN expression [ SEMISEMI ]
phrase -> LET binding_list . SEMISEMI [ # ]
## Transitions:
-- On SEMISEMI shift to state 148
-- On IN shift to state 124
## Reductions:

State 148:
## Known stack suffix:
## LET binding_list SEMISEMI
## LR(1) items:
phrase -> LET binding_list SEMISEMI . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production phrase -> LET binding_list SEMISEMI

State 149:
## Known stack suffix:
## INCLUDE
## LR(1) items:
phrase -> INCLUDE . STRINGCONST [ # ]
## Transitions:
-- On STRINGCONST shift to state 150
## Reductions:

State 150:
## Known stack suffix:
## INCLUDE STRINGCONST
## LR(1) items:
phrase -> INCLUDE STRINGCONST . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production phrase -> INCLUDE STRINGCONST

State 151:
## Known stack suffix:
## phrase
## LR(1) items:
phrase' -> phrase . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept phrase

State 152:
## Known stack suffix:
## expression
## LR(1) items:
phrase -> expression . SEMISEMI [ # ]
## Transitions:
-- On SEMISEMI shift to state 153
## Reductions:

State 153:
## Known stack suffix:
## expression SEMISEMI
## LR(1) items:
phrase -> expression SEMISEMI . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production phrase -> expression SEMISEMI

