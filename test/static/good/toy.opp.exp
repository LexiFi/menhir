File "toy.mly", line 48, characters 7-9:
Warning: the token OF is unused.
File "toy.mly", line 58, characters 7-9:
Warning: the token TO is unused.
File "toy.mly", line 61, characters 7-11:
Warning: the token TYPE is unused.
File "toy.mly", line 64, characters 7-12:
Warning: the token VALUE is unused.
%{

open ToySyntax
open ToyParserUtil

%}
%start phrase
%token AND
%token ARROW
%token AS
%token ASSIGN
%token AT
%token ATAT
%token BANG
%token BAR
%token BARRBRACKET
%token <char> CHARCONST
%token COLON
%token COMMA
%token <string> CONSTRUCTOR
%token DOT
%token ELSE
%token EQUAL
%token FALSE
%token <float> FLOATCONST
%token FUN
%token FUNCTION
%token <string> IDENT
%token IF
%token IN
%token INCLUDE
%token <int> INTCONST
%token LBRACE
%token LBRACKETBAR
%token LEFTARROW
%token LET
%token LPAREN
%token MATCH
%token OF
%token RBRACE
%token REC
%token REF
%token RPAREN
%token SEMI
%token SEMISEMI
%token SETMINUS
%token SHARP
%token <string> STRINGCONST
%token THEN
%token TO
%token TRUE
%token TRY
%token TYPE
%token UNDERSCORE
%token UNIT
%token VALUE
%token WITH
%type <ToySyntax.phrase> phrase
%%

phrase:
  _1 = SHARP _2 = IDENT
    {                             ( PhraseDirective _2 )}
| _1 = LET _2 = binding_list _3 = SEMISEMI
    {                                         ( PhraseLet(false, _2) )}
| _1 = LET _2 = REC _3 = binding_list _4 = SEMISEMI
    {                                            ( PhraseLet(true, _3) )}
| _1 = expression _2 = SEMISEMI
    {                                    ( PhraseExpr _1 )}
| _1 = INCLUDE _2 = STRINGCONST
    {                                                                ( PhraseInclude _2 )}

expression:
  _1 = expression3
    {                            ( _1 )}
| _1 = FUNCTION _2 = function_match
    {                                   ( EFun _2 )}
| _1 = FUN _2 = fun_match
    {                       ( EFun _2 )}
| _1 = MATCH _2 = expression _3 = WITH _4 = function_match
    {                                           ( EApp (EFun _4, _2) )}
| _1 = LET _2 = binding_list _3 = IN _4 = expression
    {                                                    ( ELet(false, _2, _4) )}
| _1 = LET _2 = REC _3 = binding_list _4 = IN _5 = expression
    {                                                        ( ELet(true, _3, _5) )}
| _1 = REC _2 = pattern _3 = IN _4 = expression
    {                                  ( EApp (EVar "_rec", EFun [[_2], _4]) )}
| _1 = TRY _2 = expression _3 = WITH _4 = try_match
    {                                                                ( ETry (_2, _4) )}

expression3:
  _1 = expression2
    {                      ( _1 )}
| _1 = expression2 _2 = SEMI _3 = expression
    {                                    ( ESeq(_1, _3) )}

expression2:
  _1 = expression1
    {                      ( _1 )}
| _1 = IF _2 = expression1 _3 = THEN _4 = expression2 _5 = ELSE _6 = expression2
    {                                                      ( EIf (_2, _4, _6) )}
| _1 = expression1 _2 = COMMA _3 = expression2
    {                                     ( EApp (EApp (EVar "_pair", _1), _3) )}
| _1 = expression1 _2 = ASSIGN _3 = expression1
    {                                      ( EApp (EApp(EVar ":=", _1), _3) )}

expression1:
  _1 = expression0
    {                     ( _1 )}
| _1 = CONSTRUCTOR _2 = expression0
    {                               ( EApp (EConstruct _1, _2) )}
| _1 = expression1 _2 = expression0
    {                                      ( EApp (_1, _2) )}
| _1 = REF _2 = expression0
    {                                                        ( EApp (EVar "ref", _2) )}

expression0:
  _1 = IDENT
    {                ( EVar _1 )}
| _1 = CONSTRUCTOR
    {                     ( EApp (EConstruct _1, EConstant ConstUnit) )}
| _1 = constant
    {                  ( EConstant _1 )}
| _1 = LPAREN _2 = expression _3 = RPAREN
    {                                      ( _2 )}
| _1 = LBRACE _2 = label_expression_list _3 = RBRACE
    {                                          ( ERecord _2 )}
| _1 = LBRACKETBAR _2 = expr_semi_list _3 = BARRBRACKET
    {                                                        ( EVector _2 )}
| _1 = BANG _2 = expression0
    {                         ( EApp (EVar "!", _2) )}
| _1 = expression0 _2 = DOT _3 = IDENT _4 = LEFTARROW _5 = expression1
    {                                                        ( EApp (EApp (ERecordUpdate _3, _1), _5) )}
| _1 = expression0 _2 = DOT _3 = IDENT
    {                                    ( EApp (ERecordAccess _3, _1) )}
| _1 = expression0 _2 = SETMINUS _3 = IDENT
    {                                                        ( EApp (ERecordRestrict _3, _1) )}
| _1 = expression0 _2 = AT _3 = expression1
    {                                                        ( EApp (EApp (EVar "@", _1), _3) )}
| _1 = expression0 _2 = ATAT _3 = expression1
    {                                                        ( EApp (EApp (EVar "@@", _1), _3) )}
| _1 = CONSTRUCTOR _2 = COLON _3 = expression0
    {                                                        ( ELabel (_1, _3) )}

constant:
  _1 = INTCONST
    {                  ( ConstInt _1 )}
| _1 = FALSE
    {               ( ConstBool false )}
| _1 = TRUE
    {              ( ConstBool true )}
| _1 = UNIT
    {              ( ConstUnit )}
| _1 = FLOATCONST
    {                                                        ( ConstFloat _1 )}
| _1 = CHARCONST
    {                                                        ( ConstChar _1 )}
| _1 = STRINGCONST
    {                                                        ( ConstString _1 )}

label_expression:
  _1 = IDENT _2 = EQUAL _3 = expression2
    {                               ( _1, _3 )}

label_expression_list:
  
    {                      ( [] )}
| _1 = label_expression
    {                         ( [_1] )}
| _1 = label_expression _2 = SEMI _3 = label_expression_list
    {                                                 ( _1 :: _3 )}

expr_semi_list:
  
    {                                                        ( [] )}
| _1 = expression2
    {                                                        ( [_1] )}
| _1 = expression2 _2 = SEMI _3 = expr_semi_list
    {                                                        ( _1 :: _3 )}

fun_match:
  _1 = simple_pattern_list _2 = ARROW _3 = expression _4 = BAR _5 = fun_match
    {                                                       ( (_1, _3) :: _5 )}
| _1 = simple_pattern_list _2 = ARROW _3 = expression
    {                                          ( [_1, _3] )}

function_match:
  _1 = pattern _2 = ARROW _3 = expression _4 = BAR _5 = function_match
    {                                                 ( ([_1], _3) :: _5 )}
| _1 = pattern _2 = ARROW _3 = expression
    {                                ( [[_1], _3] )}

try_match:
  _1 = pattern _2 = ARROW _3 = expression _4 = BAR _5 = try_match
    {                                            ( (_1, _3) :: _5 )}
| _1 = pattern _2 = ARROW _3 = expression
    {                                ( [_1, _3] )}

simple_pattern:
  _1 = UNDERSCORE
    {                           ( PWildcard )}
| _1 = IDENT
    {               ( PVar _1 )}
| _1 = constant
    {                  ( PConstant _1 )}
| _1 = CONSTRUCTOR
    {                     ( PConstruct (_1, PConstant ConstUnit) )}
| _1 = LPAREN _2 = pattern _3 = RPAREN
    {                             ( _2 )}
| _1 = LBRACE _2 = label_pattern_list _3 = RBRACE
    {                                       ( PRecord _2 )}

pattern:
  _1 = simple_pattern
    {                                                        ( _1 )}
| _1 = pattern _2 = AS _3 = IDENT
    {                         ( PAlias (_1, _3) )}
| _1 = pattern _2 = COMMA _3 = pattern
    {                             ( PPair (_1, _3) )}
| _1 = CONSTRUCTOR _2 = simple_pattern
    {                                  ( PConstruct (_1, _2) )}
| _1 = REF _2 = simple_pattern
    {                                                        ( PRef _2 )}
| _1 = pattern _2 = BAR _3 = pattern
    {                                                        ( POr (_1, _3) )}

label_pattern_list:
  
    {                      ( StringMap.empty )}
| _1 = IDENT _2 = EQUAL _3 = pattern
    {                            ( StringMap.singleton _1 _3 )}
| _1 = IDENT _2 = EQUAL _3 = pattern _4 = SEMI _5 = label_pattern_list
    {                                                 (
                                                          let label = _1
                                                          and lpmap = _5 in
							  try
							    let _ = StringMap.lookup label lpmap in
							    raise (DuplicateLabel label)
							  with Not_found ->
							    StringMap.add label _3 lpmap
                                                        )}

simple_pattern_list:
  _1 = simple_pattern
    {                       ( [_1] )}
| _1 = simple_pattern _2 = simple_pattern_list
    {                                         ( _1 :: _2 )}

binding_list:
  _1 = binding _2 = AND _3 = binding_list
    {                                                        ( _1 :: _3 )}
| _1 = binding
    {                                                        ( [_1] )}

binding:
  _1 = pattern _2 = EQUAL _3 = expression
    {                                       ( (_1, _3) )}
| _1 = IDENT _2 = simple_pattern_list _3 = EQUAL _4 = expression
    {                                                        ( (PVar _1, EFun [_2, _4]) )}

%%
