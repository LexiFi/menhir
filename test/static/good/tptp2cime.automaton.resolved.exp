State 0:
## Known stack suffix:
##
## LR(1) items:
donnees' -> . donnees [ # ]
## Transitions:
-- On TOKEN_INPUT_CLAUSE shift to state 1
-- On TOKEN_INCLUDE shift to state 2
-- On FIN shift to state 3
-- On keyword_input_clause shift to state 4
-- On keyword_include shift to state 41
-- On donnees shift to state 47
-- On declaration shift to state 48
## Reductions:

State 1:
## Known stack suffix:
## TOKEN_INPUT_CLAUSE
## LR(1) items:
keyword_input_clause -> TOKEN_INPUT_CLAUSE . [ PARGAUCHE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production keyword_input_clause -> TOKEN_INPUT_CLAUSE

State 2:
## Known stack suffix:
## TOKEN_INCLUDE
## LR(1) items:
keyword_include -> TOKEN_INCLUDE . [ PARGAUCHE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production keyword_include -> TOKEN_INCLUDE

State 3:
## Known stack suffix:
## FIN
## LR(1) items:
donnees -> FIN . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production donnees -> FIN

State 4:
## Known stack suffix:
## keyword_input_clause
## LR(1) items:
declaration -> keyword_input_clause . PARGAUCHE ident VIRGULE ident VIRGULE clause PARDROITE POINT [ TOKEN_INPUT_CLAUSE TOKEN_INCLUDE FIN ]
## Transitions:
-- On PARGAUCHE shift to state 5
## Reductions:

State 5:
## Known stack suffix:
## keyword_input_clause PARGAUCHE
## LR(1) items:
declaration -> keyword_input_clause PARGAUCHE . ident VIRGULE ident VIRGULE clause PARDROITE POINT [ TOKEN_INPUT_CLAUSE TOKEN_INCLUDE FIN ]
## Transitions:
-- On IDENT shift to state 6
-- On ident shift to state 7
## Reductions:

State 6:
## Known stack suffix:
## IDENT
## LR(1) items:
ident -> IDENT . [ VIRGULE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ident -> IDENT

State 7:
## Known stack suffix:
## keyword_input_clause PARGAUCHE ident
## LR(1) items:
declaration -> keyword_input_clause PARGAUCHE ident . VIRGULE ident VIRGULE clause PARDROITE POINT [ TOKEN_INPUT_CLAUSE TOKEN_INCLUDE FIN ]
## Transitions:
-- On VIRGULE shift to state 8
## Reductions:

State 8:
## Known stack suffix:
## keyword_input_clause PARGAUCHE ident VIRGULE
## LR(1) items:
declaration -> keyword_input_clause PARGAUCHE ident VIRGULE . ident VIRGULE clause PARDROITE POINT [ TOKEN_INPUT_CLAUSE TOKEN_INCLUDE FIN ]
## Transitions:
-- On IDENT shift to state 6
-- On ident shift to state 9
## Reductions:

State 9:
## Known stack suffix:
## keyword_input_clause PARGAUCHE ident VIRGULE ident
## LR(1) items:
declaration -> keyword_input_clause PARGAUCHE ident VIRGULE ident . VIRGULE clause PARDROITE POINT [ TOKEN_INPUT_CLAUSE TOKEN_INCLUDE FIN ]
## Transitions:
-- On VIRGULE shift to state 10
## Reductions:

State 10:
## Known stack suffix:
## keyword_input_clause PARGAUCHE ident VIRGULE ident VIRGULE
## LR(1) items:
declaration -> keyword_input_clause PARGAUCHE ident VIRGULE ident VIRGULE . clause PARDROITE POINT [ TOKEN_INPUT_CLAUSE TOKEN_INCLUDE FIN ]
## Transitions:
-- On CROGAUCHE shift to state 11
-- On clause shift to state 38
## Reductions:

State 11:
## Known stack suffix:
## CROGAUCHE
## LR(1) items:
clause -> CROGAUCHE . literal_list CRODROIT [ PARDROITE ]
## Transitions:
-- On PLUS shift to state 12
-- On MOINS shift to state 31
-- On literal_list shift to state 33
-- On literal shift to state 35
## Reductions:

State 12:
## Known stack suffix:
## PLUS
## LR(1) items:
literal -> PLUS . atom [ VIRGULE CRODROIT ]
## Transitions:
-- On EGAL shift to state 13
-- On atom shift to state 30
## Reductions:

State 13:
## Known stack suffix:
## EGAL
## LR(1) items:
atom -> EGAL . PARGAUCHE term VIRGULE term PARDROITE [ VIRGULE CRODROIT ]
## Transitions:
-- On PARGAUCHE shift to state 14
## Reductions:

State 14:
## Known stack suffix:
## EGAL PARGAUCHE
## LR(1) items:
atom -> EGAL PARGAUCHE . term VIRGULE term PARDROITE [ VIRGULE CRODROIT ]
## Transitions:
-- On VRB shift to state 15
-- On PARGAUCHE shift to state 16
-- On IDENT shift to state 17
-- On term shift to state 26
## Reductions:

State 15:
## Known stack suffix:
## VRB
## LR(1) items:
term -> VRB . [ VIRGULE POINT_VIRGULE PARDROITE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production term -> VRB

State 16:
## Known stack suffix:
## PARGAUCHE
## LR(1) items:
term -> PARGAUCHE . term PARDROITE [ VIRGULE POINT_VIRGULE PARDROITE ]
## Transitions:
-- On VRB shift to state 15
-- On PARGAUCHE shift to state 16
-- On IDENT shift to state 17
-- On term shift to state 24
## Reductions:

State 17:
## Known stack suffix:
## IDENT
## LR(1) items:
term -> IDENT . [ VIRGULE POINT_VIRGULE PARDROITE ]
term -> IDENT . PARGAUCHE term_list PARDROITE [ VIRGULE POINT_VIRGULE PARDROITE ]
## Transitions:
-- On PARGAUCHE shift to state 18
## Reductions:
-- On VIRGULE POINT_VIRGULE PARDROITE
--   reduce production term -> IDENT

State 18:
## Known stack suffix:
## IDENT PARGAUCHE
## LR(1) items:
term -> IDENT PARGAUCHE . term_list PARDROITE [ VIRGULE POINT_VIRGULE PARDROITE ]
## Transitions:
-- On VRB shift to state 15
-- On PARGAUCHE shift to state 16
-- On IDENT shift to state 17
-- On term_list shift to state 19
-- On term shift to state 21
## Reductions:

State 19:
## Known stack suffix:
## IDENT PARGAUCHE term_list
## LR(1) items:
term -> IDENT PARGAUCHE term_list . PARDROITE [ VIRGULE POINT_VIRGULE PARDROITE ]
## Transitions:
-- On PARDROITE shift to state 20
## Reductions:

State 20:
## Known stack suffix:
## IDENT PARGAUCHE term_list PARDROITE
## LR(1) items:
term -> IDENT PARGAUCHE term_list PARDROITE . [ VIRGULE POINT_VIRGULE PARDROITE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production term -> IDENT PARGAUCHE term_list PARDROITE

State 21:
## Known stack suffix:
## term
## LR(1) items:
term_list -> term . [ PARDROITE ]
term_list -> term . VIRGULE term_list [ PARDROITE ]
## Transitions:
-- On VIRGULE shift to state 22
## Reductions:
-- On PARDROITE
--   reduce production term_list -> term

State 22:
## Known stack suffix:
## term VIRGULE
## LR(1) items:
term_list -> term VIRGULE . term_list [ PARDROITE ]
## Transitions:
-- On VRB shift to state 15
-- On PARGAUCHE shift to state 16
-- On IDENT shift to state 17
-- On term_list shift to state 23
-- On term shift to state 21
## Reductions:

State 23:
## Known stack suffix:
## term VIRGULE term_list
## LR(1) items:
term_list -> term VIRGULE term_list . [ PARDROITE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production term_list -> term VIRGULE term_list

State 24:
## Known stack suffix:
## PARGAUCHE term
## LR(1) items:
term -> PARGAUCHE term . PARDROITE [ VIRGULE POINT_VIRGULE PARDROITE ]
## Transitions:
-- On PARDROITE shift to state 25
## Reductions:

State 25:
## Known stack suffix:
## PARGAUCHE term PARDROITE
## LR(1) items:
term -> PARGAUCHE term PARDROITE . [ VIRGULE POINT_VIRGULE PARDROITE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production term -> PARGAUCHE term PARDROITE

State 26:
## Known stack suffix:
## EGAL PARGAUCHE term
## LR(1) items:
atom -> EGAL PARGAUCHE term . VIRGULE term PARDROITE [ VIRGULE CRODROIT ]
## Transitions:
-- On VIRGULE shift to state 27
## Reductions:

State 27:
## Known stack suffix:
## EGAL PARGAUCHE term VIRGULE
## LR(1) items:
atom -> EGAL PARGAUCHE term VIRGULE . term PARDROITE [ VIRGULE CRODROIT ]
## Transitions:
-- On VRB shift to state 15
-- On PARGAUCHE shift to state 16
-- On IDENT shift to state 17
-- On term shift to state 28
## Reductions:

State 28:
## Known stack suffix:
## EGAL PARGAUCHE term VIRGULE term
## LR(1) items:
atom -> EGAL PARGAUCHE term VIRGULE term . PARDROITE [ VIRGULE CRODROIT ]
## Transitions:
-- On PARDROITE shift to state 29
## Reductions:

State 29:
## Known stack suffix:
## EGAL PARGAUCHE term VIRGULE term PARDROITE
## LR(1) items:
atom -> EGAL PARGAUCHE term VIRGULE term PARDROITE . [ VIRGULE CRODROIT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atom -> EGAL PARGAUCHE term VIRGULE term PARDROITE

State 30:
## Known stack suffix:
## PLUS atom
## LR(1) items:
literal -> PLUS atom . [ VIRGULE CRODROIT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production literal -> PLUS atom

State 31:
## Known stack suffix:
## MOINS
## LR(1) items:
literal -> MOINS . atom [ VIRGULE CRODROIT ]
## Transitions:
-- On EGAL shift to state 13
-- On atom shift to state 32
## Reductions:

State 32:
## Known stack suffix:
## MOINS atom
## LR(1) items:
literal -> MOINS atom . [ VIRGULE CRODROIT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production literal -> MOINS atom

State 33:
## Known stack suffix:
## CROGAUCHE literal_list
## LR(1) items:
clause -> CROGAUCHE literal_list . CRODROIT [ PARDROITE ]
## Transitions:
-- On CRODROIT shift to state 34
## Reductions:

State 34:
## Known stack suffix:
## CROGAUCHE literal_list CRODROIT
## LR(1) items:
clause -> CROGAUCHE literal_list CRODROIT . [ PARDROITE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production clause -> CROGAUCHE literal_list CRODROIT

State 35:
## Known stack suffix:
## literal
## LR(1) items:
literal_list -> literal . [ CRODROIT ]
literal_list -> literal . VIRGULE literal_list [ CRODROIT ]
## Transitions:
-- On VIRGULE shift to state 36
## Reductions:
-- On CRODROIT
--   reduce production literal_list -> literal

State 36:
## Known stack suffix:
## literal VIRGULE
## LR(1) items:
literal_list -> literal VIRGULE . literal_list [ CRODROIT ]
## Transitions:
-- On PLUS shift to state 12
-- On MOINS shift to state 31
-- On literal_list shift to state 37
-- On literal shift to state 35
## Reductions:

State 37:
## Known stack suffix:
## literal VIRGULE literal_list
## LR(1) items:
literal_list -> literal VIRGULE literal_list . [ CRODROIT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production literal_list -> literal VIRGULE literal_list

State 38:
## Known stack suffix:
## keyword_input_clause PARGAUCHE ident VIRGULE ident VIRGULE clause
## LR(1) items:
declaration -> keyword_input_clause PARGAUCHE ident VIRGULE ident VIRGULE clause . PARDROITE POINT [ TOKEN_INPUT_CLAUSE TOKEN_INCLUDE FIN ]
## Transitions:
-- On PARDROITE shift to state 39
## Reductions:

State 39:
## Known stack suffix:
## keyword_input_clause PARGAUCHE ident VIRGULE ident VIRGULE clause PARDROITE
## LR(1) items:
declaration -> keyword_input_clause PARGAUCHE ident VIRGULE ident VIRGULE clause PARDROITE . POINT [ TOKEN_INPUT_CLAUSE TOKEN_INCLUDE FIN ]
## Transitions:
-- On POINT shift to state 40
## Reductions:

State 40:
## Known stack suffix:
## keyword_input_clause PARGAUCHE ident VIRGULE ident VIRGULE clause PARDROITE POINT
## LR(1) items:
declaration -> keyword_input_clause PARGAUCHE ident VIRGULE ident VIRGULE clause PARDROITE POINT . [ TOKEN_INPUT_CLAUSE TOKEN_INCLUDE FIN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production declaration -> keyword_input_clause PARGAUCHE ident VIRGULE ident VIRGULE clause PARDROITE POINT

State 41:
## Known stack suffix:
## keyword_include
## LR(1) items:
declaration -> keyword_include . PARGAUCHE f_name PARDROITE POINT [ TOKEN_INPUT_CLAUSE TOKEN_INCLUDE FIN ]
## Transitions:
-- On PARGAUCHE shift to state 42
## Reductions:

State 42:
## Known stack suffix:
## keyword_include PARGAUCHE
## LR(1) items:
declaration -> keyword_include PARGAUCHE . f_name PARDROITE POINT [ TOKEN_INPUT_CLAUSE TOKEN_INCLUDE FIN ]
## Transitions:
-- On FILE_NAME shift to state 43
-- On f_name shift to state 44
## Reductions:

State 43:
## Known stack suffix:
## FILE_NAME
## LR(1) items:
f_name -> FILE_NAME . [ PARDROITE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production f_name -> FILE_NAME

State 44:
## Known stack suffix:
## keyword_include PARGAUCHE f_name
## LR(1) items:
declaration -> keyword_include PARGAUCHE f_name . PARDROITE POINT [ TOKEN_INPUT_CLAUSE TOKEN_INCLUDE FIN ]
## Transitions:
-- On PARDROITE shift to state 45
## Reductions:

State 45:
## Known stack suffix:
## keyword_include PARGAUCHE f_name PARDROITE
## LR(1) items:
declaration -> keyword_include PARGAUCHE f_name PARDROITE . POINT [ TOKEN_INPUT_CLAUSE TOKEN_INCLUDE FIN ]
## Transitions:
-- On POINT shift to state 46
## Reductions:

State 46:
## Known stack suffix:
## keyword_include PARGAUCHE f_name PARDROITE POINT
## LR(1) items:
declaration -> keyword_include PARGAUCHE f_name PARDROITE POINT . [ TOKEN_INPUT_CLAUSE TOKEN_INCLUDE FIN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production declaration -> keyword_include PARGAUCHE f_name PARDROITE POINT

State 47:
## Known stack suffix:
## donnees
## LR(1) items:
donnees' -> donnees . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept donnees

State 48:
## Known stack suffix:
## declaration
## LR(1) items:
donnees -> declaration . donnees [ # ]
## Transitions:
-- On TOKEN_INPUT_CLAUSE shift to state 1
-- On TOKEN_INCLUDE shift to state 2
-- On FIN shift to state 3
-- On keyword_input_clause shift to state 4
-- On keyword_include shift to state 41
-- On donnees shift to state 49
-- On declaration shift to state 48
## Reductions:

State 49:
## Known stack suffix:
## declaration donnees
## LR(1) items:
donnees -> declaration donnees . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production donnees -> declaration donnees

State 50:
## Known stack suffix:
##
## LR(1) items:
term_line' -> . term_line [ # ]
## Transitions:
-- On VRB shift to state 15
-- On PARGAUCHE shift to state 16
-- On IDENT shift to state 17
-- On term_line shift to state 51
-- On term shift to state 52
## Reductions:

State 51:
## Known stack suffix:
## term_line
## LR(1) items:
term_line' -> term_line . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept term_line

State 52:
## Known stack suffix:
## term
## LR(1) items:
term_line -> term . POINT_VIRGULE [ # ]
## Transitions:
-- On POINT_VIRGULE shift to state 53
## Reductions:

State 53:
## Known stack suffix:
## term POINT_VIRGULE
## LR(1) items:
term_line -> term POINT_VIRGULE . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production term_line -> term POINT_VIRGULE

