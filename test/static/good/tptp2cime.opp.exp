File "tptp2cime.mly", line 28, characters 6-9:
Warning: the token EXP is unused.
File "tptp2cime.mly", line 26, characters 11-16:
Warning: the token MINUS is unused.
File "tptp2cime.mly", line 27, characters 6-10:
Warning: the token MULT is unused.
File "tptp2cime.mly", line 12, characters 46-51:
Warning: the token QUOTE is unused.
%{

open Abs_syntax;;
open Symbols;;
open Terms;;
open Clauses;;

%}
%start donnees
%start term_line
%token CRODROIT
%token CROGAUCHE
%token EGAL
%token <string> FILE_NAME
%token FIN
%token <string> IDENT
%token MOINS
%token PARDROITE
%token PARGAUCHE
%token PLUS
%token POINT
%token POINT_VIRGULE
%token QUOTE
%token TOKEN_INCLUDE
%token TOKEN_INPUT_CLAUSE
%token VIRGULE
%token <string> VRB
%left TERMLIST
%nonassoc PARDROITE
%left MINUS PLUS
%left MULT
%left EXP
%type <Abs_syntax.abstract_syntax list> donnees
%type <Terms.term> term_line
%%

donnees:
  _1 = FIN
    {                         ( [] )}
| _1 = declaration _2 = donnees
    {                         ( _1::_2 )}

declaration:
  _1 = keyword_include _2 = PARGAUCHE _3 = f_name _4 = PARDROITE _5 = POINT
    {      ( Abstract_include _3 )}
| _1 = keyword_input_clause _2 = PARGAUCHE _3 = ident _4 = VIRGULE _5 = ident _6 = VIRGULE _7 = clause _8 = PARDROITE _9 = POINT
    {      ( Abstract_clause _7 )}

keyword_include:
  _1 = TOKEN_INCLUDE
    {                ( etat_analyse.lexer_state <- Include_lexer )}

keyword_input_clause:
  _1 = TOKEN_INPUT_CLAUSE
    {                     ( etat_analyse.lexer_state <- Input_clause_lexer )}

f_name:
  _1 = FILE_NAME
    {            ( _1 )}

clause:
  _1 = CROGAUCHE _2 = literal_list _3 = CRODROIT
    {                                  ( transform_clause _2 )}

literal_list:
  _1 = literal
    {          ( _1::[] )}
| _1 = literal _2 = VIRGULE _3 = literal_list
    {                               ( _1::_3 )}

literal:
  _1 = PLUS _2 = atom
    {            ( P(_2) )}
| _1 = MOINS _2 = atom
    {             ( M(_2) )}

atom:
  _1 = EGAL _2 = PARGAUCHE _3 = term _4 = VIRGULE _5 = term _6 = PARDROITE
    {                                             ( (_3,_5) )}

ident:
  _1 = IDENT
    {                      ( _1 )}

term:
  _1 = VRB
    {      ( add_operator_to_cime_pb VARIABLE 0 DEFAULT _1;
        Var (var_id_of_string _1) )}
| _1 = IDENT
    {        ( add_operator_to_cime_pb FREE 0 DEFAULT _1;
          Term ((get_symbol_id _1),[]) )}
| _1 = PARGAUCHE _2 = term _3 = PARDROITE
    {                           ( _2 )}
| _1 = IDENT _2 = PARGAUCHE _3 = term_list _4 = PARDROITE
    {     (  let ar_f = (List.length _3) in
      	add_operator_to_cime_pb FREE ar_f DEFAULT _1;
      	let f=(get_symbol_id _1) in
        Term(f,_3)
    )}

term_list:
  _1 = term %prec TERMLIST
    {                      ( [_1] )}
| _1 = term _2 = VIRGULE _3 = term_list
    {                         ( _1 :: _3 )}

term_line:
  _1 = term _2 = POINT_VIRGULE
    {                     ( _1 )}

%%
