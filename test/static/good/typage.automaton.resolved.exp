State 0:
## Known stack suffix:
##
## LR(1) items:
expression' -> . expression [ # ]
## Transitions:
-- On SND shift to state 1
-- On OP shift to state 2
-- On LPAREN shift to state 3
-- On LET shift to state 4
-- On LBRACE shift to state 7
-- On INT shift to state 10
-- On IDENT shift to state 11
-- On FUN shift to state 22
-- On FST shift to state 12
-- On expression shift to state 43
-- On expr shift to state 44
-- On closed_expr shift to state 16
-- On application shift to state 28
## Reductions:

State 1:
## Known stack suffix:
## SND
## LR(1) items:
application -> SND . closed_expr [ SEMI RPAREN RBRACE OP LPAREN LBRACE INT IN IDENT EOF COMMA AT ]
## Transitions:
-- On OP shift to state 2
-- On LPAREN shift to state 3
-- On LBRACE shift to state 7
-- On INT shift to state 10
-- On IDENT shift to state 11
-- On closed_expr shift to state 42
## Reductions:

State 2:
## Known stack suffix:
## OP
## LR(1) items:
closed_expr -> OP . [ SEMI RPAREN RBRACE OP LPAREN LBRACE INT IN IDENT EOF DOT COMMA AT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production closed_expr -> OP

State 3:
## Known stack suffix:
## LPAREN
## LR(1) items:
closed_expr -> LPAREN . expr RPAREN [ SEMI RPAREN RBRACE OP LPAREN LBRACE INT IN IDENT EOF DOT COMMA AT ]
## Transitions:
-- On SND shift to state 1
-- On OP shift to state 2
-- On LPAREN shift to state 3
-- On LET shift to state 4
-- On LBRACE shift to state 7
-- On INT shift to state 10
-- On IDENT shift to state 11
-- On FUN shift to state 22
-- On FST shift to state 12
-- On expr shift to state 40
-- On closed_expr shift to state 16
-- On application shift to state 28
## Reductions:

State 4:
## Known stack suffix:
## LET
## LR(1) items:
expr -> LET . IDENT EQUAL expr IN expr [ RPAREN RBRACE IN EOF COMMA ]
## Transitions:
-- On IDENT shift to state 5
## Reductions:

State 5:
## Known stack suffix:
## LET IDENT
## LR(1) items:
expr -> LET IDENT . EQUAL expr IN expr [ RPAREN RBRACE IN EOF COMMA ]
## Transitions:
-- On EQUAL shift to state 6
## Reductions:

State 6:
## Known stack suffix:
## LET IDENT EQUAL
## LR(1) items:
expr -> LET IDENT EQUAL . expr IN expr [ RPAREN RBRACE IN EOF COMMA ]
## Transitions:
-- On SND shift to state 1
-- On OP shift to state 2
-- On LPAREN shift to state 3
-- On LET shift to state 4
-- On LBRACE shift to state 7
-- On INT shift to state 10
-- On IDENT shift to state 11
-- On FUN shift to state 22
-- On FST shift to state 12
-- On expr shift to state 37
-- On closed_expr shift to state 16
-- On application shift to state 28
## Reductions:

State 7:
## Known stack suffix:
## LBRACE
## LR(1) items:
closed_expr -> LBRACE . entries RBRACE [ SEMI RPAREN RBRACE OP LPAREN LBRACE INT IN IDENT EOF DOT COMMA AT ]
## Transitions:
-- On IDENT shift to state 8
-- On entry shift to state 32
-- On entries shift to state 33
## Reductions:

State 8:
## Known stack suffix:
## IDENT
## LR(1) items:
entry -> IDENT . EQUAL application [ SEMI RBRACE ]
## Transitions:
-- On EQUAL shift to state 9
## Reductions:

State 9:
## Known stack suffix:
## IDENT EQUAL
## LR(1) items:
entry -> IDENT EQUAL . application [ SEMI RBRACE ]
## Transitions:
-- On SND shift to state 1
-- On OP shift to state 2
-- On LPAREN shift to state 3
-- On LBRACE shift to state 7
-- On INT shift to state 10
-- On IDENT shift to state 11
-- On FST shift to state 12
-- On closed_expr shift to state 16
-- On application shift to state 17
## Reductions:

State 10:
## Known stack suffix:
## INT
## LR(1) items:
closed_expr -> INT . [ SEMI RPAREN RBRACE OP LPAREN LBRACE INT IN IDENT EOF DOT COMMA AT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production closed_expr -> INT

State 11:
## Known stack suffix:
## IDENT
## LR(1) items:
closed_expr -> IDENT . [ SEMI RPAREN RBRACE OP LPAREN LBRACE INT IN IDENT EOF DOT COMMA AT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production closed_expr -> IDENT

State 12:
## Known stack suffix:
## FST
## LR(1) items:
application -> FST . closed_expr [ SEMI RPAREN RBRACE OP LPAREN LBRACE INT IN IDENT EOF COMMA AT ]
## Transitions:
-- On OP shift to state 2
-- On LPAREN shift to state 3
-- On LBRACE shift to state 7
-- On INT shift to state 10
-- On IDENT shift to state 11
-- On closed_expr shift to state 13
## Reductions:

State 13:
## Known stack suffix:
## FST closed_expr
## LR(1) items:
application -> FST closed_expr . [ SEMI RPAREN RBRACE OP LPAREN LBRACE INT IN IDENT EOF COMMA AT ]
closed_expr -> closed_expr . DOT IDENT [ SEMI RPAREN RBRACE OP LPAREN LBRACE INT IN IDENT EOF DOT COMMA AT ]
## Transitions:
-- On DOT shift to state 14
## Reductions:
-- On SEMI reduce production application -> FST closed_expr
-- On RPAREN reduce production application -> FST closed_expr
-- On RBRACE reduce production application -> FST closed_expr
-- On OP reduce production application -> FST closed_expr
-- On LPAREN reduce production application -> FST closed_expr
-- On LBRACE reduce production application -> FST closed_expr
-- On INT reduce production application -> FST closed_expr
-- On IN reduce production application -> FST closed_expr
-- On IDENT reduce production application -> FST closed_expr
-- On EOF reduce production application -> FST closed_expr
-- On COMMA reduce production application -> FST closed_expr
-- On AT reduce production application -> FST closed_expr

State 14:
## Known stack suffix:
## closed_expr DOT
## LR(1) items:
closed_expr -> closed_expr DOT . IDENT [ SEMI RPAREN RBRACE OP LPAREN LBRACE INT IN IDENT EOF DOT COMMA AT ]
## Transitions:
-- On IDENT shift to state 15
## Reductions:

State 15:
## Known stack suffix:
## closed_expr DOT IDENT
## LR(1) items:
closed_expr -> closed_expr DOT IDENT . [ SEMI RPAREN RBRACE OP LPAREN LBRACE INT IN IDENT EOF DOT COMMA AT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production closed_expr -> closed_expr DOT IDENT

State 16:
## Known stack suffix:
## closed_expr
## LR(1) items:
application -> closed_expr . [ SEMI RPAREN RBRACE OP LPAREN LBRACE INT IN IDENT EOF COMMA AT ]
closed_expr -> closed_expr . DOT IDENT [ SEMI RPAREN RBRACE OP LPAREN LBRACE INT IN IDENT EOF DOT COMMA AT ]
## Transitions:
-- On DOT shift to state 14
## Reductions:
-- On SEMI reduce production application -> closed_expr
-- On RPAREN reduce production application -> closed_expr
-- On RBRACE reduce production application -> closed_expr
-- On OP reduce production application -> closed_expr
-- On LPAREN reduce production application -> closed_expr
-- On LBRACE reduce production application -> closed_expr
-- On INT reduce production application -> closed_expr
-- On IN reduce production application -> closed_expr
-- On IDENT reduce production application -> closed_expr
-- On EOF reduce production application -> closed_expr
-- On COMMA reduce production application -> closed_expr
-- On AT reduce production application -> closed_expr

State 17:
## Known stack suffix:
## IDENT EQUAL application
## LR(1) items:
application -> application . closed_expr [ SEMI RBRACE OP LPAREN LBRACE INT IDENT AT ]
application -> application . AT LBRACE IDENT EQUAL expr RBRACE [ SEMI RBRACE OP LPAREN LBRACE INT IDENT AT ]
entry -> IDENT EQUAL application . [ SEMI RBRACE ]
## Transitions:
-- On OP shift to state 2
-- On LPAREN shift to state 3
-- On LBRACE shift to state 7
-- On INT shift to state 10
-- On IDENT shift to state 11
-- On AT shift to state 18
-- On closed_expr shift to state 29
## Reductions:
-- On SEMI reduce production entry -> IDENT EQUAL application
-- On RBRACE reduce production entry -> IDENT EQUAL application

State 18:
## Known stack suffix:
## application AT
## LR(1) items:
application -> application AT . LBRACE IDENT EQUAL expr RBRACE [ SEMI RPAREN RBRACE OP LPAREN LBRACE INT IN IDENT EOF COMMA AT ]
## Transitions:
-- On LBRACE shift to state 19
## Reductions:

State 19:
## Known stack suffix:
## application AT LBRACE
## LR(1) items:
application -> application AT LBRACE . IDENT EQUAL expr RBRACE [ SEMI RPAREN RBRACE OP LPAREN LBRACE INT IN IDENT EOF COMMA AT ]
## Transitions:
-- On IDENT shift to state 20
## Reductions:

State 20:
## Known stack suffix:
## application AT LBRACE IDENT
## LR(1) items:
application -> application AT LBRACE IDENT . EQUAL expr RBRACE [ SEMI RPAREN RBRACE OP LPAREN LBRACE INT IN IDENT EOF COMMA AT ]
## Transitions:
-- On EQUAL shift to state 21
## Reductions:

State 21:
## Known stack suffix:
## application AT LBRACE IDENT EQUAL
## LR(1) items:
application -> application AT LBRACE IDENT EQUAL . expr RBRACE [ SEMI RPAREN RBRACE OP LPAREN LBRACE INT IN IDENT EOF COMMA AT ]
## Transitions:
-- On SND shift to state 1
-- On OP shift to state 2
-- On LPAREN shift to state 3
-- On LET shift to state 4
-- On LBRACE shift to state 7
-- On INT shift to state 10
-- On IDENT shift to state 11
-- On FUN shift to state 22
-- On FST shift to state 12
-- On expr shift to state 30
-- On closed_expr shift to state 16
-- On application shift to state 28
## Reductions:

State 22:
## Known stack suffix:
## FUN
## LR(1) items:
expr -> FUN . IDENT ARROW expr [ RPAREN RBRACE IN EOF COMMA ]
## Transitions:
-- On IDENT shift to state 23
## Reductions:

State 23:
## Known stack suffix:
## FUN IDENT
## LR(1) items:
expr -> FUN IDENT . ARROW expr [ RPAREN RBRACE IN EOF COMMA ]
## Transitions:
-- On ARROW shift to state 24
## Reductions:

State 24:
## Known stack suffix:
## FUN IDENT ARROW
## LR(1) items:
expr -> FUN IDENT ARROW . expr [ RPAREN RBRACE IN EOF COMMA ]
## Transitions:
-- On SND shift to state 1
-- On OP shift to state 2
-- On LPAREN shift to state 3
-- On LET shift to state 4
-- On LBRACE shift to state 7
-- On INT shift to state 10
-- On IDENT shift to state 11
-- On FUN shift to state 22
-- On FST shift to state 12
-- On expr shift to state 25
-- On closed_expr shift to state 16
-- On application shift to state 28
## Reductions:

State 25:
## Known stack suffix:
## FUN IDENT ARROW expr
## LR(1) items:
expr -> expr . COMMA expr [ RPAREN RBRACE IN EOF COMMA ]
expr -> FUN IDENT ARROW expr . [ RPAREN RBRACE IN EOF COMMA ]
## Transitions:
-- On COMMA shift to state 26
## Reductions:
-- On RPAREN reduce production expr -> FUN IDENT ARROW expr
-- On RBRACE reduce production expr -> FUN IDENT ARROW expr
-- On IN reduce production expr -> FUN IDENT ARROW expr
-- On EOF reduce production expr -> FUN IDENT ARROW expr

State 26:
## Known stack suffix:
## expr COMMA
## LR(1) items:
expr -> expr COMMA . expr [ RPAREN RBRACE IN EOF COMMA ]
## Transitions:
-- On SND shift to state 1
-- On OP shift to state 2
-- On LPAREN shift to state 3
-- On LET shift to state 4
-- On LBRACE shift to state 7
-- On INT shift to state 10
-- On IDENT shift to state 11
-- On FUN shift to state 22
-- On FST shift to state 12
-- On expr shift to state 27
-- On closed_expr shift to state 16
-- On application shift to state 28
## Reductions:

State 27:
## Known stack suffix:
## expr COMMA expr
## LR(1) items:
expr -> expr . COMMA expr [ RPAREN RBRACE IN EOF COMMA ]
expr -> expr COMMA expr . [ RPAREN RBRACE IN EOF COMMA ]
## Transitions:
-- On COMMA shift to state 26
## Reductions:
-- On RPAREN reduce production expr -> expr COMMA expr
-- On RBRACE reduce production expr -> expr COMMA expr
-- On IN reduce production expr -> expr COMMA expr
-- On EOF reduce production expr -> expr COMMA expr

State 28:
## Known stack suffix:
## application
## LR(1) items:
application -> application . closed_expr [ RPAREN RBRACE OP LPAREN LBRACE INT IN IDENT EOF COMMA AT ]
application -> application . AT LBRACE IDENT EQUAL expr RBRACE [ RPAREN RBRACE OP LPAREN LBRACE INT IN IDENT EOF COMMA AT ]
expr -> application . [ RPAREN RBRACE IN EOF COMMA ]
## Transitions:
-- On OP shift to state 2
-- On LPAREN shift to state 3
-- On LBRACE shift to state 7
-- On INT shift to state 10
-- On IDENT shift to state 11
-- On AT shift to state 18
-- On closed_expr shift to state 29
## Reductions:
-- On RPAREN reduce production expr -> application
-- On RBRACE reduce production expr -> application
-- On IN reduce production expr -> application
-- On EOF reduce production expr -> application
-- On COMMA reduce production expr -> application

State 29:
## Known stack suffix:
## application closed_expr
## LR(1) items:
application -> application closed_expr . [ SEMI RPAREN RBRACE OP LPAREN LBRACE INT IN IDENT EOF COMMA AT ]
closed_expr -> closed_expr . DOT IDENT [ SEMI RPAREN RBRACE OP LPAREN LBRACE INT IN IDENT EOF DOT COMMA AT ]
## Transitions:
-- On DOT shift to state 14
## Reductions:
-- On SEMI reduce production application -> application closed_expr
-- On RPAREN reduce production application -> application closed_expr
-- On RBRACE reduce production application -> application closed_expr
-- On OP reduce production application -> application closed_expr
-- On LPAREN reduce production application -> application closed_expr
-- On LBRACE reduce production application -> application closed_expr
-- On INT reduce production application -> application closed_expr
-- On IN reduce production application -> application closed_expr
-- On IDENT reduce production application -> application closed_expr
-- On EOF reduce production application -> application closed_expr
-- On COMMA reduce production application -> application closed_expr
-- On AT reduce production application -> application closed_expr

State 30:
## Known stack suffix:
## application AT LBRACE IDENT EQUAL expr
## LR(1) items:
application -> application AT LBRACE IDENT EQUAL expr . RBRACE [ SEMI RPAREN RBRACE OP LPAREN LBRACE INT IN IDENT EOF COMMA AT ]
expr -> expr . COMMA expr [ RBRACE COMMA ]
## Transitions:
-- On RBRACE shift to state 31
-- On COMMA shift to state 26
## Reductions:

State 31:
## Known stack suffix:
## application AT LBRACE IDENT EQUAL expr RBRACE
## LR(1) items:
application -> application AT LBRACE IDENT EQUAL expr RBRACE . [ SEMI RPAREN RBRACE OP LPAREN LBRACE INT IN IDENT EOF COMMA AT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production application -> application AT LBRACE IDENT EQUAL expr RBRACE

State 32:
## Known stack suffix:
## entry
## LR(1) items:
entries -> entry . [ SEMI RBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production entries -> entry

State 33:
## Known stack suffix:
## LBRACE entries
## LR(1) items:
closed_expr -> LBRACE entries . RBRACE [ SEMI RPAREN RBRACE OP LPAREN LBRACE INT IN IDENT EOF DOT COMMA AT ]
entries -> entries . SEMI entry [ SEMI RBRACE ]
## Transitions:
-- On SEMI shift to state 34
-- On RBRACE shift to state 36
## Reductions:

State 34:
## Known stack suffix:
## entries SEMI
## LR(1) items:
entries -> entries SEMI . entry [ SEMI RBRACE ]
## Transitions:
-- On IDENT shift to state 8
-- On entry shift to state 35
## Reductions:

State 35:
## Known stack suffix:
## entries SEMI entry
## LR(1) items:
entries -> entries SEMI entry . [ SEMI RBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production entries -> entries SEMI entry

State 36:
## Known stack suffix:
## LBRACE entries RBRACE
## LR(1) items:
closed_expr -> LBRACE entries RBRACE . [ SEMI RPAREN RBRACE OP LPAREN LBRACE INT IN IDENT EOF DOT COMMA AT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production closed_expr -> LBRACE entries RBRACE

State 37:
## Known stack suffix:
## LET IDENT EQUAL expr
## LR(1) items:
expr -> expr . COMMA expr [ IN COMMA ]
expr -> LET IDENT EQUAL expr . IN expr [ RPAREN RBRACE IN EOF COMMA ]
## Transitions:
-- On IN shift to state 38
-- On COMMA shift to state 26
## Reductions:

State 38:
## Known stack suffix:
## LET IDENT EQUAL expr IN
## LR(1) items:
expr -> LET IDENT EQUAL expr IN . expr [ RPAREN RBRACE IN EOF COMMA ]
## Transitions:
-- On SND shift to state 1
-- On OP shift to state 2
-- On LPAREN shift to state 3
-- On LET shift to state 4
-- On LBRACE shift to state 7
-- On INT shift to state 10
-- On IDENT shift to state 11
-- On FUN shift to state 22
-- On FST shift to state 12
-- On expr shift to state 39
-- On closed_expr shift to state 16
-- On application shift to state 28
## Reductions:

State 39:
## Known stack suffix:
## LET IDENT EQUAL expr IN expr
## LR(1) items:
expr -> expr . COMMA expr [ RPAREN RBRACE IN EOF COMMA ]
expr -> LET IDENT EQUAL expr IN expr . [ RPAREN RBRACE IN EOF COMMA ]
## Transitions:
-- On COMMA shift to state 26
## Reductions:
-- On RPAREN reduce production expr -> LET IDENT EQUAL expr IN expr
-- On RBRACE reduce production expr -> LET IDENT EQUAL expr IN expr
-- On IN reduce production expr -> LET IDENT EQUAL expr IN expr
-- On EOF reduce production expr -> LET IDENT EQUAL expr IN expr

State 40:
## Known stack suffix:
## LPAREN expr
## LR(1) items:
closed_expr -> LPAREN expr . RPAREN [ SEMI RPAREN RBRACE OP LPAREN LBRACE INT IN IDENT EOF DOT COMMA AT ]
expr -> expr . COMMA expr [ RPAREN COMMA ]
## Transitions:
-- On RPAREN shift to state 41
-- On COMMA shift to state 26
## Reductions:

State 41:
## Known stack suffix:
## LPAREN expr RPAREN
## LR(1) items:
closed_expr -> LPAREN expr RPAREN . [ SEMI RPAREN RBRACE OP LPAREN LBRACE INT IN IDENT EOF DOT COMMA AT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production closed_expr -> LPAREN expr RPAREN

State 42:
## Known stack suffix:
## SND closed_expr
## LR(1) items:
application -> SND closed_expr . [ SEMI RPAREN RBRACE OP LPAREN LBRACE INT IN IDENT EOF COMMA AT ]
closed_expr -> closed_expr . DOT IDENT [ SEMI RPAREN RBRACE OP LPAREN LBRACE INT IN IDENT EOF DOT COMMA AT ]
## Transitions:
-- On DOT shift to state 14
## Reductions:
-- On SEMI reduce production application -> SND closed_expr
-- On RPAREN reduce production application -> SND closed_expr
-- On RBRACE reduce production application -> SND closed_expr
-- On OP reduce production application -> SND closed_expr
-- On LPAREN reduce production application -> SND closed_expr
-- On LBRACE reduce production application -> SND closed_expr
-- On INT reduce production application -> SND closed_expr
-- On IN reduce production application -> SND closed_expr
-- On IDENT reduce production application -> SND closed_expr
-- On EOF reduce production application -> SND closed_expr
-- On COMMA reduce production application -> SND closed_expr
-- On AT reduce production application -> SND closed_expr

State 43:
## Known stack suffix:
## expression
## LR(1) items:
expression' -> expression . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept expression

State 44:
## Known stack suffix:
## expr
## LR(1) items:
expr -> expr . COMMA expr [ EOF COMMA ]
expression -> expr . EOF [ # ]
## Transitions:
-- On EOF shift to state 45
-- On COMMA shift to state 26
## Reductions:

State 45:
## Known stack suffix:
## expr EOF
## LR(1) items:
expression -> expr EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production expression -> expr EOF

