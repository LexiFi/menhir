%{

open Source.Raw

let boolpat b =
  Annotation.make Location.dummy (PBool b)

%}
%start program
%start specification_alone
%token ABSURD
%token ACCEPTS
%token ARROW
%token ATOM
%token ATOMSET
%token BAND
%token BAR
%token BINDS
%token BNOT
%token BOOL
%token BOR
%token BOUND
%token CASE
%token CMPEQ
%token COLON
%token COMMA
%token DEFEQ
%token DISJOINT
%token ELSE
%token EMPTYSET
%token END
%token EOF
%token FAIL
%token FALSE
%token FRESH
%token FUN
%token <Identifier.t> ID
%token IF
%token IN
%token INNER
%token LANGLE
%token LET
%token LPAR
%token MEMBER
%token NEXT
%token NOTHING
%token OF
%token OUTER
%token PRODUCES
%token RANGLE
%token RPAR
%token SETMINUS
%token SETUNION
%token STAR
%token SUBSET
%token SUPPORT
%token <Identifier.t> TAG
%token THEN
%token TRUE
%token TYPE
%token WHERE
%token WILD
%left BOR
%left BAND
%nonassoc BNOT
%nonassoc CMPEQ
%left SETUNION
%nonassoc SETMINUS
%type <Source.Raw.program> program
%type <Source.Raw.specification> specification_alone
%%

list_data_constructor_declaration_:
  
    {    ( [] )} [@name nil_data_constructor_declaration]
| x = data_constructor_declaration xs = list_data_constructor_declaration_
    {    ( x :: xs )} [@name cons_data_constructor_declaration]

list_definition_:
  
    {    ( [] )} [@name nil_definition]
| x = definition xs = list_definition_
    {    ( x :: xs )} [@name cons_definition]

list_preceded_WHERE_contrainte__:
  
    {    ( [] )} [@name nil_preceded_WHERE_contrainte_]
| _1 = WHERE x = contrainte xs = list_preceded_WHERE_contrainte__
    {let x =     ( x ) in
    ( x :: xs )} [@name cons_preceded_WHERE_contrainte_]

nonempty_list_branch_:
  x = branch
    {    ( [ x ] )} [@name one_branch]
| x = branch xs = nonempty_list_branch_
    {    ( x :: xs )} [@name more_branch]

separated_nonempty_list_COMMA_ID_:
  x = ID
    {    ( [ x ] )} [@name one_COMMA_ID]
| x = ID _2 = COMMA xs = separated_nonempty_list_COMMA_ID_
    {    ( x :: xs )} [@name more_COMMA_ID]

separated_nonempty_list_COMMA_atomic_expression_:
  x = atomic_expression
    {    ( [ x ] )} [@name one_COMMA_atomic_expression]
| x = atomic_expression _2 = COMMA xs = separated_nonempty_list_COMMA_atomic_expression_
    {    ( x :: xs )} [@name more_COMMA_atomic_expression]

separated_nonempty_list_COMMA_pattern_:
  x = pattern
    {    ( [ x ] )} [@name one_COMMA_pattern]
| x = pattern _2 = COMMA xs = separated_nonempty_list_COMMA_pattern_
    {    ( x :: xs )} [@name more_COMMA_pattern]

separated_nonempty_list_STAR_located_atomic_layout__:
  x = located_atomic_layout_
    {    ( [ x ] )} [@name one_STAR_located_atomic_layout_]
| x = located_atomic_layout_ _2 = STAR xs = separated_nonempty_list_STAR_located_atomic_layout__
    {    ( x :: xs )} [@name more_STAR_located_atomic_layout_]

located_atomic_layout_:
  x = atomic_layout
    {let _endpos = _endpos_x_ in
let _startpos = _startpos_x_ in
    ( Annotation.make (_startpos, _endpos) x )}

located_layout_:
  x = layout
    {let _endpos = _endpos_x_ in
let _startpos = _startpos_x_ in
    ( Annotation.make (_startpos, _endpos) x )}

located_optional_layout_:
  x = optional_layout
    {let _endpos = _endpos_x_ in
let _startpos = _startpos_x_ in
    ( Annotation.make (_startpos, _endpos) x )}

located_raw_atomic_expression_:
  x = raw_atomic_expression
    {let _endpos = _endpos_x_ in
let _startpos = _startpos_x_ in
    ( Annotation.make (_startpos, _endpos) x )}

located_raw_expression_:
  x = raw_expression
    {let _endpos = _endpos_x_ in
let _startpos = _startpos_x_ in
    ( Annotation.make (_startpos, _endpos) x )}

located_raw_pattern_:
  x = raw_pattern
    {let _endpos = _endpos_x_ in
let _startpos = _startpos_x_ in
    ( Annotation.make (_startpos, _endpos) x )}

lenient_parenthesized_tuple_atomic_expression_:
  
    {    ( [] )}
| _1 = LPAR xs = separated_nonempty_list_COMMA_atomic_expression_ _3 = RPAR
    {    ( xs )}

lenient_parenthesized_tuple_pattern_:
  
    {    ( [] )}
| _1 = LPAR xs = separated_nonempty_list_COMMA_pattern_ _3 = RPAR
    {    ( xs )}

set_function:
  _1 = SUPPORT
    {    ( SFSupport )}
| _1 = OUTER
    {    ( SFOuter )}
| _1 = INNER
    {    ( SFInner)}
| _1 = BOUND
    {    ( SFBound )}

set_expression:
  _1 = EMPTYSET
    {    ( SEEmpty )}
| e1 = set_expression _2 = SETUNION e2 = set_expression
    {    ( SEUnion (e1, e2) )}
| e1 = set_expression _2 = SETMINUS e2 = set_expression
    {    ( SEDifference (e1, e2) )}
| f = set_function _2 = LPAR x = ID _4 = RPAR
    {    ( SEApp (f, x) )}
| _1 = LPAR e = set_expression _3 = RPAR
    {    ( e )}

set_operator:
  _1 = SUBSET
    {    ( OpSubset )}
| _1 = CMPEQ
    {    ( OpEqual )}
| _1 = DISJOINT
    {    ( OpDisjoint )}

set_constraint:
  e1 = set_expression op = set_operator e2 = set_expression
    {    ( (e1, op, e2) )}

boolean_expression:
  _1 = FALSE
    {    ( FFalse )}
| _1 = TRUE
    {    ( FTrue )}
| b1 = boolean_expression _2 = BAND b2 = boolean_expression
    {    ( FAnd (b1, b2) )}
| b1 = boolean_expression _2 = CMPEQ b2 = boolean_expression
    {    ( FIff (b1, b2) )}
| b1 = boolean_expression _2 = BOR b2 = boolean_expression
    {    ( FChoice (b1, b2) )}
| _1 = BNOT b = boolean_expression
    {    ( FNot b )}
| x = ID
    {    ( FVar x )}
| _1 = LPAR b = boolean_expression _3 = RPAR
    {    ( b )}

contrainte:
  b = boolean_expression
    {    ( CBoolean b )}
| c = set_constraint
    {    ( CSet (FTrue, c) )}
| b = boolean_expression _2 = ARROW c = set_constraint
    {    ( CSet (b, c) )}

contraintes:
  cs = list_preceded_WHERE_contrainte__
    {    ( cs )}

raw_pattern:
  _1 = WILD
    {    ( PWildcard )}
| x = ID
    {    ( PVar x )}
| tag = TAG ps = lenient_parenthesized_tuple_pattern_
    {    ( PTagTuple (tag, ps) )}
| _1 = TRUE
    {    ( PBool true )}
| _1 = FALSE
    {    ( PBool false )}

pattern:
  p = located_raw_pattern_
    {    ( p )}

prefix_callee:
  f = ID
    {    ( CUser f )}
| _1 = SUPPORT
    {    ( CPrim PrimGenericSupport )}
| _1 = OUTER
    {    ( CPrim PrimGenericOuter )}
| _1 = INNER
    {    ( CPrim PrimGenericInner )}
| _1 = BOUND
    {    ( CPrim PrimGenericBound )}
| _1 = MEMBER
    {    ( CPrim PrimMember )}

raw_atomic_expression:
  x = ID
    {    ( EVar x )}
| _1 = TRUE
    {    ( EBool true )}
| _1 = FALSE
    {    ( EBool false )}
| tag = TAG es = lenient_parenthesized_tuple_atomic_expression_
    {    ( ETagTuple (tag, es) )}
| _1 = CASE e = expression _3 = OF branches = nonempty_list_branch_ _5 = END
    {    ( ECase (e, branches) )}
| callee = prefix_callee _2 = LPAR e = expression _4 = RPAR
    {    ( ECall (callee, e) )}
| _1 = LPAR e = raw_expression _3 = RPAR
    {    ( e )}
| _1 = BNOT e = atomic_expression
    {    ( ECall (CPrim PrimBoolNot, e) )}
| e1 = atomic_expression _1 = CMPEQ e2 = atomic_expression
    {let p =     ( PrimAtomEquality ) in
let _endpos = _endpos_e2_ in
let _startpos = _startpos_e1_ in
    ( ECall (CPrim p, Annotation.make (_startpos, _endpos) (EMulti [ e1; e2 ])) )}
| e1 = atomic_expression _1 = BAND e2 = atomic_expression
    {let p =     ( PrimBoolAnd ) in
let _endpos = _endpos_e2_ in
let _startpos = _startpos_e1_ in
    ( ECall (CPrim p, Annotation.make (_startpos, _endpos) (EMulti [ e1; e2 ])) )}
| e1 = atomic_expression _1 = BOR e2 = atomic_expression
    {let p =     ( PrimBoolOr ) in
let _endpos = _endpos_e2_ in
let _startpos = _startpos_e1_ in
    ( ECall (CPrim p, Annotation.make (_startpos, _endpos) (EMulti [ e1; e2 ])) )}
| _1 = NEXT _2 = CASE
    {    ( ENextCase )}

atomic_expression:
  e = located_raw_atomic_expression_
    {    ( e )}

variables:
  _1 = NOTHING
    {    ( [] )}
| xs = separated_nonempty_list_COMMA_ID_
    {    ( xs )}

raw_expression:
  _1 = ABSURD
    {    ( EAbsurd )}
| _1 = FAIL
    {    ( EFail )}
| _1 = FRESH xs = variables _3 = IN e = expression
    {    ( EFresh (xs, e) )}
| _1 = IF e = expression _3 = THEN e1 = expression _5 = ELSE e2 = expression
    {    ( ECase (e, [ [ boolpat true ], e1 ; [ boolpat false ], e2 ]) )}
| _1 = LET xs = variables claim = contraintes _4 = DEFEQ e1 = expression _6 = IN e2 = expression
    {    ( ELetMulti (e1, (xs, claim, e2)) )}
| _1 = LET tag = TAG ps = lenient_parenthesized_tuple_pattern_ _4 = DEFEQ e1 = expression _6 = IN e2 = expression
    {    ( let p = Annotation.make (_startpos_tag_, _endpos_ps_) (PTagTuple (tag, ps)) in
      ECase (e1, [ [ p ], e2 ]) )}
| _1 = NOTHING
    {    ( EMulti [] )}
| e = atomic_expression _2 = COMMA es = separated_nonempty_list_COMMA_atomic_expression_
    {    ( EMulti (e :: es) )}
| e = raw_atomic_expression
    {    ( e )}

expression:
  e = located_raw_expression_
    {    ( e )}

branch:
  _1 = BAR ps = separated_nonempty_list_COMMA_pattern_ _3 = ARROW e = expression
    {    ( ps, e )}

typ:
  t = ID
    {    ( TData t )}
| _1 = ATOM
    {    ( TAtom )}
| _1 = ATOMSET
    {    ( TAtomSet )}
| _1 = BOOL
    {    ( TBool )}

atomic_layout:
  t = typ
    {let x =     ( None ) in
    ( LComponent (x, t) )} [@name none_terminated_ID_COLON_]
| x = ID _2 = COLON t = typ
    {let x =
  let x =     ( x ) in
      ( Some x )
in
    ( LComponent (x, t) )} [@name some_terminated_ID_COLON_]
| _1 = INNER layout = located_atomic_layout_
    {    ( LInner layout )}
| _1 = OUTER layout = located_atomic_layout_
    {    ( LOuter layout )}
| _1 = LANGLE layout = located_layout_ _3 = RANGLE
    {    ( LAbstraction layout )}

layout:
  layout = atomic_layout
    {    ( layout )}
| head = located_atomic_layout_ _2 = STAR tail = separated_nonempty_list_STAR_located_atomic_layout__
    {    ( LTuple (head :: tail) )}

optional_layout:
  
    {    ( LTuple [] )}
| _1 = OF layout = layout
    {    ( layout )}

data_constructor_declaration:
  _1 = BAR tag = TAG layout = located_optional_layout_ guard = contraintes
    {    ( tag, (layout, guard) )}

specification:
  _1 = ACCEPTS xs = variables pre = contraintes _4 = PRODUCES ys = variables post = contraintes
    {    ( xs, pre, (ys, post) )}

definition:
  _1 = FUN f = ID spec = specification _4 = DEFEQ e = expression
    {    ( let xs, pre, opc = spec in
      DefValFun (f, (xs, pre, opc, e)) )}
| _1 = TYPE t = ID kind = kind _4 = DEFEQ ds = list_data_constructor_declaration_
    {    ( DefDataType (t, (kind, ds)) )}

kind:
  
    {    ( KExpression )}
| _1 = BINDS
    {    ( KPattern )}

program:
  defs = list_definition_ _2 = EOF
    {    ( defs )}

specification_alone:
  spec = specification _2 = EOF
    {    ( spec )}

%%
