File "unigram.mly", line 506, characters 7-34:
Warning: when --strategy simplified is selected,
the error token may appear only at the end of a production
(and the semantic action must abort the parser).
This production will be ignored.
File "unigram.mly", line 158, characters 3-19:
Warning: when --strategy simplified is selected,
the error token may appear only at the end of a production
(and the semantic action must abort the parser).
This production will be ignored.
%{

global outline, outcol, outfilename

record treenode(label, children)

procedure node(label, children[])
   return treenode(label, children)
end

%}
%start program
%token ABSTRACT
%token AND
%token ASSIGN
%token AT
%token AUGAND
%token AUGAT
%token AUGCARET
%token AUGCONCAT
%token AUGDIFF
%token AUGEQUIV
%token AUGINTER
%token AUGLCONCAT
%token AUGMINUS
%token AUGMOD
%token AUGNEQUIV
%token AUGNMEQ
%token AUGNMGE
%token AUGNMGT
%token AUGNMLE
%token AUGNMLT
%token AUGNMNE
%token AUGPLUS
%token AUGQMARK
%token AUGSEQ
%token AUGSGE
%token AUGSGT
%token AUGSLASH
%token AUGSLE
%token AUGSLT
%token AUGSNE
%token AUGSTAR
%token AUGUNION
%token BACKSLASH
%token BANG
%token BAR
%token BREAK
%token BY
%token CARET
%token CASE
%token CLASS
%token COLON
%token COLONCOLON
%token COMMA
%token CONCAT
%token CREATE
%token CSETLIT
%token DEFAULT
%token DIFF
%token DO
%token DOLLAR
%token DOT
%token ELSE
%token END
%token EOFX
%token EQUIV
%token EVERY
%token FAIL
%token GLOBAL
%token ICONINITIAL
%token IDENT
%token IF
%token IMPORT
%token INITIALLY
%token INTER
%token INTLIT
%token INVOCABLE
%token LBRACE
%token LBRACK
%token LCONCAT
%token LINK
%token LOCAL
%token LPAREN
%token MCOLON
%token METHOD
%token MINUS
%token MOD
%token NEQUIV
%token NEXT
%token NMEQ
%token NMGE
%token NMGT
%token NMLE
%token NMLT
%token NMNE
%token NOT
%token OF
%token PACKAGE
%token PCOLON
%token PLUS
%token PROCEDURE
%token QMARK
%token RBRACE
%token RBRACK
%token REALLIT
%token RECORD
%token REPEAT
%token RETURN
%token REVASSIGN
%token REVSWAP
%token RPAREN
%token SEMICOL
%token SEQ
%token SGE
%token SGT
%token SLASH
%token SLE
%token SLT
%token SNE
%token STAR
%token STATIC
%token STRINGLIT
%token SUSPEND
%token SWAP
%token THEN
%token TILDE
%token TO
%token UNION
%token UNTIL
%token WHILE
%type <unit> program
%%

program:
  _1 = decls _2 = EOFX
    {                     ( $$ := node("prog", _1);)}

decls:
  
    {        ( $$ := EmptyNode )}
| _1 = decls _2 = decl
    {              (
	   #if yynerrs = 0 then iwrites(&errout,".");
	   $$ := node("decls", _1, _2)
	      )}

decl:
  _1 = record
    {()}
| _1 = proc
    {()}
| _1 = global
    {()}
| _1 = link
    {()}
| _1 = package
    {()}
| _1 = import
    {()}
| _1 = invocable
    {()}
| _1 = cl
    {()}

initiallysection:
  
    {                  ( $$ := EmptyNode )}
| _1 = INITIALLY _2 = SEMICOL _3 = locals _4 = initial _5 = procbody
    {                                             (
	   $$ := node("initially", _1, _2, _3, _4, _5)
	)}
| _1 = INITIALLY _2 = LPAREN _3 = arglist _4 = RPAREN _5 = SEMICOL _6 = locals _7 = initial _8 = procbody
    {                                                                   (
           $$ := node("initially", _1, _2, _3, _4, _5, _6, _7, _8)
	)}

optsemi:
  
    {          ( $$ := EmptyNode )}
| _1 = SEMICOL
    {                  ()}

cl:
  _1 = classhead _2 = SEMICOL _3 = END
    {                           (
   $$ := node("class", _1, _2, _3)
   )}
| _1 = classhead _2 = methods _3 = optsemi _4 = initiallysection _5 = END
    {                                                    (
   $$ := node("class", _1, _2, _3, _4, _5)
   )}

classhead:
  _1 = CLASS _2 = IDENT _3 = supers _4 = LPAREN _5 = arglist _6 = RPAREN
    {                                                     (
   $$ := node("classhead", _1,_2,_3,_4,_5,_6)
   )}

supers:
  
    {        ( $$ := EmptyNode )}
| _1 = COLON _2 = IDENT _3 = supers
    {                        ( $$ := node("supers", _1, _2, _3) )}
| _1 = COLON _2 = packageref _3 = supers
    {                             ( $$ := node("supers", _1, _2, _3) )}

packageref:
  _1 = IDENT _2 = COLONCOLON _3 = IDENT
    {                                    ( $$ := node("packageref", _1,_2,_3) )}
| _1 = COLONCOLON _2 = IDENT
    {                      ( $$ := node("packageref", _1,_2) )}

methods:
  
    {         ( $$ := EmptyNode )}
| _1 = meth _2 = methods
    {                  ( $$ := node("methods", _1,_2) )}
| _1 = global _2 = methods
    {                    ( $$ := node("methods", _1,_2) )}
| _1 = record _2 = methods
    {                    ( $$ := node("methods", _1,_2) )}

invocable:
  _1 = INVOCABLE _2 = invoclist
    {                                ( $$ := node("invocable", _1, _2);)}

invoclist:
  _1 = invocop
    {                    ()}
| _1 = invoclist _2 = COMMA _3 = invocop
    {                             ( $$ := node("invoclist", _1,_2,_3);)}

invocop:
  _1 = IDENT
    {                 ()}
| _1 = STRINGLIT
    {              ()}
| _1 = STRINGLIT _2 = COLON _3 = INTLIT
    {                           ($$ := node("invocop3", _1,_2,_3);)}

package:
  _1 = PACKAGE _2 = lnkfile
    {                          (
   $$ := node("package", _1, _2)
   )}

import:
  _1 = IMPORT _2 = lnklist
    {                        (
   $$ := node("import", _1,_2)
   )}

link:
  _1 = LINK _2 = lnklist
    {                    (
   $$ := node("link", _1,_2);
   )}

lnklist:
  _1 = lnkfile
    {                  ()}
| _1 = lnklist _2 = COMMA _3 = lnkfile
    {                         ( $$ := node("lnklist", _1,_2,_3); )}

lnkfile:
  _1 = IDENT
    {                ()}
| _1 = STRINGLIT
    {             ()}

global:
  _1 = GLOBAL _2 = idlist
    {                       ( $$ := node("global", _1,_2) )}

record:
  _1 = RECORD _2 = IDENT _3 = LPAREN _4 = fldlist _5 = RPAREN
    {                                            (
		$$ := node("record", _1,_2,_3,_4,_5)
		)}

fldlist:
  
    {          ( $$ := EmptyNode )}
| _1 = idlist
    {          ()}

meth:
  _1 = ABSTRACT _2 = methhead
    {                         (
                $$ := node("method", _1,_2)
                )}
| _1 = methhead _2 = SEMICOL _3 = locals _4 = initial _5 = procbody _6 = END
    {                                                       (
                $$ := node("method", _1,_2,_3,_4,_5,_6)
                )}

prochead:
  _1 = PROCEDURE _2 = IDENT _3 = LPAREN _4 = arglist _5 = RPAREN
    {                                                (
   $$ := node("procedure", _1,_2,_3,_4,_5)
	)}

methhead:
  _1 = METHOD _2 = IDENT _3 = LPAREN _4 = arglist _5 = RPAREN
    {                                             (
   $$ := node("methhead", _1,_2,_3,_4,_5)
	)}

arglist:
  
    {          ( $$ := EmptyNode )}
| _1 = parmlist
    {            ( $$ := node("arglist", _1) )}
| _1 = parmlist _2 = LBRACK _3 = RBRACK
    {                          ( $$ := node("arglist", _1,_2,_3) )}

idlist:
  _1 = IDENT
    {               ()}
| _1 = idlist _2 = COMMA _3 = IDENT
    {                      ( $$ := node("idlist", _1,_2,_3) )}

parmlist:
  _1 = arg
    {              ()}
| _1 = parmlist _2 = COMMA _3 = arg
    {                      ( $$ := node("parmlist", _1,_2,_3) )}

arg:
  _1 = IDENT
    {            ()}
| _1 = IDENT _2 = COLON _3 = IDENT
    {                     ( $$ := node("arg2", _1, _2, _3) )}
| _1 = IDENT _2 = COLON _3 = literal
    {                       ( $$ := node("arg3", _1, _2, _3) )}
| _1 = IDENT _2 = COLON _3 = IDENT _4 = COLON _5 = literal
    {                                   ( $$ := node("arg4", _1, _2, _3, _4, _5) )}

locals:
  
    {         ( $$ := EmptyNode;)}
| _1 = locals _2 = retention _3 = idlist _4 = SEMICOL
    {                                   ( $$ := node("locals2", _1,_2,_3,";");)}

retention:
  _1 = LOCAL
    {          ()}
| _1 = STATIC
    {          ()}

initial:
  
    {          ( $$ := EmptyNode )}
| _1 = ICONINITIAL _2 = expr _3 = SEMICOL
    {                            (
	   $$ := node("initial", _1, _2,";")
	      )}

procbody:
  
    {          ( $$ := EmptyNode )}
| _1 = nexpr _2 = SEMICOL _3 = procbody
    {                          ( $$ := node("procbody", _1,";",_3);)}

nexpr:
  
    {        ( $$ := EmptyNode )}
| _1 = expr
    {        ()}

expr:
  _1 = expr1a
    {              ()}
| _1 = expr _2 = AND _3 = expr1a
    {                   ( $$ := node("and", _1,_2,_3) )}
| _1 = error
    {                ( $$ := node("error"); )}

expr1a:
  _1 = expr1
    {               ()}
| _1 = expr1a _2 = QMARK _3 = expr1
    {                      ( $$ := node("binques", _1,_2,_3);)}

expr1:
  _1 = expr2
    {              ()}
| _1 = expr2 _2 = SWAP _3 = expr1
    {                         ( $$ := node("swap", _1,_2,_3);)}
| _1 = expr2 _2 = ASSIGN _3 = expr1
    {                         ( $$ := node("assign", _1,_2,_3);)}
| _1 = expr2 _2 = REVSWAP _3 = expr1
    {                         ( $$ := node("revswap", _1,_2,_3);)}
| _1 = expr2 _2 = REVASSIGN _3 = expr1
    {                         ( $$ := node("revasgn", _1,_2,_3);)}
| _1 = expr2 _2 = AUGCONCAT _3 = expr1
    {                         ( $$ := node("augcat", _1,_2,_3);)}
| _1 = expr2 _2 = AUGLCONCAT _3 = expr1
    {                          ( $$ := node("auglcat", _1,_2,_3);)}
| _1 = expr2 _2 = AUGDIFF _3 = expr1
    {                         ( $$ := node("Bdiffa", _1,_2,_3);)}
| _1 = expr2 _2 = AUGUNION _3 = expr1
    {                         ( $$ := node("Buniona", _1,_2,_3);)}
| _1 = expr2 _2 = AUGPLUS _3 = expr1
    {                         ( $$ := node("Bplusa", _1,_2,_3);)}
| _1 = expr2 _2 = AUGMINUS _3 = expr1
    {                         ( $$ := node("Bminusa", _1,_2,_3);)}
| _1 = expr2 _2 = AUGSTAR _3 = expr1
    {                         ( $$ := node("Bstara", _1,_2,_3);)}
| _1 = expr2 _2 = AUGINTER _3 = expr1
    {                         ( $$ := node("Bintera", _1,_2,_3);)}
| _1 = expr2 _2 = AUGSLASH _3 = expr1
    {                         ( $$ := node("Bslasha", _1,_2,_3);)}
| _1 = expr2 _2 = AUGMOD _3 = expr1
    {                         ( $$ := node("Bmoda", _1,_2,_3);)}
| _1 = expr2 _2 = AUGCARET _3 = expr1
    {                         ( $$ := node("Bcareta", _1,_2,_3);)}
| _1 = expr2 _2 = AUGNMEQ _3 = expr1
    {                         ( $$ := node("Baugeq", _1,_2,_3);)}
| _1 = expr2 _2 = AUGEQUIV _3 = expr1
    {                         ( $$ := node("Baugeqv", _1,_2,_3);)}
| _1 = expr2 _2 = AUGNMGE _3 = expr1
    {                         ( $$ := node("Baugge", _1,_2,_3);)}
| _1 = expr2 _2 = AUGNMGT _3 = expr1
    {                         ( $$ := node("Bauggt", _1,_2,_3);)}
| _1 = expr2 _2 = AUGNMLE _3 = expr1
    {                         ( $$ := node("Baugle", _1,_2,_3);)}
| _1 = expr2 _2 = AUGNMLT _3 = expr1
    {                         ( $$ := node("Bauglt", _1,_2,_3);)}
| _1 = expr2 _2 = AUGNMNE _3 = expr1
    {                         ( $$ := node("Baugne", _1,_2,_3);)}
| _1 = expr2 _2 = AUGNEQUIV _3 = expr1
    {                         ( $$ := node("Baugneqv", _1,_2,_3);)}
| _1 = expr2 _2 = AUGSEQ _3 = expr1
    {                         ( $$ := node("Baugseq", _1,_2,_3);)}
| _1 = expr2 _2 = AUGSGE _3 = expr1
    {                         ( $$ := node("Baugsge", _1,_2,_3);)}
| _1 = expr2 _2 = AUGSGT _3 = expr1
    {                         ( $$ := node("Baugsgt", _1,_2,_3);)}
| _1 = expr2 _2 = AUGSLE _3 = expr1
    {                         ( $$ := node("Baugsle", _1,_2,_3);)}
| _1 = expr2 _2 = AUGSLT _3 = expr1
    {                         ( $$ := node("Baugslt", _1,_2,_3);)}
| _1 = expr2 _2 = AUGSNE _3 = expr1
    {                         ( $$ := node("Baugsne", _1,_2,_3);)}
| _1 = expr2 _2 = AUGQMARK _3 = expr1
    {                         ( $$ := node("Baugques", _1,_2,_3);)}
| _1 = expr2 _2 = AUGAND _3 = expr1
    {                         ( $$ := node("Baugamper", _1,_2,_3);)}
| _1 = expr2 _2 = AUGAT _3 = expr1
    {                         ( $$ := node("Baugact", _1,_2,_3);)}

expr2:
  _1 = expr3
    {              ()}
| _1 = expr2 _2 = TO _3 = expr3
    {                  ( $$ := node("to", _1,_2,_3);)}
| _1 = expr2 _2 = TO _3 = expr3 _4 = BY _5 = expr3
    {                           ( $$ := node("toby", _1,_2,_3,_4,_5);)}

expr3:
  _1 = expr4
    {              ()}
| _1 = expr4 _2 = BAR _3 = expr3
    {                   ($$ := node(BAR, _1,_2,_3);)}

expr4:
  _1 = expr5
    {              ()}
| _1 = expr4 _2 = SEQ _3 = expr5
    {                   ( $$ := node("Bseq", _1,_2,_3);)}
| _1 = expr4 _2 = SGE _3 = expr5
    {                   ( $$ := node("Bsge", _1,_2,_3);)}
| _1 = expr4 _2 = SGT _3 = expr5
    {                   ( $$ := node("Bsgt", _1,_2,_3);)}
| _1 = expr4 _2 = SLE _3 = expr5
    {                   ( $$ := node("Bsle", _1,_2,_3);)}
| _1 = expr4 _2 = SLT _3 = expr5
    {                   ( $$ := node("Bslt", _1,_2,_3);)}
| _1 = expr4 _2 = SNE _3 = expr5
    {                   ( $$ := node("Bsne", _1,_2,_3);)}
| _1 = expr4 _2 = NMEQ _3 = expr5
    {                    ( $$ := node("Beq", _1,_2,_3);)}
| _1 = expr4 _2 = NMGE _3 = expr5
    {                    ( $$ := node("Bge", _1,_2,_3);)}
| _1 = expr4 _2 = NMGT _3 = expr5
    {                    ( $$ := node("Bgt", _1,_2,_3);)}
| _1 = expr4 _2 = NMLE _3 = expr5
    {                    ( $$ := node("Ble", _1,_2,_3);)}
| _1 = expr4 _2 = NMLT _3 = expr5
    {                    ( $$ := node("Blt", _1,_2,_3);)}
| _1 = expr4 _2 = NMNE _3 = expr5
    {                    ( $$ := node("Bne", _1,_2,_3);)}
| _1 = expr4 _2 = EQUIV _3 = expr5
    {                     ( $$ := node("Beqv", _1,_2,_3);)}
| _1 = expr4 _2 = NEQUIV _3 = expr5
    {                      ( $$ := node("Bneqv", _1,_2,_3);)}

expr5:
  _1 = expr6
    {              ()}
| _1 = expr5 _2 = CONCAT _3 = expr6
    {                      ( $$ := node("Bcat", _1,_2,_3);)}
| _1 = expr5 _2 = LCONCAT _3 = expr6
    {                       ( $$ := node("Blcat", _1,_2,_3);)}

expr6:
  _1 = expr7
    {              ()}
| _1 = expr6 _2 = PLUS _3 = expr7
    {                    ( $$ := node("Bplus", _1,_2,_3);)}
| _1 = expr6 _2 = DIFF _3 = expr7
    {                    ( $$ := node("Bdiff", _1,_2,_3);)}
| _1 = expr6 _2 = UNION _3 = expr7
    {                     ( $$ := node("Bunion", _1,_2,_3);)}
| _1 = expr6 _2 = MINUS _3 = expr7
    {                     ( $$ := node("Bminus", _1,_2,_3);)}

expr7:
  _1 = expr8
    {              ()}
| _1 = expr7 _2 = STAR _3 = expr8
    {                    ( $$ := node("Bstar", _1,_2,_3);)}
| _1 = expr7 _2 = INTER _3 = expr8
    {                     ( $$ := node("Binter", _1,_2,_3);)}
| _1 = expr7 _2 = SLASH _3 = expr8
    {                     ( $$ := node("Bslash", _1,_2,_3);)}
| _1 = expr7 _2 = MOD _3 = expr8
    {                   ( $$ := node("Bmod", _1,_2,_3);)}

expr8:
  _1 = expr9
    {              ()}
| _1 = expr9 _2 = CARET _3 = expr8
    {                     ( $$ := node("Bcaret", _1,_2,_3);)}

expr9:
  _1 = expr10
    {               ()}
| _1 = expr9 _2 = BACKSLASH _3 = expr10
    {                          ( $$ := node("limit", _1,_2,_3);)}
| _1 = expr9 _2 = AT _3 = expr10
    {                   ( $$ := node("at", _1,_2,_3) )}
| _1 = expr9 _2 = BANG _3 = expr10
    {                     ( $$ := node("apply", _1,_2,_3);)}

expr10:
  _1 = expr11
    {                ()}
| _1 = AT _2 = expr10
    {             ( $$ := node("uat", _1,_2);)}
| _1 = NOT _2 = expr10
    {              ( $$ := node("unot", _1,_2);)}
| _1 = BAR _2 = expr10
    {              ( $$ := node("ubar", _1,_2);)}
| _1 = CONCAT _2 = expr10
    {                 ( $$ := node("uconcat", _1,_2);)}
| _1 = LCONCAT _2 = expr10
    {                  ( $$ := node("ulconcat", _1,_2);)}
| _1 = DOT _2 = expr10
    {              ( $$ := node("udot", _1,_2);)}
| _1 = BANG _2 = expr10
    {               ( $$ := node("ubang", _1,_2);)}
| _1 = DIFF _2 = expr10
    {               ( $$ := node("udiff", _1,_2);)}
| _1 = PLUS _2 = expr10
    {               ( $$ := node("uplus", _1,_2);)}
| _1 = STAR _2 = expr10
    {               ( $$ := node("ustar", _1,_2);)}
| _1 = SLASH _2 = expr10
    {                ( $$ := node("uslash", _1,_2);)}
| _1 = CARET _2 = expr10
    {                ( $$ := node("ucaret", _1,_2);)}
| _1 = INTER _2 = expr10
    {                ( $$ := node("uinter", _1,_2);)}
| _1 = TILDE _2 = expr10
    {                ( $$ := node("utilde", _1,_2);)}
| _1 = MINUS _2 = expr10
    {                ( $$ := node("uminus", _1,_2);)}
| _1 = NMEQ _2 = expr10
    {               ( $$ := node("unumeq", _1,_2);)}
| _1 = NMNE _2 = expr10
    {               ( $$ := node("unumne", _1,_2);)}
| _1 = SEQ _2 = expr10
    {              ( $$ := node("ulexeq", _1,_2);)}
| _1 = SNE _2 = expr10
    {              ( $$ := node("ulexne", _1,_2);)}
| _1 = EQUIV _2 = expr10
    {                ( $$ := node("uequiv", _1,_2);)}
| _1 = UNION _2 = expr10
    {                ( $$ := node("uunion", _1,_2);)}
| _1 = QMARK _2 = expr10
    {                ( $$ := node("uqmark", _1,_2);)}
| _1 = NEQUIV _2 = expr10
    {                 ( $$ := node("unotequiv", _1,_2);)}
| _1 = BACKSLASH _2 = expr10
    {                    ( $$ := node("ubackslash", _1,_2);)}

expr11:
  _1 = literal
    {          ()}
| _1 = section
    {          ()}
| _1 = return
    {          ()}
| _1 = kif
    {          ()}
| _1 = case
    {          ()}
| _1 = kwhile
    {          ()}
| _1 = until
    {          ()}
| _1 = every
    {          ()}
| _1 = repeat
    {          ()}
| _1 = CREATE _2 = expr
    {               ( $$ := node("create", _1,_2);)}
| _1 = IDENT
    {         ()}
| _1 = NEXT
    {        ( $$ := node("Next", _1);)}
| _1 = BREAK _2 = nexpr
    {               ( $$ := node("Break", _1,_2);)}
| _1 = LPAREN _2 = exprlist _3 = RPAREN
    {                          ( $$ := node("Paren", _1,_2,_3);)}
| _1 = LBRACE _2 = compound _3 = RBRACE
    {                          ( $$ := node("Brace", _1,_2,_3);)}
| _1 = LBRACK _2 = exprlist _3 = RBRACK
    {                          ( $$ := node("Brack", _1,_2,_3);)}
| _1 = expr11 _2 = LBRACK _3 = exprlist _4 = RBRACK
    {                                 ( $$ := node("Subscript", _1,_2,_3,_4);)}
| _1 = expr11 _2 = LBRACE _3 = RBRACE
    {                        ( $$ := node("Pdco0", _1,_2,_3);)}
| _1 = expr11 _2 = LBRACE _3 = pdcolist _4 = RBRACE
    {                                 ( $$ := node("Pdco1", _1,_2,_3,_4);)}
| _1 = expr11 _2 = LPAREN _3 = exprlist _4 = RPAREN
    {                                 ( $$ := node("invoke", _1,_2,_3,_4);)}
| _1 = expr11 _2 = DOLLAR _3 = INITIALLY _4 = LPAREN _5 = exprlist _6 = RPAREN
    {                                                  (
	   $$ := node("invocationnode", _1,_2,_3,_4,_5,_6)
	   )}
| _1 = expr11 _2 = DOLLAR _3 = IDENT _4 = LPAREN _5 = exprlist _6 = RPAREN
    {                                              (
	   $$ := node("invocationnode",_1,_2,_3,_4,_5,_6)
	   )}
| _1 = expr11 _2 = DOLLAR _3 = IDENT _4 = DOT _5 = INITIALLY _6 = LPAREN _7 = exprlist _8 = RPAREN
    {                                                            (
	   $$ := node("invocationnode",_1,_2,_3,_4,_5,_6,_7,_8)
	   )}
| _1 = expr11 _2 = DOLLAR _3 = IDENT _4 = DOT _5 = IDENT _6 = LPAREN _7 = exprlist _8 = RPAREN
    {                                                        (
	   $$ := node("invocationnode",_1,_2,_3,_4,_5,_6,_7,_8)
	   )}
| _1 = expr11 _2 = DOT _3 = IDENT
    {                    ( $$ := node("field",_1,_2,_3);)}
| _1 = expr11 _2 = DOT _3 = packageref
    {                                ( $$ := node("field",_1,_2,_3); )}
| _1 = packageref
    {                     ()}
| _1 = expr11 _2 = DOT _3 = INITIALLY
    {                        ( $$ := node("field",_1,_2,_3);)}
| _1 = AND _2 = FAIL
    {            ( $$ := node("keyword",_1,_2);)}
| _1 = AND _2 = IDENT
    {             ( $$ := node("keyword",_1,_2);)}

kwhile:
  _1 = WHILE _2 = expr
    {                    ( $$ := node("While0", _1,_2);)}
| _1 = WHILE _2 = expr _3 = DO _4 = expr
    {                      ( $$ := node("While1", _1,_2,_3,_4);)}

until:
  _1 = UNTIL _2 = expr
    {                   ( $$ := node("until", _1,_2);)}
| _1 = UNTIL _2 = expr _3 = DO _4 = expr
    {                      ( $$ := node("until1", _1,_2,_3,_4);)}

every:
  _1 = EVERY _2 = expr
    {                   ( $$ := node("every", _1,_2);)}
| _1 = EVERY _2 = expr _3 = DO _4 = expr
    {                      ( $$ := node("every1", _1,_2,_3,_4);)}

repeat:
  _1 = REPEAT _2 = expr
    {                     ( $$ := node("repeat", _1,_2);)}

return:
  _1 = FAIL
    {              ()}
| _1 = RETURN _2 = nexpr
    {                ( $$ := node("return", _1, _2);)}
| _1 = SUSPEND _2 = nexpr
    {                 ( $$ := node("Suspend0", _1,_2);)}
| _1 = SUSPEND _2 = expr _3 = DO _4 = expr
    {                               ( $$ := node("Suspend1", _1,_2,_3,_4);)}

kif:
  _1 = IF _2 = expr _3 = THEN _4 = expr
    {                        ( $$ := node("If0", _1,_2,_3,_4);)}
| _1 = IF _2 = expr _3 = THEN _4 = expr _5 = ELSE _6 = expr
    {                               ( $$ := node("If1", _1,_2,_3,_4,_5,_6);)}

case:
  _1 = CASE _2 = expr _3 = OF _4 = LBRACE _5 = caselist _6 = RBRACE
    {                                           ( $$ := node("Case", _1,_2,_3,_4,_5,_6);)}

caselist:
  _1 = cclause
    {                  ()}
| _1 = caselist _2 = SEMICOL _3 = cclause
    {                            ( $$ := node("Caselist", _1,";",_3);)}

cclause:
  _1 = DEFAULT _2 = COLON _3 = expr
    {                             ( $$ := node("cclause0", _1,_2,_3);)}
| _1 = expr _2 = COLON _3 = expr
    {                   ( $$ := node("cclause1", _1,_2,_3);)}

exprlist:
  _1 = nexpr
    {                ()}
| _1 = exprlist _2 = COMMA _3 = nexpr
    {                        (
	   if type(_1)=="treenode" & (_1.label=="elst1") then {
	      $$ := _1; put($$.children, _2, _3)
	      }
	   else
	      $$ := node("elst1", _1,_2,_3)
	   )}

pdcolist:
  _1 = nexpr
    {                ( $$ := node("pdcolist0", _1) )}
| _1 = pdcolist _2 = COMMA _3 = nexpr
    {                        ( $$ := node("pdcolist1", _1,_2,_3); )}

literal:
  _1 = INTLIT
    {           ()}
| _1 = REALLIT
    {           ()}
| _1 = STRINGLIT
    {           ()}
| _1 = CSETLIT
    {           ()}

section:
  _1 = expr11 _2 = LBRACK _3 = expr _4 = sectop _5 = expr _6 = RBRACK
    {                                                ( $$ := node("section", _1,_2,_3,_4,_5,_6);)}

sectop:
  _1 = COLON
    {          ()}
| _1 = PCOLON
    {          ()}
| _1 = MCOLON
    {          ()}

compound:
  _1 = nexpr
    {                ()}
| _1 = nexpr _2 = SEMICOL _3 = compound
    {                          ( $$ := node("compound", _1,";",_3);)}

proc:
  _1 = prochead _2 = SEMICOL _3 = locals _4 = initial _5 = procbody _6 = END
    {                                                       (
		$$ := node("proc", _1,_2,_3,_4,_5,_6)
	)}

%%


