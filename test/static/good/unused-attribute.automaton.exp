State 0:
## Known stack suffix:
##
## LR(1) items:
main' -> . main [ # ]
## Transitions:
-- On A shift to state 1
-- On main shift to state 6
## Reductions:

State 1:
## Known stack suffix:
## A
## LR(1) items:
main -> A . B list(C) [ # ]
## Transitions:
-- On B shift to state 2
## Reductions:

State 2:
## Known stack suffix:
## A B
## LR(1) items:
main -> A B . list(C) [ # ]
## Transitions:
-- On C shift to state 3
-- On list(C) shift to state 5
## Reductions:
-- On #
--   reduce production list(C) ->
** End-of-stream conflict on C
**   There is a tension between
**   (1) reducing production list(C) ->
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 3:
## Known stack suffix:
## C
## LR(1) items:
list(C) -> C . list(C) [ # ]
## Transitions:
-- On C shift to state 3
-- On list(C) shift to state 4
## Reductions:
-- On #
--   reduce production list(C) ->
** End-of-stream conflict on C
**   There is a tension between
**   (1) reducing production list(C) ->
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 4:
## Known stack suffix:
## C list(C)
## LR(1) items:
list(C) -> C list(C) . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production list(C) -> C list(C)

State 5:
## Known stack suffix:
## A B list(C)
## LR(1) items:
main -> A B list(C) . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production main -> A B list(C)

State 6:
## Known stack suffix:
## main
## LR(1) items:
main' -> main . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept main

