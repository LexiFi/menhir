State 0:
## Known stack suffix:
##
## LR(1) items:
main' -> . main [ # ]
## Transitions:
-- On INT shift to state 1
-- On main shift to state 2
-- On expression shift to state 3
## Reductions:

State 1:
## Known stack suffix:
## INT
## LR(1) items:
expression -> INT . [ TIMES PLUS EOF ]
## Transitions:
## Reductions:
-- On TIMES reduce production expression -> INT
-- On PLUS reduce production expression -> INT
-- On EOF reduce production expression -> INT

State 2:
## Known stack suffix:
## main
## LR(1) items:
main' -> main . [ # ]
## Transitions:
## Reductions:
-- On # accept main

State 3:
## Known stack suffix:
## expression
## LR(1) items:
expression -> expression . op expression [ TIMES PLUS EOF ]
main -> expression . EOF [ # ]
## Transitions:
-- On TIMES shift to state 4
-- On PLUS shift to state 5
-- On EOF shift to state 6
-- On op shift to state 7
## Reductions:

State 4:
## Known stack suffix:
## TIMES
## LR(1) items:
op -> TIMES . [ INT ]
## Transitions:
## Reductions:
-- On INT reduce production op -> TIMES

State 5:
## Known stack suffix:
## PLUS
## LR(1) items:
op -> PLUS . [ INT ]
## Transitions:
## Reductions:
-- On INT reduce production op -> PLUS

State 6:
## Known stack suffix:
## expression EOF
## LR(1) items:
main -> expression EOF . [ # ]
## Transitions:
## Reductions:
-- On # reduce production main -> expression EOF

State 7:
## Known stack suffix:
## expression op
## LR(1) items:
expression -> expression op . expression [ TIMES PLUS EOF ]
## Transitions:
-- On INT shift to state 1
-- On expression shift to state 8
## Reductions:

State 8:
## Known stack suffix:
## expression op expression
## LR(1) items:
expression -> expression . op expression [ TIMES PLUS EOF ]
expression -> expression op expression . [ TIMES PLUS EOF ]
## Transitions:
-- On TIMES shift to state 4
-- On PLUS shift to state 5
-- On op shift to state 7
## Reductions:
-- On TIMES reduce production expression -> expression op expression
-- On PLUS reduce production expression -> expression op expression
-- On EOF reduce production expression -> expression op expression
** Conflict on TIMES PLUS

