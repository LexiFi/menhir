State 0:
main' -> . main [ # ]
-- On INT shift to state 1
-- On main shift to state 2
-- On expression shift to state 3

State 1:
expression -> INT . [ TIMES PLUS EOF ]
-- On TIMES reduce production expression -> INT
-- On PLUS reduce production expression -> INT
-- On EOF reduce production expression -> INT

State 2:
main' -> main . [ # ]
-- On # accept main

State 3:
expression -> expression . op expression [ TIMES PLUS EOF ]
main -> expression . EOF [ # ]
-- On TIMES shift to state 4
-- On PLUS shift to state 5
-- On EOF shift to state 6
-- On op shift to state 7

State 4:
op -> TIMES . [ INT ]
-- On INT reduce production op -> TIMES

State 5:
op -> PLUS . [ INT ]
-- On INT reduce production op -> PLUS

State 6:
main -> expression EOF . [ # ]
-- On # reduce production main -> expression EOF

State 7:
expression -> expression op . expression [ TIMES PLUS EOF ]
-- On INT shift to state 1
-- On expression shift to state 8

State 8:
expression -> expression . op expression [ TIMES PLUS EOF ]
expression -> expression op expression . [ TIMES PLUS EOF ]
-- On TIMES shift to state 4
-- On PLUS shift to state 5
-- On op shift to state 7
-- On EOF reduce production expression -> expression op expression
** Conflict on TIMES PLUS

