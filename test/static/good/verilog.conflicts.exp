
** Conflict (reduce/reduce) in state 1498.
** Token involved: LCURLY
** This state is reached from start after reading:

MODULE ID modParE modPortsE SEMICOLON SPECIFY specify_block IF LPAREN LCURLY LCURLY exprNoStr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
modprimDecl 
moduleDecl 
MODULE ID modParE modPortsE SEMICOLON modItemListE ENDMODULE 
                                      modItem modItemListE 
                                      SPECIFY specify_block ENDSPECIFY 
                                              specify_block specify_item 
                                                            path_declaration 
                                                            state_dependent_path_declaration SEMICOLON 
                                                            IF LPAREN module_path_expression RPAREN simple_path_declaration 
                                                                      module_path_primary 
                                                                      (?)

** In state 1498, looking ahead at LCURLY, reducing production
** constant_expression -> exprNoStr 
** is permitted because of the following sub-derivation:

LCURLY module_path_expression module_path_concatenation_4 RCURLY 
       module_path_primary 
       LCURLY constant_expression LCURLY module_path_expression module_path_concatenation_4 RCURLY RCURLY // lookahead token appears
              exprNoStr . 

** In state 1498, looking ahead at LCURLY, reducing production
** expr -> exprNoStr 
** is permitted because of the following sub-derivation:

LCURLY constant_expression LCURLY module_path_expression module_path_concatenation_4 RCURLY RCURLY 
       exprNoStr 
       LCURLY constExpr LCURLY cateList RCURLY RCURLY // lookahead token appears
              expr // lookahead token is inherited
              exprNoStr . 

** Conflict (reduce/reduce) in state 1497.
** Token involved: LCURLY
** This state is reached from start after reading:

MODULE ID modParE modPortsE SEMICOLON SPECIFY specify_block IF LPAREN LCURLY LCURLY floatnum 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
modprimDecl 
moduleDecl 
MODULE ID modParE modPortsE SEMICOLON modItemListE ENDMODULE 
                                      modItem modItemListE 
                                      SPECIFY specify_block ENDSPECIFY 
                                              specify_block specify_item 
                                                            path_declaration 
                                                            state_dependent_path_declaration SEMICOLON 
                                                            IF LPAREN module_path_expression RPAREN simple_path_declaration 
                                                                      module_path_primary 
                                                                      (?)

** In state 1497, looking ahead at LCURLY, reducing production
** constant_expression -> floatnum 
** is permitted because of the following sub-derivation:

LCURLY module_path_expression module_path_concatenation_4 RCURLY 
       module_path_primary 
       LCURLY constant_expression LCURLY module_path_expression module_path_concatenation_4 RCURLY RCURLY // lookahead token appears
              floatnum . 

** In state 1497, looking ahead at LCURLY, reducing production
** expr -> floatnum 
** is permitted because of the following sub-derivation:

LCURLY constant_expression LCURLY module_path_expression module_path_concatenation_4 RCURLY RCURLY 
       exprNoStr 
       LCURLY constExpr LCURLY cateList RCURLY RCURLY // lookahead token appears
              expr // lookahead token is inherited
              floatnum . 

** Conflict (reduce/reduce) in state 1496.
** Tokens involved: VBAR RPAREN RCURLY QUERY P_XNOR P_OROR P_NOTEQUAL P_EQUAL P_ANDAND LBRACK COMMA CARET AMPERSAND
** The following explanations concentrate on token VBAR.
** This state is reached from start after reading:

MODULE ID modParE modPortsE SEMICOLON SPECIFY specify_block IF LPAREN LCURLY identifier 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
modprimDecl 
moduleDecl 
MODULE ID modParE modPortsE SEMICOLON modItemListE ENDMODULE 
                                      modItem modItemListE 
                                      SPECIFY specify_block ENDSPECIFY 
                                              specify_block specify_item 
                                                            path_declaration 
                                                            state_dependent_path_declaration SEMICOLON 
                                                            IF LPAREN module_path_expression RPAREN simple_path_declaration 
                                                                      module_path_primary 
                                                                      (?)

** In state 1496, looking ahead at VBAR, reducing production
** idArrayed -> identifier 
** is permitted because of the following sub-derivation:

LCURLY constant_expression LCURLY module_path_expression module_path_concatenation_4 RCURLY RCURLY 
       exprNoStr 
       expr VBAR expr // lookahead token appears
       exprNoStr // lookahead token is inherited
       varRefDotBit // lookahead token is inherited
       idDotted // lookahead token is inherited
       idArrayed // lookahead token is inherited
       identifier . 

** In state 1496, looking ahead at VBAR, reducing production
** module_path_primary -> identifier 
** is permitted because of the following sub-derivation:

LCURLY module_path_expression module_path_concatenation_4 RCURLY 
       module_path_expression binary_module_path_operator module_path_expression // lookahead token appears because binary_module_path_operator can begin with VBAR
       module_path_primary // lookahead token is inherited
       identifier . 

** Conflict (shift/reduce) in state 1491.
** Tokens involved: VBAR QUERY P_XNOR P_OROR P_NXOR P_NOTEQUAL P_EQUAL P_ANDAND CARET AMPERSAND
** The following explanations concentrate on token VBAR.
** This state is reached from start after reading:

MODULE ID modParE modPortsE SEMICOLON SPECIFY specify_block IF LPAREN module_path_expression binary_module_path_operator module_path_expression 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
modprimDecl 
moduleDecl 
MODULE ID modParE modPortsE SEMICOLON modItemListE ENDMODULE 
                                      modItem modItemListE 
                                      SPECIFY specify_block ENDSPECIFY 
                                              specify_block specify_item 
                                                            path_declaration 
                                                            state_dependent_path_declaration SEMICOLON 
                                                            IF LPAREN module_path_expression RPAREN simple_path_declaration 
                                                                      (?)

** In state 1491, looking ahead at VBAR, shifting is permitted
** because of the following sub-derivation:

module_path_expression binary_module_path_operator module_path_expression 
                                                   module_path_expression binary_module_path_operator module_path_expression 
                                                                          . VBAR 

** In state 1491, looking ahead at VBAR, reducing production
** module_path_expression -> module_path_expression binary_module_path_operator module_path_expression 
** is permitted because of the following sub-derivation:

module_path_expression binary_module_path_operator module_path_expression // lookahead token appears because binary_module_path_operator can begin with VBAR
module_path_expression binary_module_path_operator module_path_expression . 

** Conflict (shift/reduce) in state 1487.
** Token involved: P_NXOR
** This state is reached from start after reading:

MODULE ID modParE modPortsE SEMICOLON SPECIFY specify_block IF LPAREN module_path_expression QUERY module_path_expression COLON module_path_expression 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
modprimDecl 
moduleDecl 
MODULE ID modParE modPortsE SEMICOLON modItemListE ENDMODULE 
                                      modItem modItemListE 
                                      SPECIFY specify_block ENDSPECIFY 
                                              specify_block specify_item 
                                                            path_declaration 
                                                            state_dependent_path_declaration SEMICOLON 
                                                            IF LPAREN module_path_expression RPAREN simple_path_declaration 
                                                                      (?)

** In state 1487, looking ahead at P_NXOR, shifting is permitted
** because of the following sub-derivation:

module_path_expression QUERY module_path_expression COLON module_path_expression 
                                                          module_path_expression binary_module_path_operator module_path_expression 
                                                                                 . P_NXOR 

** In state 1487, looking ahead at P_NXOR, reducing production
** module_path_expression -> module_path_expression QUERY module_path_expression COLON module_path_expression 
** is permitted because of the following sub-derivation:

module_path_expression binary_module_path_operator module_path_expression // lookahead token appears because binary_module_path_operator can begin with P_NXOR
module_path_expression QUERY module_path_expression COLON module_path_expression . 

** Conflict (shift/reduce) in state 1465.
** Tokens involved: OCTNUM LPAREN LCURLY INTNUM ID HEXNUM DECNUM BINNUM
** The following explanations concentrate on token OCTNUM.
** This state is reached from start after reading:

MODULE ID modParE modPortsE SEMICOLON SPECIFY specify_block IF LPAREN LCURLY AMPERSAND 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
modprimDecl 
moduleDecl 
MODULE ID modParE modPortsE SEMICOLON modItemListE ENDMODULE 
                                      modItem modItemListE 
                                      SPECIFY specify_block ENDSPECIFY 
                                              specify_block specify_item 
                                                            path_declaration 
                                                            state_dependent_path_declaration SEMICOLON 
                                                            IF LPAREN module_path_expression RPAREN simple_path_declaration 
                                                                      module_path_primary 
                                                                      (?)

** In state 1465, looking ahead at OCTNUM, shifting is permitted
** because of the following sub-derivation:

LCURLY constant_expression LCURLY module_path_expression module_path_concatenation_4 RCURLY RCURLY 
       exprNoStr 
       AMPERSAND expr 
                 exprNoStr 
                 . OCTNUM 

** In state 1465, looking ahead at OCTNUM, reducing production
** unary_module_path_operator -> AMPERSAND 
** is permitted because of the following sub-derivation:

LCURLY module_path_expression module_path_concatenation_4 RCURLY 
       unary_module_path_operator module_path_primary // lookahead token appears because module_path_primary can begin with OCTNUM
       AMPERSAND . 

** Conflict (reduce/reduce) in state 1464.
** Tokens involved: VBAR RPAREN RCURLY QUERY P_XNOR P_OROR P_NOTEQUAL P_EQUAL P_ANDAND COMMA CARET AMPERSAND
** The following explanations concentrate on token VBAR.
** This state is reached from start after reading:

MODULE ID modParE modPortsE SEMICOLON SPECIFY specify_block IF LPAREN LCURLY BINNUM 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
modprimDecl 
moduleDecl 
MODULE ID modParE modPortsE SEMICOLON modItemListE ENDMODULE 
                                      modItem modItemListE 
                                      SPECIFY specify_block ENDSPECIFY 
                                              specify_block specify_item 
                                                            path_declaration 
                                                            state_dependent_path_declaration SEMICOLON 
                                                            IF LPAREN module_path_expression RPAREN simple_path_declaration 
                                                                      module_path_primary 
                                                                      (?)

** In state 1464, looking ahead at VBAR, reducing production
** exprNoStr -> BINNUM 
** is permitted because of the following sub-derivation:

LCURLY constant_expression LCURLY module_path_expression module_path_concatenation_4 RCURLY RCURLY 
       exprNoStr 
       expr VBAR expr // lookahead token appears
       exprNoStr // lookahead token is inherited
       BINNUM . 

** In state 1464, looking ahead at VBAR, reducing production
** number -> BINNUM 
** is permitted because of the following sub-derivation:

LCURLY module_path_expression module_path_concatenation_4 RCURLY 
       module_path_expression binary_module_path_operator module_path_expression // lookahead token appears because binary_module_path_operator can begin with VBAR
       module_path_primary // lookahead token is inherited
       number // lookahead token is inherited
       BINNUM . 

** Conflict (shift/reduce) in state 1463.
** Tokens involved: OCTNUM LPAREN LCURLY INTNUM ID HEXNUM DECNUM BINNUM
** The following explanations concentrate on token OCTNUM.
** This state is reached from start after reading:

MODULE ID modParE modPortsE SEMICOLON SPECIFY specify_block IF LPAREN LCURLY CARET 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
modprimDecl 
moduleDecl 
MODULE ID modParE modPortsE SEMICOLON modItemListE ENDMODULE 
                                      modItem modItemListE 
                                      SPECIFY specify_block ENDSPECIFY 
                                              specify_block specify_item 
                                                            path_declaration 
                                                            state_dependent_path_declaration SEMICOLON 
                                                            IF LPAREN module_path_expression RPAREN simple_path_declaration 
                                                                      module_path_primary 
                                                                      (?)

** In state 1463, looking ahead at OCTNUM, shifting is permitted
** because of the following sub-derivation:

LCURLY constant_expression LCURLY module_path_expression module_path_concatenation_4 RCURLY RCURLY 
       exprNoStr 
       CARET expr 
             exprNoStr 
             . OCTNUM 

** In state 1463, looking ahead at OCTNUM, reducing production
** unary_module_path_operator -> CARET 
** is permitted because of the following sub-derivation:

LCURLY module_path_expression module_path_concatenation_4 RCURLY 
       unary_module_path_operator module_path_primary // lookahead token appears because module_path_primary can begin with OCTNUM
       CARET . 

** Conflict (reduce/reduce) in state 1462.
** Tokens involved: VBAR RPAREN RCURLY QUERY P_XNOR P_OROR P_NOTEQUAL P_EQUAL P_ANDAND COMMA CARET AMPERSAND
** The following explanations concentrate on token VBAR.
** This state is reached from start after reading:

MODULE ID modParE modPortsE SEMICOLON SPECIFY specify_block IF LPAREN LCURLY DECNUM 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
modprimDecl 
moduleDecl 
MODULE ID modParE modPortsE SEMICOLON modItemListE ENDMODULE 
                                      modItem modItemListE 
                                      SPECIFY specify_block ENDSPECIFY 
                                              specify_block specify_item 
                                                            path_declaration 
                                                            state_dependent_path_declaration SEMICOLON 
                                                            IF LPAREN module_path_expression RPAREN simple_path_declaration 
                                                                      module_path_primary 
                                                                      (?)

** In state 1462, looking ahead at VBAR, reducing production
** exprNoStr -> DECNUM 
** is permitted because of the following sub-derivation:

LCURLY constant_expression LCURLY module_path_expression module_path_concatenation_4 RCURLY RCURLY 
       exprNoStr 
       expr VBAR expr // lookahead token appears
       exprNoStr // lookahead token is inherited
       DECNUM . 

** In state 1462, looking ahead at VBAR, reducing production
** number -> DECNUM 
** is permitted because of the following sub-derivation:

LCURLY module_path_expression module_path_concatenation_4 RCURLY 
       module_path_expression binary_module_path_operator module_path_expression // lookahead token appears because binary_module_path_operator can begin with VBAR
       module_path_primary // lookahead token is inherited
       number // lookahead token is inherited
       DECNUM . 

** Conflict (reduce/reduce) in state 1461.
** Tokens involved: VBAR RPAREN RCURLY QUERY P_XNOR P_OROR P_NOTEQUAL P_EQUAL P_ANDAND COMMA CARET AMPERSAND
** The following explanations concentrate on token VBAR.
** This state is reached from start after reading:

MODULE ID modParE modPortsE SEMICOLON SPECIFY specify_block IF LPAREN LCURLY HEXNUM 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
modprimDecl 
moduleDecl 
MODULE ID modParE modPortsE SEMICOLON modItemListE ENDMODULE 
                                      modItem modItemListE 
                                      SPECIFY specify_block ENDSPECIFY 
                                              specify_block specify_item 
                                                            path_declaration 
                                                            state_dependent_path_declaration SEMICOLON 
                                                            IF LPAREN module_path_expression RPAREN simple_path_declaration 
                                                                      module_path_primary 
                                                                      (?)

** In state 1461, looking ahead at VBAR, reducing production
** exprNoStr -> HEXNUM 
** is permitted because of the following sub-derivation:

LCURLY constant_expression LCURLY module_path_expression module_path_concatenation_4 RCURLY RCURLY 
       exprNoStr 
       expr VBAR expr // lookahead token appears
       exprNoStr // lookahead token is inherited
       HEXNUM . 

** In state 1461, looking ahead at VBAR, reducing production
** number -> HEXNUM 
** is permitted because of the following sub-derivation:

LCURLY module_path_expression module_path_concatenation_4 RCURLY 
       module_path_expression binary_module_path_operator module_path_expression // lookahead token appears because binary_module_path_operator can begin with VBAR
       module_path_primary // lookahead token is inherited
       number // lookahead token is inherited
       HEXNUM . 

** Conflict (reduce/reduce) in state 1460.
** Tokens involved: VBAR TIMES RPAREN RCURLY QUERY P_XNOR P_WILDNOTEQUAL P_WILDEQUAL P_SSRIGHT P_SRIGHT P_SLEFT P_POW P_OROR P_NOTEQUAL P_NOR P_NAND P_LTE P_GTE P_EQUAL P_CASENOTEQUAL P_CASEEQUAL P_ANDAND PLUS MODULO MINUS LESS LCURLY GREATER DIVIDE COMMA CARET AMPERSAND
** The following explanations concentrate on token VBAR.
** This state is reached from start after reading:

MODULE ID modParE modPortsE SEMICOLON SPECIFY specify_block IF LPAREN LCURLY INTNUM 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
modprimDecl 
moduleDecl 
MODULE ID modParE modPortsE SEMICOLON modItemListE ENDMODULE 
                                      modItem modItemListE 
                                      SPECIFY specify_block ENDSPECIFY 
                                              specify_block specify_item 
                                                            path_declaration 
                                                            state_dependent_path_declaration SEMICOLON 
                                                            IF LPAREN module_path_expression RPAREN simple_path_declaration 
                                                                      module_path_primary 
                                                                      (?)

** In state 1460, looking ahead at VBAR, reducing production
** exprNoStr -> INTNUM 
** is permitted because of the following sub-derivation:

LCURLY constant_expression LCURLY module_path_expression module_path_concatenation_4 RCURLY RCURLY 
       exprNoStr 
       expr VBAR expr // lookahead token appears
       exprNoStr // lookahead token is inherited
       INTNUM . 

** In state 1460, looking ahead at VBAR, reducing production
** floatnum -> INTNUM 
** is permitted because of the following sub-derivation:

LCURLY constant_expression LCURLY module_path_expression module_path_concatenation_4 RCURLY RCURLY 
       exprNoStr 
       expr VBAR expr // lookahead token appears
       floatnum // lookahead token is inherited
       INTNUM . 

** In state 1460, looking ahead at VBAR, reducing production
** number -> INTNUM 
** is permitted because of the following sub-derivation:

LCURLY module_path_expression module_path_concatenation_4 RCURLY 
       module_path_expression binary_module_path_operator module_path_expression // lookahead token appears because binary_module_path_operator can begin with VBAR
       module_path_primary // lookahead token is inherited
       number // lookahead token is inherited
       INTNUM . 

** Conflict (reduce/reduce) in state 1457.
** Tokens involved: VBAR RPAREN RCURLY QUERY P_XNOR P_OROR P_NOTEQUAL P_EQUAL P_ANDAND COMMA CARET AMPERSAND
** The following explanations concentrate on token VBAR.
** This state is reached from start after reading:

MODULE ID modParE modPortsE SEMICOLON SPECIFY specify_block IF LPAREN LCURLY OCTNUM 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
modprimDecl 
moduleDecl 
MODULE ID modParE modPortsE SEMICOLON modItemListE ENDMODULE 
                                      modItem modItemListE 
                                      SPECIFY specify_block ENDSPECIFY 
                                              specify_block specify_item 
                                                            path_declaration 
                                                            state_dependent_path_declaration SEMICOLON 
                                                            IF LPAREN module_path_expression RPAREN simple_path_declaration 
                                                                      module_path_primary 
                                                                      (?)

** In state 1457, looking ahead at VBAR, reducing production
** exprNoStr -> OCTNUM 
** is permitted because of the following sub-derivation:

LCURLY constant_expression LCURLY module_path_expression module_path_concatenation_4 RCURLY RCURLY 
       exprNoStr 
       expr VBAR expr // lookahead token appears
       exprNoStr // lookahead token is inherited
       OCTNUM . 

** In state 1457, looking ahead at VBAR, reducing production
** number -> OCTNUM 
** is permitted because of the following sub-derivation:

LCURLY module_path_expression module_path_concatenation_4 RCURLY 
       module_path_expression binary_module_path_operator module_path_expression // lookahead token appears because binary_module_path_operator can begin with VBAR
       module_path_primary // lookahead token is inherited
       number // lookahead token is inherited
       OCTNUM . 

** Conflict (shift/reduce) in state 1456.
** Tokens involved: OCTNUM LPAREN LCURLY INTNUM ID HEXNUM DECNUM BINNUM
** The following explanations concentrate on token OCTNUM.
** This state is reached from start after reading:

MODULE ID modParE modPortsE SEMICOLON SPECIFY specify_block IF LPAREN LCURLY PLING 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
modprimDecl 
moduleDecl 
MODULE ID modParE modPortsE SEMICOLON modItemListE ENDMODULE 
                                      modItem modItemListE 
                                      SPECIFY specify_block ENDSPECIFY 
                                              specify_block specify_item 
                                                            path_declaration 
                                                            state_dependent_path_declaration SEMICOLON 
                                                            IF LPAREN module_path_expression RPAREN simple_path_declaration 
                                                                      module_path_primary 
                                                                      (?)

** In state 1456, looking ahead at OCTNUM, shifting is permitted
** because of the following sub-derivation:

LCURLY constant_expression LCURLY module_path_expression module_path_concatenation_4 RCURLY RCURLY 
       exprNoStr 
       PLING expr 
             exprNoStr 
             . OCTNUM 

** In state 1456, looking ahead at OCTNUM, reducing production
** unary_module_path_operator -> PLING 
** is permitted because of the following sub-derivation:

LCURLY module_path_expression module_path_concatenation_4 RCURLY 
       unary_module_path_operator module_path_primary // lookahead token appears because module_path_primary can begin with OCTNUM
       PLING . 

** Conflict (shift/reduce) in state 1455.
** Tokens involved: OCTNUM LPAREN LCURLY INTNUM ID HEXNUM DECNUM BINNUM
** The following explanations concentrate on token OCTNUM.
** This state is reached from start after reading:

MODULE ID modParE modPortsE SEMICOLON SPECIFY specify_block IF LPAREN LCURLY P_NAND 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
modprimDecl 
moduleDecl 
MODULE ID modParE modPortsE SEMICOLON modItemListE ENDMODULE 
                                      modItem modItemListE 
                                      SPECIFY specify_block ENDSPECIFY 
                                              specify_block specify_item 
                                                            path_declaration 
                                                            state_dependent_path_declaration SEMICOLON 
                                                            IF LPAREN module_path_expression RPAREN simple_path_declaration 
                                                                      module_path_primary 
                                                                      (?)

** In state 1455, looking ahead at OCTNUM, shifting is permitted
** because of the following sub-derivation:

LCURLY constant_expression LCURLY module_path_expression module_path_concatenation_4 RCURLY RCURLY 
       exprNoStr 
       P_NAND expr 
              exprNoStr 
              . OCTNUM 

** In state 1455, looking ahead at OCTNUM, reducing production
** unary_module_path_operator -> P_NAND 
** is permitted because of the following sub-derivation:

LCURLY module_path_expression module_path_concatenation_4 RCURLY 
       unary_module_path_operator module_path_primary // lookahead token appears because module_path_primary can begin with OCTNUM
       P_NAND . 

** Conflict (shift/reduce) in state 1454.
** Tokens involved: OCTNUM LPAREN LCURLY INTNUM ID HEXNUM DECNUM BINNUM
** The following explanations concentrate on token OCTNUM.
** This state is reached from start after reading:

MODULE ID modParE modPortsE SEMICOLON SPECIFY specify_block IF LPAREN LCURLY P_XNOR 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
modprimDecl 
moduleDecl 
MODULE ID modParE modPortsE SEMICOLON modItemListE ENDMODULE 
                                      modItem modItemListE 
                                      SPECIFY specify_block ENDSPECIFY 
                                              specify_block specify_item 
                                                            path_declaration 
                                                            state_dependent_path_declaration SEMICOLON 
                                                            IF LPAREN module_path_expression RPAREN simple_path_declaration 
                                                                      module_path_primary 
                                                                      (?)

** In state 1454, looking ahead at OCTNUM, shifting is permitted
** because of the following sub-derivation:

LCURLY constant_expression LCURLY module_path_expression module_path_concatenation_4 RCURLY RCURLY 
       exprNoStr 
       P_XNOR expr 
              exprNoStr 
              . OCTNUM 

** In state 1454, looking ahead at OCTNUM, reducing production
** unary_module_path_operator -> P_XNOR 
** is permitted because of the following sub-derivation:

LCURLY module_path_expression module_path_concatenation_4 RCURLY 
       unary_module_path_operator module_path_primary // lookahead token appears because module_path_primary can begin with OCTNUM
       P_XNOR . 

** Conflict (shift/reduce) in state 1453.
** Tokens involved: OCTNUM LPAREN LCURLY INTNUM ID HEXNUM DECNUM BINNUM
** The following explanations concentrate on token OCTNUM.
** This state is reached from start after reading:

MODULE ID modParE modPortsE SEMICOLON SPECIFY specify_block IF LPAREN LCURLY TILDE 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
modprimDecl 
moduleDecl 
MODULE ID modParE modPortsE SEMICOLON modItemListE ENDMODULE 
                                      modItem modItemListE 
                                      SPECIFY specify_block ENDSPECIFY 
                                              specify_block specify_item 
                                                            path_declaration 
                                                            state_dependent_path_declaration SEMICOLON 
                                                            IF LPAREN module_path_expression RPAREN simple_path_declaration 
                                                                      module_path_primary 
                                                                      (?)

** In state 1453, looking ahead at OCTNUM, shifting is permitted
** because of the following sub-derivation:

LCURLY constant_expression LCURLY module_path_expression module_path_concatenation_4 RCURLY RCURLY 
       exprNoStr 
       TILDE expr 
             exprNoStr 
             . OCTNUM 

** In state 1453, looking ahead at OCTNUM, reducing production
** unary_module_path_operator -> TILDE 
** is permitted because of the following sub-derivation:

LCURLY module_path_expression module_path_concatenation_4 RCURLY 
       unary_module_path_operator module_path_primary // lookahead token appears because module_path_primary can begin with OCTNUM
       TILDE . 

** Conflict (shift/reduce) in state 1452.
** Tokens involved: OCTNUM LPAREN LCURLY INTNUM ID HEXNUM DECNUM BINNUM
** The following explanations concentrate on token OCTNUM.
** This state is reached from start after reading:

MODULE ID modParE modPortsE SEMICOLON SPECIFY specify_block IF LPAREN LCURLY VBAR 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
modprimDecl 
moduleDecl 
MODULE ID modParE modPortsE SEMICOLON modItemListE ENDMODULE 
                                      modItem modItemListE 
                                      SPECIFY specify_block ENDSPECIFY 
                                              specify_block specify_item 
                                                            path_declaration 
                                                            state_dependent_path_declaration SEMICOLON 
                                                            IF LPAREN module_path_expression RPAREN simple_path_declaration 
                                                                      module_path_primary 
                                                                      (?)

** In state 1452, looking ahead at OCTNUM, shifting is permitted
** because of the following sub-derivation:

LCURLY constant_expression LCURLY module_path_expression module_path_concatenation_4 RCURLY RCURLY 
       exprNoStr 
       VBAR expr 
            exprNoStr 
            . OCTNUM 

** In state 1452, looking ahead at OCTNUM, reducing production
** unary_module_path_operator -> VBAR 
** is permitted because of the following sub-derivation:

LCURLY module_path_expression module_path_concatenation_4 RCURLY 
       unary_module_path_operator module_path_primary // lookahead token appears because module_path_primary can begin with OCTNUM
       VBAR . 

** Conflict (shift/reduce) in state 1350.
** Tokens involved: PLUS MINUS
** The following explanations concentrate on token PLUS.
** This state is reached from start after reading:

MODULE ID modParE modPortsE SEMICOLON SPECIFY specify_block LPAREN identifier LBRACK constant_range_expression RBRACK 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
modprimDecl 
moduleDecl 
MODULE ID modParE modPortsE SEMICOLON modItemListE ENDMODULE 
                                      modItem modItemListE 
                                      SPECIFY specify_block ENDSPECIFY 
                                              specify_block specify_item 
                                                            path_declaration 
                                                            simple_path_declaration SEMICOLON 
                                                            (?)

** In state 1350, looking ahead at PLUS, reducing production
** list_of_path_inputs_3 -> 
** is permitted because of the following sub-derivation:

LPAREN identifier LBRACK constant_range_expression RBRACK list_of_path_inputs_3 polarity_operator P_ASTGT specify_output_terminal_descriptor list_of_path_outputs_3 RPAREN EQUALS path_delay_value // lookahead token appears because polarity_operator can begin with PLUS
                                                          . 

** In state 1350, looking ahead at PLUS, shifting is permitted
** because of the following sub-derivation:

LPAREN identifier LBRACK constant_range_expression RBRACK polarity_operator P_EQGT specify_output_terminal_descriptor RPAREN EQUALS path_delay_value 
                                                          . PLUS 

** Conflict (shift/reduce) in state 1297.
** Tokens involved: PLUS MINUS
** The following explanations concentrate on token PLUS.
** This state is reached from start after reading:

MODULE ID modParE modPortsE SEMICOLON SPECIFY specify_block LPAREN identifier 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
modprimDecl 
moduleDecl 
MODULE ID modParE modPortsE SEMICOLON modItemListE ENDMODULE 
                                      modItem modItemListE 
                                      SPECIFY specify_block ENDSPECIFY 
                                              specify_block specify_item 
                                                            path_declaration 
                                                            simple_path_declaration SEMICOLON 
                                                            (?)

** In state 1297, looking ahead at PLUS, reducing production
** list_of_path_inputs_3 -> 
** is permitted because of the following sub-derivation:

LPAREN identifier list_of_path_inputs_3 polarity_operator P_ASTGT specify_output_terminal_descriptor list_of_path_outputs_3 RPAREN EQUALS path_delay_value // lookahead token appears because polarity_operator can begin with PLUS
                  . 

** In state 1297, looking ahead at PLUS, shifting is permitted
** because of the following sub-derivation:

LPAREN identifier polarity_operator P_EQGT specify_output_terminal_descriptor RPAREN EQUALS path_delay_value 
                  . PLUS 

** Conflict (reduce/reduce) in state 1095.
** Tokens involved: P_ANDANDAND COMMA
** The following explanations concentrate on token P_ANDANDAND.
** This state is reached from start after reading:

MODULE ID modParE modPortsE SEMICOLON SPECIFY specify_block NOCHANGE LPAREN identifier LBRACK constant_range_expression RBRACK 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
modprimDecl 
moduleDecl 
MODULE ID modParE modPortsE SEMICOLON modItemListE ENDMODULE 
                                      modItem modItemListE 
                                      SPECIFY specify_block ENDSPECIFY 
                                              specify_block specify_item 
                                                            system_timing_check 
                                                            NOCHANGE LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON // lookahead token appears
                                                                            (?)

** In state 1095, looking ahead at P_ANDANDAND, reducing production
** specify_output_terminal_descriptor_3 -> LBRACK constant_range_expression RBRACK 
** is permitted because of the following sub-derivation:

specify_output_terminal_descriptor // lookahead token is inherited
identifier specify_output_terminal_descriptor_3 // lookahead token is inherited
           LBRACK constant_range_expression RBRACK . 

** In state 1095, looking ahead at P_ANDANDAND, reducing production
** specify_terminal_descriptor -> identifier LBRACK constant_range_expression RBRACK 
** is permitted because of the following sub-derivation:

identifier LBRACK constant_range_expression RBRACK . 

** Conflict (reduce/reduce) in state 1092.
** Tokens involved: P_ANDANDAND COMMA
** The following explanations concentrate on token P_ANDANDAND.
** This state is reached from start after reading:

MODULE ID modParE modPortsE SEMICOLON SPECIFY specify_block NOCHANGE LPAREN identifier 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
modprimDecl 
moduleDecl 
MODULE ID modParE modPortsE SEMICOLON modItemListE ENDMODULE 
                                      modItem modItemListE 
                                      SPECIFY specify_block ENDSPECIFY 
                                              specify_block specify_item 
                                                            system_timing_check 
                                                            NOCHANGE LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON // lookahead token appears
                                                                            (?)

** In state 1092, looking ahead at P_ANDANDAND, reducing production
** specify_output_terminal_descriptor_3 -> 
** is permitted because of the following sub-derivation:

specify_output_terminal_descriptor // lookahead token is inherited
identifier specify_output_terminal_descriptor_3 // lookahead token is inherited
           . 

** In state 1092, looking ahead at P_ANDANDAND, reducing production
** specify_terminal_descriptor -> identifier 
** is permitted because of the following sub-derivation:

identifier . 

** Conflict (shift/reduce) in state 1077.
** Tokens involved: P_NOTEQUAL P_EQUAL P_CASENOTEQUAL P_CASEEQUAL
** The following explanations concentrate on token P_NOTEQUAL.
** This state is reached from start after reading:

MODULE ID modParE modPortsE SEMICOLON SPECIFY specify_block NOCHANGE LPAREN specify_terminal_descriptor P_ANDANDAND expr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
modprimDecl 
moduleDecl 
MODULE ID modParE modPortsE SEMICOLON modItemListE ENDMODULE 
                                      modItem modItemListE 
                                      SPECIFY specify_block ENDSPECIFY 
                                              specify_block specify_item 
                                                            system_timing_check 
                                                            NOCHANGE LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                    scalar_timing_check_condition 
                                                                                                                    (?)

** In state 1077, looking ahead at P_NOTEQUAL, shifting is permitted
** because of the following sub-derivation:

expression 
expr 
exprNoStr 
expr . P_NOTEQUAL expr 

** In state 1077, looking ahead at P_NOTEQUAL, reducing production
** expression -> expr 
** is permitted because of the following sub-derivation:

expression P_NOTEQUAL scalar_constant // lookahead token appears
expr . 

** Conflict (shift/reduce) in state 1053.
** Tokens involved: RPAREN P_NOTEQUAL P_EQUAL P_CASENOTEQUAL P_CASEEQUAL
** The following explanations concentrate on token RPAREN.
** This state is reached from start after reading:

MODULE ID modParE modPortsE SEMICOLON SPECIFY specify_block NOCHANGE LPAREN specify_terminal_descriptor P_ANDANDAND LPAREN expr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
modprimDecl 
moduleDecl 
MODULE ID modParE modPortsE SEMICOLON modItemListE ENDMODULE 
                                      modItem modItemListE 
                                      SPECIFY specify_block ENDSPECIFY 
                                              specify_block specify_item 
                                                            system_timing_check 
                                                            NOCHANGE LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON 
                                                                                                                    (?)

** In state 1053, looking ahead at RPAREN, shifting is permitted
** because of the following sub-derivation:

scalar_timing_check_condition 
expression 
expr 
exprNoStr 
LPAREN expr . RPAREN 

** In state 1053, looking ahead at RPAREN, reducing production
** expression -> expr 
** is permitted because of the following sub-derivation:

LPAREN scalar_timing_check_condition RPAREN // lookahead token appears
       expression // lookahead token is inherited
       expr . 

** Conflict (reduce/reduce) in state 1034.
** Tokens involved: RPAREN COMMA
** The following explanations concentrate on token COMMA.
** This state is reached from start after reading:

MODULE ID modParE modPortsE SEMICOLON SPECIFY specify_block NOCHANGE LPAREN specify_terminal_descriptor P_ANDANDAND TILDE expr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
modprimDecl 
moduleDecl 
MODULE ID modParE modPortsE SEMICOLON modItemListE ENDMODULE 
                                      modItem modItemListE 
                                      SPECIFY specify_block ENDSPECIFY 
                                              specify_block specify_item 
                                                            system_timing_check 
                                                            NOCHANGE LPAREN specify_terminal_descriptor P_ANDANDAND timing_check_condition COMMA specify_terminal_descriptor COMMA mintypmax_expression COMMA mintypmax_expression RPAREN SEMICOLON // lookahead token appears
                                                                                                                    scalar_timing_check_condition // lookahead token is inherited
                                                                                                                    (?)

** In state 1034, looking ahead at COMMA, reducing production
** exprNoStr -> TILDE expr 
** is permitted because of the following sub-derivation:

expression // lookahead token is inherited
expr // lookahead token is inherited
exprNoStr // lookahead token is inherited
TILDE expr . 

** In state 1034, looking ahead at COMMA, reducing production
** expression -> expr 
** is permitted because of the following sub-derivation:

TILDE expression // lookahead token is inherited
      expr . 

** Conflict (reduce/reduce) in state 253.
** Tokens involved: VBAR TIMES SEMICOLON RPAREN RCURLY RBRACK QUERY P_XNOR P_WILDNOTEQUAL P_WILDEQUAL P_SSRIGHT P_SRIGHT P_SLEFT P_POW P_PLUSCOLON P_OROR P_NOTEQUAL P_NOR P_NAND P_MINUSCOLON P_LTE P_GTE P_EQUAL P_CASENOTEQUAL P_CASEEQUAL P_ANDAND PLUS MODULO MINUS LESS LCURLY GREATER DIVIDE COMMA COLON CARET AMPERSAND
** The following explanations concentrate on token VBAR.
** This state is reached from start after reading:

PRIMITIVE ID modParE LPAREN identifier LBRACK MINUS FLOATNUM 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
modprimDecl 
primDecl 
PRIMITIVE ID modParE modPortsE SEMICOLON primItemList ENDPRIMITIVE 
                     LPAREN PortList RPAREN 
                            Port 
                            identifier PortRangeE 
                                       LBRACK constExpr RBRACK 
                                              expr 
                                              exprNoStr 
                                              expr VBAR expr // lookahead token appears
                                              (?)

** In state 253, looking ahead at VBAR, reducing production
** floatnum -> MINUS FLOATNUM 
** is permitted because of the following sub-derivation:

floatnum // lookahead token is inherited
MINUS FLOATNUM . 

** In state 253, looking ahead at VBAR, reducing production
** floatnum -> FLOATNUM 
** is permitted because of the following sub-derivation:

exprNoStr // lookahead token is inherited
MINUS expr // lookahead token is inherited
      floatnum // lookahead token is inherited
      FLOATNUM . 

** Conflict (reduce/reduce) in state 252.
** Tokens involved: VBAR TIMES SEMICOLON RPAREN RCURLY RBRACK QUERY P_XNOR P_WILDNOTEQUAL P_WILDEQUAL P_SSRIGHT P_SRIGHT P_SLEFT P_POW P_PLUSCOLON P_OROR P_NOTEQUAL P_NOR P_NAND P_MINUSCOLON P_LTE P_GTE P_EQUAL P_CASENOTEQUAL P_CASEEQUAL P_ANDAND PLUS MODULO MINUS LESS LCURLY GREATER DIVIDE COMMA COLON CARET AMPERSAND
** The following explanations concentrate on token VBAR.
** This state is reached from start after reading:

PRIMITIVE ID modParE LPAREN identifier LBRACK MINUS INTNUM 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
modprimDecl 
primDecl 
PRIMITIVE ID modParE modPortsE SEMICOLON primItemList ENDPRIMITIVE 
                     LPAREN PortList RPAREN 
                            Port 
                            identifier PortRangeE 
                                       LBRACK constExpr RBRACK 
                                              expr 
                                              exprNoStr 
                                              expr VBAR expr // lookahead token appears
                                              (?)

** In state 252, looking ahead at VBAR, reducing production
** exprNoStr -> INTNUM 
** is permitted because of the following sub-derivation:

exprNoStr // lookahead token is inherited
MINUS expr // lookahead token is inherited
      exprNoStr // lookahead token is inherited
      INTNUM . 

** In state 252, looking ahead at VBAR, reducing production
** floatnum -> MINUS INTNUM 
** is permitted because of the following sub-derivation:

floatnum // lookahead token is inherited
MINUS INTNUM . 

** In state 252, looking ahead at VBAR, reducing production
** floatnum -> INTNUM 
** is permitted because of the following sub-derivation:

exprNoStr // lookahead token is inherited
MINUS expr // lookahead token is inherited
      floatnum // lookahead token is inherited
      INTNUM . 

** Conflict (reduce/reduce) in state 47.
** Tokens involved: VBAR TIMES SEMICOLON RPAREN RCURLY RBRACK QUERY P_XNOR P_WILDNOTEQUAL P_WILDEQUAL P_SSRIGHT P_SRIGHT P_SLEFT P_POW P_PLUSCOLON P_OROR P_NOTEQUAL P_NOR P_NAND P_MINUSCOLON P_LTE P_GTE P_EQUAL P_CASENOTEQUAL P_CASEEQUAL P_ANDAND PLUS MODULO MINUS LESS LCURLY GREATER DIVIDE COMMA COLON CARET AMPERSAND
** The following explanations concentrate on token VBAR.
** This state is reached from start after reading:

PRIMITIVE ID modParE LPAREN identifier LBRACK INTNUM 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

start 
modprimDecl 
primDecl 
PRIMITIVE ID modParE modPortsE SEMICOLON primItemList ENDPRIMITIVE 
                     LPAREN PortList RPAREN 
                            Port 
                            identifier PortRangeE 
                                       LBRACK constExpr RBRACK 
                                              expr 
                                              exprNoStr 
                                              expr VBAR expr // lookahead token appears
                                              (?)

** In state 47, looking ahead at VBAR, reducing production
** exprNoStr -> INTNUM 
** is permitted because of the following sub-derivation:

exprNoStr // lookahead token is inherited
INTNUM . 

** In state 47, looking ahead at VBAR, reducing production
** floatnum -> INTNUM 
** is permitted because of the following sub-derivation:

floatnum // lookahead token is inherited
INTNUM . 
