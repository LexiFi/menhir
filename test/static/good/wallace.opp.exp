File "wallace.mly", line 57, characters 7-11:
Warning: the token GIVE is unused.
File "wallace.mly", line 73, characters 7-9:
Warning: the token OF is unused.
File "wallace.mly", line 91, characters 7-9:
Warning: the token TO is unused.
File "wallace.mly", line 99, characters 7-12:
Warning: the token WHERE is unused.
%{

open Types
open Type_expr
open Interpreter

%}
%start phrase
%token ABS
%token AND
%token ARROW
%token AS
%token ASSIGN
%token AT
%token ATAT
%token BANG
%token BAR
%token BARRBRACKET
%token BOOL
%token CHAR
%token <char> CHARCONST
%token COERCE
%token COERCEBACK
%token COLON
%token COMMA
%token <string> CONSTRUCTOR
%token DOT
%token ELSE
%token EQUAL
%token FALSE
%token FLOAT
%token <float> FLOATCONST
%token FUN
%token FUNCTION
%token GIVE
%token <string> IDENT
%token IF
%token IMPLIES
%token IN
%token INCLUDE
%token INT
%token <int> INTCONST
%token LBRACE
%token LBRACKET
%token LBRACKETBAR
%token LEFTARROW
%token LET
%token LPAREN
%token MATCH
%token MAYBE
%token MINUS
%token MISSING
%token OF
%token PERCENT
%token PLUS
%token PRE
%token QUOTE
%token RAISE
%token RAISES
%token RBRACE
%token RBRACKET
%token REC
%token REF
%token RPAREN
%token SEMI
%token SEMISEMI
%token SHARP
%token STAR
%token STRING
%token <string> STRINGCONST
%token THEN
%token TO
%token TRUE
%token TRY
%token TYPE
%token UNDERSCORE
%token UNIT
%token VALUE
%token WHERE
%token WITH
%type <Interpreter.phrase> phrase
%%

phrase:
  _1 = SHARP _2 = IDENT
    {                             ( PhraseDirective _2 )}
| _1 = LET _2 = binding_list _3 = SEMISEMI
    {                                         ( PhraseLet(false, _2) )}
| _1 = LET _2 = REC _3 = binding_list _4 = SEMISEMI
    {                                            ( PhraseLet(true, _3) )}
| _1 = VALUE _2 = IDENT _3 = COLON _4 = type_scheme _5 = SEMISEMI
    {                                                                ( PhraseValue(_2, _4) )}
| _1 = expression _2 = SEMISEMI
    {                                    ( PhraseLet (false, [PVar "_unnamed", _1]) )}
| _1 = INCLUDE _2 = STRINGCONST
    {                                                                ( PhraseInclude _2 )}
| _1 = TYPE _2 = IDENT _3 = SEMISEMI
    {                                                                ( PhraseAbstractType (_2, []) )}
| _1 = TYPE _2 = IDENT _3 = LPAREN _4 = variance_comma_list _5 = RPAREN _6 = SEMISEMI
    {                                                                ( PhraseAbstractType (_2, _4) )}

expression:
  _1 = expression3
    {                            ( _1 )}
| _1 = FUNCTION _2 = function_match
    {                                   ( VGeneralFun _2 )}
| _1 = FUN _2 = fun_match
    {                       ( VGeneralFun _2 )}
| _1 = MATCH _2 = expression _3 = WITH _4 = function_match
    {                                           ( VApp (VGeneralFun _4, _2) )}
| _1 = LET _2 = binding_list _3 = IN _4 = expression
    {                                                    ( VLet(false, _2, _4) )}
| _1 = LET _2 = REC _3 = binding_list _4 = IN _5 = expression
    {                                                        ( VLet(true, _3, _5) )}
| _1 = REC _2 = pattern _3 = IN _4 = expression
    {                                  ( VRec (_2, _4) )}
| _1 = TRY _2 = expression _3 = WITH _4 = try_match
    {                                                                ( VGeneralTry (_2, _4) )}

expression3:
  _1 = expression2
    {                      ( _1 )}
| _1 = expression2 _2 = SEMI _3 = expression
    {                                    ( VApp(VGeneralFun [[PWildcard], _3], _1) )}

expression2:
  _1 = expression1
    {                      ( _1 )}
| _1 = IF _2 = expression1 _3 = THEN _4 = expression2 _5 = ELSE _6 = expression2
    {                                                      ( VIf (_2, _4, _6) )}
| _1 = expression1 _2 = COMMA _3 = expression2
    {                                     ( VPair (_1, _3) )}
| _1 = expression1 _2 = ASSIGN _3 = expression1
    {                                      ( VApp (VApp(VVar ":=", _1), _3) )}

expression1:
  _1 = expression0
    {                     ( _1 )}
| _1 = CONSTRUCTOR _2 = expression0
    {                               ( VConstruct (_1, _2) )}
| _1 = expression1 _2 = expression0
    {                                      ( VApp (_1, _2) )}
| _1 = RAISE _2 = expression0
    {                                                        ( VApp (VVar "raise", _2) )}
| _1 = REF _2 = expression0
    {                                                        ( VApp (VVar "ref", _2) )}

expression0:
  _1 = IDENT
    {                ( VVar _1 )}
| _1 = CONSTRUCTOR
    {                     ( VConstruct (_1, VConstant ConstUnit) )}
| _1 = constant
    {                  ( VConstant _1 )}
| _1 = LBRACKET _2 = expression _3 = COLON _4 = constrained_type _5 = RBRACKET
    {                                                        ( VUsage (_2, _4) )}
| _1 = LPAREN _2 = expression _3 = COLON _4 = type_scheme _5 = RPAREN
    {                                                ( VCast (_2, _4) )}
| _1 = LPAREN _2 = expression _3 = RPAREN
    {                                      ( _2 )}
| _1 = LBRACE _2 = label_expression_list _3 = RBRACE
    {                                          ( VRecord _2 )}
| _1 = LBRACKETBAR _2 = expr_semi_list _3 = BARRBRACKET
    {                                                        ( VVector _2 )}
| _1 = BANG _2 = expression0
    {                         ( VApp (VVar "!", _2) )}
| _1 = expression0 _2 = DOT _3 = IDENT _4 = LEFTARROW _5 = expression1
    {                                                        ( VApp (VApp (VRecordUpdate _3, _1), _5) )}
| _1 = expression0 _2 = DOT _3 = IDENT
    {                                    ( VRecordAccess (_1, _3) )}
| _1 = expression0 _2 = AT _3 = expression1
    {                                                        ( VApp (VApp (VAsymRecordConcat, _1), _3) )}
| _1 = expression0 _2 = ATAT _3 = expression1
    {                                                        ( VApp (VApp (VSymRecordConcat, _1), _3) )}

constant:
  _1 = INTCONST
    {                  ( ConstInt _1 )}
| _1 = FALSE
    {               ( ConstBool false )}
| _1 = TRUE
    {              ( ConstBool true )}
| _1 = UNIT
    {              ( ConstUnit )}
| _1 = FLOATCONST
    {                                                        ( ConstFloat _1 )}
| _1 = CHARCONST
    {                                                        ( ConstChar _1 )}
| _1 = STRINGCONST
    {                                                        ( ConstString _1 )}

label_expression:
  _1 = IDENT _2 = EQUAL _3 = expression2
    {                               ( _1, _3 )}

label_expression_list:
  
    {                      ( [] )}
| _1 = label_expression
    {                         ( [_1] )}
| _1 = label_expression _2 = SEMI _3 = label_expression_list
    {                                                 ( _1 :: _3 )}

expr_semi_list:
  
    {                                                        ( [] )}
| _1 = expression2
    {                                                        ( [_1] )}
| _1 = expression2 _2 = SEMI _3 = expr_semi_list
    {                                                        ( _1 :: _3 )}

fun_match:
  _1 = simple_pattern_list _2 = ARROW _3 = expression _4 = BAR _5 = fun_match
    {                                                       ( (_1, _3) :: _5 )}
| _1 = simple_pattern_list _2 = ARROW _3 = expression
    {                                          ( [_1, _3] )}

function_match:
  _1 = pattern _2 = ARROW _3 = expression _4 = BAR _5 = function_match
    {                                                 ( ([_1], _3) :: _5 )}
| _1 = pattern _2 = ARROW _3 = expression
    {                                ( [[_1], _3] )}

try_match:
  _1 = pattern _2 = ARROW _3 = expression _4 = BAR _5 = try_match
    {                                            ( (_1, _3) :: _5 )}
| _1 = pattern _2 = ARROW _3 = expression
    {                                ( [_1, _3] )}

simple_pattern:
  _1 = UNDERSCORE
    {                           ( PWildcard )}
| _1 = IDENT
    {               ( PVar _1 )}
| _1 = constant
    {                  ( PConstant _1 )}
| _1 = CONSTRUCTOR
    {                     ( PConstruct (_1, PConstant ConstUnit) )}
| _1 = LPAREN _2 = pattern _3 = RPAREN
    {                             ( _2 )}
| _1 = LBRACE _2 = label_pattern_list _3 = RBRACE
    {                                       ( PRecord _2 )}

pattern:
  _1 = simple_pattern
    {                                                        ( _1 )}
| _1 = pattern _2 = AS _3 = IDENT
    {                         ( PAlias (_1, _3) )}
| _1 = pattern _2 = COMMA _3 = pattern
    {                             ( PPair (_1, _3) )}
| _1 = CONSTRUCTOR _2 = simple_pattern
    {                                  ( PConstruct (_1, _2) )}
| _1 = REF _2 = simple_pattern
    {                                                        ( PRef _2 )}
| _1 = pattern _2 = BAR _3 = pattern
    {                                                        ( POr (_1, _3) )}

label_pattern:
  _1 = IDENT _2 = EQUAL _3 = pattern
    {                            ( _1, _3 )}

label_pattern_list:
  
    {                      ( [] )}
| _1 = label_pattern
    {                      ( [_1] )}
| _1 = label_pattern _2 = SEMI _3 = label_pattern_list
    {                                           ( _1 :: _3 )}

simple_pattern_list:
  _1 = simple_pattern
    {                       ( [_1] )}
| _1 = simple_pattern _2 = simple_pattern_list
    {                                         ( _1 :: _2 )}

binding_list:
  _1 = binding _2 = AND _3 = binding_list
    {                                                        ( _1 :: _3 )}
| _1 = binding
    {                                                        ( [_1] )}

binding:
  _1 = pattern _2 = EQUAL _3 = expression
    {                                       ( (_1, _3) )}
| _1 = IDENT _2 = simple_pattern_list _3 = EQUAL _4 = expression
    {                                                        ( (PVar _1, VGeneralFun [_2, _4]) )}

constrained_type:
  _1 = type1
    {                  ( _1, TEBottom, [] )}
| _1 = type1 _2 = RAISES _3 = type1
    {                                                                                ( _1, _3, [] )}
| _1 = type1 _2 = BAR _3 = LBRACE _4 = coercion_list _5 = RBRACE
    {                                                      ( _1, TEBottom, _4 )}
| _1 = type1 _2 = RAISES _3 = type1 _4 = BAR _5 = LBRACE _6 = coercion_list _7 = RBRACE
    {                                                                         ( _1, _3, _6 )}

type_scheme:
  _1 = type1
    {                  ( [], _1, TEBottom, [] )}
| _1 = type1 _2 = RAISES _3 = type1
    {                                                                                ( [], _1, _3, [] )}
| _1 = type1 _2 = BAR _3 = LBRACE _4 = coercion_list _5 = RBRACE
    {                                                      ( [], _1, TEBottom, _4 )}
| _1 = type1 _2 = RAISES _3 = type1 _4 = BAR _5 = LBRACE _6 = coercion_list _7 = RBRACE
    {                                                                         ( [], _1, _3, _6 )}
| _1 = COERCE _2 = context _3 = COERCEBACK _4 = IMPLIES _5 = type1
    {                                                ( _2, _5, TEBottom, [] )}
| _1 = COERCE _2 = context _3 = COERCEBACK _4 = IMPLIES _5 = type1 _6 = RAISES _7 = type1
    {                                                           ( _2, _5, _7, [] )}
| _1 = COERCE _2 = context _3 = COERCEBACK _4 = IMPLIES _5 = type1 _6 = BAR _7 = LBRACE _8 = coercion_list _9 = RBRACE
    {                                                                            ( _2, _5, TEBottom, _8 )}
| _1 = COERCE _2 = context _3 = COERCEBACK _4 = IMPLIES _5 = type1 _6 = RAISES _7 = type1 _8 = BAR _9 = LBRACE _10 = coercion_list _11 = RBRACE
    {                                                                                         ( _2, _5, _7, _10 )}

type_comma_list:
  _1 = type1
    {               ( [_1] )}
| _1 = type1 _2 = COMMA _3 = type_comma_list
    {                                     ( _1 :: _3 )}

type1:
  _1 = type0
    {               ( _1 )}
| _1 = type0 _2 = ARROW _3 = type1 _4 = RAISES _5 = type0
    {                                                        ( TEAbstract ("->", [_1; _5; _3]) )}

type0:
  _1 = INT
    {              ( TEAbstract("int", []) )}
| _1 = BOOL
    {              ( TEAbstract("bool", []) )}
| _1 = UNIT
    {              ( TEAbstract("unit", []) )}
| _1 = STRING
    {                                                        ( TEAbstract("string", []) )}
| _1 = CHAR
    {                                                        ( TEAbstract("char", []) )}
| _1 = FLOAT
    {                                                        ( TEAbstract("float", []) )}
| _1 = INTCONST
    {                  ( match _1 with
      	       	       	       	       	       	       	    0 -> TEBottom
							  | 1 -> TETop
							  | _ -> failwith "Unexpected integer in type expression."
							)}
| _1 = variable_leader _2 = IDENT
    {                             ( TEVar _2 )}
| _1 = type0 _2 = STAR _3 = type0
    {                         ( TEAbstract ("*", [_1; _3]) )}
| _1 = IDENT
    {                                                        ( TEAbstract (_1, []) )}
| _1 = type0 _2 = IDENT
    {                                                        ( TEAbstract (_2, [_1]) )}
| _1 = LPAREN _2 = type1 _3 = COMMA _4 = type_comma_list _5 = RPAREN _6 = IDENT
    {                                                        ( TEAbstract (_6, _2 :: _4) )}
| _1 = LPAREN _2 = type1 _3 = COMMA _4 = type_comma_list _5 = RPAREN _6 = REF
    {                                                  ( TEAbstract ("ref", _2 :: _4) )}
| _1 = LBRACE _2 = record_row _3 = RBRACE
    {                                ( TERecord (fst _2, snd _2) )}
| _1 = LBRACKET _2 = variant_row _3 = RBRACKET
    {                                    ( TEVariant (fst _2, snd _2) )}
| _1 = LPAREN _2 = type1 _3 = RPAREN
    {                            ( _2 )}

variable_leader:
  _1 = QUOTE
    {               ( () )}
| _1 = PLUS
    {              ( () )}
| _1 = MINUS
    {               ( () )}
| _1 = PERCENT
    {                 ( () )}

record_row:
  _1 = row_type
    {                  ( [], _1 )}
| _1 = IDENT _2 = COLON _3 = row_type _4 = SEMI _5 = record_row
    {                                          ( let entries, rest = _5 in (_1, _3) :: entries, rest )}

variant_row:
  _1 = row_type
    {                  ( [], _1 )}
| _1 = CONSTRUCTOR _2 = COLON _3 = row_type _4 = SEMI _5 = variant_row
    {                                                 ( let entries, rest = _5 in (_1, _3) :: entries, rest )}

row_type:
  _1 = ABS
    {              ( TEAbsent )}
| _1 = PRE _2 = type1
    {                   ( TEPresent _2 )}
| _1 = MAYBE _2 = type1
    {                                                        ( TEMaybe _2 )}
| _1 = MISSING
    {                                                        ( TEMissing )}
| _1 = type1
    {               ( _1 )}

coercion_list:
  _1 = coercion
    {                  ( _1 )}
| _1 = coercion _2 = SEMI _3 = coercion_list
    {                                   ( _1 @ _3 )}

coercion:
  _1 = type_comma_list _2 = COERCE _3 = type_comma_list
    {                                                        ( [_1, _3] )}
| _1 = type_comma_list _2 = COERCE _3 = type1 _4 = COERCE _5 = type_comma_list
    {                                                        ( [(_1, [_3]); ([_3], _5)] )}
| _1 = type1 _2 = EQUAL _3 = type1
    {                          ( [([_1], [_3]); ([_3], [_1])] )}

context:
  _1 = context_entry
    {                      ( [_1] )}
| _1 = context_entry _2 = SEMI _3 = context
    {                                  ( _1 :: _3 )}

context_entry:
  _1 = IDENT _2 = COLON _3 = type1
    {                          ( _1, _3 )}

variance_comma_list:
  _1 = variance
    {                                                        ( [_1] )}
| _1 = variance _2 = COMMA _3 = variance_comma_list
    {                                                        ( _1 :: _3 )}

variance:
  _1 = PLUS
    {                                                        ( true )}
| _1 = MINUS
    {                                                        ( false )}

%%
