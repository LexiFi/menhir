State 0:
## Known stack suffix:
##
## LR(1) items:
module1' -> . module1 [ # ]
## Transitions:
-- On LPAR shift to state 1
-- On type_def shift to state 333
-- On table shift to state 334
-- On start shift to state 335
-- On module_fields1 shift to state 336
-- On module_fields shift to state 356
-- On module_ shift to state 357
-- On module1 shift to state 359
-- On memory shift to state 338
-- On inline_module shift to state 360
-- On import shift to state 340
-- On global shift to state 342
-- On func shift to state 344
-- On export shift to state 346
-- On elem shift to state 348
-- On data shift to state 350
## Reductions:
-- On EOF
--   reduce production module_fields ->

State 1:
## Known stack suffix:
## LPAR
## LR(1) items:
data -> LPAR . DATA var offset string_list RPAR [ LPAR EOF ]
data -> LPAR . DATA offset string_list RPAR [ LPAR EOF ]
elem -> LPAR . ELEM var offset var_list RPAR [ LPAR EOF ]
elem -> LPAR . ELEM offset var_list RPAR [ LPAR EOF ]
export -> LPAR . EXPORT name export_desc RPAR [ LPAR EOF ]
func -> LPAR . FUNC bind_var_opt func_fields RPAR [ LPAR EOF ]
global -> LPAR . GLOBAL bind_var_opt global_fields RPAR [ LPAR EOF ]
import -> LPAR . IMPORT name name import_desc RPAR [ LPAR EOF ]
memory -> LPAR . MEMORY bind_var_opt memory_fields RPAR [ LPAR EOF ]
module_ -> LPAR . MODULE module_var_opt module_fields RPAR [ EOF ]
start -> LPAR . START var RPAR [ LPAR EOF ]
table -> LPAR . TABLE bind_var_opt table_fields RPAR [ LPAR EOF ]
type_def -> LPAR . TYPE type_ RPAR [ LPAR EOF ]
type_def -> LPAR . TYPE bind_var type_ RPAR [ LPAR EOF ]
## Transitions:
-- On TYPE shift to state 2
-- On TABLE shift to state 29
-- On START shift to state 62
-- On MODULE shift to state 65
-- On MEMORY shift to state 69
-- On IMPORT shift to state 84
-- On GLOBAL shift to state 117
-- On FUNC shift to state 239
-- On EXPORT shift to state 295
-- On ELEM shift to state 312
-- On DATA shift to state 325
## Reductions:

State 2:
## Known stack suffix:
## LPAR TYPE
## LR(1) items:
type_def -> LPAR TYPE . type_ RPAR [ RPAR LPAR EOF ]
type_def -> LPAR TYPE . bind_var type_ RPAR [ RPAR LPAR EOF ]
## Transitions:
-- On VAR shift to state 3
-- On LPAR shift to state 4
-- On type_ shift to state 23
-- On func_type shift to state 25
-- On bind_var shift to state 26
## Reductions:

State 3:
## Known stack suffix:
## VAR
## LR(1) items:
bind_var -> VAR . [ VALUE_TYPE UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP NAT LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ANYFUNC ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production bind_var -> VAR

State 4:
## Known stack suffix:
## LPAR
## LR(1) items:
func_type -> LPAR . FUNC func_sig RPAR [ RPAR ]
## Transitions:
-- On FUNC shift to state 5
## Reductions:

State 5:
## Known stack suffix:
## LPAR FUNC
## LR(1) items:
func_type -> LPAR FUNC . func_sig RPAR [ RPAR ]
## Transitions:
-- On LPAR shift to state 6
-- On func_sig shift to state 21
## Reductions:
-- On RPAR
--   reduce production func_sig ->

State 6:
## Known stack suffix:
## LPAR
## LR(1) items:
func_sig -> LPAR . RESULT value_type_list RPAR func_sig [ RPAR ]
func_sig -> LPAR . PARAM value_type_list RPAR func_sig [ RPAR ]
func_sig -> LPAR . PARAM bind_var VALUE_TYPE RPAR func_sig [ RPAR ]
## Transitions:
-- On RESULT shift to state 7
-- On PARAM shift to state 13
## Reductions:

State 7:
## Known stack suffix:
## LPAR RESULT
## LR(1) items:
func_sig -> LPAR RESULT . value_type_list RPAR func_sig [ RPAR ]
## Transitions:
-- On VALUE_TYPE shift to state 8
-- On value_type_list shift to state 10
## Reductions:
-- On RPAR
--   reduce production value_type_list ->

State 8:
## Known stack suffix:
## VALUE_TYPE
## LR(1) items:
value_type_list -> VALUE_TYPE . value_type_list [ RPAR ]
## Transitions:
-- On VALUE_TYPE shift to state 8
-- On value_type_list shift to state 9
## Reductions:
-- On RPAR
--   reduce production value_type_list ->

State 9:
## Known stack suffix:
## VALUE_TYPE value_type_list
## LR(1) items:
value_type_list -> VALUE_TYPE value_type_list . [ RPAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production value_type_list -> VALUE_TYPE value_type_list

State 10:
## Known stack suffix:
## LPAR RESULT value_type_list
## LR(1) items:
func_sig -> LPAR RESULT value_type_list . RPAR func_sig [ RPAR ]
## Transitions:
-- On RPAR shift to state 11
## Reductions:

State 11:
## Known stack suffix:
## LPAR RESULT value_type_list RPAR
## LR(1) items:
func_sig -> LPAR RESULT value_type_list RPAR . func_sig [ RPAR ]
## Transitions:
-- On LPAR shift to state 6
-- On func_sig shift to state 12
## Reductions:
-- On RPAR
--   reduce production func_sig ->

State 12:
## Known stack suffix:
## LPAR RESULT value_type_list RPAR func_sig
## LR(1) items:
func_sig -> LPAR RESULT value_type_list RPAR func_sig . [ RPAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production func_sig -> LPAR RESULT value_type_list RPAR func_sig

State 13:
## Known stack suffix:
## LPAR PARAM
## LR(1) items:
func_sig -> LPAR PARAM . value_type_list RPAR func_sig [ RPAR ]
func_sig -> LPAR PARAM . bind_var VALUE_TYPE RPAR func_sig [ RPAR ]
## Transitions:
-- On VAR shift to state 3
-- On VALUE_TYPE shift to state 8
-- On value_type_list shift to state 14
-- On bind_var shift to state 17
## Reductions:
-- On RPAR
--   reduce production value_type_list ->

State 14:
## Known stack suffix:
## LPAR PARAM value_type_list
## LR(1) items:
func_sig -> LPAR PARAM value_type_list . RPAR func_sig [ RPAR ]
## Transitions:
-- On RPAR shift to state 15
## Reductions:

State 15:
## Known stack suffix:
## LPAR PARAM value_type_list RPAR
## LR(1) items:
func_sig -> LPAR PARAM value_type_list RPAR . func_sig [ RPAR ]
## Transitions:
-- On LPAR shift to state 6
-- On func_sig shift to state 16
## Reductions:
-- On RPAR
--   reduce production func_sig ->

State 16:
## Known stack suffix:
## LPAR PARAM value_type_list RPAR func_sig
## LR(1) items:
func_sig -> LPAR PARAM value_type_list RPAR func_sig . [ RPAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production func_sig -> LPAR PARAM value_type_list RPAR func_sig

State 17:
## Known stack suffix:
## LPAR PARAM bind_var
## LR(1) items:
func_sig -> LPAR PARAM bind_var . VALUE_TYPE RPAR func_sig [ RPAR ]
## Transitions:
-- On VALUE_TYPE shift to state 18
## Reductions:

State 18:
## Known stack suffix:
## LPAR PARAM bind_var VALUE_TYPE
## LR(1) items:
func_sig -> LPAR PARAM bind_var VALUE_TYPE . RPAR func_sig [ RPAR ]
## Transitions:
-- On RPAR shift to state 19
## Reductions:

State 19:
## Known stack suffix:
## LPAR PARAM bind_var VALUE_TYPE RPAR
## LR(1) items:
func_sig -> LPAR PARAM bind_var VALUE_TYPE RPAR . func_sig [ RPAR ]
## Transitions:
-- On LPAR shift to state 6
-- On func_sig shift to state 20
## Reductions:
-- On RPAR
--   reduce production func_sig ->

State 20:
## Known stack suffix:
## LPAR PARAM bind_var VALUE_TYPE RPAR func_sig
## LR(1) items:
func_sig -> LPAR PARAM bind_var VALUE_TYPE RPAR func_sig . [ RPAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production func_sig -> LPAR PARAM bind_var VALUE_TYPE RPAR func_sig

State 21:
## Known stack suffix:
## LPAR FUNC func_sig
## LR(1) items:
func_type -> LPAR FUNC func_sig . RPAR [ RPAR ]
## Transitions:
-- On RPAR shift to state 22
## Reductions:

State 22:
## Known stack suffix:
## LPAR FUNC func_sig RPAR
## LR(1) items:
func_type -> LPAR FUNC func_sig RPAR . [ RPAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production func_type -> LPAR FUNC func_sig RPAR

State 23:
## Known stack suffix:
## LPAR TYPE type_
## LR(1) items:
type_def -> LPAR TYPE type_ . RPAR [ RPAR LPAR EOF ]
## Transitions:
-- On RPAR shift to state 24
## Reductions:

State 24:
## Known stack suffix:
## LPAR TYPE type_ RPAR
## LR(1) items:
type_def -> LPAR TYPE type_ RPAR . [ RPAR LPAR EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_def -> LPAR TYPE type_ RPAR

State 25:
## Known stack suffix:
## func_type
## LR(1) items:
type_ -> func_type . [ RPAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_ -> func_type

State 26:
## Known stack suffix:
## LPAR TYPE bind_var
## LR(1) items:
type_def -> LPAR TYPE bind_var . type_ RPAR [ RPAR LPAR EOF ]
## Transitions:
-- On LPAR shift to state 4
-- On type_ shift to state 27
-- On func_type shift to state 25
## Reductions:

State 27:
## Known stack suffix:
## LPAR TYPE bind_var type_
## LR(1) items:
type_def -> LPAR TYPE bind_var type_ . RPAR [ RPAR LPAR EOF ]
## Transitions:
-- On RPAR shift to state 28
## Reductions:

State 28:
## Known stack suffix:
## LPAR TYPE bind_var type_ RPAR
## LR(1) items:
type_def -> LPAR TYPE bind_var type_ RPAR . [ RPAR LPAR EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_def -> LPAR TYPE bind_var type_ RPAR

State 29:
## Known stack suffix:
## LPAR TABLE
## LR(1) items:
table -> LPAR TABLE . bind_var_opt table_fields RPAR [ RPAR LPAR EOF ]
## Transitions:
-- On VAR shift to state 3
-- On bind_var_opt shift to state 30
-- On bind_var shift to state 61
## Reductions:
-- On NAT LPAR ANYFUNC
--   reduce production bind_var_opt ->

State 30:
## Known stack suffix:
## LPAR TABLE bind_var_opt
## LR(1) items:
table -> LPAR TABLE bind_var_opt . table_fields RPAR [ RPAR LPAR EOF ]
## Transitions:
-- On NAT shift to state 31
-- On LPAR shift to state 33
-- On ANYFUNC shift to state 42
-- On table_sig shift to state 43
-- On table_fields shift to state 44
-- On limits shift to state 46
-- On inline_import shift to state 48
-- On inline_export shift to state 50
-- On elem_type shift to state 52
## Reductions:

State 31:
## Known stack suffix:
## NAT
## LR(1) items:
limits -> NAT . [ RPAR ANYFUNC ]
limits -> NAT . NAT [ RPAR ANYFUNC ]
## Transitions:
-- On NAT shift to state 32
## Reductions:
-- On RPAR ANYFUNC
--   reduce production limits -> NAT

State 32:
## Known stack suffix:
## NAT NAT
## LR(1) items:
limits -> NAT NAT . [ RPAR ANYFUNC ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production limits -> NAT NAT

State 33:
## Known stack suffix:
## LPAR
## LR(1) items:
inline_export -> LPAR . EXPORT name RPAR [ NAT LPAR ANYFUNC ]
inline_import -> LPAR . IMPORT name name RPAR [ NAT ]
## Transitions:
-- On IMPORT shift to state 34
-- On EXPORT shift to state 39
## Reductions:

State 34:
## Known stack suffix:
## LPAR IMPORT
## LR(1) items:
inline_import -> LPAR IMPORT . name name RPAR [ VALUE_TYPE RPAR NAT LPAR ]
## Transitions:
-- On STRING shift to state 35
-- On name shift to state 36
## Reductions:

State 35:
## Known stack suffix:
## STRING
## LR(1) items:
name -> STRING . [ VAR STRING RPAR LPAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production name -> STRING

State 36:
## Known stack suffix:
## LPAR IMPORT name
## LR(1) items:
inline_import -> LPAR IMPORT name . name RPAR [ VALUE_TYPE RPAR NAT LPAR ]
## Transitions:
-- On STRING shift to state 35
-- On name shift to state 37
## Reductions:

State 37:
## Known stack suffix:
## LPAR IMPORT name name
## LR(1) items:
inline_import -> LPAR IMPORT name name . RPAR [ VALUE_TYPE RPAR NAT LPAR ]
## Transitions:
-- On RPAR shift to state 38
## Reductions:

State 38:
## Known stack suffix:
## LPAR IMPORT name name RPAR
## LR(1) items:
inline_import -> LPAR IMPORT name name RPAR . [ VALUE_TYPE RPAR NAT LPAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production inline_import -> LPAR IMPORT name name RPAR

State 39:
## Known stack suffix:
## LPAR EXPORT
## LR(1) items:
inline_export -> LPAR EXPORT . name RPAR [ VALUE_TYPE UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP NAT LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ANYFUNC ]
## Transitions:
-- On STRING shift to state 35
-- On name shift to state 40
## Reductions:

State 40:
## Known stack suffix:
## LPAR EXPORT name
## LR(1) items:
inline_export -> LPAR EXPORT name . RPAR [ VALUE_TYPE UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP NAT LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ANYFUNC ]
## Transitions:
-- On RPAR shift to state 41
## Reductions:

State 41:
## Known stack suffix:
## LPAR EXPORT name RPAR
## LR(1) items:
inline_export -> LPAR EXPORT name RPAR . [ VALUE_TYPE UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP NAT LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ANYFUNC ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production inline_export -> LPAR EXPORT name RPAR

State 42:
## Known stack suffix:
## ANYFUNC
## LR(1) items:
elem_type -> ANYFUNC . [ RPAR LPAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production elem_type -> ANYFUNC

State 43:
## Known stack suffix:
## table_sig
## LR(1) items:
table_fields -> table_sig . [ RPAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production table_fields -> table_sig

State 44:
## Known stack suffix:
## LPAR TABLE bind_var_opt table_fields
## LR(1) items:
table -> LPAR TABLE bind_var_opt table_fields . RPAR [ RPAR LPAR EOF ]
## Transitions:
-- On RPAR shift to state 45
## Reductions:

State 45:
## Known stack suffix:
## LPAR TABLE bind_var_opt table_fields RPAR
## LR(1) items:
table -> LPAR TABLE bind_var_opt table_fields RPAR . [ RPAR LPAR EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production table -> LPAR TABLE bind_var_opt table_fields RPAR

State 46:
## Known stack suffix:
## limits
## LR(1) items:
table_sig -> limits . elem_type [ RPAR ]
## Transitions:
-- On ANYFUNC shift to state 42
-- On elem_type shift to state 47
## Reductions:

State 47:
## Known stack suffix:
## limits elem_type
## LR(1) items:
table_sig -> limits elem_type . [ RPAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production table_sig -> limits elem_type

State 48:
## Known stack suffix:
## inline_import
## LR(1) items:
table_fields -> inline_import . table_sig [ RPAR ]
## Transitions:
-- On NAT shift to state 31
-- On table_sig shift to state 49
-- On limits shift to state 46
## Reductions:

State 49:
## Known stack suffix:
## inline_import table_sig
## LR(1) items:
table_fields -> inline_import table_sig . [ RPAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production table_fields -> inline_import table_sig

State 50:
## Known stack suffix:
## inline_export
## LR(1) items:
table_fields -> inline_export . table_fields [ RPAR ]
## Transitions:
-- On NAT shift to state 31
-- On LPAR shift to state 33
-- On ANYFUNC shift to state 42
-- On table_sig shift to state 43
-- On table_fields shift to state 51
-- On limits shift to state 46
-- On inline_import shift to state 48
-- On inline_export shift to state 50
-- On elem_type shift to state 52
## Reductions:

State 51:
## Known stack suffix:
## inline_export table_fields
## LR(1) items:
table_fields -> inline_export table_fields . [ RPAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production table_fields -> inline_export table_fields

State 52:
## Known stack suffix:
## elem_type
## LR(1) items:
table_fields -> elem_type . LPAR ELEM var_list RPAR [ RPAR ]
## Transitions:
-- On LPAR shift to state 53
## Reductions:

State 53:
## Known stack suffix:
## elem_type LPAR
## LR(1) items:
table_fields -> elem_type LPAR . ELEM var_list RPAR [ RPAR ]
## Transitions:
-- On ELEM shift to state 54
## Reductions:

State 54:
## Known stack suffix:
## elem_type LPAR ELEM
## LR(1) items:
table_fields -> elem_type LPAR ELEM . var_list RPAR [ RPAR ]
## Transitions:
-- On VAR shift to state 55
-- On NAT shift to state 56
-- On var_list shift to state 57
-- On var shift to state 59
## Reductions:
-- On RPAR
--   reduce production var_list ->

State 55:
## Known stack suffix:
## VAR
## LR(1) items:
var -> VAR . [ VAR UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP NAT LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production var -> VAR

State 56:
## Known stack suffix:
## NAT
## LR(1) items:
var -> NAT . [ VAR UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP NAT LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production var -> NAT

State 57:
## Known stack suffix:
## elem_type LPAR ELEM var_list
## LR(1) items:
table_fields -> elem_type LPAR ELEM var_list . RPAR [ RPAR ]
## Transitions:
-- On RPAR shift to state 58
## Reductions:

State 58:
## Known stack suffix:
## elem_type LPAR ELEM var_list RPAR
## LR(1) items:
table_fields -> elem_type LPAR ELEM var_list RPAR . [ RPAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production table_fields -> elem_type LPAR ELEM var_list RPAR

State 59:
## Known stack suffix:
## var
## LR(1) items:
var_list -> var . var_list [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
## Transitions:
-- On VAR shift to state 55
-- On NAT shift to state 56
-- On var_list shift to state 60
-- On var shift to state 59
## Reductions:
-- On UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY
--   reduce production var_list ->

State 60:
## Known stack suffix:
## var var_list
## LR(1) items:
var_list -> var var_list . [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production var_list -> var var_list

State 61:
## Known stack suffix:
## bind_var
## LR(1) items:
bind_var_opt -> bind_var . [ VALUE_TYPE UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP NAT LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ANYFUNC ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production bind_var_opt -> bind_var

State 62:
## Known stack suffix:
## LPAR START
## LR(1) items:
start -> LPAR START . var RPAR [ RPAR LPAR EOF ]
## Transitions:
-- On VAR shift to state 55
-- On NAT shift to state 56
-- On var shift to state 63
## Reductions:

State 63:
## Known stack suffix:
## LPAR START var
## LR(1) items:
start -> LPAR START var . RPAR [ RPAR LPAR EOF ]
## Transitions:
-- On RPAR shift to state 64
## Reductions:

State 64:
## Known stack suffix:
## LPAR START var RPAR
## LR(1) items:
start -> LPAR START var RPAR . [ RPAR LPAR EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production start -> LPAR START var RPAR

State 65:
## Known stack suffix:
## LPAR MODULE
## LR(1) items:
module_ -> LPAR MODULE . module_var_opt module_fields RPAR [ EOF ]
## Transitions:
-- On VAR shift to state 66
-- On module_var_opt shift to state 67
## Reductions:
-- On RPAR LPAR
--   reduce production module_var_opt ->

State 66:
## Known stack suffix:
## VAR
## LR(1) items:
module_var_opt -> VAR . [ STRING RPAR QUOTE LPAR BIN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production module_var_opt -> VAR

State 67:
## Known stack suffix:
## LPAR MODULE module_var_opt
## LR(1) items:
module_ -> LPAR MODULE module_var_opt . module_fields RPAR [ EOF ]
## Transitions:
-- On LPAR shift to state 68
-- On type_def shift to state 333
-- On table shift to state 334
-- On start shift to state 335
-- On module_fields1 shift to state 336
-- On module_fields shift to state 354
-- On memory shift to state 338
-- On import shift to state 340
-- On global shift to state 342
-- On func shift to state 344
-- On export shift to state 346
-- On elem shift to state 348
-- On data shift to state 350
## Reductions:
-- On RPAR
--   reduce production module_fields ->

State 68:
## Known stack suffix:
## LPAR
## LR(1) items:
data -> LPAR . DATA var offset string_list RPAR [ RPAR LPAR EOF ]
data -> LPAR . DATA offset string_list RPAR [ RPAR LPAR EOF ]
elem -> LPAR . ELEM var offset var_list RPAR [ RPAR LPAR EOF ]
elem -> LPAR . ELEM offset var_list RPAR [ RPAR LPAR EOF ]
export -> LPAR . EXPORT name export_desc RPAR [ RPAR LPAR EOF ]
func -> LPAR . FUNC bind_var_opt func_fields RPAR [ RPAR LPAR EOF ]
global -> LPAR . GLOBAL bind_var_opt global_fields RPAR [ RPAR LPAR EOF ]
import -> LPAR . IMPORT name name import_desc RPAR [ RPAR LPAR EOF ]
memory -> LPAR . MEMORY bind_var_opt memory_fields RPAR [ RPAR LPAR EOF ]
start -> LPAR . START var RPAR [ RPAR LPAR EOF ]
table -> LPAR . TABLE bind_var_opt table_fields RPAR [ RPAR LPAR EOF ]
type_def -> LPAR . TYPE type_ RPAR [ RPAR LPAR EOF ]
type_def -> LPAR . TYPE bind_var type_ RPAR [ RPAR LPAR EOF ]
## Transitions:
-- On TYPE shift to state 2
-- On TABLE shift to state 29
-- On START shift to state 62
-- On MEMORY shift to state 69
-- On IMPORT shift to state 84
-- On GLOBAL shift to state 117
-- On FUNC shift to state 239
-- On EXPORT shift to state 295
-- On ELEM shift to state 312
-- On DATA shift to state 325
## Reductions:

State 69:
## Known stack suffix:
## LPAR MEMORY
## LR(1) items:
memory -> LPAR MEMORY . bind_var_opt memory_fields RPAR [ RPAR LPAR EOF ]
## Transitions:
-- On VAR shift to state 3
-- On bind_var_opt shift to state 70
-- On bind_var shift to state 61
## Reductions:
-- On NAT LPAR
--   reduce production bind_var_opt ->

State 70:
## Known stack suffix:
## LPAR MEMORY bind_var_opt
## LR(1) items:
memory -> LPAR MEMORY bind_var_opt . memory_fields RPAR [ RPAR LPAR EOF ]
## Transitions:
-- On NAT shift to state 31
-- On LPAR shift to state 71
-- On memory_sig shift to state 76
-- On memory_fields shift to state 77
-- On limits shift to state 79
-- On inline_import shift to state 80
-- On inline_export shift to state 82
## Reductions:

State 71:
## Known stack suffix:
## LPAR
## LR(1) items:
inline_export -> LPAR . EXPORT name RPAR [ NAT LPAR ]
inline_import -> LPAR . IMPORT name name RPAR [ NAT ]
memory_fields -> LPAR . DATA string_list RPAR [ RPAR ]
## Transitions:
-- On IMPORT shift to state 34
-- On EXPORT shift to state 39
-- On DATA shift to state 72
## Reductions:

State 72:
## Known stack suffix:
## LPAR DATA
## LR(1) items:
memory_fields -> LPAR DATA . string_list RPAR [ RPAR ]
## Transitions:
-- On string_list shift to state 73
## Default reduction:
-- After reading the next token, reduce production string_list ->

State 73:
## Known stack suffix:
## LPAR DATA string_list
## LR(1) items:
memory_fields -> LPAR DATA string_list . RPAR [ RPAR ]
string_list -> string_list . STRING [ STRING RPAR ]
## Transitions:
-- On STRING shift to state 74
-- On RPAR shift to state 75
## Reductions:

State 74:
## Known stack suffix:
## string_list STRING
## LR(1) items:
string_list -> string_list STRING . [ STRING RPAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production string_list -> string_list STRING

State 75:
## Known stack suffix:
## LPAR DATA string_list RPAR
## LR(1) items:
memory_fields -> LPAR DATA string_list RPAR . [ RPAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production memory_fields -> LPAR DATA string_list RPAR

State 76:
## Known stack suffix:
## memory_sig
## LR(1) items:
memory_fields -> memory_sig . [ RPAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production memory_fields -> memory_sig

State 77:
## Known stack suffix:
## LPAR MEMORY bind_var_opt memory_fields
## LR(1) items:
memory -> LPAR MEMORY bind_var_opt memory_fields . RPAR [ RPAR LPAR EOF ]
## Transitions:
-- On RPAR shift to state 78
## Reductions:

State 78:
## Known stack suffix:
## LPAR MEMORY bind_var_opt memory_fields RPAR
## LR(1) items:
memory -> LPAR MEMORY bind_var_opt memory_fields RPAR . [ RPAR LPAR EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production memory -> LPAR MEMORY bind_var_opt memory_fields RPAR

State 79:
## Known stack suffix:
## limits
## LR(1) items:
memory_sig -> limits . [ RPAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production memory_sig -> limits

State 80:
## Known stack suffix:
## inline_import
## LR(1) items:
memory_fields -> inline_import . memory_sig [ RPAR ]
## Transitions:
-- On NAT shift to state 31
-- On memory_sig shift to state 81
-- On limits shift to state 79
## Reductions:

State 81:
## Known stack suffix:
## inline_import memory_sig
## LR(1) items:
memory_fields -> inline_import memory_sig . [ RPAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production memory_fields -> inline_import memory_sig

State 82:
## Known stack suffix:
## inline_export
## LR(1) items:
memory_fields -> inline_export . memory_fields [ RPAR ]
## Transitions:
-- On NAT shift to state 31
-- On LPAR shift to state 71
-- On memory_sig shift to state 76
-- On memory_fields shift to state 83
-- On limits shift to state 79
-- On inline_import shift to state 80
-- On inline_export shift to state 82
## Reductions:

State 83:
## Known stack suffix:
## inline_export memory_fields
## LR(1) items:
memory_fields -> inline_export memory_fields . [ RPAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production memory_fields -> inline_export memory_fields

State 84:
## Known stack suffix:
## LPAR IMPORT
## LR(1) items:
import -> LPAR IMPORT . name name import_desc RPAR [ RPAR LPAR EOF ]
## Transitions:
-- On STRING shift to state 35
-- On name shift to state 85
## Reductions:

State 85:
## Known stack suffix:
## LPAR IMPORT name
## LR(1) items:
import -> LPAR IMPORT name . name import_desc RPAR [ RPAR LPAR EOF ]
## Transitions:
-- On STRING shift to state 35
-- On name shift to state 86
## Reductions:

State 86:
## Known stack suffix:
## LPAR IMPORT name name
## LR(1) items:
import -> LPAR IMPORT name name . import_desc RPAR [ RPAR LPAR EOF ]
## Transitions:
-- On LPAR shift to state 87
-- On import_desc shift to state 115
## Reductions:

State 87:
## Known stack suffix:
## LPAR
## LR(1) items:
import_desc -> LPAR . FUNC bind_var_opt type_use RPAR [ RPAR ]
import_desc -> LPAR . FUNC bind_var_opt func_sig RPAR [ RPAR ]
import_desc -> LPAR . TABLE bind_var_opt table_sig RPAR [ RPAR ]
import_desc -> LPAR . MEMORY bind_var_opt memory_sig RPAR [ RPAR ]
import_desc -> LPAR . GLOBAL bind_var_opt global_type RPAR [ RPAR ]
## Transitions:
-- On TABLE shift to state 88
-- On MEMORY shift to state 92
-- On GLOBAL shift to state 96
-- On FUNC shift to state 105
## Reductions:

State 88:
## Known stack suffix:
## LPAR TABLE
## LR(1) items:
import_desc -> LPAR TABLE . bind_var_opt table_sig RPAR [ RPAR ]
## Transitions:
-- On VAR shift to state 3
-- On bind_var_opt shift to state 89
-- On bind_var shift to state 61
## Reductions:
-- On NAT
--   reduce production bind_var_opt ->

State 89:
## Known stack suffix:
## LPAR TABLE bind_var_opt
## LR(1) items:
import_desc -> LPAR TABLE bind_var_opt . table_sig RPAR [ RPAR ]
## Transitions:
-- On NAT shift to state 31
-- On table_sig shift to state 90
-- On limits shift to state 46
## Reductions:

State 90:
## Known stack suffix:
## LPAR TABLE bind_var_opt table_sig
## LR(1) items:
import_desc -> LPAR TABLE bind_var_opt table_sig . RPAR [ RPAR ]
## Transitions:
-- On RPAR shift to state 91
## Reductions:

State 91:
## Known stack suffix:
## LPAR TABLE bind_var_opt table_sig RPAR
## LR(1) items:
import_desc -> LPAR TABLE bind_var_opt table_sig RPAR . [ RPAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production import_desc -> LPAR TABLE bind_var_opt table_sig RPAR

State 92:
## Known stack suffix:
## LPAR MEMORY
## LR(1) items:
import_desc -> LPAR MEMORY . bind_var_opt memory_sig RPAR [ RPAR ]
## Transitions:
-- On VAR shift to state 3
-- On bind_var_opt shift to state 93
-- On bind_var shift to state 61
## Reductions:
-- On NAT
--   reduce production bind_var_opt ->

State 93:
## Known stack suffix:
## LPAR MEMORY bind_var_opt
## LR(1) items:
import_desc -> LPAR MEMORY bind_var_opt . memory_sig RPAR [ RPAR ]
## Transitions:
-- On NAT shift to state 31
-- On memory_sig shift to state 94
-- On limits shift to state 79
## Reductions:

State 94:
## Known stack suffix:
## LPAR MEMORY bind_var_opt memory_sig
## LR(1) items:
import_desc -> LPAR MEMORY bind_var_opt memory_sig . RPAR [ RPAR ]
## Transitions:
-- On RPAR shift to state 95
## Reductions:

State 95:
## Known stack suffix:
## LPAR MEMORY bind_var_opt memory_sig RPAR
## LR(1) items:
import_desc -> LPAR MEMORY bind_var_opt memory_sig RPAR . [ RPAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production import_desc -> LPAR MEMORY bind_var_opt memory_sig RPAR

State 96:
## Known stack suffix:
## LPAR GLOBAL
## LR(1) items:
import_desc -> LPAR GLOBAL . bind_var_opt global_type RPAR [ RPAR ]
## Transitions:
-- On VAR shift to state 3
-- On bind_var_opt shift to state 97
-- On bind_var shift to state 61
## Reductions:
-- On VALUE_TYPE LPAR
--   reduce production bind_var_opt ->

State 97:
## Known stack suffix:
## LPAR GLOBAL bind_var_opt
## LR(1) items:
import_desc -> LPAR GLOBAL bind_var_opt . global_type RPAR [ RPAR ]
## Transitions:
-- On VALUE_TYPE shift to state 98
-- On LPAR shift to state 99
-- On global_type shift to state 103
## Reductions:

State 98:
## Known stack suffix:
## VALUE_TYPE
## LR(1) items:
global_type -> VALUE_TYPE . [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production global_type -> VALUE_TYPE

State 99:
## Known stack suffix:
## LPAR
## LR(1) items:
global_type -> LPAR . MUT VALUE_TYPE RPAR [ RPAR ]
## Transitions:
-- On MUT shift to state 100
## Reductions:

State 100:
## Known stack suffix:
## LPAR MUT
## LR(1) items:
global_type -> LPAR MUT . VALUE_TYPE RPAR [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
## Transitions:
-- On VALUE_TYPE shift to state 101
## Reductions:

State 101:
## Known stack suffix:
## LPAR MUT VALUE_TYPE
## LR(1) items:
global_type -> LPAR MUT VALUE_TYPE . RPAR [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
## Transitions:
-- On RPAR shift to state 102
## Reductions:

State 102:
## Known stack suffix:
## LPAR MUT VALUE_TYPE RPAR
## LR(1) items:
global_type -> LPAR MUT VALUE_TYPE RPAR . [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production global_type -> LPAR MUT VALUE_TYPE RPAR

State 103:
## Known stack suffix:
## LPAR GLOBAL bind_var_opt global_type
## LR(1) items:
import_desc -> LPAR GLOBAL bind_var_opt global_type . RPAR [ RPAR ]
## Transitions:
-- On RPAR shift to state 104
## Reductions:

State 104:
## Known stack suffix:
## LPAR GLOBAL bind_var_opt global_type RPAR
## LR(1) items:
import_desc -> LPAR GLOBAL bind_var_opt global_type RPAR . [ RPAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production import_desc -> LPAR GLOBAL bind_var_opt global_type RPAR

State 105:
## Known stack suffix:
## LPAR FUNC
## LR(1) items:
import_desc -> LPAR FUNC . bind_var_opt type_use RPAR [ RPAR ]
import_desc -> LPAR FUNC . bind_var_opt func_sig RPAR [ RPAR ]
## Transitions:
-- On VAR shift to state 3
-- On bind_var_opt shift to state 106
-- On bind_var shift to state 61
## Reductions:
-- On RPAR LPAR
--   reduce production bind_var_opt ->

State 106:
## Known stack suffix:
## LPAR FUNC bind_var_opt
## LR(1) items:
import_desc -> LPAR FUNC bind_var_opt . type_use RPAR [ RPAR ]
import_desc -> LPAR FUNC bind_var_opt . func_sig RPAR [ RPAR ]
## Transitions:
-- On LPAR shift to state 107
-- On type_use shift to state 111
-- On func_sig shift to state 113
## Reductions:
-- On RPAR
--   reduce production func_sig ->

State 107:
## Known stack suffix:
## LPAR
## LR(1) items:
func_sig -> LPAR . RESULT value_type_list RPAR func_sig [ RPAR ]
func_sig -> LPAR . PARAM value_type_list RPAR func_sig [ RPAR ]
func_sig -> LPAR . PARAM bind_var VALUE_TYPE RPAR func_sig [ RPAR ]
type_use -> LPAR . TYPE var RPAR [ RPAR ]
## Transitions:
-- On TYPE shift to state 108
-- On RESULT shift to state 7
-- On PARAM shift to state 13
## Reductions:

State 108:
## Known stack suffix:
## LPAR TYPE
## LR(1) items:
type_use -> LPAR TYPE . var RPAR [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
## Transitions:
-- On VAR shift to state 55
-- On NAT shift to state 56
-- On var shift to state 109
## Reductions:

State 109:
## Known stack suffix:
## LPAR TYPE var
## LR(1) items:
type_use -> LPAR TYPE var . RPAR [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
## Transitions:
-- On RPAR shift to state 110
## Reductions:

State 110:
## Known stack suffix:
## LPAR TYPE var RPAR
## LR(1) items:
type_use -> LPAR TYPE var RPAR . [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_use -> LPAR TYPE var RPAR

State 111:
## Known stack suffix:
## LPAR FUNC bind_var_opt type_use
## LR(1) items:
import_desc -> LPAR FUNC bind_var_opt type_use . RPAR [ RPAR ]
## Transitions:
-- On RPAR shift to state 112
## Reductions:

State 112:
## Known stack suffix:
## LPAR FUNC bind_var_opt type_use RPAR
## LR(1) items:
import_desc -> LPAR FUNC bind_var_opt type_use RPAR . [ RPAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production import_desc -> LPAR FUNC bind_var_opt type_use RPAR

State 113:
## Known stack suffix:
## LPAR FUNC bind_var_opt func_sig
## LR(1) items:
import_desc -> LPAR FUNC bind_var_opt func_sig . RPAR [ RPAR ]
## Transitions:
-- On RPAR shift to state 114
## Reductions:

State 114:
## Known stack suffix:
## LPAR FUNC bind_var_opt func_sig RPAR
## LR(1) items:
import_desc -> LPAR FUNC bind_var_opt func_sig RPAR . [ RPAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production import_desc -> LPAR FUNC bind_var_opt func_sig RPAR

State 115:
## Known stack suffix:
## LPAR IMPORT name name import_desc
## LR(1) items:
import -> LPAR IMPORT name name import_desc . RPAR [ RPAR LPAR EOF ]
## Transitions:
-- On RPAR shift to state 116
## Reductions:

State 116:
## Known stack suffix:
## LPAR IMPORT name name import_desc RPAR
## LR(1) items:
import -> LPAR IMPORT name name import_desc RPAR . [ RPAR LPAR EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production import -> LPAR IMPORT name name import_desc RPAR

State 117:
## Known stack suffix:
## LPAR GLOBAL
## LR(1) items:
global -> LPAR GLOBAL . bind_var_opt global_fields RPAR [ RPAR LPAR EOF ]
## Transitions:
-- On VAR shift to state 3
-- On bind_var_opt shift to state 118
-- On bind_var shift to state 61
## Reductions:
-- On VALUE_TYPE LPAR
--   reduce production bind_var_opt ->

State 118:
## Known stack suffix:
## LPAR GLOBAL bind_var_opt
## LR(1) items:
global -> LPAR GLOBAL bind_var_opt . global_fields RPAR [ RPAR LPAR EOF ]
## Transitions:
-- On VALUE_TYPE shift to state 98
-- On LPAR shift to state 119
-- On inline_import shift to state 120
-- On inline_export shift to state 122
-- On global_type shift to state 123
-- On global_fields shift to state 237
## Reductions:

State 119:
## Known stack suffix:
## LPAR
## LR(1) items:
global_type -> LPAR . MUT VALUE_TYPE RPAR [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
inline_export -> LPAR . EXPORT name RPAR [ VALUE_TYPE LPAR ]
inline_import -> LPAR . IMPORT name name RPAR [ VALUE_TYPE LPAR ]
## Transitions:
-- On MUT shift to state 100
-- On IMPORT shift to state 34
-- On EXPORT shift to state 39
## Reductions:

State 120:
## Known stack suffix:
## inline_import
## LR(1) items:
global_fields -> inline_import . global_type [ RPAR ]
## Transitions:
-- On VALUE_TYPE shift to state 98
-- On LPAR shift to state 99
-- On global_type shift to state 121
## Reductions:

State 121:
## Known stack suffix:
## inline_import global_type
## LR(1) items:
global_fields -> inline_import global_type . [ RPAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production global_fields -> inline_import global_type

State 122:
## Known stack suffix:
## inline_export
## LR(1) items:
global_fields -> inline_export . global_fields [ RPAR ]
## Transitions:
-- On VALUE_TYPE shift to state 98
-- On LPAR shift to state 119
-- On inline_import shift to state 120
-- On inline_export shift to state 122
-- On global_type shift to state 123
-- On global_fields shift to state 236
## Reductions:

State 123:
## Known stack suffix:
## global_type
## LR(1) items:
global_fields -> global_type . const_expr [ RPAR ]
## Transitions:
-- On UNREACHABLE shift to state 124
-- On UNARY shift to state 125
-- On TEST shift to state 126
-- On TEE_LOCAL shift to state 127
-- On STORE shift to state 129
-- On SET_LOCAL shift to state 134
-- On SET_GLOBAL shift to state 136
-- On SELECT shift to state 138
-- On RETURN shift to state 139
-- On NOP shift to state 140
-- On LPAR shift to state 141
-- On LOOP shift to state 155
-- On LOAD shift to state 148
-- On IF shift to state 157
-- On GROW_MEMORY shift to state 159
-- On GET_LOCAL shift to state 160
-- On GET_GLOBAL shift to state 162
-- On DROP shift to state 164
-- On CURRENT_MEMORY shift to state 165
-- On CONVERT shift to state 166
-- On CONST shift to state 167
-- On COMPARE shift to state 172
-- On CALL_INDIRECT shift to state 173
-- On CALL shift to state 175
-- On BR_TABLE shift to state 177
-- On BR_IF shift to state 180
-- On BR shift to state 182
-- On BLOCK shift to state 184
-- On BINARY shift to state 186
-- On plain_instr shift to state 187
-- On instr_list shift to state 234
-- On instr shift to state 189
-- On expr shift to state 191
-- On const_expr shift to state 235
-- On block_instr shift to state 192
## Reductions:
-- On RPAR
--   reduce production instr_list ->

State 124:
## Known stack suffix:
## UNREACHABLE
## LR(1) items:
plain_instr -> UNREACHABLE . [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production plain_instr -> UNREACHABLE

State 125:
## Known stack suffix:
## UNARY
## LR(1) items:
plain_instr -> UNARY . [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production plain_instr -> UNARY

State 126:
## Known stack suffix:
## TEST
## LR(1) items:
plain_instr -> TEST . [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production plain_instr -> TEST

State 127:
## Known stack suffix:
## TEE_LOCAL
## LR(1) items:
plain_instr -> TEE_LOCAL . var [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
## Transitions:
-- On VAR shift to state 55
-- On NAT shift to state 56
-- On var shift to state 128
## Reductions:

State 128:
## Known stack suffix:
## TEE_LOCAL var
## LR(1) items:
plain_instr -> TEE_LOCAL var . [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production plain_instr -> TEE_LOCAL var

State 129:
## Known stack suffix:
## STORE
## LR(1) items:
plain_instr -> STORE . offset_opt align_opt [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
## Transitions:
-- On OFFSET_EQ_NAT shift to state 130
-- On offset_opt shift to state 131
## Reductions:
-- On UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ALIGN_EQ_NAT
--   reduce production offset_opt ->

State 130:
## Known stack suffix:
## OFFSET_EQ_NAT
## LR(1) items:
offset_opt -> OFFSET_EQ_NAT . [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ALIGN_EQ_NAT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production offset_opt -> OFFSET_EQ_NAT

State 131:
## Known stack suffix:
## STORE offset_opt
## LR(1) items:
plain_instr -> STORE offset_opt . align_opt [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
## Transitions:
-- On ALIGN_EQ_NAT shift to state 132
-- On align_opt shift to state 133
## Reductions:
-- On UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY
--   reduce production align_opt ->

State 132:
## Known stack suffix:
## ALIGN_EQ_NAT
## LR(1) items:
align_opt -> ALIGN_EQ_NAT . [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production align_opt -> ALIGN_EQ_NAT

State 133:
## Known stack suffix:
## STORE offset_opt align_opt
## LR(1) items:
plain_instr -> STORE offset_opt align_opt . [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production plain_instr -> STORE offset_opt align_opt

State 134:
## Known stack suffix:
## SET_LOCAL
## LR(1) items:
plain_instr -> SET_LOCAL . var [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
## Transitions:
-- On VAR shift to state 55
-- On NAT shift to state 56
-- On var shift to state 135
## Reductions:

State 135:
## Known stack suffix:
## SET_LOCAL var
## LR(1) items:
plain_instr -> SET_LOCAL var . [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production plain_instr -> SET_LOCAL var

State 136:
## Known stack suffix:
## SET_GLOBAL
## LR(1) items:
plain_instr -> SET_GLOBAL . var [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
## Transitions:
-- On VAR shift to state 55
-- On NAT shift to state 56
-- On var shift to state 137
## Reductions:

State 137:
## Known stack suffix:
## SET_GLOBAL var
## LR(1) items:
plain_instr -> SET_GLOBAL var . [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production plain_instr -> SET_GLOBAL var

State 138:
## Known stack suffix:
## SELECT
## LR(1) items:
plain_instr -> SELECT . [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production plain_instr -> SELECT

State 139:
## Known stack suffix:
## RETURN
## LR(1) items:
plain_instr -> RETURN . [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production plain_instr -> RETURN

State 140:
## Known stack suffix:
## NOP
## LR(1) items:
plain_instr -> NOP . [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production plain_instr -> NOP

State 141:
## Known stack suffix:
## LPAR
## LR(1) items:
expr -> LPAR . expr1 RPAR [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
## Transitions:
-- On UNREACHABLE shift to state 124
-- On UNARY shift to state 125
-- On TEST shift to state 126
-- On TEE_LOCAL shift to state 127
-- On STORE shift to state 129
-- On SET_LOCAL shift to state 134
-- On SET_GLOBAL shift to state 136
-- On SELECT shift to state 138
-- On RETURN shift to state 139
-- On NOP shift to state 140
-- On LOOP shift to state 142
-- On LOAD shift to state 148
-- On IF shift to state 151
-- On GROW_MEMORY shift to state 159
-- On GET_LOCAL shift to state 160
-- On GET_GLOBAL shift to state 162
-- On DROP shift to state 164
-- On CURRENT_MEMORY shift to state 165
-- On CONVERT shift to state 166
-- On CONST shift to state 167
-- On COMPARE shift to state 172
-- On CALL_INDIRECT shift to state 173
-- On CALL shift to state 175
-- On BR_TABLE shift to state 177
-- On BR_IF shift to state 180
-- On BR shift to state 182
-- On BLOCK shift to state 217
-- On BINARY shift to state 186
-- On plain_instr shift to state 220
-- On expr1 shift to state 224
## Reductions:

State 142:
## Known stack suffix:
## LOOP
## LR(1) items:
expr1 -> LOOP . labeling_opt block [ RPAR ]
## Transitions:
-- On VAR shift to state 3
-- On labeling_opt shift to state 143
-- On bind_var shift to state 199
## Reductions:
-- On UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY
--   reduce production labeling_opt ->

State 143:
## Known stack suffix:
## LOOP labeling_opt
## LR(1) items:
expr1 -> LOOP labeling_opt . block [ RPAR ]
## Transitions:
-- On UNREACHABLE shift to state 124
-- On UNARY shift to state 125
-- On TEST shift to state 126
-- On TEE_LOCAL shift to state 127
-- On STORE shift to state 129
-- On SET_LOCAL shift to state 134
-- On SET_GLOBAL shift to state 136
-- On SELECT shift to state 138
-- On RETURN shift to state 139
-- On NOP shift to state 140
-- On LPAR shift to state 144
-- On LOOP shift to state 155
-- On LOAD shift to state 148
-- On IF shift to state 157
-- On GROW_MEMORY shift to state 159
-- On GET_LOCAL shift to state 160
-- On GET_GLOBAL shift to state 162
-- On DROP shift to state 164
-- On CURRENT_MEMORY shift to state 165
-- On CONVERT shift to state 166
-- On CONST shift to state 167
-- On COMPARE shift to state 172
-- On CALL_INDIRECT shift to state 173
-- On CALL shift to state 175
-- On BR_TABLE shift to state 177
-- On BR_IF shift to state 180
-- On BR shift to state 182
-- On BLOCK shift to state 184
-- On BINARY shift to state 186
-- On plain_instr shift to state 187
-- On instr_list shift to state 188
-- On instr shift to state 189
-- On expr shift to state 191
-- On block_sig shift to state 193
-- On block_instr shift to state 192
-- On block shift to state 233
## Reductions:
-- On RPAR
--   reduce production instr_list ->

State 144:
## Known stack suffix:
## LPAR
## LR(1) items:
block_sig -> LPAR . RESULT VALUE_TYPE RPAR [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
expr -> LPAR . expr1 RPAR [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
## Transitions:
-- On UNREACHABLE shift to state 124
-- On UNARY shift to state 125
-- On TEST shift to state 126
-- On TEE_LOCAL shift to state 127
-- On STORE shift to state 129
-- On SET_LOCAL shift to state 134
-- On SET_GLOBAL shift to state 136
-- On SELECT shift to state 138
-- On RETURN shift to state 139
-- On RESULT shift to state 145
-- On NOP shift to state 140
-- On LOOP shift to state 142
-- On LOAD shift to state 148
-- On IF shift to state 151
-- On GROW_MEMORY shift to state 159
-- On GET_LOCAL shift to state 160
-- On GET_GLOBAL shift to state 162
-- On DROP shift to state 164
-- On CURRENT_MEMORY shift to state 165
-- On CONVERT shift to state 166
-- On CONST shift to state 167
-- On COMPARE shift to state 172
-- On CALL_INDIRECT shift to state 173
-- On CALL shift to state 175
-- On BR_TABLE shift to state 177
-- On BR_IF shift to state 180
-- On BR shift to state 182
-- On BLOCK shift to state 217
-- On BINARY shift to state 186
-- On plain_instr shift to state 220
-- On expr1 shift to state 224
## Reductions:

State 145:
## Known stack suffix:
## LPAR RESULT
## LR(1) items:
block_sig -> LPAR RESULT . VALUE_TYPE RPAR [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
## Transitions:
-- On VALUE_TYPE shift to state 146
## Reductions:

State 146:
## Known stack suffix:
## LPAR RESULT VALUE_TYPE
## LR(1) items:
block_sig -> LPAR RESULT VALUE_TYPE . RPAR [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
## Transitions:
-- On RPAR shift to state 147
## Reductions:

State 147:
## Known stack suffix:
## LPAR RESULT VALUE_TYPE RPAR
## LR(1) items:
block_sig -> LPAR RESULT VALUE_TYPE RPAR . [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production block_sig -> LPAR RESULT VALUE_TYPE RPAR

State 148:
## Known stack suffix:
## LOAD
## LR(1) items:
plain_instr -> LOAD . offset_opt align_opt [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
## Transitions:
-- On OFFSET_EQ_NAT shift to state 130
-- On offset_opt shift to state 149
## Reductions:
-- On UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ALIGN_EQ_NAT
--   reduce production offset_opt ->

State 149:
## Known stack suffix:
## LOAD offset_opt
## LR(1) items:
plain_instr -> LOAD offset_opt . align_opt [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
## Transitions:
-- On ALIGN_EQ_NAT shift to state 132
-- On align_opt shift to state 150
## Reductions:
-- On UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY
--   reduce production align_opt ->

State 150:
## Known stack suffix:
## LOAD offset_opt align_opt
## LR(1) items:
plain_instr -> LOAD offset_opt align_opt . [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production plain_instr -> LOAD offset_opt align_opt

State 151:
## Known stack suffix:
## IF
## LR(1) items:
expr1 -> IF . labeling_opt if_block [ RPAR ]
## Transitions:
-- On VAR shift to state 3
-- On labeling_opt shift to state 152
-- On bind_var shift to state 199
## Reductions:
-- On LPAR
--   reduce production labeling_opt ->

State 152:
## Known stack suffix:
## IF labeling_opt
## LR(1) items:
expr1 -> IF labeling_opt . if_block [ RPAR ]
## Transitions:
-- On LPAR shift to state 153
-- On if_block shift to state 226
-- On if_ shift to state 227
-- On expr shift to state 228
-- On block_sig shift to state 231
## Reductions:

State 153:
## Known stack suffix:
## LPAR
## LR(1) items:
block_sig -> LPAR . RESULT VALUE_TYPE RPAR [ LPAR ]
expr -> LPAR . expr1 RPAR [ LPAR ]
if_ -> LPAR . THEN instr_list RPAR LPAR ELSE instr_list RPAR [ RPAR ]
if_ -> LPAR . THEN instr_list RPAR [ RPAR ]
## Transitions:
-- On UNREACHABLE shift to state 124
-- On UNARY shift to state 125
-- On THEN shift to state 154
-- On TEST shift to state 126
-- On TEE_LOCAL shift to state 127
-- On STORE shift to state 129
-- On SET_LOCAL shift to state 134
-- On SET_GLOBAL shift to state 136
-- On SELECT shift to state 138
-- On RETURN shift to state 139
-- On RESULT shift to state 145
-- On NOP shift to state 140
-- On LOOP shift to state 142
-- On LOAD shift to state 148
-- On IF shift to state 151
-- On GROW_MEMORY shift to state 159
-- On GET_LOCAL shift to state 160
-- On GET_GLOBAL shift to state 162
-- On DROP shift to state 164
-- On CURRENT_MEMORY shift to state 165
-- On CONVERT shift to state 166
-- On CONST shift to state 167
-- On COMPARE shift to state 172
-- On CALL_INDIRECT shift to state 173
-- On CALL shift to state 175
-- On BR_TABLE shift to state 177
-- On BR_IF shift to state 180
-- On BR shift to state 182
-- On BLOCK shift to state 217
-- On BINARY shift to state 186
-- On plain_instr shift to state 220
-- On expr1 shift to state 224
## Reductions:

State 154:
## Known stack suffix:
## LPAR THEN
## LR(1) items:
if_ -> LPAR THEN . instr_list RPAR LPAR ELSE instr_list RPAR [ RPAR ]
if_ -> LPAR THEN . instr_list RPAR [ RPAR ]
## Transitions:
-- On UNREACHABLE shift to state 124
-- On UNARY shift to state 125
-- On TEST shift to state 126
-- On TEE_LOCAL shift to state 127
-- On STORE shift to state 129
-- On SET_LOCAL shift to state 134
-- On SET_GLOBAL shift to state 136
-- On SELECT shift to state 138
-- On RETURN shift to state 139
-- On NOP shift to state 140
-- On LPAR shift to state 141
-- On LOOP shift to state 155
-- On LOAD shift to state 148
-- On IF shift to state 157
-- On GROW_MEMORY shift to state 159
-- On GET_LOCAL shift to state 160
-- On GET_GLOBAL shift to state 162
-- On DROP shift to state 164
-- On CURRENT_MEMORY shift to state 165
-- On CONVERT shift to state 166
-- On CONST shift to state 167
-- On COMPARE shift to state 172
-- On CALL_INDIRECT shift to state 173
-- On CALL shift to state 175
-- On BR_TABLE shift to state 177
-- On BR_IF shift to state 180
-- On BR shift to state 182
-- On BLOCK shift to state 184
-- On BINARY shift to state 186
-- On plain_instr shift to state 187
-- On instr_list shift to state 211
-- On instr shift to state 189
-- On expr shift to state 191
-- On block_instr shift to state 192
## Reductions:
-- On RPAR
--   reduce production instr_list ->

State 155:
## Known stack suffix:
## LOOP
## LR(1) items:
block_instr -> LOOP . labeling_opt block END labeling_end_opt [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
## Transitions:
-- On VAR shift to state 3
-- On labeling_opt shift to state 156
-- On bind_var shift to state 199
## Reductions:
-- On UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY
--   reduce production labeling_opt ->

State 156:
## Known stack suffix:
## LOOP labeling_opt
## LR(1) items:
block_instr -> LOOP labeling_opt . block END labeling_end_opt [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
## Transitions:
-- On UNREACHABLE shift to state 124
-- On UNARY shift to state 125
-- On TEST shift to state 126
-- On TEE_LOCAL shift to state 127
-- On STORE shift to state 129
-- On SET_LOCAL shift to state 134
-- On SET_GLOBAL shift to state 136
-- On SELECT shift to state 138
-- On RETURN shift to state 139
-- On NOP shift to state 140
-- On LPAR shift to state 144
-- On LOOP shift to state 155
-- On LOAD shift to state 148
-- On IF shift to state 157
-- On GROW_MEMORY shift to state 159
-- On GET_LOCAL shift to state 160
-- On GET_GLOBAL shift to state 162
-- On DROP shift to state 164
-- On CURRENT_MEMORY shift to state 165
-- On CONVERT shift to state 166
-- On CONST shift to state 167
-- On COMPARE shift to state 172
-- On CALL_INDIRECT shift to state 173
-- On CALL shift to state 175
-- On BR_TABLE shift to state 177
-- On BR_IF shift to state 180
-- On BR shift to state 182
-- On BLOCK shift to state 184
-- On BINARY shift to state 186
-- On plain_instr shift to state 187
-- On instr_list shift to state 188
-- On instr shift to state 189
-- On expr shift to state 191
-- On block_sig shift to state 193
-- On block_instr shift to state 192
-- On block shift to state 208
## Reductions:
-- On END
--   reduce production instr_list ->

State 157:
## Known stack suffix:
## IF
## LR(1) items:
block_instr -> IF . labeling_opt block END labeling_end_opt [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
block_instr -> IF . labeling_opt block ELSE labeling_end_opt instr_list END labeling_end_opt [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
## Transitions:
-- On VAR shift to state 3
-- On labeling_opt shift to state 158
-- On bind_var shift to state 199
## Reductions:
-- On UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY
--   reduce production labeling_opt ->

State 158:
## Known stack suffix:
## IF labeling_opt
## LR(1) items:
block_instr -> IF labeling_opt . block END labeling_end_opt [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
block_instr -> IF labeling_opt . block ELSE labeling_end_opt instr_list END labeling_end_opt [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
## Transitions:
-- On UNREACHABLE shift to state 124
-- On UNARY shift to state 125
-- On TEST shift to state 126
-- On TEE_LOCAL shift to state 127
-- On STORE shift to state 129
-- On SET_LOCAL shift to state 134
-- On SET_GLOBAL shift to state 136
-- On SELECT shift to state 138
-- On RETURN shift to state 139
-- On NOP shift to state 140
-- On LPAR shift to state 144
-- On LOOP shift to state 155
-- On LOAD shift to state 148
-- On IF shift to state 157
-- On GROW_MEMORY shift to state 159
-- On GET_LOCAL shift to state 160
-- On GET_GLOBAL shift to state 162
-- On DROP shift to state 164
-- On CURRENT_MEMORY shift to state 165
-- On CONVERT shift to state 166
-- On CONST shift to state 167
-- On COMPARE shift to state 172
-- On CALL_INDIRECT shift to state 173
-- On CALL shift to state 175
-- On BR_TABLE shift to state 177
-- On BR_IF shift to state 180
-- On BR shift to state 182
-- On BLOCK shift to state 184
-- On BINARY shift to state 186
-- On plain_instr shift to state 187
-- On instr_list shift to state 188
-- On instr shift to state 189
-- On expr shift to state 191
-- On block_sig shift to state 193
-- On block_instr shift to state 192
-- On block shift to state 200
## Reductions:
-- On END ELSE
--   reduce production instr_list ->

State 159:
## Known stack suffix:
## GROW_MEMORY
## LR(1) items:
plain_instr -> GROW_MEMORY . [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production plain_instr -> GROW_MEMORY

State 160:
## Known stack suffix:
## GET_LOCAL
## LR(1) items:
plain_instr -> GET_LOCAL . var [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
## Transitions:
-- On VAR shift to state 55
-- On NAT shift to state 56
-- On var shift to state 161
## Reductions:

State 161:
## Known stack suffix:
## GET_LOCAL var
## LR(1) items:
plain_instr -> GET_LOCAL var . [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production plain_instr -> GET_LOCAL var

State 162:
## Known stack suffix:
## GET_GLOBAL
## LR(1) items:
plain_instr -> GET_GLOBAL . var [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
## Transitions:
-- On VAR shift to state 55
-- On NAT shift to state 56
-- On var shift to state 163
## Reductions:

State 163:
## Known stack suffix:
## GET_GLOBAL var
## LR(1) items:
plain_instr -> GET_GLOBAL var . [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production plain_instr -> GET_GLOBAL var

State 164:
## Known stack suffix:
## DROP
## LR(1) items:
plain_instr -> DROP . [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production plain_instr -> DROP

State 165:
## Known stack suffix:
## CURRENT_MEMORY
## LR(1) items:
plain_instr -> CURRENT_MEMORY . [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production plain_instr -> CURRENT_MEMORY

State 166:
## Known stack suffix:
## CONVERT
## LR(1) items:
plain_instr -> CONVERT . [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production plain_instr -> CONVERT

State 167:
## Known stack suffix:
## CONST
## LR(1) items:
plain_instr -> CONST . literal [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
## Transitions:
-- On NAT shift to state 168
-- On INT shift to state 169
-- On FLOAT shift to state 170
-- On literal shift to state 171
## Reductions:

State 168:
## Known stack suffix:
## NAT
## LR(1) items:
literal -> NAT . [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production literal -> NAT

State 169:
## Known stack suffix:
## INT
## LR(1) items:
literal -> INT . [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production literal -> INT

State 170:
## Known stack suffix:
## FLOAT
## LR(1) items:
literal -> FLOAT . [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production literal -> FLOAT

State 171:
## Known stack suffix:
## CONST literal
## LR(1) items:
plain_instr -> CONST literal . [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production plain_instr -> CONST literal

State 172:
## Known stack suffix:
## COMPARE
## LR(1) items:
plain_instr -> COMPARE . [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production plain_instr -> COMPARE

State 173:
## Known stack suffix:
## CALL_INDIRECT
## LR(1) items:
plain_instr -> CALL_INDIRECT . var [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
## Transitions:
-- On VAR shift to state 55
-- On NAT shift to state 56
-- On var shift to state 174
## Reductions:

State 174:
## Known stack suffix:
## CALL_INDIRECT var
## LR(1) items:
plain_instr -> CALL_INDIRECT var . [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production plain_instr -> CALL_INDIRECT var

State 175:
## Known stack suffix:
## CALL
## LR(1) items:
plain_instr -> CALL . var [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
## Transitions:
-- On VAR shift to state 55
-- On NAT shift to state 56
-- On var shift to state 176
## Reductions:

State 176:
## Known stack suffix:
## CALL var
## LR(1) items:
plain_instr -> CALL var . [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production plain_instr -> CALL var

State 177:
## Known stack suffix:
## BR_TABLE
## LR(1) items:
plain_instr -> BR_TABLE . var var_list [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
## Transitions:
-- On VAR shift to state 55
-- On NAT shift to state 56
-- On var shift to state 178
## Reductions:

State 178:
## Known stack suffix:
## BR_TABLE var
## LR(1) items:
plain_instr -> BR_TABLE var . var_list [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
## Transitions:
-- On VAR shift to state 55
-- On NAT shift to state 56
-- On var_list shift to state 179
-- On var shift to state 59
## Reductions:
-- On UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY
--   reduce production var_list ->

State 179:
## Known stack suffix:
## BR_TABLE var var_list
## LR(1) items:
plain_instr -> BR_TABLE var var_list . [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production plain_instr -> BR_TABLE var var_list

State 180:
## Known stack suffix:
## BR_IF
## LR(1) items:
plain_instr -> BR_IF . var [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
## Transitions:
-- On VAR shift to state 55
-- On NAT shift to state 56
-- On var shift to state 181
## Reductions:

State 181:
## Known stack suffix:
## BR_IF var
## LR(1) items:
plain_instr -> BR_IF var . [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production plain_instr -> BR_IF var

State 182:
## Known stack suffix:
## BR
## LR(1) items:
plain_instr -> BR . var [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
## Transitions:
-- On VAR shift to state 55
-- On NAT shift to state 56
-- On var shift to state 183
## Reductions:

State 183:
## Known stack suffix:
## BR var
## LR(1) items:
plain_instr -> BR var . [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production plain_instr -> BR var

State 184:
## Known stack suffix:
## BLOCK
## LR(1) items:
block_instr -> BLOCK . labeling_opt block END labeling_end_opt [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
## Transitions:
-- On VAR shift to state 3
-- On labeling_opt shift to state 185
-- On bind_var shift to state 199
## Reductions:
-- On UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY
--   reduce production labeling_opt ->

State 185:
## Known stack suffix:
## BLOCK labeling_opt
## LR(1) items:
block_instr -> BLOCK labeling_opt . block END labeling_end_opt [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
## Transitions:
-- On UNREACHABLE shift to state 124
-- On UNARY shift to state 125
-- On TEST shift to state 126
-- On TEE_LOCAL shift to state 127
-- On STORE shift to state 129
-- On SET_LOCAL shift to state 134
-- On SET_GLOBAL shift to state 136
-- On SELECT shift to state 138
-- On RETURN shift to state 139
-- On NOP shift to state 140
-- On LPAR shift to state 144
-- On LOOP shift to state 155
-- On LOAD shift to state 148
-- On IF shift to state 157
-- On GROW_MEMORY shift to state 159
-- On GET_LOCAL shift to state 160
-- On GET_GLOBAL shift to state 162
-- On DROP shift to state 164
-- On CURRENT_MEMORY shift to state 165
-- On CONVERT shift to state 166
-- On CONST shift to state 167
-- On COMPARE shift to state 172
-- On CALL_INDIRECT shift to state 173
-- On CALL shift to state 175
-- On BR_TABLE shift to state 177
-- On BR_IF shift to state 180
-- On BR shift to state 182
-- On BLOCK shift to state 184
-- On BINARY shift to state 186
-- On plain_instr shift to state 187
-- On instr_list shift to state 188
-- On instr shift to state 189
-- On expr shift to state 191
-- On block_sig shift to state 193
-- On block_instr shift to state 192
-- On block shift to state 195
## Reductions:
-- On END
--   reduce production instr_list ->

State 186:
## Known stack suffix:
## BINARY
## LR(1) items:
plain_instr -> BINARY . [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production plain_instr -> BINARY

State 187:
## Known stack suffix:
## plain_instr
## LR(1) items:
instr -> plain_instr . [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production instr -> plain_instr

State 188:
## Known stack suffix:
## instr_list
## LR(1) items:
block -> instr_list . [ RPAR END ELSE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production block -> instr_list

State 189:
## Known stack suffix:
## instr
## LR(1) items:
instr_list -> instr . instr_list [ RPAR END ELSE ]
## Transitions:
-- On UNREACHABLE shift to state 124
-- On UNARY shift to state 125
-- On TEST shift to state 126
-- On TEE_LOCAL shift to state 127
-- On STORE shift to state 129
-- On SET_LOCAL shift to state 134
-- On SET_GLOBAL shift to state 136
-- On SELECT shift to state 138
-- On RETURN shift to state 139
-- On NOP shift to state 140
-- On LPAR shift to state 141
-- On LOOP shift to state 155
-- On LOAD shift to state 148
-- On IF shift to state 157
-- On GROW_MEMORY shift to state 159
-- On GET_LOCAL shift to state 160
-- On GET_GLOBAL shift to state 162
-- On DROP shift to state 164
-- On CURRENT_MEMORY shift to state 165
-- On CONVERT shift to state 166
-- On CONST shift to state 167
-- On COMPARE shift to state 172
-- On CALL_INDIRECT shift to state 173
-- On CALL shift to state 175
-- On BR_TABLE shift to state 177
-- On BR_IF shift to state 180
-- On BR shift to state 182
-- On BLOCK shift to state 184
-- On BINARY shift to state 186
-- On plain_instr shift to state 187
-- On instr_list shift to state 190
-- On instr shift to state 189
-- On expr shift to state 191
-- On block_instr shift to state 192
## Reductions:
-- On RPAR END ELSE
--   reduce production instr_list ->

State 190:
## Known stack suffix:
## instr instr_list
## LR(1) items:
instr_list -> instr instr_list . [ RPAR END ELSE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production instr_list -> instr instr_list

State 191:
## Known stack suffix:
## expr
## LR(1) items:
instr -> expr . [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production instr -> expr

State 192:
## Known stack suffix:
## block_instr
## LR(1) items:
instr -> block_instr . [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production instr -> block_instr

State 193:
## Known stack suffix:
## block_sig
## LR(1) items:
block -> block_sig . instr_list [ RPAR END ELSE ]
## Transitions:
-- On UNREACHABLE shift to state 124
-- On UNARY shift to state 125
-- On TEST shift to state 126
-- On TEE_LOCAL shift to state 127
-- On STORE shift to state 129
-- On SET_LOCAL shift to state 134
-- On SET_GLOBAL shift to state 136
-- On SELECT shift to state 138
-- On RETURN shift to state 139
-- On NOP shift to state 140
-- On LPAR shift to state 141
-- On LOOP shift to state 155
-- On LOAD shift to state 148
-- On IF shift to state 157
-- On GROW_MEMORY shift to state 159
-- On GET_LOCAL shift to state 160
-- On GET_GLOBAL shift to state 162
-- On DROP shift to state 164
-- On CURRENT_MEMORY shift to state 165
-- On CONVERT shift to state 166
-- On CONST shift to state 167
-- On COMPARE shift to state 172
-- On CALL_INDIRECT shift to state 173
-- On CALL shift to state 175
-- On BR_TABLE shift to state 177
-- On BR_IF shift to state 180
-- On BR shift to state 182
-- On BLOCK shift to state 184
-- On BINARY shift to state 186
-- On plain_instr shift to state 187
-- On instr_list shift to state 194
-- On instr shift to state 189
-- On expr shift to state 191
-- On block_instr shift to state 192
## Reductions:
-- On RPAR END ELSE
--   reduce production instr_list ->

State 194:
## Known stack suffix:
## block_sig instr_list
## LR(1) items:
block -> block_sig instr_list . [ RPAR END ELSE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production block -> block_sig instr_list

State 195:
## Known stack suffix:
## BLOCK labeling_opt block
## LR(1) items:
block_instr -> BLOCK labeling_opt block . END labeling_end_opt [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
## Transitions:
-- On END shift to state 196
## Reductions:

State 196:
## Known stack suffix:
## BLOCK labeling_opt block END
## LR(1) items:
block_instr -> BLOCK labeling_opt block END . labeling_end_opt [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
## Transitions:
-- On VAR shift to state 3
-- On labeling_end_opt shift to state 197
-- On bind_var shift to state 198
## Reductions:
-- On UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY
--   reduce production labeling_end_opt ->

State 197:
## Known stack suffix:
## BLOCK labeling_opt block END labeling_end_opt
## LR(1) items:
block_instr -> BLOCK labeling_opt block END labeling_end_opt . [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production block_instr -> BLOCK labeling_opt block END labeling_end_opt

State 198:
## Known stack suffix:
## bind_var
## LR(1) items:
labeling_end_opt -> bind_var . [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production labeling_end_opt -> bind_var

State 199:
## Known stack suffix:
## bind_var
## LR(1) items:
labeling_opt -> bind_var . [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production labeling_opt -> bind_var

State 200:
## Known stack suffix:
## IF labeling_opt block
## LR(1) items:
block_instr -> IF labeling_opt block . END labeling_end_opt [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
block_instr -> IF labeling_opt block . ELSE labeling_end_opt instr_list END labeling_end_opt [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
## Transitions:
-- On END shift to state 201
-- On ELSE shift to state 203
## Reductions:

State 201:
## Known stack suffix:
## IF labeling_opt block END
## LR(1) items:
block_instr -> IF labeling_opt block END . labeling_end_opt [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
## Transitions:
-- On VAR shift to state 3
-- On labeling_end_opt shift to state 202
-- On bind_var shift to state 198
## Reductions:
-- On UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY
--   reduce production labeling_end_opt ->

State 202:
## Known stack suffix:
## IF labeling_opt block END labeling_end_opt
## LR(1) items:
block_instr -> IF labeling_opt block END labeling_end_opt . [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production block_instr -> IF labeling_opt block END labeling_end_opt

State 203:
## Known stack suffix:
## IF labeling_opt block ELSE
## LR(1) items:
block_instr -> IF labeling_opt block ELSE . labeling_end_opt instr_list END labeling_end_opt [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
## Transitions:
-- On VAR shift to state 3
-- On labeling_end_opt shift to state 204
-- On bind_var shift to state 198
## Reductions:
-- On UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY
--   reduce production labeling_end_opt ->

State 204:
## Known stack suffix:
## IF labeling_opt block ELSE labeling_end_opt
## LR(1) items:
block_instr -> IF labeling_opt block ELSE labeling_end_opt . instr_list END labeling_end_opt [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
## Transitions:
-- On UNREACHABLE shift to state 124
-- On UNARY shift to state 125
-- On TEST shift to state 126
-- On TEE_LOCAL shift to state 127
-- On STORE shift to state 129
-- On SET_LOCAL shift to state 134
-- On SET_GLOBAL shift to state 136
-- On SELECT shift to state 138
-- On RETURN shift to state 139
-- On NOP shift to state 140
-- On LPAR shift to state 141
-- On LOOP shift to state 155
-- On LOAD shift to state 148
-- On IF shift to state 157
-- On GROW_MEMORY shift to state 159
-- On GET_LOCAL shift to state 160
-- On GET_GLOBAL shift to state 162
-- On DROP shift to state 164
-- On CURRENT_MEMORY shift to state 165
-- On CONVERT shift to state 166
-- On CONST shift to state 167
-- On COMPARE shift to state 172
-- On CALL_INDIRECT shift to state 173
-- On CALL shift to state 175
-- On BR_TABLE shift to state 177
-- On BR_IF shift to state 180
-- On BR shift to state 182
-- On BLOCK shift to state 184
-- On BINARY shift to state 186
-- On plain_instr shift to state 187
-- On instr_list shift to state 205
-- On instr shift to state 189
-- On expr shift to state 191
-- On block_instr shift to state 192
## Reductions:
-- On END
--   reduce production instr_list ->

State 205:
## Known stack suffix:
## IF labeling_opt block ELSE labeling_end_opt instr_list
## LR(1) items:
block_instr -> IF labeling_opt block ELSE labeling_end_opt instr_list . END labeling_end_opt [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
## Transitions:
-- On END shift to state 206
## Reductions:

State 206:
## Known stack suffix:
## IF labeling_opt block ELSE labeling_end_opt instr_list END
## LR(1) items:
block_instr -> IF labeling_opt block ELSE labeling_end_opt instr_list END . labeling_end_opt [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
## Transitions:
-- On VAR shift to state 3
-- On labeling_end_opt shift to state 207
-- On bind_var shift to state 198
## Reductions:
-- On UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY
--   reduce production labeling_end_opt ->

State 207:
## Known stack suffix:
## IF labeling_opt block ELSE labeling_end_opt instr_list END labeling_end_opt
## LR(1) items:
block_instr -> IF labeling_opt block ELSE labeling_end_opt instr_list END labeling_end_opt . [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production block_instr -> IF labeling_opt block ELSE labeling_end_opt instr_list END labeling_end_opt

State 208:
## Known stack suffix:
## LOOP labeling_opt block
## LR(1) items:
block_instr -> LOOP labeling_opt block . END labeling_end_opt [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
## Transitions:
-- On END shift to state 209
## Reductions:

State 209:
## Known stack suffix:
## LOOP labeling_opt block END
## LR(1) items:
block_instr -> LOOP labeling_opt block END . labeling_end_opt [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
## Transitions:
-- On VAR shift to state 3
-- On labeling_end_opt shift to state 210
-- On bind_var shift to state 198
## Reductions:
-- On UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY
--   reduce production labeling_end_opt ->

State 210:
## Known stack suffix:
## LOOP labeling_opt block END labeling_end_opt
## LR(1) items:
block_instr -> LOOP labeling_opt block END labeling_end_opt . [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production block_instr -> LOOP labeling_opt block END labeling_end_opt

State 211:
## Known stack suffix:
## LPAR THEN instr_list
## LR(1) items:
if_ -> LPAR THEN instr_list . RPAR LPAR ELSE instr_list RPAR [ RPAR ]
if_ -> LPAR THEN instr_list . RPAR [ RPAR ]
## Transitions:
-- On RPAR shift to state 212
## Reductions:

State 212:
## Known stack suffix:
## LPAR THEN instr_list RPAR
## LR(1) items:
if_ -> LPAR THEN instr_list RPAR . LPAR ELSE instr_list RPAR [ RPAR ]
if_ -> LPAR THEN instr_list RPAR . [ RPAR ]
## Transitions:
-- On LPAR shift to state 213
## Reductions:
-- On RPAR
--   reduce production if_ -> LPAR THEN instr_list RPAR

State 213:
## Known stack suffix:
## LPAR THEN instr_list RPAR LPAR
## LR(1) items:
if_ -> LPAR THEN instr_list RPAR LPAR . ELSE instr_list RPAR [ RPAR ]
## Transitions:
-- On ELSE shift to state 214
## Reductions:

State 214:
## Known stack suffix:
## LPAR THEN instr_list RPAR LPAR ELSE
## LR(1) items:
if_ -> LPAR THEN instr_list RPAR LPAR ELSE . instr_list RPAR [ RPAR ]
## Transitions:
-- On UNREACHABLE shift to state 124
-- On UNARY shift to state 125
-- On TEST shift to state 126
-- On TEE_LOCAL shift to state 127
-- On STORE shift to state 129
-- On SET_LOCAL shift to state 134
-- On SET_GLOBAL shift to state 136
-- On SELECT shift to state 138
-- On RETURN shift to state 139
-- On NOP shift to state 140
-- On LPAR shift to state 141
-- On LOOP shift to state 155
-- On LOAD shift to state 148
-- On IF shift to state 157
-- On GROW_MEMORY shift to state 159
-- On GET_LOCAL shift to state 160
-- On GET_GLOBAL shift to state 162
-- On DROP shift to state 164
-- On CURRENT_MEMORY shift to state 165
-- On CONVERT shift to state 166
-- On CONST shift to state 167
-- On COMPARE shift to state 172
-- On CALL_INDIRECT shift to state 173
-- On CALL shift to state 175
-- On BR_TABLE shift to state 177
-- On BR_IF shift to state 180
-- On BR shift to state 182
-- On BLOCK shift to state 184
-- On BINARY shift to state 186
-- On plain_instr shift to state 187
-- On instr_list shift to state 215
-- On instr shift to state 189
-- On expr shift to state 191
-- On block_instr shift to state 192
## Reductions:
-- On RPAR
--   reduce production instr_list ->

State 215:
## Known stack suffix:
## LPAR THEN instr_list RPAR LPAR ELSE instr_list
## LR(1) items:
if_ -> LPAR THEN instr_list RPAR LPAR ELSE instr_list . RPAR [ RPAR ]
## Transitions:
-- On RPAR shift to state 216
## Reductions:

State 216:
## Known stack suffix:
## LPAR THEN instr_list RPAR LPAR ELSE instr_list RPAR
## LR(1) items:
if_ -> LPAR THEN instr_list RPAR LPAR ELSE instr_list RPAR . [ RPAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production if_ -> LPAR THEN instr_list RPAR LPAR ELSE instr_list RPAR

State 217:
## Known stack suffix:
## BLOCK
## LR(1) items:
expr1 -> BLOCK . labeling_opt block [ RPAR ]
## Transitions:
-- On VAR shift to state 3
-- On labeling_opt shift to state 218
-- On bind_var shift to state 199
## Reductions:
-- On UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY
--   reduce production labeling_opt ->

State 218:
## Known stack suffix:
## BLOCK labeling_opt
## LR(1) items:
expr1 -> BLOCK labeling_opt . block [ RPAR ]
## Transitions:
-- On UNREACHABLE shift to state 124
-- On UNARY shift to state 125
-- On TEST shift to state 126
-- On TEE_LOCAL shift to state 127
-- On STORE shift to state 129
-- On SET_LOCAL shift to state 134
-- On SET_GLOBAL shift to state 136
-- On SELECT shift to state 138
-- On RETURN shift to state 139
-- On NOP shift to state 140
-- On LPAR shift to state 144
-- On LOOP shift to state 155
-- On LOAD shift to state 148
-- On IF shift to state 157
-- On GROW_MEMORY shift to state 159
-- On GET_LOCAL shift to state 160
-- On GET_GLOBAL shift to state 162
-- On DROP shift to state 164
-- On CURRENT_MEMORY shift to state 165
-- On CONVERT shift to state 166
-- On CONST shift to state 167
-- On COMPARE shift to state 172
-- On CALL_INDIRECT shift to state 173
-- On CALL shift to state 175
-- On BR_TABLE shift to state 177
-- On BR_IF shift to state 180
-- On BR shift to state 182
-- On BLOCK shift to state 184
-- On BINARY shift to state 186
-- On plain_instr shift to state 187
-- On instr_list shift to state 188
-- On instr shift to state 189
-- On expr shift to state 191
-- On block_sig shift to state 193
-- On block_instr shift to state 192
-- On block shift to state 219
## Reductions:
-- On RPAR
--   reduce production instr_list ->

State 219:
## Known stack suffix:
## BLOCK labeling_opt block
## LR(1) items:
expr1 -> BLOCK labeling_opt block . [ RPAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr1 -> BLOCK labeling_opt block

State 220:
## Known stack suffix:
## plain_instr
## LR(1) items:
expr1 -> plain_instr . expr_list [ RPAR ]
## Transitions:
-- On LPAR shift to state 141
-- On expr_list shift to state 221
-- On expr shift to state 222
## Reductions:
-- On RPAR
--   reduce production expr_list ->

State 221:
## Known stack suffix:
## plain_instr expr_list
## LR(1) items:
expr1 -> plain_instr expr_list . [ RPAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr1 -> plain_instr expr_list

State 222:
## Known stack suffix:
## expr
## LR(1) items:
expr_list -> expr . expr_list [ RPAR ]
## Transitions:
-- On LPAR shift to state 141
-- On expr_list shift to state 223
-- On expr shift to state 222
## Reductions:
-- On RPAR
--   reduce production expr_list ->

State 223:
## Known stack suffix:
## expr expr_list
## LR(1) items:
expr_list -> expr expr_list . [ RPAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr_list -> expr expr_list

State 224:
## Known stack suffix:
## LPAR expr1
## LR(1) items:
expr -> LPAR expr1 . RPAR [ VAR UNREACHABLE UNARY TEST TEE_LOCAL STRING STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP NAT LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
## Transitions:
-- On RPAR shift to state 225
## Reductions:

State 225:
## Known stack suffix:
## LPAR expr1 RPAR
## LR(1) items:
expr -> LPAR expr1 RPAR . [ VAR UNREACHABLE UNARY TEST TEE_LOCAL STRING STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP NAT LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> LPAR expr1 RPAR

State 226:
## Known stack suffix:
## IF labeling_opt if_block
## LR(1) items:
expr1 -> IF labeling_opt if_block . [ RPAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr1 -> IF labeling_opt if_block

State 227:
## Known stack suffix:
## if_
## LR(1) items:
if_block -> if_ . [ RPAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production if_block -> if_

State 228:
## Known stack suffix:
## expr
## LR(1) items:
if_ -> expr . if_ [ RPAR ]
## Transitions:
-- On LPAR shift to state 229
-- On if_ shift to state 230
-- On expr shift to state 228
## Reductions:

State 229:
## Known stack suffix:
## LPAR
## LR(1) items:
expr -> LPAR . expr1 RPAR [ LPAR ]
if_ -> LPAR . THEN instr_list RPAR LPAR ELSE instr_list RPAR [ RPAR ]
if_ -> LPAR . THEN instr_list RPAR [ RPAR ]
## Transitions:
-- On UNREACHABLE shift to state 124
-- On UNARY shift to state 125
-- On THEN shift to state 154
-- On TEST shift to state 126
-- On TEE_LOCAL shift to state 127
-- On STORE shift to state 129
-- On SET_LOCAL shift to state 134
-- On SET_GLOBAL shift to state 136
-- On SELECT shift to state 138
-- On RETURN shift to state 139
-- On NOP shift to state 140
-- On LOOP shift to state 142
-- On LOAD shift to state 148
-- On IF shift to state 151
-- On GROW_MEMORY shift to state 159
-- On GET_LOCAL shift to state 160
-- On GET_GLOBAL shift to state 162
-- On DROP shift to state 164
-- On CURRENT_MEMORY shift to state 165
-- On CONVERT shift to state 166
-- On CONST shift to state 167
-- On COMPARE shift to state 172
-- On CALL_INDIRECT shift to state 173
-- On CALL shift to state 175
-- On BR_TABLE shift to state 177
-- On BR_IF shift to state 180
-- On BR shift to state 182
-- On BLOCK shift to state 217
-- On BINARY shift to state 186
-- On plain_instr shift to state 220
-- On expr1 shift to state 224
## Reductions:

State 230:
## Known stack suffix:
## expr if_
## LR(1) items:
if_ -> expr if_ . [ RPAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production if_ -> expr if_

State 231:
## Known stack suffix:
## block_sig
## LR(1) items:
if_block -> block_sig . if_block [ RPAR ]
## Transitions:
-- On LPAR shift to state 153
-- On if_block shift to state 232
-- On if_ shift to state 227
-- On expr shift to state 228
-- On block_sig shift to state 231
## Reductions:

State 232:
## Known stack suffix:
## block_sig if_block
## LR(1) items:
if_block -> block_sig if_block . [ RPAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production if_block -> block_sig if_block

State 233:
## Known stack suffix:
## LOOP labeling_opt block
## LR(1) items:
expr1 -> LOOP labeling_opt block . [ RPAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr1 -> LOOP labeling_opt block

State 234:
## Known stack suffix:
## instr_list
## LR(1) items:
const_expr -> instr_list . [ RPAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production const_expr -> instr_list

State 235:
## Known stack suffix:
## global_type const_expr
## LR(1) items:
global_fields -> global_type const_expr . [ RPAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production global_fields -> global_type const_expr

State 236:
## Known stack suffix:
## inline_export global_fields
## LR(1) items:
global_fields -> inline_export global_fields . [ RPAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production global_fields -> inline_export global_fields

State 237:
## Known stack suffix:
## LPAR GLOBAL bind_var_opt global_fields
## LR(1) items:
global -> LPAR GLOBAL bind_var_opt global_fields . RPAR [ RPAR LPAR EOF ]
## Transitions:
-- On RPAR shift to state 238
## Reductions:

State 238:
## Known stack suffix:
## LPAR GLOBAL bind_var_opt global_fields RPAR
## LR(1) items:
global -> LPAR GLOBAL bind_var_opt global_fields RPAR . [ RPAR LPAR EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production global -> LPAR GLOBAL bind_var_opt global_fields RPAR

State 239:
## Known stack suffix:
## LPAR FUNC
## LR(1) items:
func -> LPAR FUNC . bind_var_opt func_fields RPAR [ RPAR LPAR EOF ]
## Transitions:
-- On VAR shift to state 3
-- On bind_var_opt shift to state 240
-- On bind_var shift to state 61
## Reductions:
-- On UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY
--   reduce production bind_var_opt ->

State 240:
## Known stack suffix:
## LPAR FUNC bind_var_opt
## LR(1) items:
func -> LPAR FUNC bind_var_opt . func_fields RPAR [ RPAR LPAR EOF ]
## Transitions:
-- On UNREACHABLE shift to state 124
-- On UNARY shift to state 125
-- On TEST shift to state 126
-- On TEE_LOCAL shift to state 127
-- On STORE shift to state 129
-- On SET_LOCAL shift to state 134
-- On SET_GLOBAL shift to state 136
-- On SELECT shift to state 138
-- On RETURN shift to state 139
-- On NOP shift to state 140
-- On LPAR shift to state 241
-- On LOOP shift to state 155
-- On LOAD shift to state 148
-- On IF shift to state 157
-- On GROW_MEMORY shift to state 159
-- On GET_LOCAL shift to state 160
-- On GET_GLOBAL shift to state 162
-- On DROP shift to state 164
-- On CURRENT_MEMORY shift to state 165
-- On CONVERT shift to state 166
-- On CONST shift to state 167
-- On COMPARE shift to state 172
-- On CALL_INDIRECT shift to state 173
-- On CALL shift to state 175
-- On BR_TABLE shift to state 177
-- On BR_IF shift to state 180
-- On BR shift to state 182
-- On BLOCK shift to state 184
-- On BINARY shift to state 186
-- On type_use shift to state 268
-- On plain_instr shift to state 187
-- On instr_list shift to state 250
-- On instr shift to state 189
-- On inline_import shift to state 270
-- On inline_export shift to state 290
-- On func_result_body shift to state 262
-- On func_fields_body shift to state 291
-- On func_fields shift to state 293
-- On func_body shift to state 257
-- On expr shift to state 191
-- On block_instr shift to state 192
## Reductions:
-- On RPAR
--   reduce production instr_list ->

State 241:
## Known stack suffix:
## LPAR
## LR(1) items:
expr -> LPAR . expr1 RPAR [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
func_body -> LPAR . LOCAL value_type_list RPAR func_body [ RPAR ]
func_body -> LPAR . LOCAL bind_var VALUE_TYPE RPAR func_body [ RPAR ]
func_fields_body -> LPAR . PARAM value_type_list RPAR func_fields_body [ RPAR ]
func_fields_body -> LPAR . PARAM bind_var VALUE_TYPE RPAR func_fields_body [ RPAR ]
func_result_body -> LPAR . RESULT value_type_list RPAR func_result_body [ RPAR ]
inline_export -> LPAR . EXPORT name RPAR [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
inline_import -> LPAR . IMPORT name name RPAR [ RPAR LPAR ]
type_use -> LPAR . TYPE var RPAR [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
## Transitions:
-- On UNREACHABLE shift to state 124
-- On UNARY shift to state 125
-- On TYPE shift to state 108
-- On TEST shift to state 126
-- On TEE_LOCAL shift to state 127
-- On STORE shift to state 129
-- On SET_LOCAL shift to state 134
-- On SET_GLOBAL shift to state 136
-- On SELECT shift to state 138
-- On RETURN shift to state 139
-- On RESULT shift to state 242
-- On PARAM shift to state 258
-- On NOP shift to state 140
-- On LOOP shift to state 142
-- On LOCAL shift to state 246
-- On LOAD shift to state 148
-- On IMPORT shift to state 34
-- On IF shift to state 151
-- On GROW_MEMORY shift to state 159
-- On GET_LOCAL shift to state 160
-- On GET_GLOBAL shift to state 162
-- On EXPORT shift to state 39
-- On DROP shift to state 164
-- On CURRENT_MEMORY shift to state 165
-- On CONVERT shift to state 166
-- On CONST shift to state 167
-- On COMPARE shift to state 172
-- On CALL_INDIRECT shift to state 173
-- On CALL shift to state 175
-- On BR_TABLE shift to state 177
-- On BR_IF shift to state 180
-- On BR shift to state 182
-- On BLOCK shift to state 217
-- On BINARY shift to state 186
-- On plain_instr shift to state 220
-- On expr1 shift to state 224
## Reductions:

State 242:
## Known stack suffix:
## LPAR RESULT
## LR(1) items:
func_result_body -> LPAR RESULT . value_type_list RPAR func_result_body [ RPAR ]
## Transitions:
-- On VALUE_TYPE shift to state 8
-- On value_type_list shift to state 243
## Reductions:
-- On RPAR
--   reduce production value_type_list ->

State 243:
## Known stack suffix:
## LPAR RESULT value_type_list
## LR(1) items:
func_result_body -> LPAR RESULT value_type_list . RPAR func_result_body [ RPAR ]
## Transitions:
-- On RPAR shift to state 244
## Reductions:

State 244:
## Known stack suffix:
## LPAR RESULT value_type_list RPAR
## LR(1) items:
func_result_body -> LPAR RESULT value_type_list RPAR . func_result_body [ RPAR ]
## Transitions:
-- On UNREACHABLE shift to state 124
-- On UNARY shift to state 125
-- On TEST shift to state 126
-- On TEE_LOCAL shift to state 127
-- On STORE shift to state 129
-- On SET_LOCAL shift to state 134
-- On SET_GLOBAL shift to state 136
-- On SELECT shift to state 138
-- On RETURN shift to state 139
-- On NOP shift to state 140
-- On LPAR shift to state 245
-- On LOOP shift to state 155
-- On LOAD shift to state 148
-- On IF shift to state 157
-- On GROW_MEMORY shift to state 159
-- On GET_LOCAL shift to state 160
-- On GET_GLOBAL shift to state 162
-- On DROP shift to state 164
-- On CURRENT_MEMORY shift to state 165
-- On CONVERT shift to state 166
-- On CONST shift to state 167
-- On COMPARE shift to state 172
-- On CALL_INDIRECT shift to state 173
-- On CALL shift to state 175
-- On BR_TABLE shift to state 177
-- On BR_IF shift to state 180
-- On BR shift to state 182
-- On BLOCK shift to state 184
-- On BINARY shift to state 186
-- On plain_instr shift to state 187
-- On instr_list shift to state 250
-- On instr shift to state 189
-- On func_result_body shift to state 256
-- On func_body shift to state 257
-- On expr shift to state 191
-- On block_instr shift to state 192
## Reductions:
-- On RPAR
--   reduce production instr_list ->

State 245:
## Known stack suffix:
## LPAR
## LR(1) items:
expr -> LPAR . expr1 RPAR [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
func_body -> LPAR . LOCAL value_type_list RPAR func_body [ RPAR ]
func_body -> LPAR . LOCAL bind_var VALUE_TYPE RPAR func_body [ RPAR ]
func_result_body -> LPAR . RESULT value_type_list RPAR func_result_body [ RPAR ]
## Transitions:
-- On UNREACHABLE shift to state 124
-- On UNARY shift to state 125
-- On TEST shift to state 126
-- On TEE_LOCAL shift to state 127
-- On STORE shift to state 129
-- On SET_LOCAL shift to state 134
-- On SET_GLOBAL shift to state 136
-- On SELECT shift to state 138
-- On RETURN shift to state 139
-- On RESULT shift to state 242
-- On NOP shift to state 140
-- On LOOP shift to state 142
-- On LOCAL shift to state 246
-- On LOAD shift to state 148
-- On IF shift to state 151
-- On GROW_MEMORY shift to state 159
-- On GET_LOCAL shift to state 160
-- On GET_GLOBAL shift to state 162
-- On DROP shift to state 164
-- On CURRENT_MEMORY shift to state 165
-- On CONVERT shift to state 166
-- On CONST shift to state 167
-- On COMPARE shift to state 172
-- On CALL_INDIRECT shift to state 173
-- On CALL shift to state 175
-- On BR_TABLE shift to state 177
-- On BR_IF shift to state 180
-- On BR shift to state 182
-- On BLOCK shift to state 217
-- On BINARY shift to state 186
-- On plain_instr shift to state 220
-- On expr1 shift to state 224
## Reductions:

State 246:
## Known stack suffix:
## LPAR LOCAL
## LR(1) items:
func_body -> LPAR LOCAL . value_type_list RPAR func_body [ RPAR ]
func_body -> LPAR LOCAL . bind_var VALUE_TYPE RPAR func_body [ RPAR ]
## Transitions:
-- On VAR shift to state 3
-- On VALUE_TYPE shift to state 8
-- On value_type_list shift to state 247
-- On bind_var shift to state 252
## Reductions:
-- On RPAR
--   reduce production value_type_list ->

State 247:
## Known stack suffix:
## LPAR LOCAL value_type_list
## LR(1) items:
func_body -> LPAR LOCAL value_type_list . RPAR func_body [ RPAR ]
## Transitions:
-- On RPAR shift to state 248
## Reductions:

State 248:
## Known stack suffix:
## LPAR LOCAL value_type_list RPAR
## LR(1) items:
func_body -> LPAR LOCAL value_type_list RPAR . func_body [ RPAR ]
## Transitions:
-- On UNREACHABLE shift to state 124
-- On UNARY shift to state 125
-- On TEST shift to state 126
-- On TEE_LOCAL shift to state 127
-- On STORE shift to state 129
-- On SET_LOCAL shift to state 134
-- On SET_GLOBAL shift to state 136
-- On SELECT shift to state 138
-- On RETURN shift to state 139
-- On NOP shift to state 140
-- On LPAR shift to state 249
-- On LOOP shift to state 155
-- On LOAD shift to state 148
-- On IF shift to state 157
-- On GROW_MEMORY shift to state 159
-- On GET_LOCAL shift to state 160
-- On GET_GLOBAL shift to state 162
-- On DROP shift to state 164
-- On CURRENT_MEMORY shift to state 165
-- On CONVERT shift to state 166
-- On CONST shift to state 167
-- On COMPARE shift to state 172
-- On CALL_INDIRECT shift to state 173
-- On CALL shift to state 175
-- On BR_TABLE shift to state 177
-- On BR_IF shift to state 180
-- On BR shift to state 182
-- On BLOCK shift to state 184
-- On BINARY shift to state 186
-- On plain_instr shift to state 187
-- On instr_list shift to state 250
-- On instr shift to state 189
-- On func_body shift to state 251
-- On expr shift to state 191
-- On block_instr shift to state 192
## Reductions:
-- On RPAR
--   reduce production instr_list ->

State 249:
## Known stack suffix:
## LPAR
## LR(1) items:
expr -> LPAR . expr1 RPAR [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
func_body -> LPAR . LOCAL value_type_list RPAR func_body [ RPAR ]
func_body -> LPAR . LOCAL bind_var VALUE_TYPE RPAR func_body [ RPAR ]
## Transitions:
-- On UNREACHABLE shift to state 124
-- On UNARY shift to state 125
-- On TEST shift to state 126
-- On TEE_LOCAL shift to state 127
-- On STORE shift to state 129
-- On SET_LOCAL shift to state 134
-- On SET_GLOBAL shift to state 136
-- On SELECT shift to state 138
-- On RETURN shift to state 139
-- On NOP shift to state 140
-- On LOOP shift to state 142
-- On LOCAL shift to state 246
-- On LOAD shift to state 148
-- On IF shift to state 151
-- On GROW_MEMORY shift to state 159
-- On GET_LOCAL shift to state 160
-- On GET_GLOBAL shift to state 162
-- On DROP shift to state 164
-- On CURRENT_MEMORY shift to state 165
-- On CONVERT shift to state 166
-- On CONST shift to state 167
-- On COMPARE shift to state 172
-- On CALL_INDIRECT shift to state 173
-- On CALL shift to state 175
-- On BR_TABLE shift to state 177
-- On BR_IF shift to state 180
-- On BR shift to state 182
-- On BLOCK shift to state 217
-- On BINARY shift to state 186
-- On plain_instr shift to state 220
-- On expr1 shift to state 224
## Reductions:

State 250:
## Known stack suffix:
## instr_list
## LR(1) items:
func_body -> instr_list . [ RPAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production func_body -> instr_list

State 251:
## Known stack suffix:
## LPAR LOCAL value_type_list RPAR func_body
## LR(1) items:
func_body -> LPAR LOCAL value_type_list RPAR func_body . [ RPAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production func_body -> LPAR LOCAL value_type_list RPAR func_body

State 252:
## Known stack suffix:
## LPAR LOCAL bind_var
## LR(1) items:
func_body -> LPAR LOCAL bind_var . VALUE_TYPE RPAR func_body [ RPAR ]
## Transitions:
-- On VALUE_TYPE shift to state 253
## Reductions:

State 253:
## Known stack suffix:
## LPAR LOCAL bind_var VALUE_TYPE
## LR(1) items:
func_body -> LPAR LOCAL bind_var VALUE_TYPE . RPAR func_body [ RPAR ]
## Transitions:
-- On RPAR shift to state 254
## Reductions:

State 254:
## Known stack suffix:
## LPAR LOCAL bind_var VALUE_TYPE RPAR
## LR(1) items:
func_body -> LPAR LOCAL bind_var VALUE_TYPE RPAR . func_body [ RPAR ]
## Transitions:
-- On UNREACHABLE shift to state 124
-- On UNARY shift to state 125
-- On TEST shift to state 126
-- On TEE_LOCAL shift to state 127
-- On STORE shift to state 129
-- On SET_LOCAL shift to state 134
-- On SET_GLOBAL shift to state 136
-- On SELECT shift to state 138
-- On RETURN shift to state 139
-- On NOP shift to state 140
-- On LPAR shift to state 249
-- On LOOP shift to state 155
-- On LOAD shift to state 148
-- On IF shift to state 157
-- On GROW_MEMORY shift to state 159
-- On GET_LOCAL shift to state 160
-- On GET_GLOBAL shift to state 162
-- On DROP shift to state 164
-- On CURRENT_MEMORY shift to state 165
-- On CONVERT shift to state 166
-- On CONST shift to state 167
-- On COMPARE shift to state 172
-- On CALL_INDIRECT shift to state 173
-- On CALL shift to state 175
-- On BR_TABLE shift to state 177
-- On BR_IF shift to state 180
-- On BR shift to state 182
-- On BLOCK shift to state 184
-- On BINARY shift to state 186
-- On plain_instr shift to state 187
-- On instr_list shift to state 250
-- On instr shift to state 189
-- On func_body shift to state 255
-- On expr shift to state 191
-- On block_instr shift to state 192
## Reductions:
-- On RPAR
--   reduce production instr_list ->

State 255:
## Known stack suffix:
## LPAR LOCAL bind_var VALUE_TYPE RPAR func_body
## LR(1) items:
func_body -> LPAR LOCAL bind_var VALUE_TYPE RPAR func_body . [ RPAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production func_body -> LPAR LOCAL bind_var VALUE_TYPE RPAR func_body

State 256:
## Known stack suffix:
## LPAR RESULT value_type_list RPAR func_result_body
## LR(1) items:
func_result_body -> LPAR RESULT value_type_list RPAR func_result_body . [ RPAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production func_result_body -> LPAR RESULT value_type_list RPAR func_result_body

State 257:
## Known stack suffix:
## func_body
## LR(1) items:
func_result_body -> func_body . [ RPAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production func_result_body -> func_body

State 258:
## Known stack suffix:
## LPAR PARAM
## LR(1) items:
func_fields_body -> LPAR PARAM . value_type_list RPAR func_fields_body [ RPAR ]
func_fields_body -> LPAR PARAM . bind_var VALUE_TYPE RPAR func_fields_body [ RPAR ]
## Transitions:
-- On VAR shift to state 3
-- On VALUE_TYPE shift to state 8
-- On value_type_list shift to state 259
-- On bind_var shift to state 264
## Reductions:
-- On RPAR
--   reduce production value_type_list ->

State 259:
## Known stack suffix:
## LPAR PARAM value_type_list
## LR(1) items:
func_fields_body -> LPAR PARAM value_type_list . RPAR func_fields_body [ RPAR ]
## Transitions:
-- On RPAR shift to state 260
## Reductions:

State 260:
## Known stack suffix:
## LPAR PARAM value_type_list RPAR
## LR(1) items:
func_fields_body -> LPAR PARAM value_type_list RPAR . func_fields_body [ RPAR ]
## Transitions:
-- On UNREACHABLE shift to state 124
-- On UNARY shift to state 125
-- On TEST shift to state 126
-- On TEE_LOCAL shift to state 127
-- On STORE shift to state 129
-- On SET_LOCAL shift to state 134
-- On SET_GLOBAL shift to state 136
-- On SELECT shift to state 138
-- On RETURN shift to state 139
-- On NOP shift to state 140
-- On LPAR shift to state 261
-- On LOOP shift to state 155
-- On LOAD shift to state 148
-- On IF shift to state 157
-- On GROW_MEMORY shift to state 159
-- On GET_LOCAL shift to state 160
-- On GET_GLOBAL shift to state 162
-- On DROP shift to state 164
-- On CURRENT_MEMORY shift to state 165
-- On CONVERT shift to state 166
-- On CONST shift to state 167
-- On COMPARE shift to state 172
-- On CALL_INDIRECT shift to state 173
-- On CALL shift to state 175
-- On BR_TABLE shift to state 177
-- On BR_IF shift to state 180
-- On BR shift to state 182
-- On BLOCK shift to state 184
-- On BINARY shift to state 186
-- On plain_instr shift to state 187
-- On instr_list shift to state 250
-- On instr shift to state 189
-- On func_result_body shift to state 262
-- On func_fields_body shift to state 263
-- On func_body shift to state 257
-- On expr shift to state 191
-- On block_instr shift to state 192
## Reductions:
-- On RPAR
--   reduce production instr_list ->

State 261:
## Known stack suffix:
## LPAR
## LR(1) items:
expr -> LPAR . expr1 RPAR [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
func_body -> LPAR . LOCAL value_type_list RPAR func_body [ RPAR ]
func_body -> LPAR . LOCAL bind_var VALUE_TYPE RPAR func_body [ RPAR ]
func_fields_body -> LPAR . PARAM value_type_list RPAR func_fields_body [ RPAR ]
func_fields_body -> LPAR . PARAM bind_var VALUE_TYPE RPAR func_fields_body [ RPAR ]
func_result_body -> LPAR . RESULT value_type_list RPAR func_result_body [ RPAR ]
## Transitions:
-- On UNREACHABLE shift to state 124
-- On UNARY shift to state 125
-- On TEST shift to state 126
-- On TEE_LOCAL shift to state 127
-- On STORE shift to state 129
-- On SET_LOCAL shift to state 134
-- On SET_GLOBAL shift to state 136
-- On SELECT shift to state 138
-- On RETURN shift to state 139
-- On RESULT shift to state 242
-- On PARAM shift to state 258
-- On NOP shift to state 140
-- On LOOP shift to state 142
-- On LOCAL shift to state 246
-- On LOAD shift to state 148
-- On IF shift to state 151
-- On GROW_MEMORY shift to state 159
-- On GET_LOCAL shift to state 160
-- On GET_GLOBAL shift to state 162
-- On DROP shift to state 164
-- On CURRENT_MEMORY shift to state 165
-- On CONVERT shift to state 166
-- On CONST shift to state 167
-- On COMPARE shift to state 172
-- On CALL_INDIRECT shift to state 173
-- On CALL shift to state 175
-- On BR_TABLE shift to state 177
-- On BR_IF shift to state 180
-- On BR shift to state 182
-- On BLOCK shift to state 217
-- On BINARY shift to state 186
-- On plain_instr shift to state 220
-- On expr1 shift to state 224
## Reductions:

State 262:
## Known stack suffix:
## func_result_body
## LR(1) items:
func_fields_body -> func_result_body . [ RPAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production func_fields_body -> func_result_body

State 263:
## Known stack suffix:
## LPAR PARAM value_type_list RPAR func_fields_body
## LR(1) items:
func_fields_body -> LPAR PARAM value_type_list RPAR func_fields_body . [ RPAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production func_fields_body -> LPAR PARAM value_type_list RPAR func_fields_body

State 264:
## Known stack suffix:
## LPAR PARAM bind_var
## LR(1) items:
func_fields_body -> LPAR PARAM bind_var . VALUE_TYPE RPAR func_fields_body [ RPAR ]
## Transitions:
-- On VALUE_TYPE shift to state 265
## Reductions:

State 265:
## Known stack suffix:
## LPAR PARAM bind_var VALUE_TYPE
## LR(1) items:
func_fields_body -> LPAR PARAM bind_var VALUE_TYPE . RPAR func_fields_body [ RPAR ]
## Transitions:
-- On RPAR shift to state 266
## Reductions:

State 266:
## Known stack suffix:
## LPAR PARAM bind_var VALUE_TYPE RPAR
## LR(1) items:
func_fields_body -> LPAR PARAM bind_var VALUE_TYPE RPAR . func_fields_body [ RPAR ]
## Transitions:
-- On UNREACHABLE shift to state 124
-- On UNARY shift to state 125
-- On TEST shift to state 126
-- On TEE_LOCAL shift to state 127
-- On STORE shift to state 129
-- On SET_LOCAL shift to state 134
-- On SET_GLOBAL shift to state 136
-- On SELECT shift to state 138
-- On RETURN shift to state 139
-- On NOP shift to state 140
-- On LPAR shift to state 261
-- On LOOP shift to state 155
-- On LOAD shift to state 148
-- On IF shift to state 157
-- On GROW_MEMORY shift to state 159
-- On GET_LOCAL shift to state 160
-- On GET_GLOBAL shift to state 162
-- On DROP shift to state 164
-- On CURRENT_MEMORY shift to state 165
-- On CONVERT shift to state 166
-- On CONST shift to state 167
-- On COMPARE shift to state 172
-- On CALL_INDIRECT shift to state 173
-- On CALL shift to state 175
-- On BR_TABLE shift to state 177
-- On BR_IF shift to state 180
-- On BR shift to state 182
-- On BLOCK shift to state 184
-- On BINARY shift to state 186
-- On plain_instr shift to state 187
-- On instr_list shift to state 250
-- On instr shift to state 189
-- On func_result_body shift to state 262
-- On func_fields_body shift to state 267
-- On func_body shift to state 257
-- On expr shift to state 191
-- On block_instr shift to state 192
## Reductions:
-- On RPAR
--   reduce production instr_list ->

State 267:
## Known stack suffix:
## LPAR PARAM bind_var VALUE_TYPE RPAR func_fields_body
## LR(1) items:
func_fields_body -> LPAR PARAM bind_var VALUE_TYPE RPAR func_fields_body . [ RPAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production func_fields_body -> LPAR PARAM bind_var VALUE_TYPE RPAR func_fields_body

State 268:
## Known stack suffix:
## type_use
## LR(1) items:
func_fields -> type_use . func_fields_body [ RPAR ]
## Transitions:
-- On UNREACHABLE shift to state 124
-- On UNARY shift to state 125
-- On TEST shift to state 126
-- On TEE_LOCAL shift to state 127
-- On STORE shift to state 129
-- On SET_LOCAL shift to state 134
-- On SET_GLOBAL shift to state 136
-- On SELECT shift to state 138
-- On RETURN shift to state 139
-- On NOP shift to state 140
-- On LPAR shift to state 261
-- On LOOP shift to state 155
-- On LOAD shift to state 148
-- On IF shift to state 157
-- On GROW_MEMORY shift to state 159
-- On GET_LOCAL shift to state 160
-- On GET_GLOBAL shift to state 162
-- On DROP shift to state 164
-- On CURRENT_MEMORY shift to state 165
-- On CONVERT shift to state 166
-- On CONST shift to state 167
-- On COMPARE shift to state 172
-- On CALL_INDIRECT shift to state 173
-- On CALL shift to state 175
-- On BR_TABLE shift to state 177
-- On BR_IF shift to state 180
-- On BR shift to state 182
-- On BLOCK shift to state 184
-- On BINARY shift to state 186
-- On plain_instr shift to state 187
-- On instr_list shift to state 250
-- On instr shift to state 189
-- On func_result_body shift to state 262
-- On func_fields_body shift to state 269
-- On func_body shift to state 257
-- On expr shift to state 191
-- On block_instr shift to state 192
## Reductions:
-- On RPAR
--   reduce production instr_list ->

State 269:
## Known stack suffix:
## type_use func_fields_body
## LR(1) items:
func_fields -> type_use func_fields_body . [ RPAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production func_fields -> type_use func_fields_body

State 270:
## Known stack suffix:
## inline_import
## LR(1) items:
func_fields -> inline_import . type_use func_fields_import [ RPAR ]
func_fields -> inline_import . func_fields_import [ RPAR ]
## Transitions:
-- On LPAR shift to state 271
-- On type_use shift to state 287
-- On func_fields_import_result shift to state 281
-- On func_fields_import shift to state 289
## Reductions:
-- On RPAR
--   reduce production func_fields_import_result ->

State 271:
## Known stack suffix:
## LPAR
## LR(1) items:
func_fields_import -> LPAR . PARAM value_type_list RPAR func_fields_import [ RPAR ]
func_fields_import -> LPAR . PARAM bind_var VALUE_TYPE RPAR func_fields_import [ RPAR ]
func_fields_import_result -> LPAR . RESULT value_type_list RPAR func_fields_import_result [ RPAR ]
type_use -> LPAR . TYPE var RPAR [ RPAR LPAR ]
## Transitions:
-- On TYPE shift to state 108
-- On RESULT shift to state 272
-- On PARAM shift to state 277
## Reductions:

State 272:
## Known stack suffix:
## LPAR RESULT
## LR(1) items:
func_fields_import_result -> LPAR RESULT . value_type_list RPAR func_fields_import_result [ RPAR ]
## Transitions:
-- On VALUE_TYPE shift to state 8
-- On value_type_list shift to state 273
## Reductions:
-- On RPAR
--   reduce production value_type_list ->

State 273:
## Known stack suffix:
## LPAR RESULT value_type_list
## LR(1) items:
func_fields_import_result -> LPAR RESULT value_type_list . RPAR func_fields_import_result [ RPAR ]
## Transitions:
-- On RPAR shift to state 274
## Reductions:

State 274:
## Known stack suffix:
## LPAR RESULT value_type_list RPAR
## LR(1) items:
func_fields_import_result -> LPAR RESULT value_type_list RPAR . func_fields_import_result [ RPAR ]
## Transitions:
-- On LPAR shift to state 275
-- On func_fields_import_result shift to state 276
## Reductions:
-- On RPAR
--   reduce production func_fields_import_result ->

State 275:
## Known stack suffix:
## LPAR
## LR(1) items:
func_fields_import_result -> LPAR . RESULT value_type_list RPAR func_fields_import_result [ RPAR ]
## Transitions:
-- On RESULT shift to state 272
## Reductions:

State 276:
## Known stack suffix:
## LPAR RESULT value_type_list RPAR func_fields_import_result
## LR(1) items:
func_fields_import_result -> LPAR RESULT value_type_list RPAR func_fields_import_result . [ RPAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production func_fields_import_result -> LPAR RESULT value_type_list RPAR func_fields_import_result

State 277:
## Known stack suffix:
## LPAR PARAM
## LR(1) items:
func_fields_import -> LPAR PARAM . value_type_list RPAR func_fields_import [ RPAR ]
func_fields_import -> LPAR PARAM . bind_var VALUE_TYPE RPAR func_fields_import [ RPAR ]
## Transitions:
-- On VAR shift to state 3
-- On VALUE_TYPE shift to state 8
-- On value_type_list shift to state 278
-- On bind_var shift to state 283
## Reductions:
-- On RPAR
--   reduce production value_type_list ->

State 278:
## Known stack suffix:
## LPAR PARAM value_type_list
## LR(1) items:
func_fields_import -> LPAR PARAM value_type_list . RPAR func_fields_import [ RPAR ]
## Transitions:
-- On RPAR shift to state 279
## Reductions:

State 279:
## Known stack suffix:
## LPAR PARAM value_type_list RPAR
## LR(1) items:
func_fields_import -> LPAR PARAM value_type_list RPAR . func_fields_import [ RPAR ]
## Transitions:
-- On LPAR shift to state 280
-- On func_fields_import_result shift to state 281
-- On func_fields_import shift to state 282
## Reductions:
-- On RPAR
--   reduce production func_fields_import_result ->

State 280:
## Known stack suffix:
## LPAR
## LR(1) items:
func_fields_import -> LPAR . PARAM value_type_list RPAR func_fields_import [ RPAR ]
func_fields_import -> LPAR . PARAM bind_var VALUE_TYPE RPAR func_fields_import [ RPAR ]
func_fields_import_result -> LPAR . RESULT value_type_list RPAR func_fields_import_result [ RPAR ]
## Transitions:
-- On RESULT shift to state 272
-- On PARAM shift to state 277
## Reductions:

State 281:
## Known stack suffix:
## func_fields_import_result
## LR(1) items:
func_fields_import -> func_fields_import_result . [ RPAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production func_fields_import -> func_fields_import_result

State 282:
## Known stack suffix:
## LPAR PARAM value_type_list RPAR func_fields_import
## LR(1) items:
func_fields_import -> LPAR PARAM value_type_list RPAR func_fields_import . [ RPAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production func_fields_import -> LPAR PARAM value_type_list RPAR func_fields_import

State 283:
## Known stack suffix:
## LPAR PARAM bind_var
## LR(1) items:
func_fields_import -> LPAR PARAM bind_var . VALUE_TYPE RPAR func_fields_import [ RPAR ]
## Transitions:
-- On VALUE_TYPE shift to state 284
## Reductions:

State 284:
## Known stack suffix:
## LPAR PARAM bind_var VALUE_TYPE
## LR(1) items:
func_fields_import -> LPAR PARAM bind_var VALUE_TYPE . RPAR func_fields_import [ RPAR ]
## Transitions:
-- On RPAR shift to state 285
## Reductions:

State 285:
## Known stack suffix:
## LPAR PARAM bind_var VALUE_TYPE RPAR
## LR(1) items:
func_fields_import -> LPAR PARAM bind_var VALUE_TYPE RPAR . func_fields_import [ RPAR ]
## Transitions:
-- On LPAR shift to state 280
-- On func_fields_import_result shift to state 281
-- On func_fields_import shift to state 286
## Reductions:
-- On RPAR
--   reduce production func_fields_import_result ->

State 286:
## Known stack suffix:
## LPAR PARAM bind_var VALUE_TYPE RPAR func_fields_import
## LR(1) items:
func_fields_import -> LPAR PARAM bind_var VALUE_TYPE RPAR func_fields_import . [ RPAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production func_fields_import -> LPAR PARAM bind_var VALUE_TYPE RPAR func_fields_import

State 287:
## Known stack suffix:
## inline_import type_use
## LR(1) items:
func_fields -> inline_import type_use . func_fields_import [ RPAR ]
## Transitions:
-- On LPAR shift to state 280
-- On func_fields_import_result shift to state 281
-- On func_fields_import shift to state 288
## Reductions:
-- On RPAR
--   reduce production func_fields_import_result ->

State 288:
## Known stack suffix:
## inline_import type_use func_fields_import
## LR(1) items:
func_fields -> inline_import type_use func_fields_import . [ RPAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production func_fields -> inline_import type_use func_fields_import

State 289:
## Known stack suffix:
## inline_import func_fields_import
## LR(1) items:
func_fields -> inline_import func_fields_import . [ RPAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production func_fields -> inline_import func_fields_import

State 290:
## Known stack suffix:
## inline_export
## LR(1) items:
func_fields -> inline_export . func_fields [ RPAR ]
## Transitions:
-- On UNREACHABLE shift to state 124
-- On UNARY shift to state 125
-- On TEST shift to state 126
-- On TEE_LOCAL shift to state 127
-- On STORE shift to state 129
-- On SET_LOCAL shift to state 134
-- On SET_GLOBAL shift to state 136
-- On SELECT shift to state 138
-- On RETURN shift to state 139
-- On NOP shift to state 140
-- On LPAR shift to state 241
-- On LOOP shift to state 155
-- On LOAD shift to state 148
-- On IF shift to state 157
-- On GROW_MEMORY shift to state 159
-- On GET_LOCAL shift to state 160
-- On GET_GLOBAL shift to state 162
-- On DROP shift to state 164
-- On CURRENT_MEMORY shift to state 165
-- On CONVERT shift to state 166
-- On CONST shift to state 167
-- On COMPARE shift to state 172
-- On CALL_INDIRECT shift to state 173
-- On CALL shift to state 175
-- On BR_TABLE shift to state 177
-- On BR_IF shift to state 180
-- On BR shift to state 182
-- On BLOCK shift to state 184
-- On BINARY shift to state 186
-- On type_use shift to state 268
-- On plain_instr shift to state 187
-- On instr_list shift to state 250
-- On instr shift to state 189
-- On inline_import shift to state 270
-- On inline_export shift to state 290
-- On func_result_body shift to state 262
-- On func_fields_body shift to state 291
-- On func_fields shift to state 292
-- On func_body shift to state 257
-- On expr shift to state 191
-- On block_instr shift to state 192
## Reductions:
-- On RPAR
--   reduce production instr_list ->

State 291:
## Known stack suffix:
## func_fields_body
## LR(1) items:
func_fields -> func_fields_body . [ RPAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production func_fields -> func_fields_body

State 292:
## Known stack suffix:
## inline_export func_fields
## LR(1) items:
func_fields -> inline_export func_fields . [ RPAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production func_fields -> inline_export func_fields

State 293:
## Known stack suffix:
## LPAR FUNC bind_var_opt func_fields
## LR(1) items:
func -> LPAR FUNC bind_var_opt func_fields . RPAR [ RPAR LPAR EOF ]
## Transitions:
-- On RPAR shift to state 294
## Reductions:

State 294:
## Known stack suffix:
## LPAR FUNC bind_var_opt func_fields RPAR
## LR(1) items:
func -> LPAR FUNC bind_var_opt func_fields RPAR . [ RPAR LPAR EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production func -> LPAR FUNC bind_var_opt func_fields RPAR

State 295:
## Known stack suffix:
## LPAR EXPORT
## LR(1) items:
export -> LPAR EXPORT . name export_desc RPAR [ RPAR LPAR EOF ]
## Transitions:
-- On STRING shift to state 35
-- On name shift to state 296
## Reductions:

State 296:
## Known stack suffix:
## LPAR EXPORT name
## LR(1) items:
export -> LPAR EXPORT name . export_desc RPAR [ RPAR LPAR EOF ]
## Transitions:
-- On LPAR shift to state 297
-- On export_desc shift to state 310
## Reductions:

State 297:
## Known stack suffix:
## LPAR
## LR(1) items:
export_desc -> LPAR . FUNC var RPAR [ RPAR ]
export_desc -> LPAR . TABLE var RPAR [ RPAR ]
export_desc -> LPAR . MEMORY var RPAR [ RPAR ]
export_desc -> LPAR . GLOBAL var RPAR [ RPAR ]
## Transitions:
-- On TABLE shift to state 298
-- On MEMORY shift to state 301
-- On GLOBAL shift to state 304
-- On FUNC shift to state 307
## Reductions:

State 298:
## Known stack suffix:
## LPAR TABLE
## LR(1) items:
export_desc -> LPAR TABLE . var RPAR [ RPAR ]
## Transitions:
-- On VAR shift to state 55
-- On NAT shift to state 56
-- On var shift to state 299
## Reductions:

State 299:
## Known stack suffix:
## LPAR TABLE var
## LR(1) items:
export_desc -> LPAR TABLE var . RPAR [ RPAR ]
## Transitions:
-- On RPAR shift to state 300
## Reductions:

State 300:
## Known stack suffix:
## LPAR TABLE var RPAR
## LR(1) items:
export_desc -> LPAR TABLE var RPAR . [ RPAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production export_desc -> LPAR TABLE var RPAR

State 301:
## Known stack suffix:
## LPAR MEMORY
## LR(1) items:
export_desc -> LPAR MEMORY . var RPAR [ RPAR ]
## Transitions:
-- On VAR shift to state 55
-- On NAT shift to state 56
-- On var shift to state 302
## Reductions:

State 302:
## Known stack suffix:
## LPAR MEMORY var
## LR(1) items:
export_desc -> LPAR MEMORY var . RPAR [ RPAR ]
## Transitions:
-- On RPAR shift to state 303
## Reductions:

State 303:
## Known stack suffix:
## LPAR MEMORY var RPAR
## LR(1) items:
export_desc -> LPAR MEMORY var RPAR . [ RPAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production export_desc -> LPAR MEMORY var RPAR

State 304:
## Known stack suffix:
## LPAR GLOBAL
## LR(1) items:
export_desc -> LPAR GLOBAL . var RPAR [ RPAR ]
## Transitions:
-- On VAR shift to state 55
-- On NAT shift to state 56
-- On var shift to state 305
## Reductions:

State 305:
## Known stack suffix:
## LPAR GLOBAL var
## LR(1) items:
export_desc -> LPAR GLOBAL var . RPAR [ RPAR ]
## Transitions:
-- On RPAR shift to state 306
## Reductions:

State 306:
## Known stack suffix:
## LPAR GLOBAL var RPAR
## LR(1) items:
export_desc -> LPAR GLOBAL var RPAR . [ RPAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production export_desc -> LPAR GLOBAL var RPAR

State 307:
## Known stack suffix:
## LPAR FUNC
## LR(1) items:
export_desc -> LPAR FUNC . var RPAR [ RPAR ]
## Transitions:
-- On VAR shift to state 55
-- On NAT shift to state 56
-- On var shift to state 308
## Reductions:

State 308:
## Known stack suffix:
## LPAR FUNC var
## LR(1) items:
export_desc -> LPAR FUNC var . RPAR [ RPAR ]
## Transitions:
-- On RPAR shift to state 309
## Reductions:

State 309:
## Known stack suffix:
## LPAR FUNC var RPAR
## LR(1) items:
export_desc -> LPAR FUNC var RPAR . [ RPAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production export_desc -> LPAR FUNC var RPAR

State 310:
## Known stack suffix:
## LPAR EXPORT name export_desc
## LR(1) items:
export -> LPAR EXPORT name export_desc . RPAR [ RPAR LPAR EOF ]
## Transitions:
-- On RPAR shift to state 311
## Reductions:

State 311:
## Known stack suffix:
## LPAR EXPORT name export_desc RPAR
## LR(1) items:
export -> LPAR EXPORT name export_desc RPAR . [ RPAR LPAR EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production export -> LPAR EXPORT name export_desc RPAR

State 312:
## Known stack suffix:
## LPAR ELEM
## LR(1) items:
elem -> LPAR ELEM . var offset var_list RPAR [ RPAR LPAR EOF ]
elem -> LPAR ELEM . offset var_list RPAR [ RPAR LPAR EOF ]
## Transitions:
-- On VAR shift to state 55
-- On NAT shift to state 56
-- On LPAR shift to state 313
-- On var shift to state 317
-- On offset shift to state 322
-- On expr shift to state 321
## Reductions:

State 313:
## Known stack suffix:
## LPAR
## LR(1) items:
expr -> LPAR . expr1 RPAR [ VAR STRING RPAR NAT ]
offset -> LPAR . OFFSET const_expr RPAR [ VAR STRING RPAR NAT ]
## Transitions:
-- On UNREACHABLE shift to state 124
-- On UNARY shift to state 125
-- On TEST shift to state 126
-- On TEE_LOCAL shift to state 127
-- On STORE shift to state 129
-- On SET_LOCAL shift to state 134
-- On SET_GLOBAL shift to state 136
-- On SELECT shift to state 138
-- On RETURN shift to state 139
-- On OFFSET shift to state 314
-- On NOP shift to state 140
-- On LOOP shift to state 142
-- On LOAD shift to state 148
-- On IF shift to state 151
-- On GROW_MEMORY shift to state 159
-- On GET_LOCAL shift to state 160
-- On GET_GLOBAL shift to state 162
-- On DROP shift to state 164
-- On CURRENT_MEMORY shift to state 165
-- On CONVERT shift to state 166
-- On CONST shift to state 167
-- On COMPARE shift to state 172
-- On CALL_INDIRECT shift to state 173
-- On CALL shift to state 175
-- On BR_TABLE shift to state 177
-- On BR_IF shift to state 180
-- On BR shift to state 182
-- On BLOCK shift to state 217
-- On BINARY shift to state 186
-- On plain_instr shift to state 220
-- On expr1 shift to state 224
## Reductions:

State 314:
## Known stack suffix:
## LPAR OFFSET
## LR(1) items:
offset -> LPAR OFFSET . const_expr RPAR [ VAR STRING RPAR NAT ]
## Transitions:
-- On UNREACHABLE shift to state 124
-- On UNARY shift to state 125
-- On TEST shift to state 126
-- On TEE_LOCAL shift to state 127
-- On STORE shift to state 129
-- On SET_LOCAL shift to state 134
-- On SET_GLOBAL shift to state 136
-- On SELECT shift to state 138
-- On RETURN shift to state 139
-- On NOP shift to state 140
-- On LPAR shift to state 141
-- On LOOP shift to state 155
-- On LOAD shift to state 148
-- On IF shift to state 157
-- On GROW_MEMORY shift to state 159
-- On GET_LOCAL shift to state 160
-- On GET_GLOBAL shift to state 162
-- On DROP shift to state 164
-- On CURRENT_MEMORY shift to state 165
-- On CONVERT shift to state 166
-- On CONST shift to state 167
-- On COMPARE shift to state 172
-- On CALL_INDIRECT shift to state 173
-- On CALL shift to state 175
-- On BR_TABLE shift to state 177
-- On BR_IF shift to state 180
-- On BR shift to state 182
-- On BLOCK shift to state 184
-- On BINARY shift to state 186
-- On plain_instr shift to state 187
-- On instr_list shift to state 234
-- On instr shift to state 189
-- On expr shift to state 191
-- On const_expr shift to state 315
-- On block_instr shift to state 192
## Reductions:
-- On RPAR
--   reduce production instr_list ->

State 315:
## Known stack suffix:
## LPAR OFFSET const_expr
## LR(1) items:
offset -> LPAR OFFSET const_expr . RPAR [ VAR STRING RPAR NAT ]
## Transitions:
-- On RPAR shift to state 316
## Reductions:

State 316:
## Known stack suffix:
## LPAR OFFSET const_expr RPAR
## LR(1) items:
offset -> LPAR OFFSET const_expr RPAR . [ VAR STRING RPAR NAT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production offset -> LPAR OFFSET const_expr RPAR

State 317:
## Known stack suffix:
## LPAR ELEM var
## LR(1) items:
elem -> LPAR ELEM var . offset var_list RPAR [ RPAR LPAR EOF ]
## Transitions:
-- On LPAR shift to state 313
-- On offset shift to state 318
-- On expr shift to state 321
## Reductions:

State 318:
## Known stack suffix:
## LPAR ELEM var offset
## LR(1) items:
elem -> LPAR ELEM var offset . var_list RPAR [ RPAR LPAR EOF ]
## Transitions:
-- On VAR shift to state 55
-- On NAT shift to state 56
-- On var_list shift to state 319
-- On var shift to state 59
## Reductions:
-- On RPAR
--   reduce production var_list ->

State 319:
## Known stack suffix:
## LPAR ELEM var offset var_list
## LR(1) items:
elem -> LPAR ELEM var offset var_list . RPAR [ RPAR LPAR EOF ]
## Transitions:
-- On RPAR shift to state 320
## Reductions:

State 320:
## Known stack suffix:
## LPAR ELEM var offset var_list RPAR
## LR(1) items:
elem -> LPAR ELEM var offset var_list RPAR . [ RPAR LPAR EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production elem -> LPAR ELEM var offset var_list RPAR

State 321:
## Known stack suffix:
## expr
## LR(1) items:
offset -> expr . [ VAR STRING RPAR NAT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production offset -> expr

State 322:
## Known stack suffix:
## LPAR ELEM offset
## LR(1) items:
elem -> LPAR ELEM offset . var_list RPAR [ RPAR LPAR EOF ]
## Transitions:
-- On VAR shift to state 55
-- On NAT shift to state 56
-- On var_list shift to state 323
-- On var shift to state 59
## Reductions:
-- On RPAR
--   reduce production var_list ->

State 323:
## Known stack suffix:
## LPAR ELEM offset var_list
## LR(1) items:
elem -> LPAR ELEM offset var_list . RPAR [ RPAR LPAR EOF ]
## Transitions:
-- On RPAR shift to state 324
## Reductions:

State 324:
## Known stack suffix:
## LPAR ELEM offset var_list RPAR
## LR(1) items:
elem -> LPAR ELEM offset var_list RPAR . [ RPAR LPAR EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production elem -> LPAR ELEM offset var_list RPAR

State 325:
## Known stack suffix:
## LPAR DATA
## LR(1) items:
data -> LPAR DATA . var offset string_list RPAR [ RPAR LPAR EOF ]
data -> LPAR DATA . offset string_list RPAR [ RPAR LPAR EOF ]
## Transitions:
-- On VAR shift to state 55
-- On NAT shift to state 56
-- On LPAR shift to state 313
-- On var shift to state 326
-- On offset shift to state 330
-- On expr shift to state 321
## Reductions:

State 326:
## Known stack suffix:
## LPAR DATA var
## LR(1) items:
data -> LPAR DATA var . offset string_list RPAR [ RPAR LPAR EOF ]
## Transitions:
-- On LPAR shift to state 313
-- On offset shift to state 327
-- On expr shift to state 321
## Reductions:

State 327:
## Known stack suffix:
## LPAR DATA var offset
## LR(1) items:
data -> LPAR DATA var offset . string_list RPAR [ RPAR LPAR EOF ]
## Transitions:
-- On string_list shift to state 328
## Default reduction:
-- After reading the next token, reduce production string_list ->

State 328:
## Known stack suffix:
## LPAR DATA var offset string_list
## LR(1) items:
data -> LPAR DATA var offset string_list . RPAR [ RPAR LPAR EOF ]
string_list -> string_list . STRING [ STRING RPAR ]
## Transitions:
-- On STRING shift to state 74
-- On RPAR shift to state 329
## Reductions:

State 329:
## Known stack suffix:
## LPAR DATA var offset string_list RPAR
## LR(1) items:
data -> LPAR DATA var offset string_list RPAR . [ RPAR LPAR EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production data -> LPAR DATA var offset string_list RPAR

State 330:
## Known stack suffix:
## LPAR DATA offset
## LR(1) items:
data -> LPAR DATA offset . string_list RPAR [ RPAR LPAR EOF ]
## Transitions:
-- On string_list shift to state 331
## Default reduction:
-- After reading the next token, reduce production string_list ->

State 331:
## Known stack suffix:
## LPAR DATA offset string_list
## LR(1) items:
data -> LPAR DATA offset string_list . RPAR [ RPAR LPAR EOF ]
string_list -> string_list . STRING [ STRING RPAR ]
## Transitions:
-- On STRING shift to state 74
-- On RPAR shift to state 332
## Reductions:

State 332:
## Known stack suffix:
## LPAR DATA offset string_list RPAR
## LR(1) items:
data -> LPAR DATA offset string_list RPAR . [ RPAR LPAR EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production data -> LPAR DATA offset string_list RPAR

State 333:
## Known stack suffix:
## type_def
## LR(1) items:
module_fields1 -> type_def . module_fields [ RPAR EOF ]
## Transitions:
-- On LPAR shift to state 68
-- On type_def shift to state 333
-- On table shift to state 334
-- On start shift to state 335
-- On module_fields1 shift to state 336
-- On module_fields shift to state 353
-- On memory shift to state 338
-- On import shift to state 340
-- On global shift to state 342
-- On func shift to state 344
-- On export shift to state 346
-- On elem shift to state 348
-- On data shift to state 350
## Reductions:
-- On RPAR EOF
--   reduce production module_fields ->

State 334:
## Known stack suffix:
## table
## LR(1) items:
module_fields1 -> table . module_fields [ RPAR EOF ]
## Transitions:
-- On LPAR shift to state 68
-- On type_def shift to state 333
-- On table shift to state 334
-- On start shift to state 335
-- On module_fields1 shift to state 336
-- On module_fields shift to state 352
-- On memory shift to state 338
-- On import shift to state 340
-- On global shift to state 342
-- On func shift to state 344
-- On export shift to state 346
-- On elem shift to state 348
-- On data shift to state 350
## Reductions:
-- On RPAR EOF
--   reduce production module_fields ->

State 335:
## Known stack suffix:
## start
## LR(1) items:
module_fields1 -> start . module_fields [ RPAR EOF ]
## Transitions:
-- On LPAR shift to state 68
-- On type_def shift to state 333
-- On table shift to state 334
-- On start shift to state 335
-- On module_fields1 shift to state 336
-- On module_fields shift to state 337
-- On memory shift to state 338
-- On import shift to state 340
-- On global shift to state 342
-- On func shift to state 344
-- On export shift to state 346
-- On elem shift to state 348
-- On data shift to state 350
## Reductions:
-- On RPAR EOF
--   reduce production module_fields ->

State 336:
## Known stack suffix:
## module_fields1
## LR(1) items:
module_fields -> module_fields1 . [ RPAR EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production module_fields -> module_fields1

State 337:
## Known stack suffix:
## start module_fields
## LR(1) items:
module_fields1 -> start module_fields . [ RPAR EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production module_fields1 -> start module_fields

State 338:
## Known stack suffix:
## memory
## LR(1) items:
module_fields1 -> memory . module_fields [ RPAR EOF ]
## Transitions:
-- On LPAR shift to state 68
-- On type_def shift to state 333
-- On table shift to state 334
-- On start shift to state 335
-- On module_fields1 shift to state 336
-- On module_fields shift to state 339
-- On memory shift to state 338
-- On import shift to state 340
-- On global shift to state 342
-- On func shift to state 344
-- On export shift to state 346
-- On elem shift to state 348
-- On data shift to state 350
## Reductions:
-- On RPAR EOF
--   reduce production module_fields ->

State 339:
## Known stack suffix:
## memory module_fields
## LR(1) items:
module_fields1 -> memory module_fields . [ RPAR EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production module_fields1 -> memory module_fields

State 340:
## Known stack suffix:
## import
## LR(1) items:
module_fields1 -> import . module_fields [ RPAR EOF ]
## Transitions:
-- On LPAR shift to state 68
-- On type_def shift to state 333
-- On table shift to state 334
-- On start shift to state 335
-- On module_fields1 shift to state 336
-- On module_fields shift to state 341
-- On memory shift to state 338
-- On import shift to state 340
-- On global shift to state 342
-- On func shift to state 344
-- On export shift to state 346
-- On elem shift to state 348
-- On data shift to state 350
## Reductions:
-- On RPAR EOF
--   reduce production module_fields ->

State 341:
## Known stack suffix:
## import module_fields
## LR(1) items:
module_fields1 -> import module_fields . [ RPAR EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production module_fields1 -> import module_fields

State 342:
## Known stack suffix:
## global
## LR(1) items:
module_fields1 -> global . module_fields [ RPAR EOF ]
## Transitions:
-- On LPAR shift to state 68
-- On type_def shift to state 333
-- On table shift to state 334
-- On start shift to state 335
-- On module_fields1 shift to state 336
-- On module_fields shift to state 343
-- On memory shift to state 338
-- On import shift to state 340
-- On global shift to state 342
-- On func shift to state 344
-- On export shift to state 346
-- On elem shift to state 348
-- On data shift to state 350
## Reductions:
-- On RPAR EOF
--   reduce production module_fields ->

State 343:
## Known stack suffix:
## global module_fields
## LR(1) items:
module_fields1 -> global module_fields . [ RPAR EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production module_fields1 -> global module_fields

State 344:
## Known stack suffix:
## func
## LR(1) items:
module_fields1 -> func . module_fields [ RPAR EOF ]
## Transitions:
-- On LPAR shift to state 68
-- On type_def shift to state 333
-- On table shift to state 334
-- On start shift to state 335
-- On module_fields1 shift to state 336
-- On module_fields shift to state 345
-- On memory shift to state 338
-- On import shift to state 340
-- On global shift to state 342
-- On func shift to state 344
-- On export shift to state 346
-- On elem shift to state 348
-- On data shift to state 350
## Reductions:
-- On RPAR EOF
--   reduce production module_fields ->

State 345:
## Known stack suffix:
## func module_fields
## LR(1) items:
module_fields1 -> func module_fields . [ RPAR EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production module_fields1 -> func module_fields

State 346:
## Known stack suffix:
## export
## LR(1) items:
module_fields1 -> export . module_fields [ RPAR EOF ]
## Transitions:
-- On LPAR shift to state 68
-- On type_def shift to state 333
-- On table shift to state 334
-- On start shift to state 335
-- On module_fields1 shift to state 336
-- On module_fields shift to state 347
-- On memory shift to state 338
-- On import shift to state 340
-- On global shift to state 342
-- On func shift to state 344
-- On export shift to state 346
-- On elem shift to state 348
-- On data shift to state 350
## Reductions:
-- On RPAR EOF
--   reduce production module_fields ->

State 347:
## Known stack suffix:
## export module_fields
## LR(1) items:
module_fields1 -> export module_fields . [ RPAR EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production module_fields1 -> export module_fields

State 348:
## Known stack suffix:
## elem
## LR(1) items:
module_fields1 -> elem . module_fields [ RPAR EOF ]
## Transitions:
-- On LPAR shift to state 68
-- On type_def shift to state 333
-- On table shift to state 334
-- On start shift to state 335
-- On module_fields1 shift to state 336
-- On module_fields shift to state 349
-- On memory shift to state 338
-- On import shift to state 340
-- On global shift to state 342
-- On func shift to state 344
-- On export shift to state 346
-- On elem shift to state 348
-- On data shift to state 350
## Reductions:
-- On RPAR EOF
--   reduce production module_fields ->

State 349:
## Known stack suffix:
## elem module_fields
## LR(1) items:
module_fields1 -> elem module_fields . [ RPAR EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production module_fields1 -> elem module_fields

State 350:
## Known stack suffix:
## data
## LR(1) items:
module_fields1 -> data . module_fields [ RPAR EOF ]
## Transitions:
-- On LPAR shift to state 68
-- On type_def shift to state 333
-- On table shift to state 334
-- On start shift to state 335
-- On module_fields1 shift to state 336
-- On module_fields shift to state 351
-- On memory shift to state 338
-- On import shift to state 340
-- On global shift to state 342
-- On func shift to state 344
-- On export shift to state 346
-- On elem shift to state 348
-- On data shift to state 350
## Reductions:
-- On RPAR EOF
--   reduce production module_fields ->

State 351:
## Known stack suffix:
## data module_fields
## LR(1) items:
module_fields1 -> data module_fields . [ RPAR EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production module_fields1 -> data module_fields

State 352:
## Known stack suffix:
## table module_fields
## LR(1) items:
module_fields1 -> table module_fields . [ RPAR EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production module_fields1 -> table module_fields

State 353:
## Known stack suffix:
## type_def module_fields
## LR(1) items:
module_fields1 -> type_def module_fields . [ RPAR EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production module_fields1 -> type_def module_fields

State 354:
## Known stack suffix:
## LPAR MODULE module_var_opt module_fields
## LR(1) items:
module_ -> LPAR MODULE module_var_opt module_fields . RPAR [ STRING RPAR LPAR EOF ]
## Transitions:
-- On RPAR shift to state 355
## Reductions:

State 355:
## Known stack suffix:
## LPAR MODULE module_var_opt module_fields RPAR
## LR(1) items:
module_ -> LPAR MODULE module_var_opt module_fields RPAR . [ STRING RPAR LPAR EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production module_ -> LPAR MODULE module_var_opt module_fields RPAR

State 356:
## Known stack suffix:
## module_fields
## LR(1) items:
inline_module -> module_fields . [ EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production inline_module -> module_fields

State 357:
## Known stack suffix:
## module_
## LR(1) items:
module1 -> module_ . EOF [ # ]
## Transitions:
-- On EOF shift to state 358
## Reductions:

State 358:
## Known stack suffix:
## module_ EOF
## LR(1) items:
module1 -> module_ EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production module1 -> module_ EOF

State 359:
## Known stack suffix:
## module1
## LR(1) items:
module1' -> module1 . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept module1

State 360:
## Known stack suffix:
## inline_module
## LR(1) items:
module1 -> inline_module . EOF [ # ]
## Transitions:
-- On EOF shift to state 361
## Reductions:

State 361:
## Known stack suffix:
## inline_module EOF
## LR(1) items:
module1 -> inline_module EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production module1 -> inline_module EOF

State 362:
## Known stack suffix:
##
## LR(1) items:
script' -> . script [ # ]
## Transitions:
-- On LPAR shift to state 363
-- On type_def shift to state 333
-- On table shift to state 334
-- On start shift to state 335
-- On script_module shift to state 441
-- On script shift to state 449
-- On module_fields1 shift to state 450
-- On module_ shift to state 409
-- On meta shift to state 442
-- On memory shift to state 338
-- On inline_module1 shift to state 451
-- On import shift to state 340
-- On global shift to state 342
-- On func shift to state 344
-- On export shift to state 346
-- On elem shift to state 348
-- On data shift to state 350
-- On cmd_list shift to state 453
-- On cmd shift to state 445
-- On assertion shift to state 447
-- On action shift to state 448
## Reductions:
-- On EOF
--   reduce production cmd_list ->

State 363:
## Known stack suffix:
## LPAR
## LR(1) items:
action -> LPAR . INVOKE module_var_opt name const_list RPAR [ LPAR EOF ]
action -> LPAR . GET module_var_opt name RPAR [ LPAR EOF ]
assertion -> LPAR . ASSERT_MALFORMED script_module STRING RPAR [ LPAR EOF ]
assertion -> LPAR . ASSERT_INVALID script_module STRING RPAR [ LPAR EOF ]
assertion -> LPAR . ASSERT_UNLINKABLE script_module STRING RPAR [ LPAR EOF ]
assertion -> LPAR . ASSERT_TRAP script_module STRING RPAR [ LPAR EOF ]
assertion -> LPAR . ASSERT_RETURN action const_list RPAR [ LPAR EOF ]
assertion -> LPAR . ASSERT_RETURN_CANONICAL_NAN action RPAR [ LPAR EOF ]
assertion -> LPAR . ASSERT_RETURN_ARITHMETIC_NAN action RPAR [ LPAR EOF ]
assertion -> LPAR . ASSERT_TRAP action STRING RPAR [ LPAR EOF ]
assertion -> LPAR . ASSERT_EXHAUSTION action STRING RPAR [ LPAR EOF ]
cmd -> LPAR . REGISTER name module_var_opt RPAR [ LPAR EOF ]
data -> LPAR . DATA var offset string_list RPAR [ LPAR EOF ]
data -> LPAR . DATA offset string_list RPAR [ LPAR EOF ]
elem -> LPAR . ELEM var offset var_list RPAR [ LPAR EOF ]
elem -> LPAR . ELEM offset var_list RPAR [ LPAR EOF ]
export -> LPAR . EXPORT name export_desc RPAR [ LPAR EOF ]
func -> LPAR . FUNC bind_var_opt func_fields RPAR [ LPAR EOF ]
global -> LPAR . GLOBAL bind_var_opt global_fields RPAR [ LPAR EOF ]
import -> LPAR . IMPORT name name import_desc RPAR [ LPAR EOF ]
memory -> LPAR . MEMORY bind_var_opt memory_fields RPAR [ LPAR EOF ]
meta -> LPAR . SCRIPT script_var_opt cmd_list RPAR [ LPAR EOF ]
meta -> LPAR . INPUT script_var_opt STRING RPAR [ LPAR EOF ]
meta -> LPAR . OUTPUT script_var_opt STRING RPAR [ LPAR EOF ]
meta -> LPAR . OUTPUT script_var_opt RPAR [ LPAR EOF ]
module_ -> LPAR . MODULE module_var_opt module_fields RPAR [ LPAR EOF ]
script_module -> LPAR . MODULE module_var_opt BIN string_list RPAR [ LPAR EOF ]
script_module -> LPAR . MODULE module_var_opt QUOTE string_list RPAR [ LPAR EOF ]
start -> LPAR . START var RPAR [ LPAR EOF ]
table -> LPAR . TABLE bind_var_opt table_fields RPAR [ LPAR EOF ]
type_def -> LPAR . TYPE type_ RPAR [ LPAR EOF ]
type_def -> LPAR . TYPE bind_var type_ RPAR [ LPAR EOF ]
## Transitions:
-- On TYPE shift to state 2
-- On TABLE shift to state 29
-- On START shift to state 62
-- On SCRIPT shift to state 364
-- On REGISTER shift to state 368
-- On OUTPUT shift to state 372
-- On MODULE shift to state 377
-- On MEMORY shift to state 69
-- On INVOKE shift to state 385
-- On INPUT shift to state 396
-- On IMPORT shift to state 84
-- On GLOBAL shift to state 117
-- On GET shift to state 400
-- On FUNC shift to state 239
-- On EXPORT shift to state 295
-- On ELEM shift to state 312
-- On DATA shift to state 325
-- On ASSERT_UNLINKABLE shift to state 404
-- On ASSERT_TRAP shift to state 410
-- On ASSERT_RETURN_CANONICAL_NAN shift to state 418
-- On ASSERT_RETURN_ARITHMETIC_NAN shift to state 422
-- On ASSERT_RETURN shift to state 425
-- On ASSERT_MALFORMED shift to state 429
-- On ASSERT_INVALID shift to state 433
-- On ASSERT_EXHAUSTION shift to state 437
## Reductions:

State 364:
## Known stack suffix:
## LPAR SCRIPT
## LR(1) items:
meta -> LPAR SCRIPT . script_var_opt cmd_list RPAR [ RPAR LPAR EOF ]
## Transitions:
-- On VAR shift to state 365
-- On script_var_opt shift to state 366
## Reductions:
-- On RPAR LPAR
--   reduce production script_var_opt ->

State 365:
## Known stack suffix:
## VAR
## LR(1) items:
script_var_opt -> VAR . [ STRING RPAR LPAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production script_var_opt -> VAR

State 366:
## Known stack suffix:
## LPAR SCRIPT script_var_opt
## LR(1) items:
meta -> LPAR SCRIPT script_var_opt . cmd_list RPAR [ RPAR LPAR EOF ]
## Transitions:
-- On LPAR shift to state 367
-- On script_module shift to state 441
-- On module_ shift to state 409
-- On meta shift to state 442
-- On cmd_list shift to state 443
-- On cmd shift to state 445
-- On assertion shift to state 447
-- On action shift to state 448
## Reductions:
-- On RPAR
--   reduce production cmd_list ->

State 367:
## Known stack suffix:
## LPAR
## LR(1) items:
action -> LPAR . INVOKE module_var_opt name const_list RPAR [ RPAR LPAR EOF ]
action -> LPAR . GET module_var_opt name RPAR [ RPAR LPAR EOF ]
assertion -> LPAR . ASSERT_MALFORMED script_module STRING RPAR [ RPAR LPAR EOF ]
assertion -> LPAR . ASSERT_INVALID script_module STRING RPAR [ RPAR LPAR EOF ]
assertion -> LPAR . ASSERT_UNLINKABLE script_module STRING RPAR [ RPAR LPAR EOF ]
assertion -> LPAR . ASSERT_TRAP script_module STRING RPAR [ RPAR LPAR EOF ]
assertion -> LPAR . ASSERT_RETURN action const_list RPAR [ RPAR LPAR EOF ]
assertion -> LPAR . ASSERT_RETURN_CANONICAL_NAN action RPAR [ RPAR LPAR EOF ]
assertion -> LPAR . ASSERT_RETURN_ARITHMETIC_NAN action RPAR [ RPAR LPAR EOF ]
assertion -> LPAR . ASSERT_TRAP action STRING RPAR [ RPAR LPAR EOF ]
assertion -> LPAR . ASSERT_EXHAUSTION action STRING RPAR [ RPAR LPAR EOF ]
cmd -> LPAR . REGISTER name module_var_opt RPAR [ RPAR LPAR EOF ]
meta -> LPAR . SCRIPT script_var_opt cmd_list RPAR [ RPAR LPAR EOF ]
meta -> LPAR . INPUT script_var_opt STRING RPAR [ RPAR LPAR EOF ]
meta -> LPAR . OUTPUT script_var_opt STRING RPAR [ RPAR LPAR EOF ]
meta -> LPAR . OUTPUT script_var_opt RPAR [ RPAR LPAR EOF ]
module_ -> LPAR . MODULE module_var_opt module_fields RPAR [ RPAR LPAR EOF ]
script_module -> LPAR . MODULE module_var_opt BIN string_list RPAR [ RPAR LPAR EOF ]
script_module -> LPAR . MODULE module_var_opt QUOTE string_list RPAR [ RPAR LPAR EOF ]
## Transitions:
-- On SCRIPT shift to state 364
-- On REGISTER shift to state 368
-- On OUTPUT shift to state 372
-- On MODULE shift to state 377
-- On INVOKE shift to state 385
-- On INPUT shift to state 396
-- On GET shift to state 400
-- On ASSERT_UNLINKABLE shift to state 404
-- On ASSERT_TRAP shift to state 410
-- On ASSERT_RETURN_CANONICAL_NAN shift to state 418
-- On ASSERT_RETURN_ARITHMETIC_NAN shift to state 422
-- On ASSERT_RETURN shift to state 425
-- On ASSERT_MALFORMED shift to state 429
-- On ASSERT_INVALID shift to state 433
-- On ASSERT_EXHAUSTION shift to state 437
## Reductions:

State 368:
## Known stack suffix:
## LPAR REGISTER
## LR(1) items:
cmd -> LPAR REGISTER . name module_var_opt RPAR [ RPAR LPAR EOF ]
## Transitions:
-- On STRING shift to state 35
-- On name shift to state 369
## Reductions:

State 369:
## Known stack suffix:
## LPAR REGISTER name
## LR(1) items:
cmd -> LPAR REGISTER name . module_var_opt RPAR [ RPAR LPAR EOF ]
## Transitions:
-- On VAR shift to state 66
-- On module_var_opt shift to state 370
## Reductions:
-- On RPAR
--   reduce production module_var_opt ->

State 370:
## Known stack suffix:
## LPAR REGISTER name module_var_opt
## LR(1) items:
cmd -> LPAR REGISTER name module_var_opt . RPAR [ RPAR LPAR EOF ]
## Transitions:
-- On RPAR shift to state 371
## Reductions:

State 371:
## Known stack suffix:
## LPAR REGISTER name module_var_opt RPAR
## LR(1) items:
cmd -> LPAR REGISTER name module_var_opt RPAR . [ RPAR LPAR EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production cmd -> LPAR REGISTER name module_var_opt RPAR

State 372:
## Known stack suffix:
## LPAR OUTPUT
## LR(1) items:
meta -> LPAR OUTPUT . script_var_opt STRING RPAR [ RPAR LPAR EOF ]
meta -> LPAR OUTPUT . script_var_opt RPAR [ RPAR LPAR EOF ]
## Transitions:
-- On VAR shift to state 365
-- On script_var_opt shift to state 373
## Reductions:
-- On STRING RPAR
--   reduce production script_var_opt ->

State 373:
## Known stack suffix:
## LPAR OUTPUT script_var_opt
## LR(1) items:
meta -> LPAR OUTPUT script_var_opt . STRING RPAR [ RPAR LPAR EOF ]
meta -> LPAR OUTPUT script_var_opt . RPAR [ RPAR LPAR EOF ]
## Transitions:
-- On STRING shift to state 374
-- On RPAR shift to state 376
## Reductions:

State 374:
## Known stack suffix:
## LPAR OUTPUT script_var_opt STRING
## LR(1) items:
meta -> LPAR OUTPUT script_var_opt STRING . RPAR [ RPAR LPAR EOF ]
## Transitions:
-- On RPAR shift to state 375
## Reductions:

State 375:
## Known stack suffix:
## LPAR OUTPUT script_var_opt STRING RPAR
## LR(1) items:
meta -> LPAR OUTPUT script_var_opt STRING RPAR . [ RPAR LPAR EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production meta -> LPAR OUTPUT script_var_opt STRING RPAR

State 376:
## Known stack suffix:
## LPAR OUTPUT script_var_opt RPAR
## LR(1) items:
meta -> LPAR OUTPUT script_var_opt RPAR . [ RPAR LPAR EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production meta -> LPAR OUTPUT script_var_opt RPAR

State 377:
## Known stack suffix:
## LPAR MODULE
## LR(1) items:
module_ -> LPAR MODULE . module_var_opt module_fields RPAR [ STRING RPAR LPAR EOF ]
script_module -> LPAR MODULE . module_var_opt BIN string_list RPAR [ STRING RPAR LPAR EOF ]
script_module -> LPAR MODULE . module_var_opt QUOTE string_list RPAR [ STRING RPAR LPAR EOF ]
## Transitions:
-- On VAR shift to state 66
-- On module_var_opt shift to state 378
## Reductions:
-- On RPAR QUOTE LPAR BIN
--   reduce production module_var_opt ->

State 378:
## Known stack suffix:
## LPAR MODULE module_var_opt
## LR(1) items:
module_ -> LPAR MODULE module_var_opt . module_fields RPAR [ STRING RPAR LPAR EOF ]
script_module -> LPAR MODULE module_var_opt . BIN string_list RPAR [ STRING RPAR LPAR EOF ]
script_module -> LPAR MODULE module_var_opt . QUOTE string_list RPAR [ STRING RPAR LPAR EOF ]
## Transitions:
-- On QUOTE shift to state 379
-- On LPAR shift to state 68
-- On BIN shift to state 382
-- On type_def shift to state 333
-- On table shift to state 334
-- On start shift to state 335
-- On module_fields1 shift to state 336
-- On module_fields shift to state 354
-- On memory shift to state 338
-- On import shift to state 340
-- On global shift to state 342
-- On func shift to state 344
-- On export shift to state 346
-- On elem shift to state 348
-- On data shift to state 350
## Reductions:
-- On RPAR
--   reduce production module_fields ->

State 379:
## Known stack suffix:
## LPAR MODULE module_var_opt QUOTE
## LR(1) items:
script_module -> LPAR MODULE module_var_opt QUOTE . string_list RPAR [ STRING RPAR LPAR EOF ]
## Transitions:
-- On string_list shift to state 380
## Default reduction:
-- After reading the next token, reduce production string_list ->

State 380:
## Known stack suffix:
## LPAR MODULE module_var_opt QUOTE string_list
## LR(1) items:
script_module -> LPAR MODULE module_var_opt QUOTE string_list . RPAR [ STRING RPAR LPAR EOF ]
string_list -> string_list . STRING [ STRING RPAR ]
## Transitions:
-- On STRING shift to state 74
-- On RPAR shift to state 381
## Reductions:

State 381:
## Known stack suffix:
## LPAR MODULE module_var_opt QUOTE string_list RPAR
## LR(1) items:
script_module -> LPAR MODULE module_var_opt QUOTE string_list RPAR . [ STRING RPAR LPAR EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production script_module -> LPAR MODULE module_var_opt QUOTE string_list RPAR

State 382:
## Known stack suffix:
## LPAR MODULE module_var_opt BIN
## LR(1) items:
script_module -> LPAR MODULE module_var_opt BIN . string_list RPAR [ STRING RPAR LPAR EOF ]
## Transitions:
-- On string_list shift to state 383
## Default reduction:
-- After reading the next token, reduce production string_list ->

State 383:
## Known stack suffix:
## LPAR MODULE module_var_opt BIN string_list
## LR(1) items:
script_module -> LPAR MODULE module_var_opt BIN string_list . RPAR [ STRING RPAR LPAR EOF ]
string_list -> string_list . STRING [ STRING RPAR ]
## Transitions:
-- On STRING shift to state 74
-- On RPAR shift to state 384
## Reductions:

State 384:
## Known stack suffix:
## LPAR MODULE module_var_opt BIN string_list RPAR
## LR(1) items:
script_module -> LPAR MODULE module_var_opt BIN string_list RPAR . [ STRING RPAR LPAR EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production script_module -> LPAR MODULE module_var_opt BIN string_list RPAR

State 385:
## Known stack suffix:
## LPAR INVOKE
## LR(1) items:
action -> LPAR INVOKE . module_var_opt name const_list RPAR [ STRING RPAR LPAR EOF ]
## Transitions:
-- On VAR shift to state 66
-- On module_var_opt shift to state 386
## Reductions:
-- On STRING
--   reduce production module_var_opt ->

State 386:
## Known stack suffix:
## LPAR INVOKE module_var_opt
## LR(1) items:
action -> LPAR INVOKE module_var_opt . name const_list RPAR [ STRING RPAR LPAR EOF ]
## Transitions:
-- On STRING shift to state 35
-- On name shift to state 387
## Reductions:

State 387:
## Known stack suffix:
## LPAR INVOKE module_var_opt name
## LR(1) items:
action -> LPAR INVOKE module_var_opt name . const_list RPAR [ STRING RPAR LPAR EOF ]
## Transitions:
-- On LPAR shift to state 388
-- On const_list shift to state 392
-- On const shift to state 394
## Reductions:
-- On RPAR
--   reduce production const_list ->

State 388:
## Known stack suffix:
## LPAR
## LR(1) items:
const -> LPAR . CONST literal RPAR [ RPAR LPAR ]
## Transitions:
-- On CONST shift to state 389
## Reductions:

State 389:
## Known stack suffix:
## LPAR CONST
## LR(1) items:
const -> LPAR CONST . literal RPAR [ RPAR LPAR ]
## Transitions:
-- On NAT shift to state 168
-- On INT shift to state 169
-- On FLOAT shift to state 170
-- On literal shift to state 390
## Reductions:

State 390:
## Known stack suffix:
## LPAR CONST literal
## LR(1) items:
const -> LPAR CONST literal . RPAR [ RPAR LPAR ]
## Transitions:
-- On RPAR shift to state 391
## Reductions:

State 391:
## Known stack suffix:
## LPAR CONST literal RPAR
## LR(1) items:
const -> LPAR CONST literal RPAR . [ RPAR LPAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production const -> LPAR CONST literal RPAR

State 392:
## Known stack suffix:
## LPAR INVOKE module_var_opt name const_list
## LR(1) items:
action -> LPAR INVOKE module_var_opt name const_list . RPAR [ STRING RPAR LPAR EOF ]
## Transitions:
-- On RPAR shift to state 393
## Reductions:

State 393:
## Known stack suffix:
## LPAR INVOKE module_var_opt name const_list RPAR
## LR(1) items:
action -> LPAR INVOKE module_var_opt name const_list RPAR . [ STRING RPAR LPAR EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production action -> LPAR INVOKE module_var_opt name const_list RPAR

State 394:
## Known stack suffix:
## const
## LR(1) items:
const_list -> const . const_list [ RPAR ]
## Transitions:
-- On LPAR shift to state 388
-- On const_list shift to state 395
-- On const shift to state 394
## Reductions:
-- On RPAR
--   reduce production const_list ->

State 395:
## Known stack suffix:
## const const_list
## LR(1) items:
const_list -> const const_list . [ RPAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production const_list -> const const_list

State 396:
## Known stack suffix:
## LPAR INPUT
## LR(1) items:
meta -> LPAR INPUT . script_var_opt STRING RPAR [ RPAR LPAR EOF ]
## Transitions:
-- On VAR shift to state 365
-- On script_var_opt shift to state 397
## Reductions:
-- On STRING
--   reduce production script_var_opt ->

State 397:
## Known stack suffix:
## LPAR INPUT script_var_opt
## LR(1) items:
meta -> LPAR INPUT script_var_opt . STRING RPAR [ RPAR LPAR EOF ]
## Transitions:
-- On STRING shift to state 398
## Reductions:

State 398:
## Known stack suffix:
## LPAR INPUT script_var_opt STRING
## LR(1) items:
meta -> LPAR INPUT script_var_opt STRING . RPAR [ RPAR LPAR EOF ]
## Transitions:
-- On RPAR shift to state 399
## Reductions:

State 399:
## Known stack suffix:
## LPAR INPUT script_var_opt STRING RPAR
## LR(1) items:
meta -> LPAR INPUT script_var_opt STRING RPAR . [ RPAR LPAR EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production meta -> LPAR INPUT script_var_opt STRING RPAR

State 400:
## Known stack suffix:
## LPAR GET
## LR(1) items:
action -> LPAR GET . module_var_opt name RPAR [ STRING RPAR LPAR EOF ]
## Transitions:
-- On VAR shift to state 66
-- On module_var_opt shift to state 401
## Reductions:
-- On STRING
--   reduce production module_var_opt ->

State 401:
## Known stack suffix:
## LPAR GET module_var_opt
## LR(1) items:
action -> LPAR GET module_var_opt . name RPAR [ STRING RPAR LPAR EOF ]
## Transitions:
-- On STRING shift to state 35
-- On name shift to state 402
## Reductions:

State 402:
## Known stack suffix:
## LPAR GET module_var_opt name
## LR(1) items:
action -> LPAR GET module_var_opt name . RPAR [ STRING RPAR LPAR EOF ]
## Transitions:
-- On RPAR shift to state 403
## Reductions:

State 403:
## Known stack suffix:
## LPAR GET module_var_opt name RPAR
## LR(1) items:
action -> LPAR GET module_var_opt name RPAR . [ STRING RPAR LPAR EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production action -> LPAR GET module_var_opt name RPAR

State 404:
## Known stack suffix:
## LPAR ASSERT_UNLINKABLE
## LR(1) items:
assertion -> LPAR ASSERT_UNLINKABLE . script_module STRING RPAR [ RPAR LPAR EOF ]
## Transitions:
-- On LPAR shift to state 405
-- On script_module shift to state 406
-- On module_ shift to state 409
## Reductions:

State 405:
## Known stack suffix:
## LPAR
## LR(1) items:
module_ -> LPAR . MODULE module_var_opt module_fields RPAR [ STRING ]
script_module -> LPAR . MODULE module_var_opt BIN string_list RPAR [ STRING ]
script_module -> LPAR . MODULE module_var_opt QUOTE string_list RPAR [ STRING ]
## Transitions:
-- On MODULE shift to state 377
## Reductions:

State 406:
## Known stack suffix:
## LPAR ASSERT_UNLINKABLE script_module
## LR(1) items:
assertion -> LPAR ASSERT_UNLINKABLE script_module . STRING RPAR [ RPAR LPAR EOF ]
## Transitions:
-- On STRING shift to state 407
## Reductions:

State 407:
## Known stack suffix:
## LPAR ASSERT_UNLINKABLE script_module STRING
## LR(1) items:
assertion -> LPAR ASSERT_UNLINKABLE script_module STRING . RPAR [ RPAR LPAR EOF ]
## Transitions:
-- On RPAR shift to state 408
## Reductions:

State 408:
## Known stack suffix:
## LPAR ASSERT_UNLINKABLE script_module STRING RPAR
## LR(1) items:
assertion -> LPAR ASSERT_UNLINKABLE script_module STRING RPAR . [ RPAR LPAR EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assertion -> LPAR ASSERT_UNLINKABLE script_module STRING RPAR

State 409:
## Known stack suffix:
## module_
## LR(1) items:
script_module -> module_ . [ STRING RPAR LPAR EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production script_module -> module_

State 410:
## Known stack suffix:
## LPAR ASSERT_TRAP
## LR(1) items:
assertion -> LPAR ASSERT_TRAP . script_module STRING RPAR [ RPAR LPAR EOF ]
assertion -> LPAR ASSERT_TRAP . action STRING RPAR [ RPAR LPAR EOF ]
## Transitions:
-- On LPAR shift to state 411
-- On script_module shift to state 412
-- On module_ shift to state 409
-- On action shift to state 415
## Reductions:

State 411:
## Known stack suffix:
## LPAR
## LR(1) items:
action -> LPAR . INVOKE module_var_opt name const_list RPAR [ STRING ]
action -> LPAR . GET module_var_opt name RPAR [ STRING ]
module_ -> LPAR . MODULE module_var_opt module_fields RPAR [ STRING ]
script_module -> LPAR . MODULE module_var_opt BIN string_list RPAR [ STRING ]
script_module -> LPAR . MODULE module_var_opt QUOTE string_list RPAR [ STRING ]
## Transitions:
-- On MODULE shift to state 377
-- On INVOKE shift to state 385
-- On GET shift to state 400
## Reductions:

State 412:
## Known stack suffix:
## LPAR ASSERT_TRAP script_module
## LR(1) items:
assertion -> LPAR ASSERT_TRAP script_module . STRING RPAR [ RPAR LPAR EOF ]
## Transitions:
-- On STRING shift to state 413
## Reductions:

State 413:
## Known stack suffix:
## LPAR ASSERT_TRAP script_module STRING
## LR(1) items:
assertion -> LPAR ASSERT_TRAP script_module STRING . RPAR [ RPAR LPAR EOF ]
## Transitions:
-- On RPAR shift to state 414
## Reductions:

State 414:
## Known stack suffix:
## LPAR ASSERT_TRAP script_module STRING RPAR
## LR(1) items:
assertion -> LPAR ASSERT_TRAP script_module STRING RPAR . [ RPAR LPAR EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assertion -> LPAR ASSERT_TRAP script_module STRING RPAR

State 415:
## Known stack suffix:
## LPAR ASSERT_TRAP action
## LR(1) items:
assertion -> LPAR ASSERT_TRAP action . STRING RPAR [ RPAR LPAR EOF ]
## Transitions:
-- On STRING shift to state 416
## Reductions:

State 416:
## Known stack suffix:
## LPAR ASSERT_TRAP action STRING
## LR(1) items:
assertion -> LPAR ASSERT_TRAP action STRING . RPAR [ RPAR LPAR EOF ]
## Transitions:
-- On RPAR shift to state 417
## Reductions:

State 417:
## Known stack suffix:
## LPAR ASSERT_TRAP action STRING RPAR
## LR(1) items:
assertion -> LPAR ASSERT_TRAP action STRING RPAR . [ RPAR LPAR EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assertion -> LPAR ASSERT_TRAP action STRING RPAR

State 418:
## Known stack suffix:
## LPAR ASSERT_RETURN_CANONICAL_NAN
## LR(1) items:
assertion -> LPAR ASSERT_RETURN_CANONICAL_NAN . action RPAR [ RPAR LPAR EOF ]
## Transitions:
-- On LPAR shift to state 419
-- On action shift to state 420
## Reductions:

State 419:
## Known stack suffix:
## LPAR
## LR(1) items:
action -> LPAR . INVOKE module_var_opt name const_list RPAR [ STRING RPAR LPAR ]
action -> LPAR . GET module_var_opt name RPAR [ STRING RPAR LPAR ]
## Transitions:
-- On INVOKE shift to state 385
-- On GET shift to state 400
## Reductions:

State 420:
## Known stack suffix:
## LPAR ASSERT_RETURN_CANONICAL_NAN action
## LR(1) items:
assertion -> LPAR ASSERT_RETURN_CANONICAL_NAN action . RPAR [ RPAR LPAR EOF ]
## Transitions:
-- On RPAR shift to state 421
## Reductions:

State 421:
## Known stack suffix:
## LPAR ASSERT_RETURN_CANONICAL_NAN action RPAR
## LR(1) items:
assertion -> LPAR ASSERT_RETURN_CANONICAL_NAN action RPAR . [ RPAR LPAR EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assertion -> LPAR ASSERT_RETURN_CANONICAL_NAN action RPAR

State 422:
## Known stack suffix:
## LPAR ASSERT_RETURN_ARITHMETIC_NAN
## LR(1) items:
assertion -> LPAR ASSERT_RETURN_ARITHMETIC_NAN . action RPAR [ RPAR LPAR EOF ]
## Transitions:
-- On LPAR shift to state 419
-- On action shift to state 423
## Reductions:

State 423:
## Known stack suffix:
## LPAR ASSERT_RETURN_ARITHMETIC_NAN action
## LR(1) items:
assertion -> LPAR ASSERT_RETURN_ARITHMETIC_NAN action . RPAR [ RPAR LPAR EOF ]
## Transitions:
-- On RPAR shift to state 424
## Reductions:

State 424:
## Known stack suffix:
## LPAR ASSERT_RETURN_ARITHMETIC_NAN action RPAR
## LR(1) items:
assertion -> LPAR ASSERT_RETURN_ARITHMETIC_NAN action RPAR . [ RPAR LPAR EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assertion -> LPAR ASSERT_RETURN_ARITHMETIC_NAN action RPAR

State 425:
## Known stack suffix:
## LPAR ASSERT_RETURN
## LR(1) items:
assertion -> LPAR ASSERT_RETURN . action const_list RPAR [ RPAR LPAR EOF ]
## Transitions:
-- On LPAR shift to state 419
-- On action shift to state 426
## Reductions:

State 426:
## Known stack suffix:
## LPAR ASSERT_RETURN action
## LR(1) items:
assertion -> LPAR ASSERT_RETURN action . const_list RPAR [ RPAR LPAR EOF ]
## Transitions:
-- On LPAR shift to state 388
-- On const_list shift to state 427
-- On const shift to state 394
## Reductions:
-- On RPAR
--   reduce production const_list ->

State 427:
## Known stack suffix:
## LPAR ASSERT_RETURN action const_list
## LR(1) items:
assertion -> LPAR ASSERT_RETURN action const_list . RPAR [ RPAR LPAR EOF ]
## Transitions:
-- On RPAR shift to state 428
## Reductions:

State 428:
## Known stack suffix:
## LPAR ASSERT_RETURN action const_list RPAR
## LR(1) items:
assertion -> LPAR ASSERT_RETURN action const_list RPAR . [ RPAR LPAR EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assertion -> LPAR ASSERT_RETURN action const_list RPAR

State 429:
## Known stack suffix:
## LPAR ASSERT_MALFORMED
## LR(1) items:
assertion -> LPAR ASSERT_MALFORMED . script_module STRING RPAR [ RPAR LPAR EOF ]
## Transitions:
-- On LPAR shift to state 405
-- On script_module shift to state 430
-- On module_ shift to state 409
## Reductions:

State 430:
## Known stack suffix:
## LPAR ASSERT_MALFORMED script_module
## LR(1) items:
assertion -> LPAR ASSERT_MALFORMED script_module . STRING RPAR [ RPAR LPAR EOF ]
## Transitions:
-- On STRING shift to state 431
## Reductions:

State 431:
## Known stack suffix:
## LPAR ASSERT_MALFORMED script_module STRING
## LR(1) items:
assertion -> LPAR ASSERT_MALFORMED script_module STRING . RPAR [ RPAR LPAR EOF ]
## Transitions:
-- On RPAR shift to state 432
## Reductions:

State 432:
## Known stack suffix:
## LPAR ASSERT_MALFORMED script_module STRING RPAR
## LR(1) items:
assertion -> LPAR ASSERT_MALFORMED script_module STRING RPAR . [ RPAR LPAR EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assertion -> LPAR ASSERT_MALFORMED script_module STRING RPAR

State 433:
## Known stack suffix:
## LPAR ASSERT_INVALID
## LR(1) items:
assertion -> LPAR ASSERT_INVALID . script_module STRING RPAR [ RPAR LPAR EOF ]
## Transitions:
-- On LPAR shift to state 405
-- On script_module shift to state 434
-- On module_ shift to state 409
## Reductions:

State 434:
## Known stack suffix:
## LPAR ASSERT_INVALID script_module
## LR(1) items:
assertion -> LPAR ASSERT_INVALID script_module . STRING RPAR [ RPAR LPAR EOF ]
## Transitions:
-- On STRING shift to state 435
## Reductions:

State 435:
## Known stack suffix:
## LPAR ASSERT_INVALID script_module STRING
## LR(1) items:
assertion -> LPAR ASSERT_INVALID script_module STRING . RPAR [ RPAR LPAR EOF ]
## Transitions:
-- On RPAR shift to state 436
## Reductions:

State 436:
## Known stack suffix:
## LPAR ASSERT_INVALID script_module STRING RPAR
## LR(1) items:
assertion -> LPAR ASSERT_INVALID script_module STRING RPAR . [ RPAR LPAR EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assertion -> LPAR ASSERT_INVALID script_module STRING RPAR

State 437:
## Known stack suffix:
## LPAR ASSERT_EXHAUSTION
## LR(1) items:
assertion -> LPAR ASSERT_EXHAUSTION . action STRING RPAR [ RPAR LPAR EOF ]
## Transitions:
-- On LPAR shift to state 419
-- On action shift to state 438
## Reductions:

State 438:
## Known stack suffix:
## LPAR ASSERT_EXHAUSTION action
## LR(1) items:
assertion -> LPAR ASSERT_EXHAUSTION action . STRING RPAR [ RPAR LPAR EOF ]
## Transitions:
-- On STRING shift to state 439
## Reductions:

State 439:
## Known stack suffix:
## LPAR ASSERT_EXHAUSTION action STRING
## LR(1) items:
assertion -> LPAR ASSERT_EXHAUSTION action STRING . RPAR [ RPAR LPAR EOF ]
## Transitions:
-- On RPAR shift to state 440
## Reductions:

State 440:
## Known stack suffix:
## LPAR ASSERT_EXHAUSTION action STRING RPAR
## LR(1) items:
assertion -> LPAR ASSERT_EXHAUSTION action STRING RPAR . [ RPAR LPAR EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assertion -> LPAR ASSERT_EXHAUSTION action STRING RPAR

State 441:
## Known stack suffix:
## script_module
## LR(1) items:
cmd -> script_module . [ RPAR LPAR EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production cmd -> script_module

State 442:
## Known stack suffix:
## meta
## LR(1) items:
cmd -> meta . [ RPAR LPAR EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production cmd -> meta

State 443:
## Known stack suffix:
## LPAR SCRIPT script_var_opt cmd_list
## LR(1) items:
meta -> LPAR SCRIPT script_var_opt cmd_list . RPAR [ RPAR LPAR EOF ]
## Transitions:
-- On RPAR shift to state 444
## Reductions:

State 444:
## Known stack suffix:
## LPAR SCRIPT script_var_opt cmd_list RPAR
## LR(1) items:
meta -> LPAR SCRIPT script_var_opt cmd_list RPAR . [ RPAR LPAR EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production meta -> LPAR SCRIPT script_var_opt cmd_list RPAR

State 445:
## Known stack suffix:
## cmd
## LR(1) items:
cmd_list -> cmd . cmd_list [ RPAR EOF ]
## Transitions:
-- On LPAR shift to state 367
-- On script_module shift to state 441
-- On module_ shift to state 409
-- On meta shift to state 442
-- On cmd_list shift to state 446
-- On cmd shift to state 445
-- On assertion shift to state 447
-- On action shift to state 448
## Reductions:
-- On RPAR EOF
--   reduce production cmd_list ->

State 446:
## Known stack suffix:
## cmd cmd_list
## LR(1) items:
cmd_list -> cmd cmd_list . [ RPAR EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production cmd_list -> cmd cmd_list

State 447:
## Known stack suffix:
## assertion
## LR(1) items:
cmd -> assertion . [ RPAR LPAR EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production cmd -> assertion

State 448:
## Known stack suffix:
## action
## LR(1) items:
cmd -> action . [ RPAR LPAR EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production cmd -> action

State 449:
## Known stack suffix:
## script
## LR(1) items:
script' -> script . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept script

State 450:
## Known stack suffix:
## module_fields1
## LR(1) items:
inline_module1 -> module_fields1 . [ EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production inline_module1 -> module_fields1

State 451:
## Known stack suffix:
## inline_module1
## LR(1) items:
script -> inline_module1 . EOF [ # ]
## Transitions:
-- On EOF shift to state 452
## Reductions:

State 452:
## Known stack suffix:
## inline_module1 EOF
## LR(1) items:
script -> inline_module1 EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production script -> inline_module1 EOF

State 453:
## Known stack suffix:
## cmd_list
## LR(1) items:
script -> cmd_list . EOF [ # ]
## Transitions:
-- On EOF shift to state 454
## Reductions:

State 454:
## Known stack suffix:
## cmd_list EOF
## LR(1) items:
script -> cmd_list EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production script -> cmd_list EOF

State 455:
## Known stack suffix:
##
## LR(1) items:
script1' -> . script1 [ # ]
## Transitions:
-- On LPAR shift to state 456
-- On script_module shift to state 526
-- On script1 shift to state 527
-- On module_ shift to state 528
-- On meta shift to state 529
-- On cmd shift to state 530
-- On assertion shift to state 531
-- On action shift to state 532
## Reductions:

State 456:
## Known stack suffix:
## LPAR
## LR(1) items:
action -> LPAR . INVOKE module_var_opt name const_list RPAR [ # ]
action -> LPAR . GET module_var_opt name RPAR [ # ]
assertion -> LPAR . ASSERT_MALFORMED script_module STRING RPAR [ # ]
assertion -> LPAR . ASSERT_INVALID script_module STRING RPAR [ # ]
assertion -> LPAR . ASSERT_UNLINKABLE script_module STRING RPAR [ # ]
assertion -> LPAR . ASSERT_TRAP script_module STRING RPAR [ # ]
assertion -> LPAR . ASSERT_RETURN action const_list RPAR [ # ]
assertion -> LPAR . ASSERT_RETURN_CANONICAL_NAN action RPAR [ # ]
assertion -> LPAR . ASSERT_RETURN_ARITHMETIC_NAN action RPAR [ # ]
assertion -> LPAR . ASSERT_TRAP action STRING RPAR [ # ]
assertion -> LPAR . ASSERT_EXHAUSTION action STRING RPAR [ # ]
cmd -> LPAR . REGISTER name module_var_opt RPAR [ # ]
meta -> LPAR . SCRIPT script_var_opt cmd_list RPAR [ # ]
meta -> LPAR . INPUT script_var_opt STRING RPAR [ # ]
meta -> LPAR . OUTPUT script_var_opt STRING RPAR [ # ]
meta -> LPAR . OUTPUT script_var_opt RPAR [ # ]
module_ -> LPAR . MODULE module_var_opt module_fields RPAR [ # ]
script_module -> LPAR . MODULE module_var_opt BIN string_list RPAR [ # ]
script_module -> LPAR . MODULE module_var_opt QUOTE string_list RPAR [ # ]
## Transitions:
-- On SCRIPT shift to state 457
-- On REGISTER shift to state 461
-- On OUTPUT shift to state 465
-- On MODULE shift to state 470
-- On INVOKE shift to state 480
-- On INPUT shift to state 485
-- On GET shift to state 489
-- On ASSERT_UNLINKABLE shift to state 493
-- On ASSERT_TRAP shift to state 497
-- On ASSERT_RETURN_CANONICAL_NAN shift to state 504
-- On ASSERT_RETURN_ARITHMETIC_NAN shift to state 507
-- On ASSERT_RETURN shift to state 510
-- On ASSERT_MALFORMED shift to state 514
-- On ASSERT_INVALID shift to state 518
-- On ASSERT_EXHAUSTION shift to state 522
## Reductions:

State 457:
## Known stack suffix:
## LPAR SCRIPT
## LR(1) items:
meta -> LPAR SCRIPT . script_var_opt cmd_list RPAR [ # ]
## Transitions:
-- On VAR shift to state 365
-- On script_var_opt shift to state 458
## Reductions:
-- On RPAR LPAR
--   reduce production script_var_opt ->

State 458:
## Known stack suffix:
## LPAR SCRIPT script_var_opt
## LR(1) items:
meta -> LPAR SCRIPT script_var_opt . cmd_list RPAR [ # ]
## Transitions:
-- On LPAR shift to state 367
-- On script_module shift to state 441
-- On module_ shift to state 409
-- On meta shift to state 442
-- On cmd_list shift to state 459
-- On cmd shift to state 445
-- On assertion shift to state 447
-- On action shift to state 448
## Reductions:
-- On RPAR
--   reduce production cmd_list ->

State 459:
## Known stack suffix:
## LPAR SCRIPT script_var_opt cmd_list
## LR(1) items:
meta -> LPAR SCRIPT script_var_opt cmd_list . RPAR [ # ]
## Transitions:
-- On RPAR shift to state 460
## Reductions:

State 460:
## Known stack suffix:
## LPAR SCRIPT script_var_opt cmd_list RPAR
## LR(1) items:
meta -> LPAR SCRIPT script_var_opt cmd_list RPAR . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production meta -> LPAR SCRIPT script_var_opt cmd_list RPAR

State 461:
## Known stack suffix:
## LPAR REGISTER
## LR(1) items:
cmd -> LPAR REGISTER . name module_var_opt RPAR [ # ]
## Transitions:
-- On STRING shift to state 35
-- On name shift to state 462
## Reductions:

State 462:
## Known stack suffix:
## LPAR REGISTER name
## LR(1) items:
cmd -> LPAR REGISTER name . module_var_opt RPAR [ # ]
## Transitions:
-- On VAR shift to state 66
-- On module_var_opt shift to state 463
## Reductions:
-- On RPAR
--   reduce production module_var_opt ->

State 463:
## Known stack suffix:
## LPAR REGISTER name module_var_opt
## LR(1) items:
cmd -> LPAR REGISTER name module_var_opt . RPAR [ # ]
## Transitions:
-- On RPAR shift to state 464
## Reductions:

State 464:
## Known stack suffix:
## LPAR REGISTER name module_var_opt RPAR
## LR(1) items:
cmd -> LPAR REGISTER name module_var_opt RPAR . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production cmd -> LPAR REGISTER name module_var_opt RPAR

State 465:
## Known stack suffix:
## LPAR OUTPUT
## LR(1) items:
meta -> LPAR OUTPUT . script_var_opt STRING RPAR [ # ]
meta -> LPAR OUTPUT . script_var_opt RPAR [ # ]
## Transitions:
-- On VAR shift to state 365
-- On script_var_opt shift to state 466
## Reductions:
-- On STRING RPAR
--   reduce production script_var_opt ->

State 466:
## Known stack suffix:
## LPAR OUTPUT script_var_opt
## LR(1) items:
meta -> LPAR OUTPUT script_var_opt . STRING RPAR [ # ]
meta -> LPAR OUTPUT script_var_opt . RPAR [ # ]
## Transitions:
-- On STRING shift to state 467
-- On RPAR shift to state 469
## Reductions:

State 467:
## Known stack suffix:
## LPAR OUTPUT script_var_opt STRING
## LR(1) items:
meta -> LPAR OUTPUT script_var_opt STRING . RPAR [ # ]
## Transitions:
-- On RPAR shift to state 468
## Reductions:

State 468:
## Known stack suffix:
## LPAR OUTPUT script_var_opt STRING RPAR
## LR(1) items:
meta -> LPAR OUTPUT script_var_opt STRING RPAR . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production meta -> LPAR OUTPUT script_var_opt STRING RPAR

State 469:
## Known stack suffix:
## LPAR OUTPUT script_var_opt RPAR
## LR(1) items:
meta -> LPAR OUTPUT script_var_opt RPAR . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production meta -> LPAR OUTPUT script_var_opt RPAR

State 470:
## Known stack suffix:
## LPAR MODULE
## LR(1) items:
module_ -> LPAR MODULE . module_var_opt module_fields RPAR [ # ]
script_module -> LPAR MODULE . module_var_opt BIN string_list RPAR [ # ]
script_module -> LPAR MODULE . module_var_opt QUOTE string_list RPAR [ # ]
## Transitions:
-- On VAR shift to state 66
-- On module_var_opt shift to state 471
## Reductions:
-- On RPAR QUOTE LPAR BIN
--   reduce production module_var_opt ->

State 471:
## Known stack suffix:
## LPAR MODULE module_var_opt
## LR(1) items:
module_ -> LPAR MODULE module_var_opt . module_fields RPAR [ # ]
script_module -> LPAR MODULE module_var_opt . BIN string_list RPAR [ # ]
script_module -> LPAR MODULE module_var_opt . QUOTE string_list RPAR [ # ]
## Transitions:
-- On QUOTE shift to state 472
-- On LPAR shift to state 68
-- On BIN shift to state 475
-- On type_def shift to state 333
-- On table shift to state 334
-- On start shift to state 335
-- On module_fields1 shift to state 336
-- On module_fields shift to state 478
-- On memory shift to state 338
-- On import shift to state 340
-- On global shift to state 342
-- On func shift to state 344
-- On export shift to state 346
-- On elem shift to state 348
-- On data shift to state 350
## Reductions:
-- On RPAR
--   reduce production module_fields ->

State 472:
## Known stack suffix:
## LPAR MODULE module_var_opt QUOTE
## LR(1) items:
script_module -> LPAR MODULE module_var_opt QUOTE . string_list RPAR [ # ]
## Transitions:
-- On string_list shift to state 473
## Default reduction:
-- After reading the next token, reduce production string_list ->

State 473:
## Known stack suffix:
## LPAR MODULE module_var_opt QUOTE string_list
## LR(1) items:
script_module -> LPAR MODULE module_var_opt QUOTE string_list . RPAR [ # ]
string_list -> string_list . STRING [ STRING RPAR ]
## Transitions:
-- On STRING shift to state 74
-- On RPAR shift to state 474
## Reductions:

State 474:
## Known stack suffix:
## LPAR MODULE module_var_opt QUOTE string_list RPAR
## LR(1) items:
script_module -> LPAR MODULE module_var_opt QUOTE string_list RPAR . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production script_module -> LPAR MODULE module_var_opt QUOTE string_list RPAR

State 475:
## Known stack suffix:
## LPAR MODULE module_var_opt BIN
## LR(1) items:
script_module -> LPAR MODULE module_var_opt BIN . string_list RPAR [ # ]
## Transitions:
-- On string_list shift to state 476
## Default reduction:
-- After reading the next token, reduce production string_list ->

State 476:
## Known stack suffix:
## LPAR MODULE module_var_opt BIN string_list
## LR(1) items:
script_module -> LPAR MODULE module_var_opt BIN string_list . RPAR [ # ]
string_list -> string_list . STRING [ STRING RPAR ]
## Transitions:
-- On STRING shift to state 74
-- On RPAR shift to state 477
## Reductions:

State 477:
## Known stack suffix:
## LPAR MODULE module_var_opt BIN string_list RPAR
## LR(1) items:
script_module -> LPAR MODULE module_var_opt BIN string_list RPAR . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production script_module -> LPAR MODULE module_var_opt BIN string_list RPAR

State 478:
## Known stack suffix:
## LPAR MODULE module_var_opt module_fields
## LR(1) items:
module_ -> LPAR MODULE module_var_opt module_fields . RPAR [ # ]
## Transitions:
-- On RPAR shift to state 479
## Reductions:

State 479:
## Known stack suffix:
## LPAR MODULE module_var_opt module_fields RPAR
## LR(1) items:
module_ -> LPAR MODULE module_var_opt module_fields RPAR . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production module_ -> LPAR MODULE module_var_opt module_fields RPAR

State 480:
## Known stack suffix:
## LPAR INVOKE
## LR(1) items:
action -> LPAR INVOKE . module_var_opt name const_list RPAR [ # ]
## Transitions:
-- On VAR shift to state 66
-- On module_var_opt shift to state 481
## Reductions:
-- On STRING
--   reduce production module_var_opt ->

State 481:
## Known stack suffix:
## LPAR INVOKE module_var_opt
## LR(1) items:
action -> LPAR INVOKE module_var_opt . name const_list RPAR [ # ]
## Transitions:
-- On STRING shift to state 35
-- On name shift to state 482
## Reductions:

State 482:
## Known stack suffix:
## LPAR INVOKE module_var_opt name
## LR(1) items:
action -> LPAR INVOKE module_var_opt name . const_list RPAR [ # ]
## Transitions:
-- On LPAR shift to state 388
-- On const_list shift to state 483
-- On const shift to state 394
## Reductions:
-- On RPAR
--   reduce production const_list ->

State 483:
## Known stack suffix:
## LPAR INVOKE module_var_opt name const_list
## LR(1) items:
action -> LPAR INVOKE module_var_opt name const_list . RPAR [ # ]
## Transitions:
-- On RPAR shift to state 484
## Reductions:

State 484:
## Known stack suffix:
## LPAR INVOKE module_var_opt name const_list RPAR
## LR(1) items:
action -> LPAR INVOKE module_var_opt name const_list RPAR . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production action -> LPAR INVOKE module_var_opt name const_list RPAR

State 485:
## Known stack suffix:
## LPAR INPUT
## LR(1) items:
meta -> LPAR INPUT . script_var_opt STRING RPAR [ # ]
## Transitions:
-- On VAR shift to state 365
-- On script_var_opt shift to state 486
## Reductions:
-- On STRING
--   reduce production script_var_opt ->

State 486:
## Known stack suffix:
## LPAR INPUT script_var_opt
## LR(1) items:
meta -> LPAR INPUT script_var_opt . STRING RPAR [ # ]
## Transitions:
-- On STRING shift to state 487
## Reductions:

State 487:
## Known stack suffix:
## LPAR INPUT script_var_opt STRING
## LR(1) items:
meta -> LPAR INPUT script_var_opt STRING . RPAR [ # ]
## Transitions:
-- On RPAR shift to state 488
## Reductions:

State 488:
## Known stack suffix:
## LPAR INPUT script_var_opt STRING RPAR
## LR(1) items:
meta -> LPAR INPUT script_var_opt STRING RPAR . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production meta -> LPAR INPUT script_var_opt STRING RPAR

State 489:
## Known stack suffix:
## LPAR GET
## LR(1) items:
action -> LPAR GET . module_var_opt name RPAR [ # ]
## Transitions:
-- On VAR shift to state 66
-- On module_var_opt shift to state 490
## Reductions:
-- On STRING
--   reduce production module_var_opt ->

State 490:
## Known stack suffix:
## LPAR GET module_var_opt
## LR(1) items:
action -> LPAR GET module_var_opt . name RPAR [ # ]
## Transitions:
-- On STRING shift to state 35
-- On name shift to state 491
## Reductions:

State 491:
## Known stack suffix:
## LPAR GET module_var_opt name
## LR(1) items:
action -> LPAR GET module_var_opt name . RPAR [ # ]
## Transitions:
-- On RPAR shift to state 492
## Reductions:

State 492:
## Known stack suffix:
## LPAR GET module_var_opt name RPAR
## LR(1) items:
action -> LPAR GET module_var_opt name RPAR . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production action -> LPAR GET module_var_opt name RPAR

State 493:
## Known stack suffix:
## LPAR ASSERT_UNLINKABLE
## LR(1) items:
assertion -> LPAR ASSERT_UNLINKABLE . script_module STRING RPAR [ # ]
## Transitions:
-- On LPAR shift to state 405
-- On script_module shift to state 494
-- On module_ shift to state 409
## Reductions:

State 494:
## Known stack suffix:
## LPAR ASSERT_UNLINKABLE script_module
## LR(1) items:
assertion -> LPAR ASSERT_UNLINKABLE script_module . STRING RPAR [ # ]
## Transitions:
-- On STRING shift to state 495
## Reductions:

State 495:
## Known stack suffix:
## LPAR ASSERT_UNLINKABLE script_module STRING
## LR(1) items:
assertion -> LPAR ASSERT_UNLINKABLE script_module STRING . RPAR [ # ]
## Transitions:
-- On RPAR shift to state 496
## Reductions:

State 496:
## Known stack suffix:
## LPAR ASSERT_UNLINKABLE script_module STRING RPAR
## LR(1) items:
assertion -> LPAR ASSERT_UNLINKABLE script_module STRING RPAR . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production assertion -> LPAR ASSERT_UNLINKABLE script_module STRING RPAR

State 497:
## Known stack suffix:
## LPAR ASSERT_TRAP
## LR(1) items:
assertion -> LPAR ASSERT_TRAP . script_module STRING RPAR [ # ]
assertion -> LPAR ASSERT_TRAP . action STRING RPAR [ # ]
## Transitions:
-- On LPAR shift to state 411
-- On script_module shift to state 498
-- On module_ shift to state 409
-- On action shift to state 501
## Reductions:

State 498:
## Known stack suffix:
## LPAR ASSERT_TRAP script_module
## LR(1) items:
assertion -> LPAR ASSERT_TRAP script_module . STRING RPAR [ # ]
## Transitions:
-- On STRING shift to state 499
## Reductions:

State 499:
## Known stack suffix:
## LPAR ASSERT_TRAP script_module STRING
## LR(1) items:
assertion -> LPAR ASSERT_TRAP script_module STRING . RPAR [ # ]
## Transitions:
-- On RPAR shift to state 500
## Reductions:

State 500:
## Known stack suffix:
## LPAR ASSERT_TRAP script_module STRING RPAR
## LR(1) items:
assertion -> LPAR ASSERT_TRAP script_module STRING RPAR . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production assertion -> LPAR ASSERT_TRAP script_module STRING RPAR

State 501:
## Known stack suffix:
## LPAR ASSERT_TRAP action
## LR(1) items:
assertion -> LPAR ASSERT_TRAP action . STRING RPAR [ # ]
## Transitions:
-- On STRING shift to state 502
## Reductions:

State 502:
## Known stack suffix:
## LPAR ASSERT_TRAP action STRING
## LR(1) items:
assertion -> LPAR ASSERT_TRAP action STRING . RPAR [ # ]
## Transitions:
-- On RPAR shift to state 503
## Reductions:

State 503:
## Known stack suffix:
## LPAR ASSERT_TRAP action STRING RPAR
## LR(1) items:
assertion -> LPAR ASSERT_TRAP action STRING RPAR . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production assertion -> LPAR ASSERT_TRAP action STRING RPAR

State 504:
## Known stack suffix:
## LPAR ASSERT_RETURN_CANONICAL_NAN
## LR(1) items:
assertion -> LPAR ASSERT_RETURN_CANONICAL_NAN . action RPAR [ # ]
## Transitions:
-- On LPAR shift to state 419
-- On action shift to state 505
## Reductions:

State 505:
## Known stack suffix:
## LPAR ASSERT_RETURN_CANONICAL_NAN action
## LR(1) items:
assertion -> LPAR ASSERT_RETURN_CANONICAL_NAN action . RPAR [ # ]
## Transitions:
-- On RPAR shift to state 506
## Reductions:

State 506:
## Known stack suffix:
## LPAR ASSERT_RETURN_CANONICAL_NAN action RPAR
## LR(1) items:
assertion -> LPAR ASSERT_RETURN_CANONICAL_NAN action RPAR . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production assertion -> LPAR ASSERT_RETURN_CANONICAL_NAN action RPAR

State 507:
## Known stack suffix:
## LPAR ASSERT_RETURN_ARITHMETIC_NAN
## LR(1) items:
assertion -> LPAR ASSERT_RETURN_ARITHMETIC_NAN . action RPAR [ # ]
## Transitions:
-- On LPAR shift to state 419
-- On action shift to state 508
## Reductions:

State 508:
## Known stack suffix:
## LPAR ASSERT_RETURN_ARITHMETIC_NAN action
## LR(1) items:
assertion -> LPAR ASSERT_RETURN_ARITHMETIC_NAN action . RPAR [ # ]
## Transitions:
-- On RPAR shift to state 509
## Reductions:

State 509:
## Known stack suffix:
## LPAR ASSERT_RETURN_ARITHMETIC_NAN action RPAR
## LR(1) items:
assertion -> LPAR ASSERT_RETURN_ARITHMETIC_NAN action RPAR . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production assertion -> LPAR ASSERT_RETURN_ARITHMETIC_NAN action RPAR

State 510:
## Known stack suffix:
## LPAR ASSERT_RETURN
## LR(1) items:
assertion -> LPAR ASSERT_RETURN . action const_list RPAR [ # ]
## Transitions:
-- On LPAR shift to state 419
-- On action shift to state 511
## Reductions:

State 511:
## Known stack suffix:
## LPAR ASSERT_RETURN action
## LR(1) items:
assertion -> LPAR ASSERT_RETURN action . const_list RPAR [ # ]
## Transitions:
-- On LPAR shift to state 388
-- On const_list shift to state 512
-- On const shift to state 394
## Reductions:
-- On RPAR
--   reduce production const_list ->

State 512:
## Known stack suffix:
## LPAR ASSERT_RETURN action const_list
## LR(1) items:
assertion -> LPAR ASSERT_RETURN action const_list . RPAR [ # ]
## Transitions:
-- On RPAR shift to state 513
## Reductions:

State 513:
## Known stack suffix:
## LPAR ASSERT_RETURN action const_list RPAR
## LR(1) items:
assertion -> LPAR ASSERT_RETURN action const_list RPAR . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production assertion -> LPAR ASSERT_RETURN action const_list RPAR

State 514:
## Known stack suffix:
## LPAR ASSERT_MALFORMED
## LR(1) items:
assertion -> LPAR ASSERT_MALFORMED . script_module STRING RPAR [ # ]
## Transitions:
-- On LPAR shift to state 405
-- On script_module shift to state 515
-- On module_ shift to state 409
## Reductions:

State 515:
## Known stack suffix:
## LPAR ASSERT_MALFORMED script_module
## LR(1) items:
assertion -> LPAR ASSERT_MALFORMED script_module . STRING RPAR [ # ]
## Transitions:
-- On STRING shift to state 516
## Reductions:

State 516:
## Known stack suffix:
## LPAR ASSERT_MALFORMED script_module STRING
## LR(1) items:
assertion -> LPAR ASSERT_MALFORMED script_module STRING . RPAR [ # ]
## Transitions:
-- On RPAR shift to state 517
## Reductions:

State 517:
## Known stack suffix:
## LPAR ASSERT_MALFORMED script_module STRING RPAR
## LR(1) items:
assertion -> LPAR ASSERT_MALFORMED script_module STRING RPAR . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production assertion -> LPAR ASSERT_MALFORMED script_module STRING RPAR

State 518:
## Known stack suffix:
## LPAR ASSERT_INVALID
## LR(1) items:
assertion -> LPAR ASSERT_INVALID . script_module STRING RPAR [ # ]
## Transitions:
-- On LPAR shift to state 405
-- On script_module shift to state 519
-- On module_ shift to state 409
## Reductions:

State 519:
## Known stack suffix:
## LPAR ASSERT_INVALID script_module
## LR(1) items:
assertion -> LPAR ASSERT_INVALID script_module . STRING RPAR [ # ]
## Transitions:
-- On STRING shift to state 520
## Reductions:

State 520:
## Known stack suffix:
## LPAR ASSERT_INVALID script_module STRING
## LR(1) items:
assertion -> LPAR ASSERT_INVALID script_module STRING . RPAR [ # ]
## Transitions:
-- On RPAR shift to state 521
## Reductions:

State 521:
## Known stack suffix:
## LPAR ASSERT_INVALID script_module STRING RPAR
## LR(1) items:
assertion -> LPAR ASSERT_INVALID script_module STRING RPAR . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production assertion -> LPAR ASSERT_INVALID script_module STRING RPAR

State 522:
## Known stack suffix:
## LPAR ASSERT_EXHAUSTION
## LR(1) items:
assertion -> LPAR ASSERT_EXHAUSTION . action STRING RPAR [ # ]
## Transitions:
-- On LPAR shift to state 419
-- On action shift to state 523
## Reductions:

State 523:
## Known stack suffix:
## LPAR ASSERT_EXHAUSTION action
## LR(1) items:
assertion -> LPAR ASSERT_EXHAUSTION action . STRING RPAR [ # ]
## Transitions:
-- On STRING shift to state 524
## Reductions:

State 524:
## Known stack suffix:
## LPAR ASSERT_EXHAUSTION action STRING
## LR(1) items:
assertion -> LPAR ASSERT_EXHAUSTION action STRING . RPAR [ # ]
## Transitions:
-- On RPAR shift to state 525
## Reductions:

State 525:
## Known stack suffix:
## LPAR ASSERT_EXHAUSTION action STRING RPAR
## LR(1) items:
assertion -> LPAR ASSERT_EXHAUSTION action STRING RPAR . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production assertion -> LPAR ASSERT_EXHAUSTION action STRING RPAR

State 526:
## Known stack suffix:
## script_module
## LR(1) items:
cmd -> script_module . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production cmd -> script_module

State 527:
## Known stack suffix:
## script1
## LR(1) items:
script1' -> script1 . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept script1

State 528:
## Known stack suffix:
## module_
## LR(1) items:
script_module -> module_ . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production script_module -> module_

State 529:
## Known stack suffix:
## meta
## LR(1) items:
cmd -> meta . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production cmd -> meta

State 530:
## Known stack suffix:
## cmd
## LR(1) items:
script1 -> cmd . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production script1 -> cmd

State 531:
## Known stack suffix:
## assertion
## LR(1) items:
cmd -> assertion . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production cmd -> assertion

State 532:
## Known stack suffix:
## action
## LR(1) items:
cmd -> action . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production cmd -> action

