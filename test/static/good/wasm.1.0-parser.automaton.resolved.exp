State 0:
module1' -> . module1 [ # ]
-- On LPAR shift to state 1
-- On type_def shift to state 333
-- On table shift to state 334
-- On start shift to state 335
-- On module_fields1 shift to state 336
-- On module_fields shift to state 356
-- On module_ shift to state 357
-- On module1 shift to state 359
-- On memory shift to state 338
-- On inline_module shift to state 360
-- On import shift to state 340
-- On global shift to state 342
-- On func shift to state 344
-- On export shift to state 346
-- On elem shift to state 348
-- On data shift to state 350
-- On EOF reduce production module_fields -> 

State 1:
data -> LPAR . DATA var offset string_list RPAR [ LPAR EOF ]
data -> LPAR . DATA offset string_list RPAR [ LPAR EOF ]
elem -> LPAR . ELEM var offset var_list RPAR [ LPAR EOF ]
elem -> LPAR . ELEM offset var_list RPAR [ LPAR EOF ]
export -> LPAR . EXPORT name export_desc RPAR [ LPAR EOF ]
func -> LPAR . FUNC bind_var_opt func_fields RPAR [ LPAR EOF ]
global -> LPAR . GLOBAL bind_var_opt global_fields RPAR [ LPAR EOF ]
import -> LPAR . IMPORT name name import_desc RPAR [ LPAR EOF ]
memory -> LPAR . MEMORY bind_var_opt memory_fields RPAR [ LPAR EOF ]
module_ -> LPAR . MODULE module_var_opt module_fields RPAR [ EOF ]
start -> LPAR . START var RPAR [ LPAR EOF ]
table -> LPAR . TABLE bind_var_opt table_fields RPAR [ LPAR EOF ]
type_def -> LPAR . TYPE type_ RPAR [ LPAR EOF ]
type_def -> LPAR . TYPE bind_var type_ RPAR [ LPAR EOF ]
-- On TYPE shift to state 2
-- On TABLE shift to state 29
-- On START shift to state 62
-- On MODULE shift to state 65
-- On MEMORY shift to state 69
-- On IMPORT shift to state 84
-- On GLOBAL shift to state 117
-- On FUNC shift to state 239
-- On EXPORT shift to state 295
-- On ELEM shift to state 312
-- On DATA shift to state 325

State 2:
type_def -> LPAR TYPE . type_ RPAR [ RPAR LPAR EOF ]
type_def -> LPAR TYPE . bind_var type_ RPAR [ RPAR LPAR EOF ]
-- On VAR shift to state 3
-- On LPAR shift to state 4
-- On type_ shift to state 23
-- On func_type shift to state 25
-- On bind_var shift to state 26

State 3:
bind_var -> VAR . [ VALUE_TYPE UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP NAT LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ANYFUNC ]
-- On VALUE_TYPE reduce production bind_var -> VAR
-- On UNREACHABLE reduce production bind_var -> VAR
-- On UNARY reduce production bind_var -> VAR
-- On TEST reduce production bind_var -> VAR
-- On TEE_LOCAL reduce production bind_var -> VAR
-- On STORE reduce production bind_var -> VAR
-- On SET_LOCAL reduce production bind_var -> VAR
-- On SET_GLOBAL reduce production bind_var -> VAR
-- On SELECT reduce production bind_var -> VAR
-- On RPAR reduce production bind_var -> VAR
-- On RETURN reduce production bind_var -> VAR
-- On NOP reduce production bind_var -> VAR
-- On NAT reduce production bind_var -> VAR
-- On LPAR reduce production bind_var -> VAR
-- On LOOP reduce production bind_var -> VAR
-- On LOAD reduce production bind_var -> VAR
-- On IF reduce production bind_var -> VAR
-- On GROW_MEMORY reduce production bind_var -> VAR
-- On GET_LOCAL reduce production bind_var -> VAR
-- On GET_GLOBAL reduce production bind_var -> VAR
-- On END reduce production bind_var -> VAR
-- On ELSE reduce production bind_var -> VAR
-- On DROP reduce production bind_var -> VAR
-- On CURRENT_MEMORY reduce production bind_var -> VAR
-- On CONVERT reduce production bind_var -> VAR
-- On CONST reduce production bind_var -> VAR
-- On COMPARE reduce production bind_var -> VAR
-- On CALL_INDIRECT reduce production bind_var -> VAR
-- On CALL reduce production bind_var -> VAR
-- On BR_TABLE reduce production bind_var -> VAR
-- On BR_IF reduce production bind_var -> VAR
-- On BR reduce production bind_var -> VAR
-- On BLOCK reduce production bind_var -> VAR
-- On BINARY reduce production bind_var -> VAR
-- On ANYFUNC reduce production bind_var -> VAR

State 4:
func_type -> LPAR . FUNC func_sig RPAR [ RPAR ]
-- On FUNC shift to state 5

State 5:
func_type -> LPAR FUNC . func_sig RPAR [ RPAR ]
-- On LPAR shift to state 6
-- On func_sig shift to state 21
-- On RPAR reduce production func_sig -> 

State 6:
func_sig -> LPAR . RESULT value_type_list RPAR func_sig [ RPAR ]
func_sig -> LPAR . PARAM value_type_list RPAR func_sig [ RPAR ]
func_sig -> LPAR . PARAM bind_var VALUE_TYPE RPAR func_sig [ RPAR ]
-- On RESULT shift to state 7
-- On PARAM shift to state 13

State 7:
func_sig -> LPAR RESULT . value_type_list RPAR func_sig [ RPAR ]
-- On VALUE_TYPE shift to state 8
-- On value_type_list shift to state 10
-- On RPAR reduce production value_type_list -> 

State 8:
value_type_list -> VALUE_TYPE . value_type_list [ RPAR ]
-- On VALUE_TYPE shift to state 8
-- On value_type_list shift to state 9
-- On RPAR reduce production value_type_list -> 

State 9:
value_type_list -> VALUE_TYPE value_type_list . [ RPAR ]
-- On RPAR reduce production value_type_list -> VALUE_TYPE value_type_list

State 10:
func_sig -> LPAR RESULT value_type_list . RPAR func_sig [ RPAR ]
-- On RPAR shift to state 11

State 11:
func_sig -> LPAR RESULT value_type_list RPAR . func_sig [ RPAR ]
-- On LPAR shift to state 6
-- On func_sig shift to state 12
-- On RPAR reduce production func_sig -> 

State 12:
func_sig -> LPAR RESULT value_type_list RPAR func_sig . [ RPAR ]
-- On RPAR reduce production func_sig -> LPAR RESULT value_type_list RPAR func_sig

State 13:
func_sig -> LPAR PARAM . value_type_list RPAR func_sig [ RPAR ]
func_sig -> LPAR PARAM . bind_var VALUE_TYPE RPAR func_sig [ RPAR ]
-- On VAR shift to state 3
-- On VALUE_TYPE shift to state 8
-- On value_type_list shift to state 14
-- On bind_var shift to state 17
-- On RPAR reduce production value_type_list -> 

State 14:
func_sig -> LPAR PARAM value_type_list . RPAR func_sig [ RPAR ]
-- On RPAR shift to state 15

State 15:
func_sig -> LPAR PARAM value_type_list RPAR . func_sig [ RPAR ]
-- On LPAR shift to state 6
-- On func_sig shift to state 16
-- On RPAR reduce production func_sig -> 

State 16:
func_sig -> LPAR PARAM value_type_list RPAR func_sig . [ RPAR ]
-- On RPAR reduce production func_sig -> LPAR PARAM value_type_list RPAR func_sig

State 17:
func_sig -> LPAR PARAM bind_var . VALUE_TYPE RPAR func_sig [ RPAR ]
-- On VALUE_TYPE shift to state 18

State 18:
func_sig -> LPAR PARAM bind_var VALUE_TYPE . RPAR func_sig [ RPAR ]
-- On RPAR shift to state 19

State 19:
func_sig -> LPAR PARAM bind_var VALUE_TYPE RPAR . func_sig [ RPAR ]
-- On LPAR shift to state 6
-- On func_sig shift to state 20
-- On RPAR reduce production func_sig -> 

State 20:
func_sig -> LPAR PARAM bind_var VALUE_TYPE RPAR func_sig . [ RPAR ]
-- On RPAR reduce production func_sig -> LPAR PARAM bind_var VALUE_TYPE RPAR func_sig

State 21:
func_type -> LPAR FUNC func_sig . RPAR [ RPAR ]
-- On RPAR shift to state 22

State 22:
func_type -> LPAR FUNC func_sig RPAR . [ RPAR ]
-- On RPAR reduce production func_type -> LPAR FUNC func_sig RPAR

State 23:
type_def -> LPAR TYPE type_ . RPAR [ RPAR LPAR EOF ]
-- On RPAR shift to state 24

State 24:
type_def -> LPAR TYPE type_ RPAR . [ RPAR LPAR EOF ]
-- On RPAR reduce production type_def -> LPAR TYPE type_ RPAR
-- On LPAR reduce production type_def -> LPAR TYPE type_ RPAR
-- On EOF reduce production type_def -> LPAR TYPE type_ RPAR

State 25:
type_ -> func_type . [ RPAR ]
-- On RPAR reduce production type_ -> func_type

State 26:
type_def -> LPAR TYPE bind_var . type_ RPAR [ RPAR LPAR EOF ]
-- On LPAR shift to state 4
-- On type_ shift to state 27
-- On func_type shift to state 25

State 27:
type_def -> LPAR TYPE bind_var type_ . RPAR [ RPAR LPAR EOF ]
-- On RPAR shift to state 28

State 28:
type_def -> LPAR TYPE bind_var type_ RPAR . [ RPAR LPAR EOF ]
-- On RPAR reduce production type_def -> LPAR TYPE bind_var type_ RPAR
-- On LPAR reduce production type_def -> LPAR TYPE bind_var type_ RPAR
-- On EOF reduce production type_def -> LPAR TYPE bind_var type_ RPAR

State 29:
table -> LPAR TABLE . bind_var_opt table_fields RPAR [ RPAR LPAR EOF ]
-- On VAR shift to state 3
-- On bind_var_opt shift to state 30
-- On bind_var shift to state 61
-- On NAT reduce production bind_var_opt -> 
-- On LPAR reduce production bind_var_opt -> 
-- On ANYFUNC reduce production bind_var_opt -> 

State 30:
table -> LPAR TABLE bind_var_opt . table_fields RPAR [ RPAR LPAR EOF ]
-- On NAT shift to state 31
-- On LPAR shift to state 33
-- On ANYFUNC shift to state 42
-- On table_sig shift to state 43
-- On table_fields shift to state 44
-- On limits shift to state 46
-- On inline_import shift to state 48
-- On inline_export shift to state 50
-- On elem_type shift to state 52

State 31:
limits -> NAT . [ RPAR ANYFUNC ]
limits -> NAT . NAT [ RPAR ANYFUNC ]
-- On NAT shift to state 32
-- On RPAR reduce production limits -> NAT
-- On ANYFUNC reduce production limits -> NAT

State 32:
limits -> NAT NAT . [ RPAR ANYFUNC ]
-- On RPAR reduce production limits -> NAT NAT
-- On ANYFUNC reduce production limits -> NAT NAT

State 33:
inline_export -> LPAR . EXPORT name RPAR [ NAT LPAR ANYFUNC ]
inline_import -> LPAR . IMPORT name name RPAR [ NAT ]
-- On IMPORT shift to state 34
-- On EXPORT shift to state 39

State 34:
inline_import -> LPAR IMPORT . name name RPAR [ VALUE_TYPE RPAR NAT LPAR ]
-- On STRING shift to state 35
-- On name shift to state 36

State 35:
name -> STRING . [ VAR STRING RPAR LPAR ]
-- On VAR reduce production name -> STRING
-- On STRING reduce production name -> STRING
-- On RPAR reduce production name -> STRING
-- On LPAR reduce production name -> STRING

State 36:
inline_import -> LPAR IMPORT name . name RPAR [ VALUE_TYPE RPAR NAT LPAR ]
-- On STRING shift to state 35
-- On name shift to state 37

State 37:
inline_import -> LPAR IMPORT name name . RPAR [ VALUE_TYPE RPAR NAT LPAR ]
-- On RPAR shift to state 38

State 38:
inline_import -> LPAR IMPORT name name RPAR . [ VALUE_TYPE RPAR NAT LPAR ]
-- On VALUE_TYPE reduce production inline_import -> LPAR IMPORT name name RPAR
-- On RPAR reduce production inline_import -> LPAR IMPORT name name RPAR
-- On NAT reduce production inline_import -> LPAR IMPORT name name RPAR
-- On LPAR reduce production inline_import -> LPAR IMPORT name name RPAR

State 39:
inline_export -> LPAR EXPORT . name RPAR [ VALUE_TYPE UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP NAT LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ANYFUNC ]
-- On STRING shift to state 35
-- On name shift to state 40

State 40:
inline_export -> LPAR EXPORT name . RPAR [ VALUE_TYPE UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP NAT LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ANYFUNC ]
-- On RPAR shift to state 41

State 41:
inline_export -> LPAR EXPORT name RPAR . [ VALUE_TYPE UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP NAT LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ANYFUNC ]
-- On VALUE_TYPE reduce production inline_export -> LPAR EXPORT name RPAR
-- On UNREACHABLE reduce production inline_export -> LPAR EXPORT name RPAR
-- On UNARY reduce production inline_export -> LPAR EXPORT name RPAR
-- On TEST reduce production inline_export -> LPAR EXPORT name RPAR
-- On TEE_LOCAL reduce production inline_export -> LPAR EXPORT name RPAR
-- On STORE reduce production inline_export -> LPAR EXPORT name RPAR
-- On SET_LOCAL reduce production inline_export -> LPAR EXPORT name RPAR
-- On SET_GLOBAL reduce production inline_export -> LPAR EXPORT name RPAR
-- On SELECT reduce production inline_export -> LPAR EXPORT name RPAR
-- On RPAR reduce production inline_export -> LPAR EXPORT name RPAR
-- On RETURN reduce production inline_export -> LPAR EXPORT name RPAR
-- On NOP reduce production inline_export -> LPAR EXPORT name RPAR
-- On NAT reduce production inline_export -> LPAR EXPORT name RPAR
-- On LPAR reduce production inline_export -> LPAR EXPORT name RPAR
-- On LOOP reduce production inline_export -> LPAR EXPORT name RPAR
-- On LOAD reduce production inline_export -> LPAR EXPORT name RPAR
-- On IF reduce production inline_export -> LPAR EXPORT name RPAR
-- On GROW_MEMORY reduce production inline_export -> LPAR EXPORT name RPAR
-- On GET_LOCAL reduce production inline_export -> LPAR EXPORT name RPAR
-- On GET_GLOBAL reduce production inline_export -> LPAR EXPORT name RPAR
-- On DROP reduce production inline_export -> LPAR EXPORT name RPAR
-- On CURRENT_MEMORY reduce production inline_export -> LPAR EXPORT name RPAR
-- On CONVERT reduce production inline_export -> LPAR EXPORT name RPAR
-- On CONST reduce production inline_export -> LPAR EXPORT name RPAR
-- On COMPARE reduce production inline_export -> LPAR EXPORT name RPAR
-- On CALL_INDIRECT reduce production inline_export -> LPAR EXPORT name RPAR
-- On CALL reduce production inline_export -> LPAR EXPORT name RPAR
-- On BR_TABLE reduce production inline_export -> LPAR EXPORT name RPAR
-- On BR_IF reduce production inline_export -> LPAR EXPORT name RPAR
-- On BR reduce production inline_export -> LPAR EXPORT name RPAR
-- On BLOCK reduce production inline_export -> LPAR EXPORT name RPAR
-- On BINARY reduce production inline_export -> LPAR EXPORT name RPAR
-- On ANYFUNC reduce production inline_export -> LPAR EXPORT name RPAR

State 42:
elem_type -> ANYFUNC . [ RPAR LPAR ]
-- On RPAR reduce production elem_type -> ANYFUNC
-- On LPAR reduce production elem_type -> ANYFUNC

State 43:
table_fields -> table_sig . [ RPAR ]
-- On RPAR reduce production table_fields -> table_sig

State 44:
table -> LPAR TABLE bind_var_opt table_fields . RPAR [ RPAR LPAR EOF ]
-- On RPAR shift to state 45

State 45:
table -> LPAR TABLE bind_var_opt table_fields RPAR . [ RPAR LPAR EOF ]
-- On RPAR reduce production table -> LPAR TABLE bind_var_opt table_fields RPAR
-- On LPAR reduce production table -> LPAR TABLE bind_var_opt table_fields RPAR
-- On EOF reduce production table -> LPAR TABLE bind_var_opt table_fields RPAR

State 46:
table_sig -> limits . elem_type [ RPAR ]
-- On ANYFUNC shift to state 42
-- On elem_type shift to state 47

State 47:
table_sig -> limits elem_type . [ RPAR ]
-- On RPAR reduce production table_sig -> limits elem_type

State 48:
table_fields -> inline_import . table_sig [ RPAR ]
-- On NAT shift to state 31
-- On table_sig shift to state 49
-- On limits shift to state 46

State 49:
table_fields -> inline_import table_sig . [ RPAR ]
-- On RPAR reduce production table_fields -> inline_import table_sig

State 50:
table_fields -> inline_export . table_fields [ RPAR ]
-- On NAT shift to state 31
-- On LPAR shift to state 33
-- On ANYFUNC shift to state 42
-- On table_sig shift to state 43
-- On table_fields shift to state 51
-- On limits shift to state 46
-- On inline_import shift to state 48
-- On inline_export shift to state 50
-- On elem_type shift to state 52

State 51:
table_fields -> inline_export table_fields . [ RPAR ]
-- On RPAR reduce production table_fields -> inline_export table_fields

State 52:
table_fields -> elem_type . LPAR ELEM var_list RPAR [ RPAR ]
-- On LPAR shift to state 53

State 53:
table_fields -> elem_type LPAR . ELEM var_list RPAR [ RPAR ]
-- On ELEM shift to state 54

State 54:
table_fields -> elem_type LPAR ELEM . var_list RPAR [ RPAR ]
-- On VAR shift to state 55
-- On NAT shift to state 56
-- On var_list shift to state 57
-- On var shift to state 59
-- On RPAR reduce production var_list -> 

State 55:
var -> VAR . [ VAR UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP NAT LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
-- On VAR reduce production var -> VAR
-- On UNREACHABLE reduce production var -> VAR
-- On UNARY reduce production var -> VAR
-- On TEST reduce production var -> VAR
-- On TEE_LOCAL reduce production var -> VAR
-- On STORE reduce production var -> VAR
-- On SET_LOCAL reduce production var -> VAR
-- On SET_GLOBAL reduce production var -> VAR
-- On SELECT reduce production var -> VAR
-- On RPAR reduce production var -> VAR
-- On RETURN reduce production var -> VAR
-- On NOP reduce production var -> VAR
-- On NAT reduce production var -> VAR
-- On LPAR reduce production var -> VAR
-- On LOOP reduce production var -> VAR
-- On LOAD reduce production var -> VAR
-- On IF reduce production var -> VAR
-- On GROW_MEMORY reduce production var -> VAR
-- On GET_LOCAL reduce production var -> VAR
-- On GET_GLOBAL reduce production var -> VAR
-- On END reduce production var -> VAR
-- On ELSE reduce production var -> VAR
-- On DROP reduce production var -> VAR
-- On CURRENT_MEMORY reduce production var -> VAR
-- On CONVERT reduce production var -> VAR
-- On CONST reduce production var -> VAR
-- On COMPARE reduce production var -> VAR
-- On CALL_INDIRECT reduce production var -> VAR
-- On CALL reduce production var -> VAR
-- On BR_TABLE reduce production var -> VAR
-- On BR_IF reduce production var -> VAR
-- On BR reduce production var -> VAR
-- On BLOCK reduce production var -> VAR
-- On BINARY reduce production var -> VAR

State 56:
var -> NAT . [ VAR UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP NAT LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
-- On VAR reduce production var -> NAT
-- On UNREACHABLE reduce production var -> NAT
-- On UNARY reduce production var -> NAT
-- On TEST reduce production var -> NAT
-- On TEE_LOCAL reduce production var -> NAT
-- On STORE reduce production var -> NAT
-- On SET_LOCAL reduce production var -> NAT
-- On SET_GLOBAL reduce production var -> NAT
-- On SELECT reduce production var -> NAT
-- On RPAR reduce production var -> NAT
-- On RETURN reduce production var -> NAT
-- On NOP reduce production var -> NAT
-- On NAT reduce production var -> NAT
-- On LPAR reduce production var -> NAT
-- On LOOP reduce production var -> NAT
-- On LOAD reduce production var -> NAT
-- On IF reduce production var -> NAT
-- On GROW_MEMORY reduce production var -> NAT
-- On GET_LOCAL reduce production var -> NAT
-- On GET_GLOBAL reduce production var -> NAT
-- On END reduce production var -> NAT
-- On ELSE reduce production var -> NAT
-- On DROP reduce production var -> NAT
-- On CURRENT_MEMORY reduce production var -> NAT
-- On CONVERT reduce production var -> NAT
-- On CONST reduce production var -> NAT
-- On COMPARE reduce production var -> NAT
-- On CALL_INDIRECT reduce production var -> NAT
-- On CALL reduce production var -> NAT
-- On BR_TABLE reduce production var -> NAT
-- On BR_IF reduce production var -> NAT
-- On BR reduce production var -> NAT
-- On BLOCK reduce production var -> NAT
-- On BINARY reduce production var -> NAT

State 57:
table_fields -> elem_type LPAR ELEM var_list . RPAR [ RPAR ]
-- On RPAR shift to state 58

State 58:
table_fields -> elem_type LPAR ELEM var_list RPAR . [ RPAR ]
-- On RPAR reduce production table_fields -> elem_type LPAR ELEM var_list RPAR

State 59:
var_list -> var . var_list [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
-- On VAR shift to state 55
-- On NAT shift to state 56
-- On var_list shift to state 60
-- On var shift to state 59
-- On UNREACHABLE reduce production var_list -> 
-- On UNARY reduce production var_list -> 
-- On TEST reduce production var_list -> 
-- On TEE_LOCAL reduce production var_list -> 
-- On STORE reduce production var_list -> 
-- On SET_LOCAL reduce production var_list -> 
-- On SET_GLOBAL reduce production var_list -> 
-- On SELECT reduce production var_list -> 
-- On RPAR reduce production var_list -> 
-- On RETURN reduce production var_list -> 
-- On NOP reduce production var_list -> 
-- On LPAR reduce production var_list -> 
-- On LOOP reduce production var_list -> 
-- On LOAD reduce production var_list -> 
-- On IF reduce production var_list -> 
-- On GROW_MEMORY reduce production var_list -> 
-- On GET_LOCAL reduce production var_list -> 
-- On GET_GLOBAL reduce production var_list -> 
-- On END reduce production var_list -> 
-- On ELSE reduce production var_list -> 
-- On DROP reduce production var_list -> 
-- On CURRENT_MEMORY reduce production var_list -> 
-- On CONVERT reduce production var_list -> 
-- On CONST reduce production var_list -> 
-- On COMPARE reduce production var_list -> 
-- On CALL_INDIRECT reduce production var_list -> 
-- On CALL reduce production var_list -> 
-- On BR_TABLE reduce production var_list -> 
-- On BR_IF reduce production var_list -> 
-- On BR reduce production var_list -> 
-- On BLOCK reduce production var_list -> 
-- On BINARY reduce production var_list -> 

State 60:
var_list -> var var_list . [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
-- On UNREACHABLE reduce production var_list -> var var_list
-- On UNARY reduce production var_list -> var var_list
-- On TEST reduce production var_list -> var var_list
-- On TEE_LOCAL reduce production var_list -> var var_list
-- On STORE reduce production var_list -> var var_list
-- On SET_LOCAL reduce production var_list -> var var_list
-- On SET_GLOBAL reduce production var_list -> var var_list
-- On SELECT reduce production var_list -> var var_list
-- On RPAR reduce production var_list -> var var_list
-- On RETURN reduce production var_list -> var var_list
-- On NOP reduce production var_list -> var var_list
-- On LPAR reduce production var_list -> var var_list
-- On LOOP reduce production var_list -> var var_list
-- On LOAD reduce production var_list -> var var_list
-- On IF reduce production var_list -> var var_list
-- On GROW_MEMORY reduce production var_list -> var var_list
-- On GET_LOCAL reduce production var_list -> var var_list
-- On GET_GLOBAL reduce production var_list -> var var_list
-- On END reduce production var_list -> var var_list
-- On ELSE reduce production var_list -> var var_list
-- On DROP reduce production var_list -> var var_list
-- On CURRENT_MEMORY reduce production var_list -> var var_list
-- On CONVERT reduce production var_list -> var var_list
-- On CONST reduce production var_list -> var var_list
-- On COMPARE reduce production var_list -> var var_list
-- On CALL_INDIRECT reduce production var_list -> var var_list
-- On CALL reduce production var_list -> var var_list
-- On BR_TABLE reduce production var_list -> var var_list
-- On BR_IF reduce production var_list -> var var_list
-- On BR reduce production var_list -> var var_list
-- On BLOCK reduce production var_list -> var var_list
-- On BINARY reduce production var_list -> var var_list

State 61:
bind_var_opt -> bind_var . [ VALUE_TYPE UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP NAT LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ANYFUNC ]
-- On VALUE_TYPE reduce production bind_var_opt -> bind_var
-- On UNREACHABLE reduce production bind_var_opt -> bind_var
-- On UNARY reduce production bind_var_opt -> bind_var
-- On TEST reduce production bind_var_opt -> bind_var
-- On TEE_LOCAL reduce production bind_var_opt -> bind_var
-- On STORE reduce production bind_var_opt -> bind_var
-- On SET_LOCAL reduce production bind_var_opt -> bind_var
-- On SET_GLOBAL reduce production bind_var_opt -> bind_var
-- On SELECT reduce production bind_var_opt -> bind_var
-- On RPAR reduce production bind_var_opt -> bind_var
-- On RETURN reduce production bind_var_opt -> bind_var
-- On NOP reduce production bind_var_opt -> bind_var
-- On NAT reduce production bind_var_opt -> bind_var
-- On LPAR reduce production bind_var_opt -> bind_var
-- On LOOP reduce production bind_var_opt -> bind_var
-- On LOAD reduce production bind_var_opt -> bind_var
-- On IF reduce production bind_var_opt -> bind_var
-- On GROW_MEMORY reduce production bind_var_opt -> bind_var
-- On GET_LOCAL reduce production bind_var_opt -> bind_var
-- On GET_GLOBAL reduce production bind_var_opt -> bind_var
-- On DROP reduce production bind_var_opt -> bind_var
-- On CURRENT_MEMORY reduce production bind_var_opt -> bind_var
-- On CONVERT reduce production bind_var_opt -> bind_var
-- On CONST reduce production bind_var_opt -> bind_var
-- On COMPARE reduce production bind_var_opt -> bind_var
-- On CALL_INDIRECT reduce production bind_var_opt -> bind_var
-- On CALL reduce production bind_var_opt -> bind_var
-- On BR_TABLE reduce production bind_var_opt -> bind_var
-- On BR_IF reduce production bind_var_opt -> bind_var
-- On BR reduce production bind_var_opt -> bind_var
-- On BLOCK reduce production bind_var_opt -> bind_var
-- On BINARY reduce production bind_var_opt -> bind_var
-- On ANYFUNC reduce production bind_var_opt -> bind_var

State 62:
start -> LPAR START . var RPAR [ RPAR LPAR EOF ]
-- On VAR shift to state 55
-- On NAT shift to state 56
-- On var shift to state 63

State 63:
start -> LPAR START var . RPAR [ RPAR LPAR EOF ]
-- On RPAR shift to state 64

State 64:
start -> LPAR START var RPAR . [ RPAR LPAR EOF ]
-- On RPAR reduce production start -> LPAR START var RPAR
-- On LPAR reduce production start -> LPAR START var RPAR
-- On EOF reduce production start -> LPAR START var RPAR

State 65:
module_ -> LPAR MODULE . module_var_opt module_fields RPAR [ EOF ]
-- On VAR shift to state 66
-- On module_var_opt shift to state 67
-- On RPAR reduce production module_var_opt -> 
-- On LPAR reduce production module_var_opt -> 

State 66:
module_var_opt -> VAR . [ STRING RPAR QUOTE LPAR BIN ]
-- On STRING reduce production module_var_opt -> VAR
-- On RPAR reduce production module_var_opt -> VAR
-- On QUOTE reduce production module_var_opt -> VAR
-- On LPAR reduce production module_var_opt -> VAR
-- On BIN reduce production module_var_opt -> VAR

State 67:
module_ -> LPAR MODULE module_var_opt . module_fields RPAR [ EOF ]
-- On LPAR shift to state 68
-- On type_def shift to state 333
-- On table shift to state 334
-- On start shift to state 335
-- On module_fields1 shift to state 336
-- On module_fields shift to state 354
-- On memory shift to state 338
-- On import shift to state 340
-- On global shift to state 342
-- On func shift to state 344
-- On export shift to state 346
-- On elem shift to state 348
-- On data shift to state 350
-- On RPAR reduce production module_fields -> 

State 68:
data -> LPAR . DATA var offset string_list RPAR [ RPAR LPAR EOF ]
data -> LPAR . DATA offset string_list RPAR [ RPAR LPAR EOF ]
elem -> LPAR . ELEM var offset var_list RPAR [ RPAR LPAR EOF ]
elem -> LPAR . ELEM offset var_list RPAR [ RPAR LPAR EOF ]
export -> LPAR . EXPORT name export_desc RPAR [ RPAR LPAR EOF ]
func -> LPAR . FUNC bind_var_opt func_fields RPAR [ RPAR LPAR EOF ]
global -> LPAR . GLOBAL bind_var_opt global_fields RPAR [ RPAR LPAR EOF ]
import -> LPAR . IMPORT name name import_desc RPAR [ RPAR LPAR EOF ]
memory -> LPAR . MEMORY bind_var_opt memory_fields RPAR [ RPAR LPAR EOF ]
start -> LPAR . START var RPAR [ RPAR LPAR EOF ]
table -> LPAR . TABLE bind_var_opt table_fields RPAR [ RPAR LPAR EOF ]
type_def -> LPAR . TYPE type_ RPAR [ RPAR LPAR EOF ]
type_def -> LPAR . TYPE bind_var type_ RPAR [ RPAR LPAR EOF ]
-- On TYPE shift to state 2
-- On TABLE shift to state 29
-- On START shift to state 62
-- On MEMORY shift to state 69
-- On IMPORT shift to state 84
-- On GLOBAL shift to state 117
-- On FUNC shift to state 239
-- On EXPORT shift to state 295
-- On ELEM shift to state 312
-- On DATA shift to state 325

State 69:
memory -> LPAR MEMORY . bind_var_opt memory_fields RPAR [ RPAR LPAR EOF ]
-- On VAR shift to state 3
-- On bind_var_opt shift to state 70
-- On bind_var shift to state 61
-- On NAT reduce production bind_var_opt -> 
-- On LPAR reduce production bind_var_opt -> 

State 70:
memory -> LPAR MEMORY bind_var_opt . memory_fields RPAR [ RPAR LPAR EOF ]
-- On NAT shift to state 31
-- On LPAR shift to state 71
-- On memory_sig shift to state 76
-- On memory_fields shift to state 77
-- On limits shift to state 79
-- On inline_import shift to state 80
-- On inline_export shift to state 82

State 71:
inline_export -> LPAR . EXPORT name RPAR [ NAT LPAR ]
inline_import -> LPAR . IMPORT name name RPAR [ NAT ]
memory_fields -> LPAR . DATA string_list RPAR [ RPAR ]
-- On IMPORT shift to state 34
-- On EXPORT shift to state 39
-- On DATA shift to state 72

State 72:
memory_fields -> LPAR DATA . string_list RPAR [ RPAR ]
-- On string_list shift to state 73
-- On STRING reduce production string_list -> 
-- On RPAR reduce production string_list -> 

State 73:
memory_fields -> LPAR DATA string_list . RPAR [ RPAR ]
string_list -> string_list . STRING [ STRING RPAR ]
-- On STRING shift to state 74
-- On RPAR shift to state 75

State 74:
string_list -> string_list STRING . [ STRING RPAR ]
-- On STRING reduce production string_list -> string_list STRING
-- On RPAR reduce production string_list -> string_list STRING

State 75:
memory_fields -> LPAR DATA string_list RPAR . [ RPAR ]
-- On RPAR reduce production memory_fields -> LPAR DATA string_list RPAR

State 76:
memory_fields -> memory_sig . [ RPAR ]
-- On RPAR reduce production memory_fields -> memory_sig

State 77:
memory -> LPAR MEMORY bind_var_opt memory_fields . RPAR [ RPAR LPAR EOF ]
-- On RPAR shift to state 78

State 78:
memory -> LPAR MEMORY bind_var_opt memory_fields RPAR . [ RPAR LPAR EOF ]
-- On RPAR reduce production memory -> LPAR MEMORY bind_var_opt memory_fields RPAR
-- On LPAR reduce production memory -> LPAR MEMORY bind_var_opt memory_fields RPAR
-- On EOF reduce production memory -> LPAR MEMORY bind_var_opt memory_fields RPAR

State 79:
memory_sig -> limits . [ RPAR ]
-- On RPAR reduce production memory_sig -> limits

State 80:
memory_fields -> inline_import . memory_sig [ RPAR ]
-- On NAT shift to state 31
-- On memory_sig shift to state 81
-- On limits shift to state 79

State 81:
memory_fields -> inline_import memory_sig . [ RPAR ]
-- On RPAR reduce production memory_fields -> inline_import memory_sig

State 82:
memory_fields -> inline_export . memory_fields [ RPAR ]
-- On NAT shift to state 31
-- On LPAR shift to state 71
-- On memory_sig shift to state 76
-- On memory_fields shift to state 83
-- On limits shift to state 79
-- On inline_import shift to state 80
-- On inline_export shift to state 82

State 83:
memory_fields -> inline_export memory_fields . [ RPAR ]
-- On RPAR reduce production memory_fields -> inline_export memory_fields

State 84:
import -> LPAR IMPORT . name name import_desc RPAR [ RPAR LPAR EOF ]
-- On STRING shift to state 35
-- On name shift to state 85

State 85:
import -> LPAR IMPORT name . name import_desc RPAR [ RPAR LPAR EOF ]
-- On STRING shift to state 35
-- On name shift to state 86

State 86:
import -> LPAR IMPORT name name . import_desc RPAR [ RPAR LPAR EOF ]
-- On LPAR shift to state 87
-- On import_desc shift to state 115

State 87:
import_desc -> LPAR . FUNC bind_var_opt type_use RPAR [ RPAR ]
import_desc -> LPAR . FUNC bind_var_opt func_sig RPAR [ RPAR ]
import_desc -> LPAR . TABLE bind_var_opt table_sig RPAR [ RPAR ]
import_desc -> LPAR . MEMORY bind_var_opt memory_sig RPAR [ RPAR ]
import_desc -> LPAR . GLOBAL bind_var_opt global_type RPAR [ RPAR ]
-- On TABLE shift to state 88
-- On MEMORY shift to state 92
-- On GLOBAL shift to state 96
-- On FUNC shift to state 105

State 88:
import_desc -> LPAR TABLE . bind_var_opt table_sig RPAR [ RPAR ]
-- On VAR shift to state 3
-- On bind_var_opt shift to state 89
-- On bind_var shift to state 61
-- On NAT reduce production bind_var_opt -> 

State 89:
import_desc -> LPAR TABLE bind_var_opt . table_sig RPAR [ RPAR ]
-- On NAT shift to state 31
-- On table_sig shift to state 90
-- On limits shift to state 46

State 90:
import_desc -> LPAR TABLE bind_var_opt table_sig . RPAR [ RPAR ]
-- On RPAR shift to state 91

State 91:
import_desc -> LPAR TABLE bind_var_opt table_sig RPAR . [ RPAR ]
-- On RPAR reduce production import_desc -> LPAR TABLE bind_var_opt table_sig RPAR

State 92:
import_desc -> LPAR MEMORY . bind_var_opt memory_sig RPAR [ RPAR ]
-- On VAR shift to state 3
-- On bind_var_opt shift to state 93
-- On bind_var shift to state 61
-- On NAT reduce production bind_var_opt -> 

State 93:
import_desc -> LPAR MEMORY bind_var_opt . memory_sig RPAR [ RPAR ]
-- On NAT shift to state 31
-- On memory_sig shift to state 94
-- On limits shift to state 79

State 94:
import_desc -> LPAR MEMORY bind_var_opt memory_sig . RPAR [ RPAR ]
-- On RPAR shift to state 95

State 95:
import_desc -> LPAR MEMORY bind_var_opt memory_sig RPAR . [ RPAR ]
-- On RPAR reduce production import_desc -> LPAR MEMORY bind_var_opt memory_sig RPAR

State 96:
import_desc -> LPAR GLOBAL . bind_var_opt global_type RPAR [ RPAR ]
-- On VAR shift to state 3
-- On bind_var_opt shift to state 97
-- On bind_var shift to state 61
-- On VALUE_TYPE reduce production bind_var_opt -> 
-- On LPAR reduce production bind_var_opt -> 

State 97:
import_desc -> LPAR GLOBAL bind_var_opt . global_type RPAR [ RPAR ]
-- On VALUE_TYPE shift to state 98
-- On LPAR shift to state 99
-- On global_type shift to state 103

State 98:
global_type -> VALUE_TYPE . [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
-- On UNREACHABLE reduce production global_type -> VALUE_TYPE
-- On UNARY reduce production global_type -> VALUE_TYPE
-- On TEST reduce production global_type -> VALUE_TYPE
-- On TEE_LOCAL reduce production global_type -> VALUE_TYPE
-- On STORE reduce production global_type -> VALUE_TYPE
-- On SET_LOCAL reduce production global_type -> VALUE_TYPE
-- On SET_GLOBAL reduce production global_type -> VALUE_TYPE
-- On SELECT reduce production global_type -> VALUE_TYPE
-- On RPAR reduce production global_type -> VALUE_TYPE
-- On RETURN reduce production global_type -> VALUE_TYPE
-- On NOP reduce production global_type -> VALUE_TYPE
-- On LPAR reduce production global_type -> VALUE_TYPE
-- On LOOP reduce production global_type -> VALUE_TYPE
-- On LOAD reduce production global_type -> VALUE_TYPE
-- On IF reduce production global_type -> VALUE_TYPE
-- On GROW_MEMORY reduce production global_type -> VALUE_TYPE
-- On GET_LOCAL reduce production global_type -> VALUE_TYPE
-- On GET_GLOBAL reduce production global_type -> VALUE_TYPE
-- On DROP reduce production global_type -> VALUE_TYPE
-- On CURRENT_MEMORY reduce production global_type -> VALUE_TYPE
-- On CONVERT reduce production global_type -> VALUE_TYPE
-- On CONST reduce production global_type -> VALUE_TYPE
-- On COMPARE reduce production global_type -> VALUE_TYPE
-- On CALL_INDIRECT reduce production global_type -> VALUE_TYPE
-- On CALL reduce production global_type -> VALUE_TYPE
-- On BR_TABLE reduce production global_type -> VALUE_TYPE
-- On BR_IF reduce production global_type -> VALUE_TYPE
-- On BR reduce production global_type -> VALUE_TYPE
-- On BLOCK reduce production global_type -> VALUE_TYPE
-- On BINARY reduce production global_type -> VALUE_TYPE

State 99:
global_type -> LPAR . MUT VALUE_TYPE RPAR [ RPAR ]
-- On MUT shift to state 100

State 100:
global_type -> LPAR MUT . VALUE_TYPE RPAR [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
-- On VALUE_TYPE shift to state 101

State 101:
global_type -> LPAR MUT VALUE_TYPE . RPAR [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
-- On RPAR shift to state 102

State 102:
global_type -> LPAR MUT VALUE_TYPE RPAR . [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
-- On UNREACHABLE reduce production global_type -> LPAR MUT VALUE_TYPE RPAR
-- On UNARY reduce production global_type -> LPAR MUT VALUE_TYPE RPAR
-- On TEST reduce production global_type -> LPAR MUT VALUE_TYPE RPAR
-- On TEE_LOCAL reduce production global_type -> LPAR MUT VALUE_TYPE RPAR
-- On STORE reduce production global_type -> LPAR MUT VALUE_TYPE RPAR
-- On SET_LOCAL reduce production global_type -> LPAR MUT VALUE_TYPE RPAR
-- On SET_GLOBAL reduce production global_type -> LPAR MUT VALUE_TYPE RPAR
-- On SELECT reduce production global_type -> LPAR MUT VALUE_TYPE RPAR
-- On RPAR reduce production global_type -> LPAR MUT VALUE_TYPE RPAR
-- On RETURN reduce production global_type -> LPAR MUT VALUE_TYPE RPAR
-- On NOP reduce production global_type -> LPAR MUT VALUE_TYPE RPAR
-- On LPAR reduce production global_type -> LPAR MUT VALUE_TYPE RPAR
-- On LOOP reduce production global_type -> LPAR MUT VALUE_TYPE RPAR
-- On LOAD reduce production global_type -> LPAR MUT VALUE_TYPE RPAR
-- On IF reduce production global_type -> LPAR MUT VALUE_TYPE RPAR
-- On GROW_MEMORY reduce production global_type -> LPAR MUT VALUE_TYPE RPAR
-- On GET_LOCAL reduce production global_type -> LPAR MUT VALUE_TYPE RPAR
-- On GET_GLOBAL reduce production global_type -> LPAR MUT VALUE_TYPE RPAR
-- On DROP reduce production global_type -> LPAR MUT VALUE_TYPE RPAR
-- On CURRENT_MEMORY reduce production global_type -> LPAR MUT VALUE_TYPE RPAR
-- On CONVERT reduce production global_type -> LPAR MUT VALUE_TYPE RPAR
-- On CONST reduce production global_type -> LPAR MUT VALUE_TYPE RPAR
-- On COMPARE reduce production global_type -> LPAR MUT VALUE_TYPE RPAR
-- On CALL_INDIRECT reduce production global_type -> LPAR MUT VALUE_TYPE RPAR
-- On CALL reduce production global_type -> LPAR MUT VALUE_TYPE RPAR
-- On BR_TABLE reduce production global_type -> LPAR MUT VALUE_TYPE RPAR
-- On BR_IF reduce production global_type -> LPAR MUT VALUE_TYPE RPAR
-- On BR reduce production global_type -> LPAR MUT VALUE_TYPE RPAR
-- On BLOCK reduce production global_type -> LPAR MUT VALUE_TYPE RPAR
-- On BINARY reduce production global_type -> LPAR MUT VALUE_TYPE RPAR

State 103:
import_desc -> LPAR GLOBAL bind_var_opt global_type . RPAR [ RPAR ]
-- On RPAR shift to state 104

State 104:
import_desc -> LPAR GLOBAL bind_var_opt global_type RPAR . [ RPAR ]
-- On RPAR reduce production import_desc -> LPAR GLOBAL bind_var_opt global_type RPAR

State 105:
import_desc -> LPAR FUNC . bind_var_opt type_use RPAR [ RPAR ]
import_desc -> LPAR FUNC . bind_var_opt func_sig RPAR [ RPAR ]
-- On VAR shift to state 3
-- On bind_var_opt shift to state 106
-- On bind_var shift to state 61
-- On RPAR reduce production bind_var_opt -> 
-- On LPAR reduce production bind_var_opt -> 

State 106:
import_desc -> LPAR FUNC bind_var_opt . type_use RPAR [ RPAR ]
import_desc -> LPAR FUNC bind_var_opt . func_sig RPAR [ RPAR ]
-- On LPAR shift to state 107
-- On type_use shift to state 111
-- On func_sig shift to state 113
-- On RPAR reduce production func_sig -> 

State 107:
func_sig -> LPAR . RESULT value_type_list RPAR func_sig [ RPAR ]
func_sig -> LPAR . PARAM value_type_list RPAR func_sig [ RPAR ]
func_sig -> LPAR . PARAM bind_var VALUE_TYPE RPAR func_sig [ RPAR ]
type_use -> LPAR . TYPE var RPAR [ RPAR ]
-- On TYPE shift to state 108
-- On RESULT shift to state 7
-- On PARAM shift to state 13

State 108:
type_use -> LPAR TYPE . var RPAR [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
-- On VAR shift to state 55
-- On NAT shift to state 56
-- On var shift to state 109

State 109:
type_use -> LPAR TYPE var . RPAR [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
-- On RPAR shift to state 110

State 110:
type_use -> LPAR TYPE var RPAR . [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
-- On UNREACHABLE reduce production type_use -> LPAR TYPE var RPAR
-- On UNARY reduce production type_use -> LPAR TYPE var RPAR
-- On TEST reduce production type_use -> LPAR TYPE var RPAR
-- On TEE_LOCAL reduce production type_use -> LPAR TYPE var RPAR
-- On STORE reduce production type_use -> LPAR TYPE var RPAR
-- On SET_LOCAL reduce production type_use -> LPAR TYPE var RPAR
-- On SET_GLOBAL reduce production type_use -> LPAR TYPE var RPAR
-- On SELECT reduce production type_use -> LPAR TYPE var RPAR
-- On RPAR reduce production type_use -> LPAR TYPE var RPAR
-- On RETURN reduce production type_use -> LPAR TYPE var RPAR
-- On NOP reduce production type_use -> LPAR TYPE var RPAR
-- On LPAR reduce production type_use -> LPAR TYPE var RPAR
-- On LOOP reduce production type_use -> LPAR TYPE var RPAR
-- On LOAD reduce production type_use -> LPAR TYPE var RPAR
-- On IF reduce production type_use -> LPAR TYPE var RPAR
-- On GROW_MEMORY reduce production type_use -> LPAR TYPE var RPAR
-- On GET_LOCAL reduce production type_use -> LPAR TYPE var RPAR
-- On GET_GLOBAL reduce production type_use -> LPAR TYPE var RPAR
-- On DROP reduce production type_use -> LPAR TYPE var RPAR
-- On CURRENT_MEMORY reduce production type_use -> LPAR TYPE var RPAR
-- On CONVERT reduce production type_use -> LPAR TYPE var RPAR
-- On CONST reduce production type_use -> LPAR TYPE var RPAR
-- On COMPARE reduce production type_use -> LPAR TYPE var RPAR
-- On CALL_INDIRECT reduce production type_use -> LPAR TYPE var RPAR
-- On CALL reduce production type_use -> LPAR TYPE var RPAR
-- On BR_TABLE reduce production type_use -> LPAR TYPE var RPAR
-- On BR_IF reduce production type_use -> LPAR TYPE var RPAR
-- On BR reduce production type_use -> LPAR TYPE var RPAR
-- On BLOCK reduce production type_use -> LPAR TYPE var RPAR
-- On BINARY reduce production type_use -> LPAR TYPE var RPAR

State 111:
import_desc -> LPAR FUNC bind_var_opt type_use . RPAR [ RPAR ]
-- On RPAR shift to state 112

State 112:
import_desc -> LPAR FUNC bind_var_opt type_use RPAR . [ RPAR ]
-- On RPAR reduce production import_desc -> LPAR FUNC bind_var_opt type_use RPAR

State 113:
import_desc -> LPAR FUNC bind_var_opt func_sig . RPAR [ RPAR ]
-- On RPAR shift to state 114

State 114:
import_desc -> LPAR FUNC bind_var_opt func_sig RPAR . [ RPAR ]
-- On RPAR reduce production import_desc -> LPAR FUNC bind_var_opt func_sig RPAR

State 115:
import -> LPAR IMPORT name name import_desc . RPAR [ RPAR LPAR EOF ]
-- On RPAR shift to state 116

State 116:
import -> LPAR IMPORT name name import_desc RPAR . [ RPAR LPAR EOF ]
-- On RPAR reduce production import -> LPAR IMPORT name name import_desc RPAR
-- On LPAR reduce production import -> LPAR IMPORT name name import_desc RPAR
-- On EOF reduce production import -> LPAR IMPORT name name import_desc RPAR

State 117:
global -> LPAR GLOBAL . bind_var_opt global_fields RPAR [ RPAR LPAR EOF ]
-- On VAR shift to state 3
-- On bind_var_opt shift to state 118
-- On bind_var shift to state 61
-- On VALUE_TYPE reduce production bind_var_opt -> 
-- On LPAR reduce production bind_var_opt -> 

State 118:
global -> LPAR GLOBAL bind_var_opt . global_fields RPAR [ RPAR LPAR EOF ]
-- On VALUE_TYPE shift to state 98
-- On LPAR shift to state 119
-- On inline_import shift to state 120
-- On inline_export shift to state 122
-- On global_type shift to state 123
-- On global_fields shift to state 237

State 119:
global_type -> LPAR . MUT VALUE_TYPE RPAR [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
inline_export -> LPAR . EXPORT name RPAR [ VALUE_TYPE LPAR ]
inline_import -> LPAR . IMPORT name name RPAR [ VALUE_TYPE LPAR ]
-- On MUT shift to state 100
-- On IMPORT shift to state 34
-- On EXPORT shift to state 39

State 120:
global_fields -> inline_import . global_type [ RPAR ]
-- On VALUE_TYPE shift to state 98
-- On LPAR shift to state 99
-- On global_type shift to state 121

State 121:
global_fields -> inline_import global_type . [ RPAR ]
-- On RPAR reduce production global_fields -> inline_import global_type

State 122:
global_fields -> inline_export . global_fields [ RPAR ]
-- On VALUE_TYPE shift to state 98
-- On LPAR shift to state 119
-- On inline_import shift to state 120
-- On inline_export shift to state 122
-- On global_type shift to state 123
-- On global_fields shift to state 236

State 123:
global_fields -> global_type . const_expr [ RPAR ]
-- On UNREACHABLE shift to state 124
-- On UNARY shift to state 125
-- On TEST shift to state 126
-- On TEE_LOCAL shift to state 127
-- On STORE shift to state 129
-- On SET_LOCAL shift to state 134
-- On SET_GLOBAL shift to state 136
-- On SELECT shift to state 138
-- On RETURN shift to state 139
-- On NOP shift to state 140
-- On LPAR shift to state 141
-- On LOOP shift to state 155
-- On LOAD shift to state 148
-- On IF shift to state 157
-- On GROW_MEMORY shift to state 159
-- On GET_LOCAL shift to state 160
-- On GET_GLOBAL shift to state 162
-- On DROP shift to state 164
-- On CURRENT_MEMORY shift to state 165
-- On CONVERT shift to state 166
-- On CONST shift to state 167
-- On COMPARE shift to state 172
-- On CALL_INDIRECT shift to state 173
-- On CALL shift to state 175
-- On BR_TABLE shift to state 177
-- On BR_IF shift to state 180
-- On BR shift to state 182
-- On BLOCK shift to state 184
-- On BINARY shift to state 186
-- On plain_instr shift to state 187
-- On instr_list shift to state 234
-- On instr shift to state 189
-- On expr shift to state 191
-- On const_expr shift to state 235
-- On block_instr shift to state 192
-- On RPAR reduce production instr_list -> 

State 124:
plain_instr -> UNREACHABLE . [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
-- On UNREACHABLE reduce production plain_instr -> UNREACHABLE
-- On UNARY reduce production plain_instr -> UNREACHABLE
-- On TEST reduce production plain_instr -> UNREACHABLE
-- On TEE_LOCAL reduce production plain_instr -> UNREACHABLE
-- On STORE reduce production plain_instr -> UNREACHABLE
-- On SET_LOCAL reduce production plain_instr -> UNREACHABLE
-- On SET_GLOBAL reduce production plain_instr -> UNREACHABLE
-- On SELECT reduce production plain_instr -> UNREACHABLE
-- On RPAR reduce production plain_instr -> UNREACHABLE
-- On RETURN reduce production plain_instr -> UNREACHABLE
-- On NOP reduce production plain_instr -> UNREACHABLE
-- On LPAR reduce production plain_instr -> UNREACHABLE
-- On LOOP reduce production plain_instr -> UNREACHABLE
-- On LOAD reduce production plain_instr -> UNREACHABLE
-- On IF reduce production plain_instr -> UNREACHABLE
-- On GROW_MEMORY reduce production plain_instr -> UNREACHABLE
-- On GET_LOCAL reduce production plain_instr -> UNREACHABLE
-- On GET_GLOBAL reduce production plain_instr -> UNREACHABLE
-- On END reduce production plain_instr -> UNREACHABLE
-- On ELSE reduce production plain_instr -> UNREACHABLE
-- On DROP reduce production plain_instr -> UNREACHABLE
-- On CURRENT_MEMORY reduce production plain_instr -> UNREACHABLE
-- On CONVERT reduce production plain_instr -> UNREACHABLE
-- On CONST reduce production plain_instr -> UNREACHABLE
-- On COMPARE reduce production plain_instr -> UNREACHABLE
-- On CALL_INDIRECT reduce production plain_instr -> UNREACHABLE
-- On CALL reduce production plain_instr -> UNREACHABLE
-- On BR_TABLE reduce production plain_instr -> UNREACHABLE
-- On BR_IF reduce production plain_instr -> UNREACHABLE
-- On BR reduce production plain_instr -> UNREACHABLE
-- On BLOCK reduce production plain_instr -> UNREACHABLE
-- On BINARY reduce production plain_instr -> UNREACHABLE

State 125:
plain_instr -> UNARY . [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
-- On UNREACHABLE reduce production plain_instr -> UNARY
-- On UNARY reduce production plain_instr -> UNARY
-- On TEST reduce production plain_instr -> UNARY
-- On TEE_LOCAL reduce production plain_instr -> UNARY
-- On STORE reduce production plain_instr -> UNARY
-- On SET_LOCAL reduce production plain_instr -> UNARY
-- On SET_GLOBAL reduce production plain_instr -> UNARY
-- On SELECT reduce production plain_instr -> UNARY
-- On RPAR reduce production plain_instr -> UNARY
-- On RETURN reduce production plain_instr -> UNARY
-- On NOP reduce production plain_instr -> UNARY
-- On LPAR reduce production plain_instr -> UNARY
-- On LOOP reduce production plain_instr -> UNARY
-- On LOAD reduce production plain_instr -> UNARY
-- On IF reduce production plain_instr -> UNARY
-- On GROW_MEMORY reduce production plain_instr -> UNARY
-- On GET_LOCAL reduce production plain_instr -> UNARY
-- On GET_GLOBAL reduce production plain_instr -> UNARY
-- On END reduce production plain_instr -> UNARY
-- On ELSE reduce production plain_instr -> UNARY
-- On DROP reduce production plain_instr -> UNARY
-- On CURRENT_MEMORY reduce production plain_instr -> UNARY
-- On CONVERT reduce production plain_instr -> UNARY
-- On CONST reduce production plain_instr -> UNARY
-- On COMPARE reduce production plain_instr -> UNARY
-- On CALL_INDIRECT reduce production plain_instr -> UNARY
-- On CALL reduce production plain_instr -> UNARY
-- On BR_TABLE reduce production plain_instr -> UNARY
-- On BR_IF reduce production plain_instr -> UNARY
-- On BR reduce production plain_instr -> UNARY
-- On BLOCK reduce production plain_instr -> UNARY
-- On BINARY reduce production plain_instr -> UNARY

State 126:
plain_instr -> TEST . [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
-- On UNREACHABLE reduce production plain_instr -> TEST
-- On UNARY reduce production plain_instr -> TEST
-- On TEST reduce production plain_instr -> TEST
-- On TEE_LOCAL reduce production plain_instr -> TEST
-- On STORE reduce production plain_instr -> TEST
-- On SET_LOCAL reduce production plain_instr -> TEST
-- On SET_GLOBAL reduce production plain_instr -> TEST
-- On SELECT reduce production plain_instr -> TEST
-- On RPAR reduce production plain_instr -> TEST
-- On RETURN reduce production plain_instr -> TEST
-- On NOP reduce production plain_instr -> TEST
-- On LPAR reduce production plain_instr -> TEST
-- On LOOP reduce production plain_instr -> TEST
-- On LOAD reduce production plain_instr -> TEST
-- On IF reduce production plain_instr -> TEST
-- On GROW_MEMORY reduce production plain_instr -> TEST
-- On GET_LOCAL reduce production plain_instr -> TEST
-- On GET_GLOBAL reduce production plain_instr -> TEST
-- On END reduce production plain_instr -> TEST
-- On ELSE reduce production plain_instr -> TEST
-- On DROP reduce production plain_instr -> TEST
-- On CURRENT_MEMORY reduce production plain_instr -> TEST
-- On CONVERT reduce production plain_instr -> TEST
-- On CONST reduce production plain_instr -> TEST
-- On COMPARE reduce production plain_instr -> TEST
-- On CALL_INDIRECT reduce production plain_instr -> TEST
-- On CALL reduce production plain_instr -> TEST
-- On BR_TABLE reduce production plain_instr -> TEST
-- On BR_IF reduce production plain_instr -> TEST
-- On BR reduce production plain_instr -> TEST
-- On BLOCK reduce production plain_instr -> TEST
-- On BINARY reduce production plain_instr -> TEST

State 127:
plain_instr -> TEE_LOCAL . var [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
-- On VAR shift to state 55
-- On NAT shift to state 56
-- On var shift to state 128

State 128:
plain_instr -> TEE_LOCAL var . [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
-- On UNREACHABLE reduce production plain_instr -> TEE_LOCAL var
-- On UNARY reduce production plain_instr -> TEE_LOCAL var
-- On TEST reduce production plain_instr -> TEE_LOCAL var
-- On TEE_LOCAL reduce production plain_instr -> TEE_LOCAL var
-- On STORE reduce production plain_instr -> TEE_LOCAL var
-- On SET_LOCAL reduce production plain_instr -> TEE_LOCAL var
-- On SET_GLOBAL reduce production plain_instr -> TEE_LOCAL var
-- On SELECT reduce production plain_instr -> TEE_LOCAL var
-- On RPAR reduce production plain_instr -> TEE_LOCAL var
-- On RETURN reduce production plain_instr -> TEE_LOCAL var
-- On NOP reduce production plain_instr -> TEE_LOCAL var
-- On LPAR reduce production plain_instr -> TEE_LOCAL var
-- On LOOP reduce production plain_instr -> TEE_LOCAL var
-- On LOAD reduce production plain_instr -> TEE_LOCAL var
-- On IF reduce production plain_instr -> TEE_LOCAL var
-- On GROW_MEMORY reduce production plain_instr -> TEE_LOCAL var
-- On GET_LOCAL reduce production plain_instr -> TEE_LOCAL var
-- On GET_GLOBAL reduce production plain_instr -> TEE_LOCAL var
-- On END reduce production plain_instr -> TEE_LOCAL var
-- On ELSE reduce production plain_instr -> TEE_LOCAL var
-- On DROP reduce production plain_instr -> TEE_LOCAL var
-- On CURRENT_MEMORY reduce production plain_instr -> TEE_LOCAL var
-- On CONVERT reduce production plain_instr -> TEE_LOCAL var
-- On CONST reduce production plain_instr -> TEE_LOCAL var
-- On COMPARE reduce production plain_instr -> TEE_LOCAL var
-- On CALL_INDIRECT reduce production plain_instr -> TEE_LOCAL var
-- On CALL reduce production plain_instr -> TEE_LOCAL var
-- On BR_TABLE reduce production plain_instr -> TEE_LOCAL var
-- On BR_IF reduce production plain_instr -> TEE_LOCAL var
-- On BR reduce production plain_instr -> TEE_LOCAL var
-- On BLOCK reduce production plain_instr -> TEE_LOCAL var
-- On BINARY reduce production plain_instr -> TEE_LOCAL var

State 129:
plain_instr -> STORE . offset_opt align_opt [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
-- On OFFSET_EQ_NAT shift to state 130
-- On offset_opt shift to state 131
-- On UNREACHABLE reduce production offset_opt -> 
-- On UNARY reduce production offset_opt -> 
-- On TEST reduce production offset_opt -> 
-- On TEE_LOCAL reduce production offset_opt -> 
-- On STORE reduce production offset_opt -> 
-- On SET_LOCAL reduce production offset_opt -> 
-- On SET_GLOBAL reduce production offset_opt -> 
-- On SELECT reduce production offset_opt -> 
-- On RPAR reduce production offset_opt -> 
-- On RETURN reduce production offset_opt -> 
-- On NOP reduce production offset_opt -> 
-- On LPAR reduce production offset_opt -> 
-- On LOOP reduce production offset_opt -> 
-- On LOAD reduce production offset_opt -> 
-- On IF reduce production offset_opt -> 
-- On GROW_MEMORY reduce production offset_opt -> 
-- On GET_LOCAL reduce production offset_opt -> 
-- On GET_GLOBAL reduce production offset_opt -> 
-- On END reduce production offset_opt -> 
-- On ELSE reduce production offset_opt -> 
-- On DROP reduce production offset_opt -> 
-- On CURRENT_MEMORY reduce production offset_opt -> 
-- On CONVERT reduce production offset_opt -> 
-- On CONST reduce production offset_opt -> 
-- On COMPARE reduce production offset_opt -> 
-- On CALL_INDIRECT reduce production offset_opt -> 
-- On CALL reduce production offset_opt -> 
-- On BR_TABLE reduce production offset_opt -> 
-- On BR_IF reduce production offset_opt -> 
-- On BR reduce production offset_opt -> 
-- On BLOCK reduce production offset_opt -> 
-- On BINARY reduce production offset_opt -> 
-- On ALIGN_EQ_NAT reduce production offset_opt -> 

State 130:
offset_opt -> OFFSET_EQ_NAT . [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ALIGN_EQ_NAT ]
-- On UNREACHABLE reduce production offset_opt -> OFFSET_EQ_NAT
-- On UNARY reduce production offset_opt -> OFFSET_EQ_NAT
-- On TEST reduce production offset_opt -> OFFSET_EQ_NAT
-- On TEE_LOCAL reduce production offset_opt -> OFFSET_EQ_NAT
-- On STORE reduce production offset_opt -> OFFSET_EQ_NAT
-- On SET_LOCAL reduce production offset_opt -> OFFSET_EQ_NAT
-- On SET_GLOBAL reduce production offset_opt -> OFFSET_EQ_NAT
-- On SELECT reduce production offset_opt -> OFFSET_EQ_NAT
-- On RPAR reduce production offset_opt -> OFFSET_EQ_NAT
-- On RETURN reduce production offset_opt -> OFFSET_EQ_NAT
-- On NOP reduce production offset_opt -> OFFSET_EQ_NAT
-- On LPAR reduce production offset_opt -> OFFSET_EQ_NAT
-- On LOOP reduce production offset_opt -> OFFSET_EQ_NAT
-- On LOAD reduce production offset_opt -> OFFSET_EQ_NAT
-- On IF reduce production offset_opt -> OFFSET_EQ_NAT
-- On GROW_MEMORY reduce production offset_opt -> OFFSET_EQ_NAT
-- On GET_LOCAL reduce production offset_opt -> OFFSET_EQ_NAT
-- On GET_GLOBAL reduce production offset_opt -> OFFSET_EQ_NAT
-- On END reduce production offset_opt -> OFFSET_EQ_NAT
-- On ELSE reduce production offset_opt -> OFFSET_EQ_NAT
-- On DROP reduce production offset_opt -> OFFSET_EQ_NAT
-- On CURRENT_MEMORY reduce production offset_opt -> OFFSET_EQ_NAT
-- On CONVERT reduce production offset_opt -> OFFSET_EQ_NAT
-- On CONST reduce production offset_opt -> OFFSET_EQ_NAT
-- On COMPARE reduce production offset_opt -> OFFSET_EQ_NAT
-- On CALL_INDIRECT reduce production offset_opt -> OFFSET_EQ_NAT
-- On CALL reduce production offset_opt -> OFFSET_EQ_NAT
-- On BR_TABLE reduce production offset_opt -> OFFSET_EQ_NAT
-- On BR_IF reduce production offset_opt -> OFFSET_EQ_NAT
-- On BR reduce production offset_opt -> OFFSET_EQ_NAT
-- On BLOCK reduce production offset_opt -> OFFSET_EQ_NAT
-- On BINARY reduce production offset_opt -> OFFSET_EQ_NAT
-- On ALIGN_EQ_NAT reduce production offset_opt -> OFFSET_EQ_NAT

State 131:
plain_instr -> STORE offset_opt . align_opt [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
-- On ALIGN_EQ_NAT shift to state 132
-- On align_opt shift to state 133
-- On UNREACHABLE reduce production align_opt -> 
-- On UNARY reduce production align_opt -> 
-- On TEST reduce production align_opt -> 
-- On TEE_LOCAL reduce production align_opt -> 
-- On STORE reduce production align_opt -> 
-- On SET_LOCAL reduce production align_opt -> 
-- On SET_GLOBAL reduce production align_opt -> 
-- On SELECT reduce production align_opt -> 
-- On RPAR reduce production align_opt -> 
-- On RETURN reduce production align_opt -> 
-- On NOP reduce production align_opt -> 
-- On LPAR reduce production align_opt -> 
-- On LOOP reduce production align_opt -> 
-- On LOAD reduce production align_opt -> 
-- On IF reduce production align_opt -> 
-- On GROW_MEMORY reduce production align_opt -> 
-- On GET_LOCAL reduce production align_opt -> 
-- On GET_GLOBAL reduce production align_opt -> 
-- On END reduce production align_opt -> 
-- On ELSE reduce production align_opt -> 
-- On DROP reduce production align_opt -> 
-- On CURRENT_MEMORY reduce production align_opt -> 
-- On CONVERT reduce production align_opt -> 
-- On CONST reduce production align_opt -> 
-- On COMPARE reduce production align_opt -> 
-- On CALL_INDIRECT reduce production align_opt -> 
-- On CALL reduce production align_opt -> 
-- On BR_TABLE reduce production align_opt -> 
-- On BR_IF reduce production align_opt -> 
-- On BR reduce production align_opt -> 
-- On BLOCK reduce production align_opt -> 
-- On BINARY reduce production align_opt -> 

State 132:
align_opt -> ALIGN_EQ_NAT . [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
-- On UNREACHABLE reduce production align_opt -> ALIGN_EQ_NAT
-- On UNARY reduce production align_opt -> ALIGN_EQ_NAT
-- On TEST reduce production align_opt -> ALIGN_EQ_NAT
-- On TEE_LOCAL reduce production align_opt -> ALIGN_EQ_NAT
-- On STORE reduce production align_opt -> ALIGN_EQ_NAT
-- On SET_LOCAL reduce production align_opt -> ALIGN_EQ_NAT
-- On SET_GLOBAL reduce production align_opt -> ALIGN_EQ_NAT
-- On SELECT reduce production align_opt -> ALIGN_EQ_NAT
-- On RPAR reduce production align_opt -> ALIGN_EQ_NAT
-- On RETURN reduce production align_opt -> ALIGN_EQ_NAT
-- On NOP reduce production align_opt -> ALIGN_EQ_NAT
-- On LPAR reduce production align_opt -> ALIGN_EQ_NAT
-- On LOOP reduce production align_opt -> ALIGN_EQ_NAT
-- On LOAD reduce production align_opt -> ALIGN_EQ_NAT
-- On IF reduce production align_opt -> ALIGN_EQ_NAT
-- On GROW_MEMORY reduce production align_opt -> ALIGN_EQ_NAT
-- On GET_LOCAL reduce production align_opt -> ALIGN_EQ_NAT
-- On GET_GLOBAL reduce production align_opt -> ALIGN_EQ_NAT
-- On END reduce production align_opt -> ALIGN_EQ_NAT
-- On ELSE reduce production align_opt -> ALIGN_EQ_NAT
-- On DROP reduce production align_opt -> ALIGN_EQ_NAT
-- On CURRENT_MEMORY reduce production align_opt -> ALIGN_EQ_NAT
-- On CONVERT reduce production align_opt -> ALIGN_EQ_NAT
-- On CONST reduce production align_opt -> ALIGN_EQ_NAT
-- On COMPARE reduce production align_opt -> ALIGN_EQ_NAT
-- On CALL_INDIRECT reduce production align_opt -> ALIGN_EQ_NAT
-- On CALL reduce production align_opt -> ALIGN_EQ_NAT
-- On BR_TABLE reduce production align_opt -> ALIGN_EQ_NAT
-- On BR_IF reduce production align_opt -> ALIGN_EQ_NAT
-- On BR reduce production align_opt -> ALIGN_EQ_NAT
-- On BLOCK reduce production align_opt -> ALIGN_EQ_NAT
-- On BINARY reduce production align_opt -> ALIGN_EQ_NAT

State 133:
plain_instr -> STORE offset_opt align_opt . [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
-- On UNREACHABLE reduce production plain_instr -> STORE offset_opt align_opt
-- On UNARY reduce production plain_instr -> STORE offset_opt align_opt
-- On TEST reduce production plain_instr -> STORE offset_opt align_opt
-- On TEE_LOCAL reduce production plain_instr -> STORE offset_opt align_opt
-- On STORE reduce production plain_instr -> STORE offset_opt align_opt
-- On SET_LOCAL reduce production plain_instr -> STORE offset_opt align_opt
-- On SET_GLOBAL reduce production plain_instr -> STORE offset_opt align_opt
-- On SELECT reduce production plain_instr -> STORE offset_opt align_opt
-- On RPAR reduce production plain_instr -> STORE offset_opt align_opt
-- On RETURN reduce production plain_instr -> STORE offset_opt align_opt
-- On NOP reduce production plain_instr -> STORE offset_opt align_opt
-- On LPAR reduce production plain_instr -> STORE offset_opt align_opt
-- On LOOP reduce production plain_instr -> STORE offset_opt align_opt
-- On LOAD reduce production plain_instr -> STORE offset_opt align_opt
-- On IF reduce production plain_instr -> STORE offset_opt align_opt
-- On GROW_MEMORY reduce production plain_instr -> STORE offset_opt align_opt
-- On GET_LOCAL reduce production plain_instr -> STORE offset_opt align_opt
-- On GET_GLOBAL reduce production plain_instr -> STORE offset_opt align_opt
-- On END reduce production plain_instr -> STORE offset_opt align_opt
-- On ELSE reduce production plain_instr -> STORE offset_opt align_opt
-- On DROP reduce production plain_instr -> STORE offset_opt align_opt
-- On CURRENT_MEMORY reduce production plain_instr -> STORE offset_opt align_opt
-- On CONVERT reduce production plain_instr -> STORE offset_opt align_opt
-- On CONST reduce production plain_instr -> STORE offset_opt align_opt
-- On COMPARE reduce production plain_instr -> STORE offset_opt align_opt
-- On CALL_INDIRECT reduce production plain_instr -> STORE offset_opt align_opt
-- On CALL reduce production plain_instr -> STORE offset_opt align_opt
-- On BR_TABLE reduce production plain_instr -> STORE offset_opt align_opt
-- On BR_IF reduce production plain_instr -> STORE offset_opt align_opt
-- On BR reduce production plain_instr -> STORE offset_opt align_opt
-- On BLOCK reduce production plain_instr -> STORE offset_opt align_opt
-- On BINARY reduce production plain_instr -> STORE offset_opt align_opt

State 134:
plain_instr -> SET_LOCAL . var [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
-- On VAR shift to state 55
-- On NAT shift to state 56
-- On var shift to state 135

State 135:
plain_instr -> SET_LOCAL var . [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
-- On UNREACHABLE reduce production plain_instr -> SET_LOCAL var
-- On UNARY reduce production plain_instr -> SET_LOCAL var
-- On TEST reduce production plain_instr -> SET_LOCAL var
-- On TEE_LOCAL reduce production plain_instr -> SET_LOCAL var
-- On STORE reduce production plain_instr -> SET_LOCAL var
-- On SET_LOCAL reduce production plain_instr -> SET_LOCAL var
-- On SET_GLOBAL reduce production plain_instr -> SET_LOCAL var
-- On SELECT reduce production plain_instr -> SET_LOCAL var
-- On RPAR reduce production plain_instr -> SET_LOCAL var
-- On RETURN reduce production plain_instr -> SET_LOCAL var
-- On NOP reduce production plain_instr -> SET_LOCAL var
-- On LPAR reduce production plain_instr -> SET_LOCAL var
-- On LOOP reduce production plain_instr -> SET_LOCAL var
-- On LOAD reduce production plain_instr -> SET_LOCAL var
-- On IF reduce production plain_instr -> SET_LOCAL var
-- On GROW_MEMORY reduce production plain_instr -> SET_LOCAL var
-- On GET_LOCAL reduce production plain_instr -> SET_LOCAL var
-- On GET_GLOBAL reduce production plain_instr -> SET_LOCAL var
-- On END reduce production plain_instr -> SET_LOCAL var
-- On ELSE reduce production plain_instr -> SET_LOCAL var
-- On DROP reduce production plain_instr -> SET_LOCAL var
-- On CURRENT_MEMORY reduce production plain_instr -> SET_LOCAL var
-- On CONVERT reduce production plain_instr -> SET_LOCAL var
-- On CONST reduce production plain_instr -> SET_LOCAL var
-- On COMPARE reduce production plain_instr -> SET_LOCAL var
-- On CALL_INDIRECT reduce production plain_instr -> SET_LOCAL var
-- On CALL reduce production plain_instr -> SET_LOCAL var
-- On BR_TABLE reduce production plain_instr -> SET_LOCAL var
-- On BR_IF reduce production plain_instr -> SET_LOCAL var
-- On BR reduce production plain_instr -> SET_LOCAL var
-- On BLOCK reduce production plain_instr -> SET_LOCAL var
-- On BINARY reduce production plain_instr -> SET_LOCAL var

State 136:
plain_instr -> SET_GLOBAL . var [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
-- On VAR shift to state 55
-- On NAT shift to state 56
-- On var shift to state 137

State 137:
plain_instr -> SET_GLOBAL var . [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
-- On UNREACHABLE reduce production plain_instr -> SET_GLOBAL var
-- On UNARY reduce production plain_instr -> SET_GLOBAL var
-- On TEST reduce production plain_instr -> SET_GLOBAL var
-- On TEE_LOCAL reduce production plain_instr -> SET_GLOBAL var
-- On STORE reduce production plain_instr -> SET_GLOBAL var
-- On SET_LOCAL reduce production plain_instr -> SET_GLOBAL var
-- On SET_GLOBAL reduce production plain_instr -> SET_GLOBAL var
-- On SELECT reduce production plain_instr -> SET_GLOBAL var
-- On RPAR reduce production plain_instr -> SET_GLOBAL var
-- On RETURN reduce production plain_instr -> SET_GLOBAL var
-- On NOP reduce production plain_instr -> SET_GLOBAL var
-- On LPAR reduce production plain_instr -> SET_GLOBAL var
-- On LOOP reduce production plain_instr -> SET_GLOBAL var
-- On LOAD reduce production plain_instr -> SET_GLOBAL var
-- On IF reduce production plain_instr -> SET_GLOBAL var
-- On GROW_MEMORY reduce production plain_instr -> SET_GLOBAL var
-- On GET_LOCAL reduce production plain_instr -> SET_GLOBAL var
-- On GET_GLOBAL reduce production plain_instr -> SET_GLOBAL var
-- On END reduce production plain_instr -> SET_GLOBAL var
-- On ELSE reduce production plain_instr -> SET_GLOBAL var
-- On DROP reduce production plain_instr -> SET_GLOBAL var
-- On CURRENT_MEMORY reduce production plain_instr -> SET_GLOBAL var
-- On CONVERT reduce production plain_instr -> SET_GLOBAL var
-- On CONST reduce production plain_instr -> SET_GLOBAL var
-- On COMPARE reduce production plain_instr -> SET_GLOBAL var
-- On CALL_INDIRECT reduce production plain_instr -> SET_GLOBAL var
-- On CALL reduce production plain_instr -> SET_GLOBAL var
-- On BR_TABLE reduce production plain_instr -> SET_GLOBAL var
-- On BR_IF reduce production plain_instr -> SET_GLOBAL var
-- On BR reduce production plain_instr -> SET_GLOBAL var
-- On BLOCK reduce production plain_instr -> SET_GLOBAL var
-- On BINARY reduce production plain_instr -> SET_GLOBAL var

State 138:
plain_instr -> SELECT . [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
-- On UNREACHABLE reduce production plain_instr -> SELECT
-- On UNARY reduce production plain_instr -> SELECT
-- On TEST reduce production plain_instr -> SELECT
-- On TEE_LOCAL reduce production plain_instr -> SELECT
-- On STORE reduce production plain_instr -> SELECT
-- On SET_LOCAL reduce production plain_instr -> SELECT
-- On SET_GLOBAL reduce production plain_instr -> SELECT
-- On SELECT reduce production plain_instr -> SELECT
-- On RPAR reduce production plain_instr -> SELECT
-- On RETURN reduce production plain_instr -> SELECT
-- On NOP reduce production plain_instr -> SELECT
-- On LPAR reduce production plain_instr -> SELECT
-- On LOOP reduce production plain_instr -> SELECT
-- On LOAD reduce production plain_instr -> SELECT
-- On IF reduce production plain_instr -> SELECT
-- On GROW_MEMORY reduce production plain_instr -> SELECT
-- On GET_LOCAL reduce production plain_instr -> SELECT
-- On GET_GLOBAL reduce production plain_instr -> SELECT
-- On END reduce production plain_instr -> SELECT
-- On ELSE reduce production plain_instr -> SELECT
-- On DROP reduce production plain_instr -> SELECT
-- On CURRENT_MEMORY reduce production plain_instr -> SELECT
-- On CONVERT reduce production plain_instr -> SELECT
-- On CONST reduce production plain_instr -> SELECT
-- On COMPARE reduce production plain_instr -> SELECT
-- On CALL_INDIRECT reduce production plain_instr -> SELECT
-- On CALL reduce production plain_instr -> SELECT
-- On BR_TABLE reduce production plain_instr -> SELECT
-- On BR_IF reduce production plain_instr -> SELECT
-- On BR reduce production plain_instr -> SELECT
-- On BLOCK reduce production plain_instr -> SELECT
-- On BINARY reduce production plain_instr -> SELECT

State 139:
plain_instr -> RETURN . [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
-- On UNREACHABLE reduce production plain_instr -> RETURN
-- On UNARY reduce production plain_instr -> RETURN
-- On TEST reduce production plain_instr -> RETURN
-- On TEE_LOCAL reduce production plain_instr -> RETURN
-- On STORE reduce production plain_instr -> RETURN
-- On SET_LOCAL reduce production plain_instr -> RETURN
-- On SET_GLOBAL reduce production plain_instr -> RETURN
-- On SELECT reduce production plain_instr -> RETURN
-- On RPAR reduce production plain_instr -> RETURN
-- On RETURN reduce production plain_instr -> RETURN
-- On NOP reduce production plain_instr -> RETURN
-- On LPAR reduce production plain_instr -> RETURN
-- On LOOP reduce production plain_instr -> RETURN
-- On LOAD reduce production plain_instr -> RETURN
-- On IF reduce production plain_instr -> RETURN
-- On GROW_MEMORY reduce production plain_instr -> RETURN
-- On GET_LOCAL reduce production plain_instr -> RETURN
-- On GET_GLOBAL reduce production plain_instr -> RETURN
-- On END reduce production plain_instr -> RETURN
-- On ELSE reduce production plain_instr -> RETURN
-- On DROP reduce production plain_instr -> RETURN
-- On CURRENT_MEMORY reduce production plain_instr -> RETURN
-- On CONVERT reduce production plain_instr -> RETURN
-- On CONST reduce production plain_instr -> RETURN
-- On COMPARE reduce production plain_instr -> RETURN
-- On CALL_INDIRECT reduce production plain_instr -> RETURN
-- On CALL reduce production plain_instr -> RETURN
-- On BR_TABLE reduce production plain_instr -> RETURN
-- On BR_IF reduce production plain_instr -> RETURN
-- On BR reduce production plain_instr -> RETURN
-- On BLOCK reduce production plain_instr -> RETURN
-- On BINARY reduce production plain_instr -> RETURN

State 140:
plain_instr -> NOP . [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
-- On UNREACHABLE reduce production plain_instr -> NOP
-- On UNARY reduce production plain_instr -> NOP
-- On TEST reduce production plain_instr -> NOP
-- On TEE_LOCAL reduce production plain_instr -> NOP
-- On STORE reduce production plain_instr -> NOP
-- On SET_LOCAL reduce production plain_instr -> NOP
-- On SET_GLOBAL reduce production plain_instr -> NOP
-- On SELECT reduce production plain_instr -> NOP
-- On RPAR reduce production plain_instr -> NOP
-- On RETURN reduce production plain_instr -> NOP
-- On NOP reduce production plain_instr -> NOP
-- On LPAR reduce production plain_instr -> NOP
-- On LOOP reduce production plain_instr -> NOP
-- On LOAD reduce production plain_instr -> NOP
-- On IF reduce production plain_instr -> NOP
-- On GROW_MEMORY reduce production plain_instr -> NOP
-- On GET_LOCAL reduce production plain_instr -> NOP
-- On GET_GLOBAL reduce production plain_instr -> NOP
-- On END reduce production plain_instr -> NOP
-- On ELSE reduce production plain_instr -> NOP
-- On DROP reduce production plain_instr -> NOP
-- On CURRENT_MEMORY reduce production plain_instr -> NOP
-- On CONVERT reduce production plain_instr -> NOP
-- On CONST reduce production plain_instr -> NOP
-- On COMPARE reduce production plain_instr -> NOP
-- On CALL_INDIRECT reduce production plain_instr -> NOP
-- On CALL reduce production plain_instr -> NOP
-- On BR_TABLE reduce production plain_instr -> NOP
-- On BR_IF reduce production plain_instr -> NOP
-- On BR reduce production plain_instr -> NOP
-- On BLOCK reduce production plain_instr -> NOP
-- On BINARY reduce production plain_instr -> NOP

State 141:
expr -> LPAR . expr1 RPAR [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
-- On UNREACHABLE shift to state 124
-- On UNARY shift to state 125
-- On TEST shift to state 126
-- On TEE_LOCAL shift to state 127
-- On STORE shift to state 129
-- On SET_LOCAL shift to state 134
-- On SET_GLOBAL shift to state 136
-- On SELECT shift to state 138
-- On RETURN shift to state 139
-- On NOP shift to state 140
-- On LOOP shift to state 142
-- On LOAD shift to state 148
-- On IF shift to state 151
-- On GROW_MEMORY shift to state 159
-- On GET_LOCAL shift to state 160
-- On GET_GLOBAL shift to state 162
-- On DROP shift to state 164
-- On CURRENT_MEMORY shift to state 165
-- On CONVERT shift to state 166
-- On CONST shift to state 167
-- On COMPARE shift to state 172
-- On CALL_INDIRECT shift to state 173
-- On CALL shift to state 175
-- On BR_TABLE shift to state 177
-- On BR_IF shift to state 180
-- On BR shift to state 182
-- On BLOCK shift to state 217
-- On BINARY shift to state 186
-- On plain_instr shift to state 220
-- On expr1 shift to state 224

State 142:
expr1 -> LOOP . labeling_opt block [ RPAR ]
-- On VAR shift to state 3
-- On labeling_opt shift to state 143
-- On bind_var shift to state 199
-- On UNREACHABLE reduce production labeling_opt -> 
-- On UNARY reduce production labeling_opt -> 
-- On TEST reduce production labeling_opt -> 
-- On TEE_LOCAL reduce production labeling_opt -> 
-- On STORE reduce production labeling_opt -> 
-- On SET_LOCAL reduce production labeling_opt -> 
-- On SET_GLOBAL reduce production labeling_opt -> 
-- On SELECT reduce production labeling_opt -> 
-- On RPAR reduce production labeling_opt -> 
-- On RETURN reduce production labeling_opt -> 
-- On NOP reduce production labeling_opt -> 
-- On LPAR reduce production labeling_opt -> 
-- On LOOP reduce production labeling_opt -> 
-- On LOAD reduce production labeling_opt -> 
-- On IF reduce production labeling_opt -> 
-- On GROW_MEMORY reduce production labeling_opt -> 
-- On GET_LOCAL reduce production labeling_opt -> 
-- On GET_GLOBAL reduce production labeling_opt -> 
-- On DROP reduce production labeling_opt -> 
-- On CURRENT_MEMORY reduce production labeling_opt -> 
-- On CONVERT reduce production labeling_opt -> 
-- On CONST reduce production labeling_opt -> 
-- On COMPARE reduce production labeling_opt -> 
-- On CALL_INDIRECT reduce production labeling_opt -> 
-- On CALL reduce production labeling_opt -> 
-- On BR_TABLE reduce production labeling_opt -> 
-- On BR_IF reduce production labeling_opt -> 
-- On BR reduce production labeling_opt -> 
-- On BLOCK reduce production labeling_opt -> 
-- On BINARY reduce production labeling_opt -> 

State 143:
expr1 -> LOOP labeling_opt . block [ RPAR ]
-- On UNREACHABLE shift to state 124
-- On UNARY shift to state 125
-- On TEST shift to state 126
-- On TEE_LOCAL shift to state 127
-- On STORE shift to state 129
-- On SET_LOCAL shift to state 134
-- On SET_GLOBAL shift to state 136
-- On SELECT shift to state 138
-- On RETURN shift to state 139
-- On NOP shift to state 140
-- On LPAR shift to state 144
-- On LOOP shift to state 155
-- On LOAD shift to state 148
-- On IF shift to state 157
-- On GROW_MEMORY shift to state 159
-- On GET_LOCAL shift to state 160
-- On GET_GLOBAL shift to state 162
-- On DROP shift to state 164
-- On CURRENT_MEMORY shift to state 165
-- On CONVERT shift to state 166
-- On CONST shift to state 167
-- On COMPARE shift to state 172
-- On CALL_INDIRECT shift to state 173
-- On CALL shift to state 175
-- On BR_TABLE shift to state 177
-- On BR_IF shift to state 180
-- On BR shift to state 182
-- On BLOCK shift to state 184
-- On BINARY shift to state 186
-- On plain_instr shift to state 187
-- On instr_list shift to state 188
-- On instr shift to state 189
-- On expr shift to state 191
-- On block_sig shift to state 193
-- On block_instr shift to state 192
-- On block shift to state 233
-- On RPAR reduce production instr_list -> 

State 144:
block_sig -> LPAR . RESULT VALUE_TYPE RPAR [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
expr -> LPAR . expr1 RPAR [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
-- On UNREACHABLE shift to state 124
-- On UNARY shift to state 125
-- On TEST shift to state 126
-- On TEE_LOCAL shift to state 127
-- On STORE shift to state 129
-- On SET_LOCAL shift to state 134
-- On SET_GLOBAL shift to state 136
-- On SELECT shift to state 138
-- On RETURN shift to state 139
-- On RESULT shift to state 145
-- On NOP shift to state 140
-- On LOOP shift to state 142
-- On LOAD shift to state 148
-- On IF shift to state 151
-- On GROW_MEMORY shift to state 159
-- On GET_LOCAL shift to state 160
-- On GET_GLOBAL shift to state 162
-- On DROP shift to state 164
-- On CURRENT_MEMORY shift to state 165
-- On CONVERT shift to state 166
-- On CONST shift to state 167
-- On COMPARE shift to state 172
-- On CALL_INDIRECT shift to state 173
-- On CALL shift to state 175
-- On BR_TABLE shift to state 177
-- On BR_IF shift to state 180
-- On BR shift to state 182
-- On BLOCK shift to state 217
-- On BINARY shift to state 186
-- On plain_instr shift to state 220
-- On expr1 shift to state 224

State 145:
block_sig -> LPAR RESULT . VALUE_TYPE RPAR [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
-- On VALUE_TYPE shift to state 146

State 146:
block_sig -> LPAR RESULT VALUE_TYPE . RPAR [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
-- On RPAR shift to state 147

State 147:
block_sig -> LPAR RESULT VALUE_TYPE RPAR . [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
-- On UNREACHABLE reduce production block_sig -> LPAR RESULT VALUE_TYPE RPAR
-- On UNARY reduce production block_sig -> LPAR RESULT VALUE_TYPE RPAR
-- On TEST reduce production block_sig -> LPAR RESULT VALUE_TYPE RPAR
-- On TEE_LOCAL reduce production block_sig -> LPAR RESULT VALUE_TYPE RPAR
-- On STORE reduce production block_sig -> LPAR RESULT VALUE_TYPE RPAR
-- On SET_LOCAL reduce production block_sig -> LPAR RESULT VALUE_TYPE RPAR
-- On SET_GLOBAL reduce production block_sig -> LPAR RESULT VALUE_TYPE RPAR
-- On SELECT reduce production block_sig -> LPAR RESULT VALUE_TYPE RPAR
-- On RPAR reduce production block_sig -> LPAR RESULT VALUE_TYPE RPAR
-- On RETURN reduce production block_sig -> LPAR RESULT VALUE_TYPE RPAR
-- On NOP reduce production block_sig -> LPAR RESULT VALUE_TYPE RPAR
-- On LPAR reduce production block_sig -> LPAR RESULT VALUE_TYPE RPAR
-- On LOOP reduce production block_sig -> LPAR RESULT VALUE_TYPE RPAR
-- On LOAD reduce production block_sig -> LPAR RESULT VALUE_TYPE RPAR
-- On IF reduce production block_sig -> LPAR RESULT VALUE_TYPE RPAR
-- On GROW_MEMORY reduce production block_sig -> LPAR RESULT VALUE_TYPE RPAR
-- On GET_LOCAL reduce production block_sig -> LPAR RESULT VALUE_TYPE RPAR
-- On GET_GLOBAL reduce production block_sig -> LPAR RESULT VALUE_TYPE RPAR
-- On END reduce production block_sig -> LPAR RESULT VALUE_TYPE RPAR
-- On ELSE reduce production block_sig -> LPAR RESULT VALUE_TYPE RPAR
-- On DROP reduce production block_sig -> LPAR RESULT VALUE_TYPE RPAR
-- On CURRENT_MEMORY reduce production block_sig -> LPAR RESULT VALUE_TYPE RPAR
-- On CONVERT reduce production block_sig -> LPAR RESULT VALUE_TYPE RPAR
-- On CONST reduce production block_sig -> LPAR RESULT VALUE_TYPE RPAR
-- On COMPARE reduce production block_sig -> LPAR RESULT VALUE_TYPE RPAR
-- On CALL_INDIRECT reduce production block_sig -> LPAR RESULT VALUE_TYPE RPAR
-- On CALL reduce production block_sig -> LPAR RESULT VALUE_TYPE RPAR
-- On BR_TABLE reduce production block_sig -> LPAR RESULT VALUE_TYPE RPAR
-- On BR_IF reduce production block_sig -> LPAR RESULT VALUE_TYPE RPAR
-- On BR reduce production block_sig -> LPAR RESULT VALUE_TYPE RPAR
-- On BLOCK reduce production block_sig -> LPAR RESULT VALUE_TYPE RPAR
-- On BINARY reduce production block_sig -> LPAR RESULT VALUE_TYPE RPAR

State 148:
plain_instr -> LOAD . offset_opt align_opt [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
-- On OFFSET_EQ_NAT shift to state 130
-- On offset_opt shift to state 149
-- On UNREACHABLE reduce production offset_opt -> 
-- On UNARY reduce production offset_opt -> 
-- On TEST reduce production offset_opt -> 
-- On TEE_LOCAL reduce production offset_opt -> 
-- On STORE reduce production offset_opt -> 
-- On SET_LOCAL reduce production offset_opt -> 
-- On SET_GLOBAL reduce production offset_opt -> 
-- On SELECT reduce production offset_opt -> 
-- On RPAR reduce production offset_opt -> 
-- On RETURN reduce production offset_opt -> 
-- On NOP reduce production offset_opt -> 
-- On LPAR reduce production offset_opt -> 
-- On LOOP reduce production offset_opt -> 
-- On LOAD reduce production offset_opt -> 
-- On IF reduce production offset_opt -> 
-- On GROW_MEMORY reduce production offset_opt -> 
-- On GET_LOCAL reduce production offset_opt -> 
-- On GET_GLOBAL reduce production offset_opt -> 
-- On END reduce production offset_opt -> 
-- On ELSE reduce production offset_opt -> 
-- On DROP reduce production offset_opt -> 
-- On CURRENT_MEMORY reduce production offset_opt -> 
-- On CONVERT reduce production offset_opt -> 
-- On CONST reduce production offset_opt -> 
-- On COMPARE reduce production offset_opt -> 
-- On CALL_INDIRECT reduce production offset_opt -> 
-- On CALL reduce production offset_opt -> 
-- On BR_TABLE reduce production offset_opt -> 
-- On BR_IF reduce production offset_opt -> 
-- On BR reduce production offset_opt -> 
-- On BLOCK reduce production offset_opt -> 
-- On BINARY reduce production offset_opt -> 
-- On ALIGN_EQ_NAT reduce production offset_opt -> 

State 149:
plain_instr -> LOAD offset_opt . align_opt [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
-- On ALIGN_EQ_NAT shift to state 132
-- On align_opt shift to state 150
-- On UNREACHABLE reduce production align_opt -> 
-- On UNARY reduce production align_opt -> 
-- On TEST reduce production align_opt -> 
-- On TEE_LOCAL reduce production align_opt -> 
-- On STORE reduce production align_opt -> 
-- On SET_LOCAL reduce production align_opt -> 
-- On SET_GLOBAL reduce production align_opt -> 
-- On SELECT reduce production align_opt -> 
-- On RPAR reduce production align_opt -> 
-- On RETURN reduce production align_opt -> 
-- On NOP reduce production align_opt -> 
-- On LPAR reduce production align_opt -> 
-- On LOOP reduce production align_opt -> 
-- On LOAD reduce production align_opt -> 
-- On IF reduce production align_opt -> 
-- On GROW_MEMORY reduce production align_opt -> 
-- On GET_LOCAL reduce production align_opt -> 
-- On GET_GLOBAL reduce production align_opt -> 
-- On END reduce production align_opt -> 
-- On ELSE reduce production align_opt -> 
-- On DROP reduce production align_opt -> 
-- On CURRENT_MEMORY reduce production align_opt -> 
-- On CONVERT reduce production align_opt -> 
-- On CONST reduce production align_opt -> 
-- On COMPARE reduce production align_opt -> 
-- On CALL_INDIRECT reduce production align_opt -> 
-- On CALL reduce production align_opt -> 
-- On BR_TABLE reduce production align_opt -> 
-- On BR_IF reduce production align_opt -> 
-- On BR reduce production align_opt -> 
-- On BLOCK reduce production align_opt -> 
-- On BINARY reduce production align_opt -> 

State 150:
plain_instr -> LOAD offset_opt align_opt . [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
-- On UNREACHABLE reduce production plain_instr -> LOAD offset_opt align_opt
-- On UNARY reduce production plain_instr -> LOAD offset_opt align_opt
-- On TEST reduce production plain_instr -> LOAD offset_opt align_opt
-- On TEE_LOCAL reduce production plain_instr -> LOAD offset_opt align_opt
-- On STORE reduce production plain_instr -> LOAD offset_opt align_opt
-- On SET_LOCAL reduce production plain_instr -> LOAD offset_opt align_opt
-- On SET_GLOBAL reduce production plain_instr -> LOAD offset_opt align_opt
-- On SELECT reduce production plain_instr -> LOAD offset_opt align_opt
-- On RPAR reduce production plain_instr -> LOAD offset_opt align_opt
-- On RETURN reduce production plain_instr -> LOAD offset_opt align_opt
-- On NOP reduce production plain_instr -> LOAD offset_opt align_opt
-- On LPAR reduce production plain_instr -> LOAD offset_opt align_opt
-- On LOOP reduce production plain_instr -> LOAD offset_opt align_opt
-- On LOAD reduce production plain_instr -> LOAD offset_opt align_opt
-- On IF reduce production plain_instr -> LOAD offset_opt align_opt
-- On GROW_MEMORY reduce production plain_instr -> LOAD offset_opt align_opt
-- On GET_LOCAL reduce production plain_instr -> LOAD offset_opt align_opt
-- On GET_GLOBAL reduce production plain_instr -> LOAD offset_opt align_opt
-- On END reduce production plain_instr -> LOAD offset_opt align_opt
-- On ELSE reduce production plain_instr -> LOAD offset_opt align_opt
-- On DROP reduce production plain_instr -> LOAD offset_opt align_opt
-- On CURRENT_MEMORY reduce production plain_instr -> LOAD offset_opt align_opt
-- On CONVERT reduce production plain_instr -> LOAD offset_opt align_opt
-- On CONST reduce production plain_instr -> LOAD offset_opt align_opt
-- On COMPARE reduce production plain_instr -> LOAD offset_opt align_opt
-- On CALL_INDIRECT reduce production plain_instr -> LOAD offset_opt align_opt
-- On CALL reduce production plain_instr -> LOAD offset_opt align_opt
-- On BR_TABLE reduce production plain_instr -> LOAD offset_opt align_opt
-- On BR_IF reduce production plain_instr -> LOAD offset_opt align_opt
-- On BR reduce production plain_instr -> LOAD offset_opt align_opt
-- On BLOCK reduce production plain_instr -> LOAD offset_opt align_opt
-- On BINARY reduce production plain_instr -> LOAD offset_opt align_opt

State 151:
expr1 -> IF . labeling_opt if_block [ RPAR ]
-- On VAR shift to state 3
-- On labeling_opt shift to state 152
-- On bind_var shift to state 199
-- On LPAR reduce production labeling_opt -> 

State 152:
expr1 -> IF labeling_opt . if_block [ RPAR ]
-- On LPAR shift to state 153
-- On if_block shift to state 226
-- On if_ shift to state 227
-- On expr shift to state 228
-- On block_sig shift to state 231

State 153:
block_sig -> LPAR . RESULT VALUE_TYPE RPAR [ LPAR ]
expr -> LPAR . expr1 RPAR [ LPAR ]
if_ -> LPAR . THEN instr_list RPAR LPAR ELSE instr_list RPAR [ RPAR ]
if_ -> LPAR . THEN instr_list RPAR [ RPAR ]
-- On UNREACHABLE shift to state 124
-- On UNARY shift to state 125
-- On THEN shift to state 154
-- On TEST shift to state 126
-- On TEE_LOCAL shift to state 127
-- On STORE shift to state 129
-- On SET_LOCAL shift to state 134
-- On SET_GLOBAL shift to state 136
-- On SELECT shift to state 138
-- On RETURN shift to state 139
-- On RESULT shift to state 145
-- On NOP shift to state 140
-- On LOOP shift to state 142
-- On LOAD shift to state 148
-- On IF shift to state 151
-- On GROW_MEMORY shift to state 159
-- On GET_LOCAL shift to state 160
-- On GET_GLOBAL shift to state 162
-- On DROP shift to state 164
-- On CURRENT_MEMORY shift to state 165
-- On CONVERT shift to state 166
-- On CONST shift to state 167
-- On COMPARE shift to state 172
-- On CALL_INDIRECT shift to state 173
-- On CALL shift to state 175
-- On BR_TABLE shift to state 177
-- On BR_IF shift to state 180
-- On BR shift to state 182
-- On BLOCK shift to state 217
-- On BINARY shift to state 186
-- On plain_instr shift to state 220
-- On expr1 shift to state 224

State 154:
if_ -> LPAR THEN . instr_list RPAR LPAR ELSE instr_list RPAR [ RPAR ]
if_ -> LPAR THEN . instr_list RPAR [ RPAR ]
-- On UNREACHABLE shift to state 124
-- On UNARY shift to state 125
-- On TEST shift to state 126
-- On TEE_LOCAL shift to state 127
-- On STORE shift to state 129
-- On SET_LOCAL shift to state 134
-- On SET_GLOBAL shift to state 136
-- On SELECT shift to state 138
-- On RETURN shift to state 139
-- On NOP shift to state 140
-- On LPAR shift to state 141
-- On LOOP shift to state 155
-- On LOAD shift to state 148
-- On IF shift to state 157
-- On GROW_MEMORY shift to state 159
-- On GET_LOCAL shift to state 160
-- On GET_GLOBAL shift to state 162
-- On DROP shift to state 164
-- On CURRENT_MEMORY shift to state 165
-- On CONVERT shift to state 166
-- On CONST shift to state 167
-- On COMPARE shift to state 172
-- On CALL_INDIRECT shift to state 173
-- On CALL shift to state 175
-- On BR_TABLE shift to state 177
-- On BR_IF shift to state 180
-- On BR shift to state 182
-- On BLOCK shift to state 184
-- On BINARY shift to state 186
-- On plain_instr shift to state 187
-- On instr_list shift to state 211
-- On instr shift to state 189
-- On expr shift to state 191
-- On block_instr shift to state 192
-- On RPAR reduce production instr_list -> 

State 155:
block_instr -> LOOP . labeling_opt block END labeling_end_opt [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
-- On VAR shift to state 3
-- On labeling_opt shift to state 156
-- On bind_var shift to state 199
-- On UNREACHABLE reduce production labeling_opt -> 
-- On UNARY reduce production labeling_opt -> 
-- On TEST reduce production labeling_opt -> 
-- On TEE_LOCAL reduce production labeling_opt -> 
-- On STORE reduce production labeling_opt -> 
-- On SET_LOCAL reduce production labeling_opt -> 
-- On SET_GLOBAL reduce production labeling_opt -> 
-- On SELECT reduce production labeling_opt -> 
-- On RETURN reduce production labeling_opt -> 
-- On NOP reduce production labeling_opt -> 
-- On LPAR reduce production labeling_opt -> 
-- On LOOP reduce production labeling_opt -> 
-- On LOAD reduce production labeling_opt -> 
-- On IF reduce production labeling_opt -> 
-- On GROW_MEMORY reduce production labeling_opt -> 
-- On GET_LOCAL reduce production labeling_opt -> 
-- On GET_GLOBAL reduce production labeling_opt -> 
-- On END reduce production labeling_opt -> 
-- On DROP reduce production labeling_opt -> 
-- On CURRENT_MEMORY reduce production labeling_opt -> 
-- On CONVERT reduce production labeling_opt -> 
-- On CONST reduce production labeling_opt -> 
-- On COMPARE reduce production labeling_opt -> 
-- On CALL_INDIRECT reduce production labeling_opt -> 
-- On CALL reduce production labeling_opt -> 
-- On BR_TABLE reduce production labeling_opt -> 
-- On BR_IF reduce production labeling_opt -> 
-- On BR reduce production labeling_opt -> 
-- On BLOCK reduce production labeling_opt -> 
-- On BINARY reduce production labeling_opt -> 

State 156:
block_instr -> LOOP labeling_opt . block END labeling_end_opt [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
-- On UNREACHABLE shift to state 124
-- On UNARY shift to state 125
-- On TEST shift to state 126
-- On TEE_LOCAL shift to state 127
-- On STORE shift to state 129
-- On SET_LOCAL shift to state 134
-- On SET_GLOBAL shift to state 136
-- On SELECT shift to state 138
-- On RETURN shift to state 139
-- On NOP shift to state 140
-- On LPAR shift to state 144
-- On LOOP shift to state 155
-- On LOAD shift to state 148
-- On IF shift to state 157
-- On GROW_MEMORY shift to state 159
-- On GET_LOCAL shift to state 160
-- On GET_GLOBAL shift to state 162
-- On DROP shift to state 164
-- On CURRENT_MEMORY shift to state 165
-- On CONVERT shift to state 166
-- On CONST shift to state 167
-- On COMPARE shift to state 172
-- On CALL_INDIRECT shift to state 173
-- On CALL shift to state 175
-- On BR_TABLE shift to state 177
-- On BR_IF shift to state 180
-- On BR shift to state 182
-- On BLOCK shift to state 184
-- On BINARY shift to state 186
-- On plain_instr shift to state 187
-- On instr_list shift to state 188
-- On instr shift to state 189
-- On expr shift to state 191
-- On block_sig shift to state 193
-- On block_instr shift to state 192
-- On block shift to state 208
-- On END reduce production instr_list -> 

State 157:
block_instr -> IF . labeling_opt block END labeling_end_opt [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
block_instr -> IF . labeling_opt block ELSE labeling_end_opt instr_list END labeling_end_opt [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
-- On VAR shift to state 3
-- On labeling_opt shift to state 158
-- On bind_var shift to state 199
-- On UNREACHABLE reduce production labeling_opt -> 
-- On UNARY reduce production labeling_opt -> 
-- On TEST reduce production labeling_opt -> 
-- On TEE_LOCAL reduce production labeling_opt -> 
-- On STORE reduce production labeling_opt -> 
-- On SET_LOCAL reduce production labeling_opt -> 
-- On SET_GLOBAL reduce production labeling_opt -> 
-- On SELECT reduce production labeling_opt -> 
-- On RETURN reduce production labeling_opt -> 
-- On NOP reduce production labeling_opt -> 
-- On LPAR reduce production labeling_opt -> 
-- On LOOP reduce production labeling_opt -> 
-- On LOAD reduce production labeling_opt -> 
-- On IF reduce production labeling_opt -> 
-- On GROW_MEMORY reduce production labeling_opt -> 
-- On GET_LOCAL reduce production labeling_opt -> 
-- On GET_GLOBAL reduce production labeling_opt -> 
-- On END reduce production labeling_opt -> 
-- On ELSE reduce production labeling_opt -> 
-- On DROP reduce production labeling_opt -> 
-- On CURRENT_MEMORY reduce production labeling_opt -> 
-- On CONVERT reduce production labeling_opt -> 
-- On CONST reduce production labeling_opt -> 
-- On COMPARE reduce production labeling_opt -> 
-- On CALL_INDIRECT reduce production labeling_opt -> 
-- On CALL reduce production labeling_opt -> 
-- On BR_TABLE reduce production labeling_opt -> 
-- On BR_IF reduce production labeling_opt -> 
-- On BR reduce production labeling_opt -> 
-- On BLOCK reduce production labeling_opt -> 
-- On BINARY reduce production labeling_opt -> 

State 158:
block_instr -> IF labeling_opt . block END labeling_end_opt [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
block_instr -> IF labeling_opt . block ELSE labeling_end_opt instr_list END labeling_end_opt [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
-- On UNREACHABLE shift to state 124
-- On UNARY shift to state 125
-- On TEST shift to state 126
-- On TEE_LOCAL shift to state 127
-- On STORE shift to state 129
-- On SET_LOCAL shift to state 134
-- On SET_GLOBAL shift to state 136
-- On SELECT shift to state 138
-- On RETURN shift to state 139
-- On NOP shift to state 140
-- On LPAR shift to state 144
-- On LOOP shift to state 155
-- On LOAD shift to state 148
-- On IF shift to state 157
-- On GROW_MEMORY shift to state 159
-- On GET_LOCAL shift to state 160
-- On GET_GLOBAL shift to state 162
-- On DROP shift to state 164
-- On CURRENT_MEMORY shift to state 165
-- On CONVERT shift to state 166
-- On CONST shift to state 167
-- On COMPARE shift to state 172
-- On CALL_INDIRECT shift to state 173
-- On CALL shift to state 175
-- On BR_TABLE shift to state 177
-- On BR_IF shift to state 180
-- On BR shift to state 182
-- On BLOCK shift to state 184
-- On BINARY shift to state 186
-- On plain_instr shift to state 187
-- On instr_list shift to state 188
-- On instr shift to state 189
-- On expr shift to state 191
-- On block_sig shift to state 193
-- On block_instr shift to state 192
-- On block shift to state 200
-- On END reduce production instr_list -> 
-- On ELSE reduce production instr_list -> 

State 159:
plain_instr -> GROW_MEMORY . [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
-- On UNREACHABLE reduce production plain_instr -> GROW_MEMORY
-- On UNARY reduce production plain_instr -> GROW_MEMORY
-- On TEST reduce production plain_instr -> GROW_MEMORY
-- On TEE_LOCAL reduce production plain_instr -> GROW_MEMORY
-- On STORE reduce production plain_instr -> GROW_MEMORY
-- On SET_LOCAL reduce production plain_instr -> GROW_MEMORY
-- On SET_GLOBAL reduce production plain_instr -> GROW_MEMORY
-- On SELECT reduce production plain_instr -> GROW_MEMORY
-- On RPAR reduce production plain_instr -> GROW_MEMORY
-- On RETURN reduce production plain_instr -> GROW_MEMORY
-- On NOP reduce production plain_instr -> GROW_MEMORY
-- On LPAR reduce production plain_instr -> GROW_MEMORY
-- On LOOP reduce production plain_instr -> GROW_MEMORY
-- On LOAD reduce production plain_instr -> GROW_MEMORY
-- On IF reduce production plain_instr -> GROW_MEMORY
-- On GROW_MEMORY reduce production plain_instr -> GROW_MEMORY
-- On GET_LOCAL reduce production plain_instr -> GROW_MEMORY
-- On GET_GLOBAL reduce production plain_instr -> GROW_MEMORY
-- On END reduce production plain_instr -> GROW_MEMORY
-- On ELSE reduce production plain_instr -> GROW_MEMORY
-- On DROP reduce production plain_instr -> GROW_MEMORY
-- On CURRENT_MEMORY reduce production plain_instr -> GROW_MEMORY
-- On CONVERT reduce production plain_instr -> GROW_MEMORY
-- On CONST reduce production plain_instr -> GROW_MEMORY
-- On COMPARE reduce production plain_instr -> GROW_MEMORY
-- On CALL_INDIRECT reduce production plain_instr -> GROW_MEMORY
-- On CALL reduce production plain_instr -> GROW_MEMORY
-- On BR_TABLE reduce production plain_instr -> GROW_MEMORY
-- On BR_IF reduce production plain_instr -> GROW_MEMORY
-- On BR reduce production plain_instr -> GROW_MEMORY
-- On BLOCK reduce production plain_instr -> GROW_MEMORY
-- On BINARY reduce production plain_instr -> GROW_MEMORY

State 160:
plain_instr -> GET_LOCAL . var [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
-- On VAR shift to state 55
-- On NAT shift to state 56
-- On var shift to state 161

State 161:
plain_instr -> GET_LOCAL var . [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
-- On UNREACHABLE reduce production plain_instr -> GET_LOCAL var
-- On UNARY reduce production plain_instr -> GET_LOCAL var
-- On TEST reduce production plain_instr -> GET_LOCAL var
-- On TEE_LOCAL reduce production plain_instr -> GET_LOCAL var
-- On STORE reduce production plain_instr -> GET_LOCAL var
-- On SET_LOCAL reduce production plain_instr -> GET_LOCAL var
-- On SET_GLOBAL reduce production plain_instr -> GET_LOCAL var
-- On SELECT reduce production plain_instr -> GET_LOCAL var
-- On RPAR reduce production plain_instr -> GET_LOCAL var
-- On RETURN reduce production plain_instr -> GET_LOCAL var
-- On NOP reduce production plain_instr -> GET_LOCAL var
-- On LPAR reduce production plain_instr -> GET_LOCAL var
-- On LOOP reduce production plain_instr -> GET_LOCAL var
-- On LOAD reduce production plain_instr -> GET_LOCAL var
-- On IF reduce production plain_instr -> GET_LOCAL var
-- On GROW_MEMORY reduce production plain_instr -> GET_LOCAL var
-- On GET_LOCAL reduce production plain_instr -> GET_LOCAL var
-- On GET_GLOBAL reduce production plain_instr -> GET_LOCAL var
-- On END reduce production plain_instr -> GET_LOCAL var
-- On ELSE reduce production plain_instr -> GET_LOCAL var
-- On DROP reduce production plain_instr -> GET_LOCAL var
-- On CURRENT_MEMORY reduce production plain_instr -> GET_LOCAL var
-- On CONVERT reduce production plain_instr -> GET_LOCAL var
-- On CONST reduce production plain_instr -> GET_LOCAL var
-- On COMPARE reduce production plain_instr -> GET_LOCAL var
-- On CALL_INDIRECT reduce production plain_instr -> GET_LOCAL var
-- On CALL reduce production plain_instr -> GET_LOCAL var
-- On BR_TABLE reduce production plain_instr -> GET_LOCAL var
-- On BR_IF reduce production plain_instr -> GET_LOCAL var
-- On BR reduce production plain_instr -> GET_LOCAL var
-- On BLOCK reduce production plain_instr -> GET_LOCAL var
-- On BINARY reduce production plain_instr -> GET_LOCAL var

State 162:
plain_instr -> GET_GLOBAL . var [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
-- On VAR shift to state 55
-- On NAT shift to state 56
-- On var shift to state 163

State 163:
plain_instr -> GET_GLOBAL var . [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
-- On UNREACHABLE reduce production plain_instr -> GET_GLOBAL var
-- On UNARY reduce production plain_instr -> GET_GLOBAL var
-- On TEST reduce production plain_instr -> GET_GLOBAL var
-- On TEE_LOCAL reduce production plain_instr -> GET_GLOBAL var
-- On STORE reduce production plain_instr -> GET_GLOBAL var
-- On SET_LOCAL reduce production plain_instr -> GET_GLOBAL var
-- On SET_GLOBAL reduce production plain_instr -> GET_GLOBAL var
-- On SELECT reduce production plain_instr -> GET_GLOBAL var
-- On RPAR reduce production plain_instr -> GET_GLOBAL var
-- On RETURN reduce production plain_instr -> GET_GLOBAL var
-- On NOP reduce production plain_instr -> GET_GLOBAL var
-- On LPAR reduce production plain_instr -> GET_GLOBAL var
-- On LOOP reduce production plain_instr -> GET_GLOBAL var
-- On LOAD reduce production plain_instr -> GET_GLOBAL var
-- On IF reduce production plain_instr -> GET_GLOBAL var
-- On GROW_MEMORY reduce production plain_instr -> GET_GLOBAL var
-- On GET_LOCAL reduce production plain_instr -> GET_GLOBAL var
-- On GET_GLOBAL reduce production plain_instr -> GET_GLOBAL var
-- On END reduce production plain_instr -> GET_GLOBAL var
-- On ELSE reduce production plain_instr -> GET_GLOBAL var
-- On DROP reduce production plain_instr -> GET_GLOBAL var
-- On CURRENT_MEMORY reduce production plain_instr -> GET_GLOBAL var
-- On CONVERT reduce production plain_instr -> GET_GLOBAL var
-- On CONST reduce production plain_instr -> GET_GLOBAL var
-- On COMPARE reduce production plain_instr -> GET_GLOBAL var
-- On CALL_INDIRECT reduce production plain_instr -> GET_GLOBAL var
-- On CALL reduce production plain_instr -> GET_GLOBAL var
-- On BR_TABLE reduce production plain_instr -> GET_GLOBAL var
-- On BR_IF reduce production plain_instr -> GET_GLOBAL var
-- On BR reduce production plain_instr -> GET_GLOBAL var
-- On BLOCK reduce production plain_instr -> GET_GLOBAL var
-- On BINARY reduce production plain_instr -> GET_GLOBAL var

State 164:
plain_instr -> DROP . [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
-- On UNREACHABLE reduce production plain_instr -> DROP
-- On UNARY reduce production plain_instr -> DROP
-- On TEST reduce production plain_instr -> DROP
-- On TEE_LOCAL reduce production plain_instr -> DROP
-- On STORE reduce production plain_instr -> DROP
-- On SET_LOCAL reduce production plain_instr -> DROP
-- On SET_GLOBAL reduce production plain_instr -> DROP
-- On SELECT reduce production plain_instr -> DROP
-- On RPAR reduce production plain_instr -> DROP
-- On RETURN reduce production plain_instr -> DROP
-- On NOP reduce production plain_instr -> DROP
-- On LPAR reduce production plain_instr -> DROP
-- On LOOP reduce production plain_instr -> DROP
-- On LOAD reduce production plain_instr -> DROP
-- On IF reduce production plain_instr -> DROP
-- On GROW_MEMORY reduce production plain_instr -> DROP
-- On GET_LOCAL reduce production plain_instr -> DROP
-- On GET_GLOBAL reduce production plain_instr -> DROP
-- On END reduce production plain_instr -> DROP
-- On ELSE reduce production plain_instr -> DROP
-- On DROP reduce production plain_instr -> DROP
-- On CURRENT_MEMORY reduce production plain_instr -> DROP
-- On CONVERT reduce production plain_instr -> DROP
-- On CONST reduce production plain_instr -> DROP
-- On COMPARE reduce production plain_instr -> DROP
-- On CALL_INDIRECT reduce production plain_instr -> DROP
-- On CALL reduce production plain_instr -> DROP
-- On BR_TABLE reduce production plain_instr -> DROP
-- On BR_IF reduce production plain_instr -> DROP
-- On BR reduce production plain_instr -> DROP
-- On BLOCK reduce production plain_instr -> DROP
-- On BINARY reduce production plain_instr -> DROP

State 165:
plain_instr -> CURRENT_MEMORY . [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
-- On UNREACHABLE reduce production plain_instr -> CURRENT_MEMORY
-- On UNARY reduce production plain_instr -> CURRENT_MEMORY
-- On TEST reduce production plain_instr -> CURRENT_MEMORY
-- On TEE_LOCAL reduce production plain_instr -> CURRENT_MEMORY
-- On STORE reduce production plain_instr -> CURRENT_MEMORY
-- On SET_LOCAL reduce production plain_instr -> CURRENT_MEMORY
-- On SET_GLOBAL reduce production plain_instr -> CURRENT_MEMORY
-- On SELECT reduce production plain_instr -> CURRENT_MEMORY
-- On RPAR reduce production plain_instr -> CURRENT_MEMORY
-- On RETURN reduce production plain_instr -> CURRENT_MEMORY
-- On NOP reduce production plain_instr -> CURRENT_MEMORY
-- On LPAR reduce production plain_instr -> CURRENT_MEMORY
-- On LOOP reduce production plain_instr -> CURRENT_MEMORY
-- On LOAD reduce production plain_instr -> CURRENT_MEMORY
-- On IF reduce production plain_instr -> CURRENT_MEMORY
-- On GROW_MEMORY reduce production plain_instr -> CURRENT_MEMORY
-- On GET_LOCAL reduce production plain_instr -> CURRENT_MEMORY
-- On GET_GLOBAL reduce production plain_instr -> CURRENT_MEMORY
-- On END reduce production plain_instr -> CURRENT_MEMORY
-- On ELSE reduce production plain_instr -> CURRENT_MEMORY
-- On DROP reduce production plain_instr -> CURRENT_MEMORY
-- On CURRENT_MEMORY reduce production plain_instr -> CURRENT_MEMORY
-- On CONVERT reduce production plain_instr -> CURRENT_MEMORY
-- On CONST reduce production plain_instr -> CURRENT_MEMORY
-- On COMPARE reduce production plain_instr -> CURRENT_MEMORY
-- On CALL_INDIRECT reduce production plain_instr -> CURRENT_MEMORY
-- On CALL reduce production plain_instr -> CURRENT_MEMORY
-- On BR_TABLE reduce production plain_instr -> CURRENT_MEMORY
-- On BR_IF reduce production plain_instr -> CURRENT_MEMORY
-- On BR reduce production plain_instr -> CURRENT_MEMORY
-- On BLOCK reduce production plain_instr -> CURRENT_MEMORY
-- On BINARY reduce production plain_instr -> CURRENT_MEMORY

State 166:
plain_instr -> CONVERT . [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
-- On UNREACHABLE reduce production plain_instr -> CONVERT
-- On UNARY reduce production plain_instr -> CONVERT
-- On TEST reduce production plain_instr -> CONVERT
-- On TEE_LOCAL reduce production plain_instr -> CONVERT
-- On STORE reduce production plain_instr -> CONVERT
-- On SET_LOCAL reduce production plain_instr -> CONVERT
-- On SET_GLOBAL reduce production plain_instr -> CONVERT
-- On SELECT reduce production plain_instr -> CONVERT
-- On RPAR reduce production plain_instr -> CONVERT
-- On RETURN reduce production plain_instr -> CONVERT
-- On NOP reduce production plain_instr -> CONVERT
-- On LPAR reduce production plain_instr -> CONVERT
-- On LOOP reduce production plain_instr -> CONVERT
-- On LOAD reduce production plain_instr -> CONVERT
-- On IF reduce production plain_instr -> CONVERT
-- On GROW_MEMORY reduce production plain_instr -> CONVERT
-- On GET_LOCAL reduce production plain_instr -> CONVERT
-- On GET_GLOBAL reduce production plain_instr -> CONVERT
-- On END reduce production plain_instr -> CONVERT
-- On ELSE reduce production plain_instr -> CONVERT
-- On DROP reduce production plain_instr -> CONVERT
-- On CURRENT_MEMORY reduce production plain_instr -> CONVERT
-- On CONVERT reduce production plain_instr -> CONVERT
-- On CONST reduce production plain_instr -> CONVERT
-- On COMPARE reduce production plain_instr -> CONVERT
-- On CALL_INDIRECT reduce production plain_instr -> CONVERT
-- On CALL reduce production plain_instr -> CONVERT
-- On BR_TABLE reduce production plain_instr -> CONVERT
-- On BR_IF reduce production plain_instr -> CONVERT
-- On BR reduce production plain_instr -> CONVERT
-- On BLOCK reduce production plain_instr -> CONVERT
-- On BINARY reduce production plain_instr -> CONVERT

State 167:
plain_instr -> CONST . literal [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
-- On NAT shift to state 168
-- On INT shift to state 169
-- On FLOAT shift to state 170
-- On literal shift to state 171

State 168:
literal -> NAT . [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
-- On UNREACHABLE reduce production literal -> NAT
-- On UNARY reduce production literal -> NAT
-- On TEST reduce production literal -> NAT
-- On TEE_LOCAL reduce production literal -> NAT
-- On STORE reduce production literal -> NAT
-- On SET_LOCAL reduce production literal -> NAT
-- On SET_GLOBAL reduce production literal -> NAT
-- On SELECT reduce production literal -> NAT
-- On RPAR reduce production literal -> NAT
-- On RETURN reduce production literal -> NAT
-- On NOP reduce production literal -> NAT
-- On LPAR reduce production literal -> NAT
-- On LOOP reduce production literal -> NAT
-- On LOAD reduce production literal -> NAT
-- On IF reduce production literal -> NAT
-- On GROW_MEMORY reduce production literal -> NAT
-- On GET_LOCAL reduce production literal -> NAT
-- On GET_GLOBAL reduce production literal -> NAT
-- On END reduce production literal -> NAT
-- On ELSE reduce production literal -> NAT
-- On DROP reduce production literal -> NAT
-- On CURRENT_MEMORY reduce production literal -> NAT
-- On CONVERT reduce production literal -> NAT
-- On CONST reduce production literal -> NAT
-- On COMPARE reduce production literal -> NAT
-- On CALL_INDIRECT reduce production literal -> NAT
-- On CALL reduce production literal -> NAT
-- On BR_TABLE reduce production literal -> NAT
-- On BR_IF reduce production literal -> NAT
-- On BR reduce production literal -> NAT
-- On BLOCK reduce production literal -> NAT
-- On BINARY reduce production literal -> NAT

State 169:
literal -> INT . [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
-- On UNREACHABLE reduce production literal -> INT
-- On UNARY reduce production literal -> INT
-- On TEST reduce production literal -> INT
-- On TEE_LOCAL reduce production literal -> INT
-- On STORE reduce production literal -> INT
-- On SET_LOCAL reduce production literal -> INT
-- On SET_GLOBAL reduce production literal -> INT
-- On SELECT reduce production literal -> INT
-- On RPAR reduce production literal -> INT
-- On RETURN reduce production literal -> INT
-- On NOP reduce production literal -> INT
-- On LPAR reduce production literal -> INT
-- On LOOP reduce production literal -> INT
-- On LOAD reduce production literal -> INT
-- On IF reduce production literal -> INT
-- On GROW_MEMORY reduce production literal -> INT
-- On GET_LOCAL reduce production literal -> INT
-- On GET_GLOBAL reduce production literal -> INT
-- On END reduce production literal -> INT
-- On ELSE reduce production literal -> INT
-- On DROP reduce production literal -> INT
-- On CURRENT_MEMORY reduce production literal -> INT
-- On CONVERT reduce production literal -> INT
-- On CONST reduce production literal -> INT
-- On COMPARE reduce production literal -> INT
-- On CALL_INDIRECT reduce production literal -> INT
-- On CALL reduce production literal -> INT
-- On BR_TABLE reduce production literal -> INT
-- On BR_IF reduce production literal -> INT
-- On BR reduce production literal -> INT
-- On BLOCK reduce production literal -> INT
-- On BINARY reduce production literal -> INT

State 170:
literal -> FLOAT . [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
-- On UNREACHABLE reduce production literal -> FLOAT
-- On UNARY reduce production literal -> FLOAT
-- On TEST reduce production literal -> FLOAT
-- On TEE_LOCAL reduce production literal -> FLOAT
-- On STORE reduce production literal -> FLOAT
-- On SET_LOCAL reduce production literal -> FLOAT
-- On SET_GLOBAL reduce production literal -> FLOAT
-- On SELECT reduce production literal -> FLOAT
-- On RPAR reduce production literal -> FLOAT
-- On RETURN reduce production literal -> FLOAT
-- On NOP reduce production literal -> FLOAT
-- On LPAR reduce production literal -> FLOAT
-- On LOOP reduce production literal -> FLOAT
-- On LOAD reduce production literal -> FLOAT
-- On IF reduce production literal -> FLOAT
-- On GROW_MEMORY reduce production literal -> FLOAT
-- On GET_LOCAL reduce production literal -> FLOAT
-- On GET_GLOBAL reduce production literal -> FLOAT
-- On END reduce production literal -> FLOAT
-- On ELSE reduce production literal -> FLOAT
-- On DROP reduce production literal -> FLOAT
-- On CURRENT_MEMORY reduce production literal -> FLOAT
-- On CONVERT reduce production literal -> FLOAT
-- On CONST reduce production literal -> FLOAT
-- On COMPARE reduce production literal -> FLOAT
-- On CALL_INDIRECT reduce production literal -> FLOAT
-- On CALL reduce production literal -> FLOAT
-- On BR_TABLE reduce production literal -> FLOAT
-- On BR_IF reduce production literal -> FLOAT
-- On BR reduce production literal -> FLOAT
-- On BLOCK reduce production literal -> FLOAT
-- On BINARY reduce production literal -> FLOAT

State 171:
plain_instr -> CONST literal . [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
-- On UNREACHABLE reduce production plain_instr -> CONST literal
-- On UNARY reduce production plain_instr -> CONST literal
-- On TEST reduce production plain_instr -> CONST literal
-- On TEE_LOCAL reduce production plain_instr -> CONST literal
-- On STORE reduce production plain_instr -> CONST literal
-- On SET_LOCAL reduce production plain_instr -> CONST literal
-- On SET_GLOBAL reduce production plain_instr -> CONST literal
-- On SELECT reduce production plain_instr -> CONST literal
-- On RPAR reduce production plain_instr -> CONST literal
-- On RETURN reduce production plain_instr -> CONST literal
-- On NOP reduce production plain_instr -> CONST literal
-- On LPAR reduce production plain_instr -> CONST literal
-- On LOOP reduce production plain_instr -> CONST literal
-- On LOAD reduce production plain_instr -> CONST literal
-- On IF reduce production plain_instr -> CONST literal
-- On GROW_MEMORY reduce production plain_instr -> CONST literal
-- On GET_LOCAL reduce production plain_instr -> CONST literal
-- On GET_GLOBAL reduce production plain_instr -> CONST literal
-- On END reduce production plain_instr -> CONST literal
-- On ELSE reduce production plain_instr -> CONST literal
-- On DROP reduce production plain_instr -> CONST literal
-- On CURRENT_MEMORY reduce production plain_instr -> CONST literal
-- On CONVERT reduce production plain_instr -> CONST literal
-- On CONST reduce production plain_instr -> CONST literal
-- On COMPARE reduce production plain_instr -> CONST literal
-- On CALL_INDIRECT reduce production plain_instr -> CONST literal
-- On CALL reduce production plain_instr -> CONST literal
-- On BR_TABLE reduce production plain_instr -> CONST literal
-- On BR_IF reduce production plain_instr -> CONST literal
-- On BR reduce production plain_instr -> CONST literal
-- On BLOCK reduce production plain_instr -> CONST literal
-- On BINARY reduce production plain_instr -> CONST literal

State 172:
plain_instr -> COMPARE . [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
-- On UNREACHABLE reduce production plain_instr -> COMPARE
-- On UNARY reduce production plain_instr -> COMPARE
-- On TEST reduce production plain_instr -> COMPARE
-- On TEE_LOCAL reduce production plain_instr -> COMPARE
-- On STORE reduce production plain_instr -> COMPARE
-- On SET_LOCAL reduce production plain_instr -> COMPARE
-- On SET_GLOBAL reduce production plain_instr -> COMPARE
-- On SELECT reduce production plain_instr -> COMPARE
-- On RPAR reduce production plain_instr -> COMPARE
-- On RETURN reduce production plain_instr -> COMPARE
-- On NOP reduce production plain_instr -> COMPARE
-- On LPAR reduce production plain_instr -> COMPARE
-- On LOOP reduce production plain_instr -> COMPARE
-- On LOAD reduce production plain_instr -> COMPARE
-- On IF reduce production plain_instr -> COMPARE
-- On GROW_MEMORY reduce production plain_instr -> COMPARE
-- On GET_LOCAL reduce production plain_instr -> COMPARE
-- On GET_GLOBAL reduce production plain_instr -> COMPARE
-- On END reduce production plain_instr -> COMPARE
-- On ELSE reduce production plain_instr -> COMPARE
-- On DROP reduce production plain_instr -> COMPARE
-- On CURRENT_MEMORY reduce production plain_instr -> COMPARE
-- On CONVERT reduce production plain_instr -> COMPARE
-- On CONST reduce production plain_instr -> COMPARE
-- On COMPARE reduce production plain_instr -> COMPARE
-- On CALL_INDIRECT reduce production plain_instr -> COMPARE
-- On CALL reduce production plain_instr -> COMPARE
-- On BR_TABLE reduce production plain_instr -> COMPARE
-- On BR_IF reduce production plain_instr -> COMPARE
-- On BR reduce production plain_instr -> COMPARE
-- On BLOCK reduce production plain_instr -> COMPARE
-- On BINARY reduce production plain_instr -> COMPARE

State 173:
plain_instr -> CALL_INDIRECT . var [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
-- On VAR shift to state 55
-- On NAT shift to state 56
-- On var shift to state 174

State 174:
plain_instr -> CALL_INDIRECT var . [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
-- On UNREACHABLE reduce production plain_instr -> CALL_INDIRECT var
-- On UNARY reduce production plain_instr -> CALL_INDIRECT var
-- On TEST reduce production plain_instr -> CALL_INDIRECT var
-- On TEE_LOCAL reduce production plain_instr -> CALL_INDIRECT var
-- On STORE reduce production plain_instr -> CALL_INDIRECT var
-- On SET_LOCAL reduce production plain_instr -> CALL_INDIRECT var
-- On SET_GLOBAL reduce production plain_instr -> CALL_INDIRECT var
-- On SELECT reduce production plain_instr -> CALL_INDIRECT var
-- On RPAR reduce production plain_instr -> CALL_INDIRECT var
-- On RETURN reduce production plain_instr -> CALL_INDIRECT var
-- On NOP reduce production plain_instr -> CALL_INDIRECT var
-- On LPAR reduce production plain_instr -> CALL_INDIRECT var
-- On LOOP reduce production plain_instr -> CALL_INDIRECT var
-- On LOAD reduce production plain_instr -> CALL_INDIRECT var
-- On IF reduce production plain_instr -> CALL_INDIRECT var
-- On GROW_MEMORY reduce production plain_instr -> CALL_INDIRECT var
-- On GET_LOCAL reduce production plain_instr -> CALL_INDIRECT var
-- On GET_GLOBAL reduce production plain_instr -> CALL_INDIRECT var
-- On END reduce production plain_instr -> CALL_INDIRECT var
-- On ELSE reduce production plain_instr -> CALL_INDIRECT var
-- On DROP reduce production plain_instr -> CALL_INDIRECT var
-- On CURRENT_MEMORY reduce production plain_instr -> CALL_INDIRECT var
-- On CONVERT reduce production plain_instr -> CALL_INDIRECT var
-- On CONST reduce production plain_instr -> CALL_INDIRECT var
-- On COMPARE reduce production plain_instr -> CALL_INDIRECT var
-- On CALL_INDIRECT reduce production plain_instr -> CALL_INDIRECT var
-- On CALL reduce production plain_instr -> CALL_INDIRECT var
-- On BR_TABLE reduce production plain_instr -> CALL_INDIRECT var
-- On BR_IF reduce production plain_instr -> CALL_INDIRECT var
-- On BR reduce production plain_instr -> CALL_INDIRECT var
-- On BLOCK reduce production plain_instr -> CALL_INDIRECT var
-- On BINARY reduce production plain_instr -> CALL_INDIRECT var

State 175:
plain_instr -> CALL . var [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
-- On VAR shift to state 55
-- On NAT shift to state 56
-- On var shift to state 176

State 176:
plain_instr -> CALL var . [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
-- On UNREACHABLE reduce production plain_instr -> CALL var
-- On UNARY reduce production plain_instr -> CALL var
-- On TEST reduce production plain_instr -> CALL var
-- On TEE_LOCAL reduce production plain_instr -> CALL var
-- On STORE reduce production plain_instr -> CALL var
-- On SET_LOCAL reduce production plain_instr -> CALL var
-- On SET_GLOBAL reduce production plain_instr -> CALL var
-- On SELECT reduce production plain_instr -> CALL var
-- On RPAR reduce production plain_instr -> CALL var
-- On RETURN reduce production plain_instr -> CALL var
-- On NOP reduce production plain_instr -> CALL var
-- On LPAR reduce production plain_instr -> CALL var
-- On LOOP reduce production plain_instr -> CALL var
-- On LOAD reduce production plain_instr -> CALL var
-- On IF reduce production plain_instr -> CALL var
-- On GROW_MEMORY reduce production plain_instr -> CALL var
-- On GET_LOCAL reduce production plain_instr -> CALL var
-- On GET_GLOBAL reduce production plain_instr -> CALL var
-- On END reduce production plain_instr -> CALL var
-- On ELSE reduce production plain_instr -> CALL var
-- On DROP reduce production plain_instr -> CALL var
-- On CURRENT_MEMORY reduce production plain_instr -> CALL var
-- On CONVERT reduce production plain_instr -> CALL var
-- On CONST reduce production plain_instr -> CALL var
-- On COMPARE reduce production plain_instr -> CALL var
-- On CALL_INDIRECT reduce production plain_instr -> CALL var
-- On CALL reduce production plain_instr -> CALL var
-- On BR_TABLE reduce production plain_instr -> CALL var
-- On BR_IF reduce production plain_instr -> CALL var
-- On BR reduce production plain_instr -> CALL var
-- On BLOCK reduce production plain_instr -> CALL var
-- On BINARY reduce production plain_instr -> CALL var

State 177:
plain_instr -> BR_TABLE . var var_list [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
-- On VAR shift to state 55
-- On NAT shift to state 56
-- On var shift to state 178

State 178:
plain_instr -> BR_TABLE var . var_list [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
-- On VAR shift to state 55
-- On NAT shift to state 56
-- On var_list shift to state 179
-- On var shift to state 59
-- On UNREACHABLE reduce production var_list -> 
-- On UNARY reduce production var_list -> 
-- On TEST reduce production var_list -> 
-- On TEE_LOCAL reduce production var_list -> 
-- On STORE reduce production var_list -> 
-- On SET_LOCAL reduce production var_list -> 
-- On SET_GLOBAL reduce production var_list -> 
-- On SELECT reduce production var_list -> 
-- On RPAR reduce production var_list -> 
-- On RETURN reduce production var_list -> 
-- On NOP reduce production var_list -> 
-- On LPAR reduce production var_list -> 
-- On LOOP reduce production var_list -> 
-- On LOAD reduce production var_list -> 
-- On IF reduce production var_list -> 
-- On GROW_MEMORY reduce production var_list -> 
-- On GET_LOCAL reduce production var_list -> 
-- On GET_GLOBAL reduce production var_list -> 
-- On END reduce production var_list -> 
-- On ELSE reduce production var_list -> 
-- On DROP reduce production var_list -> 
-- On CURRENT_MEMORY reduce production var_list -> 
-- On CONVERT reduce production var_list -> 
-- On CONST reduce production var_list -> 
-- On COMPARE reduce production var_list -> 
-- On CALL_INDIRECT reduce production var_list -> 
-- On CALL reduce production var_list -> 
-- On BR_TABLE reduce production var_list -> 
-- On BR_IF reduce production var_list -> 
-- On BR reduce production var_list -> 
-- On BLOCK reduce production var_list -> 
-- On BINARY reduce production var_list -> 

State 179:
plain_instr -> BR_TABLE var var_list . [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
-- On UNREACHABLE reduce production plain_instr -> BR_TABLE var var_list
-- On UNARY reduce production plain_instr -> BR_TABLE var var_list
-- On TEST reduce production plain_instr -> BR_TABLE var var_list
-- On TEE_LOCAL reduce production plain_instr -> BR_TABLE var var_list
-- On STORE reduce production plain_instr -> BR_TABLE var var_list
-- On SET_LOCAL reduce production plain_instr -> BR_TABLE var var_list
-- On SET_GLOBAL reduce production plain_instr -> BR_TABLE var var_list
-- On SELECT reduce production plain_instr -> BR_TABLE var var_list
-- On RPAR reduce production plain_instr -> BR_TABLE var var_list
-- On RETURN reduce production plain_instr -> BR_TABLE var var_list
-- On NOP reduce production plain_instr -> BR_TABLE var var_list
-- On LPAR reduce production plain_instr -> BR_TABLE var var_list
-- On LOOP reduce production plain_instr -> BR_TABLE var var_list
-- On LOAD reduce production plain_instr -> BR_TABLE var var_list
-- On IF reduce production plain_instr -> BR_TABLE var var_list
-- On GROW_MEMORY reduce production plain_instr -> BR_TABLE var var_list
-- On GET_LOCAL reduce production plain_instr -> BR_TABLE var var_list
-- On GET_GLOBAL reduce production plain_instr -> BR_TABLE var var_list
-- On END reduce production plain_instr -> BR_TABLE var var_list
-- On ELSE reduce production plain_instr -> BR_TABLE var var_list
-- On DROP reduce production plain_instr -> BR_TABLE var var_list
-- On CURRENT_MEMORY reduce production plain_instr -> BR_TABLE var var_list
-- On CONVERT reduce production plain_instr -> BR_TABLE var var_list
-- On CONST reduce production plain_instr -> BR_TABLE var var_list
-- On COMPARE reduce production plain_instr -> BR_TABLE var var_list
-- On CALL_INDIRECT reduce production plain_instr -> BR_TABLE var var_list
-- On CALL reduce production plain_instr -> BR_TABLE var var_list
-- On BR_TABLE reduce production plain_instr -> BR_TABLE var var_list
-- On BR_IF reduce production plain_instr -> BR_TABLE var var_list
-- On BR reduce production plain_instr -> BR_TABLE var var_list
-- On BLOCK reduce production plain_instr -> BR_TABLE var var_list
-- On BINARY reduce production plain_instr -> BR_TABLE var var_list

State 180:
plain_instr -> BR_IF . var [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
-- On VAR shift to state 55
-- On NAT shift to state 56
-- On var shift to state 181

State 181:
plain_instr -> BR_IF var . [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
-- On UNREACHABLE reduce production plain_instr -> BR_IF var
-- On UNARY reduce production plain_instr -> BR_IF var
-- On TEST reduce production plain_instr -> BR_IF var
-- On TEE_LOCAL reduce production plain_instr -> BR_IF var
-- On STORE reduce production plain_instr -> BR_IF var
-- On SET_LOCAL reduce production plain_instr -> BR_IF var
-- On SET_GLOBAL reduce production plain_instr -> BR_IF var
-- On SELECT reduce production plain_instr -> BR_IF var
-- On RPAR reduce production plain_instr -> BR_IF var
-- On RETURN reduce production plain_instr -> BR_IF var
-- On NOP reduce production plain_instr -> BR_IF var
-- On LPAR reduce production plain_instr -> BR_IF var
-- On LOOP reduce production plain_instr -> BR_IF var
-- On LOAD reduce production plain_instr -> BR_IF var
-- On IF reduce production plain_instr -> BR_IF var
-- On GROW_MEMORY reduce production plain_instr -> BR_IF var
-- On GET_LOCAL reduce production plain_instr -> BR_IF var
-- On GET_GLOBAL reduce production plain_instr -> BR_IF var
-- On END reduce production plain_instr -> BR_IF var
-- On ELSE reduce production plain_instr -> BR_IF var
-- On DROP reduce production plain_instr -> BR_IF var
-- On CURRENT_MEMORY reduce production plain_instr -> BR_IF var
-- On CONVERT reduce production plain_instr -> BR_IF var
-- On CONST reduce production plain_instr -> BR_IF var
-- On COMPARE reduce production plain_instr -> BR_IF var
-- On CALL_INDIRECT reduce production plain_instr -> BR_IF var
-- On CALL reduce production plain_instr -> BR_IF var
-- On BR_TABLE reduce production plain_instr -> BR_IF var
-- On BR_IF reduce production plain_instr -> BR_IF var
-- On BR reduce production plain_instr -> BR_IF var
-- On BLOCK reduce production plain_instr -> BR_IF var
-- On BINARY reduce production plain_instr -> BR_IF var

State 182:
plain_instr -> BR . var [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
-- On VAR shift to state 55
-- On NAT shift to state 56
-- On var shift to state 183

State 183:
plain_instr -> BR var . [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
-- On UNREACHABLE reduce production plain_instr -> BR var
-- On UNARY reduce production plain_instr -> BR var
-- On TEST reduce production plain_instr -> BR var
-- On TEE_LOCAL reduce production plain_instr -> BR var
-- On STORE reduce production plain_instr -> BR var
-- On SET_LOCAL reduce production plain_instr -> BR var
-- On SET_GLOBAL reduce production plain_instr -> BR var
-- On SELECT reduce production plain_instr -> BR var
-- On RPAR reduce production plain_instr -> BR var
-- On RETURN reduce production plain_instr -> BR var
-- On NOP reduce production plain_instr -> BR var
-- On LPAR reduce production plain_instr -> BR var
-- On LOOP reduce production plain_instr -> BR var
-- On LOAD reduce production plain_instr -> BR var
-- On IF reduce production plain_instr -> BR var
-- On GROW_MEMORY reduce production plain_instr -> BR var
-- On GET_LOCAL reduce production plain_instr -> BR var
-- On GET_GLOBAL reduce production plain_instr -> BR var
-- On END reduce production plain_instr -> BR var
-- On ELSE reduce production plain_instr -> BR var
-- On DROP reduce production plain_instr -> BR var
-- On CURRENT_MEMORY reduce production plain_instr -> BR var
-- On CONVERT reduce production plain_instr -> BR var
-- On CONST reduce production plain_instr -> BR var
-- On COMPARE reduce production plain_instr -> BR var
-- On CALL_INDIRECT reduce production plain_instr -> BR var
-- On CALL reduce production plain_instr -> BR var
-- On BR_TABLE reduce production plain_instr -> BR var
-- On BR_IF reduce production plain_instr -> BR var
-- On BR reduce production plain_instr -> BR var
-- On BLOCK reduce production plain_instr -> BR var
-- On BINARY reduce production plain_instr -> BR var

State 184:
block_instr -> BLOCK . labeling_opt block END labeling_end_opt [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
-- On VAR shift to state 3
-- On labeling_opt shift to state 185
-- On bind_var shift to state 199
-- On UNREACHABLE reduce production labeling_opt -> 
-- On UNARY reduce production labeling_opt -> 
-- On TEST reduce production labeling_opt -> 
-- On TEE_LOCAL reduce production labeling_opt -> 
-- On STORE reduce production labeling_opt -> 
-- On SET_LOCAL reduce production labeling_opt -> 
-- On SET_GLOBAL reduce production labeling_opt -> 
-- On SELECT reduce production labeling_opt -> 
-- On RETURN reduce production labeling_opt -> 
-- On NOP reduce production labeling_opt -> 
-- On LPAR reduce production labeling_opt -> 
-- On LOOP reduce production labeling_opt -> 
-- On LOAD reduce production labeling_opt -> 
-- On IF reduce production labeling_opt -> 
-- On GROW_MEMORY reduce production labeling_opt -> 
-- On GET_LOCAL reduce production labeling_opt -> 
-- On GET_GLOBAL reduce production labeling_opt -> 
-- On END reduce production labeling_opt -> 
-- On DROP reduce production labeling_opt -> 
-- On CURRENT_MEMORY reduce production labeling_opt -> 
-- On CONVERT reduce production labeling_opt -> 
-- On CONST reduce production labeling_opt -> 
-- On COMPARE reduce production labeling_opt -> 
-- On CALL_INDIRECT reduce production labeling_opt -> 
-- On CALL reduce production labeling_opt -> 
-- On BR_TABLE reduce production labeling_opt -> 
-- On BR_IF reduce production labeling_opt -> 
-- On BR reduce production labeling_opt -> 
-- On BLOCK reduce production labeling_opt -> 
-- On BINARY reduce production labeling_opt -> 

State 185:
block_instr -> BLOCK labeling_opt . block END labeling_end_opt [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
-- On UNREACHABLE shift to state 124
-- On UNARY shift to state 125
-- On TEST shift to state 126
-- On TEE_LOCAL shift to state 127
-- On STORE shift to state 129
-- On SET_LOCAL shift to state 134
-- On SET_GLOBAL shift to state 136
-- On SELECT shift to state 138
-- On RETURN shift to state 139
-- On NOP shift to state 140
-- On LPAR shift to state 144
-- On LOOP shift to state 155
-- On LOAD shift to state 148
-- On IF shift to state 157
-- On GROW_MEMORY shift to state 159
-- On GET_LOCAL shift to state 160
-- On GET_GLOBAL shift to state 162
-- On DROP shift to state 164
-- On CURRENT_MEMORY shift to state 165
-- On CONVERT shift to state 166
-- On CONST shift to state 167
-- On COMPARE shift to state 172
-- On CALL_INDIRECT shift to state 173
-- On CALL shift to state 175
-- On BR_TABLE shift to state 177
-- On BR_IF shift to state 180
-- On BR shift to state 182
-- On BLOCK shift to state 184
-- On BINARY shift to state 186
-- On plain_instr shift to state 187
-- On instr_list shift to state 188
-- On instr shift to state 189
-- On expr shift to state 191
-- On block_sig shift to state 193
-- On block_instr shift to state 192
-- On block shift to state 195
-- On END reduce production instr_list -> 

State 186:
plain_instr -> BINARY . [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
-- On UNREACHABLE reduce production plain_instr -> BINARY
-- On UNARY reduce production plain_instr -> BINARY
-- On TEST reduce production plain_instr -> BINARY
-- On TEE_LOCAL reduce production plain_instr -> BINARY
-- On STORE reduce production plain_instr -> BINARY
-- On SET_LOCAL reduce production plain_instr -> BINARY
-- On SET_GLOBAL reduce production plain_instr -> BINARY
-- On SELECT reduce production plain_instr -> BINARY
-- On RPAR reduce production plain_instr -> BINARY
-- On RETURN reduce production plain_instr -> BINARY
-- On NOP reduce production plain_instr -> BINARY
-- On LPAR reduce production plain_instr -> BINARY
-- On LOOP reduce production plain_instr -> BINARY
-- On LOAD reduce production plain_instr -> BINARY
-- On IF reduce production plain_instr -> BINARY
-- On GROW_MEMORY reduce production plain_instr -> BINARY
-- On GET_LOCAL reduce production plain_instr -> BINARY
-- On GET_GLOBAL reduce production plain_instr -> BINARY
-- On END reduce production plain_instr -> BINARY
-- On ELSE reduce production plain_instr -> BINARY
-- On DROP reduce production plain_instr -> BINARY
-- On CURRENT_MEMORY reduce production plain_instr -> BINARY
-- On CONVERT reduce production plain_instr -> BINARY
-- On CONST reduce production plain_instr -> BINARY
-- On COMPARE reduce production plain_instr -> BINARY
-- On CALL_INDIRECT reduce production plain_instr -> BINARY
-- On CALL reduce production plain_instr -> BINARY
-- On BR_TABLE reduce production plain_instr -> BINARY
-- On BR_IF reduce production plain_instr -> BINARY
-- On BR reduce production plain_instr -> BINARY
-- On BLOCK reduce production plain_instr -> BINARY
-- On BINARY reduce production plain_instr -> BINARY

State 187:
instr -> plain_instr . [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
-- On UNREACHABLE reduce production instr -> plain_instr
-- On UNARY reduce production instr -> plain_instr
-- On TEST reduce production instr -> plain_instr
-- On TEE_LOCAL reduce production instr -> plain_instr
-- On STORE reduce production instr -> plain_instr
-- On SET_LOCAL reduce production instr -> plain_instr
-- On SET_GLOBAL reduce production instr -> plain_instr
-- On SELECT reduce production instr -> plain_instr
-- On RPAR reduce production instr -> plain_instr
-- On RETURN reduce production instr -> plain_instr
-- On NOP reduce production instr -> plain_instr
-- On LPAR reduce production instr -> plain_instr
-- On LOOP reduce production instr -> plain_instr
-- On LOAD reduce production instr -> plain_instr
-- On IF reduce production instr -> plain_instr
-- On GROW_MEMORY reduce production instr -> plain_instr
-- On GET_LOCAL reduce production instr -> plain_instr
-- On GET_GLOBAL reduce production instr -> plain_instr
-- On END reduce production instr -> plain_instr
-- On ELSE reduce production instr -> plain_instr
-- On DROP reduce production instr -> plain_instr
-- On CURRENT_MEMORY reduce production instr -> plain_instr
-- On CONVERT reduce production instr -> plain_instr
-- On CONST reduce production instr -> plain_instr
-- On COMPARE reduce production instr -> plain_instr
-- On CALL_INDIRECT reduce production instr -> plain_instr
-- On CALL reduce production instr -> plain_instr
-- On BR_TABLE reduce production instr -> plain_instr
-- On BR_IF reduce production instr -> plain_instr
-- On BR reduce production instr -> plain_instr
-- On BLOCK reduce production instr -> plain_instr
-- On BINARY reduce production instr -> plain_instr

State 188:
block -> instr_list . [ RPAR END ELSE ]
-- On RPAR reduce production block -> instr_list
-- On END reduce production block -> instr_list
-- On ELSE reduce production block -> instr_list

State 189:
instr_list -> instr . instr_list [ RPAR END ELSE ]
-- On UNREACHABLE shift to state 124
-- On UNARY shift to state 125
-- On TEST shift to state 126
-- On TEE_LOCAL shift to state 127
-- On STORE shift to state 129
-- On SET_LOCAL shift to state 134
-- On SET_GLOBAL shift to state 136
-- On SELECT shift to state 138
-- On RETURN shift to state 139
-- On NOP shift to state 140
-- On LPAR shift to state 141
-- On LOOP shift to state 155
-- On LOAD shift to state 148
-- On IF shift to state 157
-- On GROW_MEMORY shift to state 159
-- On GET_LOCAL shift to state 160
-- On GET_GLOBAL shift to state 162
-- On DROP shift to state 164
-- On CURRENT_MEMORY shift to state 165
-- On CONVERT shift to state 166
-- On CONST shift to state 167
-- On COMPARE shift to state 172
-- On CALL_INDIRECT shift to state 173
-- On CALL shift to state 175
-- On BR_TABLE shift to state 177
-- On BR_IF shift to state 180
-- On BR shift to state 182
-- On BLOCK shift to state 184
-- On BINARY shift to state 186
-- On plain_instr shift to state 187
-- On instr_list shift to state 190
-- On instr shift to state 189
-- On expr shift to state 191
-- On block_instr shift to state 192
-- On RPAR reduce production instr_list -> 
-- On END reduce production instr_list -> 
-- On ELSE reduce production instr_list -> 

State 190:
instr_list -> instr instr_list . [ RPAR END ELSE ]
-- On RPAR reduce production instr_list -> instr instr_list
-- On END reduce production instr_list -> instr instr_list
-- On ELSE reduce production instr_list -> instr instr_list

State 191:
instr -> expr . [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
-- On UNREACHABLE reduce production instr -> expr
-- On UNARY reduce production instr -> expr
-- On TEST reduce production instr -> expr
-- On TEE_LOCAL reduce production instr -> expr
-- On STORE reduce production instr -> expr
-- On SET_LOCAL reduce production instr -> expr
-- On SET_GLOBAL reduce production instr -> expr
-- On SELECT reduce production instr -> expr
-- On RPAR reduce production instr -> expr
-- On RETURN reduce production instr -> expr
-- On NOP reduce production instr -> expr
-- On LPAR reduce production instr -> expr
-- On LOOP reduce production instr -> expr
-- On LOAD reduce production instr -> expr
-- On IF reduce production instr -> expr
-- On GROW_MEMORY reduce production instr -> expr
-- On GET_LOCAL reduce production instr -> expr
-- On GET_GLOBAL reduce production instr -> expr
-- On END reduce production instr -> expr
-- On ELSE reduce production instr -> expr
-- On DROP reduce production instr -> expr
-- On CURRENT_MEMORY reduce production instr -> expr
-- On CONVERT reduce production instr -> expr
-- On CONST reduce production instr -> expr
-- On COMPARE reduce production instr -> expr
-- On CALL_INDIRECT reduce production instr -> expr
-- On CALL reduce production instr -> expr
-- On BR_TABLE reduce production instr -> expr
-- On BR_IF reduce production instr -> expr
-- On BR reduce production instr -> expr
-- On BLOCK reduce production instr -> expr
-- On BINARY reduce production instr -> expr

State 192:
instr -> block_instr . [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
-- On UNREACHABLE reduce production instr -> block_instr
-- On UNARY reduce production instr -> block_instr
-- On TEST reduce production instr -> block_instr
-- On TEE_LOCAL reduce production instr -> block_instr
-- On STORE reduce production instr -> block_instr
-- On SET_LOCAL reduce production instr -> block_instr
-- On SET_GLOBAL reduce production instr -> block_instr
-- On SELECT reduce production instr -> block_instr
-- On RPAR reduce production instr -> block_instr
-- On RETURN reduce production instr -> block_instr
-- On NOP reduce production instr -> block_instr
-- On LPAR reduce production instr -> block_instr
-- On LOOP reduce production instr -> block_instr
-- On LOAD reduce production instr -> block_instr
-- On IF reduce production instr -> block_instr
-- On GROW_MEMORY reduce production instr -> block_instr
-- On GET_LOCAL reduce production instr -> block_instr
-- On GET_GLOBAL reduce production instr -> block_instr
-- On END reduce production instr -> block_instr
-- On ELSE reduce production instr -> block_instr
-- On DROP reduce production instr -> block_instr
-- On CURRENT_MEMORY reduce production instr -> block_instr
-- On CONVERT reduce production instr -> block_instr
-- On CONST reduce production instr -> block_instr
-- On COMPARE reduce production instr -> block_instr
-- On CALL_INDIRECT reduce production instr -> block_instr
-- On CALL reduce production instr -> block_instr
-- On BR_TABLE reduce production instr -> block_instr
-- On BR_IF reduce production instr -> block_instr
-- On BR reduce production instr -> block_instr
-- On BLOCK reduce production instr -> block_instr
-- On BINARY reduce production instr -> block_instr

State 193:
block -> block_sig . instr_list [ RPAR END ELSE ]
-- On UNREACHABLE shift to state 124
-- On UNARY shift to state 125
-- On TEST shift to state 126
-- On TEE_LOCAL shift to state 127
-- On STORE shift to state 129
-- On SET_LOCAL shift to state 134
-- On SET_GLOBAL shift to state 136
-- On SELECT shift to state 138
-- On RETURN shift to state 139
-- On NOP shift to state 140
-- On LPAR shift to state 141
-- On LOOP shift to state 155
-- On LOAD shift to state 148
-- On IF shift to state 157
-- On GROW_MEMORY shift to state 159
-- On GET_LOCAL shift to state 160
-- On GET_GLOBAL shift to state 162
-- On DROP shift to state 164
-- On CURRENT_MEMORY shift to state 165
-- On CONVERT shift to state 166
-- On CONST shift to state 167
-- On COMPARE shift to state 172
-- On CALL_INDIRECT shift to state 173
-- On CALL shift to state 175
-- On BR_TABLE shift to state 177
-- On BR_IF shift to state 180
-- On BR shift to state 182
-- On BLOCK shift to state 184
-- On BINARY shift to state 186
-- On plain_instr shift to state 187
-- On instr_list shift to state 194
-- On instr shift to state 189
-- On expr shift to state 191
-- On block_instr shift to state 192
-- On RPAR reduce production instr_list -> 
-- On END reduce production instr_list -> 
-- On ELSE reduce production instr_list -> 

State 194:
block -> block_sig instr_list . [ RPAR END ELSE ]
-- On RPAR reduce production block -> block_sig instr_list
-- On END reduce production block -> block_sig instr_list
-- On ELSE reduce production block -> block_sig instr_list

State 195:
block_instr -> BLOCK labeling_opt block . END labeling_end_opt [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
-- On END shift to state 196

State 196:
block_instr -> BLOCK labeling_opt block END . labeling_end_opt [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
-- On VAR shift to state 3
-- On labeling_end_opt shift to state 197
-- On bind_var shift to state 198
-- On UNREACHABLE reduce production labeling_end_opt -> 
-- On UNARY reduce production labeling_end_opt -> 
-- On TEST reduce production labeling_end_opt -> 
-- On TEE_LOCAL reduce production labeling_end_opt -> 
-- On STORE reduce production labeling_end_opt -> 
-- On SET_LOCAL reduce production labeling_end_opt -> 
-- On SET_GLOBAL reduce production labeling_end_opt -> 
-- On SELECT reduce production labeling_end_opt -> 
-- On RPAR reduce production labeling_end_opt -> 
-- On RETURN reduce production labeling_end_opt -> 
-- On NOP reduce production labeling_end_opt -> 
-- On LPAR reduce production labeling_end_opt -> 
-- On LOOP reduce production labeling_end_opt -> 
-- On LOAD reduce production labeling_end_opt -> 
-- On IF reduce production labeling_end_opt -> 
-- On GROW_MEMORY reduce production labeling_end_opt -> 
-- On GET_LOCAL reduce production labeling_end_opt -> 
-- On GET_GLOBAL reduce production labeling_end_opt -> 
-- On END reduce production labeling_end_opt -> 
-- On ELSE reduce production labeling_end_opt -> 
-- On DROP reduce production labeling_end_opt -> 
-- On CURRENT_MEMORY reduce production labeling_end_opt -> 
-- On CONVERT reduce production labeling_end_opt -> 
-- On CONST reduce production labeling_end_opt -> 
-- On COMPARE reduce production labeling_end_opt -> 
-- On CALL_INDIRECT reduce production labeling_end_opt -> 
-- On CALL reduce production labeling_end_opt -> 
-- On BR_TABLE reduce production labeling_end_opt -> 
-- On BR_IF reduce production labeling_end_opt -> 
-- On BR reduce production labeling_end_opt -> 
-- On BLOCK reduce production labeling_end_opt -> 
-- On BINARY reduce production labeling_end_opt -> 

State 197:
block_instr -> BLOCK labeling_opt block END labeling_end_opt . [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
-- On UNREACHABLE reduce production block_instr -> BLOCK labeling_opt block END labeling_end_opt
-- On UNARY reduce production block_instr -> BLOCK labeling_opt block END labeling_end_opt
-- On TEST reduce production block_instr -> BLOCK labeling_opt block END labeling_end_opt
-- On TEE_LOCAL reduce production block_instr -> BLOCK labeling_opt block END labeling_end_opt
-- On STORE reduce production block_instr -> BLOCK labeling_opt block END labeling_end_opt
-- On SET_LOCAL reduce production block_instr -> BLOCK labeling_opt block END labeling_end_opt
-- On SET_GLOBAL reduce production block_instr -> BLOCK labeling_opt block END labeling_end_opt
-- On SELECT reduce production block_instr -> BLOCK labeling_opt block END labeling_end_opt
-- On RPAR reduce production block_instr -> BLOCK labeling_opt block END labeling_end_opt
-- On RETURN reduce production block_instr -> BLOCK labeling_opt block END labeling_end_opt
-- On NOP reduce production block_instr -> BLOCK labeling_opt block END labeling_end_opt
-- On LPAR reduce production block_instr -> BLOCK labeling_opt block END labeling_end_opt
-- On LOOP reduce production block_instr -> BLOCK labeling_opt block END labeling_end_opt
-- On LOAD reduce production block_instr -> BLOCK labeling_opt block END labeling_end_opt
-- On IF reduce production block_instr -> BLOCK labeling_opt block END labeling_end_opt
-- On GROW_MEMORY reduce production block_instr -> BLOCK labeling_opt block END labeling_end_opt
-- On GET_LOCAL reduce production block_instr -> BLOCK labeling_opt block END labeling_end_opt
-- On GET_GLOBAL reduce production block_instr -> BLOCK labeling_opt block END labeling_end_opt
-- On END reduce production block_instr -> BLOCK labeling_opt block END labeling_end_opt
-- On ELSE reduce production block_instr -> BLOCK labeling_opt block END labeling_end_opt
-- On DROP reduce production block_instr -> BLOCK labeling_opt block END labeling_end_opt
-- On CURRENT_MEMORY reduce production block_instr -> BLOCK labeling_opt block END labeling_end_opt
-- On CONVERT reduce production block_instr -> BLOCK labeling_opt block END labeling_end_opt
-- On CONST reduce production block_instr -> BLOCK labeling_opt block END labeling_end_opt
-- On COMPARE reduce production block_instr -> BLOCK labeling_opt block END labeling_end_opt
-- On CALL_INDIRECT reduce production block_instr -> BLOCK labeling_opt block END labeling_end_opt
-- On CALL reduce production block_instr -> BLOCK labeling_opt block END labeling_end_opt
-- On BR_TABLE reduce production block_instr -> BLOCK labeling_opt block END labeling_end_opt
-- On BR_IF reduce production block_instr -> BLOCK labeling_opt block END labeling_end_opt
-- On BR reduce production block_instr -> BLOCK labeling_opt block END labeling_end_opt
-- On BLOCK reduce production block_instr -> BLOCK labeling_opt block END labeling_end_opt
-- On BINARY reduce production block_instr -> BLOCK labeling_opt block END labeling_end_opt

State 198:
labeling_end_opt -> bind_var . [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
-- On UNREACHABLE reduce production labeling_end_opt -> bind_var
-- On UNARY reduce production labeling_end_opt -> bind_var
-- On TEST reduce production labeling_end_opt -> bind_var
-- On TEE_LOCAL reduce production labeling_end_opt -> bind_var
-- On STORE reduce production labeling_end_opt -> bind_var
-- On SET_LOCAL reduce production labeling_end_opt -> bind_var
-- On SET_GLOBAL reduce production labeling_end_opt -> bind_var
-- On SELECT reduce production labeling_end_opt -> bind_var
-- On RPAR reduce production labeling_end_opt -> bind_var
-- On RETURN reduce production labeling_end_opt -> bind_var
-- On NOP reduce production labeling_end_opt -> bind_var
-- On LPAR reduce production labeling_end_opt -> bind_var
-- On LOOP reduce production labeling_end_opt -> bind_var
-- On LOAD reduce production labeling_end_opt -> bind_var
-- On IF reduce production labeling_end_opt -> bind_var
-- On GROW_MEMORY reduce production labeling_end_opt -> bind_var
-- On GET_LOCAL reduce production labeling_end_opt -> bind_var
-- On GET_GLOBAL reduce production labeling_end_opt -> bind_var
-- On END reduce production labeling_end_opt -> bind_var
-- On ELSE reduce production labeling_end_opt -> bind_var
-- On DROP reduce production labeling_end_opt -> bind_var
-- On CURRENT_MEMORY reduce production labeling_end_opt -> bind_var
-- On CONVERT reduce production labeling_end_opt -> bind_var
-- On CONST reduce production labeling_end_opt -> bind_var
-- On COMPARE reduce production labeling_end_opt -> bind_var
-- On CALL_INDIRECT reduce production labeling_end_opt -> bind_var
-- On CALL reduce production labeling_end_opt -> bind_var
-- On BR_TABLE reduce production labeling_end_opt -> bind_var
-- On BR_IF reduce production labeling_end_opt -> bind_var
-- On BR reduce production labeling_end_opt -> bind_var
-- On BLOCK reduce production labeling_end_opt -> bind_var
-- On BINARY reduce production labeling_end_opt -> bind_var

State 199:
labeling_opt -> bind_var . [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
-- On UNREACHABLE reduce production labeling_opt -> bind_var
-- On UNARY reduce production labeling_opt -> bind_var
-- On TEST reduce production labeling_opt -> bind_var
-- On TEE_LOCAL reduce production labeling_opt -> bind_var
-- On STORE reduce production labeling_opt -> bind_var
-- On SET_LOCAL reduce production labeling_opt -> bind_var
-- On SET_GLOBAL reduce production labeling_opt -> bind_var
-- On SELECT reduce production labeling_opt -> bind_var
-- On RPAR reduce production labeling_opt -> bind_var
-- On RETURN reduce production labeling_opt -> bind_var
-- On NOP reduce production labeling_opt -> bind_var
-- On LPAR reduce production labeling_opt -> bind_var
-- On LOOP reduce production labeling_opt -> bind_var
-- On LOAD reduce production labeling_opt -> bind_var
-- On IF reduce production labeling_opt -> bind_var
-- On GROW_MEMORY reduce production labeling_opt -> bind_var
-- On GET_LOCAL reduce production labeling_opt -> bind_var
-- On GET_GLOBAL reduce production labeling_opt -> bind_var
-- On END reduce production labeling_opt -> bind_var
-- On ELSE reduce production labeling_opt -> bind_var
-- On DROP reduce production labeling_opt -> bind_var
-- On CURRENT_MEMORY reduce production labeling_opt -> bind_var
-- On CONVERT reduce production labeling_opt -> bind_var
-- On CONST reduce production labeling_opt -> bind_var
-- On COMPARE reduce production labeling_opt -> bind_var
-- On CALL_INDIRECT reduce production labeling_opt -> bind_var
-- On CALL reduce production labeling_opt -> bind_var
-- On BR_TABLE reduce production labeling_opt -> bind_var
-- On BR_IF reduce production labeling_opt -> bind_var
-- On BR reduce production labeling_opt -> bind_var
-- On BLOCK reduce production labeling_opt -> bind_var
-- On BINARY reduce production labeling_opt -> bind_var

State 200:
block_instr -> IF labeling_opt block . END labeling_end_opt [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
block_instr -> IF labeling_opt block . ELSE labeling_end_opt instr_list END labeling_end_opt [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
-- On END shift to state 201
-- On ELSE shift to state 203

State 201:
block_instr -> IF labeling_opt block END . labeling_end_opt [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
-- On VAR shift to state 3
-- On labeling_end_opt shift to state 202
-- On bind_var shift to state 198
-- On UNREACHABLE reduce production labeling_end_opt -> 
-- On UNARY reduce production labeling_end_opt -> 
-- On TEST reduce production labeling_end_opt -> 
-- On TEE_LOCAL reduce production labeling_end_opt -> 
-- On STORE reduce production labeling_end_opt -> 
-- On SET_LOCAL reduce production labeling_end_opt -> 
-- On SET_GLOBAL reduce production labeling_end_opt -> 
-- On SELECT reduce production labeling_end_opt -> 
-- On RPAR reduce production labeling_end_opt -> 
-- On RETURN reduce production labeling_end_opt -> 
-- On NOP reduce production labeling_end_opt -> 
-- On LPAR reduce production labeling_end_opt -> 
-- On LOOP reduce production labeling_end_opt -> 
-- On LOAD reduce production labeling_end_opt -> 
-- On IF reduce production labeling_end_opt -> 
-- On GROW_MEMORY reduce production labeling_end_opt -> 
-- On GET_LOCAL reduce production labeling_end_opt -> 
-- On GET_GLOBAL reduce production labeling_end_opt -> 
-- On END reduce production labeling_end_opt -> 
-- On ELSE reduce production labeling_end_opt -> 
-- On DROP reduce production labeling_end_opt -> 
-- On CURRENT_MEMORY reduce production labeling_end_opt -> 
-- On CONVERT reduce production labeling_end_opt -> 
-- On CONST reduce production labeling_end_opt -> 
-- On COMPARE reduce production labeling_end_opt -> 
-- On CALL_INDIRECT reduce production labeling_end_opt -> 
-- On CALL reduce production labeling_end_opt -> 
-- On BR_TABLE reduce production labeling_end_opt -> 
-- On BR_IF reduce production labeling_end_opt -> 
-- On BR reduce production labeling_end_opt -> 
-- On BLOCK reduce production labeling_end_opt -> 
-- On BINARY reduce production labeling_end_opt -> 

State 202:
block_instr -> IF labeling_opt block END labeling_end_opt . [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
-- On UNREACHABLE reduce production block_instr -> IF labeling_opt block END labeling_end_opt
-- On UNARY reduce production block_instr -> IF labeling_opt block END labeling_end_opt
-- On TEST reduce production block_instr -> IF labeling_opt block END labeling_end_opt
-- On TEE_LOCAL reduce production block_instr -> IF labeling_opt block END labeling_end_opt
-- On STORE reduce production block_instr -> IF labeling_opt block END labeling_end_opt
-- On SET_LOCAL reduce production block_instr -> IF labeling_opt block END labeling_end_opt
-- On SET_GLOBAL reduce production block_instr -> IF labeling_opt block END labeling_end_opt
-- On SELECT reduce production block_instr -> IF labeling_opt block END labeling_end_opt
-- On RPAR reduce production block_instr -> IF labeling_opt block END labeling_end_opt
-- On RETURN reduce production block_instr -> IF labeling_opt block END labeling_end_opt
-- On NOP reduce production block_instr -> IF labeling_opt block END labeling_end_opt
-- On LPAR reduce production block_instr -> IF labeling_opt block END labeling_end_opt
-- On LOOP reduce production block_instr -> IF labeling_opt block END labeling_end_opt
-- On LOAD reduce production block_instr -> IF labeling_opt block END labeling_end_opt
-- On IF reduce production block_instr -> IF labeling_opt block END labeling_end_opt
-- On GROW_MEMORY reduce production block_instr -> IF labeling_opt block END labeling_end_opt
-- On GET_LOCAL reduce production block_instr -> IF labeling_opt block END labeling_end_opt
-- On GET_GLOBAL reduce production block_instr -> IF labeling_opt block END labeling_end_opt
-- On END reduce production block_instr -> IF labeling_opt block END labeling_end_opt
-- On ELSE reduce production block_instr -> IF labeling_opt block END labeling_end_opt
-- On DROP reduce production block_instr -> IF labeling_opt block END labeling_end_opt
-- On CURRENT_MEMORY reduce production block_instr -> IF labeling_opt block END labeling_end_opt
-- On CONVERT reduce production block_instr -> IF labeling_opt block END labeling_end_opt
-- On CONST reduce production block_instr -> IF labeling_opt block END labeling_end_opt
-- On COMPARE reduce production block_instr -> IF labeling_opt block END labeling_end_opt
-- On CALL_INDIRECT reduce production block_instr -> IF labeling_opt block END labeling_end_opt
-- On CALL reduce production block_instr -> IF labeling_opt block END labeling_end_opt
-- On BR_TABLE reduce production block_instr -> IF labeling_opt block END labeling_end_opt
-- On BR_IF reduce production block_instr -> IF labeling_opt block END labeling_end_opt
-- On BR reduce production block_instr -> IF labeling_opt block END labeling_end_opt
-- On BLOCK reduce production block_instr -> IF labeling_opt block END labeling_end_opt
-- On BINARY reduce production block_instr -> IF labeling_opt block END labeling_end_opt

State 203:
block_instr -> IF labeling_opt block ELSE . labeling_end_opt instr_list END labeling_end_opt [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
-- On VAR shift to state 3
-- On labeling_end_opt shift to state 204
-- On bind_var shift to state 198
-- On UNREACHABLE reduce production labeling_end_opt -> 
-- On UNARY reduce production labeling_end_opt -> 
-- On TEST reduce production labeling_end_opt -> 
-- On TEE_LOCAL reduce production labeling_end_opt -> 
-- On STORE reduce production labeling_end_opt -> 
-- On SET_LOCAL reduce production labeling_end_opt -> 
-- On SET_GLOBAL reduce production labeling_end_opt -> 
-- On SELECT reduce production labeling_end_opt -> 
-- On RETURN reduce production labeling_end_opt -> 
-- On NOP reduce production labeling_end_opt -> 
-- On LPAR reduce production labeling_end_opt -> 
-- On LOOP reduce production labeling_end_opt -> 
-- On LOAD reduce production labeling_end_opt -> 
-- On IF reduce production labeling_end_opt -> 
-- On GROW_MEMORY reduce production labeling_end_opt -> 
-- On GET_LOCAL reduce production labeling_end_opt -> 
-- On GET_GLOBAL reduce production labeling_end_opt -> 
-- On END reduce production labeling_end_opt -> 
-- On DROP reduce production labeling_end_opt -> 
-- On CURRENT_MEMORY reduce production labeling_end_opt -> 
-- On CONVERT reduce production labeling_end_opt -> 
-- On CONST reduce production labeling_end_opt -> 
-- On COMPARE reduce production labeling_end_opt -> 
-- On CALL_INDIRECT reduce production labeling_end_opt -> 
-- On CALL reduce production labeling_end_opt -> 
-- On BR_TABLE reduce production labeling_end_opt -> 
-- On BR_IF reduce production labeling_end_opt -> 
-- On BR reduce production labeling_end_opt -> 
-- On BLOCK reduce production labeling_end_opt -> 
-- On BINARY reduce production labeling_end_opt -> 

State 204:
block_instr -> IF labeling_opt block ELSE labeling_end_opt . instr_list END labeling_end_opt [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
-- On UNREACHABLE shift to state 124
-- On UNARY shift to state 125
-- On TEST shift to state 126
-- On TEE_LOCAL shift to state 127
-- On STORE shift to state 129
-- On SET_LOCAL shift to state 134
-- On SET_GLOBAL shift to state 136
-- On SELECT shift to state 138
-- On RETURN shift to state 139
-- On NOP shift to state 140
-- On LPAR shift to state 141
-- On LOOP shift to state 155
-- On LOAD shift to state 148
-- On IF shift to state 157
-- On GROW_MEMORY shift to state 159
-- On GET_LOCAL shift to state 160
-- On GET_GLOBAL shift to state 162
-- On DROP shift to state 164
-- On CURRENT_MEMORY shift to state 165
-- On CONVERT shift to state 166
-- On CONST shift to state 167
-- On COMPARE shift to state 172
-- On CALL_INDIRECT shift to state 173
-- On CALL shift to state 175
-- On BR_TABLE shift to state 177
-- On BR_IF shift to state 180
-- On BR shift to state 182
-- On BLOCK shift to state 184
-- On BINARY shift to state 186
-- On plain_instr shift to state 187
-- On instr_list shift to state 205
-- On instr shift to state 189
-- On expr shift to state 191
-- On block_instr shift to state 192
-- On END reduce production instr_list -> 

State 205:
block_instr -> IF labeling_opt block ELSE labeling_end_opt instr_list . END labeling_end_opt [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
-- On END shift to state 206

State 206:
block_instr -> IF labeling_opt block ELSE labeling_end_opt instr_list END . labeling_end_opt [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
-- On VAR shift to state 3
-- On labeling_end_opt shift to state 207
-- On bind_var shift to state 198
-- On UNREACHABLE reduce production labeling_end_opt -> 
-- On UNARY reduce production labeling_end_opt -> 
-- On TEST reduce production labeling_end_opt -> 
-- On TEE_LOCAL reduce production labeling_end_opt -> 
-- On STORE reduce production labeling_end_opt -> 
-- On SET_LOCAL reduce production labeling_end_opt -> 
-- On SET_GLOBAL reduce production labeling_end_opt -> 
-- On SELECT reduce production labeling_end_opt -> 
-- On RPAR reduce production labeling_end_opt -> 
-- On RETURN reduce production labeling_end_opt -> 
-- On NOP reduce production labeling_end_opt -> 
-- On LPAR reduce production labeling_end_opt -> 
-- On LOOP reduce production labeling_end_opt -> 
-- On LOAD reduce production labeling_end_opt -> 
-- On IF reduce production labeling_end_opt -> 
-- On GROW_MEMORY reduce production labeling_end_opt -> 
-- On GET_LOCAL reduce production labeling_end_opt -> 
-- On GET_GLOBAL reduce production labeling_end_opt -> 
-- On END reduce production labeling_end_opt -> 
-- On ELSE reduce production labeling_end_opt -> 
-- On DROP reduce production labeling_end_opt -> 
-- On CURRENT_MEMORY reduce production labeling_end_opt -> 
-- On CONVERT reduce production labeling_end_opt -> 
-- On CONST reduce production labeling_end_opt -> 
-- On COMPARE reduce production labeling_end_opt -> 
-- On CALL_INDIRECT reduce production labeling_end_opt -> 
-- On CALL reduce production labeling_end_opt -> 
-- On BR_TABLE reduce production labeling_end_opt -> 
-- On BR_IF reduce production labeling_end_opt -> 
-- On BR reduce production labeling_end_opt -> 
-- On BLOCK reduce production labeling_end_opt -> 
-- On BINARY reduce production labeling_end_opt -> 

State 207:
block_instr -> IF labeling_opt block ELSE labeling_end_opt instr_list END labeling_end_opt . [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
-- On UNREACHABLE reduce production block_instr -> IF labeling_opt block ELSE labeling_end_opt instr_list END labeling_end_opt
-- On UNARY reduce production block_instr -> IF labeling_opt block ELSE labeling_end_opt instr_list END labeling_end_opt
-- On TEST reduce production block_instr -> IF labeling_opt block ELSE labeling_end_opt instr_list END labeling_end_opt
-- On TEE_LOCAL reduce production block_instr -> IF labeling_opt block ELSE labeling_end_opt instr_list END labeling_end_opt
-- On STORE reduce production block_instr -> IF labeling_opt block ELSE labeling_end_opt instr_list END labeling_end_opt
-- On SET_LOCAL reduce production block_instr -> IF labeling_opt block ELSE labeling_end_opt instr_list END labeling_end_opt
-- On SET_GLOBAL reduce production block_instr -> IF labeling_opt block ELSE labeling_end_opt instr_list END labeling_end_opt
-- On SELECT reduce production block_instr -> IF labeling_opt block ELSE labeling_end_opt instr_list END labeling_end_opt
-- On RPAR reduce production block_instr -> IF labeling_opt block ELSE labeling_end_opt instr_list END labeling_end_opt
-- On RETURN reduce production block_instr -> IF labeling_opt block ELSE labeling_end_opt instr_list END labeling_end_opt
-- On NOP reduce production block_instr -> IF labeling_opt block ELSE labeling_end_opt instr_list END labeling_end_opt
-- On LPAR reduce production block_instr -> IF labeling_opt block ELSE labeling_end_opt instr_list END labeling_end_opt
-- On LOOP reduce production block_instr -> IF labeling_opt block ELSE labeling_end_opt instr_list END labeling_end_opt
-- On LOAD reduce production block_instr -> IF labeling_opt block ELSE labeling_end_opt instr_list END labeling_end_opt
-- On IF reduce production block_instr -> IF labeling_opt block ELSE labeling_end_opt instr_list END labeling_end_opt
-- On GROW_MEMORY reduce production block_instr -> IF labeling_opt block ELSE labeling_end_opt instr_list END labeling_end_opt
-- On GET_LOCAL reduce production block_instr -> IF labeling_opt block ELSE labeling_end_opt instr_list END labeling_end_opt
-- On GET_GLOBAL reduce production block_instr -> IF labeling_opt block ELSE labeling_end_opt instr_list END labeling_end_opt
-- On END reduce production block_instr -> IF labeling_opt block ELSE labeling_end_opt instr_list END labeling_end_opt
-- On ELSE reduce production block_instr -> IF labeling_opt block ELSE labeling_end_opt instr_list END labeling_end_opt
-- On DROP reduce production block_instr -> IF labeling_opt block ELSE labeling_end_opt instr_list END labeling_end_opt
-- On CURRENT_MEMORY reduce production block_instr -> IF labeling_opt block ELSE labeling_end_opt instr_list END labeling_end_opt
-- On CONVERT reduce production block_instr -> IF labeling_opt block ELSE labeling_end_opt instr_list END labeling_end_opt
-- On CONST reduce production block_instr -> IF labeling_opt block ELSE labeling_end_opt instr_list END labeling_end_opt
-- On COMPARE reduce production block_instr -> IF labeling_opt block ELSE labeling_end_opt instr_list END labeling_end_opt
-- On CALL_INDIRECT reduce production block_instr -> IF labeling_opt block ELSE labeling_end_opt instr_list END labeling_end_opt
-- On CALL reduce production block_instr -> IF labeling_opt block ELSE labeling_end_opt instr_list END labeling_end_opt
-- On BR_TABLE reduce production block_instr -> IF labeling_opt block ELSE labeling_end_opt instr_list END labeling_end_opt
-- On BR_IF reduce production block_instr -> IF labeling_opt block ELSE labeling_end_opt instr_list END labeling_end_opt
-- On BR reduce production block_instr -> IF labeling_opt block ELSE labeling_end_opt instr_list END labeling_end_opt
-- On BLOCK reduce production block_instr -> IF labeling_opt block ELSE labeling_end_opt instr_list END labeling_end_opt
-- On BINARY reduce production block_instr -> IF labeling_opt block ELSE labeling_end_opt instr_list END labeling_end_opt

State 208:
block_instr -> LOOP labeling_opt block . END labeling_end_opt [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
-- On END shift to state 209

State 209:
block_instr -> LOOP labeling_opt block END . labeling_end_opt [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
-- On VAR shift to state 3
-- On labeling_end_opt shift to state 210
-- On bind_var shift to state 198
-- On UNREACHABLE reduce production labeling_end_opt -> 
-- On UNARY reduce production labeling_end_opt -> 
-- On TEST reduce production labeling_end_opt -> 
-- On TEE_LOCAL reduce production labeling_end_opt -> 
-- On STORE reduce production labeling_end_opt -> 
-- On SET_LOCAL reduce production labeling_end_opt -> 
-- On SET_GLOBAL reduce production labeling_end_opt -> 
-- On SELECT reduce production labeling_end_opt -> 
-- On RPAR reduce production labeling_end_opt -> 
-- On RETURN reduce production labeling_end_opt -> 
-- On NOP reduce production labeling_end_opt -> 
-- On LPAR reduce production labeling_end_opt -> 
-- On LOOP reduce production labeling_end_opt -> 
-- On LOAD reduce production labeling_end_opt -> 
-- On IF reduce production labeling_end_opt -> 
-- On GROW_MEMORY reduce production labeling_end_opt -> 
-- On GET_LOCAL reduce production labeling_end_opt -> 
-- On GET_GLOBAL reduce production labeling_end_opt -> 
-- On END reduce production labeling_end_opt -> 
-- On ELSE reduce production labeling_end_opt -> 
-- On DROP reduce production labeling_end_opt -> 
-- On CURRENT_MEMORY reduce production labeling_end_opt -> 
-- On CONVERT reduce production labeling_end_opt -> 
-- On CONST reduce production labeling_end_opt -> 
-- On COMPARE reduce production labeling_end_opt -> 
-- On CALL_INDIRECT reduce production labeling_end_opt -> 
-- On CALL reduce production labeling_end_opt -> 
-- On BR_TABLE reduce production labeling_end_opt -> 
-- On BR_IF reduce production labeling_end_opt -> 
-- On BR reduce production labeling_end_opt -> 
-- On BLOCK reduce production labeling_end_opt -> 
-- On BINARY reduce production labeling_end_opt -> 

State 210:
block_instr -> LOOP labeling_opt block END labeling_end_opt . [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
-- On UNREACHABLE reduce production block_instr -> LOOP labeling_opt block END labeling_end_opt
-- On UNARY reduce production block_instr -> LOOP labeling_opt block END labeling_end_opt
-- On TEST reduce production block_instr -> LOOP labeling_opt block END labeling_end_opt
-- On TEE_LOCAL reduce production block_instr -> LOOP labeling_opt block END labeling_end_opt
-- On STORE reduce production block_instr -> LOOP labeling_opt block END labeling_end_opt
-- On SET_LOCAL reduce production block_instr -> LOOP labeling_opt block END labeling_end_opt
-- On SET_GLOBAL reduce production block_instr -> LOOP labeling_opt block END labeling_end_opt
-- On SELECT reduce production block_instr -> LOOP labeling_opt block END labeling_end_opt
-- On RPAR reduce production block_instr -> LOOP labeling_opt block END labeling_end_opt
-- On RETURN reduce production block_instr -> LOOP labeling_opt block END labeling_end_opt
-- On NOP reduce production block_instr -> LOOP labeling_opt block END labeling_end_opt
-- On LPAR reduce production block_instr -> LOOP labeling_opt block END labeling_end_opt
-- On LOOP reduce production block_instr -> LOOP labeling_opt block END labeling_end_opt
-- On LOAD reduce production block_instr -> LOOP labeling_opt block END labeling_end_opt
-- On IF reduce production block_instr -> LOOP labeling_opt block END labeling_end_opt
-- On GROW_MEMORY reduce production block_instr -> LOOP labeling_opt block END labeling_end_opt
-- On GET_LOCAL reduce production block_instr -> LOOP labeling_opt block END labeling_end_opt
-- On GET_GLOBAL reduce production block_instr -> LOOP labeling_opt block END labeling_end_opt
-- On END reduce production block_instr -> LOOP labeling_opt block END labeling_end_opt
-- On ELSE reduce production block_instr -> LOOP labeling_opt block END labeling_end_opt
-- On DROP reduce production block_instr -> LOOP labeling_opt block END labeling_end_opt
-- On CURRENT_MEMORY reduce production block_instr -> LOOP labeling_opt block END labeling_end_opt
-- On CONVERT reduce production block_instr -> LOOP labeling_opt block END labeling_end_opt
-- On CONST reduce production block_instr -> LOOP labeling_opt block END labeling_end_opt
-- On COMPARE reduce production block_instr -> LOOP labeling_opt block END labeling_end_opt
-- On CALL_INDIRECT reduce production block_instr -> LOOP labeling_opt block END labeling_end_opt
-- On CALL reduce production block_instr -> LOOP labeling_opt block END labeling_end_opt
-- On BR_TABLE reduce production block_instr -> LOOP labeling_opt block END labeling_end_opt
-- On BR_IF reduce production block_instr -> LOOP labeling_opt block END labeling_end_opt
-- On BR reduce production block_instr -> LOOP labeling_opt block END labeling_end_opt
-- On BLOCK reduce production block_instr -> LOOP labeling_opt block END labeling_end_opt
-- On BINARY reduce production block_instr -> LOOP labeling_opt block END labeling_end_opt

State 211:
if_ -> LPAR THEN instr_list . RPAR LPAR ELSE instr_list RPAR [ RPAR ]
if_ -> LPAR THEN instr_list . RPAR [ RPAR ]
-- On RPAR shift to state 212

State 212:
if_ -> LPAR THEN instr_list RPAR . LPAR ELSE instr_list RPAR [ RPAR ]
if_ -> LPAR THEN instr_list RPAR . [ RPAR ]
-- On LPAR shift to state 213
-- On RPAR reduce production if_ -> LPAR THEN instr_list RPAR

State 213:
if_ -> LPAR THEN instr_list RPAR LPAR . ELSE instr_list RPAR [ RPAR ]
-- On ELSE shift to state 214

State 214:
if_ -> LPAR THEN instr_list RPAR LPAR ELSE . instr_list RPAR [ RPAR ]
-- On UNREACHABLE shift to state 124
-- On UNARY shift to state 125
-- On TEST shift to state 126
-- On TEE_LOCAL shift to state 127
-- On STORE shift to state 129
-- On SET_LOCAL shift to state 134
-- On SET_GLOBAL shift to state 136
-- On SELECT shift to state 138
-- On RETURN shift to state 139
-- On NOP shift to state 140
-- On LPAR shift to state 141
-- On LOOP shift to state 155
-- On LOAD shift to state 148
-- On IF shift to state 157
-- On GROW_MEMORY shift to state 159
-- On GET_LOCAL shift to state 160
-- On GET_GLOBAL shift to state 162
-- On DROP shift to state 164
-- On CURRENT_MEMORY shift to state 165
-- On CONVERT shift to state 166
-- On CONST shift to state 167
-- On COMPARE shift to state 172
-- On CALL_INDIRECT shift to state 173
-- On CALL shift to state 175
-- On BR_TABLE shift to state 177
-- On BR_IF shift to state 180
-- On BR shift to state 182
-- On BLOCK shift to state 184
-- On BINARY shift to state 186
-- On plain_instr shift to state 187
-- On instr_list shift to state 215
-- On instr shift to state 189
-- On expr shift to state 191
-- On block_instr shift to state 192
-- On RPAR reduce production instr_list -> 

State 215:
if_ -> LPAR THEN instr_list RPAR LPAR ELSE instr_list . RPAR [ RPAR ]
-- On RPAR shift to state 216

State 216:
if_ -> LPAR THEN instr_list RPAR LPAR ELSE instr_list RPAR . [ RPAR ]
-- On RPAR reduce production if_ -> LPAR THEN instr_list RPAR LPAR ELSE instr_list RPAR

State 217:
expr1 -> BLOCK . labeling_opt block [ RPAR ]
-- On VAR shift to state 3
-- On labeling_opt shift to state 218
-- On bind_var shift to state 199
-- On UNREACHABLE reduce production labeling_opt -> 
-- On UNARY reduce production labeling_opt -> 
-- On TEST reduce production labeling_opt -> 
-- On TEE_LOCAL reduce production labeling_opt -> 
-- On STORE reduce production labeling_opt -> 
-- On SET_LOCAL reduce production labeling_opt -> 
-- On SET_GLOBAL reduce production labeling_opt -> 
-- On SELECT reduce production labeling_opt -> 
-- On RPAR reduce production labeling_opt -> 
-- On RETURN reduce production labeling_opt -> 
-- On NOP reduce production labeling_opt -> 
-- On LPAR reduce production labeling_opt -> 
-- On LOOP reduce production labeling_opt -> 
-- On LOAD reduce production labeling_opt -> 
-- On IF reduce production labeling_opt -> 
-- On GROW_MEMORY reduce production labeling_opt -> 
-- On GET_LOCAL reduce production labeling_opt -> 
-- On GET_GLOBAL reduce production labeling_opt -> 
-- On DROP reduce production labeling_opt -> 
-- On CURRENT_MEMORY reduce production labeling_opt -> 
-- On CONVERT reduce production labeling_opt -> 
-- On CONST reduce production labeling_opt -> 
-- On COMPARE reduce production labeling_opt -> 
-- On CALL_INDIRECT reduce production labeling_opt -> 
-- On CALL reduce production labeling_opt -> 
-- On BR_TABLE reduce production labeling_opt -> 
-- On BR_IF reduce production labeling_opt -> 
-- On BR reduce production labeling_opt -> 
-- On BLOCK reduce production labeling_opt -> 
-- On BINARY reduce production labeling_opt -> 

State 218:
expr1 -> BLOCK labeling_opt . block [ RPAR ]
-- On UNREACHABLE shift to state 124
-- On UNARY shift to state 125
-- On TEST shift to state 126
-- On TEE_LOCAL shift to state 127
-- On STORE shift to state 129
-- On SET_LOCAL shift to state 134
-- On SET_GLOBAL shift to state 136
-- On SELECT shift to state 138
-- On RETURN shift to state 139
-- On NOP shift to state 140
-- On LPAR shift to state 144
-- On LOOP shift to state 155
-- On LOAD shift to state 148
-- On IF shift to state 157
-- On GROW_MEMORY shift to state 159
-- On GET_LOCAL shift to state 160
-- On GET_GLOBAL shift to state 162
-- On DROP shift to state 164
-- On CURRENT_MEMORY shift to state 165
-- On CONVERT shift to state 166
-- On CONST shift to state 167
-- On COMPARE shift to state 172
-- On CALL_INDIRECT shift to state 173
-- On CALL shift to state 175
-- On BR_TABLE shift to state 177
-- On BR_IF shift to state 180
-- On BR shift to state 182
-- On BLOCK shift to state 184
-- On BINARY shift to state 186
-- On plain_instr shift to state 187
-- On instr_list shift to state 188
-- On instr shift to state 189
-- On expr shift to state 191
-- On block_sig shift to state 193
-- On block_instr shift to state 192
-- On block shift to state 219
-- On RPAR reduce production instr_list -> 

State 219:
expr1 -> BLOCK labeling_opt block . [ RPAR ]
-- On RPAR reduce production expr1 -> BLOCK labeling_opt block

State 220:
expr1 -> plain_instr . expr_list [ RPAR ]
-- On LPAR shift to state 141
-- On expr_list shift to state 221
-- On expr shift to state 222
-- On RPAR reduce production expr_list -> 

State 221:
expr1 -> plain_instr expr_list . [ RPAR ]
-- On RPAR reduce production expr1 -> plain_instr expr_list

State 222:
expr_list -> expr . expr_list [ RPAR ]
-- On LPAR shift to state 141
-- On expr_list shift to state 223
-- On expr shift to state 222
-- On RPAR reduce production expr_list -> 

State 223:
expr_list -> expr expr_list . [ RPAR ]
-- On RPAR reduce production expr_list -> expr expr_list

State 224:
expr -> LPAR expr1 . RPAR [ VAR UNREACHABLE UNARY TEST TEE_LOCAL STRING STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP NAT LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
-- On RPAR shift to state 225

State 225:
expr -> LPAR expr1 RPAR . [ VAR UNREACHABLE UNARY TEST TEE_LOCAL STRING STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP NAT LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL END ELSE DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
-- On VAR reduce production expr -> LPAR expr1 RPAR
-- On UNREACHABLE reduce production expr -> LPAR expr1 RPAR
-- On UNARY reduce production expr -> LPAR expr1 RPAR
-- On TEST reduce production expr -> LPAR expr1 RPAR
-- On TEE_LOCAL reduce production expr -> LPAR expr1 RPAR
-- On STRING reduce production expr -> LPAR expr1 RPAR
-- On STORE reduce production expr -> LPAR expr1 RPAR
-- On SET_LOCAL reduce production expr -> LPAR expr1 RPAR
-- On SET_GLOBAL reduce production expr -> LPAR expr1 RPAR
-- On SELECT reduce production expr -> LPAR expr1 RPAR
-- On RPAR reduce production expr -> LPAR expr1 RPAR
-- On RETURN reduce production expr -> LPAR expr1 RPAR
-- On NOP reduce production expr -> LPAR expr1 RPAR
-- On NAT reduce production expr -> LPAR expr1 RPAR
-- On LPAR reduce production expr -> LPAR expr1 RPAR
-- On LOOP reduce production expr -> LPAR expr1 RPAR
-- On LOAD reduce production expr -> LPAR expr1 RPAR
-- On IF reduce production expr -> LPAR expr1 RPAR
-- On GROW_MEMORY reduce production expr -> LPAR expr1 RPAR
-- On GET_LOCAL reduce production expr -> LPAR expr1 RPAR
-- On GET_GLOBAL reduce production expr -> LPAR expr1 RPAR
-- On END reduce production expr -> LPAR expr1 RPAR
-- On ELSE reduce production expr -> LPAR expr1 RPAR
-- On DROP reduce production expr -> LPAR expr1 RPAR
-- On CURRENT_MEMORY reduce production expr -> LPAR expr1 RPAR
-- On CONVERT reduce production expr -> LPAR expr1 RPAR
-- On CONST reduce production expr -> LPAR expr1 RPAR
-- On COMPARE reduce production expr -> LPAR expr1 RPAR
-- On CALL_INDIRECT reduce production expr -> LPAR expr1 RPAR
-- On CALL reduce production expr -> LPAR expr1 RPAR
-- On BR_TABLE reduce production expr -> LPAR expr1 RPAR
-- On BR_IF reduce production expr -> LPAR expr1 RPAR
-- On BR reduce production expr -> LPAR expr1 RPAR
-- On BLOCK reduce production expr -> LPAR expr1 RPAR
-- On BINARY reduce production expr -> LPAR expr1 RPAR

State 226:
expr1 -> IF labeling_opt if_block . [ RPAR ]
-- On RPAR reduce production expr1 -> IF labeling_opt if_block

State 227:
if_block -> if_ . [ RPAR ]
-- On RPAR reduce production if_block -> if_

State 228:
if_ -> expr . if_ [ RPAR ]
-- On LPAR shift to state 229
-- On if_ shift to state 230
-- On expr shift to state 228

State 229:
expr -> LPAR . expr1 RPAR [ LPAR ]
if_ -> LPAR . THEN instr_list RPAR LPAR ELSE instr_list RPAR [ RPAR ]
if_ -> LPAR . THEN instr_list RPAR [ RPAR ]
-- On UNREACHABLE shift to state 124
-- On UNARY shift to state 125
-- On THEN shift to state 154
-- On TEST shift to state 126
-- On TEE_LOCAL shift to state 127
-- On STORE shift to state 129
-- On SET_LOCAL shift to state 134
-- On SET_GLOBAL shift to state 136
-- On SELECT shift to state 138
-- On RETURN shift to state 139
-- On NOP shift to state 140
-- On LOOP shift to state 142
-- On LOAD shift to state 148
-- On IF shift to state 151
-- On GROW_MEMORY shift to state 159
-- On GET_LOCAL shift to state 160
-- On GET_GLOBAL shift to state 162
-- On DROP shift to state 164
-- On CURRENT_MEMORY shift to state 165
-- On CONVERT shift to state 166
-- On CONST shift to state 167
-- On COMPARE shift to state 172
-- On CALL_INDIRECT shift to state 173
-- On CALL shift to state 175
-- On BR_TABLE shift to state 177
-- On BR_IF shift to state 180
-- On BR shift to state 182
-- On BLOCK shift to state 217
-- On BINARY shift to state 186
-- On plain_instr shift to state 220
-- On expr1 shift to state 224

State 230:
if_ -> expr if_ . [ RPAR ]
-- On RPAR reduce production if_ -> expr if_

State 231:
if_block -> block_sig . if_block [ RPAR ]
-- On LPAR shift to state 153
-- On if_block shift to state 232
-- On if_ shift to state 227
-- On expr shift to state 228
-- On block_sig shift to state 231

State 232:
if_block -> block_sig if_block . [ RPAR ]
-- On RPAR reduce production if_block -> block_sig if_block

State 233:
expr1 -> LOOP labeling_opt block . [ RPAR ]
-- On RPAR reduce production expr1 -> LOOP labeling_opt block

State 234:
const_expr -> instr_list . [ RPAR ]
-- On RPAR reduce production const_expr -> instr_list

State 235:
global_fields -> global_type const_expr . [ RPAR ]
-- On RPAR reduce production global_fields -> global_type const_expr

State 236:
global_fields -> inline_export global_fields . [ RPAR ]
-- On RPAR reduce production global_fields -> inline_export global_fields

State 237:
global -> LPAR GLOBAL bind_var_opt global_fields . RPAR [ RPAR LPAR EOF ]
-- On RPAR shift to state 238

State 238:
global -> LPAR GLOBAL bind_var_opt global_fields RPAR . [ RPAR LPAR EOF ]
-- On RPAR reduce production global -> LPAR GLOBAL bind_var_opt global_fields RPAR
-- On LPAR reduce production global -> LPAR GLOBAL bind_var_opt global_fields RPAR
-- On EOF reduce production global -> LPAR GLOBAL bind_var_opt global_fields RPAR

State 239:
func -> LPAR FUNC . bind_var_opt func_fields RPAR [ RPAR LPAR EOF ]
-- On VAR shift to state 3
-- On bind_var_opt shift to state 240
-- On bind_var shift to state 61
-- On UNREACHABLE reduce production bind_var_opt -> 
-- On UNARY reduce production bind_var_opt -> 
-- On TEST reduce production bind_var_opt -> 
-- On TEE_LOCAL reduce production bind_var_opt -> 
-- On STORE reduce production bind_var_opt -> 
-- On SET_LOCAL reduce production bind_var_opt -> 
-- On SET_GLOBAL reduce production bind_var_opt -> 
-- On SELECT reduce production bind_var_opt -> 
-- On RPAR reduce production bind_var_opt -> 
-- On RETURN reduce production bind_var_opt -> 
-- On NOP reduce production bind_var_opt -> 
-- On LPAR reduce production bind_var_opt -> 
-- On LOOP reduce production bind_var_opt -> 
-- On LOAD reduce production bind_var_opt -> 
-- On IF reduce production bind_var_opt -> 
-- On GROW_MEMORY reduce production bind_var_opt -> 
-- On GET_LOCAL reduce production bind_var_opt -> 
-- On GET_GLOBAL reduce production bind_var_opt -> 
-- On DROP reduce production bind_var_opt -> 
-- On CURRENT_MEMORY reduce production bind_var_opt -> 
-- On CONVERT reduce production bind_var_opt -> 
-- On CONST reduce production bind_var_opt -> 
-- On COMPARE reduce production bind_var_opt -> 
-- On CALL_INDIRECT reduce production bind_var_opt -> 
-- On CALL reduce production bind_var_opt -> 
-- On BR_TABLE reduce production bind_var_opt -> 
-- On BR_IF reduce production bind_var_opt -> 
-- On BR reduce production bind_var_opt -> 
-- On BLOCK reduce production bind_var_opt -> 
-- On BINARY reduce production bind_var_opt -> 

State 240:
func -> LPAR FUNC bind_var_opt . func_fields RPAR [ RPAR LPAR EOF ]
-- On UNREACHABLE shift to state 124
-- On UNARY shift to state 125
-- On TEST shift to state 126
-- On TEE_LOCAL shift to state 127
-- On STORE shift to state 129
-- On SET_LOCAL shift to state 134
-- On SET_GLOBAL shift to state 136
-- On SELECT shift to state 138
-- On RETURN shift to state 139
-- On NOP shift to state 140
-- On LPAR shift to state 241
-- On LOOP shift to state 155
-- On LOAD shift to state 148
-- On IF shift to state 157
-- On GROW_MEMORY shift to state 159
-- On GET_LOCAL shift to state 160
-- On GET_GLOBAL shift to state 162
-- On DROP shift to state 164
-- On CURRENT_MEMORY shift to state 165
-- On CONVERT shift to state 166
-- On CONST shift to state 167
-- On COMPARE shift to state 172
-- On CALL_INDIRECT shift to state 173
-- On CALL shift to state 175
-- On BR_TABLE shift to state 177
-- On BR_IF shift to state 180
-- On BR shift to state 182
-- On BLOCK shift to state 184
-- On BINARY shift to state 186
-- On type_use shift to state 268
-- On plain_instr shift to state 187
-- On instr_list shift to state 250
-- On instr shift to state 189
-- On inline_import shift to state 270
-- On inline_export shift to state 290
-- On func_result_body shift to state 262
-- On func_fields_body shift to state 291
-- On func_fields shift to state 293
-- On func_body shift to state 257
-- On expr shift to state 191
-- On block_instr shift to state 192
-- On RPAR reduce production instr_list -> 

State 241:
expr -> LPAR . expr1 RPAR [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
func_body -> LPAR . LOCAL value_type_list RPAR func_body [ RPAR ]
func_body -> LPAR . LOCAL bind_var VALUE_TYPE RPAR func_body [ RPAR ]
func_fields_body -> LPAR . PARAM value_type_list RPAR func_fields_body [ RPAR ]
func_fields_body -> LPAR . PARAM bind_var VALUE_TYPE RPAR func_fields_body [ RPAR ]
func_result_body -> LPAR . RESULT value_type_list RPAR func_result_body [ RPAR ]
inline_export -> LPAR . EXPORT name RPAR [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
inline_import -> LPAR . IMPORT name name RPAR [ RPAR LPAR ]
type_use -> LPAR . TYPE var RPAR [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
-- On UNREACHABLE shift to state 124
-- On UNARY shift to state 125
-- On TYPE shift to state 108
-- On TEST shift to state 126
-- On TEE_LOCAL shift to state 127
-- On STORE shift to state 129
-- On SET_LOCAL shift to state 134
-- On SET_GLOBAL shift to state 136
-- On SELECT shift to state 138
-- On RETURN shift to state 139
-- On RESULT shift to state 242
-- On PARAM shift to state 258
-- On NOP shift to state 140
-- On LOOP shift to state 142
-- On LOCAL shift to state 246
-- On LOAD shift to state 148
-- On IMPORT shift to state 34
-- On IF shift to state 151
-- On GROW_MEMORY shift to state 159
-- On GET_LOCAL shift to state 160
-- On GET_GLOBAL shift to state 162
-- On EXPORT shift to state 39
-- On DROP shift to state 164
-- On CURRENT_MEMORY shift to state 165
-- On CONVERT shift to state 166
-- On CONST shift to state 167
-- On COMPARE shift to state 172
-- On CALL_INDIRECT shift to state 173
-- On CALL shift to state 175
-- On BR_TABLE shift to state 177
-- On BR_IF shift to state 180
-- On BR shift to state 182
-- On BLOCK shift to state 217
-- On BINARY shift to state 186
-- On plain_instr shift to state 220
-- On expr1 shift to state 224

State 242:
func_result_body -> LPAR RESULT . value_type_list RPAR func_result_body [ RPAR ]
-- On VALUE_TYPE shift to state 8
-- On value_type_list shift to state 243
-- On RPAR reduce production value_type_list -> 

State 243:
func_result_body -> LPAR RESULT value_type_list . RPAR func_result_body [ RPAR ]
-- On RPAR shift to state 244

State 244:
func_result_body -> LPAR RESULT value_type_list RPAR . func_result_body [ RPAR ]
-- On UNREACHABLE shift to state 124
-- On UNARY shift to state 125
-- On TEST shift to state 126
-- On TEE_LOCAL shift to state 127
-- On STORE shift to state 129
-- On SET_LOCAL shift to state 134
-- On SET_GLOBAL shift to state 136
-- On SELECT shift to state 138
-- On RETURN shift to state 139
-- On NOP shift to state 140
-- On LPAR shift to state 245
-- On LOOP shift to state 155
-- On LOAD shift to state 148
-- On IF shift to state 157
-- On GROW_MEMORY shift to state 159
-- On GET_LOCAL shift to state 160
-- On GET_GLOBAL shift to state 162
-- On DROP shift to state 164
-- On CURRENT_MEMORY shift to state 165
-- On CONVERT shift to state 166
-- On CONST shift to state 167
-- On COMPARE shift to state 172
-- On CALL_INDIRECT shift to state 173
-- On CALL shift to state 175
-- On BR_TABLE shift to state 177
-- On BR_IF shift to state 180
-- On BR shift to state 182
-- On BLOCK shift to state 184
-- On BINARY shift to state 186
-- On plain_instr shift to state 187
-- On instr_list shift to state 250
-- On instr shift to state 189
-- On func_result_body shift to state 256
-- On func_body shift to state 257
-- On expr shift to state 191
-- On block_instr shift to state 192
-- On RPAR reduce production instr_list -> 

State 245:
expr -> LPAR . expr1 RPAR [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
func_body -> LPAR . LOCAL value_type_list RPAR func_body [ RPAR ]
func_body -> LPAR . LOCAL bind_var VALUE_TYPE RPAR func_body [ RPAR ]
func_result_body -> LPAR . RESULT value_type_list RPAR func_result_body [ RPAR ]
-- On UNREACHABLE shift to state 124
-- On UNARY shift to state 125
-- On TEST shift to state 126
-- On TEE_LOCAL shift to state 127
-- On STORE shift to state 129
-- On SET_LOCAL shift to state 134
-- On SET_GLOBAL shift to state 136
-- On SELECT shift to state 138
-- On RETURN shift to state 139
-- On RESULT shift to state 242
-- On NOP shift to state 140
-- On LOOP shift to state 142
-- On LOCAL shift to state 246
-- On LOAD shift to state 148
-- On IF shift to state 151
-- On GROW_MEMORY shift to state 159
-- On GET_LOCAL shift to state 160
-- On GET_GLOBAL shift to state 162
-- On DROP shift to state 164
-- On CURRENT_MEMORY shift to state 165
-- On CONVERT shift to state 166
-- On CONST shift to state 167
-- On COMPARE shift to state 172
-- On CALL_INDIRECT shift to state 173
-- On CALL shift to state 175
-- On BR_TABLE shift to state 177
-- On BR_IF shift to state 180
-- On BR shift to state 182
-- On BLOCK shift to state 217
-- On BINARY shift to state 186
-- On plain_instr shift to state 220
-- On expr1 shift to state 224

State 246:
func_body -> LPAR LOCAL . value_type_list RPAR func_body [ RPAR ]
func_body -> LPAR LOCAL . bind_var VALUE_TYPE RPAR func_body [ RPAR ]
-- On VAR shift to state 3
-- On VALUE_TYPE shift to state 8
-- On value_type_list shift to state 247
-- On bind_var shift to state 252
-- On RPAR reduce production value_type_list -> 

State 247:
func_body -> LPAR LOCAL value_type_list . RPAR func_body [ RPAR ]
-- On RPAR shift to state 248

State 248:
func_body -> LPAR LOCAL value_type_list RPAR . func_body [ RPAR ]
-- On UNREACHABLE shift to state 124
-- On UNARY shift to state 125
-- On TEST shift to state 126
-- On TEE_LOCAL shift to state 127
-- On STORE shift to state 129
-- On SET_LOCAL shift to state 134
-- On SET_GLOBAL shift to state 136
-- On SELECT shift to state 138
-- On RETURN shift to state 139
-- On NOP shift to state 140
-- On LPAR shift to state 249
-- On LOOP shift to state 155
-- On LOAD shift to state 148
-- On IF shift to state 157
-- On GROW_MEMORY shift to state 159
-- On GET_LOCAL shift to state 160
-- On GET_GLOBAL shift to state 162
-- On DROP shift to state 164
-- On CURRENT_MEMORY shift to state 165
-- On CONVERT shift to state 166
-- On CONST shift to state 167
-- On COMPARE shift to state 172
-- On CALL_INDIRECT shift to state 173
-- On CALL shift to state 175
-- On BR_TABLE shift to state 177
-- On BR_IF shift to state 180
-- On BR shift to state 182
-- On BLOCK shift to state 184
-- On BINARY shift to state 186
-- On plain_instr shift to state 187
-- On instr_list shift to state 250
-- On instr shift to state 189
-- On func_body shift to state 251
-- On expr shift to state 191
-- On block_instr shift to state 192
-- On RPAR reduce production instr_list -> 

State 249:
expr -> LPAR . expr1 RPAR [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
func_body -> LPAR . LOCAL value_type_list RPAR func_body [ RPAR ]
func_body -> LPAR . LOCAL bind_var VALUE_TYPE RPAR func_body [ RPAR ]
-- On UNREACHABLE shift to state 124
-- On UNARY shift to state 125
-- On TEST shift to state 126
-- On TEE_LOCAL shift to state 127
-- On STORE shift to state 129
-- On SET_LOCAL shift to state 134
-- On SET_GLOBAL shift to state 136
-- On SELECT shift to state 138
-- On RETURN shift to state 139
-- On NOP shift to state 140
-- On LOOP shift to state 142
-- On LOCAL shift to state 246
-- On LOAD shift to state 148
-- On IF shift to state 151
-- On GROW_MEMORY shift to state 159
-- On GET_LOCAL shift to state 160
-- On GET_GLOBAL shift to state 162
-- On DROP shift to state 164
-- On CURRENT_MEMORY shift to state 165
-- On CONVERT shift to state 166
-- On CONST shift to state 167
-- On COMPARE shift to state 172
-- On CALL_INDIRECT shift to state 173
-- On CALL shift to state 175
-- On BR_TABLE shift to state 177
-- On BR_IF shift to state 180
-- On BR shift to state 182
-- On BLOCK shift to state 217
-- On BINARY shift to state 186
-- On plain_instr shift to state 220
-- On expr1 shift to state 224

State 250:
func_body -> instr_list . [ RPAR ]
-- On RPAR reduce production func_body -> instr_list

State 251:
func_body -> LPAR LOCAL value_type_list RPAR func_body . [ RPAR ]
-- On RPAR reduce production func_body -> LPAR LOCAL value_type_list RPAR func_body

State 252:
func_body -> LPAR LOCAL bind_var . VALUE_TYPE RPAR func_body [ RPAR ]
-- On VALUE_TYPE shift to state 253

State 253:
func_body -> LPAR LOCAL bind_var VALUE_TYPE . RPAR func_body [ RPAR ]
-- On RPAR shift to state 254

State 254:
func_body -> LPAR LOCAL bind_var VALUE_TYPE RPAR . func_body [ RPAR ]
-- On UNREACHABLE shift to state 124
-- On UNARY shift to state 125
-- On TEST shift to state 126
-- On TEE_LOCAL shift to state 127
-- On STORE shift to state 129
-- On SET_LOCAL shift to state 134
-- On SET_GLOBAL shift to state 136
-- On SELECT shift to state 138
-- On RETURN shift to state 139
-- On NOP shift to state 140
-- On LPAR shift to state 249
-- On LOOP shift to state 155
-- On LOAD shift to state 148
-- On IF shift to state 157
-- On GROW_MEMORY shift to state 159
-- On GET_LOCAL shift to state 160
-- On GET_GLOBAL shift to state 162
-- On DROP shift to state 164
-- On CURRENT_MEMORY shift to state 165
-- On CONVERT shift to state 166
-- On CONST shift to state 167
-- On COMPARE shift to state 172
-- On CALL_INDIRECT shift to state 173
-- On CALL shift to state 175
-- On BR_TABLE shift to state 177
-- On BR_IF shift to state 180
-- On BR shift to state 182
-- On BLOCK shift to state 184
-- On BINARY shift to state 186
-- On plain_instr shift to state 187
-- On instr_list shift to state 250
-- On instr shift to state 189
-- On func_body shift to state 255
-- On expr shift to state 191
-- On block_instr shift to state 192
-- On RPAR reduce production instr_list -> 

State 255:
func_body -> LPAR LOCAL bind_var VALUE_TYPE RPAR func_body . [ RPAR ]
-- On RPAR reduce production func_body -> LPAR LOCAL bind_var VALUE_TYPE RPAR func_body

State 256:
func_result_body -> LPAR RESULT value_type_list RPAR func_result_body . [ RPAR ]
-- On RPAR reduce production func_result_body -> LPAR RESULT value_type_list RPAR func_result_body

State 257:
func_result_body -> func_body . [ RPAR ]
-- On RPAR reduce production func_result_body -> func_body

State 258:
func_fields_body -> LPAR PARAM . value_type_list RPAR func_fields_body [ RPAR ]
func_fields_body -> LPAR PARAM . bind_var VALUE_TYPE RPAR func_fields_body [ RPAR ]
-- On VAR shift to state 3
-- On VALUE_TYPE shift to state 8
-- On value_type_list shift to state 259
-- On bind_var shift to state 264
-- On RPAR reduce production value_type_list -> 

State 259:
func_fields_body -> LPAR PARAM value_type_list . RPAR func_fields_body [ RPAR ]
-- On RPAR shift to state 260

State 260:
func_fields_body -> LPAR PARAM value_type_list RPAR . func_fields_body [ RPAR ]
-- On UNREACHABLE shift to state 124
-- On UNARY shift to state 125
-- On TEST shift to state 126
-- On TEE_LOCAL shift to state 127
-- On STORE shift to state 129
-- On SET_LOCAL shift to state 134
-- On SET_GLOBAL shift to state 136
-- On SELECT shift to state 138
-- On RETURN shift to state 139
-- On NOP shift to state 140
-- On LPAR shift to state 261
-- On LOOP shift to state 155
-- On LOAD shift to state 148
-- On IF shift to state 157
-- On GROW_MEMORY shift to state 159
-- On GET_LOCAL shift to state 160
-- On GET_GLOBAL shift to state 162
-- On DROP shift to state 164
-- On CURRENT_MEMORY shift to state 165
-- On CONVERT shift to state 166
-- On CONST shift to state 167
-- On COMPARE shift to state 172
-- On CALL_INDIRECT shift to state 173
-- On CALL shift to state 175
-- On BR_TABLE shift to state 177
-- On BR_IF shift to state 180
-- On BR shift to state 182
-- On BLOCK shift to state 184
-- On BINARY shift to state 186
-- On plain_instr shift to state 187
-- On instr_list shift to state 250
-- On instr shift to state 189
-- On func_result_body shift to state 262
-- On func_fields_body shift to state 263
-- On func_body shift to state 257
-- On expr shift to state 191
-- On block_instr shift to state 192
-- On RPAR reduce production instr_list -> 

State 261:
expr -> LPAR . expr1 RPAR [ UNREACHABLE UNARY TEST TEE_LOCAL STORE SET_LOCAL SET_GLOBAL SELECT RPAR RETURN NOP LPAR LOOP LOAD IF GROW_MEMORY GET_LOCAL GET_GLOBAL DROP CURRENT_MEMORY CONVERT CONST COMPARE CALL_INDIRECT CALL BR_TABLE BR_IF BR BLOCK BINARY ]
func_body -> LPAR . LOCAL value_type_list RPAR func_body [ RPAR ]
func_body -> LPAR . LOCAL bind_var VALUE_TYPE RPAR func_body [ RPAR ]
func_fields_body -> LPAR . PARAM value_type_list RPAR func_fields_body [ RPAR ]
func_fields_body -> LPAR . PARAM bind_var VALUE_TYPE RPAR func_fields_body [ RPAR ]
func_result_body -> LPAR . RESULT value_type_list RPAR func_result_body [ RPAR ]
-- On UNREACHABLE shift to state 124
-- On UNARY shift to state 125
-- On TEST shift to state 126
-- On TEE_LOCAL shift to state 127
-- On STORE shift to state 129
-- On SET_LOCAL shift to state 134
-- On SET_GLOBAL shift to state 136
-- On SELECT shift to state 138
-- On RETURN shift to state 139
-- On RESULT shift to state 242
-- On PARAM shift to state 258
-- On NOP shift to state 140
-- On LOOP shift to state 142
-- On LOCAL shift to state 246
-- On LOAD shift to state 148
-- On IF shift to state 151
-- On GROW_MEMORY shift to state 159
-- On GET_LOCAL shift to state 160
-- On GET_GLOBAL shift to state 162
-- On DROP shift to state 164
-- On CURRENT_MEMORY shift to state 165
-- On CONVERT shift to state 166
-- On CONST shift to state 167
-- On COMPARE shift to state 172
-- On CALL_INDIRECT shift to state 173
-- On CALL shift to state 175
-- On BR_TABLE shift to state 177
-- On BR_IF shift to state 180
-- On BR shift to state 182
-- On BLOCK shift to state 217
-- On BINARY shift to state 186
-- On plain_instr shift to state 220
-- On expr1 shift to state 224

State 262:
func_fields_body -> func_result_body . [ RPAR ]
-- On RPAR reduce production func_fields_body -> func_result_body

State 263:
func_fields_body -> LPAR PARAM value_type_list RPAR func_fields_body . [ RPAR ]
-- On RPAR reduce production func_fields_body -> LPAR PARAM value_type_list RPAR func_fields_body

State 264:
func_fields_body -> LPAR PARAM bind_var . VALUE_TYPE RPAR func_fields_body [ RPAR ]
-- On VALUE_TYPE shift to state 265

State 265:
func_fields_body -> LPAR PARAM bind_var VALUE_TYPE . RPAR func_fields_body [ RPAR ]
-- On RPAR shift to state 266

State 266:
func_fields_body -> LPAR PARAM bind_var VALUE_TYPE RPAR . func_fields_body [ RPAR ]
-- On UNREACHABLE shift to state 124
-- On UNARY shift to state 125
-- On TEST shift to state 126
-- On TEE_LOCAL shift to state 127
-- On STORE shift to state 129
-- On SET_LOCAL shift to state 134
-- On SET_GLOBAL shift to state 136
-- On SELECT shift to state 138
-- On RETURN shift to state 139
-- On NOP shift to state 140
-- On LPAR shift to state 261
-- On LOOP shift to state 155
-- On LOAD shift to state 148
-- On IF shift to state 157
-- On GROW_MEMORY shift to state 159
-- On GET_LOCAL shift to state 160
-- On GET_GLOBAL shift to state 162
-- On DROP shift to state 164
-- On CURRENT_MEMORY shift to state 165
-- On CONVERT shift to state 166
-- On CONST shift to state 167
-- On COMPARE shift to state 172
-- On CALL_INDIRECT shift to state 173
-- On CALL shift to state 175
-- On BR_TABLE shift to state 177
-- On BR_IF shift to state 180
-- On BR shift to state 182
-- On BLOCK shift to state 184
-- On BINARY shift to state 186
-- On plain_instr shift to state 187
-- On instr_list shift to state 250
-- On instr shift to state 189
-- On func_result_body shift to state 262
-- On func_fields_body shift to state 267
-- On func_body shift to state 257
-- On expr shift to state 191
-- On block_instr shift to state 192
-- On RPAR reduce production instr_list -> 

State 267:
func_fields_body -> LPAR PARAM bind_var VALUE_TYPE RPAR func_fields_body . [ RPAR ]
-- On RPAR reduce production func_fields_body -> LPAR PARAM bind_var VALUE_TYPE RPAR func_fields_body

State 268:
func_fields -> type_use . func_fields_body [ RPAR ]
-- On UNREACHABLE shift to state 124
-- On UNARY shift to state 125
-- On TEST shift to state 126
-- On TEE_LOCAL shift to state 127
-- On STORE shift to state 129
-- On SET_LOCAL shift to state 134
-- On SET_GLOBAL shift to state 136
-- On SELECT shift to state 138
-- On RETURN shift to state 139
-- On NOP shift to state 140
-- On LPAR shift to state 261
-- On LOOP shift to state 155
-- On LOAD shift to state 148
-- On IF shift to state 157
-- On GROW_MEMORY shift to state 159
-- On GET_LOCAL shift to state 160
-- On GET_GLOBAL shift to state 162
-- On DROP shift to state 164
-- On CURRENT_MEMORY shift to state 165
-- On CONVERT shift to state 166
-- On CONST shift to state 167
-- On COMPARE shift to state 172
-- On CALL_INDIRECT shift to state 173
-- On CALL shift to state 175
-- On BR_TABLE shift to state 177
-- On BR_IF shift to state 180
-- On BR shift to state 182
-- On BLOCK shift to state 184
-- On BINARY shift to state 186
-- On plain_instr shift to state 187
-- On instr_list shift to state 250
-- On instr shift to state 189
-- On func_result_body shift to state 262
-- On func_fields_body shift to state 269
-- On func_body shift to state 257
-- On expr shift to state 191
-- On block_instr shift to state 192
-- On RPAR reduce production instr_list -> 

State 269:
func_fields -> type_use func_fields_body . [ RPAR ]
-- On RPAR reduce production func_fields -> type_use func_fields_body

State 270:
func_fields -> inline_import . type_use func_fields_import [ RPAR ]
func_fields -> inline_import . func_fields_import [ RPAR ]
-- On LPAR shift to state 271
-- On type_use shift to state 287
-- On func_fields_import_result shift to state 281
-- On func_fields_import shift to state 289
-- On RPAR reduce production func_fields_import_result -> 

State 271:
func_fields_import -> LPAR . PARAM value_type_list RPAR func_fields_import [ RPAR ]
func_fields_import -> LPAR . PARAM bind_var VALUE_TYPE RPAR func_fields_import [ RPAR ]
func_fields_import_result -> LPAR . RESULT value_type_list RPAR func_fields_import_result [ RPAR ]
type_use -> LPAR . TYPE var RPAR [ RPAR LPAR ]
-- On TYPE shift to state 108
-- On RESULT shift to state 272
-- On PARAM shift to state 277

State 272:
func_fields_import_result -> LPAR RESULT . value_type_list RPAR func_fields_import_result [ RPAR ]
-- On VALUE_TYPE shift to state 8
-- On value_type_list shift to state 273
-- On RPAR reduce production value_type_list -> 

State 273:
func_fields_import_result -> LPAR RESULT value_type_list . RPAR func_fields_import_result [ RPAR ]
-- On RPAR shift to state 274

State 274:
func_fields_import_result -> LPAR RESULT value_type_list RPAR . func_fields_import_result [ RPAR ]
-- On LPAR shift to state 275
-- On func_fields_import_result shift to state 276
-- On RPAR reduce production func_fields_import_result -> 

State 275:
func_fields_import_result -> LPAR . RESULT value_type_list RPAR func_fields_import_result [ RPAR ]
-- On RESULT shift to state 272

State 276:
func_fields_import_result -> LPAR RESULT value_type_list RPAR func_fields_import_result . [ RPAR ]
-- On RPAR reduce production func_fields_import_result -> LPAR RESULT value_type_list RPAR func_fields_import_result

State 277:
func_fields_import -> LPAR PARAM . value_type_list RPAR func_fields_import [ RPAR ]
func_fields_import -> LPAR PARAM . bind_var VALUE_TYPE RPAR func_fields_import [ RPAR ]
-- On VAR shift to state 3
-- On VALUE_TYPE shift to state 8
-- On value_type_list shift to state 278
-- On bind_var shift to state 283
-- On RPAR reduce production value_type_list -> 

State 278:
func_fields_import -> LPAR PARAM value_type_list . RPAR func_fields_import [ RPAR ]
-- On RPAR shift to state 279

State 279:
func_fields_import -> LPAR PARAM value_type_list RPAR . func_fields_import [ RPAR ]
-- On LPAR shift to state 280
-- On func_fields_import_result shift to state 281
-- On func_fields_import shift to state 282
-- On RPAR reduce production func_fields_import_result -> 

State 280:
func_fields_import -> LPAR . PARAM value_type_list RPAR func_fields_import [ RPAR ]
func_fields_import -> LPAR . PARAM bind_var VALUE_TYPE RPAR func_fields_import [ RPAR ]
func_fields_import_result -> LPAR . RESULT value_type_list RPAR func_fields_import_result [ RPAR ]
-- On RESULT shift to state 272
-- On PARAM shift to state 277

State 281:
func_fields_import -> func_fields_import_result . [ RPAR ]
-- On RPAR reduce production func_fields_import -> func_fields_import_result

State 282:
func_fields_import -> LPAR PARAM value_type_list RPAR func_fields_import . [ RPAR ]
-- On RPAR reduce production func_fields_import -> LPAR PARAM value_type_list RPAR func_fields_import

State 283:
func_fields_import -> LPAR PARAM bind_var . VALUE_TYPE RPAR func_fields_import [ RPAR ]
-- On VALUE_TYPE shift to state 284

State 284:
func_fields_import -> LPAR PARAM bind_var VALUE_TYPE . RPAR func_fields_import [ RPAR ]
-- On RPAR shift to state 285

State 285:
func_fields_import -> LPAR PARAM bind_var VALUE_TYPE RPAR . func_fields_import [ RPAR ]
-- On LPAR shift to state 280
-- On func_fields_import_result shift to state 281
-- On func_fields_import shift to state 286
-- On RPAR reduce production func_fields_import_result -> 

State 286:
func_fields_import -> LPAR PARAM bind_var VALUE_TYPE RPAR func_fields_import . [ RPAR ]
-- On RPAR reduce production func_fields_import -> LPAR PARAM bind_var VALUE_TYPE RPAR func_fields_import

State 287:
func_fields -> inline_import type_use . func_fields_import [ RPAR ]
-- On LPAR shift to state 280
-- On func_fields_import_result shift to state 281
-- On func_fields_import shift to state 288
-- On RPAR reduce production func_fields_import_result -> 

State 288:
func_fields -> inline_import type_use func_fields_import . [ RPAR ]
-- On RPAR reduce production func_fields -> inline_import type_use func_fields_import

State 289:
func_fields -> inline_import func_fields_import . [ RPAR ]
-- On RPAR reduce production func_fields -> inline_import func_fields_import

State 290:
func_fields -> inline_export . func_fields [ RPAR ]
-- On UNREACHABLE shift to state 124
-- On UNARY shift to state 125
-- On TEST shift to state 126
-- On TEE_LOCAL shift to state 127
-- On STORE shift to state 129
-- On SET_LOCAL shift to state 134
-- On SET_GLOBAL shift to state 136
-- On SELECT shift to state 138
-- On RETURN shift to state 139
-- On NOP shift to state 140
-- On LPAR shift to state 241
-- On LOOP shift to state 155
-- On LOAD shift to state 148
-- On IF shift to state 157
-- On GROW_MEMORY shift to state 159
-- On GET_LOCAL shift to state 160
-- On GET_GLOBAL shift to state 162
-- On DROP shift to state 164
-- On CURRENT_MEMORY shift to state 165
-- On CONVERT shift to state 166
-- On CONST shift to state 167
-- On COMPARE shift to state 172
-- On CALL_INDIRECT shift to state 173
-- On CALL shift to state 175
-- On BR_TABLE shift to state 177
-- On BR_IF shift to state 180
-- On BR shift to state 182
-- On BLOCK shift to state 184
-- On BINARY shift to state 186
-- On type_use shift to state 268
-- On plain_instr shift to state 187
-- On instr_list shift to state 250
-- On instr shift to state 189
-- On inline_import shift to state 270
-- On inline_export shift to state 290
-- On func_result_body shift to state 262
-- On func_fields_body shift to state 291
-- On func_fields shift to state 292
-- On func_body shift to state 257
-- On expr shift to state 191
-- On block_instr shift to state 192
-- On RPAR reduce production instr_list -> 

State 291:
func_fields -> func_fields_body . [ RPAR ]
-- On RPAR reduce production func_fields -> func_fields_body

State 292:
func_fields -> inline_export func_fields . [ RPAR ]
-- On RPAR reduce production func_fields -> inline_export func_fields

State 293:
func -> LPAR FUNC bind_var_opt func_fields . RPAR [ RPAR LPAR EOF ]
-- On RPAR shift to state 294

State 294:
func -> LPAR FUNC bind_var_opt func_fields RPAR . [ RPAR LPAR EOF ]
-- On RPAR reduce production func -> LPAR FUNC bind_var_opt func_fields RPAR
-- On LPAR reduce production func -> LPAR FUNC bind_var_opt func_fields RPAR
-- On EOF reduce production func -> LPAR FUNC bind_var_opt func_fields RPAR

State 295:
export -> LPAR EXPORT . name export_desc RPAR [ RPAR LPAR EOF ]
-- On STRING shift to state 35
-- On name shift to state 296

State 296:
export -> LPAR EXPORT name . export_desc RPAR [ RPAR LPAR EOF ]
-- On LPAR shift to state 297
-- On export_desc shift to state 310

State 297:
export_desc -> LPAR . FUNC var RPAR [ RPAR ]
export_desc -> LPAR . TABLE var RPAR [ RPAR ]
export_desc -> LPAR . MEMORY var RPAR [ RPAR ]
export_desc -> LPAR . GLOBAL var RPAR [ RPAR ]
-- On TABLE shift to state 298
-- On MEMORY shift to state 301
-- On GLOBAL shift to state 304
-- On FUNC shift to state 307

State 298:
export_desc -> LPAR TABLE . var RPAR [ RPAR ]
-- On VAR shift to state 55
-- On NAT shift to state 56
-- On var shift to state 299

State 299:
export_desc -> LPAR TABLE var . RPAR [ RPAR ]
-- On RPAR shift to state 300

State 300:
export_desc -> LPAR TABLE var RPAR . [ RPAR ]
-- On RPAR reduce production export_desc -> LPAR TABLE var RPAR

State 301:
export_desc -> LPAR MEMORY . var RPAR [ RPAR ]
-- On VAR shift to state 55
-- On NAT shift to state 56
-- On var shift to state 302

State 302:
export_desc -> LPAR MEMORY var . RPAR [ RPAR ]
-- On RPAR shift to state 303

State 303:
export_desc -> LPAR MEMORY var RPAR . [ RPAR ]
-- On RPAR reduce production export_desc -> LPAR MEMORY var RPAR

State 304:
export_desc -> LPAR GLOBAL . var RPAR [ RPAR ]
-- On VAR shift to state 55
-- On NAT shift to state 56
-- On var shift to state 305

State 305:
export_desc -> LPAR GLOBAL var . RPAR [ RPAR ]
-- On RPAR shift to state 306

State 306:
export_desc -> LPAR GLOBAL var RPAR . [ RPAR ]
-- On RPAR reduce production export_desc -> LPAR GLOBAL var RPAR

State 307:
export_desc -> LPAR FUNC . var RPAR [ RPAR ]
-- On VAR shift to state 55
-- On NAT shift to state 56
-- On var shift to state 308

State 308:
export_desc -> LPAR FUNC var . RPAR [ RPAR ]
-- On RPAR shift to state 309

State 309:
export_desc -> LPAR FUNC var RPAR . [ RPAR ]
-- On RPAR reduce production export_desc -> LPAR FUNC var RPAR

State 310:
export -> LPAR EXPORT name export_desc . RPAR [ RPAR LPAR EOF ]
-- On RPAR shift to state 311

State 311:
export -> LPAR EXPORT name export_desc RPAR . [ RPAR LPAR EOF ]
-- On RPAR reduce production export -> LPAR EXPORT name export_desc RPAR
-- On LPAR reduce production export -> LPAR EXPORT name export_desc RPAR
-- On EOF reduce production export -> LPAR EXPORT name export_desc RPAR

State 312:
elem -> LPAR ELEM . var offset var_list RPAR [ RPAR LPAR EOF ]
elem -> LPAR ELEM . offset var_list RPAR [ RPAR LPAR EOF ]
-- On VAR shift to state 55
-- On NAT shift to state 56
-- On LPAR shift to state 313
-- On var shift to state 317
-- On offset shift to state 322
-- On expr shift to state 321

State 313:
expr -> LPAR . expr1 RPAR [ VAR STRING RPAR NAT ]
offset -> LPAR . OFFSET const_expr RPAR [ VAR STRING RPAR NAT ]
-- On UNREACHABLE shift to state 124
-- On UNARY shift to state 125
-- On TEST shift to state 126
-- On TEE_LOCAL shift to state 127
-- On STORE shift to state 129
-- On SET_LOCAL shift to state 134
-- On SET_GLOBAL shift to state 136
-- On SELECT shift to state 138
-- On RETURN shift to state 139
-- On OFFSET shift to state 314
-- On NOP shift to state 140
-- On LOOP shift to state 142
-- On LOAD shift to state 148
-- On IF shift to state 151
-- On GROW_MEMORY shift to state 159
-- On GET_LOCAL shift to state 160
-- On GET_GLOBAL shift to state 162
-- On DROP shift to state 164
-- On CURRENT_MEMORY shift to state 165
-- On CONVERT shift to state 166
-- On CONST shift to state 167
-- On COMPARE shift to state 172
-- On CALL_INDIRECT shift to state 173
-- On CALL shift to state 175
-- On BR_TABLE shift to state 177
-- On BR_IF shift to state 180
-- On BR shift to state 182
-- On BLOCK shift to state 217
-- On BINARY shift to state 186
-- On plain_instr shift to state 220
-- On expr1 shift to state 224

State 314:
offset -> LPAR OFFSET . const_expr RPAR [ VAR STRING RPAR NAT ]
-- On UNREACHABLE shift to state 124
-- On UNARY shift to state 125
-- On TEST shift to state 126
-- On TEE_LOCAL shift to state 127
-- On STORE shift to state 129
-- On SET_LOCAL shift to state 134
-- On SET_GLOBAL shift to state 136
-- On SELECT shift to state 138
-- On RETURN shift to state 139
-- On NOP shift to state 140
-- On LPAR shift to state 141
-- On LOOP shift to state 155
-- On LOAD shift to state 148
-- On IF shift to state 157
-- On GROW_MEMORY shift to state 159
-- On GET_LOCAL shift to state 160
-- On GET_GLOBAL shift to state 162
-- On DROP shift to state 164
-- On CURRENT_MEMORY shift to state 165
-- On CONVERT shift to state 166
-- On CONST shift to state 167
-- On COMPARE shift to state 172
-- On CALL_INDIRECT shift to state 173
-- On CALL shift to state 175
-- On BR_TABLE shift to state 177
-- On BR_IF shift to state 180
-- On BR shift to state 182
-- On BLOCK shift to state 184
-- On BINARY shift to state 186
-- On plain_instr shift to state 187
-- On instr_list shift to state 234
-- On instr shift to state 189
-- On expr shift to state 191
-- On const_expr shift to state 315
-- On block_instr shift to state 192
-- On RPAR reduce production instr_list -> 

State 315:
offset -> LPAR OFFSET const_expr . RPAR [ VAR STRING RPAR NAT ]
-- On RPAR shift to state 316

State 316:
offset -> LPAR OFFSET const_expr RPAR . [ VAR STRING RPAR NAT ]
-- On VAR reduce production offset -> LPAR OFFSET const_expr RPAR
-- On STRING reduce production offset -> LPAR OFFSET const_expr RPAR
-- On RPAR reduce production offset -> LPAR OFFSET const_expr RPAR
-- On NAT reduce production offset -> LPAR OFFSET const_expr RPAR

State 317:
elem -> LPAR ELEM var . offset var_list RPAR [ RPAR LPAR EOF ]
-- On LPAR shift to state 313
-- On offset shift to state 318
-- On expr shift to state 321

State 318:
elem -> LPAR ELEM var offset . var_list RPAR [ RPAR LPAR EOF ]
-- On VAR shift to state 55
-- On NAT shift to state 56
-- On var_list shift to state 319
-- On var shift to state 59
-- On RPAR reduce production var_list -> 

State 319:
elem -> LPAR ELEM var offset var_list . RPAR [ RPAR LPAR EOF ]
-- On RPAR shift to state 320

State 320:
elem -> LPAR ELEM var offset var_list RPAR . [ RPAR LPAR EOF ]
-- On RPAR reduce production elem -> LPAR ELEM var offset var_list RPAR
-- On LPAR reduce production elem -> LPAR ELEM var offset var_list RPAR
-- On EOF reduce production elem -> LPAR ELEM var offset var_list RPAR

State 321:
offset -> expr . [ VAR STRING RPAR NAT ]
-- On VAR reduce production offset -> expr
-- On STRING reduce production offset -> expr
-- On RPAR reduce production offset -> expr
-- On NAT reduce production offset -> expr

State 322:
elem -> LPAR ELEM offset . var_list RPAR [ RPAR LPAR EOF ]
-- On VAR shift to state 55
-- On NAT shift to state 56
-- On var_list shift to state 323
-- On var shift to state 59
-- On RPAR reduce production var_list -> 

State 323:
elem -> LPAR ELEM offset var_list . RPAR [ RPAR LPAR EOF ]
-- On RPAR shift to state 324

State 324:
elem -> LPAR ELEM offset var_list RPAR . [ RPAR LPAR EOF ]
-- On RPAR reduce production elem -> LPAR ELEM offset var_list RPAR
-- On LPAR reduce production elem -> LPAR ELEM offset var_list RPAR
-- On EOF reduce production elem -> LPAR ELEM offset var_list RPAR

State 325:
data -> LPAR DATA . var offset string_list RPAR [ RPAR LPAR EOF ]
data -> LPAR DATA . offset string_list RPAR [ RPAR LPAR EOF ]
-- On VAR shift to state 55
-- On NAT shift to state 56
-- On LPAR shift to state 313
-- On var shift to state 326
-- On offset shift to state 330
-- On expr shift to state 321

State 326:
data -> LPAR DATA var . offset string_list RPAR [ RPAR LPAR EOF ]
-- On LPAR shift to state 313
-- On offset shift to state 327
-- On expr shift to state 321

State 327:
data -> LPAR DATA var offset . string_list RPAR [ RPAR LPAR EOF ]
-- On string_list shift to state 328
-- On STRING reduce production string_list -> 
-- On RPAR reduce production string_list -> 

State 328:
data -> LPAR DATA var offset string_list . RPAR [ RPAR LPAR EOF ]
string_list -> string_list . STRING [ STRING RPAR ]
-- On STRING shift to state 74
-- On RPAR shift to state 329

State 329:
data -> LPAR DATA var offset string_list RPAR . [ RPAR LPAR EOF ]
-- On RPAR reduce production data -> LPAR DATA var offset string_list RPAR
-- On LPAR reduce production data -> LPAR DATA var offset string_list RPAR
-- On EOF reduce production data -> LPAR DATA var offset string_list RPAR

State 330:
data -> LPAR DATA offset . string_list RPAR [ RPAR LPAR EOF ]
-- On string_list shift to state 331
-- On STRING reduce production string_list -> 
-- On RPAR reduce production string_list -> 

State 331:
data -> LPAR DATA offset string_list . RPAR [ RPAR LPAR EOF ]
string_list -> string_list . STRING [ STRING RPAR ]
-- On STRING shift to state 74
-- On RPAR shift to state 332

State 332:
data -> LPAR DATA offset string_list RPAR . [ RPAR LPAR EOF ]
-- On RPAR reduce production data -> LPAR DATA offset string_list RPAR
-- On LPAR reduce production data -> LPAR DATA offset string_list RPAR
-- On EOF reduce production data -> LPAR DATA offset string_list RPAR

State 333:
module_fields1 -> type_def . module_fields [ RPAR EOF ]
-- On LPAR shift to state 68
-- On type_def shift to state 333
-- On table shift to state 334
-- On start shift to state 335
-- On module_fields1 shift to state 336
-- On module_fields shift to state 353
-- On memory shift to state 338
-- On import shift to state 340
-- On global shift to state 342
-- On func shift to state 344
-- On export shift to state 346
-- On elem shift to state 348
-- On data shift to state 350
-- On RPAR reduce production module_fields -> 
-- On EOF reduce production module_fields -> 

State 334:
module_fields1 -> table . module_fields [ RPAR EOF ]
-- On LPAR shift to state 68
-- On type_def shift to state 333
-- On table shift to state 334
-- On start shift to state 335
-- On module_fields1 shift to state 336
-- On module_fields shift to state 352
-- On memory shift to state 338
-- On import shift to state 340
-- On global shift to state 342
-- On func shift to state 344
-- On export shift to state 346
-- On elem shift to state 348
-- On data shift to state 350
-- On RPAR reduce production module_fields -> 
-- On EOF reduce production module_fields -> 

State 335:
module_fields1 -> start . module_fields [ RPAR EOF ]
-- On LPAR shift to state 68
-- On type_def shift to state 333
-- On table shift to state 334
-- On start shift to state 335
-- On module_fields1 shift to state 336
-- On module_fields shift to state 337
-- On memory shift to state 338
-- On import shift to state 340
-- On global shift to state 342
-- On func shift to state 344
-- On export shift to state 346
-- On elem shift to state 348
-- On data shift to state 350
-- On RPAR reduce production module_fields -> 
-- On EOF reduce production module_fields -> 

State 336:
module_fields -> module_fields1 . [ RPAR EOF ]
-- On RPAR reduce production module_fields -> module_fields1
-- On EOF reduce production module_fields -> module_fields1

State 337:
module_fields1 -> start module_fields . [ RPAR EOF ]
-- On RPAR reduce production module_fields1 -> start module_fields
-- On EOF reduce production module_fields1 -> start module_fields

State 338:
module_fields1 -> memory . module_fields [ RPAR EOF ]
-- On LPAR shift to state 68
-- On type_def shift to state 333
-- On table shift to state 334
-- On start shift to state 335
-- On module_fields1 shift to state 336
-- On module_fields shift to state 339
-- On memory shift to state 338
-- On import shift to state 340
-- On global shift to state 342
-- On func shift to state 344
-- On export shift to state 346
-- On elem shift to state 348
-- On data shift to state 350
-- On RPAR reduce production module_fields -> 
-- On EOF reduce production module_fields -> 

State 339:
module_fields1 -> memory module_fields . [ RPAR EOF ]
-- On RPAR reduce production module_fields1 -> memory module_fields
-- On EOF reduce production module_fields1 -> memory module_fields

State 340:
module_fields1 -> import . module_fields [ RPAR EOF ]
-- On LPAR shift to state 68
-- On type_def shift to state 333
-- On table shift to state 334
-- On start shift to state 335
-- On module_fields1 shift to state 336
-- On module_fields shift to state 341
-- On memory shift to state 338
-- On import shift to state 340
-- On global shift to state 342
-- On func shift to state 344
-- On export shift to state 346
-- On elem shift to state 348
-- On data shift to state 350
-- On RPAR reduce production module_fields -> 
-- On EOF reduce production module_fields -> 

State 341:
module_fields1 -> import module_fields . [ RPAR EOF ]
-- On RPAR reduce production module_fields1 -> import module_fields
-- On EOF reduce production module_fields1 -> import module_fields

State 342:
module_fields1 -> global . module_fields [ RPAR EOF ]
-- On LPAR shift to state 68
-- On type_def shift to state 333
-- On table shift to state 334
-- On start shift to state 335
-- On module_fields1 shift to state 336
-- On module_fields shift to state 343
-- On memory shift to state 338
-- On import shift to state 340
-- On global shift to state 342
-- On func shift to state 344
-- On export shift to state 346
-- On elem shift to state 348
-- On data shift to state 350
-- On RPAR reduce production module_fields -> 
-- On EOF reduce production module_fields -> 

State 343:
module_fields1 -> global module_fields . [ RPAR EOF ]
-- On RPAR reduce production module_fields1 -> global module_fields
-- On EOF reduce production module_fields1 -> global module_fields

State 344:
module_fields1 -> func . module_fields [ RPAR EOF ]
-- On LPAR shift to state 68
-- On type_def shift to state 333
-- On table shift to state 334
-- On start shift to state 335
-- On module_fields1 shift to state 336
-- On module_fields shift to state 345
-- On memory shift to state 338
-- On import shift to state 340
-- On global shift to state 342
-- On func shift to state 344
-- On export shift to state 346
-- On elem shift to state 348
-- On data shift to state 350
-- On RPAR reduce production module_fields -> 
-- On EOF reduce production module_fields -> 

State 345:
module_fields1 -> func module_fields . [ RPAR EOF ]
-- On RPAR reduce production module_fields1 -> func module_fields
-- On EOF reduce production module_fields1 -> func module_fields

State 346:
module_fields1 -> export . module_fields [ RPAR EOF ]
-- On LPAR shift to state 68
-- On type_def shift to state 333
-- On table shift to state 334
-- On start shift to state 335
-- On module_fields1 shift to state 336
-- On module_fields shift to state 347
-- On memory shift to state 338
-- On import shift to state 340
-- On global shift to state 342
-- On func shift to state 344
-- On export shift to state 346
-- On elem shift to state 348
-- On data shift to state 350
-- On RPAR reduce production module_fields -> 
-- On EOF reduce production module_fields -> 

State 347:
module_fields1 -> export module_fields . [ RPAR EOF ]
-- On RPAR reduce production module_fields1 -> export module_fields
-- On EOF reduce production module_fields1 -> export module_fields

State 348:
module_fields1 -> elem . module_fields [ RPAR EOF ]
-- On LPAR shift to state 68
-- On type_def shift to state 333
-- On table shift to state 334
-- On start shift to state 335
-- On module_fields1 shift to state 336
-- On module_fields shift to state 349
-- On memory shift to state 338
-- On import shift to state 340
-- On global shift to state 342
-- On func shift to state 344
-- On export shift to state 346
-- On elem shift to state 348
-- On data shift to state 350
-- On RPAR reduce production module_fields -> 
-- On EOF reduce production module_fields -> 

State 349:
module_fields1 -> elem module_fields . [ RPAR EOF ]
-- On RPAR reduce production module_fields1 -> elem module_fields
-- On EOF reduce production module_fields1 -> elem module_fields

State 350:
module_fields1 -> data . module_fields [ RPAR EOF ]
-- On LPAR shift to state 68
-- On type_def shift to state 333
-- On table shift to state 334
-- On start shift to state 335
-- On module_fields1 shift to state 336
-- On module_fields shift to state 351
-- On memory shift to state 338
-- On import shift to state 340
-- On global shift to state 342
-- On func shift to state 344
-- On export shift to state 346
-- On elem shift to state 348
-- On data shift to state 350
-- On RPAR reduce production module_fields -> 
-- On EOF reduce production module_fields -> 

State 351:
module_fields1 -> data module_fields . [ RPAR EOF ]
-- On RPAR reduce production module_fields1 -> data module_fields
-- On EOF reduce production module_fields1 -> data module_fields

State 352:
module_fields1 -> table module_fields . [ RPAR EOF ]
-- On RPAR reduce production module_fields1 -> table module_fields
-- On EOF reduce production module_fields1 -> table module_fields

State 353:
module_fields1 -> type_def module_fields . [ RPAR EOF ]
-- On RPAR reduce production module_fields1 -> type_def module_fields
-- On EOF reduce production module_fields1 -> type_def module_fields

State 354:
module_ -> LPAR MODULE module_var_opt module_fields . RPAR [ STRING RPAR LPAR EOF ]
-- On RPAR shift to state 355

State 355:
module_ -> LPAR MODULE module_var_opt module_fields RPAR . [ STRING RPAR LPAR EOF ]
-- On STRING reduce production module_ -> LPAR MODULE module_var_opt module_fields RPAR
-- On RPAR reduce production module_ -> LPAR MODULE module_var_opt module_fields RPAR
-- On LPAR reduce production module_ -> LPAR MODULE module_var_opt module_fields RPAR
-- On EOF reduce production module_ -> LPAR MODULE module_var_opt module_fields RPAR

State 356:
inline_module -> module_fields . [ EOF ]
-- On EOF reduce production inline_module -> module_fields

State 357:
module1 -> module_ . EOF [ # ]
-- On EOF shift to state 358

State 358:
module1 -> module_ EOF . [ # ]
-- On # reduce production module1 -> module_ EOF

State 359:
module1' -> module1 . [ # ]
-- On # accept module1

State 360:
module1 -> inline_module . EOF [ # ]
-- On EOF shift to state 361

State 361:
module1 -> inline_module EOF . [ # ]
-- On # reduce production module1 -> inline_module EOF

State 362:
script' -> . script [ # ]
-- On LPAR shift to state 363
-- On type_def shift to state 333
-- On table shift to state 334
-- On start shift to state 335
-- On script_module shift to state 441
-- On script shift to state 449
-- On module_fields1 shift to state 450
-- On module_ shift to state 409
-- On meta shift to state 442
-- On memory shift to state 338
-- On inline_module1 shift to state 451
-- On import shift to state 340
-- On global shift to state 342
-- On func shift to state 344
-- On export shift to state 346
-- On elem shift to state 348
-- On data shift to state 350
-- On cmd_list shift to state 453
-- On cmd shift to state 445
-- On assertion shift to state 447
-- On action shift to state 448
-- On EOF reduce production cmd_list -> 

State 363:
action -> LPAR . INVOKE module_var_opt name const_list RPAR [ LPAR EOF ]
action -> LPAR . GET module_var_opt name RPAR [ LPAR EOF ]
assertion -> LPAR . ASSERT_MALFORMED script_module STRING RPAR [ LPAR EOF ]
assertion -> LPAR . ASSERT_INVALID script_module STRING RPAR [ LPAR EOF ]
assertion -> LPAR . ASSERT_UNLINKABLE script_module STRING RPAR [ LPAR EOF ]
assertion -> LPAR . ASSERT_TRAP script_module STRING RPAR [ LPAR EOF ]
assertion -> LPAR . ASSERT_RETURN action const_list RPAR [ LPAR EOF ]
assertion -> LPAR . ASSERT_RETURN_CANONICAL_NAN action RPAR [ LPAR EOF ]
assertion -> LPAR . ASSERT_RETURN_ARITHMETIC_NAN action RPAR [ LPAR EOF ]
assertion -> LPAR . ASSERT_TRAP action STRING RPAR [ LPAR EOF ]
assertion -> LPAR . ASSERT_EXHAUSTION action STRING RPAR [ LPAR EOF ]
cmd -> LPAR . REGISTER name module_var_opt RPAR [ LPAR EOF ]
data -> LPAR . DATA var offset string_list RPAR [ LPAR EOF ]
data -> LPAR . DATA offset string_list RPAR [ LPAR EOF ]
elem -> LPAR . ELEM var offset var_list RPAR [ LPAR EOF ]
elem -> LPAR . ELEM offset var_list RPAR [ LPAR EOF ]
export -> LPAR . EXPORT name export_desc RPAR [ LPAR EOF ]
func -> LPAR . FUNC bind_var_opt func_fields RPAR [ LPAR EOF ]
global -> LPAR . GLOBAL bind_var_opt global_fields RPAR [ LPAR EOF ]
import -> LPAR . IMPORT name name import_desc RPAR [ LPAR EOF ]
memory -> LPAR . MEMORY bind_var_opt memory_fields RPAR [ LPAR EOF ]
meta -> LPAR . SCRIPT script_var_opt cmd_list RPAR [ LPAR EOF ]
meta -> LPAR . INPUT script_var_opt STRING RPAR [ LPAR EOF ]
meta -> LPAR . OUTPUT script_var_opt STRING RPAR [ LPAR EOF ]
meta -> LPAR . OUTPUT script_var_opt RPAR [ LPAR EOF ]
module_ -> LPAR . MODULE module_var_opt module_fields RPAR [ LPAR EOF ]
script_module -> LPAR . MODULE module_var_opt BIN string_list RPAR [ LPAR EOF ]
script_module -> LPAR . MODULE module_var_opt QUOTE string_list RPAR [ LPAR EOF ]
start -> LPAR . START var RPAR [ LPAR EOF ]
table -> LPAR . TABLE bind_var_opt table_fields RPAR [ LPAR EOF ]
type_def -> LPAR . TYPE type_ RPAR [ LPAR EOF ]
type_def -> LPAR . TYPE bind_var type_ RPAR [ LPAR EOF ]
-- On TYPE shift to state 2
-- On TABLE shift to state 29
-- On START shift to state 62
-- On SCRIPT shift to state 364
-- On REGISTER shift to state 368
-- On OUTPUT shift to state 372
-- On MODULE shift to state 377
-- On MEMORY shift to state 69
-- On INVOKE shift to state 385
-- On INPUT shift to state 396
-- On IMPORT shift to state 84
-- On GLOBAL shift to state 117
-- On GET shift to state 400
-- On FUNC shift to state 239
-- On EXPORT shift to state 295
-- On ELEM shift to state 312
-- On DATA shift to state 325
-- On ASSERT_UNLINKABLE shift to state 404
-- On ASSERT_TRAP shift to state 410
-- On ASSERT_RETURN_CANONICAL_NAN shift to state 418
-- On ASSERT_RETURN_ARITHMETIC_NAN shift to state 422
-- On ASSERT_RETURN shift to state 425
-- On ASSERT_MALFORMED shift to state 429
-- On ASSERT_INVALID shift to state 433
-- On ASSERT_EXHAUSTION shift to state 437

State 364:
meta -> LPAR SCRIPT . script_var_opt cmd_list RPAR [ RPAR LPAR EOF ]
-- On VAR shift to state 365
-- On script_var_opt shift to state 366
-- On RPAR reduce production script_var_opt -> 
-- On LPAR reduce production script_var_opt -> 

State 365:
script_var_opt -> VAR . [ STRING RPAR LPAR ]
-- On STRING reduce production script_var_opt -> VAR
-- On RPAR reduce production script_var_opt -> VAR
-- On LPAR reduce production script_var_opt -> VAR

State 366:
meta -> LPAR SCRIPT script_var_opt . cmd_list RPAR [ RPAR LPAR EOF ]
-- On LPAR shift to state 367
-- On script_module shift to state 441
-- On module_ shift to state 409
-- On meta shift to state 442
-- On cmd_list shift to state 443
-- On cmd shift to state 445
-- On assertion shift to state 447
-- On action shift to state 448
-- On RPAR reduce production cmd_list -> 

State 367:
action -> LPAR . INVOKE module_var_opt name const_list RPAR [ RPAR LPAR EOF ]
action -> LPAR . GET module_var_opt name RPAR [ RPAR LPAR EOF ]
assertion -> LPAR . ASSERT_MALFORMED script_module STRING RPAR [ RPAR LPAR EOF ]
assertion -> LPAR . ASSERT_INVALID script_module STRING RPAR [ RPAR LPAR EOF ]
assertion -> LPAR . ASSERT_UNLINKABLE script_module STRING RPAR [ RPAR LPAR EOF ]
assertion -> LPAR . ASSERT_TRAP script_module STRING RPAR [ RPAR LPAR EOF ]
assertion -> LPAR . ASSERT_RETURN action const_list RPAR [ RPAR LPAR EOF ]
assertion -> LPAR . ASSERT_RETURN_CANONICAL_NAN action RPAR [ RPAR LPAR EOF ]
assertion -> LPAR . ASSERT_RETURN_ARITHMETIC_NAN action RPAR [ RPAR LPAR EOF ]
assertion -> LPAR . ASSERT_TRAP action STRING RPAR [ RPAR LPAR EOF ]
assertion -> LPAR . ASSERT_EXHAUSTION action STRING RPAR [ RPAR LPAR EOF ]
cmd -> LPAR . REGISTER name module_var_opt RPAR [ RPAR LPAR EOF ]
meta -> LPAR . SCRIPT script_var_opt cmd_list RPAR [ RPAR LPAR EOF ]
meta -> LPAR . INPUT script_var_opt STRING RPAR [ RPAR LPAR EOF ]
meta -> LPAR . OUTPUT script_var_opt STRING RPAR [ RPAR LPAR EOF ]
meta -> LPAR . OUTPUT script_var_opt RPAR [ RPAR LPAR EOF ]
module_ -> LPAR . MODULE module_var_opt module_fields RPAR [ RPAR LPAR EOF ]
script_module -> LPAR . MODULE module_var_opt BIN string_list RPAR [ RPAR LPAR EOF ]
script_module -> LPAR . MODULE module_var_opt QUOTE string_list RPAR [ RPAR LPAR EOF ]
-- On SCRIPT shift to state 364
-- On REGISTER shift to state 368
-- On OUTPUT shift to state 372
-- On MODULE shift to state 377
-- On INVOKE shift to state 385
-- On INPUT shift to state 396
-- On GET shift to state 400
-- On ASSERT_UNLINKABLE shift to state 404
-- On ASSERT_TRAP shift to state 410
-- On ASSERT_RETURN_CANONICAL_NAN shift to state 418
-- On ASSERT_RETURN_ARITHMETIC_NAN shift to state 422
-- On ASSERT_RETURN shift to state 425
-- On ASSERT_MALFORMED shift to state 429
-- On ASSERT_INVALID shift to state 433
-- On ASSERT_EXHAUSTION shift to state 437

State 368:
cmd -> LPAR REGISTER . name module_var_opt RPAR [ RPAR LPAR EOF ]
-- On STRING shift to state 35
-- On name shift to state 369

State 369:
cmd -> LPAR REGISTER name . module_var_opt RPAR [ RPAR LPAR EOF ]
-- On VAR shift to state 66
-- On module_var_opt shift to state 370
-- On RPAR reduce production module_var_opt -> 

State 370:
cmd -> LPAR REGISTER name module_var_opt . RPAR [ RPAR LPAR EOF ]
-- On RPAR shift to state 371

State 371:
cmd -> LPAR REGISTER name module_var_opt RPAR . [ RPAR LPAR EOF ]
-- On RPAR reduce production cmd -> LPAR REGISTER name module_var_opt RPAR
-- On LPAR reduce production cmd -> LPAR REGISTER name module_var_opt RPAR
-- On EOF reduce production cmd -> LPAR REGISTER name module_var_opt RPAR

State 372:
meta -> LPAR OUTPUT . script_var_opt STRING RPAR [ RPAR LPAR EOF ]
meta -> LPAR OUTPUT . script_var_opt RPAR [ RPAR LPAR EOF ]
-- On VAR shift to state 365
-- On script_var_opt shift to state 373
-- On STRING reduce production script_var_opt -> 
-- On RPAR reduce production script_var_opt -> 

State 373:
meta -> LPAR OUTPUT script_var_opt . STRING RPAR [ RPAR LPAR EOF ]
meta -> LPAR OUTPUT script_var_opt . RPAR [ RPAR LPAR EOF ]
-- On STRING shift to state 374
-- On RPAR shift to state 376

State 374:
meta -> LPAR OUTPUT script_var_opt STRING . RPAR [ RPAR LPAR EOF ]
-- On RPAR shift to state 375

State 375:
meta -> LPAR OUTPUT script_var_opt STRING RPAR . [ RPAR LPAR EOF ]
-- On RPAR reduce production meta -> LPAR OUTPUT script_var_opt STRING RPAR
-- On LPAR reduce production meta -> LPAR OUTPUT script_var_opt STRING RPAR
-- On EOF reduce production meta -> LPAR OUTPUT script_var_opt STRING RPAR

State 376:
meta -> LPAR OUTPUT script_var_opt RPAR . [ RPAR LPAR EOF ]
-- On RPAR reduce production meta -> LPAR OUTPUT script_var_opt RPAR
-- On LPAR reduce production meta -> LPAR OUTPUT script_var_opt RPAR
-- On EOF reduce production meta -> LPAR OUTPUT script_var_opt RPAR

State 377:
module_ -> LPAR MODULE . module_var_opt module_fields RPAR [ STRING RPAR LPAR EOF ]
script_module -> LPAR MODULE . module_var_opt BIN string_list RPAR [ STRING RPAR LPAR EOF ]
script_module -> LPAR MODULE . module_var_opt QUOTE string_list RPAR [ STRING RPAR LPAR EOF ]
-- On VAR shift to state 66
-- On module_var_opt shift to state 378
-- On RPAR reduce production module_var_opt -> 
-- On QUOTE reduce production module_var_opt -> 
-- On LPAR reduce production module_var_opt -> 
-- On BIN reduce production module_var_opt -> 

State 378:
module_ -> LPAR MODULE module_var_opt . module_fields RPAR [ STRING RPAR LPAR EOF ]
script_module -> LPAR MODULE module_var_opt . BIN string_list RPAR [ STRING RPAR LPAR EOF ]
script_module -> LPAR MODULE module_var_opt . QUOTE string_list RPAR [ STRING RPAR LPAR EOF ]
-- On QUOTE shift to state 379
-- On LPAR shift to state 68
-- On BIN shift to state 382
-- On type_def shift to state 333
-- On table shift to state 334
-- On start shift to state 335
-- On module_fields1 shift to state 336
-- On module_fields shift to state 354
-- On memory shift to state 338
-- On import shift to state 340
-- On global shift to state 342
-- On func shift to state 344
-- On export shift to state 346
-- On elem shift to state 348
-- On data shift to state 350
-- On RPAR reduce production module_fields -> 

State 379:
script_module -> LPAR MODULE module_var_opt QUOTE . string_list RPAR [ STRING RPAR LPAR EOF ]
-- On string_list shift to state 380
-- On STRING reduce production string_list -> 
-- On RPAR reduce production string_list -> 

State 380:
script_module -> LPAR MODULE module_var_opt QUOTE string_list . RPAR [ STRING RPAR LPAR EOF ]
string_list -> string_list . STRING [ STRING RPAR ]
-- On STRING shift to state 74
-- On RPAR shift to state 381

State 381:
script_module -> LPAR MODULE module_var_opt QUOTE string_list RPAR . [ STRING RPAR LPAR EOF ]
-- On STRING reduce production script_module -> LPAR MODULE module_var_opt QUOTE string_list RPAR
-- On RPAR reduce production script_module -> LPAR MODULE module_var_opt QUOTE string_list RPAR
-- On LPAR reduce production script_module -> LPAR MODULE module_var_opt QUOTE string_list RPAR
-- On EOF reduce production script_module -> LPAR MODULE module_var_opt QUOTE string_list RPAR

State 382:
script_module -> LPAR MODULE module_var_opt BIN . string_list RPAR [ STRING RPAR LPAR EOF ]
-- On string_list shift to state 383
-- On STRING reduce production string_list -> 
-- On RPAR reduce production string_list -> 

State 383:
script_module -> LPAR MODULE module_var_opt BIN string_list . RPAR [ STRING RPAR LPAR EOF ]
string_list -> string_list . STRING [ STRING RPAR ]
-- On STRING shift to state 74
-- On RPAR shift to state 384

State 384:
script_module -> LPAR MODULE module_var_opt BIN string_list RPAR . [ STRING RPAR LPAR EOF ]
-- On STRING reduce production script_module -> LPAR MODULE module_var_opt BIN string_list RPAR
-- On RPAR reduce production script_module -> LPAR MODULE module_var_opt BIN string_list RPAR
-- On LPAR reduce production script_module -> LPAR MODULE module_var_opt BIN string_list RPAR
-- On EOF reduce production script_module -> LPAR MODULE module_var_opt BIN string_list RPAR

State 385:
action -> LPAR INVOKE . module_var_opt name const_list RPAR [ STRING RPAR LPAR EOF ]
-- On VAR shift to state 66
-- On module_var_opt shift to state 386
-- On STRING reduce production module_var_opt -> 

State 386:
action -> LPAR INVOKE module_var_opt . name const_list RPAR [ STRING RPAR LPAR EOF ]
-- On STRING shift to state 35
-- On name shift to state 387

State 387:
action -> LPAR INVOKE module_var_opt name . const_list RPAR [ STRING RPAR LPAR EOF ]
-- On LPAR shift to state 388
-- On const_list shift to state 392
-- On const shift to state 394
-- On RPAR reduce production const_list -> 

State 388:
const -> LPAR . CONST literal RPAR [ RPAR LPAR ]
-- On CONST shift to state 389

State 389:
const -> LPAR CONST . literal RPAR [ RPAR LPAR ]
-- On NAT shift to state 168
-- On INT shift to state 169
-- On FLOAT shift to state 170
-- On literal shift to state 390

State 390:
const -> LPAR CONST literal . RPAR [ RPAR LPAR ]
-- On RPAR shift to state 391

State 391:
const -> LPAR CONST literal RPAR . [ RPAR LPAR ]
-- On RPAR reduce production const -> LPAR CONST literal RPAR
-- On LPAR reduce production const -> LPAR CONST literal RPAR

State 392:
action -> LPAR INVOKE module_var_opt name const_list . RPAR [ STRING RPAR LPAR EOF ]
-- On RPAR shift to state 393

State 393:
action -> LPAR INVOKE module_var_opt name const_list RPAR . [ STRING RPAR LPAR EOF ]
-- On STRING reduce production action -> LPAR INVOKE module_var_opt name const_list RPAR
-- On RPAR reduce production action -> LPAR INVOKE module_var_opt name const_list RPAR
-- On LPAR reduce production action -> LPAR INVOKE module_var_opt name const_list RPAR
-- On EOF reduce production action -> LPAR INVOKE module_var_opt name const_list RPAR

State 394:
const_list -> const . const_list [ RPAR ]
-- On LPAR shift to state 388
-- On const_list shift to state 395
-- On const shift to state 394
-- On RPAR reduce production const_list -> 

State 395:
const_list -> const const_list . [ RPAR ]
-- On RPAR reduce production const_list -> const const_list

State 396:
meta -> LPAR INPUT . script_var_opt STRING RPAR [ RPAR LPAR EOF ]
-- On VAR shift to state 365
-- On script_var_opt shift to state 397
-- On STRING reduce production script_var_opt -> 

State 397:
meta -> LPAR INPUT script_var_opt . STRING RPAR [ RPAR LPAR EOF ]
-- On STRING shift to state 398

State 398:
meta -> LPAR INPUT script_var_opt STRING . RPAR [ RPAR LPAR EOF ]
-- On RPAR shift to state 399

State 399:
meta -> LPAR INPUT script_var_opt STRING RPAR . [ RPAR LPAR EOF ]
-- On RPAR reduce production meta -> LPAR INPUT script_var_opt STRING RPAR
-- On LPAR reduce production meta -> LPAR INPUT script_var_opt STRING RPAR
-- On EOF reduce production meta -> LPAR INPUT script_var_opt STRING RPAR

State 400:
action -> LPAR GET . module_var_opt name RPAR [ STRING RPAR LPAR EOF ]
-- On VAR shift to state 66
-- On module_var_opt shift to state 401
-- On STRING reduce production module_var_opt -> 

State 401:
action -> LPAR GET module_var_opt . name RPAR [ STRING RPAR LPAR EOF ]
-- On STRING shift to state 35
-- On name shift to state 402

State 402:
action -> LPAR GET module_var_opt name . RPAR [ STRING RPAR LPAR EOF ]
-- On RPAR shift to state 403

State 403:
action -> LPAR GET module_var_opt name RPAR . [ STRING RPAR LPAR EOF ]
-- On STRING reduce production action -> LPAR GET module_var_opt name RPAR
-- On RPAR reduce production action -> LPAR GET module_var_opt name RPAR
-- On LPAR reduce production action -> LPAR GET module_var_opt name RPAR
-- On EOF reduce production action -> LPAR GET module_var_opt name RPAR

State 404:
assertion -> LPAR ASSERT_UNLINKABLE . script_module STRING RPAR [ RPAR LPAR EOF ]
-- On LPAR shift to state 405
-- On script_module shift to state 406
-- On module_ shift to state 409

State 405:
module_ -> LPAR . MODULE module_var_opt module_fields RPAR [ STRING ]
script_module -> LPAR . MODULE module_var_opt BIN string_list RPAR [ STRING ]
script_module -> LPAR . MODULE module_var_opt QUOTE string_list RPAR [ STRING ]
-- On MODULE shift to state 377

State 406:
assertion -> LPAR ASSERT_UNLINKABLE script_module . STRING RPAR [ RPAR LPAR EOF ]
-- On STRING shift to state 407

State 407:
assertion -> LPAR ASSERT_UNLINKABLE script_module STRING . RPAR [ RPAR LPAR EOF ]
-- On RPAR shift to state 408

State 408:
assertion -> LPAR ASSERT_UNLINKABLE script_module STRING RPAR . [ RPAR LPAR EOF ]
-- On RPAR reduce production assertion -> LPAR ASSERT_UNLINKABLE script_module STRING RPAR
-- On LPAR reduce production assertion -> LPAR ASSERT_UNLINKABLE script_module STRING RPAR
-- On EOF reduce production assertion -> LPAR ASSERT_UNLINKABLE script_module STRING RPAR

State 409:
script_module -> module_ . [ STRING RPAR LPAR EOF ]
-- On STRING reduce production script_module -> module_
-- On RPAR reduce production script_module -> module_
-- On LPAR reduce production script_module -> module_
-- On EOF reduce production script_module -> module_

State 410:
assertion -> LPAR ASSERT_TRAP . script_module STRING RPAR [ RPAR LPAR EOF ]
assertion -> LPAR ASSERT_TRAP . action STRING RPAR [ RPAR LPAR EOF ]
-- On LPAR shift to state 411
-- On script_module shift to state 412
-- On module_ shift to state 409
-- On action shift to state 415

State 411:
action -> LPAR . INVOKE module_var_opt name const_list RPAR [ STRING ]
action -> LPAR . GET module_var_opt name RPAR [ STRING ]
module_ -> LPAR . MODULE module_var_opt module_fields RPAR [ STRING ]
script_module -> LPAR . MODULE module_var_opt BIN string_list RPAR [ STRING ]
script_module -> LPAR . MODULE module_var_opt QUOTE string_list RPAR [ STRING ]
-- On MODULE shift to state 377
-- On INVOKE shift to state 385
-- On GET shift to state 400

State 412:
assertion -> LPAR ASSERT_TRAP script_module . STRING RPAR [ RPAR LPAR EOF ]
-- On STRING shift to state 413

State 413:
assertion -> LPAR ASSERT_TRAP script_module STRING . RPAR [ RPAR LPAR EOF ]
-- On RPAR shift to state 414

State 414:
assertion -> LPAR ASSERT_TRAP script_module STRING RPAR . [ RPAR LPAR EOF ]
-- On RPAR reduce production assertion -> LPAR ASSERT_TRAP script_module STRING RPAR
-- On LPAR reduce production assertion -> LPAR ASSERT_TRAP script_module STRING RPAR
-- On EOF reduce production assertion -> LPAR ASSERT_TRAP script_module STRING RPAR

State 415:
assertion -> LPAR ASSERT_TRAP action . STRING RPAR [ RPAR LPAR EOF ]
-- On STRING shift to state 416

State 416:
assertion -> LPAR ASSERT_TRAP action STRING . RPAR [ RPAR LPAR EOF ]
-- On RPAR shift to state 417

State 417:
assertion -> LPAR ASSERT_TRAP action STRING RPAR . [ RPAR LPAR EOF ]
-- On RPAR reduce production assertion -> LPAR ASSERT_TRAP action STRING RPAR
-- On LPAR reduce production assertion -> LPAR ASSERT_TRAP action STRING RPAR
-- On EOF reduce production assertion -> LPAR ASSERT_TRAP action STRING RPAR

State 418:
assertion -> LPAR ASSERT_RETURN_CANONICAL_NAN . action RPAR [ RPAR LPAR EOF ]
-- On LPAR shift to state 419
-- On action shift to state 420

State 419:
action -> LPAR . INVOKE module_var_opt name const_list RPAR [ STRING RPAR LPAR ]
action -> LPAR . GET module_var_opt name RPAR [ STRING RPAR LPAR ]
-- On INVOKE shift to state 385
-- On GET shift to state 400

State 420:
assertion -> LPAR ASSERT_RETURN_CANONICAL_NAN action . RPAR [ RPAR LPAR EOF ]
-- On RPAR shift to state 421

State 421:
assertion -> LPAR ASSERT_RETURN_CANONICAL_NAN action RPAR . [ RPAR LPAR EOF ]
-- On RPAR reduce production assertion -> LPAR ASSERT_RETURN_CANONICAL_NAN action RPAR
-- On LPAR reduce production assertion -> LPAR ASSERT_RETURN_CANONICAL_NAN action RPAR
-- On EOF reduce production assertion -> LPAR ASSERT_RETURN_CANONICAL_NAN action RPAR

State 422:
assertion -> LPAR ASSERT_RETURN_ARITHMETIC_NAN . action RPAR [ RPAR LPAR EOF ]
-- On LPAR shift to state 419
-- On action shift to state 423

State 423:
assertion -> LPAR ASSERT_RETURN_ARITHMETIC_NAN action . RPAR [ RPAR LPAR EOF ]
-- On RPAR shift to state 424

State 424:
assertion -> LPAR ASSERT_RETURN_ARITHMETIC_NAN action RPAR . [ RPAR LPAR EOF ]
-- On RPAR reduce production assertion -> LPAR ASSERT_RETURN_ARITHMETIC_NAN action RPAR
-- On LPAR reduce production assertion -> LPAR ASSERT_RETURN_ARITHMETIC_NAN action RPAR
-- On EOF reduce production assertion -> LPAR ASSERT_RETURN_ARITHMETIC_NAN action RPAR

State 425:
assertion -> LPAR ASSERT_RETURN . action const_list RPAR [ RPAR LPAR EOF ]
-- On LPAR shift to state 419
-- On action shift to state 426

State 426:
assertion -> LPAR ASSERT_RETURN action . const_list RPAR [ RPAR LPAR EOF ]
-- On LPAR shift to state 388
-- On const_list shift to state 427
-- On const shift to state 394
-- On RPAR reduce production const_list -> 

State 427:
assertion -> LPAR ASSERT_RETURN action const_list . RPAR [ RPAR LPAR EOF ]
-- On RPAR shift to state 428

State 428:
assertion -> LPAR ASSERT_RETURN action const_list RPAR . [ RPAR LPAR EOF ]
-- On RPAR reduce production assertion -> LPAR ASSERT_RETURN action const_list RPAR
-- On LPAR reduce production assertion -> LPAR ASSERT_RETURN action const_list RPAR
-- On EOF reduce production assertion -> LPAR ASSERT_RETURN action const_list RPAR

State 429:
assertion -> LPAR ASSERT_MALFORMED . script_module STRING RPAR [ RPAR LPAR EOF ]
-- On LPAR shift to state 405
-- On script_module shift to state 430
-- On module_ shift to state 409

State 430:
assertion -> LPAR ASSERT_MALFORMED script_module . STRING RPAR [ RPAR LPAR EOF ]
-- On STRING shift to state 431

State 431:
assertion -> LPAR ASSERT_MALFORMED script_module STRING . RPAR [ RPAR LPAR EOF ]
-- On RPAR shift to state 432

State 432:
assertion -> LPAR ASSERT_MALFORMED script_module STRING RPAR . [ RPAR LPAR EOF ]
-- On RPAR reduce production assertion -> LPAR ASSERT_MALFORMED script_module STRING RPAR
-- On LPAR reduce production assertion -> LPAR ASSERT_MALFORMED script_module STRING RPAR
-- On EOF reduce production assertion -> LPAR ASSERT_MALFORMED script_module STRING RPAR

State 433:
assertion -> LPAR ASSERT_INVALID . script_module STRING RPAR [ RPAR LPAR EOF ]
-- On LPAR shift to state 405
-- On script_module shift to state 434
-- On module_ shift to state 409

State 434:
assertion -> LPAR ASSERT_INVALID script_module . STRING RPAR [ RPAR LPAR EOF ]
-- On STRING shift to state 435

State 435:
assertion -> LPAR ASSERT_INVALID script_module STRING . RPAR [ RPAR LPAR EOF ]
-- On RPAR shift to state 436

State 436:
assertion -> LPAR ASSERT_INVALID script_module STRING RPAR . [ RPAR LPAR EOF ]
-- On RPAR reduce production assertion -> LPAR ASSERT_INVALID script_module STRING RPAR
-- On LPAR reduce production assertion -> LPAR ASSERT_INVALID script_module STRING RPAR
-- On EOF reduce production assertion -> LPAR ASSERT_INVALID script_module STRING RPAR

State 437:
assertion -> LPAR ASSERT_EXHAUSTION . action STRING RPAR [ RPAR LPAR EOF ]
-- On LPAR shift to state 419
-- On action shift to state 438

State 438:
assertion -> LPAR ASSERT_EXHAUSTION action . STRING RPAR [ RPAR LPAR EOF ]
-- On STRING shift to state 439

State 439:
assertion -> LPAR ASSERT_EXHAUSTION action STRING . RPAR [ RPAR LPAR EOF ]
-- On RPAR shift to state 440

State 440:
assertion -> LPAR ASSERT_EXHAUSTION action STRING RPAR . [ RPAR LPAR EOF ]
-- On RPAR reduce production assertion -> LPAR ASSERT_EXHAUSTION action STRING RPAR
-- On LPAR reduce production assertion -> LPAR ASSERT_EXHAUSTION action STRING RPAR
-- On EOF reduce production assertion -> LPAR ASSERT_EXHAUSTION action STRING RPAR

State 441:
cmd -> script_module . [ RPAR LPAR EOF ]
-- On RPAR reduce production cmd -> script_module
-- On LPAR reduce production cmd -> script_module
-- On EOF reduce production cmd -> script_module

State 442:
cmd -> meta . [ RPAR LPAR EOF ]
-- On RPAR reduce production cmd -> meta
-- On LPAR reduce production cmd -> meta
-- On EOF reduce production cmd -> meta

State 443:
meta -> LPAR SCRIPT script_var_opt cmd_list . RPAR [ RPAR LPAR EOF ]
-- On RPAR shift to state 444

State 444:
meta -> LPAR SCRIPT script_var_opt cmd_list RPAR . [ RPAR LPAR EOF ]
-- On RPAR reduce production meta -> LPAR SCRIPT script_var_opt cmd_list RPAR
-- On LPAR reduce production meta -> LPAR SCRIPT script_var_opt cmd_list RPAR
-- On EOF reduce production meta -> LPAR SCRIPT script_var_opt cmd_list RPAR

State 445:
cmd_list -> cmd . cmd_list [ RPAR EOF ]
-- On LPAR shift to state 367
-- On script_module shift to state 441
-- On module_ shift to state 409
-- On meta shift to state 442
-- On cmd_list shift to state 446
-- On cmd shift to state 445
-- On assertion shift to state 447
-- On action shift to state 448
-- On RPAR reduce production cmd_list -> 
-- On EOF reduce production cmd_list -> 

State 446:
cmd_list -> cmd cmd_list . [ RPAR EOF ]
-- On RPAR reduce production cmd_list -> cmd cmd_list
-- On EOF reduce production cmd_list -> cmd cmd_list

State 447:
cmd -> assertion . [ RPAR LPAR EOF ]
-- On RPAR reduce production cmd -> assertion
-- On LPAR reduce production cmd -> assertion
-- On EOF reduce production cmd -> assertion

State 448:
cmd -> action . [ RPAR LPAR EOF ]
-- On RPAR reduce production cmd -> action
-- On LPAR reduce production cmd -> action
-- On EOF reduce production cmd -> action

State 449:
script' -> script . [ # ]
-- On # accept script

State 450:
inline_module1 -> module_fields1 . [ EOF ]
-- On EOF reduce production inline_module1 -> module_fields1

State 451:
script -> inline_module1 . EOF [ # ]
-- On EOF shift to state 452

State 452:
script -> inline_module1 EOF . [ # ]
-- On # reduce production script -> inline_module1 EOF

State 453:
script -> cmd_list . EOF [ # ]
-- On EOF shift to state 454

State 454:
script -> cmd_list EOF . [ # ]
-- On # reduce production script -> cmd_list EOF

State 455:
script1' -> . script1 [ # ]
-- On LPAR shift to state 456
-- On script_module shift to state 526
-- On script1 shift to state 527
-- On module_ shift to state 528
-- On meta shift to state 529
-- On cmd shift to state 530
-- On assertion shift to state 531
-- On action shift to state 532

State 456:
action -> LPAR . INVOKE module_var_opt name const_list RPAR [ # ]
action -> LPAR . GET module_var_opt name RPAR [ # ]
assertion -> LPAR . ASSERT_MALFORMED script_module STRING RPAR [ # ]
assertion -> LPAR . ASSERT_INVALID script_module STRING RPAR [ # ]
assertion -> LPAR . ASSERT_UNLINKABLE script_module STRING RPAR [ # ]
assertion -> LPAR . ASSERT_TRAP script_module STRING RPAR [ # ]
assertion -> LPAR . ASSERT_RETURN action const_list RPAR [ # ]
assertion -> LPAR . ASSERT_RETURN_CANONICAL_NAN action RPAR [ # ]
assertion -> LPAR . ASSERT_RETURN_ARITHMETIC_NAN action RPAR [ # ]
assertion -> LPAR . ASSERT_TRAP action STRING RPAR [ # ]
assertion -> LPAR . ASSERT_EXHAUSTION action STRING RPAR [ # ]
cmd -> LPAR . REGISTER name module_var_opt RPAR [ # ]
meta -> LPAR . SCRIPT script_var_opt cmd_list RPAR [ # ]
meta -> LPAR . INPUT script_var_opt STRING RPAR [ # ]
meta -> LPAR . OUTPUT script_var_opt STRING RPAR [ # ]
meta -> LPAR . OUTPUT script_var_opt RPAR [ # ]
module_ -> LPAR . MODULE module_var_opt module_fields RPAR [ # ]
script_module -> LPAR . MODULE module_var_opt BIN string_list RPAR [ # ]
script_module -> LPAR . MODULE module_var_opt QUOTE string_list RPAR [ # ]
-- On SCRIPT shift to state 457
-- On REGISTER shift to state 461
-- On OUTPUT shift to state 465
-- On MODULE shift to state 470
-- On INVOKE shift to state 480
-- On INPUT shift to state 485
-- On GET shift to state 489
-- On ASSERT_UNLINKABLE shift to state 493
-- On ASSERT_TRAP shift to state 497
-- On ASSERT_RETURN_CANONICAL_NAN shift to state 504
-- On ASSERT_RETURN_ARITHMETIC_NAN shift to state 507
-- On ASSERT_RETURN shift to state 510
-- On ASSERT_MALFORMED shift to state 514
-- On ASSERT_INVALID shift to state 518
-- On ASSERT_EXHAUSTION shift to state 522

State 457:
meta -> LPAR SCRIPT . script_var_opt cmd_list RPAR [ # ]
-- On VAR shift to state 365
-- On script_var_opt shift to state 458
-- On RPAR reduce production script_var_opt -> 
-- On LPAR reduce production script_var_opt -> 

State 458:
meta -> LPAR SCRIPT script_var_opt . cmd_list RPAR [ # ]
-- On LPAR shift to state 367
-- On script_module shift to state 441
-- On module_ shift to state 409
-- On meta shift to state 442
-- On cmd_list shift to state 459
-- On cmd shift to state 445
-- On assertion shift to state 447
-- On action shift to state 448
-- On RPAR reduce production cmd_list -> 

State 459:
meta -> LPAR SCRIPT script_var_opt cmd_list . RPAR [ # ]
-- On RPAR shift to state 460

State 460:
meta -> LPAR SCRIPT script_var_opt cmd_list RPAR . [ # ]
-- On # reduce production meta -> LPAR SCRIPT script_var_opt cmd_list RPAR

State 461:
cmd -> LPAR REGISTER . name module_var_opt RPAR [ # ]
-- On STRING shift to state 35
-- On name shift to state 462

State 462:
cmd -> LPAR REGISTER name . module_var_opt RPAR [ # ]
-- On VAR shift to state 66
-- On module_var_opt shift to state 463
-- On RPAR reduce production module_var_opt -> 

State 463:
cmd -> LPAR REGISTER name module_var_opt . RPAR [ # ]
-- On RPAR shift to state 464

State 464:
cmd -> LPAR REGISTER name module_var_opt RPAR . [ # ]
-- On # reduce production cmd -> LPAR REGISTER name module_var_opt RPAR

State 465:
meta -> LPAR OUTPUT . script_var_opt STRING RPAR [ # ]
meta -> LPAR OUTPUT . script_var_opt RPAR [ # ]
-- On VAR shift to state 365
-- On script_var_opt shift to state 466
-- On STRING reduce production script_var_opt -> 
-- On RPAR reduce production script_var_opt -> 

State 466:
meta -> LPAR OUTPUT script_var_opt . STRING RPAR [ # ]
meta -> LPAR OUTPUT script_var_opt . RPAR [ # ]
-- On STRING shift to state 467
-- On RPAR shift to state 469

State 467:
meta -> LPAR OUTPUT script_var_opt STRING . RPAR [ # ]
-- On RPAR shift to state 468

State 468:
meta -> LPAR OUTPUT script_var_opt STRING RPAR . [ # ]
-- On # reduce production meta -> LPAR OUTPUT script_var_opt STRING RPAR

State 469:
meta -> LPAR OUTPUT script_var_opt RPAR . [ # ]
-- On # reduce production meta -> LPAR OUTPUT script_var_opt RPAR

State 470:
module_ -> LPAR MODULE . module_var_opt module_fields RPAR [ # ]
script_module -> LPAR MODULE . module_var_opt BIN string_list RPAR [ # ]
script_module -> LPAR MODULE . module_var_opt QUOTE string_list RPAR [ # ]
-- On VAR shift to state 66
-- On module_var_opt shift to state 471
-- On RPAR reduce production module_var_opt -> 
-- On QUOTE reduce production module_var_opt -> 
-- On LPAR reduce production module_var_opt -> 
-- On BIN reduce production module_var_opt -> 

State 471:
module_ -> LPAR MODULE module_var_opt . module_fields RPAR [ # ]
script_module -> LPAR MODULE module_var_opt . BIN string_list RPAR [ # ]
script_module -> LPAR MODULE module_var_opt . QUOTE string_list RPAR [ # ]
-- On QUOTE shift to state 472
-- On LPAR shift to state 68
-- On BIN shift to state 475
-- On type_def shift to state 333
-- On table shift to state 334
-- On start shift to state 335
-- On module_fields1 shift to state 336
-- On module_fields shift to state 478
-- On memory shift to state 338
-- On import shift to state 340
-- On global shift to state 342
-- On func shift to state 344
-- On export shift to state 346
-- On elem shift to state 348
-- On data shift to state 350
-- On RPAR reduce production module_fields -> 

State 472:
script_module -> LPAR MODULE module_var_opt QUOTE . string_list RPAR [ # ]
-- On string_list shift to state 473
-- On STRING reduce production string_list -> 
-- On RPAR reduce production string_list -> 

State 473:
script_module -> LPAR MODULE module_var_opt QUOTE string_list . RPAR [ # ]
string_list -> string_list . STRING [ STRING RPAR ]
-- On STRING shift to state 74
-- On RPAR shift to state 474

State 474:
script_module -> LPAR MODULE module_var_opt QUOTE string_list RPAR . [ # ]
-- On # reduce production script_module -> LPAR MODULE module_var_opt QUOTE string_list RPAR

State 475:
script_module -> LPAR MODULE module_var_opt BIN . string_list RPAR [ # ]
-- On string_list shift to state 476
-- On STRING reduce production string_list -> 
-- On RPAR reduce production string_list -> 

State 476:
script_module -> LPAR MODULE module_var_opt BIN string_list . RPAR [ # ]
string_list -> string_list . STRING [ STRING RPAR ]
-- On STRING shift to state 74
-- On RPAR shift to state 477

State 477:
script_module -> LPAR MODULE module_var_opt BIN string_list RPAR . [ # ]
-- On # reduce production script_module -> LPAR MODULE module_var_opt BIN string_list RPAR

State 478:
module_ -> LPAR MODULE module_var_opt module_fields . RPAR [ # ]
-- On RPAR shift to state 479

State 479:
module_ -> LPAR MODULE module_var_opt module_fields RPAR . [ # ]
-- On # reduce production module_ -> LPAR MODULE module_var_opt module_fields RPAR

State 480:
action -> LPAR INVOKE . module_var_opt name const_list RPAR [ # ]
-- On VAR shift to state 66
-- On module_var_opt shift to state 481
-- On STRING reduce production module_var_opt -> 

State 481:
action -> LPAR INVOKE module_var_opt . name const_list RPAR [ # ]
-- On STRING shift to state 35
-- On name shift to state 482

State 482:
action -> LPAR INVOKE module_var_opt name . const_list RPAR [ # ]
-- On LPAR shift to state 388
-- On const_list shift to state 483
-- On const shift to state 394
-- On RPAR reduce production const_list -> 

State 483:
action -> LPAR INVOKE module_var_opt name const_list . RPAR [ # ]
-- On RPAR shift to state 484

State 484:
action -> LPAR INVOKE module_var_opt name const_list RPAR . [ # ]
-- On # reduce production action -> LPAR INVOKE module_var_opt name const_list RPAR

State 485:
meta -> LPAR INPUT . script_var_opt STRING RPAR [ # ]
-- On VAR shift to state 365
-- On script_var_opt shift to state 486
-- On STRING reduce production script_var_opt -> 

State 486:
meta -> LPAR INPUT script_var_opt . STRING RPAR [ # ]
-- On STRING shift to state 487

State 487:
meta -> LPAR INPUT script_var_opt STRING . RPAR [ # ]
-- On RPAR shift to state 488

State 488:
meta -> LPAR INPUT script_var_opt STRING RPAR . [ # ]
-- On # reduce production meta -> LPAR INPUT script_var_opt STRING RPAR

State 489:
action -> LPAR GET . module_var_opt name RPAR [ # ]
-- On VAR shift to state 66
-- On module_var_opt shift to state 490
-- On STRING reduce production module_var_opt -> 

State 490:
action -> LPAR GET module_var_opt . name RPAR [ # ]
-- On STRING shift to state 35
-- On name shift to state 491

State 491:
action -> LPAR GET module_var_opt name . RPAR [ # ]
-- On RPAR shift to state 492

State 492:
action -> LPAR GET module_var_opt name RPAR . [ # ]
-- On # reduce production action -> LPAR GET module_var_opt name RPAR

State 493:
assertion -> LPAR ASSERT_UNLINKABLE . script_module STRING RPAR [ # ]
-- On LPAR shift to state 405
-- On script_module shift to state 494
-- On module_ shift to state 409

State 494:
assertion -> LPAR ASSERT_UNLINKABLE script_module . STRING RPAR [ # ]
-- On STRING shift to state 495

State 495:
assertion -> LPAR ASSERT_UNLINKABLE script_module STRING . RPAR [ # ]
-- On RPAR shift to state 496

State 496:
assertion -> LPAR ASSERT_UNLINKABLE script_module STRING RPAR . [ # ]
-- On # reduce production assertion -> LPAR ASSERT_UNLINKABLE script_module STRING RPAR

State 497:
assertion -> LPAR ASSERT_TRAP . script_module STRING RPAR [ # ]
assertion -> LPAR ASSERT_TRAP . action STRING RPAR [ # ]
-- On LPAR shift to state 411
-- On script_module shift to state 498
-- On module_ shift to state 409
-- On action shift to state 501

State 498:
assertion -> LPAR ASSERT_TRAP script_module . STRING RPAR [ # ]
-- On STRING shift to state 499

State 499:
assertion -> LPAR ASSERT_TRAP script_module STRING . RPAR [ # ]
-- On RPAR shift to state 500

State 500:
assertion -> LPAR ASSERT_TRAP script_module STRING RPAR . [ # ]
-- On # reduce production assertion -> LPAR ASSERT_TRAP script_module STRING RPAR

State 501:
assertion -> LPAR ASSERT_TRAP action . STRING RPAR [ # ]
-- On STRING shift to state 502

State 502:
assertion -> LPAR ASSERT_TRAP action STRING . RPAR [ # ]
-- On RPAR shift to state 503

State 503:
assertion -> LPAR ASSERT_TRAP action STRING RPAR . [ # ]
-- On # reduce production assertion -> LPAR ASSERT_TRAP action STRING RPAR

State 504:
assertion -> LPAR ASSERT_RETURN_CANONICAL_NAN . action RPAR [ # ]
-- On LPAR shift to state 419
-- On action shift to state 505

State 505:
assertion -> LPAR ASSERT_RETURN_CANONICAL_NAN action . RPAR [ # ]
-- On RPAR shift to state 506

State 506:
assertion -> LPAR ASSERT_RETURN_CANONICAL_NAN action RPAR . [ # ]
-- On # reduce production assertion -> LPAR ASSERT_RETURN_CANONICAL_NAN action RPAR

State 507:
assertion -> LPAR ASSERT_RETURN_ARITHMETIC_NAN . action RPAR [ # ]
-- On LPAR shift to state 419
-- On action shift to state 508

State 508:
assertion -> LPAR ASSERT_RETURN_ARITHMETIC_NAN action . RPAR [ # ]
-- On RPAR shift to state 509

State 509:
assertion -> LPAR ASSERT_RETURN_ARITHMETIC_NAN action RPAR . [ # ]
-- On # reduce production assertion -> LPAR ASSERT_RETURN_ARITHMETIC_NAN action RPAR

State 510:
assertion -> LPAR ASSERT_RETURN . action const_list RPAR [ # ]
-- On LPAR shift to state 419
-- On action shift to state 511

State 511:
assertion -> LPAR ASSERT_RETURN action . const_list RPAR [ # ]
-- On LPAR shift to state 388
-- On const_list shift to state 512
-- On const shift to state 394
-- On RPAR reduce production const_list -> 

State 512:
assertion -> LPAR ASSERT_RETURN action const_list . RPAR [ # ]
-- On RPAR shift to state 513

State 513:
assertion -> LPAR ASSERT_RETURN action const_list RPAR . [ # ]
-- On # reduce production assertion -> LPAR ASSERT_RETURN action const_list RPAR

State 514:
assertion -> LPAR ASSERT_MALFORMED . script_module STRING RPAR [ # ]
-- On LPAR shift to state 405
-- On script_module shift to state 515
-- On module_ shift to state 409

State 515:
assertion -> LPAR ASSERT_MALFORMED script_module . STRING RPAR [ # ]
-- On STRING shift to state 516

State 516:
assertion -> LPAR ASSERT_MALFORMED script_module STRING . RPAR [ # ]
-- On RPAR shift to state 517

State 517:
assertion -> LPAR ASSERT_MALFORMED script_module STRING RPAR . [ # ]
-- On # reduce production assertion -> LPAR ASSERT_MALFORMED script_module STRING RPAR

State 518:
assertion -> LPAR ASSERT_INVALID . script_module STRING RPAR [ # ]
-- On LPAR shift to state 405
-- On script_module shift to state 519
-- On module_ shift to state 409

State 519:
assertion -> LPAR ASSERT_INVALID script_module . STRING RPAR [ # ]
-- On STRING shift to state 520

State 520:
assertion -> LPAR ASSERT_INVALID script_module STRING . RPAR [ # ]
-- On RPAR shift to state 521

State 521:
assertion -> LPAR ASSERT_INVALID script_module STRING RPAR . [ # ]
-- On # reduce production assertion -> LPAR ASSERT_INVALID script_module STRING RPAR

State 522:
assertion -> LPAR ASSERT_EXHAUSTION . action STRING RPAR [ # ]
-- On LPAR shift to state 419
-- On action shift to state 523

State 523:
assertion -> LPAR ASSERT_EXHAUSTION action . STRING RPAR [ # ]
-- On STRING shift to state 524

State 524:
assertion -> LPAR ASSERT_EXHAUSTION action STRING . RPAR [ # ]
-- On RPAR shift to state 525

State 525:
assertion -> LPAR ASSERT_EXHAUSTION action STRING RPAR . [ # ]
-- On # reduce production assertion -> LPAR ASSERT_EXHAUSTION action STRING RPAR

State 526:
cmd -> script_module . [ # ]
-- On # reduce production cmd -> script_module

State 527:
script1' -> script1 . [ # ]
-- On # accept script1

State 528:
script_module -> module_ . [ # ]
-- On # reduce production script_module -> module_

State 529:
cmd -> meta . [ # ]
-- On # reduce production cmd -> meta

State 530:
script1 -> cmd . [ # ]
-- On # reduce production script1 -> cmd

State 531:
cmd -> assertion . [ # ]
-- On # reduce production cmd -> assertion

State 532:
cmd -> action . [ # ]
-- On # reduce production cmd -> action

