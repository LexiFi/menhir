File "wasm.1.0-parser.mly", line 158, characters 39-58:
Warning: the token ASSERT_SOFT_INVALID is unused.
%{
open Source
open Types
open Ast
open Operators
open Script


(* Error handling *)

let error at msg = raise (Script.Syntax (at, msg))

let parse_error msg =
  error Source.no_region
    (if msg = "syntax error" then "unexpected token" else msg)


(* Position handling *)

let position_to_pos position =
  { file = position.Lexing.pos_fname;
    line = position.Lexing.pos_lnum;
    column = position.Lexing.pos_cnum - position.Lexing.pos_bol
  }

let positions_to_region position1 position2 =
  { left = position_to_pos position1;
    right = position_to_pos position2
  }

let at () =
  positions_to_region (Parsing.symbol_start_pos ()) (Parsing.symbol_end_pos ())
let ati i =
  positions_to_region (Parsing.rhs_start_pos i) (Parsing.rhs_end_pos i)


(* Literals *)

let literal f s =
  try f s with Failure _ -> error s.at "constant out of range"

let nat s at =
  try
    let n = int_of_string s in
    if n >= 0 then n else raise (Failure "")
  with Failure _ -> error at "integer constant out of range"

let nat32 s at =
  try I32.of_string_u s with Failure _ -> error at "i32 constant out of range"

let name s at =
  try Utf8.decode s with Utf8.Utf8 -> error at "invalid UTF-8 encoding"


(* Symbolic variables *)

module VarMap = Map.Make(String)

type space = {mutable map : int32 VarMap.t; mutable count : int32}
let empty () = {map = VarMap.empty; count = 0l}

type types = {space : space; mutable list : type_ list}
let empty_types () = {space = empty (); list = []}

type context =
  { types : types; tables : space; memories : space;
    funcs : space; locals : space; globals : space; labels : int32 VarMap.t }

let empty_context () =
  { types = empty_types (); tables = empty (); memories = empty ();
    funcs = empty (); locals = empty (); globals = empty ();
    labels = VarMap.empty }

let enter_func (c : context) =
  {c with labels = VarMap.empty; locals = empty ()}

let lookup category space x =
  try VarMap.find x.it space.map
  with Not_found -> error x.at ("unknown " ^ category ^ " " ^ x.it)

let type_ (c : context) x = lookup "type" c.types.space x
let func (c : context) x = lookup "function" c.funcs x
let local (c : context) x = lookup "local" c.locals x
let global (c : context) x = lookup "global" c.globals x
let table (c : context) x = lookup "table" c.tables x
let memory (c : context) x = lookup "memory" c.memories x
let label (c : context) x =
  try VarMap.find x.it c.labels
  with Not_found -> error x.at ("unknown label " ^ x.it)

let func_type (c : context) x =
  try (Lib.List32.nth c.types.list x.it).it
  with Failure _ -> error x.at ("unknown type " ^ Int32.to_string x.it)


let bind category space x =
  if VarMap.mem x.it space.map then
    error x.at ("duplicate " ^ category ^ " " ^ x.it);
  let i = space.count in
  space.map <- VarMap.add x.it space.count space.map;
  space.count <- Int32.add space.count 1l;
  if space.count = 0l then
    error x.at ("too many " ^ category ^ " bindings");
  i

let bind_type (c : context) x ty =
  c.types.list <- c.types.list @ [ty];
  bind "type" c.types.space x
let bind_func (c : context) x = bind "function" c.funcs x
let bind_local (c : context) x = bind "local" c.locals x
let bind_global (c : context) x = bind "global" c.globals x
let bind_table (c : context) x = bind "table" c.tables x
let bind_memory (c : context) x = bind "memory" c.memories x
let bind_label (c : context) x =
  {c with labels = VarMap.add x.it 0l (VarMap.map (Int32.add 1l) c.labels)}

let anon category space n =
  let i = space.count in
  space.count <- Int32.add space.count n;
  if I32.lt_u space.count n then
    error no_region ("too many " ^ category ^ " bindings");
  i

let anon_type (c : context) ty =
  c.types.list <- c.types.list @ [ty];
  anon "type" c.types.space 1l
let anon_func (c : context) = anon "function" c.funcs 1l
let anon_locals (c : context) ts =
  ignore (anon "local" c.locals (Lib.List32.length ts))
let anon_global (c : context) = anon "global" c.globals 1l
let anon_table (c : context) = anon "table" c.tables 1l
let anon_memory (c : context) = anon "memory" c.memories 1l
let anon_label (c : context) =
  {c with labels = VarMap.map (Int32.add 1l) c.labels}

let inline_type (c : context) ft at =
  match Lib.List.index_where (fun ty -> ty.it = ft) c.types.list with
  | Some i -> Int32.of_int i @@ at
  | None -> anon_type c (ft @@ at) @@ at

let inline_type_explicit (c : context) x ft at =
  if ft <> FuncType ([], []) && ft <> func_type c x then
    error at "inline function type does not match explicit type";
  x

%}
%start module1
%start script
%start script1
%token <string> ALIGN_EQ_NAT
%token ANYFUNC
%token ASSERT_EXHAUSTION
%token ASSERT_INVALID
%token ASSERT_MALFORMED
%token ASSERT_RETURN
%token ASSERT_RETURN_ARITHMETIC_NAN
%token ASSERT_RETURN_CANONICAL_NAN
%token ASSERT_SOFT_INVALID
%token ASSERT_TRAP
%token ASSERT_UNLINKABLE
%token BIN
%token <Ast.instr'> BINARY
%token BLOCK
%token BR
%token BR_IF
%token BR_TABLE
%token CALL
%token CALL_INDIRECT
%token <Ast.instr'> COMPARE
%token <string Source.phrase -> Ast.instr' * Values.value> CONST
%token <Ast.instr'> CONVERT
%token CURRENT_MEMORY
%token DATA
%token DROP
%token ELEM
%token ELSE
%token END
%token EOF
%token EXPORT
%token <string> FLOAT
%token FUNC
%token GET
%token GET_GLOBAL
%token GET_LOCAL
%token GLOBAL
%token GROW_MEMORY
%token IF
%token IMPORT
%token INPUT
%token <string> INT
%token INVOKE
%token <int option -> Memory.offset -> Ast.instr'> LOAD
%token LOCAL
%token LOOP
%token LPAR
%token MEMORY
%token MODULE
%token MUT
%token <string> NAT
%token NOP
%token OFFSET
%token <string> OFFSET_EQ_NAT
%token OUTPUT
%token PARAM
%token QUOTE
%token REGISTER
%token RESULT
%token RETURN
%token RPAR
%token SCRIPT
%token SELECT
%token SET_GLOBAL
%token SET_LOCAL
%token START
%token <int option -> Memory.offset -> Ast.instr'> STORE
%token <string> STRING
%token TABLE
%token TEE_LOCAL
%token <Ast.instr'> TEST
%token THEN
%token TYPE
%token <Ast.instr'> UNARY
%token UNREACHABLE
%token <Types.value_type> VALUE_TYPE
%token <string> VAR
%nonassoc LOW
%nonassoc VAR
%type <Script.var option * Script.definition> module1
%type <Script.script> script
%type <Script.script> script1
%%

name:
  _1 = STRING
    {           ( name _1 (at ()) )}

string_list:
  
    {                ( "" )}
| _1 = string_list _2 = STRING
    {                       ( _1 ^ _2 )}

value_type_list:
  
    {                ( [] )}
| _1 = VALUE_TYPE _2 = value_type_list
    {                               ( _1 :: _2 )}

elem_type:
  _1 = ANYFUNC
    {            ( AnyFuncType )}

global_type:
  _1 = VALUE_TYPE
    {               ( GlobalType (_1, Immutable) )}
| _1 = LPAR _2 = MUT _3 = VALUE_TYPE _4 = RPAR
    {                             ( GlobalType (_3, Mutable) )}

func_type:
  _1 = LPAR _2 = FUNC _3 = func_sig _4 = RPAR
    {                            ( _3 )}

func_sig:
  
    {    ( FuncType ([], []) )}
| _1 = LPAR _2 = RESULT _3 = value_type_list _4 = RPAR _5 = func_sig
    {    ( let FuncType (ins, out) = _5 in
      if ins <> [] then error (at ()) "result before parameter";
      FuncType (ins, _3 @ out) )}
| _1 = LPAR _2 = PARAM _3 = value_type_list _4 = RPAR _5 = func_sig
    {    ( let FuncType (ins, out) = _5 in FuncType (_3 @ ins, out) )}
| _1 = LPAR _2 = PARAM _3 = bind_var _4 = VALUE_TYPE _5 = RPAR _6 = func_sig
    {    ( let FuncType (ins, out) = _6 in FuncType (_4 :: ins, out) )}

table_sig:
  _1 = limits _2 = elem_type
    {                     ( TableType (_1, _2) )}

memory_sig:
  _1 = limits
    {           ( MemoryType _1 )}

limits:
  _1 = NAT
    {        ( {min = nat32 _1 (ati 1); max = None} )}
| _1 = NAT _2 = NAT
    {            ( {min = nat32 _1 (ati 1); max = Some (nat32 _2 (ati 2))} )}

type_use:
  _1 = LPAR _2 = TYPE _3 = var _4 = RPAR
    {                       ( _3 )}

literal:
  _1 = NAT
    {        ( _1 @@ at () )}
| _1 = INT
    {        ( _1 @@ at () )}
| _1 = FLOAT
    {          ( _1 @@ at () )}

var:
  _1 = NAT
    {        ( let at = at () in fun c lookup -> nat32 _1 at @@ at )}
| _1 = VAR
    {        ( let at = at () in fun c lookup -> lookup c (_1 @@ at) @@ at )}

var_list:
  
    {                ( fun c lookup -> [] )}
| _1 = var _2 = var_list
    {                 ( fun c lookup -> _1 c lookup :: _2 c lookup )}

bind_var_opt:
  
    {                ( fun c anon bind -> anon c )}
| _1 = bind_var
    {             ( fun c anon bind -> bind c _1 )}

bind_var:
  _1 = VAR
    {        ( _1 @@ at () )}

labeling_opt:
   %prec LOW
    {    ( fun c xs ->
      List.iter (fun x -> error x.at "mismatching label") xs;
      anon_label c )}
| _1 = bind_var
    {    ( fun c xs ->
      List.iter
        (fun x -> if x.it <> _1.it then error x.at "mismatching label") xs;
      bind_label c _1 )}

labeling_end_opt:
   %prec LOW
    {                          ( [] )}
| _1 = bind_var
    {             ( [_1] )}

offset_opt:
  
    {                ( 0l )}
| _1 = OFFSET_EQ_NAT
    {                  ( nat32 _1 (at ()) )}

align_opt:
  
    {                ( None )}
| _1 = ALIGN_EQ_NAT
    {    ( let n = nat _1 (at ()) in
      if not (Lib.Int.is_power_of_two n) then
        error (at ()) "alignment must be a power of two";
      Some (Lib.Int.log2 n) )}

instr:
  _1 = plain_instr
    {                ( let at = at () in fun c -> [_1 c @@ at] )}
| _1 = block_instr
    {                ( let at = at () in fun c -> [_1 c @@ at] )}
| _1 = expr
    {         ( _1 )}

plain_instr:
  _1 = UNREACHABLE
    {                ( fun c -> unreachable )}
| _1 = NOP
    {        ( fun c -> nop )}
| _1 = BR _2 = var
    {           ( fun c -> br (_2 c label) )}
| _1 = BR_IF _2 = var
    {              ( fun c -> br_if (_2 c label) )}
| _1 = BR_TABLE _2 = var _3 = var_list
    {    ( fun c -> let xs, x = Lib.List.split_last (_2 c label :: _3 c label) in
      br_table xs x )}
| _1 = RETURN
    {           ( fun c -> return )}
| _1 = CALL _2 = var
    {             ( fun c -> call (_2 c func) )}
| _1 = CALL_INDIRECT _2 = var
    {                      ( fun c -> call_indirect (_2 c type_) )}
| _1 = DROP
    {         ( fun c -> drop )}
| _1 = SELECT
    {           ( fun c -> select )}
| _1 = GET_LOCAL _2 = var
    {                  ( fun c -> get_local (_2 c local) )}
| _1 = SET_LOCAL _2 = var
    {                  ( fun c -> set_local (_2 c local) )}
| _1 = TEE_LOCAL _2 = var
    {                  ( fun c -> tee_local (_2 c local) )}
| _1 = GET_GLOBAL _2 = var
    {                   ( fun c -> get_global (_2 c global) )}
| _1 = SET_GLOBAL _2 = var
    {                   ( fun c -> set_global (_2 c global) )}
| _1 = LOAD _2 = offset_opt _3 = align_opt
    {                              ( fun c -> _1 _3 _2 )}
| _1 = STORE _2 = offset_opt _3 = align_opt
    {                               ( fun c -> _1 _3 _2 )}
| _1 = CURRENT_MEMORY
    {                   ( fun c -> current_memory )}
| _1 = GROW_MEMORY
    {                ( fun c -> grow_memory )}
| _1 = CONST _2 = literal
    {                  ( fun c -> fst (literal _1 _2) )}
| _1 = TEST
    {         ( fun c -> _1 )}
| _1 = COMPARE
    {            ( fun c -> _1 )}
| _1 = UNARY
    {          ( fun c -> _1 )}
| _1 = BINARY
    {           ( fun c -> _1 )}
| _1 = CONVERT
    {            ( fun c -> _1 )}

block_instr:
  _1 = BLOCK _2 = labeling_opt _3 = block _4 = END _5 = labeling_end_opt
    {    ( fun c -> let c' = _2 c _5 in let ts, es = _3 c' in block ts es )}
| _1 = LOOP _2 = labeling_opt _3 = block _4 = END _5 = labeling_end_opt
    {    ( fun c -> let c' = _2 c _5 in let ts, es = _3 c' in loop ts es )}
| _1 = IF _2 = labeling_opt _3 = block _4 = END _5 = labeling_end_opt
    {    ( fun c -> let c' = _2 c _5 in let ts, es = _3 c' in if_ ts es [] )}
| _1 = IF _2 = labeling_opt _3 = block _4 = ELSE _5 = labeling_end_opt _6 = instr_list _7 = END _8 = labeling_end_opt
    {    ( fun c -> let c' = _2 c (_5 @ _8) in
      let ts, es1 = _3 c' in if_ ts es1 (_6 c') )}

block_sig:
  _1 = LPAR _2 = RESULT _3 = VALUE_TYPE _4 = RPAR
    {                                ( [_3] )}

block:
  _1 = block_sig _2 = instr_list
    {    ( fun c -> _1, _2 c )}
| _1 = instr_list
    {               ( fun c -> [], _1 c )}

expr:
  _1 = LPAR _2 = expr1 _3 = RPAR
    {    ( let at = at () in fun c -> let es, e' = _2 c in es @ [e' @@ at] )}

expr1:
  _1 = plain_instr _2 = expr_list
    {                          ( fun c -> _2 c, _1 c )}
| _1 = BLOCK _2 = labeling_opt _3 = block
    {    ( fun c -> let c' = _2 c [] in let ts, es = _3 c' in [], block ts es )}
| _1 = LOOP _2 = labeling_opt _3 = block
    {    ( fun c -> let c' = _2 c [] in let ts, es = _3 c' in [], loop ts es )}
| _1 = IF _2 = labeling_opt _3 = if_block
    {    ( fun c -> let c' = _2 c [] in
      let ts, (es, es1, es2) = _3 c c' in es, if_ ts es1 es2 )}

if_block:
  _1 = block_sig _2 = if_block
    {                       ( fun c c' -> let ts, ess = _2 c c' in _1 @ ts, ess )}
| _1 = if_
    {        ( fun c c' -> [], _1 c c' )}

if_:
  _1 = expr _2 = if_
    {    ( fun c c' -> let es = _1 c in let es0, es1, es2 = _2 c c' in
      es @ es0, es1, es2 )}
| _1 = LPAR _2 = THEN _3 = instr_list _4 = RPAR _5 = LPAR _6 = ELSE _7 = instr_list _8 = RPAR
    {    ( fun c c' -> [], _3 c', _7 c' )}
| _1 = LPAR _2 = THEN _3 = instr_list _4 = RPAR
    {    ( fun c c' -> [], _3 c', [] )}

instr_list:
  
    {                ( fun c -> [] )}
| _1 = instr _2 = instr_list
    {                     ( fun c -> _1 c @ _2 c )}

expr_list:
  
    {                ( fun c -> [] )}
| _1 = expr _2 = expr_list
    {                   ( fun c -> _1 c @ _2 c )}

const_expr:
  _1 = instr_list
    {               ( let at = at () in fun c -> _1 c @@ at )}

func:
  _1 = LPAR _2 = FUNC _3 = bind_var_opt _4 = func_fields _5 = RPAR
    {    ( let at = at () in
      fun c -> let x = _3 c anon_func bind_func @@ at in fun () -> _4 c x at )}

func_fields:
  _1 = type_use _2 = func_fields_body
    {    ( fun c x at ->
      let t = inline_type_explicit c (_1 c type_) (fst _2) at in
      [{(snd _2 (enter_func c)) with ftype = t} @@ at], [], [] )}
| _1 = func_fields_body
    {    ( fun c x at ->
      let t = inline_type c (fst _1) at in
      [{(snd _1 (enter_func c)) with ftype = t} @@ at], [], [] )}
| _1 = inline_import _2 = type_use _3 = func_fields_import
    {    ( fun c x at ->
      let t = inline_type_explicit c (_2 c type_) _3 at in
      [],
      [{ module_name = fst _1; item_name = snd _1;
         idesc = FuncImport t @@ at } @@ at ], [] )}
| _1 = inline_import _2 = func_fields_import
    {    ( fun c x at ->
      let t = inline_type c _2 at in
      [],
      [{ module_name = fst _1; item_name = snd _1;
         idesc = FuncImport t @@ at } @@ at ], [] )}
| _1 = inline_export _2 = func_fields
    {    ( fun c x at ->
      let fns, ims, exs = _2 c x at in fns, ims, _1 (FuncExport x) c :: exs )}

func_fields_import:
  _1 = func_fields_import_result
    {                              ( _1 )}
| _1 = LPAR _2 = PARAM _3 = value_type_list _4 = RPAR _5 = func_fields_import
    {    ( let FuncType (ins, out) = _5 in FuncType (_3 @ ins, out) )}
| _1 = LPAR _2 = PARAM _3 = bind_var _4 = VALUE_TYPE _5 = RPAR _6 = func_fields_import
    {    ( let FuncType (ins, out) = _6 in FuncType (_4 :: ins, out) )}

func_fields_import_result:
  
    {                ( FuncType ([], []) )}
| _1 = LPAR _2 = RESULT _3 = value_type_list _4 = RPAR _5 = func_fields_import_result
    {    ( let FuncType (ins, out) = _5 in FuncType (ins, _3 @ out) )}

func_fields_body:
  _1 = func_result_body
    {                     ( _1 )}
| _1 = LPAR _2 = PARAM _3 = value_type_list _4 = RPAR _5 = func_fields_body
    {    ( let FuncType (ins, out) = fst _5 in
      FuncType (_3 @ ins, out),
      fun c -> ignore (anon_locals c _3); snd _5 c )}
| _1 = LPAR _2 = PARAM _3 = bind_var _4 = VALUE_TYPE _5 = RPAR _6 = func_fields_body
    {    ( let FuncType (ins, out) = fst _6 in
      FuncType (_4 :: ins, out),
      fun c -> ignore (bind_local c _3); snd _6 c )}

func_result_body:
  _1 = func_body
    {              ( FuncType ([], []), _1 )}
| _1 = LPAR _2 = RESULT _3 = value_type_list _4 = RPAR _5 = func_result_body
    {    ( let FuncType (ins, out) = fst _5 in
      FuncType (ins, _3 @ out), snd _5 )}

func_body:
  _1 = instr_list
    {    ( fun c -> let c' = anon_label c in
      {ftype = -1l @@ at(); locals = []; body = _1 c'} )}
| _1 = LPAR _2 = LOCAL _3 = value_type_list _4 = RPAR _5 = func_body
    {    ( fun c -> ignore (anon_locals c _3); let f = _5 c in
      {f with locals = _3 @ f.locals} )}
| _1 = LPAR _2 = LOCAL _3 = bind_var _4 = VALUE_TYPE _5 = RPAR _6 = func_body
    {    ( fun c -> ignore (bind_local c _3); let f = _6 c in
      {f with locals = _4 :: f.locals} )}

offset:
  _1 = LPAR _2 = OFFSET _3 = const_expr _4 = RPAR
    {                                ( _3 )}
| _1 = expr
    {         ( let at = at () in fun c -> _1 c @@ at )}

elem:
  _1 = LPAR _2 = ELEM _3 = var _4 = offset _5 = var_list _6 = RPAR
    {    ( let at = at () in
      fun c -> {index = _3 c table; offset = _4 c; init = _5 c func} @@ at )}
| _1 = LPAR _2 = ELEM _3 = offset _4 = var_list _5 = RPAR
    {    ( let at = at () in
      fun c -> {index = 0l @@ at; offset = _3 c; init = _4 c func} @@ at )}

table:
  _1 = LPAR _2 = TABLE _3 = bind_var_opt _4 = table_fields _5 = RPAR
    {    ( let at = at () in
      fun c -> let x = _3 c anon_table bind_table @@ at in
      fun () -> _4 c x at )}

table_fields:
  _1 = table_sig
    {    ( fun c x at -> [{ttype = _1} @@ at], [], [], [] )}
| _1 = inline_import _2 = table_sig
    {    ( fun c x at ->
      [], [],
      [{ module_name = fst _1; item_name = snd _1;
        idesc = TableImport _2 @@ at } @@ at], [] )}
| _1 = inline_export _2 = table_fields
    {    ( fun c x at -> let tabs, elems, ims, exs = _2 c x at in
      tabs, elems, ims, _1 (TableExport x) c :: exs )}
| _1 = elem_type _2 = LPAR _3 = ELEM _4 = var_list _5 = RPAR
    {    ( fun c x at ->
      let init = _4 c func in let size = Int32.of_int (List.length init) in
      [{ttype = TableType ({min = size; max = Some size}, _1)} @@ at],
      [{index = x; offset = [i32_const (0l @@ at) @@ at] @@ at; init} @@ at],
      [], [] )}

data:
  _1 = LPAR _2 = DATA _3 = var _4 = offset _5 = string_list _6 = RPAR
    {    ( let at = at () in
      fun c -> {index = _3 c memory; offset = _4 c; init = _5} @@ at )}
| _1 = LPAR _2 = DATA _3 = offset _4 = string_list _5 = RPAR
    {    ( let at = at () in
      fun c -> {index = 0l @@ at; offset = _3 c; init = _4} @@ at )}

memory:
  _1 = LPAR _2 = MEMORY _3 = bind_var_opt _4 = memory_fields _5 = RPAR
    {    ( let at = at () in
      fun c -> let x = _3 c anon_memory bind_memory @@ at in
      fun () -> _4 c x at )}

memory_fields:
  _1 = memory_sig
    {    ( fun c x at -> [{mtype = _1} @@ at], [], [], [] )}
| _1 = inline_import _2 = memory_sig
    {    ( fun c x at ->
      [], [],
      [{ module_name = fst _1; item_name = snd _1;
         idesc = MemoryImport _2 @@ at } @@ at], [] )}
| _1 = inline_export _2 = memory_fields
    {    ( fun c x at -> let mems, data, ims, exs = _2 c x at in
      mems, data, ims, _1 (MemoryExport x) c :: exs )}
| _1 = LPAR _2 = DATA _3 = string_list _4 = RPAR
    {    ( fun c x at ->
      let size = Int32.(div (add (of_int (String.length _3)) 65535l) 65536l) in
      [{mtype = MemoryType {min = size; max = Some size}} @@ at],
      [{index = x;
        offset = [i32_const (0l @@ at) @@ at] @@ at; init = _3} @@ at],
      [], [] )}

global:
  _1 = LPAR _2 = GLOBAL _3 = bind_var_opt _4 = global_fields _5 = RPAR
    {    ( let at = at () in
      fun c -> let x = _3 c anon_global bind_global @@ at in
      fun () -> _4 c x at )}

global_fields:
  _1 = global_type _2 = const_expr
    {    ( fun c x at -> [{gtype = _1; value = _2 c} @@ at], [], [] )}
| _1 = inline_import _2 = global_type
    {    ( fun c x at ->
      [],
      [{ module_name = fst _1; item_name = snd _1;
         idesc = GlobalImport _2 @@ at } @@ at], [] )}
| _1 = inline_export _2 = global_fields
    {    ( fun c x at -> let globs, ims, exs = _2 c x at in
      globs, ims, _1 (GlobalExport x) c :: exs )}

import_desc:
  _1 = LPAR _2 = FUNC _3 = bind_var_opt _4 = type_use _5 = RPAR
    {    ( fun c -> ignore (_3 c anon_func bind_func);
      fun () -> FuncImport (_4 c type_) )}
| _1 = LPAR _2 = FUNC _3 = bind_var_opt _4 = func_sig _5 = RPAR
    {    ( let at4 = ati 4 in
      fun c -> ignore (_3 c anon_func bind_func);
      fun () -> FuncImport (inline_type c _4 at4) )}
| _1 = LPAR _2 = TABLE _3 = bind_var_opt _4 = table_sig _5 = RPAR
    {    ( fun c -> ignore (_3 c anon_table bind_table);
      fun () -> TableImport _4 )}
| _1 = LPAR _2 = MEMORY _3 = bind_var_opt _4 = memory_sig _5 = RPAR
    {    ( fun c -> ignore (_3 c anon_memory bind_memory);
      fun () -> MemoryImport _4 )}
| _1 = LPAR _2 = GLOBAL _3 = bind_var_opt _4 = global_type _5 = RPAR
    {    ( fun c -> ignore (_3 c anon_global bind_global);
      fun () -> GlobalImport _4 )}

import:
  _1 = LPAR _2 = IMPORT _3 = name _4 = name _5 = import_desc _6 = RPAR
    {    ( let at = at () and at5 = ati 5 in
      fun c -> let df = _5 c in
      fun () -> {module_name = _3; item_name = _4; idesc = df () @@ at5} @@ at )}

inline_import:
  _1 = LPAR _2 = IMPORT _3 = name _4 = name _5 = RPAR
    {                               ( _3, _4 )}

export_desc:
  _1 = LPAR _2 = FUNC _3 = var _4 = RPAR
    {                       ( fun c -> FuncExport (_3 c func) )}
| _1 = LPAR _2 = TABLE _3 = var _4 = RPAR
    {                        ( fun c -> TableExport (_3 c table) )}
| _1 = LPAR _2 = MEMORY _3 = var _4 = RPAR
    {                         ( fun c -> MemoryExport (_3 c memory) )}
| _1 = LPAR _2 = GLOBAL _3 = var _4 = RPAR
    {                         ( fun c -> GlobalExport (_3 c global) )}

export:
  _1 = LPAR _2 = EXPORT _3 = name _4 = export_desc _5 = RPAR
    {    ( let at = at () and at4 = ati 4 in
      fun c -> {name = _3; edesc = _4 c @@ at4} @@ at )}

inline_export:
  _1 = LPAR _2 = EXPORT _3 = name _4 = RPAR
    {    ( let at = at () in fun d c -> {name = _3; edesc = d @@ at} @@ at )}

type_:
  _1 = func_type
    {              ( _1 @@ at () )}

type_def:
  _1 = LPAR _2 = TYPE _3 = type_ _4 = RPAR
    {    ( fun c -> anon_type c _3 )}
| _1 = LPAR _2 = TYPE _3 = bind_var _4 = type_ _5 = RPAR
    {    ( fun c -> bind_type c _3 _4 )}

start:
  _1 = LPAR _2 = START _3 = var _4 = RPAR
    {    ( fun c -> _3 c func )}

module_fields:
  
    {    ( fun (c : context) () -> {empty_module with types = c.types.list} )}
| _1 = module_fields1
    {                   ( _1 )}

module_fields1:
  _1 = type_def _2 = module_fields
    {    ( fun c -> ignore (_1 c); _2 c )}
| _1 = global _2 = module_fields
    {    ( fun c -> let gf = _1 c in let mf = _2 c in
      fun () -> let globs, ims, exs = gf () in let m = mf () in
      if globs <> [] && m.imports <> [] then
        error (List.hd m.imports).at "import after global definition";
      { m with globals = globs @ m.globals;
        imports = ims @ m.imports; exports = exs @ m.exports } )}
| _1 = table _2 = module_fields
    {    ( fun c -> let tf = _1 c in let mf = _2 c in
      fun () -> let tabs, elems, ims, exs = tf () in let m = mf () in
      if tabs <> [] && m.imports <> [] then
        error (List.hd m.imports).at "import after table definition";
      { m with tables = tabs @ m.tables; elems = elems @ m.elems;
        imports = ims @ m.imports; exports = exs @ m.exports } )}
| _1 = memory _2 = module_fields
    {    ( fun c -> let mmf = _1 c in let mf = _2 c in
      fun () -> let mems, data, ims, exs = mmf () in let m = mf () in
      if mems <> [] && m.imports <> [] then
        error (List.hd m.imports).at "import after memory definition";
      { m with memories = mems @ m.memories; data = data @ m.data;
        imports = ims @ m.imports; exports = exs @ m.exports } )}
| _1 = func _2 = module_fields
    {    ( fun c -> let ff = _1 c in let mf = _2 c in
      fun () -> let funcs, ims, exs = ff () in let m = mf () in
      if funcs <> [] && m.imports <> [] then
        error (List.hd m.imports).at "import after function definition";
      { m with funcs = funcs @ m.funcs;
        imports = ims @ m.imports; exports = exs @ m.exports } )}
| _1 = elem _2 = module_fields
    {    ( fun c -> let mf = _2 c in
      fun () -> let m = mf () in
      {m with elems = _1 c :: m.elems} )}
| _1 = data _2 = module_fields
    {    ( fun c -> let mf = _2 c in
      fun () -> let m = mf () in
      {m with data = _1 c :: m.data} )}
| _1 = start _2 = module_fields
    {    ( fun c -> let mf = _2 c in
      fun () -> let m = mf () in let x = _1 c in
      match m.start with
      | Some _ -> error x.at "multiple start sections"
      | None -> {m with start = Some x} )}
| _1 = import _2 = module_fields
    {    ( fun c -> let imf = _1 c in let mf = _2 c in
      fun () -> let im = imf () in let m = mf () in
      {m with imports = im :: m.imports} )}
| _1 = export _2 = module_fields
    {    ( fun c -> let mf = _2 c in
      fun () -> let m = mf () in
      {m with exports = _1 c :: m.exports} )}

module_var_opt:
  
    {                ( None )}
| _1 = VAR
    {        ( Some (_1 @@ at ()) )}

module_:
  _1 = LPAR _2 = MODULE _3 = module_var_opt _4 = module_fields _5 = RPAR
    {    ( _3, Textual (_4 (empty_context ()) () @@ at ()) @@ at () )}

inline_module:
  _1 = module_fields
    {                  ( Textual (_1 (empty_context ()) () @@ at ()) @@ at () )}

inline_module1:
  _1 = module_fields1
    {                   ( Textual (_1 (empty_context ()) () @@ at ()) @@ at () )}

script_var_opt:
  
    {                ( None )}
| _1 = VAR
    {        ( Some (_1 @@ at ()) )}

script_module:
  _1 = module_
    {            ( _1 )}
| _1 = LPAR _2 = MODULE _3 = module_var_opt _4 = BIN _5 = string_list _6 = RPAR
    {    ( _3, Encoded ("binary", _5) @@ at() )}
| _1 = LPAR _2 = MODULE _3 = module_var_opt _4 = QUOTE _5 = string_list _6 = RPAR
    {    ( _3, Quoted ("quote", _5) @@ at() )}

action:
  _1 = LPAR _2 = INVOKE _3 = module_var_opt _4 = name _5 = const_list _6 = RPAR
    {    ( Invoke (_3, _4, _5) @@ at () )}
| _1 = LPAR _2 = GET _3 = module_var_opt _4 = name _5 = RPAR
    {    ( Get (_3, _4) @@ at() )}

assertion:
  _1 = LPAR _2 = ASSERT_MALFORMED _3 = script_module _4 = STRING _5 = RPAR
    {    ( AssertMalformed (snd _3, _4) @@ at () )}
| _1 = LPAR _2 = ASSERT_INVALID _3 = script_module _4 = STRING _5 = RPAR
    {    ( AssertInvalid (snd _3, _4) @@ at () )}
| _1 = LPAR _2 = ASSERT_UNLINKABLE _3 = script_module _4 = STRING _5 = RPAR
    {    ( AssertUnlinkable (snd _3, _4) @@ at () )}
| _1 = LPAR _2 = ASSERT_TRAP _3 = script_module _4 = STRING _5 = RPAR
    {    ( AssertUninstantiable (snd _3, _4) @@ at () )}
| _1 = LPAR _2 = ASSERT_RETURN _3 = action _4 = const_list _5 = RPAR
    {                                              ( AssertReturn (_3, _4) @@ at () )}
| _1 = LPAR _2 = ASSERT_RETURN_CANONICAL_NAN _3 = action _4 = RPAR
    {                                                 ( AssertReturnCanonicalNaN _3 @@ at () )}
| _1 = LPAR _2 = ASSERT_RETURN_ARITHMETIC_NAN _3 = action _4 = RPAR
    {                                                  ( AssertReturnArithmeticNaN _3 @@ at () )}
| _1 = LPAR _2 = ASSERT_TRAP _3 = action _4 = STRING _5 = RPAR
    {                                        ( AssertTrap (_3, _4) @@ at () )}
| _1 = LPAR _2 = ASSERT_EXHAUSTION _3 = action _4 = STRING _5 = RPAR
    {                                              ( AssertExhaustion (_3, _4) @@ at () )}

cmd:
  _1 = action
    {           ( Action _1 @@ at () )}
| _1 = assertion
    {              ( Assertion _1 @@ at () )}
| _1 = script_module
    {                  ( Module (fst _1, snd _1) @@ at () )}
| _1 = LPAR _2 = REGISTER _3 = name _4 = module_var_opt _5 = RPAR
    {                                           ( Register (_3, _4) @@ at () )}
| _1 = meta
    {         ( Meta _1 @@ at () )}

cmd_list:
  
    {                ( [] )}
| _1 = cmd _2 = cmd_list
    {                 ( _1 :: _2 )}

meta:
  _1 = LPAR _2 = SCRIPT _3 = script_var_opt _4 = cmd_list _5 = RPAR
    {                                             ( Script (_3, _4) @@ at () )}
| _1 = LPAR _2 = INPUT _3 = script_var_opt _4 = STRING _5 = RPAR
    {                                          ( Input (_3, _4) @@ at () )}
| _1 = LPAR _2 = OUTPUT _3 = script_var_opt _4 = STRING _5 = RPAR
    {                                           ( Output (_3, Some _4) @@ at () )}
| _1 = LPAR _2 = OUTPUT _3 = script_var_opt _4 = RPAR
    {                                    ( Output (_3, None) @@ at () )}

const:
  _1 = LPAR _2 = CONST _3 = literal _4 = RPAR
    {                            ( snd (literal _2 _3) @@ ati 3 )}

const_list:
  
    {                ( [] )}
| _1 = const _2 = const_list
    {                     ( _1 :: _2 )}

script:
  _1 = cmd_list _2 = EOF
    {                 ( _1 )}
| _1 = inline_module1 _2 = EOF
    {                       ( [Module (None, _1) @@ at ()] )}

script1:
  _1 = cmd
    {        ( [_1] )}

module1:
  _1 = module_ _2 = EOF
    {                ( _1 )}
| _1 = inline_module _2 = EOF
    {                      ( None, _1 )}

%%


