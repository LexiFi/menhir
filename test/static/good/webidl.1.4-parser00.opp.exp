File "webidl.1.4-parser04.mly", line 9, characters 59-62:
Warning: the token DOT is unused.
File "webidl.1.4-parser04.mly", line 9, characters 53-58:
Warning: the token MINUS is unused.
File "webidl.1.4-parser04.mly", line 24, characters 13-18:
Warning: the token OTHER is unused.
File "webidl.1.4-parser00.mly", line 29, characters 8-30:
Warning: symbol attributeSerializetion is unreachable from any of the start symbol(s).
File "webidl.1.4-parser00.mly", line 32, characters 8-17:
Warning: symbol commnaEnd is unreachable from any of the start symbol(s).
File "webidl.1.4-parser00.mly", line 35, characters 8-34:
Warning: symbol emptyExtendedAttributeList is unreachable from any of the start symbol(s).
%parameter<Param : sig
  val strict: bool
end>
%{
    let return_if_strict strict value =
      if strict then
        raise Parsing.Parse_error
      else
        value

%}
%{
    (* Web IDL parser
     * The below rules are based on Editor’s Draft, 1 June 2017
     * https://heycam.github.io/webidl/#idl-grammar 
    *)
    open Ast
    open Keyword
%}
%{
    (* Web IDL parser
     * The below rules are based on Editor’s Draft, 6 August 2018
     * https://heycam.github.io/webidl/#idl-grammar 
    *)
    open Ast
    open Keyword

    let to_non_any is_null value =
      if is_null then `Nullable (value :> nullable_non_any) else (value :> non_any)
%}
%start ext_main
%start main
%token ANY
%token ARRAYBUFFER
%token ATTRIBUTE
%token BOOLEAN
%token BYTE
%token BYTESTRING
%token CALLBACK
%token COLON
%token COMMA
%token CONST
%token DATAVIEW
%token DELETER
%token DICTIONARY
%token DOMEXCEPTION
%token DOMSTRING
%token DOT
%token DOUBLE
%token ELLIPSIS
%token ENUM
%token EOF
%token EQUAL
%token ERROR_
%token FALSE
%token FLOAT
%token FLOAT32ARRAY
%token FLOAT64ARRAY
%token <float> FLOATVAL
%token FROZENARRAY
%token GETTER
%token GT
%token <string> IDENTIFIER
%token IMPLEMENTS
%token INCLUDES
%token INFINITY
%token INHERIT
%token INT16ARRAY
%token INT32ARRAY
%token INT8ARRAY
%token INTERFACE
%token <int> INTVAL
%token ITERABLE
%token LBRACE
%token LBRACKET
%token LEGACYCALLER
%token LONG
%token LPAR
%token LT
%token MAPLIKE
%token MINUS
%token MINUSINFINITY
%token MIXIN
%token NAMESPACE
%token NAN
%token NULL
%token OBJECT
%token OCTET
%token OPTIONAL
%token OR
%token <char> OTHER
%token PARTIAL
%token PROMISE
%token QUESTION
%token RBRACE
%token RBRACKET
%token READONLY
%token RECORD
%token REQUIRED
%token RPAR
%token SEMICOLON
%token SEQUENCE
%token SETLIKE
%token SETTER
%token SHORT
%token STATIC
%token <string> STRING
%token STRINGIFIER
%token TRUE
%token TYPEDEF
%token UINT16ARRAY
%token UINT32ARRAY
%token UINT8ARRAY
%token UINT8CLAMPEDARRAY
%token UNRESTRICTED
%token UNSIGNED
%token USVSTRING
%token VOID
%type < Ast.extended_attribute > ext_main
%type < Ast.definitions > main
%type < Ast.non_any > nonAnyType
%type < Ast.primitive > primitiveType
%%

legacyArray:
  _1 = nonAnyType _2 = LBRACKET _3 = RBRACKET _4 = null
    {  ( 
    return_if_strict Param.strict
      (to_non_any _4 (`FrozenArray ([], (_1 :> type_)))) 
  )}

promiseOnly:
  _1 = PROMISE
    {            ( return_if_strict Param.strict (`Promise `Any) )}

promiseNull:
  _1 = PROMISE _2 = LT _3 = returnType _4 = GT _5 = QUESTION
    {                                      ( return_if_strict Param.strict _3 )}

ext_main:
  _1 = extendedAttribute _2 = EOF
    {                            ( _1 )}

extendedAttributeList:
  _1 = LBRACKET _2 = extendedAttribute _3 = extendedAttributes _4 = RBRACKET
    {                                                             ( (_2 :: _3) )}
| 
    {       ( [] )}

extendedAttributes:
  _1 = COMMA _2 = extendedAttribute _3 = extendedAttributes
    {                                                 ( _2 :: _3 )}
| 
    {       ( [] )}

extendedAttribute:
  _1 = extendedAttributeNoArgs
    {                              ( _1 )}
| _1 = extendedAttributeArgList
    {                               ( _1 )}
| _1 = extendedAttributeIdent
    {                             ( _1 )}
| _1 = extendedAttributeIdentList
    {                                 ( _1 )}
| _1 = extendedAttributeNamedArgList
    {                                    ( _1 )}

identifierList:
  _1 = IDENTIFIER _2 = identifiers
    {                             ( _1 :: _2 )}

extendedAttributeNoArgs:
  _1 = IDENTIFIER
    {                 ( `NoArgs _1 )}

extendedAttributeArgList:
  _1 = IDENTIFIER _2 = LPAR _3 = argumentList _4 = RPAR
    {                                        ( `ArgumentList(_1, _3) )}

extendedAttributeIdent:
  _1 = IDENTIFIER _2 = EQUAL _3 = IDENTIFIER
    {                                  ( `Ident(_1, _3) )}

extendedAttributeIdentList:
  _1 = IDENTIFIER _2 = EQUAL _3 = LPAR _4 = identifierList _5 = RPAR
    {                                                ( `IdentList(_1, _4) )}

extendedAttributeNamedArgList:
  _1 = IDENTIFIER _2 = EQUAL _3 = IDENTIFIER _4 = LPAR _5 = argumentList _6 = RPAR
    {    ( `NamedArgList(_1, _3, _5) )}

main:
  _1 = definitions _2 = EOF
    {                      (  _1 )}

definitions:
  _1 = extendedAttributeList _2 = definition _3 = definitions
    {                                                   ( (_1, _2) :: _3 )}
| 
    {         ( [] )}

definition:
  _1 = callbackOrInterfaceOrMixin
    {                                    ( _1 )}
| _1 = namespace
    {                  ( `Namespace _1 )}
| _1 = partial
    {                ( `Partial _1 )}
| _1 = dictionary
    {                   ( `Dictionary _1 )}
| _1 = enum
    {             ( `Enum _1 )}
| _1 = typedef
    {                ( `Typedef _1 )}
| _1 = includes
    {                 ( `Includes _1 )}
| _1 = implementsStatement
    {                            ( `Implements _1 )}

callbackOrInterfaceOrMixin:
  _1 = CALLBACK _2 = callbackRestOrInterface
    {                                         ( `Callback _2 )}
| _1 = INTERFACE _2 = interfaceOrMixin
    {                                   ( _2 )}

argumentNameKeyword:
  _1 = ATTRIBUTE
    {                ( attribute )}
| _1 = CALLBACK
    {               ( callback )}
| _1 = CONST
    {            ( const )}
| _1 = DELETER
    {              ( deleter )}
| _1 = DICTIONARY
    {                 ( dictionary )}
| _1 = ENUM
    {           ( enum )}
| _1 = GETTER
    {             ( getter )}
| _1 = IMPLEMENTS
    {                 ( implements )}
| _1 = INCLUDES
    {               ( includes )}
| _1 = INHERIT
    {              ( inherit_ )}
| _1 = INTERFACE
    {                ( interface )}
| _1 = ITERABLE
    {               ( iterable )}
| _1 = LEGACYCALLER
    {                   ( legacycaller )}
| _1 = MAPLIKE
    {              ( maplike )}
| _1 = MIXIN
    {            ( mixin )}
| _1 = NAMESPACE
    {                ( namespace )}
| _1 = PARTIAL
    {              ( partial )}
| _1 = REQUIRED
    {               ( required )}
| _1 = SETLIKE
    {              ( setlike )}
| _1 = SETTER
    {             ( setter )}
| _1 = STATIC
    {             ( static )}
| _1 = STRINGIFIER
    {                  ( stringifier )}
| _1 = TYPEDEF
    {              ( typedef )}
| _1 = UNRESTRICTED
    {                   ( unrestricted )}

callbackRestOrInterface:
  _1 = callbackRest
    {                     ( `CallbackRest _1 )}
| _1 = interfaceRest
    {                      ( `Interface _1 )}

interfaceOrMixin:
  _1 = interfaceRest
    {                    ( `Interface _1 )}
| _1 = mixinRest
    {                ( `Mixin _1 )}

interfaceRest:
  _1 = IDENTIFIER _2 = inheritance _3 = LBRACE _4 = interfaceMembers _5 = RBRACE _6 = SEMICOLON
    {    ( (_1, _2, _4) )}

partial:
  _1 = PARTIAL _2 = partialDefinition
    {                                  ( _2 )}

partialDefinition:
  _1 = INTERFACE _2 = partialInterfaceOrPartialMixin
    {                                                 ( _2 )}
| _1 = partialDictionary
    {                          ( `PartialDictionary _1 )}
| _1 = namespace
    {                  ( `Namespace _1 )}

partialInterfaceOrPartialMixin:
  _1 = partialInterface
    {                       ( `PartialInterface _1 )}
| _1 = mixinRest
    {                ( `Mixin _1 )}

partialInterface:
  _1 = IDENTIFIER _2 = LBRACE _3 = interfaceMembers _4 = RBRACE _5 = SEMICOLON
    {    ( (_1, _3) )}

interfaceMembers:
  _1 = extendedAttributeList _2 = interfaceMember _3 = interfaceMembers
    {                                                               ( (_1, _2) :: _3 )}
| 
    {         ( [] )}

interfaceMember:
  _1 = const
    {            ( `Const _1 )}
| _1 = operation
    {                ( `Operation _1 )}
| _1 = stringifier
    {                  ( `Stringifier _1 )}
| _1 = staticMember
    {                   ( `Static _1 )}
| _1 = iterable
    {               ( `Iterable _1 )}
| _1 = readOnlyMember
    {                     ( `ReadOnly _1 )}
| _1 = readWriteAttribute
    {                         ( `Attribute _1 )}
| _1 = readWriteMaplike
    {                       ( `Maplike _1 )}
| _1 = readWriteSetlike
    {                       ( `Setlike _1 )}

mixinRest:
  _1 = MIXIN _2 = IDENTIFIER _3 = LBRACE _4 = mixinMembers _5 = RBRACE _6 = SEMICOLON
    {    ( (_2, _4) )}

mixinMembers:
  _1 = extendedAttributeList _2 = mixinMember _3 = mixinMembers
    {                                                       ( (_1, _2) :: _3 )}
| 
    {         ( [] )}

mixinMember:
  _1 = const
    {            ( `Const _1 )}
| _1 = operation
    {                ( `Operation _1 )}
| _1 = stringifier
    {                  ( `Stringifier _1 )}
| _1 = readOnlyMember
    {                     ( `ReadOnly _1 )}
| _1 = readWriteAttribute
    {                         ( `Attribute _1 )}

inheritance:
  _1 = COLON _2 = IDENTIFIER
    {                         ( Some _2 )}
| 
    {         ( None )}

const:
  _1 = CONST _2 = constType _3 = IDENTIFIER _4 = EQUAL _5 = constValue _6 = SEMICOLON
    {                                                            ( (_2, _3, _5) )}

constValue:
  _1 = booleanLiteral
    {                       ( `Bool _1)}
| _1 = floatLiteral
    {                     ( `Float _1 )}
| _1 = INTVAL
    {               ( `Int _1 )}
| _1 = NULL
    {             ( `Null )}

booleanLiteral:
  _1 = TRUE
    {             ( true )}
| _1 = FALSE
    {              ( false )}

floatLiteral:
  _1 = FLOATVAL
    {                 ( _1 )}
| _1 = MINUSINFINITY
    {                      ( neg_infinity )}
| _1 = INFINITY
    {                 ( infinity )}
| _1 = NAN
    {             ( nan )}

constType:
  _1 = primitiveType _2 = null
    {                           ( if _2 then `Nullable (_1 :> const) else (_1 :> const_type) )}
| _1 = IDENTIFIER _2 = null
    {                        ( if _2 then `Nullable (`Ident _1) else (`Ident _1)  )}

readOnlyMember:
  _1 = READONLY _2 = readOnlyMemberRest
    {                                    ( _2 )}

readOnlyMemberRest:
  _1 = attributeRest
    {                    ( `AttributeRest _1 )}
| _1 = readWriteMaplike
    {                       ( `Maplike _1 )}
| _1 = readWriteSetlike
    {                       ( `Setlike _1 )}

readWriteAttribute:
  _1 = INHERIT _2 = attributeRest
    {                              ( `Inherit (`AttributeRest _2) )}
| _1 = attributeRest
    {                    ( `AttributeRest _1 )}

attributeRest:
  _1 = ATTRIBUTE _2 = typeWithExtendedAttributes _3 = attributeName _4 = SEMICOLON
    {                                                                   ( (_2, _3) )}

attributeName:
  _1 = attributeNameKeyword
    {                           ( _1 )}
| _1 = IDENTIFIER
    {                 ( _1 )}

attributeNameKeyword:
  _1 = REQUIRED
    {               ( required )}

readOnly:
  _1 = READONLY
    {               ( true )}
| 
    {       ( false )}

defaultValue:
  _1 = constValue
    {                 ( `Const _1 )}
| _1 = STRING
    {             ( `String _1 )}
| _1 = LBRACKET _2 = RBRACKET
    {                        ( `EmptySequence )}

operation:
  _1 = returnType _2 = operationRest
    {                               ( `NoSpecialOperation(_1, _2) )}
| _1 = specialOperation
    {                       ( `SpecialOperation _1 )}

specialOperation:
  _1 = special _2 = specials _3 = returnType _4 = operationRest
    {    ( (_1 :: _2, _3, _4) )}

specials:
  _1 = special _2 = specials
    {                       ( _1 :: _2 )}
| 
    {       ( [] )}

special:
  _1 = GETTER
    {             ( `Getter )}
| _1 = SETTER
    {             ( `Setter )}
| _1 = DELETER
    {              ( `Deleter )}
| _1 = LEGACYCALLER
    {                   ( `Legacycaller )}

operationRest:
  _1 = optionalIdentifier _2 = LPAR _3 = argumentList _4 = RPAR _5 = SEMICOLON
    {                                                          ( (_1, _3) )}

optionalIdentifier:
  _1 = IDENTIFIER
    {                 ( Some _1 )}
| 
    {       ( None )}

argumentList:
  _1 = argument _2 = arguments
    {                         ( _1 :: _2 )}
| 
    {       ( [] )}

arguments:
  _1 = COMMA _2 = argument _3 = arguments
    {                               ( _2 :: _3 )}
| 
    {       ( [] )}

argument:
  _1 = extendedAttributeList _2 = OPTIONAL _3 = typeWithExtendedAttributes _4 = argumentName _5 = default
    {    ( (_1, `Optional(_3, _4, _5)) )}
| _1 = extendedAttributeList _2 = type_ _3 = ellipsis _4 = argumentName
    {    ( if _3 then (_1, `Variadic(_2, _4)) else (_1, `Fixed(_2, _4)) )}

argumentName:
  _1 = argumentNameKeyword
    {                          ( _1 )}
| _1 = IDENTIFIER
    {                 ( _1 )}

ellipsis:
  _1 = ELLIPSIS
    {               ( true )}
| 
    {       ( false )}

returnType:
  _1 = type_
    {            ( _1 :> return_type )}
| _1 = VOID
    {           ( `Void )}

stringifier:
  _1 = STRINGIFIER _2 = stringifierRest
    {                                  ( _2 )}

stringifierRest:
  _1 = readOnly _2 = attributeRest
    {     ( if _1 then `ReadOnly (`AttributeRest _2) else (`AttributeRest _2) )}
| _1 = returnType _2 = operationRest
    {                               ( `NoSpecialOperation(_1, _2) )}
| _1 = SEMICOLON
    {                ( `None )}

identifiers:
  _1 = COMMA _2 = IDENTIFIER _3 = identifiers
    {                                   ( _2 :: _3 )}
| 
    {       ( [] )}

staticMember:
  _1 = STATIC _2 = staticMemberRest
    {                              ( _2 )}

staticMemberRest:
  _1 = readOnly _2 = attributeRest
    {                             ( if _1 then `ReadOnly (`AttributeRest _2) else (`AttributeRest _2) )}
| _1 = returnType _2 = operationRest
    {                               ( `NoSpecialOperation(_1, _2) )}

iterable:
  _1 = ITERABLE _2 = LT _3 = typeWithExtendedAttributes _4 = optionalType _5 = GT _6 = SEMICOLON
    {                                                                       ( (_3, _4) )}

optionalType:
  _1 = COMMA _2 = typeWithExtendedAttributes
    {                                        ( Some _2 )}
| 
    {       ( None )}

readWriteMaplike:
  _1 = maplikeRest
    {                  ( _1 )}

maplikeRest:
  _1 = MAPLIKE _2 = LT _3 = typeWithExtendedAttributes _4 = COMMA _5 = typeWithExtendedAttributes _6 = GT _7 = SEMICOLON
    {    ( (_3, _5) )}

readWriteSetlike:
  _1 = setlikeRest
    {                  ( _1 )}

setlikeRest:
  _1 = SETLIKE _2 = LT _3 = typeWithExtendedAttributes _4 = GT _5 = SEMICOLON
    {                                                         ( _3 )}

namespace:
  _1 = NAMESPACE _2 = IDENTIFIER _3 = LBRACE _4 = namespaceMembers _5 = RBRACE _6 = SEMICOLON
    {    ( (_2, _4) )}

namespaceMembers:
  
    {       ( [] )}
| _1 = extendedAttributeList _2 = namespaceMember _3 = namespaceMembers
    {    ( (_1, _2) :: _3 )}

namespaceMember:
  _1 = returnType _2 = operationRest
    {                               ( `NoSpecialOperation(_1, _2) )}
| _1 = READONLY _2 = attributeRest
    {                             ( `ReadOnly (`AttributeRest _2) )}

dictionary:
  _1 = DICTIONARY _2 = IDENTIFIER _3 = inheritance _4 = LBRACE _5 = dictionaryMembers _6 = RBRACE _7 = SEMICOLON
    {    ( (_2, _3, _5) )}

dictionaryMembers:
  _1 = dictionaryMember _2 = dictionaryMembers
    {                                          ( _1 :: _2 )}
| 
    {       ( [] )}

dictionaryMember:
  _1 = extendedAttributeList _2 = REQUIRED _3 = typeWithExtendedAttributes _4 = IDENTIFIER _5 = default _6 = SEMICOLON
    {    ( (_1, `Required(_3, _4, _5)))}
| _1 = extendedAttributeList _2 = type_ _3 = IDENTIFIER _4 = default _5 = SEMICOLON
    {    ( (_1, `NotRequired(_2, _3, _4)))}

partialDictionary:
  _1 = DICTIONARY _2 = IDENTIFIER _3 = LBRACE _4 = dictionaryMembers _5 = RBRACE _6 = SEMICOLON
    {    ( (_2, _4) )}

default:
  _1 = EQUAL _2 = defaultValue
    {                         ( Some _2 )}
| 
    {       ( None )}

enum:
  _1 = ENUM _2 = IDENTIFIER _3 = LBRACE _4 = enumValueList _5 = RBRACE _6 = SEMICOLON
    {                                                            ( (_2, _4) )}

enumValueList:
  _1 = STRING _2 = enumValueListComma
    {                                ( _1 :: _2 )}

enumValueListComma:
  _1 = COMMA _2 = enumValueListString
    {                                ( _2 )}
| 
    {       ( [] )}

enumValueListString:
  _1 = STRING _2 = enumValueListComma
    {                                ( _1 :: _2 )}
| 
    {       ( [] )}

callbackRest:
  _1 = IDENTIFIER _2 = EQUAL _3 = returnType _4 = LPAR _5 = argumentList _6 = RPAR _7 = SEMICOLON
    {    ( (_1, _3, _5) )}

typedef:
  _1 = TYPEDEF _2 = typeWithExtendedAttributes _3 = IDENTIFIER _4 = SEMICOLON
    {                                                              ( (_2, _3) )}

implementsStatement:
  _1 = IDENTIFIER _2 = IMPLEMENTS _3 = IDENTIFIER _4 = SEMICOLON
    {                                                 ( (_1, _3) )}

includes:
  _1 = IDENTIFIER _2 = INCLUDES _3 = IDENTIFIER _4 = SEMICOLON
    {                                               ( (_1, _3) )}

type_:
  _1 = singleType
    {                 ( _1 )}
| _1 = unionType _2 = null
    {                     ( if _2 then `Nullable (`Union _1) else (`Union _1) )}

typeWithExtendedAttributes:
  _1 = extendedAttributeList _2 = singleType
    {                                        ( (_1, _2) )}
| _1 = extendedAttributeList _2 = unionType _3 = null
    {    ( if _3 then (_1, `Nullable (`Union _2)) else (_1, (`Union _2)) )}

singleType:
  _1 = nonAnyType
    {                 ( _1 :> type_ )}
| _1 = ANY
    {          ( `Any )}

unionType:
  _1 = LPAR _2 = unionMemberType _3 = OR _4 = unionMemberType _5 = unionMemberTypes _6 = RPAR
    {    ( _2 :: _4 :: _5 )}

unionMemberType:
  _1 = extendedAttributeList _2 = nonAnyType
    {                                       ( `NonAny (_1, _2) )}
| _1 = unionType _2 = null
    {                     ( if _2 then `Nullable (`Union _1) else (`Union _1) )}

unionMemberTypes:
  _1 = OR _2 = unionMemberType _3 = unionMemberTypes
    {                                          ( _2 :: _3 )}
| 
    {       ( [] )}

nonAnyType:
  _1 = promiseType
    {                   ( `Promise _1 )}
| _1 = primitiveType _2 = null
    {                         ( to_non_any _2 _1 )}
| _1 = stringType _2 = null
    {                      ( to_non_any _2 _1 )}
| _1 = IDENTIFIER _2 = null
    {                      ( to_non_any _2 (`Ident _1)  )}
| _1 = SEQUENCE _2 = LT _3 = typeWithExtendedAttributes _4 = GT _5 = null
    {                                                     ( to_non_any _5 (`Sequence _3) )}
| _1 = OBJECT _2 = null
    {                  ( to_non_any _2 `Object)}
| _1 = ERROR_ _2 = null
    {                  ( to_non_any _2 `Object)}
| _1 = DOMEXCEPTION _2 = null
    {                        ( to_non_any _2 `DomException )}
| _1 = bufferRelatedType _2 = null
    {                             ( to_non_any _2 _1 )}
| _1 = FROZENARRAY _2 = LT _3 = typeWithExtendedAttributes _4 = GT _5 = null
    {                                                        ( to_non_any _5 (`FrozenArray _3) )}
| _1 = recordType _2 = null
    {                      ( to_non_any _2 (`Record _1) )}
| _1 = legacyArray
    {                  ( _1 )}

primitiveType:
  _1 = unsignedIntegerType
    {                          ( _1 )}
| _1 = unrestrictedFloatType
    {                            ( _1 )}
| _1 = BOOLEAN
    {              ( `Boolean )}
| _1 = BYTE
    {           ( `Byte )}
| _1 = OCTET
    {            ( `Octet )}

unrestrictedFloatType:
  _1 = UNRESTRICTED _2 = floatType
    {                             ( `Unrestricted _2 )}
| _1 = floatType
    {                ( _1 :> primitive )}

floatType:
  _1 = FLOAT
    {            ( `Float )}
| _1 = DOUBLE
    {             ( `Double )}

unsignedIntegerType:
  _1 = UNSIGNED _2 = integerType
    {                           ( `Unsigned _2 )}
| _1 = integerType
    {                  ( _1 :> primitive )}

integerType:
  _1 = SHORT
    {            ( `Short )}
| _1 = LONG _2 = optionalLong
    {                        ( _2 )}

optionalLong:
  _1 = LONG
    {           ( `LongLong )}
| 
    {       ( `Long )}

stringType:
  _1 = BYTESTRING
    {                 ( `ByteString )}
| _1 = DOMSTRING
    {                ( `DOMString )}
| _1 = USVSTRING
    {                ( `USVString )}

promiseType:
  _1 = PROMISE _2 = LT _3 = returnType _4 = GT
    {                               ( _3 )}
| _1 = promiseOnly
    {                  ( _1 )}
| _1 = promiseNull
    {                  ( _1 )}

recordType:
  _1 = RECORD _2 = LT _3 = stringType _4 = COMMA _5 = typeWithExtendedAttributes _6 = GT
    {                                                               ( (_3, _5) )}

null:
  _1 = QUESTION
    {               ( true )}
| 
    {       ( false )}

bufferRelatedType:
  _1 = ARRAYBUFFER
    {                  ( `ArrayBuffer )}
| _1 = DATAVIEW
    {               ( `DataView )}
| _1 = INT8ARRAY
    {                ( `Int8Array )}
| _1 = INT16ARRAY
    {                 ( `Int16Array )}
| _1 = INT32ARRAY
    {                 ( `Int32Array )}
| _1 = UINT8ARRAY
    {                 ( `Uint8Array )}
| _1 = UINT16ARRAY
    {                  ( `Uint16Array )}
| _1 = UINT32ARRAY
    {                  ( `Uint32Array )}
| _1 = UINT8CLAMPEDARRAY
    {                        ( `Uint8Clampedarray )}
| _1 = FLOAT32ARRAY
    {                   ( `Float32Array )}
| _1 = FLOAT64ARRAY
    {                   ( `Float64Array )}

%%
