State 0:
## Known stack suffix:
##
## LR(1) items:
annot' -> . annot [ # ]
## Transitions:
-- On SET shift to state 1
-- On REQUIRES shift to state 181
-- On PREDICATE shift to state 183
-- On LOOP_ASSIGNS shift to state 198
-- On LOGIC shift to state 201
-- On LABEL shift to state 212
-- On INVARIANT shift to state 214
-- On GHOST shift to state 219
-- On AXIOM shift to state 246
-- On ASSERT shift to state 250
-- On spec shift to state 252
-- On pre_condition shift to state 253
-- On ne_loop_effects shift to state 268
-- On loop_effects shift to state 269
-- On loop_annot shift to state 271
-- On invariant shift to state 272
-- On ghost_decl shift to state 276
-- On decl shift to state 277
-- On annotation shift to state 278
-- On annot shift to state 280
## Reductions:
-- On VARIANT reduce production loop_effects ->
-- On EOF reduce production pre_condition ->
-- On ENSURES reduce production pre_condition ->
-- On DECREASES reduce production pre_condition ->
-- On ASSIGNS reduce production pre_condition ->

State 1:
## Known stack suffix:
## SET
## LR(1) items:
annotation -> SET . ghost_lvalue EQUAL lexpr [ EOF ]
## Transitions:
-- On VALID_RANGE shift to state 2
-- On VALID_INDEX shift to state 4
-- On VALID shift to state 6
-- On TRUE shift to state 8
-- On STAR shift to state 9
-- On SEPARATED shift to state 10
-- On RESULT shift to state 12
-- On PLUS shift to state 13
-- On OLD shift to state 14
-- On NULL shift to state 16
-- On NOT shift to state 17
-- On MINUS shift to state 18
-- On LPAR shift to state 19
-- On IF shift to state 39
-- On IDENTIFIER shift to state 40
-- On FULLSEPARATED shift to state 42
-- On FRESH shift to state 44
-- On FORALL shift to state 46
-- On FALSE shift to state 65
-- On EXISTS shift to state 66
-- On CONSTANT shift to state 69
-- On BLOCK_LENGTH shift to state 70
-- On BASE_ADDR shift to state 72
-- On AT shift to state 74
-- On AMP shift to state 76
-- On lexpr shift to state 177
-- On ghost_lvalue shift to state 178
## Reductions:

State 2:
## Known stack suffix:
## VALID_RANGE
## LR(1) items:
lexpr -> VALID_RANGE . LPAR lexpr COMMA lexpr COMMA lexpr RPAR [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
-- On LPAR shift to state 3
## Reductions:

State 3:
## Known stack suffix:
## VALID_RANGE LPAR
## LR(1) items:
lexpr -> VALID_RANGE LPAR . lexpr COMMA lexpr COMMA lexpr RPAR [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
-- On VALID_RANGE shift to state 2
-- On VALID_INDEX shift to state 4
-- On VALID shift to state 6
-- On TRUE shift to state 8
-- On STAR shift to state 9
-- On SEPARATED shift to state 10
-- On RESULT shift to state 12
-- On PLUS shift to state 13
-- On OLD shift to state 14
-- On NULL shift to state 16
-- On NOT shift to state 17
-- On MINUS shift to state 18
-- On LPAR shift to state 19
-- On IF shift to state 39
-- On IDENTIFIER shift to state 40
-- On FULLSEPARATED shift to state 42
-- On FRESH shift to state 44
-- On FORALL shift to state 46
-- On FALSE shift to state 65
-- On EXISTS shift to state 66
-- On CONSTANT shift to state 69
-- On BLOCK_LENGTH shift to state 70
-- On BASE_ADDR shift to state 72
-- On AT shift to state 74
-- On AMP shift to state 76
-- On lexpr shift to state 171
## Reductions:

State 4:
## Known stack suffix:
## VALID_INDEX
## LR(1) items:
lexpr -> VALID_INDEX . LPAR lexpr COMMA lexpr RPAR [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
-- On LPAR shift to state 5
## Reductions:

State 5:
## Known stack suffix:
## VALID_INDEX LPAR
## LR(1) items:
lexpr -> VALID_INDEX LPAR . lexpr COMMA lexpr RPAR [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
-- On VALID_RANGE shift to state 2
-- On VALID_INDEX shift to state 4
-- On VALID shift to state 6
-- On TRUE shift to state 8
-- On STAR shift to state 9
-- On SEPARATED shift to state 10
-- On RESULT shift to state 12
-- On PLUS shift to state 13
-- On OLD shift to state 14
-- On NULL shift to state 16
-- On NOT shift to state 17
-- On MINUS shift to state 18
-- On LPAR shift to state 19
-- On IF shift to state 39
-- On IDENTIFIER shift to state 40
-- On FULLSEPARATED shift to state 42
-- On FRESH shift to state 44
-- On FORALL shift to state 46
-- On FALSE shift to state 65
-- On EXISTS shift to state 66
-- On CONSTANT shift to state 69
-- On BLOCK_LENGTH shift to state 70
-- On BASE_ADDR shift to state 72
-- On AT shift to state 74
-- On AMP shift to state 76
-- On lexpr shift to state 167
## Reductions:

State 6:
## Known stack suffix:
## VALID
## LR(1) items:
lexpr -> VALID . LPAR lexpr RPAR [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
-- On LPAR shift to state 7
## Reductions:

State 7:
## Known stack suffix:
## VALID LPAR
## LR(1) items:
lexpr -> VALID LPAR . lexpr RPAR [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
-- On VALID_RANGE shift to state 2
-- On VALID_INDEX shift to state 4
-- On VALID shift to state 6
-- On TRUE shift to state 8
-- On STAR shift to state 9
-- On SEPARATED shift to state 10
-- On RESULT shift to state 12
-- On PLUS shift to state 13
-- On OLD shift to state 14
-- On NULL shift to state 16
-- On NOT shift to state 17
-- On MINUS shift to state 18
-- On LPAR shift to state 19
-- On IF shift to state 39
-- On IDENTIFIER shift to state 40
-- On FULLSEPARATED shift to state 42
-- On FRESH shift to state 44
-- On FORALL shift to state 46
-- On FALSE shift to state 65
-- On EXISTS shift to state 66
-- On CONSTANT shift to state 69
-- On BLOCK_LENGTH shift to state 70
-- On BASE_ADDR shift to state 72
-- On AT shift to state 74
-- On AMP shift to state 76
-- On lexpr shift to state 165
## Reductions:

State 8:
## Known stack suffix:
## TRUE
## LR(1) items:
lexpr -> TRUE . [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production lexpr -> TRUE

State 9:
## Known stack suffix:
## STAR
## LR(1) items:
lexpr -> STAR . lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
-- On VALID_RANGE shift to state 2
-- On VALID_INDEX shift to state 4
-- On VALID shift to state 6
-- On TRUE shift to state 8
-- On STAR shift to state 9
-- On SEPARATED shift to state 10
-- On RESULT shift to state 12
-- On PLUS shift to state 13
-- On OLD shift to state 14
-- On NULL shift to state 16
-- On NOT shift to state 17
-- On MINUS shift to state 18
-- On LPAR shift to state 19
-- On IF shift to state 39
-- On IDENTIFIER shift to state 40
-- On FULLSEPARATED shift to state 42
-- On FRESH shift to state 44
-- On FORALL shift to state 46
-- On FALSE shift to state 65
-- On EXISTS shift to state 66
-- On CONSTANT shift to state 69
-- On BLOCK_LENGTH shift to state 70
-- On BASE_ADDR shift to state 72
-- On AT shift to state 74
-- On AMP shift to state 76
-- On lexpr shift to state 164
## Reductions:

State 10:
## Known stack suffix:
## SEPARATED
## LR(1) items:
lexpr -> SEPARATED . LPAR lexpr COMMA lexpr RPAR [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
-- On LPAR shift to state 11
## Reductions:

State 11:
## Known stack suffix:
## SEPARATED LPAR
## LR(1) items:
lexpr -> SEPARATED LPAR . lexpr COMMA lexpr RPAR [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
-- On VALID_RANGE shift to state 2
-- On VALID_INDEX shift to state 4
-- On VALID shift to state 6
-- On TRUE shift to state 8
-- On STAR shift to state 9
-- On SEPARATED shift to state 10
-- On RESULT shift to state 12
-- On PLUS shift to state 13
-- On OLD shift to state 14
-- On NULL shift to state 16
-- On NOT shift to state 17
-- On MINUS shift to state 18
-- On LPAR shift to state 19
-- On IF shift to state 39
-- On IDENTIFIER shift to state 40
-- On FULLSEPARATED shift to state 42
-- On FRESH shift to state 44
-- On FORALL shift to state 46
-- On FALSE shift to state 65
-- On EXISTS shift to state 66
-- On CONSTANT shift to state 69
-- On BLOCK_LENGTH shift to state 70
-- On BASE_ADDR shift to state 72
-- On AT shift to state 74
-- On AMP shift to state 76
-- On lexpr shift to state 160
## Reductions:

State 12:
## Known stack suffix:
## RESULT
## LR(1) items:
lexpr -> RESULT . [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production lexpr -> RESULT

State 13:
## Known stack suffix:
## PLUS
## LR(1) items:
lexpr -> PLUS . lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
-- On VALID_RANGE shift to state 2
-- On VALID_INDEX shift to state 4
-- On VALID shift to state 6
-- On TRUE shift to state 8
-- On STAR shift to state 9
-- On SEPARATED shift to state 10
-- On RESULT shift to state 12
-- On PLUS shift to state 13
-- On OLD shift to state 14
-- On NULL shift to state 16
-- On NOT shift to state 17
-- On MINUS shift to state 18
-- On LPAR shift to state 19
-- On IF shift to state 39
-- On IDENTIFIER shift to state 40
-- On FULLSEPARATED shift to state 42
-- On FRESH shift to state 44
-- On FORALL shift to state 46
-- On FALSE shift to state 65
-- On EXISTS shift to state 66
-- On CONSTANT shift to state 69
-- On BLOCK_LENGTH shift to state 70
-- On BASE_ADDR shift to state 72
-- On AT shift to state 74
-- On AMP shift to state 76
-- On lexpr shift to state 159
## Reductions:

State 14:
## Known stack suffix:
## OLD
## LR(1) items:
lexpr -> OLD . LPAR lexpr RPAR [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
-- On LPAR shift to state 15
## Reductions:

State 15:
## Known stack suffix:
## OLD LPAR
## LR(1) items:
lexpr -> OLD LPAR . lexpr RPAR [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
-- On VALID_RANGE shift to state 2
-- On VALID_INDEX shift to state 4
-- On VALID shift to state 6
-- On TRUE shift to state 8
-- On STAR shift to state 9
-- On SEPARATED shift to state 10
-- On RESULT shift to state 12
-- On PLUS shift to state 13
-- On OLD shift to state 14
-- On NULL shift to state 16
-- On NOT shift to state 17
-- On MINUS shift to state 18
-- On LPAR shift to state 19
-- On IF shift to state 39
-- On IDENTIFIER shift to state 40
-- On FULLSEPARATED shift to state 42
-- On FRESH shift to state 44
-- On FORALL shift to state 46
-- On FALSE shift to state 65
-- On EXISTS shift to state 66
-- On CONSTANT shift to state 69
-- On BLOCK_LENGTH shift to state 70
-- On BASE_ADDR shift to state 72
-- On AT shift to state 74
-- On AMP shift to state 76
-- On lexpr shift to state 157
## Reductions:

State 16:
## Known stack suffix:
## NULL
## LR(1) items:
lexpr -> NULL . [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production lexpr -> NULL

State 17:
## Known stack suffix:
## NOT
## LR(1) items:
lexpr -> NOT . lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
-- On VALID_RANGE shift to state 2
-- On VALID_INDEX shift to state 4
-- On VALID shift to state 6
-- On TRUE shift to state 8
-- On STAR shift to state 9
-- On SEPARATED shift to state 10
-- On RESULT shift to state 12
-- On PLUS shift to state 13
-- On OLD shift to state 14
-- On NULL shift to state 16
-- On NOT shift to state 17
-- On MINUS shift to state 18
-- On LPAR shift to state 19
-- On IF shift to state 39
-- On IDENTIFIER shift to state 40
-- On FULLSEPARATED shift to state 42
-- On FRESH shift to state 44
-- On FORALL shift to state 46
-- On FALSE shift to state 65
-- On EXISTS shift to state 66
-- On CONSTANT shift to state 69
-- On BLOCK_LENGTH shift to state 70
-- On BASE_ADDR shift to state 72
-- On AT shift to state 74
-- On AMP shift to state 76
-- On lexpr shift to state 156
## Reductions:

State 18:
## Known stack suffix:
## MINUS
## LR(1) items:
lexpr -> MINUS . lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
-- On VALID_RANGE shift to state 2
-- On VALID_INDEX shift to state 4
-- On VALID shift to state 6
-- On TRUE shift to state 8
-- On STAR shift to state 9
-- On SEPARATED shift to state 10
-- On RESULT shift to state 12
-- On PLUS shift to state 13
-- On OLD shift to state 14
-- On NULL shift to state 16
-- On NOT shift to state 17
-- On MINUS shift to state 18
-- On LPAR shift to state 19
-- On IF shift to state 39
-- On IDENTIFIER shift to state 40
-- On FULLSEPARATED shift to state 42
-- On FRESH shift to state 44
-- On FORALL shift to state 46
-- On FALSE shift to state 65
-- On EXISTS shift to state 66
-- On CONSTANT shift to state 69
-- On BLOCK_LENGTH shift to state 70
-- On BASE_ADDR shift to state 72
-- On AT shift to state 74
-- On AMP shift to state 76
-- On lexpr shift to state 155
## Reductions:

State 19:
## Known stack suffix:
## LPAR
## LR(1) items:
lexpr -> LPAR . lexpr RPAR [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> LPAR . logic_type_not_id RPAR lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> LPAR . lexpr RPAR lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
-- On VOID shift to state 20
-- On VALID_RANGE shift to state 2
-- On VALID_INDEX shift to state 4
-- On VALID shift to state 6
-- On UNSIGNED shift to state 21
-- On TYPENAME shift to state 27
-- On TRUE shift to state 8
-- On STAR shift to state 9
-- On SIGNED shift to state 28
-- On SHORT shift to state 34
-- On SEPARATED shift to state 10
-- On RESULT shift to state 12
-- On PLUS shift to state 13
-- On OLD shift to state 14
-- On NULL shift to state 16
-- On NOT shift to state 17
-- On MINUS shift to state 18
-- On LPAR shift to state 19
-- On LONG shift to state 35
-- On INT shift to state 38
-- On IF shift to state 39
-- On IDENTIFIER shift to state 40
-- On FULLSEPARATED shift to state 42
-- On FRESH shift to state 44
-- On FORALL shift to state 46
-- On FLOAT shift to state 51
-- On FALSE shift to state 65
-- On EXISTS shift to state 66
-- On DOUBLE shift to state 52
-- On CONSTANT shift to state 69
-- On CHAR shift to state 53
-- On BLOCK_LENGTH shift to state 70
-- On BASE_ADDR shift to state 72
-- On AT shift to state 74
-- On AMP shift to state 76
-- On logic_type_not_id shift to state 149
-- On lexpr shift to state 152
## Reductions:

State 20:
## Known stack suffix:
## VOID
## LR(1) items:
logic_type_not_id -> VOID . [ STAR RPAR IDENTIFIER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production logic_type_not_id -> VOID

State 21:
## Known stack suffix:
## UNSIGNED
## LR(1) items:
logic_type_not_id -> UNSIGNED . CHAR [ STAR RPAR IDENTIFIER ]
logic_type_not_id -> UNSIGNED . INT [ STAR RPAR IDENTIFIER ]
logic_type_not_id -> UNSIGNED . SHORT [ STAR RPAR IDENTIFIER ]
logic_type_not_id -> UNSIGNED . LONG [ STAR RPAR IDENTIFIER ]
logic_type_not_id -> UNSIGNED . LONG LONG [ STAR RPAR IDENTIFIER ]
## Transitions:
-- On SHORT shift to state 22
-- On LONG shift to state 23
-- On INT shift to state 25
-- On CHAR shift to state 26
## Reductions:

State 22:
## Known stack suffix:
## UNSIGNED SHORT
## LR(1) items:
logic_type_not_id -> UNSIGNED SHORT . [ STAR RPAR IDENTIFIER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production logic_type_not_id -> UNSIGNED SHORT

State 23:
## Known stack suffix:
## UNSIGNED LONG
## LR(1) items:
logic_type_not_id -> UNSIGNED LONG . [ STAR RPAR IDENTIFIER ]
logic_type_not_id -> UNSIGNED LONG . LONG [ STAR RPAR IDENTIFIER ]
## Transitions:
-- On LONG shift to state 24
## Reductions:
-- On STAR reduce production logic_type_not_id -> UNSIGNED LONG
-- On RPAR reduce production logic_type_not_id -> UNSIGNED LONG
-- On IDENTIFIER reduce production logic_type_not_id -> UNSIGNED LONG

State 24:
## Known stack suffix:
## UNSIGNED LONG LONG
## LR(1) items:
logic_type_not_id -> UNSIGNED LONG LONG . [ STAR RPAR IDENTIFIER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production logic_type_not_id -> UNSIGNED LONG LONG

State 25:
## Known stack suffix:
## UNSIGNED INT
## LR(1) items:
logic_type_not_id -> UNSIGNED INT . [ STAR RPAR IDENTIFIER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production logic_type_not_id -> UNSIGNED INT

State 26:
## Known stack suffix:
## UNSIGNED CHAR
## LR(1) items:
logic_type_not_id -> UNSIGNED CHAR . [ STAR RPAR IDENTIFIER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production logic_type_not_id -> UNSIGNED CHAR

State 27:
## Known stack suffix:
## TYPENAME
## LR(1) items:
logic_type_not_id -> TYPENAME . [ STAR RPAR IDENTIFIER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production logic_type_not_id -> TYPENAME

State 28:
## Known stack suffix:
## SIGNED
## LR(1) items:
logic_type_not_id -> SIGNED . CHAR [ STAR RPAR IDENTIFIER ]
logic_type_not_id -> SIGNED . INT [ STAR RPAR IDENTIFIER ]
logic_type_not_id -> SIGNED . SHORT [ STAR RPAR IDENTIFIER ]
logic_type_not_id -> SIGNED . LONG [ STAR RPAR IDENTIFIER ]
logic_type_not_id -> SIGNED . LONG LONG [ STAR RPAR IDENTIFIER ]
## Transitions:
-- On SHORT shift to state 29
-- On LONG shift to state 30
-- On INT shift to state 32
-- On CHAR shift to state 33
## Reductions:

State 29:
## Known stack suffix:
## SIGNED SHORT
## LR(1) items:
logic_type_not_id -> SIGNED SHORT . [ STAR RPAR IDENTIFIER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production logic_type_not_id -> SIGNED SHORT

State 30:
## Known stack suffix:
## SIGNED LONG
## LR(1) items:
logic_type_not_id -> SIGNED LONG . [ STAR RPAR IDENTIFIER ]
logic_type_not_id -> SIGNED LONG . LONG [ STAR RPAR IDENTIFIER ]
## Transitions:
-- On LONG shift to state 31
## Reductions:
-- On STAR reduce production logic_type_not_id -> SIGNED LONG
-- On RPAR reduce production logic_type_not_id -> SIGNED LONG
-- On IDENTIFIER reduce production logic_type_not_id -> SIGNED LONG

State 31:
## Known stack suffix:
## SIGNED LONG LONG
## LR(1) items:
logic_type_not_id -> SIGNED LONG LONG . [ STAR RPAR IDENTIFIER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production logic_type_not_id -> SIGNED LONG LONG

State 32:
## Known stack suffix:
## SIGNED INT
## LR(1) items:
logic_type_not_id -> SIGNED INT . [ STAR RPAR IDENTIFIER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production logic_type_not_id -> SIGNED INT

State 33:
## Known stack suffix:
## SIGNED CHAR
## LR(1) items:
logic_type_not_id -> SIGNED CHAR . [ STAR RPAR IDENTIFIER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production logic_type_not_id -> SIGNED CHAR

State 34:
## Known stack suffix:
## SHORT
## LR(1) items:
logic_type_not_id -> SHORT . [ STAR RPAR IDENTIFIER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production logic_type_not_id -> SHORT

State 35:
## Known stack suffix:
## LONG
## LR(1) items:
logic_type_not_id -> LONG . [ STAR RPAR IDENTIFIER ]
logic_type_not_id -> LONG . LONG [ STAR RPAR IDENTIFIER ]
logic_type_not_id -> LONG . DOUBLE [ STAR RPAR IDENTIFIER ]
## Transitions:
-- On LONG shift to state 36
-- On DOUBLE shift to state 37
## Reductions:
-- On STAR reduce production logic_type_not_id -> LONG
-- On RPAR reduce production logic_type_not_id -> LONG
-- On IDENTIFIER reduce production logic_type_not_id -> LONG

State 36:
## Known stack suffix:
## LONG LONG
## LR(1) items:
logic_type_not_id -> LONG LONG . [ STAR RPAR IDENTIFIER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production logic_type_not_id -> LONG LONG

State 37:
## Known stack suffix:
## LONG DOUBLE
## LR(1) items:
logic_type_not_id -> LONG DOUBLE . [ STAR RPAR IDENTIFIER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production logic_type_not_id -> LONG DOUBLE

State 38:
## Known stack suffix:
## INT
## LR(1) items:
logic_type_not_id -> INT . [ STAR RPAR IDENTIFIER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production logic_type_not_id -> INT

State 39:
## Known stack suffix:
## IF
## LR(1) items:
lexpr -> IF . lexpr THEN lexpr ELSE lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
-- On VALID_RANGE shift to state 2
-- On VALID_INDEX shift to state 4
-- On VALID shift to state 6
-- On TRUE shift to state 8
-- On STAR shift to state 9
-- On SEPARATED shift to state 10
-- On RESULT shift to state 12
-- On PLUS shift to state 13
-- On OLD shift to state 14
-- On NULL shift to state 16
-- On NOT shift to state 17
-- On MINUS shift to state 18
-- On LPAR shift to state 19
-- On IF shift to state 39
-- On IDENTIFIER shift to state 40
-- On FULLSEPARATED shift to state 42
-- On FRESH shift to state 44
-- On FORALL shift to state 46
-- On FALSE shift to state 65
-- On EXISTS shift to state 66
-- On CONSTANT shift to state 69
-- On BLOCK_LENGTH shift to state 70
-- On BASE_ADDR shift to state 72
-- On AT shift to state 74
-- On AMP shift to state 76
-- On lexpr shift to state 144
## Reductions:

State 40:
## Known stack suffix:
## IDENTIFIER
## LR(1) items:
lexpr -> IDENTIFIER . [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> IDENTIFIER . LPAR lexpr_list RPAR [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> IDENTIFIER . COLONCOLON lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
-- On LPAR shift to state 41
-- On COLONCOLON shift to state 142
## Reductions:
-- On VARIANT reduce production lexpr -> IDENTIFIER
-- On THEN reduce production lexpr -> IDENTIFIER
-- On STAR reduce production lexpr -> IDENTIFIER
-- On SLASH reduce production lexpr -> IDENTIFIER
-- On RSQUARE reduce production lexpr -> IDENTIFIER
-- On RPAR reduce production lexpr -> IDENTIFIER
-- On RBRACE reduce production lexpr -> IDENTIFIER
-- On QUESTION reduce production lexpr -> IDENTIFIER
-- On PLUS reduce production lexpr -> IDENTIFIER
-- On PERCENT reduce production lexpr -> IDENTIFIER
-- On OR reduce production lexpr -> IDENTIFIER
-- On NE reduce production lexpr -> IDENTIFIER
-- On MINUS reduce production lexpr -> IDENTIFIER
-- On LT reduce production lexpr -> IDENTIFIER
-- On LSQUARE reduce production lexpr -> IDENTIFIER
-- On LOOP_ASSIGNS reduce production lexpr -> IDENTIFIER
-- On LE reduce production lexpr -> IDENTIFIER
-- On IMPLIES reduce production lexpr -> IDENTIFIER
-- On IFF reduce production lexpr -> IDENTIFIER
-- On GT reduce production lexpr -> IDENTIFIER
-- On GE reduce production lexpr -> IDENTIFIER
-- On FOR reduce production lexpr -> IDENTIFIER
-- On EQUAL reduce production lexpr -> IDENTIFIER
-- On EQ reduce production lexpr -> IDENTIFIER
-- On EOF reduce production lexpr -> IDENTIFIER
-- On ENSURES reduce production lexpr -> IDENTIFIER
-- On ELSE reduce production lexpr -> IDENTIFIER
-- On DOTDOT reduce production lexpr -> IDENTIFIER
-- On DOT reduce production lexpr -> IDENTIFIER
-- On DECREASES reduce production lexpr -> IDENTIFIER
-- On COMMA reduce production lexpr -> IDENTIFIER
-- On COLON reduce production lexpr -> IDENTIFIER
-- On ASSIGNS reduce production lexpr -> IDENTIFIER
-- On ARROW reduce production lexpr -> IDENTIFIER
-- On AND reduce production lexpr -> IDENTIFIER

State 41:
## Known stack suffix:
## IDENTIFIER LPAR
## LR(1) items:
lexpr -> IDENTIFIER LPAR . lexpr_list RPAR [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
-- On VALID_RANGE shift to state 2
-- On VALID_INDEX shift to state 4
-- On VALID shift to state 6
-- On TRUE shift to state 8
-- On STAR shift to state 9
-- On SEPARATED shift to state 10
-- On RESULT shift to state 12
-- On PLUS shift to state 13
-- On OLD shift to state 14
-- On NULL shift to state 16
-- On NOT shift to state 17
-- On MINUS shift to state 18
-- On LPAR shift to state 19
-- On IF shift to state 39
-- On IDENTIFIER shift to state 40
-- On FULLSEPARATED shift to state 42
-- On FRESH shift to state 44
-- On FORALL shift to state 46
-- On FALSE shift to state 65
-- On EXISTS shift to state 66
-- On CONSTANT shift to state 69
-- On BLOCK_LENGTH shift to state 70
-- On BASE_ADDR shift to state 72
-- On AT shift to state 74
-- On AMP shift to state 76
-- On ne_lexpr_list shift to state 136
-- On lexpr_list shift to state 137
-- On lexpr shift to state 139
## Reductions:
-- On RPAR reduce production lexpr_list ->

State 42:
## Known stack suffix:
## FULLSEPARATED
## LR(1) items:
lexpr -> FULLSEPARATED . LPAR lexpr COMMA lexpr RPAR [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
-- On LPAR shift to state 43
## Reductions:

State 43:
## Known stack suffix:
## FULLSEPARATED LPAR
## LR(1) items:
lexpr -> FULLSEPARATED LPAR . lexpr COMMA lexpr RPAR [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
-- On VALID_RANGE shift to state 2
-- On VALID_INDEX shift to state 4
-- On VALID shift to state 6
-- On TRUE shift to state 8
-- On STAR shift to state 9
-- On SEPARATED shift to state 10
-- On RESULT shift to state 12
-- On PLUS shift to state 13
-- On OLD shift to state 14
-- On NULL shift to state 16
-- On NOT shift to state 17
-- On MINUS shift to state 18
-- On LPAR shift to state 19
-- On IF shift to state 39
-- On IDENTIFIER shift to state 40
-- On FULLSEPARATED shift to state 42
-- On FRESH shift to state 44
-- On FORALL shift to state 46
-- On FALSE shift to state 65
-- On EXISTS shift to state 66
-- On CONSTANT shift to state 69
-- On BLOCK_LENGTH shift to state 70
-- On BASE_ADDR shift to state 72
-- On AT shift to state 74
-- On AMP shift to state 76
-- On lexpr shift to state 132
## Reductions:

State 44:
## Known stack suffix:
## FRESH
## LR(1) items:
lexpr -> FRESH . LPAR lexpr RPAR [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
-- On LPAR shift to state 45
## Reductions:

State 45:
## Known stack suffix:
## FRESH LPAR
## LR(1) items:
lexpr -> FRESH LPAR . lexpr RPAR [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
-- On VALID_RANGE shift to state 2
-- On VALID_INDEX shift to state 4
-- On VALID shift to state 6
-- On TRUE shift to state 8
-- On STAR shift to state 9
-- On SEPARATED shift to state 10
-- On RESULT shift to state 12
-- On PLUS shift to state 13
-- On OLD shift to state 14
-- On NULL shift to state 16
-- On NOT shift to state 17
-- On MINUS shift to state 18
-- On LPAR shift to state 19
-- On IF shift to state 39
-- On IDENTIFIER shift to state 40
-- On FULLSEPARATED shift to state 42
-- On FRESH shift to state 44
-- On FORALL shift to state 46
-- On FALSE shift to state 65
-- On EXISTS shift to state 66
-- On CONSTANT shift to state 69
-- On BLOCK_LENGTH shift to state 70
-- On BASE_ADDR shift to state 72
-- On AT shift to state 74
-- On AMP shift to state 76
-- On lexpr shift to state 130
## Reductions:

State 46:
## Known stack suffix:
## FORALL
## LR(1) items:
lexpr -> FORALL . ne_parameters SEMICOLON lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
-- On VOID shift to state 20
-- On UNSIGNED shift to state 21
-- On TYPENAME shift to state 27
-- On SIGNED shift to state 28
-- On SHORT shift to state 34
-- On LONG shift to state 35
-- On INT shift to state 38
-- On IDENTIFIER shift to state 47
-- On FLOAT shift to state 51
-- On DOUBLE shift to state 52
-- On CHAR shift to state 53
-- On parameter shift to state 54
-- On ne_parameters shift to state 63
-- On logic_type_not_id shift to state 57
-- On logic_type shift to state 59
## Reductions:

State 47:
## Known stack suffix:
## IDENTIFIER
## LR(1) items:
logic_type -> IDENTIFIER . [ IDENTIFIER ]
logic_type -> IDENTIFIER . stars [ IDENTIFIER ]
## Transitions:
-- On STAR shift to state 48
-- On stars shift to state 49
## Reductions:
-- On IDENTIFIER reduce production logic_type -> IDENTIFIER

State 48:
## Known stack suffix:
## STAR
## LR(1) items:
stars -> STAR . [ STAR IDENTIFIER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stars -> STAR

State 49:
## Known stack suffix:
## IDENTIFIER stars
## LR(1) items:
logic_type -> IDENTIFIER stars . [ IDENTIFIER ]
stars -> stars . STAR [ STAR IDENTIFIER ]
## Transitions:
-- On STAR shift to state 50
## Reductions:
-- On IDENTIFIER reduce production logic_type -> IDENTIFIER stars

State 50:
## Known stack suffix:
## stars STAR
## LR(1) items:
stars -> stars STAR . [ STAR IDENTIFIER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stars -> stars STAR

State 51:
## Known stack suffix:
## FLOAT
## LR(1) items:
logic_type_not_id -> FLOAT . [ STAR RPAR IDENTIFIER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production logic_type_not_id -> FLOAT

State 52:
## Known stack suffix:
## DOUBLE
## LR(1) items:
logic_type_not_id -> DOUBLE . [ STAR RPAR IDENTIFIER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production logic_type_not_id -> DOUBLE

State 53:
## Known stack suffix:
## CHAR
## LR(1) items:
logic_type_not_id -> CHAR . [ STAR RPAR IDENTIFIER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production logic_type_not_id -> CHAR

State 54:
## Known stack suffix:
## parameter
## LR(1) items:
ne_parameters -> parameter . [ SEMICOLON RPAR ]
ne_parameters -> parameter . COMMA ne_parameters [ SEMICOLON RPAR ]
## Transitions:
-- On COMMA shift to state 55
## Reductions:
-- On SEMICOLON reduce production ne_parameters -> parameter
-- On RPAR reduce production ne_parameters -> parameter

State 55:
## Known stack suffix:
## parameter COMMA
## LR(1) items:
ne_parameters -> parameter COMMA . ne_parameters [ SEMICOLON RPAR ]
## Transitions:
-- On VOID shift to state 20
-- On UNSIGNED shift to state 21
-- On TYPENAME shift to state 27
-- On SIGNED shift to state 28
-- On SHORT shift to state 34
-- On LONG shift to state 35
-- On INT shift to state 38
-- On IDENTIFIER shift to state 47
-- On FLOAT shift to state 51
-- On DOUBLE shift to state 52
-- On CHAR shift to state 53
-- On parameter shift to state 54
-- On ne_parameters shift to state 56
-- On logic_type_not_id shift to state 57
-- On logic_type shift to state 59
## Reductions:

State 56:
## Known stack suffix:
## parameter COMMA ne_parameters
## LR(1) items:
ne_parameters -> parameter COMMA ne_parameters . [ SEMICOLON RPAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ne_parameters -> parameter COMMA ne_parameters

State 57:
## Known stack suffix:
## logic_type_not_id
## LR(1) items:
logic_type -> logic_type_not_id . [ IDENTIFIER ]
logic_type_not_id -> logic_type_not_id . STAR [ STAR IDENTIFIER ]
## Transitions:
-- On STAR shift to state 58
## Reductions:
-- On IDENTIFIER reduce production logic_type -> logic_type_not_id

State 58:
## Known stack suffix:
## logic_type_not_id STAR
## LR(1) items:
logic_type_not_id -> logic_type_not_id STAR . [ STAR RPAR IDENTIFIER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production logic_type_not_id -> logic_type_not_id STAR

State 59:
## Known stack suffix:
## logic_type
## LR(1) items:
parameter -> logic_type . IDENTIFIER [ SEMICOLON RPAR COMMA ]
parameter -> logic_type . IDENTIFIER LSQUARE RSQUARE [ SEMICOLON RPAR COMMA ]
## Transitions:
-- On IDENTIFIER shift to state 60
## Reductions:

State 60:
## Known stack suffix:
## logic_type IDENTIFIER
## LR(1) items:
parameter -> logic_type IDENTIFIER . [ SEMICOLON RPAR COMMA ]
parameter -> logic_type IDENTIFIER . LSQUARE RSQUARE [ SEMICOLON RPAR COMMA ]
## Transitions:
-- On LSQUARE shift to state 61
## Reductions:
-- On SEMICOLON reduce production parameter -> logic_type IDENTIFIER
-- On RPAR reduce production parameter -> logic_type IDENTIFIER
-- On COMMA reduce production parameter -> logic_type IDENTIFIER

State 61:
## Known stack suffix:
## logic_type IDENTIFIER LSQUARE
## LR(1) items:
parameter -> logic_type IDENTIFIER LSQUARE . RSQUARE [ SEMICOLON RPAR COMMA ]
## Transitions:
-- On RSQUARE shift to state 62
## Reductions:

State 62:
## Known stack suffix:
## logic_type IDENTIFIER LSQUARE RSQUARE
## LR(1) items:
parameter -> logic_type IDENTIFIER LSQUARE RSQUARE . [ SEMICOLON RPAR COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production parameter -> logic_type IDENTIFIER LSQUARE RSQUARE

State 63:
## Known stack suffix:
## FORALL ne_parameters
## LR(1) items:
lexpr -> FORALL ne_parameters . SEMICOLON lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
-- On SEMICOLON shift to state 64
## Reductions:

State 64:
## Known stack suffix:
## FORALL ne_parameters SEMICOLON
## LR(1) items:
lexpr -> FORALL ne_parameters SEMICOLON . lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
-- On VALID_RANGE shift to state 2
-- On VALID_INDEX shift to state 4
-- On VALID shift to state 6
-- On TRUE shift to state 8
-- On STAR shift to state 9
-- On SEPARATED shift to state 10
-- On RESULT shift to state 12
-- On PLUS shift to state 13
-- On OLD shift to state 14
-- On NULL shift to state 16
-- On NOT shift to state 17
-- On MINUS shift to state 18
-- On LPAR shift to state 19
-- On IF shift to state 39
-- On IDENTIFIER shift to state 40
-- On FULLSEPARATED shift to state 42
-- On FRESH shift to state 44
-- On FORALL shift to state 46
-- On FALSE shift to state 65
-- On EXISTS shift to state 66
-- On CONSTANT shift to state 69
-- On BLOCK_LENGTH shift to state 70
-- On BASE_ADDR shift to state 72
-- On AT shift to state 74
-- On AMP shift to state 76
-- On lexpr shift to state 129
## Reductions:

State 65:
## Known stack suffix:
## FALSE
## LR(1) items:
lexpr -> FALSE . [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production lexpr -> FALSE

State 66:
## Known stack suffix:
## EXISTS
## LR(1) items:
lexpr -> EXISTS . ne_parameters SEMICOLON lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
-- On VOID shift to state 20
-- On UNSIGNED shift to state 21
-- On TYPENAME shift to state 27
-- On SIGNED shift to state 28
-- On SHORT shift to state 34
-- On LONG shift to state 35
-- On INT shift to state 38
-- On IDENTIFIER shift to state 47
-- On FLOAT shift to state 51
-- On DOUBLE shift to state 52
-- On CHAR shift to state 53
-- On parameter shift to state 54
-- On ne_parameters shift to state 67
-- On logic_type_not_id shift to state 57
-- On logic_type shift to state 59
## Reductions:

State 67:
## Known stack suffix:
## EXISTS ne_parameters
## LR(1) items:
lexpr -> EXISTS ne_parameters . SEMICOLON lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
-- On SEMICOLON shift to state 68
## Reductions:

State 68:
## Known stack suffix:
## EXISTS ne_parameters SEMICOLON
## LR(1) items:
lexpr -> EXISTS ne_parameters SEMICOLON . lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
-- On VALID_RANGE shift to state 2
-- On VALID_INDEX shift to state 4
-- On VALID shift to state 6
-- On TRUE shift to state 8
-- On STAR shift to state 9
-- On SEPARATED shift to state 10
-- On RESULT shift to state 12
-- On PLUS shift to state 13
-- On OLD shift to state 14
-- On NULL shift to state 16
-- On NOT shift to state 17
-- On MINUS shift to state 18
-- On LPAR shift to state 19
-- On IF shift to state 39
-- On IDENTIFIER shift to state 40
-- On FULLSEPARATED shift to state 42
-- On FRESH shift to state 44
-- On FORALL shift to state 46
-- On FALSE shift to state 65
-- On EXISTS shift to state 66
-- On CONSTANT shift to state 69
-- On BLOCK_LENGTH shift to state 70
-- On BASE_ADDR shift to state 72
-- On AT shift to state 74
-- On AMP shift to state 76
-- On lexpr shift to state 128
## Reductions:

State 69:
## Known stack suffix:
## CONSTANT
## LR(1) items:
lexpr -> CONSTANT . [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production lexpr -> CONSTANT

State 70:
## Known stack suffix:
## BLOCK_LENGTH
## LR(1) items:
lexpr -> BLOCK_LENGTH . LPAR lexpr RPAR [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
-- On LPAR shift to state 71
## Reductions:

State 71:
## Known stack suffix:
## BLOCK_LENGTH LPAR
## LR(1) items:
lexpr -> BLOCK_LENGTH LPAR . lexpr RPAR [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
-- On VALID_RANGE shift to state 2
-- On VALID_INDEX shift to state 4
-- On VALID shift to state 6
-- On TRUE shift to state 8
-- On STAR shift to state 9
-- On SEPARATED shift to state 10
-- On RESULT shift to state 12
-- On PLUS shift to state 13
-- On OLD shift to state 14
-- On NULL shift to state 16
-- On NOT shift to state 17
-- On MINUS shift to state 18
-- On LPAR shift to state 19
-- On IF shift to state 39
-- On IDENTIFIER shift to state 40
-- On FULLSEPARATED shift to state 42
-- On FRESH shift to state 44
-- On FORALL shift to state 46
-- On FALSE shift to state 65
-- On EXISTS shift to state 66
-- On CONSTANT shift to state 69
-- On BLOCK_LENGTH shift to state 70
-- On BASE_ADDR shift to state 72
-- On AT shift to state 74
-- On AMP shift to state 76
-- On lexpr shift to state 126
## Reductions:

State 72:
## Known stack suffix:
## BASE_ADDR
## LR(1) items:
lexpr -> BASE_ADDR . LPAR lexpr RPAR [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
-- On LPAR shift to state 73
## Reductions:

State 73:
## Known stack suffix:
## BASE_ADDR LPAR
## LR(1) items:
lexpr -> BASE_ADDR LPAR . lexpr RPAR [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
-- On VALID_RANGE shift to state 2
-- On VALID_INDEX shift to state 4
-- On VALID shift to state 6
-- On TRUE shift to state 8
-- On STAR shift to state 9
-- On SEPARATED shift to state 10
-- On RESULT shift to state 12
-- On PLUS shift to state 13
-- On OLD shift to state 14
-- On NULL shift to state 16
-- On NOT shift to state 17
-- On MINUS shift to state 18
-- On LPAR shift to state 19
-- On IF shift to state 39
-- On IDENTIFIER shift to state 40
-- On FULLSEPARATED shift to state 42
-- On FRESH shift to state 44
-- On FORALL shift to state 46
-- On FALSE shift to state 65
-- On EXISTS shift to state 66
-- On CONSTANT shift to state 69
-- On BLOCK_LENGTH shift to state 70
-- On BASE_ADDR shift to state 72
-- On AT shift to state 74
-- On AMP shift to state 76
-- On lexpr shift to state 124
## Reductions:

State 74:
## Known stack suffix:
## AT
## LR(1) items:
lexpr -> AT . LPAR lexpr COMMA IDENTIFIER RPAR [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
-- On LPAR shift to state 75
## Reductions:

State 75:
## Known stack suffix:
## AT LPAR
## LR(1) items:
lexpr -> AT LPAR . lexpr COMMA IDENTIFIER RPAR [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
-- On VALID_RANGE shift to state 2
-- On VALID_INDEX shift to state 4
-- On VALID shift to state 6
-- On TRUE shift to state 8
-- On STAR shift to state 9
-- On SEPARATED shift to state 10
-- On RESULT shift to state 12
-- On PLUS shift to state 13
-- On OLD shift to state 14
-- On NULL shift to state 16
-- On NOT shift to state 17
-- On MINUS shift to state 18
-- On LPAR shift to state 19
-- On IF shift to state 39
-- On IDENTIFIER shift to state 40
-- On FULLSEPARATED shift to state 42
-- On FRESH shift to state 44
-- On FORALL shift to state 46
-- On FALSE shift to state 65
-- On EXISTS shift to state 66
-- On CONSTANT shift to state 69
-- On BLOCK_LENGTH shift to state 70
-- On BASE_ADDR shift to state 72
-- On AT shift to state 74
-- On AMP shift to state 76
-- On lexpr shift to state 120
## Reductions:

State 76:
## Known stack suffix:
## AMP
## LR(1) items:
lexpr -> AMP . lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
-- On VALID_RANGE shift to state 2
-- On VALID_INDEX shift to state 4
-- On VALID shift to state 6
-- On TRUE shift to state 8
-- On STAR shift to state 9
-- On SEPARATED shift to state 10
-- On RESULT shift to state 12
-- On PLUS shift to state 13
-- On OLD shift to state 14
-- On NULL shift to state 16
-- On NOT shift to state 17
-- On MINUS shift to state 18
-- On LPAR shift to state 19
-- On IF shift to state 39
-- On IDENTIFIER shift to state 40
-- On FULLSEPARATED shift to state 42
-- On FRESH shift to state 44
-- On FORALL shift to state 46
-- On FALSE shift to state 65
-- On EXISTS shift to state 66
-- On CONSTANT shift to state 69
-- On BLOCK_LENGTH shift to state 70
-- On BASE_ADDR shift to state 72
-- On AT shift to state 74
-- On AMP shift to state 76
-- On lexpr shift to state 77
## Reductions:

State 77:
## Known stack suffix:
## AMP lexpr
## LR(1) items:
lexpr -> lexpr . IMPLIES lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . IFF lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . OR lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . AND lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . relation lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . PLUS lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . MINUS lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . STAR lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . SLASH lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . PERCENT lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . ARROW IDENTIFIER [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . DOT IDENTIFIER [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr RSQUARE [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr_option DOTDOT lexpr_option RSQUARE [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> AMP lexpr . [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . QUESTION lexpr COLON lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
-- On LSQUARE shift to state 78
-- On DOT shift to state 86
-- On ARROW shift to state 88
-- On relation shift to state 90
## Reductions:
-- On VARIANT reduce production lexpr -> AMP lexpr
-- On THEN reduce production lexpr -> AMP lexpr
-- On STAR reduce production lexpr -> AMP lexpr
-- On SLASH reduce production lexpr -> AMP lexpr
-- On RSQUARE reduce production lexpr -> AMP lexpr
-- On RPAR reduce production lexpr -> AMP lexpr
-- On RBRACE reduce production lexpr -> AMP lexpr
-- On QUESTION reduce production lexpr -> AMP lexpr
-- On PLUS reduce production lexpr -> AMP lexpr
-- On PERCENT reduce production lexpr -> AMP lexpr
-- On OR reduce production lexpr -> AMP lexpr
-- On NE reduce production lexpr -> AMP lexpr
-- On MINUS reduce production lexpr -> AMP lexpr
-- On LT reduce production lexpr -> AMP lexpr
-- On LOOP_ASSIGNS reduce production lexpr -> AMP lexpr
-- On LE reduce production lexpr -> AMP lexpr
-- On IMPLIES reduce production lexpr -> AMP lexpr
-- On IFF reduce production lexpr -> AMP lexpr
-- On GT reduce production lexpr -> AMP lexpr
-- On GE reduce production lexpr -> AMP lexpr
-- On FOR reduce production lexpr -> AMP lexpr
-- On EQUAL reduce production lexpr -> AMP lexpr
-- On EQ reduce production lexpr -> AMP lexpr
-- On EOF reduce production lexpr -> AMP lexpr
-- On ENSURES reduce production lexpr -> AMP lexpr
-- On ELSE reduce production lexpr -> AMP lexpr
-- On DOTDOT reduce production lexpr -> AMP lexpr
-- On DECREASES reduce production lexpr -> AMP lexpr
-- On COMMA reduce production lexpr -> AMP lexpr
-- On COLON reduce production lexpr -> AMP lexpr
-- On ASSIGNS reduce production lexpr -> AMP lexpr
-- On AND reduce production lexpr -> AMP lexpr

State 78:
## Known stack suffix:
## lexpr LSQUARE
## LR(1) items:
lexpr -> lexpr LSQUARE . lexpr RSQUARE [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr LSQUARE . lexpr_option DOTDOT lexpr_option RSQUARE [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
-- On VALID_RANGE shift to state 2
-- On VALID_INDEX shift to state 4
-- On VALID shift to state 6
-- On TRUE shift to state 8
-- On STAR shift to state 9
-- On SEPARATED shift to state 10
-- On RESULT shift to state 12
-- On PLUS shift to state 13
-- On OLD shift to state 14
-- On NULL shift to state 16
-- On NOT shift to state 17
-- On MINUS shift to state 18
-- On LPAR shift to state 19
-- On IF shift to state 39
-- On IDENTIFIER shift to state 40
-- On FULLSEPARATED shift to state 42
-- On FRESH shift to state 44
-- On FORALL shift to state 46
-- On FALSE shift to state 65
-- On EXISTS shift to state 66
-- On CONSTANT shift to state 69
-- On BLOCK_LENGTH shift to state 70
-- On BASE_ADDR shift to state 72
-- On AT shift to state 74
-- On AMP shift to state 76
-- On lexpr_option shift to state 79
-- On lexpr shift to state 118
## Reductions:
-- On DOTDOT reduce production lexpr_option ->

State 79:
## Known stack suffix:
## lexpr LSQUARE lexpr_option
## LR(1) items:
lexpr -> lexpr LSQUARE lexpr_option . DOTDOT lexpr_option RSQUARE [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
-- On DOTDOT shift to state 80
## Reductions:

State 80:
## Known stack suffix:
## lexpr LSQUARE lexpr_option DOTDOT
## LR(1) items:
lexpr -> lexpr LSQUARE lexpr_option DOTDOT . lexpr_option RSQUARE [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
-- On VALID_RANGE shift to state 2
-- On VALID_INDEX shift to state 4
-- On VALID shift to state 6
-- On TRUE shift to state 8
-- On STAR shift to state 9
-- On SEPARATED shift to state 10
-- On RESULT shift to state 12
-- On PLUS shift to state 13
-- On OLD shift to state 14
-- On NULL shift to state 16
-- On NOT shift to state 17
-- On MINUS shift to state 18
-- On LPAR shift to state 19
-- On IF shift to state 39
-- On IDENTIFIER shift to state 40
-- On FULLSEPARATED shift to state 42
-- On FRESH shift to state 44
-- On FORALL shift to state 46
-- On FALSE shift to state 65
-- On EXISTS shift to state 66
-- On CONSTANT shift to state 69
-- On BLOCK_LENGTH shift to state 70
-- On BASE_ADDR shift to state 72
-- On AT shift to state 74
-- On AMP shift to state 76
-- On lexpr_option shift to state 81
-- On lexpr shift to state 83
## Reductions:
-- On RSQUARE reduce production lexpr_option ->

State 81:
## Known stack suffix:
## lexpr LSQUARE lexpr_option DOTDOT lexpr_option
## LR(1) items:
lexpr -> lexpr LSQUARE lexpr_option DOTDOT lexpr_option . RSQUARE [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
-- On RSQUARE shift to state 82
## Reductions:

State 82:
## Known stack suffix:
## lexpr LSQUARE lexpr_option DOTDOT lexpr_option RSQUARE
## LR(1) items:
lexpr -> lexpr LSQUARE lexpr_option DOTDOT lexpr_option RSQUARE . [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production lexpr -> lexpr LSQUARE lexpr_option DOTDOT lexpr_option RSQUARE

State 83:
## Known stack suffix:
## lexpr
## LR(1) items:
lexpr -> lexpr . IMPLIES lexpr [ STAR SLASH RSQUARE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . IFF lexpr [ STAR SLASH RSQUARE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . OR lexpr [ STAR SLASH RSQUARE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . AND lexpr [ STAR SLASH RSQUARE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . relation lexpr [ STAR SLASH RSQUARE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . PLUS lexpr [ STAR SLASH RSQUARE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . MINUS lexpr [ STAR SLASH RSQUARE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . STAR lexpr [ STAR SLASH RSQUARE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . SLASH lexpr [ STAR SLASH RSQUARE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . PERCENT lexpr [ STAR SLASH RSQUARE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . ARROW IDENTIFIER [ STAR SLASH RSQUARE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . DOT IDENTIFIER [ STAR SLASH RSQUARE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr RSQUARE [ STAR SLASH RSQUARE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr_option DOTDOT lexpr_option RSQUARE [ STAR SLASH RSQUARE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . QUESTION lexpr COLON lexpr [ STAR SLASH RSQUARE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr_option -> lexpr . [ RSQUARE ]
## Transitions:
-- On STAR shift to state 84
-- On SLASH shift to state 92
-- On QUESTION shift to state 100
-- On PLUS shift to state 94
-- On PERCENT shift to state 96
-- On OR shift to state 102
-- On NE shift to state 104
-- On MINUS shift to state 98
-- On LT shift to state 105
-- On LSQUARE shift to state 78
-- On LE shift to state 106
-- On IMPLIES shift to state 112
-- On IFF shift to state 114
-- On GT shift to state 107
-- On GE shift to state 108
-- On EQ shift to state 109
-- On DOT shift to state 86
-- On ARROW shift to state 88
-- On AND shift to state 110
-- On relation shift to state 90
## Reductions:
-- On RSQUARE reduce production lexpr_option -> lexpr

State 84:
## Known stack suffix:
## lexpr STAR
## LR(1) items:
lexpr -> lexpr STAR . lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
-- On VALID_RANGE shift to state 2
-- On VALID_INDEX shift to state 4
-- On VALID shift to state 6
-- On TRUE shift to state 8
-- On STAR shift to state 9
-- On SEPARATED shift to state 10
-- On RESULT shift to state 12
-- On PLUS shift to state 13
-- On OLD shift to state 14
-- On NULL shift to state 16
-- On NOT shift to state 17
-- On MINUS shift to state 18
-- On LPAR shift to state 19
-- On IF shift to state 39
-- On IDENTIFIER shift to state 40
-- On FULLSEPARATED shift to state 42
-- On FRESH shift to state 44
-- On FORALL shift to state 46
-- On FALSE shift to state 65
-- On EXISTS shift to state 66
-- On CONSTANT shift to state 69
-- On BLOCK_LENGTH shift to state 70
-- On BASE_ADDR shift to state 72
-- On AT shift to state 74
-- On AMP shift to state 76
-- On lexpr shift to state 85
## Reductions:

State 85:
## Known stack suffix:
## lexpr STAR lexpr
## LR(1) items:
lexpr -> lexpr . IMPLIES lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . IFF lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . OR lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . AND lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . relation lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . PLUS lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . MINUS lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . STAR lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr STAR lexpr . [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . SLASH lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . PERCENT lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . ARROW IDENTIFIER [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . DOT IDENTIFIER [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr RSQUARE [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr_option DOTDOT lexpr_option RSQUARE [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . QUESTION lexpr COLON lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
-- On LSQUARE shift to state 78
-- On DOT shift to state 86
-- On ARROW shift to state 88
-- On relation shift to state 90
## Reductions:
-- On VARIANT reduce production lexpr -> lexpr STAR lexpr
-- On THEN reduce production lexpr -> lexpr STAR lexpr
-- On STAR reduce production lexpr -> lexpr STAR lexpr
-- On SLASH reduce production lexpr -> lexpr STAR lexpr
-- On RSQUARE reduce production lexpr -> lexpr STAR lexpr
-- On RPAR reduce production lexpr -> lexpr STAR lexpr
-- On RBRACE reduce production lexpr -> lexpr STAR lexpr
-- On QUESTION reduce production lexpr -> lexpr STAR lexpr
-- On PLUS reduce production lexpr -> lexpr STAR lexpr
-- On PERCENT reduce production lexpr -> lexpr STAR lexpr
-- On OR reduce production lexpr -> lexpr STAR lexpr
-- On NE reduce production lexpr -> lexpr STAR lexpr
-- On MINUS reduce production lexpr -> lexpr STAR lexpr
-- On LT reduce production lexpr -> lexpr STAR lexpr
-- On LOOP_ASSIGNS reduce production lexpr -> lexpr STAR lexpr
-- On LE reduce production lexpr -> lexpr STAR lexpr
-- On IMPLIES reduce production lexpr -> lexpr STAR lexpr
-- On IFF reduce production lexpr -> lexpr STAR lexpr
-- On GT reduce production lexpr -> lexpr STAR lexpr
-- On GE reduce production lexpr -> lexpr STAR lexpr
-- On FOR reduce production lexpr -> lexpr STAR lexpr
-- On EQUAL reduce production lexpr -> lexpr STAR lexpr
-- On EQ reduce production lexpr -> lexpr STAR lexpr
-- On EOF reduce production lexpr -> lexpr STAR lexpr
-- On ENSURES reduce production lexpr -> lexpr STAR lexpr
-- On ELSE reduce production lexpr -> lexpr STAR lexpr
-- On DOTDOT reduce production lexpr -> lexpr STAR lexpr
-- On DECREASES reduce production lexpr -> lexpr STAR lexpr
-- On COMMA reduce production lexpr -> lexpr STAR lexpr
-- On COLON reduce production lexpr -> lexpr STAR lexpr
-- On ASSIGNS reduce production lexpr -> lexpr STAR lexpr
-- On AND reduce production lexpr -> lexpr STAR lexpr

State 86:
## Known stack suffix:
## lexpr DOT
## LR(1) items:
lexpr -> lexpr DOT . IDENTIFIER [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
-- On IDENTIFIER shift to state 87
## Reductions:

State 87:
## Known stack suffix:
## lexpr DOT IDENTIFIER
## LR(1) items:
lexpr -> lexpr DOT IDENTIFIER . [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production lexpr -> lexpr DOT IDENTIFIER

State 88:
## Known stack suffix:
## lexpr ARROW
## LR(1) items:
lexpr -> lexpr ARROW . IDENTIFIER [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
-- On IDENTIFIER shift to state 89
## Reductions:

State 89:
## Known stack suffix:
## lexpr ARROW IDENTIFIER
## LR(1) items:
lexpr -> lexpr ARROW IDENTIFIER . [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production lexpr -> lexpr ARROW IDENTIFIER

State 90:
## Known stack suffix:
## lexpr relation
## LR(1) items:
lexpr -> lexpr relation . lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
-- On VALID_RANGE shift to state 2
-- On VALID_INDEX shift to state 4
-- On VALID shift to state 6
-- On TRUE shift to state 8
-- On STAR shift to state 9
-- On SEPARATED shift to state 10
-- On RESULT shift to state 12
-- On PLUS shift to state 13
-- On OLD shift to state 14
-- On NULL shift to state 16
-- On NOT shift to state 17
-- On MINUS shift to state 18
-- On LPAR shift to state 19
-- On IF shift to state 39
-- On IDENTIFIER shift to state 40
-- On FULLSEPARATED shift to state 42
-- On FRESH shift to state 44
-- On FORALL shift to state 46
-- On FALSE shift to state 65
-- On EXISTS shift to state 66
-- On CONSTANT shift to state 69
-- On BLOCK_LENGTH shift to state 70
-- On BASE_ADDR shift to state 72
-- On AT shift to state 74
-- On AMP shift to state 76
-- On lexpr shift to state 91
## Reductions:

State 91:
## Known stack suffix:
## lexpr relation lexpr
## LR(1) items:
lexpr -> lexpr . IMPLIES lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . IFF lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . OR lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . AND lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . relation lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr relation lexpr . [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . PLUS lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . MINUS lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . STAR lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . SLASH lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . PERCENT lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . ARROW IDENTIFIER [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . DOT IDENTIFIER [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr RSQUARE [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr_option DOTDOT lexpr_option RSQUARE [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . QUESTION lexpr COLON lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
-- On STAR shift to state 84
-- On SLASH shift to state 92
-- On PLUS shift to state 94
-- On PERCENT shift to state 96
-- On MINUS shift to state 98
-- On LSQUARE shift to state 78
-- On DOT shift to state 86
-- On ARROW shift to state 88
-- On relation shift to state 90
## Reductions:
-- On VARIANT reduce production lexpr -> lexpr relation lexpr
-- On THEN reduce production lexpr -> lexpr relation lexpr
-- On RSQUARE reduce production lexpr -> lexpr relation lexpr
-- On RPAR reduce production lexpr -> lexpr relation lexpr
-- On RBRACE reduce production lexpr -> lexpr relation lexpr
-- On QUESTION reduce production lexpr -> lexpr relation lexpr
-- On OR reduce production lexpr -> lexpr relation lexpr
-- On NE reduce production lexpr -> lexpr relation lexpr
-- On LT reduce production lexpr -> lexpr relation lexpr
-- On LOOP_ASSIGNS reduce production lexpr -> lexpr relation lexpr
-- On LE reduce production lexpr -> lexpr relation lexpr
-- On IMPLIES reduce production lexpr -> lexpr relation lexpr
-- On IFF reduce production lexpr -> lexpr relation lexpr
-- On GT reduce production lexpr -> lexpr relation lexpr
-- On GE reduce production lexpr -> lexpr relation lexpr
-- On FOR reduce production lexpr -> lexpr relation lexpr
-- On EQUAL reduce production lexpr -> lexpr relation lexpr
-- On EQ reduce production lexpr -> lexpr relation lexpr
-- On EOF reduce production lexpr -> lexpr relation lexpr
-- On ENSURES reduce production lexpr -> lexpr relation lexpr
-- On ELSE reduce production lexpr -> lexpr relation lexpr
-- On DOTDOT reduce production lexpr -> lexpr relation lexpr
-- On DECREASES reduce production lexpr -> lexpr relation lexpr
-- On COMMA reduce production lexpr -> lexpr relation lexpr
-- On COLON reduce production lexpr -> lexpr relation lexpr
-- On ASSIGNS reduce production lexpr -> lexpr relation lexpr
-- On AND reduce production lexpr -> lexpr relation lexpr

State 92:
## Known stack suffix:
## lexpr SLASH
## LR(1) items:
lexpr -> lexpr SLASH . lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
-- On VALID_RANGE shift to state 2
-- On VALID_INDEX shift to state 4
-- On VALID shift to state 6
-- On TRUE shift to state 8
-- On STAR shift to state 9
-- On SEPARATED shift to state 10
-- On RESULT shift to state 12
-- On PLUS shift to state 13
-- On OLD shift to state 14
-- On NULL shift to state 16
-- On NOT shift to state 17
-- On MINUS shift to state 18
-- On LPAR shift to state 19
-- On IF shift to state 39
-- On IDENTIFIER shift to state 40
-- On FULLSEPARATED shift to state 42
-- On FRESH shift to state 44
-- On FORALL shift to state 46
-- On FALSE shift to state 65
-- On EXISTS shift to state 66
-- On CONSTANT shift to state 69
-- On BLOCK_LENGTH shift to state 70
-- On BASE_ADDR shift to state 72
-- On AT shift to state 74
-- On AMP shift to state 76
-- On lexpr shift to state 93
## Reductions:

State 93:
## Known stack suffix:
## lexpr SLASH lexpr
## LR(1) items:
lexpr -> lexpr . IMPLIES lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . IFF lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . OR lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . AND lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . relation lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . PLUS lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . MINUS lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . STAR lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . SLASH lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr SLASH lexpr . [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . PERCENT lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . ARROW IDENTIFIER [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . DOT IDENTIFIER [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr RSQUARE [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr_option DOTDOT lexpr_option RSQUARE [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . QUESTION lexpr COLON lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
-- On LSQUARE shift to state 78
-- On DOT shift to state 86
-- On ARROW shift to state 88
-- On relation shift to state 90
## Reductions:
-- On VARIANT reduce production lexpr -> lexpr SLASH lexpr
-- On THEN reduce production lexpr -> lexpr SLASH lexpr
-- On STAR reduce production lexpr -> lexpr SLASH lexpr
-- On SLASH reduce production lexpr -> lexpr SLASH lexpr
-- On RSQUARE reduce production lexpr -> lexpr SLASH lexpr
-- On RPAR reduce production lexpr -> lexpr SLASH lexpr
-- On RBRACE reduce production lexpr -> lexpr SLASH lexpr
-- On QUESTION reduce production lexpr -> lexpr SLASH lexpr
-- On PLUS reduce production lexpr -> lexpr SLASH lexpr
-- On PERCENT reduce production lexpr -> lexpr SLASH lexpr
-- On OR reduce production lexpr -> lexpr SLASH lexpr
-- On NE reduce production lexpr -> lexpr SLASH lexpr
-- On MINUS reduce production lexpr -> lexpr SLASH lexpr
-- On LT reduce production lexpr -> lexpr SLASH lexpr
-- On LOOP_ASSIGNS reduce production lexpr -> lexpr SLASH lexpr
-- On LE reduce production lexpr -> lexpr SLASH lexpr
-- On IMPLIES reduce production lexpr -> lexpr SLASH lexpr
-- On IFF reduce production lexpr -> lexpr SLASH lexpr
-- On GT reduce production lexpr -> lexpr SLASH lexpr
-- On GE reduce production lexpr -> lexpr SLASH lexpr
-- On FOR reduce production lexpr -> lexpr SLASH lexpr
-- On EQUAL reduce production lexpr -> lexpr SLASH lexpr
-- On EQ reduce production lexpr -> lexpr SLASH lexpr
-- On EOF reduce production lexpr -> lexpr SLASH lexpr
-- On ENSURES reduce production lexpr -> lexpr SLASH lexpr
-- On ELSE reduce production lexpr -> lexpr SLASH lexpr
-- On DOTDOT reduce production lexpr -> lexpr SLASH lexpr
-- On DECREASES reduce production lexpr -> lexpr SLASH lexpr
-- On COMMA reduce production lexpr -> lexpr SLASH lexpr
-- On COLON reduce production lexpr -> lexpr SLASH lexpr
-- On ASSIGNS reduce production lexpr -> lexpr SLASH lexpr
-- On AND reduce production lexpr -> lexpr SLASH lexpr

State 94:
## Known stack suffix:
## lexpr PLUS
## LR(1) items:
lexpr -> lexpr PLUS . lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
-- On VALID_RANGE shift to state 2
-- On VALID_INDEX shift to state 4
-- On VALID shift to state 6
-- On TRUE shift to state 8
-- On STAR shift to state 9
-- On SEPARATED shift to state 10
-- On RESULT shift to state 12
-- On PLUS shift to state 13
-- On OLD shift to state 14
-- On NULL shift to state 16
-- On NOT shift to state 17
-- On MINUS shift to state 18
-- On LPAR shift to state 19
-- On IF shift to state 39
-- On IDENTIFIER shift to state 40
-- On FULLSEPARATED shift to state 42
-- On FRESH shift to state 44
-- On FORALL shift to state 46
-- On FALSE shift to state 65
-- On EXISTS shift to state 66
-- On CONSTANT shift to state 69
-- On BLOCK_LENGTH shift to state 70
-- On BASE_ADDR shift to state 72
-- On AT shift to state 74
-- On AMP shift to state 76
-- On lexpr shift to state 95
## Reductions:

State 95:
## Known stack suffix:
## lexpr PLUS lexpr
## LR(1) items:
lexpr -> lexpr . IMPLIES lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . IFF lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . OR lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . AND lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . relation lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . PLUS lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr PLUS lexpr . [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . MINUS lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . STAR lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . SLASH lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . PERCENT lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . ARROW IDENTIFIER [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . DOT IDENTIFIER [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr RSQUARE [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr_option DOTDOT lexpr_option RSQUARE [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . QUESTION lexpr COLON lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
-- On STAR shift to state 84
-- On SLASH shift to state 92
-- On PERCENT shift to state 96
-- On LSQUARE shift to state 78
-- On DOT shift to state 86
-- On ARROW shift to state 88
-- On relation shift to state 90
## Reductions:
-- On VARIANT reduce production lexpr -> lexpr PLUS lexpr
-- On THEN reduce production lexpr -> lexpr PLUS lexpr
-- On RSQUARE reduce production lexpr -> lexpr PLUS lexpr
-- On RPAR reduce production lexpr -> lexpr PLUS lexpr
-- On RBRACE reduce production lexpr -> lexpr PLUS lexpr
-- On QUESTION reduce production lexpr -> lexpr PLUS lexpr
-- On PLUS reduce production lexpr -> lexpr PLUS lexpr
-- On OR reduce production lexpr -> lexpr PLUS lexpr
-- On NE reduce production lexpr -> lexpr PLUS lexpr
-- On MINUS reduce production lexpr -> lexpr PLUS lexpr
-- On LT reduce production lexpr -> lexpr PLUS lexpr
-- On LOOP_ASSIGNS reduce production lexpr -> lexpr PLUS lexpr
-- On LE reduce production lexpr -> lexpr PLUS lexpr
-- On IMPLIES reduce production lexpr -> lexpr PLUS lexpr
-- On IFF reduce production lexpr -> lexpr PLUS lexpr
-- On GT reduce production lexpr -> lexpr PLUS lexpr
-- On GE reduce production lexpr -> lexpr PLUS lexpr
-- On FOR reduce production lexpr -> lexpr PLUS lexpr
-- On EQUAL reduce production lexpr -> lexpr PLUS lexpr
-- On EQ reduce production lexpr -> lexpr PLUS lexpr
-- On EOF reduce production lexpr -> lexpr PLUS lexpr
-- On ENSURES reduce production lexpr -> lexpr PLUS lexpr
-- On ELSE reduce production lexpr -> lexpr PLUS lexpr
-- On DOTDOT reduce production lexpr -> lexpr PLUS lexpr
-- On DECREASES reduce production lexpr -> lexpr PLUS lexpr
-- On COMMA reduce production lexpr -> lexpr PLUS lexpr
-- On COLON reduce production lexpr -> lexpr PLUS lexpr
-- On ASSIGNS reduce production lexpr -> lexpr PLUS lexpr
-- On AND reduce production lexpr -> lexpr PLUS lexpr

State 96:
## Known stack suffix:
## lexpr PERCENT
## LR(1) items:
lexpr -> lexpr PERCENT . lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
-- On VALID_RANGE shift to state 2
-- On VALID_INDEX shift to state 4
-- On VALID shift to state 6
-- On TRUE shift to state 8
-- On STAR shift to state 9
-- On SEPARATED shift to state 10
-- On RESULT shift to state 12
-- On PLUS shift to state 13
-- On OLD shift to state 14
-- On NULL shift to state 16
-- On NOT shift to state 17
-- On MINUS shift to state 18
-- On LPAR shift to state 19
-- On IF shift to state 39
-- On IDENTIFIER shift to state 40
-- On FULLSEPARATED shift to state 42
-- On FRESH shift to state 44
-- On FORALL shift to state 46
-- On FALSE shift to state 65
-- On EXISTS shift to state 66
-- On CONSTANT shift to state 69
-- On BLOCK_LENGTH shift to state 70
-- On BASE_ADDR shift to state 72
-- On AT shift to state 74
-- On AMP shift to state 76
-- On lexpr shift to state 97
## Reductions:

State 97:
## Known stack suffix:
## lexpr PERCENT lexpr
## LR(1) items:
lexpr -> lexpr . IMPLIES lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . IFF lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . OR lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . AND lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . relation lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . PLUS lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . MINUS lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . STAR lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . SLASH lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . PERCENT lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr PERCENT lexpr . [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . ARROW IDENTIFIER [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . DOT IDENTIFIER [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr RSQUARE [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr_option DOTDOT lexpr_option RSQUARE [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . QUESTION lexpr COLON lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
-- On LSQUARE shift to state 78
-- On DOT shift to state 86
-- On ARROW shift to state 88
-- On relation shift to state 90
## Reductions:
-- On VARIANT reduce production lexpr -> lexpr PERCENT lexpr
-- On THEN reduce production lexpr -> lexpr PERCENT lexpr
-- On STAR reduce production lexpr -> lexpr PERCENT lexpr
-- On SLASH reduce production lexpr -> lexpr PERCENT lexpr
-- On RSQUARE reduce production lexpr -> lexpr PERCENT lexpr
-- On RPAR reduce production lexpr -> lexpr PERCENT lexpr
-- On RBRACE reduce production lexpr -> lexpr PERCENT lexpr
-- On QUESTION reduce production lexpr -> lexpr PERCENT lexpr
-- On PLUS reduce production lexpr -> lexpr PERCENT lexpr
-- On PERCENT reduce production lexpr -> lexpr PERCENT lexpr
-- On OR reduce production lexpr -> lexpr PERCENT lexpr
-- On NE reduce production lexpr -> lexpr PERCENT lexpr
-- On MINUS reduce production lexpr -> lexpr PERCENT lexpr
-- On LT reduce production lexpr -> lexpr PERCENT lexpr
-- On LOOP_ASSIGNS reduce production lexpr -> lexpr PERCENT lexpr
-- On LE reduce production lexpr -> lexpr PERCENT lexpr
-- On IMPLIES reduce production lexpr -> lexpr PERCENT lexpr
-- On IFF reduce production lexpr -> lexpr PERCENT lexpr
-- On GT reduce production lexpr -> lexpr PERCENT lexpr
-- On GE reduce production lexpr -> lexpr PERCENT lexpr
-- On FOR reduce production lexpr -> lexpr PERCENT lexpr
-- On EQUAL reduce production lexpr -> lexpr PERCENT lexpr
-- On EQ reduce production lexpr -> lexpr PERCENT lexpr
-- On EOF reduce production lexpr -> lexpr PERCENT lexpr
-- On ENSURES reduce production lexpr -> lexpr PERCENT lexpr
-- On ELSE reduce production lexpr -> lexpr PERCENT lexpr
-- On DOTDOT reduce production lexpr -> lexpr PERCENT lexpr
-- On DECREASES reduce production lexpr -> lexpr PERCENT lexpr
-- On COMMA reduce production lexpr -> lexpr PERCENT lexpr
-- On COLON reduce production lexpr -> lexpr PERCENT lexpr
-- On ASSIGNS reduce production lexpr -> lexpr PERCENT lexpr
-- On AND reduce production lexpr -> lexpr PERCENT lexpr

State 98:
## Known stack suffix:
## lexpr MINUS
## LR(1) items:
lexpr -> lexpr MINUS . lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
-- On VALID_RANGE shift to state 2
-- On VALID_INDEX shift to state 4
-- On VALID shift to state 6
-- On TRUE shift to state 8
-- On STAR shift to state 9
-- On SEPARATED shift to state 10
-- On RESULT shift to state 12
-- On PLUS shift to state 13
-- On OLD shift to state 14
-- On NULL shift to state 16
-- On NOT shift to state 17
-- On MINUS shift to state 18
-- On LPAR shift to state 19
-- On IF shift to state 39
-- On IDENTIFIER shift to state 40
-- On FULLSEPARATED shift to state 42
-- On FRESH shift to state 44
-- On FORALL shift to state 46
-- On FALSE shift to state 65
-- On EXISTS shift to state 66
-- On CONSTANT shift to state 69
-- On BLOCK_LENGTH shift to state 70
-- On BASE_ADDR shift to state 72
-- On AT shift to state 74
-- On AMP shift to state 76
-- On lexpr shift to state 99
## Reductions:

State 99:
## Known stack suffix:
## lexpr MINUS lexpr
## LR(1) items:
lexpr -> lexpr . IMPLIES lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . IFF lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . OR lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . AND lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . relation lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . PLUS lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . MINUS lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr MINUS lexpr . [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . STAR lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . SLASH lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . PERCENT lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . ARROW IDENTIFIER [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . DOT IDENTIFIER [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr RSQUARE [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr_option DOTDOT lexpr_option RSQUARE [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . QUESTION lexpr COLON lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
-- On STAR shift to state 84
-- On SLASH shift to state 92
-- On PERCENT shift to state 96
-- On LSQUARE shift to state 78
-- On DOT shift to state 86
-- On ARROW shift to state 88
-- On relation shift to state 90
## Reductions:
-- On VARIANT reduce production lexpr -> lexpr MINUS lexpr
-- On THEN reduce production lexpr -> lexpr MINUS lexpr
-- On RSQUARE reduce production lexpr -> lexpr MINUS lexpr
-- On RPAR reduce production lexpr -> lexpr MINUS lexpr
-- On RBRACE reduce production lexpr -> lexpr MINUS lexpr
-- On QUESTION reduce production lexpr -> lexpr MINUS lexpr
-- On PLUS reduce production lexpr -> lexpr MINUS lexpr
-- On OR reduce production lexpr -> lexpr MINUS lexpr
-- On NE reduce production lexpr -> lexpr MINUS lexpr
-- On MINUS reduce production lexpr -> lexpr MINUS lexpr
-- On LT reduce production lexpr -> lexpr MINUS lexpr
-- On LOOP_ASSIGNS reduce production lexpr -> lexpr MINUS lexpr
-- On LE reduce production lexpr -> lexpr MINUS lexpr
-- On IMPLIES reduce production lexpr -> lexpr MINUS lexpr
-- On IFF reduce production lexpr -> lexpr MINUS lexpr
-- On GT reduce production lexpr -> lexpr MINUS lexpr
-- On GE reduce production lexpr -> lexpr MINUS lexpr
-- On FOR reduce production lexpr -> lexpr MINUS lexpr
-- On EQUAL reduce production lexpr -> lexpr MINUS lexpr
-- On EQ reduce production lexpr -> lexpr MINUS lexpr
-- On EOF reduce production lexpr -> lexpr MINUS lexpr
-- On ENSURES reduce production lexpr -> lexpr MINUS lexpr
-- On ELSE reduce production lexpr -> lexpr MINUS lexpr
-- On DOTDOT reduce production lexpr -> lexpr MINUS lexpr
-- On DECREASES reduce production lexpr -> lexpr MINUS lexpr
-- On COMMA reduce production lexpr -> lexpr MINUS lexpr
-- On COLON reduce production lexpr -> lexpr MINUS lexpr
-- On ASSIGNS reduce production lexpr -> lexpr MINUS lexpr
-- On AND reduce production lexpr -> lexpr MINUS lexpr

State 100:
## Known stack suffix:
## lexpr QUESTION
## LR(1) items:
lexpr -> lexpr QUESTION . lexpr COLON lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
-- On VALID_RANGE shift to state 2
-- On VALID_INDEX shift to state 4
-- On VALID shift to state 6
-- On TRUE shift to state 8
-- On STAR shift to state 9
-- On SEPARATED shift to state 10
-- On RESULT shift to state 12
-- On PLUS shift to state 13
-- On OLD shift to state 14
-- On NULL shift to state 16
-- On NOT shift to state 17
-- On MINUS shift to state 18
-- On LPAR shift to state 19
-- On IF shift to state 39
-- On IDENTIFIER shift to state 40
-- On FULLSEPARATED shift to state 42
-- On FRESH shift to state 44
-- On FORALL shift to state 46
-- On FALSE shift to state 65
-- On EXISTS shift to state 66
-- On CONSTANT shift to state 69
-- On BLOCK_LENGTH shift to state 70
-- On BASE_ADDR shift to state 72
-- On AT shift to state 74
-- On AMP shift to state 76
-- On lexpr shift to state 101
## Reductions:

State 101:
## Known stack suffix:
## lexpr QUESTION lexpr
## LR(1) items:
lexpr -> lexpr . IMPLIES lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COLON ARROW AND ]
lexpr -> lexpr . IFF lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COLON ARROW AND ]
lexpr -> lexpr . OR lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COLON ARROW AND ]
lexpr -> lexpr . AND lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COLON ARROW AND ]
lexpr -> lexpr . relation lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COLON ARROW AND ]
lexpr -> lexpr . PLUS lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COLON ARROW AND ]
lexpr -> lexpr . MINUS lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COLON ARROW AND ]
lexpr -> lexpr . STAR lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COLON ARROW AND ]
lexpr -> lexpr . SLASH lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COLON ARROW AND ]
lexpr -> lexpr . PERCENT lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COLON ARROW AND ]
lexpr -> lexpr . ARROW IDENTIFIER [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COLON ARROW AND ]
lexpr -> lexpr . DOT IDENTIFIER [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COLON ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr RSQUARE [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COLON ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr_option DOTDOT lexpr_option RSQUARE [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COLON ARROW AND ]
lexpr -> lexpr . QUESTION lexpr COLON lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COLON ARROW AND ]
lexpr -> lexpr QUESTION lexpr . COLON lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
-- On STAR shift to state 84
-- On SLASH shift to state 92
-- On QUESTION shift to state 100
-- On PLUS shift to state 94
-- On PERCENT shift to state 96
-- On OR shift to state 102
-- On NE shift to state 104
-- On MINUS shift to state 98
-- On LT shift to state 105
-- On LSQUARE shift to state 78
-- On LE shift to state 106
-- On IMPLIES shift to state 112
-- On IFF shift to state 114
-- On GT shift to state 107
-- On GE shift to state 108
-- On EQ shift to state 109
-- On DOT shift to state 86
-- On COLON shift to state 116
-- On ARROW shift to state 88
-- On AND shift to state 110
-- On relation shift to state 90
## Reductions:

State 102:
## Known stack suffix:
## lexpr OR
## LR(1) items:
lexpr -> lexpr OR . lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
-- On VALID_RANGE shift to state 2
-- On VALID_INDEX shift to state 4
-- On VALID shift to state 6
-- On TRUE shift to state 8
-- On STAR shift to state 9
-- On SEPARATED shift to state 10
-- On RESULT shift to state 12
-- On PLUS shift to state 13
-- On OLD shift to state 14
-- On NULL shift to state 16
-- On NOT shift to state 17
-- On MINUS shift to state 18
-- On LPAR shift to state 19
-- On IF shift to state 39
-- On IDENTIFIER shift to state 40
-- On FULLSEPARATED shift to state 42
-- On FRESH shift to state 44
-- On FORALL shift to state 46
-- On FALSE shift to state 65
-- On EXISTS shift to state 66
-- On CONSTANT shift to state 69
-- On BLOCK_LENGTH shift to state 70
-- On BASE_ADDR shift to state 72
-- On AT shift to state 74
-- On AMP shift to state 76
-- On lexpr shift to state 103
## Reductions:

State 103:
## Known stack suffix:
## lexpr OR lexpr
## LR(1) items:
lexpr -> lexpr . IMPLIES lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . IFF lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . OR lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr OR lexpr . [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . AND lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . relation lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . PLUS lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . MINUS lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . STAR lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . SLASH lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . PERCENT lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . ARROW IDENTIFIER [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . DOT IDENTIFIER [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr RSQUARE [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr_option DOTDOT lexpr_option RSQUARE [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . QUESTION lexpr COLON lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
-- On STAR shift to state 84
-- On SLASH shift to state 92
-- On QUESTION shift to state 100
-- On PLUS shift to state 94
-- On PERCENT shift to state 96
-- On NE shift to state 104
-- On MINUS shift to state 98
-- On LT shift to state 105
-- On LSQUARE shift to state 78
-- On LE shift to state 106
-- On GT shift to state 107
-- On GE shift to state 108
-- On EQ shift to state 109
-- On DOT shift to state 86
-- On ARROW shift to state 88
-- On AND shift to state 110
-- On relation shift to state 90
## Reductions:
-- On VARIANT reduce production lexpr -> lexpr OR lexpr
-- On THEN reduce production lexpr -> lexpr OR lexpr
-- On RSQUARE reduce production lexpr -> lexpr OR lexpr
-- On RPAR reduce production lexpr -> lexpr OR lexpr
-- On RBRACE reduce production lexpr -> lexpr OR lexpr
-- On OR reduce production lexpr -> lexpr OR lexpr
-- On LOOP_ASSIGNS reduce production lexpr -> lexpr OR lexpr
-- On IMPLIES reduce production lexpr -> lexpr OR lexpr
-- On IFF reduce production lexpr -> lexpr OR lexpr
-- On FOR reduce production lexpr -> lexpr OR lexpr
-- On EQUAL reduce production lexpr -> lexpr OR lexpr
-- On EOF reduce production lexpr -> lexpr OR lexpr
-- On ENSURES reduce production lexpr -> lexpr OR lexpr
-- On ELSE reduce production lexpr -> lexpr OR lexpr
-- On DOTDOT reduce production lexpr -> lexpr OR lexpr
-- On DECREASES reduce production lexpr -> lexpr OR lexpr
-- On COMMA reduce production lexpr -> lexpr OR lexpr
-- On COLON reduce production lexpr -> lexpr OR lexpr
-- On ASSIGNS reduce production lexpr -> lexpr OR lexpr

State 104:
## Known stack suffix:
## NE
## LR(1) items:
relation -> NE . [ VALID_RANGE VALID_INDEX VALID TRUE STAR SEPARATED RESULT PLUS OLD NULL NOT MINUS LPAR IF IDENTIFIER FULLSEPARATED FRESH FORALL FALSE EXISTS CONSTANT BLOCK_LENGTH BASE_ADDR AT AMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production relation -> NE

State 105:
## Known stack suffix:
## LT
## LR(1) items:
relation -> LT . [ VALID_RANGE VALID_INDEX VALID TRUE STAR SEPARATED RESULT PLUS OLD NULL NOT MINUS LPAR IF IDENTIFIER FULLSEPARATED FRESH FORALL FALSE EXISTS CONSTANT BLOCK_LENGTH BASE_ADDR AT AMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production relation -> LT

State 106:
## Known stack suffix:
## LE
## LR(1) items:
relation -> LE . [ VALID_RANGE VALID_INDEX VALID TRUE STAR SEPARATED RESULT PLUS OLD NULL NOT MINUS LPAR IF IDENTIFIER FULLSEPARATED FRESH FORALL FALSE EXISTS CONSTANT BLOCK_LENGTH BASE_ADDR AT AMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production relation -> LE

State 107:
## Known stack suffix:
## GT
## LR(1) items:
relation -> GT . [ VALID_RANGE VALID_INDEX VALID TRUE STAR SEPARATED RESULT PLUS OLD NULL NOT MINUS LPAR IF IDENTIFIER FULLSEPARATED FRESH FORALL FALSE EXISTS CONSTANT BLOCK_LENGTH BASE_ADDR AT AMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production relation -> GT

State 108:
## Known stack suffix:
## GE
## LR(1) items:
relation -> GE . [ VALID_RANGE VALID_INDEX VALID TRUE STAR SEPARATED RESULT PLUS OLD NULL NOT MINUS LPAR IF IDENTIFIER FULLSEPARATED FRESH FORALL FALSE EXISTS CONSTANT BLOCK_LENGTH BASE_ADDR AT AMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production relation -> GE

State 109:
## Known stack suffix:
## EQ
## LR(1) items:
relation -> EQ . [ VALID_RANGE VALID_INDEX VALID TRUE STAR SEPARATED RESULT PLUS OLD NULL NOT MINUS LPAR IF IDENTIFIER FULLSEPARATED FRESH FORALL FALSE EXISTS CONSTANT BLOCK_LENGTH BASE_ADDR AT AMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production relation -> EQ

State 110:
## Known stack suffix:
## lexpr AND
## LR(1) items:
lexpr -> lexpr AND . lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
-- On VALID_RANGE shift to state 2
-- On VALID_INDEX shift to state 4
-- On VALID shift to state 6
-- On TRUE shift to state 8
-- On STAR shift to state 9
-- On SEPARATED shift to state 10
-- On RESULT shift to state 12
-- On PLUS shift to state 13
-- On OLD shift to state 14
-- On NULL shift to state 16
-- On NOT shift to state 17
-- On MINUS shift to state 18
-- On LPAR shift to state 19
-- On IF shift to state 39
-- On IDENTIFIER shift to state 40
-- On FULLSEPARATED shift to state 42
-- On FRESH shift to state 44
-- On FORALL shift to state 46
-- On FALSE shift to state 65
-- On EXISTS shift to state 66
-- On CONSTANT shift to state 69
-- On BLOCK_LENGTH shift to state 70
-- On BASE_ADDR shift to state 72
-- On AT shift to state 74
-- On AMP shift to state 76
-- On lexpr shift to state 111
## Reductions:

State 111:
## Known stack suffix:
## lexpr AND lexpr
## LR(1) items:
lexpr -> lexpr . IMPLIES lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . IFF lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . OR lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . AND lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr AND lexpr . [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . relation lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . PLUS lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . MINUS lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . STAR lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . SLASH lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . PERCENT lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . ARROW IDENTIFIER [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . DOT IDENTIFIER [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr RSQUARE [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr_option DOTDOT lexpr_option RSQUARE [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . QUESTION lexpr COLON lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
-- On STAR shift to state 84
-- On SLASH shift to state 92
-- On QUESTION shift to state 100
-- On PLUS shift to state 94
-- On PERCENT shift to state 96
-- On NE shift to state 104
-- On MINUS shift to state 98
-- On LT shift to state 105
-- On LSQUARE shift to state 78
-- On LE shift to state 106
-- On GT shift to state 107
-- On GE shift to state 108
-- On EQ shift to state 109
-- On DOT shift to state 86
-- On ARROW shift to state 88
-- On relation shift to state 90
## Reductions:
-- On VARIANT reduce production lexpr -> lexpr AND lexpr
-- On THEN reduce production lexpr -> lexpr AND lexpr
-- On RSQUARE reduce production lexpr -> lexpr AND lexpr
-- On RPAR reduce production lexpr -> lexpr AND lexpr
-- On RBRACE reduce production lexpr -> lexpr AND lexpr
-- On OR reduce production lexpr -> lexpr AND lexpr
-- On LOOP_ASSIGNS reduce production lexpr -> lexpr AND lexpr
-- On IMPLIES reduce production lexpr -> lexpr AND lexpr
-- On IFF reduce production lexpr -> lexpr AND lexpr
-- On FOR reduce production lexpr -> lexpr AND lexpr
-- On EQUAL reduce production lexpr -> lexpr AND lexpr
-- On EOF reduce production lexpr -> lexpr AND lexpr
-- On ENSURES reduce production lexpr -> lexpr AND lexpr
-- On ELSE reduce production lexpr -> lexpr AND lexpr
-- On DOTDOT reduce production lexpr -> lexpr AND lexpr
-- On DECREASES reduce production lexpr -> lexpr AND lexpr
-- On COMMA reduce production lexpr -> lexpr AND lexpr
-- On COLON reduce production lexpr -> lexpr AND lexpr
-- On ASSIGNS reduce production lexpr -> lexpr AND lexpr
-- On AND reduce production lexpr -> lexpr AND lexpr

State 112:
## Known stack suffix:
## lexpr IMPLIES
## LR(1) items:
lexpr -> lexpr IMPLIES . lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
-- On VALID_RANGE shift to state 2
-- On VALID_INDEX shift to state 4
-- On VALID shift to state 6
-- On TRUE shift to state 8
-- On STAR shift to state 9
-- On SEPARATED shift to state 10
-- On RESULT shift to state 12
-- On PLUS shift to state 13
-- On OLD shift to state 14
-- On NULL shift to state 16
-- On NOT shift to state 17
-- On MINUS shift to state 18
-- On LPAR shift to state 19
-- On IF shift to state 39
-- On IDENTIFIER shift to state 40
-- On FULLSEPARATED shift to state 42
-- On FRESH shift to state 44
-- On FORALL shift to state 46
-- On FALSE shift to state 65
-- On EXISTS shift to state 66
-- On CONSTANT shift to state 69
-- On BLOCK_LENGTH shift to state 70
-- On BASE_ADDR shift to state 72
-- On AT shift to state 74
-- On AMP shift to state 76
-- On lexpr shift to state 113
## Reductions:

State 113:
## Known stack suffix:
## lexpr IMPLIES lexpr
## LR(1) items:
lexpr -> lexpr . IMPLIES lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr IMPLIES lexpr . [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . IFF lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . OR lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . AND lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . relation lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . PLUS lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . MINUS lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . STAR lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . SLASH lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . PERCENT lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . ARROW IDENTIFIER [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . DOT IDENTIFIER [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr RSQUARE [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr_option DOTDOT lexpr_option RSQUARE [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . QUESTION lexpr COLON lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
-- On STAR shift to state 84
-- On SLASH shift to state 92
-- On QUESTION shift to state 100
-- On PLUS shift to state 94
-- On PERCENT shift to state 96
-- On OR shift to state 102
-- On NE shift to state 104
-- On MINUS shift to state 98
-- On LT shift to state 105
-- On LSQUARE shift to state 78
-- On LE shift to state 106
-- On IMPLIES shift to state 112
-- On IFF shift to state 114
-- On GT shift to state 107
-- On GE shift to state 108
-- On EQ shift to state 109
-- On DOT shift to state 86
-- On ARROW shift to state 88
-- On AND shift to state 110
-- On relation shift to state 90
## Reductions:
-- On VARIANT reduce production lexpr -> lexpr IMPLIES lexpr
-- On THEN reduce production lexpr -> lexpr IMPLIES lexpr
-- On RSQUARE reduce production lexpr -> lexpr IMPLIES lexpr
-- On RPAR reduce production lexpr -> lexpr IMPLIES lexpr
-- On RBRACE reduce production lexpr -> lexpr IMPLIES lexpr
-- On LOOP_ASSIGNS reduce production lexpr -> lexpr IMPLIES lexpr
-- On FOR reduce production lexpr -> lexpr IMPLIES lexpr
-- On EQUAL reduce production lexpr -> lexpr IMPLIES lexpr
-- On EOF reduce production lexpr -> lexpr IMPLIES lexpr
-- On ENSURES reduce production lexpr -> lexpr IMPLIES lexpr
-- On ELSE reduce production lexpr -> lexpr IMPLIES lexpr
-- On DOTDOT reduce production lexpr -> lexpr IMPLIES lexpr
-- On DECREASES reduce production lexpr -> lexpr IMPLIES lexpr
-- On COMMA reduce production lexpr -> lexpr IMPLIES lexpr
-- On COLON reduce production lexpr -> lexpr IMPLIES lexpr
-- On ASSIGNS reduce production lexpr -> lexpr IMPLIES lexpr

State 114:
## Known stack suffix:
## lexpr IFF
## LR(1) items:
lexpr -> lexpr IFF . lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
-- On VALID_RANGE shift to state 2
-- On VALID_INDEX shift to state 4
-- On VALID shift to state 6
-- On TRUE shift to state 8
-- On STAR shift to state 9
-- On SEPARATED shift to state 10
-- On RESULT shift to state 12
-- On PLUS shift to state 13
-- On OLD shift to state 14
-- On NULL shift to state 16
-- On NOT shift to state 17
-- On MINUS shift to state 18
-- On LPAR shift to state 19
-- On IF shift to state 39
-- On IDENTIFIER shift to state 40
-- On FULLSEPARATED shift to state 42
-- On FRESH shift to state 44
-- On FORALL shift to state 46
-- On FALSE shift to state 65
-- On EXISTS shift to state 66
-- On CONSTANT shift to state 69
-- On BLOCK_LENGTH shift to state 70
-- On BASE_ADDR shift to state 72
-- On AT shift to state 74
-- On AMP shift to state 76
-- On lexpr shift to state 115
## Reductions:

State 115:
## Known stack suffix:
## lexpr IFF lexpr
## LR(1) items:
lexpr -> lexpr . IMPLIES lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . IFF lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr IFF lexpr . [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . OR lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . AND lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . relation lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . PLUS lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . MINUS lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . STAR lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . SLASH lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . PERCENT lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . ARROW IDENTIFIER [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . DOT IDENTIFIER [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr RSQUARE [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr_option DOTDOT lexpr_option RSQUARE [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . QUESTION lexpr COLON lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
-- On STAR shift to state 84
-- On SLASH shift to state 92
-- On QUESTION shift to state 100
-- On PLUS shift to state 94
-- On PERCENT shift to state 96
-- On OR shift to state 102
-- On NE shift to state 104
-- On MINUS shift to state 98
-- On LT shift to state 105
-- On LSQUARE shift to state 78
-- On LE shift to state 106
-- On IMPLIES shift to state 112
-- On IFF shift to state 114
-- On GT shift to state 107
-- On GE shift to state 108
-- On EQ shift to state 109
-- On DOT shift to state 86
-- On ARROW shift to state 88
-- On AND shift to state 110
-- On relation shift to state 90
## Reductions:
-- On VARIANT reduce production lexpr -> lexpr IFF lexpr
-- On THEN reduce production lexpr -> lexpr IFF lexpr
-- On RSQUARE reduce production lexpr -> lexpr IFF lexpr
-- On RPAR reduce production lexpr -> lexpr IFF lexpr
-- On RBRACE reduce production lexpr -> lexpr IFF lexpr
-- On LOOP_ASSIGNS reduce production lexpr -> lexpr IFF lexpr
-- On FOR reduce production lexpr -> lexpr IFF lexpr
-- On EQUAL reduce production lexpr -> lexpr IFF lexpr
-- On EOF reduce production lexpr -> lexpr IFF lexpr
-- On ENSURES reduce production lexpr -> lexpr IFF lexpr
-- On ELSE reduce production lexpr -> lexpr IFF lexpr
-- On DOTDOT reduce production lexpr -> lexpr IFF lexpr
-- On DECREASES reduce production lexpr -> lexpr IFF lexpr
-- On COMMA reduce production lexpr -> lexpr IFF lexpr
-- On COLON reduce production lexpr -> lexpr IFF lexpr
-- On ASSIGNS reduce production lexpr -> lexpr IFF lexpr

State 116:
## Known stack suffix:
## lexpr QUESTION lexpr COLON
## LR(1) items:
lexpr -> lexpr QUESTION lexpr COLON . lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
-- On VALID_RANGE shift to state 2
-- On VALID_INDEX shift to state 4
-- On VALID shift to state 6
-- On TRUE shift to state 8
-- On STAR shift to state 9
-- On SEPARATED shift to state 10
-- On RESULT shift to state 12
-- On PLUS shift to state 13
-- On OLD shift to state 14
-- On NULL shift to state 16
-- On NOT shift to state 17
-- On MINUS shift to state 18
-- On LPAR shift to state 19
-- On IF shift to state 39
-- On IDENTIFIER shift to state 40
-- On FULLSEPARATED shift to state 42
-- On FRESH shift to state 44
-- On FORALL shift to state 46
-- On FALSE shift to state 65
-- On EXISTS shift to state 66
-- On CONSTANT shift to state 69
-- On BLOCK_LENGTH shift to state 70
-- On BASE_ADDR shift to state 72
-- On AT shift to state 74
-- On AMP shift to state 76
-- On lexpr shift to state 117
## Reductions:

State 117:
## Known stack suffix:
## lexpr QUESTION lexpr COLON lexpr
## LR(1) items:
lexpr -> lexpr . IMPLIES lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . IFF lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . OR lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . AND lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . relation lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . PLUS lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . MINUS lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . STAR lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . SLASH lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . PERCENT lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . ARROW IDENTIFIER [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . DOT IDENTIFIER [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr RSQUARE [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr_option DOTDOT lexpr_option RSQUARE [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . QUESTION lexpr COLON lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr QUESTION lexpr COLON lexpr . [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
-- On STAR shift to state 84
-- On SLASH shift to state 92
-- On QUESTION shift to state 100
-- On PLUS shift to state 94
-- On PERCENT shift to state 96
-- On NE shift to state 104
-- On MINUS shift to state 98
-- On LT shift to state 105
-- On LSQUARE shift to state 78
-- On LE shift to state 106
-- On GT shift to state 107
-- On GE shift to state 108
-- On EQ shift to state 109
-- On DOT shift to state 86
-- On ARROW shift to state 88
-- On relation shift to state 90
## Reductions:
-- On VARIANT reduce production lexpr -> lexpr QUESTION lexpr COLON lexpr
-- On THEN reduce production lexpr -> lexpr QUESTION lexpr COLON lexpr
-- On RSQUARE reduce production lexpr -> lexpr QUESTION lexpr COLON lexpr
-- On RPAR reduce production lexpr -> lexpr QUESTION lexpr COLON lexpr
-- On RBRACE reduce production lexpr -> lexpr QUESTION lexpr COLON lexpr
-- On OR reduce production lexpr -> lexpr QUESTION lexpr COLON lexpr
-- On LOOP_ASSIGNS reduce production lexpr -> lexpr QUESTION lexpr COLON lexpr
-- On IMPLIES reduce production lexpr -> lexpr QUESTION lexpr COLON lexpr
-- On IFF reduce production lexpr -> lexpr QUESTION lexpr COLON lexpr
-- On FOR reduce production lexpr -> lexpr QUESTION lexpr COLON lexpr
-- On EQUAL reduce production lexpr -> lexpr QUESTION lexpr COLON lexpr
-- On EOF reduce production lexpr -> lexpr QUESTION lexpr COLON lexpr
-- On ENSURES reduce production lexpr -> lexpr QUESTION lexpr COLON lexpr
-- On ELSE reduce production lexpr -> lexpr QUESTION lexpr COLON lexpr
-- On DOTDOT reduce production lexpr -> lexpr QUESTION lexpr COLON lexpr
-- On DECREASES reduce production lexpr -> lexpr QUESTION lexpr COLON lexpr
-- On COMMA reduce production lexpr -> lexpr QUESTION lexpr COLON lexpr
-- On COLON reduce production lexpr -> lexpr QUESTION lexpr COLON lexpr
-- On ASSIGNS reduce production lexpr -> lexpr QUESTION lexpr COLON lexpr
-- On AND reduce production lexpr -> lexpr QUESTION lexpr COLON lexpr

State 118:
## Known stack suffix:
## lexpr LSQUARE lexpr
## LR(1) items:
lexpr -> lexpr . IMPLIES lexpr [ STAR SLASH RSQUARE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOTDOT DOT ARROW AND ]
lexpr -> lexpr . IFF lexpr [ STAR SLASH RSQUARE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOTDOT DOT ARROW AND ]
lexpr -> lexpr . OR lexpr [ STAR SLASH RSQUARE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOTDOT DOT ARROW AND ]
lexpr -> lexpr . AND lexpr [ STAR SLASH RSQUARE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOTDOT DOT ARROW AND ]
lexpr -> lexpr . relation lexpr [ STAR SLASH RSQUARE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOTDOT DOT ARROW AND ]
lexpr -> lexpr . PLUS lexpr [ STAR SLASH RSQUARE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOTDOT DOT ARROW AND ]
lexpr -> lexpr . MINUS lexpr [ STAR SLASH RSQUARE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOTDOT DOT ARROW AND ]
lexpr -> lexpr . STAR lexpr [ STAR SLASH RSQUARE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOTDOT DOT ARROW AND ]
lexpr -> lexpr . SLASH lexpr [ STAR SLASH RSQUARE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOTDOT DOT ARROW AND ]
lexpr -> lexpr . PERCENT lexpr [ STAR SLASH RSQUARE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOTDOT DOT ARROW AND ]
lexpr -> lexpr . ARROW IDENTIFIER [ STAR SLASH RSQUARE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOTDOT DOT ARROW AND ]
lexpr -> lexpr . DOT IDENTIFIER [ STAR SLASH RSQUARE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOTDOT DOT ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr RSQUARE [ STAR SLASH RSQUARE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOTDOT DOT ARROW AND ]
lexpr -> lexpr LSQUARE lexpr . RSQUARE [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr_option DOTDOT lexpr_option RSQUARE [ STAR SLASH RSQUARE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOTDOT DOT ARROW AND ]
lexpr -> lexpr . QUESTION lexpr COLON lexpr [ STAR SLASH RSQUARE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOTDOT DOT ARROW AND ]
lexpr_option -> lexpr . [ DOTDOT ]
## Transitions:
-- On STAR shift to state 84
-- On SLASH shift to state 92
-- On RSQUARE shift to state 119
-- On QUESTION shift to state 100
-- On PLUS shift to state 94
-- On PERCENT shift to state 96
-- On OR shift to state 102
-- On NE shift to state 104
-- On MINUS shift to state 98
-- On LT shift to state 105
-- On LSQUARE shift to state 78
-- On LE shift to state 106
-- On IMPLIES shift to state 112
-- On IFF shift to state 114
-- On GT shift to state 107
-- On GE shift to state 108
-- On EQ shift to state 109
-- On DOT shift to state 86
-- On ARROW shift to state 88
-- On AND shift to state 110
-- On relation shift to state 90
## Reductions:
-- On DOTDOT reduce production lexpr_option -> lexpr

State 119:
## Known stack suffix:
## lexpr LSQUARE lexpr RSQUARE
## LR(1) items:
lexpr -> lexpr LSQUARE lexpr RSQUARE . [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production lexpr -> lexpr LSQUARE lexpr RSQUARE

State 120:
## Known stack suffix:
## AT LPAR lexpr
## LR(1) items:
lexpr -> lexpr . IMPLIES lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> lexpr . IFF lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> lexpr . OR lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> lexpr . AND lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> lexpr . relation lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> lexpr . PLUS lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> lexpr . MINUS lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> lexpr . STAR lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> lexpr . SLASH lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> lexpr . PERCENT lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> lexpr . ARROW IDENTIFIER [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> lexpr . DOT IDENTIFIER [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr RSQUARE [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr_option DOTDOT lexpr_option RSQUARE [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> lexpr . QUESTION lexpr COLON lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> AT LPAR lexpr . COMMA IDENTIFIER RPAR [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
-- On STAR shift to state 84
-- On SLASH shift to state 92
-- On QUESTION shift to state 100
-- On PLUS shift to state 94
-- On PERCENT shift to state 96
-- On OR shift to state 102
-- On NE shift to state 104
-- On MINUS shift to state 98
-- On LT shift to state 105
-- On LSQUARE shift to state 78
-- On LE shift to state 106
-- On IMPLIES shift to state 112
-- On IFF shift to state 114
-- On GT shift to state 107
-- On GE shift to state 108
-- On EQ shift to state 109
-- On DOT shift to state 86
-- On COMMA shift to state 121
-- On ARROW shift to state 88
-- On AND shift to state 110
-- On relation shift to state 90
## Reductions:

State 121:
## Known stack suffix:
## AT LPAR lexpr COMMA
## LR(1) items:
lexpr -> AT LPAR lexpr COMMA . IDENTIFIER RPAR [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
-- On IDENTIFIER shift to state 122
## Reductions:

State 122:
## Known stack suffix:
## AT LPAR lexpr COMMA IDENTIFIER
## LR(1) items:
lexpr -> AT LPAR lexpr COMMA IDENTIFIER . RPAR [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
-- On RPAR shift to state 123
## Reductions:

State 123:
## Known stack suffix:
## AT LPAR lexpr COMMA IDENTIFIER RPAR
## LR(1) items:
lexpr -> AT LPAR lexpr COMMA IDENTIFIER RPAR . [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production lexpr -> AT LPAR lexpr COMMA IDENTIFIER RPAR

State 124:
## Known stack suffix:
## BASE_ADDR LPAR lexpr
## LR(1) items:
lexpr -> lexpr . IMPLIES lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . IFF lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . OR lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . AND lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . relation lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . PLUS lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . MINUS lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . STAR lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . SLASH lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . PERCENT lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . ARROW IDENTIFIER [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . DOT IDENTIFIER [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr RSQUARE [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr_option DOTDOT lexpr_option RSQUARE [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . QUESTION lexpr COLON lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> BASE_ADDR LPAR lexpr . RPAR [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
-- On STAR shift to state 84
-- On SLASH shift to state 92
-- On RPAR shift to state 125
-- On QUESTION shift to state 100
-- On PLUS shift to state 94
-- On PERCENT shift to state 96
-- On OR shift to state 102
-- On NE shift to state 104
-- On MINUS shift to state 98
-- On LT shift to state 105
-- On LSQUARE shift to state 78
-- On LE shift to state 106
-- On IMPLIES shift to state 112
-- On IFF shift to state 114
-- On GT shift to state 107
-- On GE shift to state 108
-- On EQ shift to state 109
-- On DOT shift to state 86
-- On ARROW shift to state 88
-- On AND shift to state 110
-- On relation shift to state 90
## Reductions:

State 125:
## Known stack suffix:
## BASE_ADDR LPAR lexpr RPAR
## LR(1) items:
lexpr -> BASE_ADDR LPAR lexpr RPAR . [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production lexpr -> BASE_ADDR LPAR lexpr RPAR

State 126:
## Known stack suffix:
## BLOCK_LENGTH LPAR lexpr
## LR(1) items:
lexpr -> lexpr . IMPLIES lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . IFF lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . OR lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . AND lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . relation lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . PLUS lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . MINUS lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . STAR lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . SLASH lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . PERCENT lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . ARROW IDENTIFIER [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . DOT IDENTIFIER [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr RSQUARE [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr_option DOTDOT lexpr_option RSQUARE [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . QUESTION lexpr COLON lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> BLOCK_LENGTH LPAR lexpr . RPAR [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
-- On STAR shift to state 84
-- On SLASH shift to state 92
-- On RPAR shift to state 127
-- On QUESTION shift to state 100
-- On PLUS shift to state 94
-- On PERCENT shift to state 96
-- On OR shift to state 102
-- On NE shift to state 104
-- On MINUS shift to state 98
-- On LT shift to state 105
-- On LSQUARE shift to state 78
-- On LE shift to state 106
-- On IMPLIES shift to state 112
-- On IFF shift to state 114
-- On GT shift to state 107
-- On GE shift to state 108
-- On EQ shift to state 109
-- On DOT shift to state 86
-- On ARROW shift to state 88
-- On AND shift to state 110
-- On relation shift to state 90
## Reductions:

State 127:
## Known stack suffix:
## BLOCK_LENGTH LPAR lexpr RPAR
## LR(1) items:
lexpr -> BLOCK_LENGTH LPAR lexpr RPAR . [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production lexpr -> BLOCK_LENGTH LPAR lexpr RPAR

State 128:
## Known stack suffix:
## EXISTS ne_parameters SEMICOLON lexpr
## LR(1) items:
lexpr -> lexpr . IMPLIES lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . IFF lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . OR lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . AND lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . relation lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> EXISTS ne_parameters SEMICOLON lexpr . [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . PLUS lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . MINUS lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . STAR lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . SLASH lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . PERCENT lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . ARROW IDENTIFIER [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . DOT IDENTIFIER [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr RSQUARE [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr_option DOTDOT lexpr_option RSQUARE [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . QUESTION lexpr COLON lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
-- On STAR shift to state 84
-- On SLASH shift to state 92
-- On QUESTION shift to state 100
-- On PLUS shift to state 94
-- On PERCENT shift to state 96
-- On OR shift to state 102
-- On NE shift to state 104
-- On MINUS shift to state 98
-- On LT shift to state 105
-- On LSQUARE shift to state 78
-- On LE shift to state 106
-- On IMPLIES shift to state 112
-- On IFF shift to state 114
-- On GT shift to state 107
-- On GE shift to state 108
-- On EQ shift to state 109
-- On DOT shift to state 86
-- On ARROW shift to state 88
-- On AND shift to state 110
-- On relation shift to state 90
## Reductions:
-- On VARIANT reduce production lexpr -> EXISTS ne_parameters SEMICOLON lexpr
-- On THEN reduce production lexpr -> EXISTS ne_parameters SEMICOLON lexpr
-- On RSQUARE reduce production lexpr -> EXISTS ne_parameters SEMICOLON lexpr
-- On RPAR reduce production lexpr -> EXISTS ne_parameters SEMICOLON lexpr
-- On RBRACE reduce production lexpr -> EXISTS ne_parameters SEMICOLON lexpr
-- On LOOP_ASSIGNS reduce production lexpr -> EXISTS ne_parameters SEMICOLON lexpr
-- On FOR reduce production lexpr -> EXISTS ne_parameters SEMICOLON lexpr
-- On EQUAL reduce production lexpr -> EXISTS ne_parameters SEMICOLON lexpr
-- On EOF reduce production lexpr -> EXISTS ne_parameters SEMICOLON lexpr
-- On ENSURES reduce production lexpr -> EXISTS ne_parameters SEMICOLON lexpr
-- On ELSE reduce production lexpr -> EXISTS ne_parameters SEMICOLON lexpr
-- On DOTDOT reduce production lexpr -> EXISTS ne_parameters SEMICOLON lexpr
-- On DECREASES reduce production lexpr -> EXISTS ne_parameters SEMICOLON lexpr
-- On COMMA reduce production lexpr -> EXISTS ne_parameters SEMICOLON lexpr
-- On COLON reduce production lexpr -> EXISTS ne_parameters SEMICOLON lexpr
-- On ASSIGNS reduce production lexpr -> EXISTS ne_parameters SEMICOLON lexpr

State 129:
## Known stack suffix:
## FORALL ne_parameters SEMICOLON lexpr
## LR(1) items:
lexpr -> lexpr . IMPLIES lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . IFF lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . OR lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . AND lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . relation lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> FORALL ne_parameters SEMICOLON lexpr . [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . PLUS lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . MINUS lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . STAR lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . SLASH lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . PERCENT lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . ARROW IDENTIFIER [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . DOT IDENTIFIER [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr RSQUARE [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr_option DOTDOT lexpr_option RSQUARE [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . QUESTION lexpr COLON lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
-- On STAR shift to state 84
-- On SLASH shift to state 92
-- On QUESTION shift to state 100
-- On PLUS shift to state 94
-- On PERCENT shift to state 96
-- On OR shift to state 102
-- On NE shift to state 104
-- On MINUS shift to state 98
-- On LT shift to state 105
-- On LSQUARE shift to state 78
-- On LE shift to state 106
-- On IMPLIES shift to state 112
-- On IFF shift to state 114
-- On GT shift to state 107
-- On GE shift to state 108
-- On EQ shift to state 109
-- On DOT shift to state 86
-- On ARROW shift to state 88
-- On AND shift to state 110
-- On relation shift to state 90
## Reductions:
-- On VARIANT reduce production lexpr -> FORALL ne_parameters SEMICOLON lexpr
-- On THEN reduce production lexpr -> FORALL ne_parameters SEMICOLON lexpr
-- On RSQUARE reduce production lexpr -> FORALL ne_parameters SEMICOLON lexpr
-- On RPAR reduce production lexpr -> FORALL ne_parameters SEMICOLON lexpr
-- On RBRACE reduce production lexpr -> FORALL ne_parameters SEMICOLON lexpr
-- On LOOP_ASSIGNS reduce production lexpr -> FORALL ne_parameters SEMICOLON lexpr
-- On FOR reduce production lexpr -> FORALL ne_parameters SEMICOLON lexpr
-- On EQUAL reduce production lexpr -> FORALL ne_parameters SEMICOLON lexpr
-- On EOF reduce production lexpr -> FORALL ne_parameters SEMICOLON lexpr
-- On ENSURES reduce production lexpr -> FORALL ne_parameters SEMICOLON lexpr
-- On ELSE reduce production lexpr -> FORALL ne_parameters SEMICOLON lexpr
-- On DOTDOT reduce production lexpr -> FORALL ne_parameters SEMICOLON lexpr
-- On DECREASES reduce production lexpr -> FORALL ne_parameters SEMICOLON lexpr
-- On COMMA reduce production lexpr -> FORALL ne_parameters SEMICOLON lexpr
-- On COLON reduce production lexpr -> FORALL ne_parameters SEMICOLON lexpr
-- On ASSIGNS reduce production lexpr -> FORALL ne_parameters SEMICOLON lexpr

State 130:
## Known stack suffix:
## FRESH LPAR lexpr
## LR(1) items:
lexpr -> lexpr . IMPLIES lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . IFF lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . OR lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . AND lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . relation lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> FRESH LPAR lexpr . RPAR [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . PLUS lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . MINUS lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . STAR lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . SLASH lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . PERCENT lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . ARROW IDENTIFIER [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . DOT IDENTIFIER [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr RSQUARE [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr_option DOTDOT lexpr_option RSQUARE [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . QUESTION lexpr COLON lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
## Transitions:
-- On STAR shift to state 84
-- On SLASH shift to state 92
-- On RPAR shift to state 131
-- On QUESTION shift to state 100
-- On PLUS shift to state 94
-- On PERCENT shift to state 96
-- On OR shift to state 102
-- On NE shift to state 104
-- On MINUS shift to state 98
-- On LT shift to state 105
-- On LSQUARE shift to state 78
-- On LE shift to state 106
-- On IMPLIES shift to state 112
-- On IFF shift to state 114
-- On GT shift to state 107
-- On GE shift to state 108
-- On EQ shift to state 109
-- On DOT shift to state 86
-- On ARROW shift to state 88
-- On AND shift to state 110
-- On relation shift to state 90
## Reductions:

State 131:
## Known stack suffix:
## FRESH LPAR lexpr RPAR
## LR(1) items:
lexpr -> FRESH LPAR lexpr RPAR . [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production lexpr -> FRESH LPAR lexpr RPAR

State 132:
## Known stack suffix:
## FULLSEPARATED LPAR lexpr
## LR(1) items:
lexpr -> lexpr . IMPLIES lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> lexpr . IFF lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> lexpr . OR lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> lexpr . AND lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> lexpr . relation lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> FULLSEPARATED LPAR lexpr . COMMA lexpr RPAR [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . PLUS lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> lexpr . MINUS lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> lexpr . STAR lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> lexpr . SLASH lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> lexpr . PERCENT lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> lexpr . ARROW IDENTIFIER [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> lexpr . DOT IDENTIFIER [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr RSQUARE [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr_option DOTDOT lexpr_option RSQUARE [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> lexpr . QUESTION lexpr COLON lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
## Transitions:
-- On STAR shift to state 84
-- On SLASH shift to state 92
-- On QUESTION shift to state 100
-- On PLUS shift to state 94
-- On PERCENT shift to state 96
-- On OR shift to state 102
-- On NE shift to state 104
-- On MINUS shift to state 98
-- On LT shift to state 105
-- On LSQUARE shift to state 78
-- On LE shift to state 106
-- On IMPLIES shift to state 112
-- On IFF shift to state 114
-- On GT shift to state 107
-- On GE shift to state 108
-- On EQ shift to state 109
-- On DOT shift to state 86
-- On COMMA shift to state 133
-- On ARROW shift to state 88
-- On AND shift to state 110
-- On relation shift to state 90
## Reductions:

State 133:
## Known stack suffix:
## FULLSEPARATED LPAR lexpr COMMA
## LR(1) items:
lexpr -> FULLSEPARATED LPAR lexpr COMMA . lexpr RPAR [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
-- On VALID_RANGE shift to state 2
-- On VALID_INDEX shift to state 4
-- On VALID shift to state 6
-- On TRUE shift to state 8
-- On STAR shift to state 9
-- On SEPARATED shift to state 10
-- On RESULT shift to state 12
-- On PLUS shift to state 13
-- On OLD shift to state 14
-- On NULL shift to state 16
-- On NOT shift to state 17
-- On MINUS shift to state 18
-- On LPAR shift to state 19
-- On IF shift to state 39
-- On IDENTIFIER shift to state 40
-- On FULLSEPARATED shift to state 42
-- On FRESH shift to state 44
-- On FORALL shift to state 46
-- On FALSE shift to state 65
-- On EXISTS shift to state 66
-- On CONSTANT shift to state 69
-- On BLOCK_LENGTH shift to state 70
-- On BASE_ADDR shift to state 72
-- On AT shift to state 74
-- On AMP shift to state 76
-- On lexpr shift to state 134
## Reductions:

State 134:
## Known stack suffix:
## FULLSEPARATED LPAR lexpr COMMA lexpr
## LR(1) items:
lexpr -> lexpr . IMPLIES lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . IFF lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . OR lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . AND lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . relation lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> FULLSEPARATED LPAR lexpr COMMA lexpr . RPAR [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . PLUS lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . MINUS lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . STAR lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . SLASH lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . PERCENT lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . ARROW IDENTIFIER [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . DOT IDENTIFIER [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr RSQUARE [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr_option DOTDOT lexpr_option RSQUARE [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . QUESTION lexpr COLON lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
## Transitions:
-- On STAR shift to state 84
-- On SLASH shift to state 92
-- On RPAR shift to state 135
-- On QUESTION shift to state 100
-- On PLUS shift to state 94
-- On PERCENT shift to state 96
-- On OR shift to state 102
-- On NE shift to state 104
-- On MINUS shift to state 98
-- On LT shift to state 105
-- On LSQUARE shift to state 78
-- On LE shift to state 106
-- On IMPLIES shift to state 112
-- On IFF shift to state 114
-- On GT shift to state 107
-- On GE shift to state 108
-- On EQ shift to state 109
-- On DOT shift to state 86
-- On ARROW shift to state 88
-- On AND shift to state 110
-- On relation shift to state 90
## Reductions:

State 135:
## Known stack suffix:
## FULLSEPARATED LPAR lexpr COMMA lexpr RPAR
## LR(1) items:
lexpr -> FULLSEPARATED LPAR lexpr COMMA lexpr RPAR . [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production lexpr -> FULLSEPARATED LPAR lexpr COMMA lexpr RPAR

State 136:
## Known stack suffix:
## ne_lexpr_list
## LR(1) items:
lexpr_list -> ne_lexpr_list . [ RPAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production lexpr_list -> ne_lexpr_list

State 137:
## Known stack suffix:
## IDENTIFIER LPAR lexpr_list
## LR(1) items:
lexpr -> IDENTIFIER LPAR lexpr_list . RPAR [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
-- On RPAR shift to state 138
## Reductions:

State 138:
## Known stack suffix:
## IDENTIFIER LPAR lexpr_list RPAR
## LR(1) items:
lexpr -> IDENTIFIER LPAR lexpr_list RPAR . [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production lexpr -> IDENTIFIER LPAR lexpr_list RPAR

State 139:
## Known stack suffix:
## lexpr
## LR(1) items:
lexpr -> lexpr . IMPLIES lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> lexpr . IFF lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> lexpr . OR lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> lexpr . AND lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> lexpr . relation lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> lexpr . PLUS lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> lexpr . MINUS lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> lexpr . STAR lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> lexpr . SLASH lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> lexpr . PERCENT lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> lexpr . ARROW IDENTIFIER [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> lexpr . DOT IDENTIFIER [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr RSQUARE [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr_option DOTDOT lexpr_option RSQUARE [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> lexpr . QUESTION lexpr COLON lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
ne_lexpr_list -> lexpr . [ RPAR ]
ne_lexpr_list -> lexpr . COMMA ne_lexpr_list [ RPAR ]
## Transitions:
-- On STAR shift to state 84
-- On SLASH shift to state 92
-- On QUESTION shift to state 100
-- On PLUS shift to state 94
-- On PERCENT shift to state 96
-- On OR shift to state 102
-- On NE shift to state 104
-- On MINUS shift to state 98
-- On LT shift to state 105
-- On LSQUARE shift to state 78
-- On LE shift to state 106
-- On IMPLIES shift to state 112
-- On IFF shift to state 114
-- On GT shift to state 107
-- On GE shift to state 108
-- On EQ shift to state 109
-- On DOT shift to state 86
-- On COMMA shift to state 140
-- On ARROW shift to state 88
-- On AND shift to state 110
-- On relation shift to state 90
## Reductions:
-- On RPAR reduce production ne_lexpr_list -> lexpr

State 140:
## Known stack suffix:
## lexpr COMMA
## LR(1) items:
ne_lexpr_list -> lexpr COMMA . ne_lexpr_list [ RPAR ]
## Transitions:
-- On VALID_RANGE shift to state 2
-- On VALID_INDEX shift to state 4
-- On VALID shift to state 6
-- On TRUE shift to state 8
-- On STAR shift to state 9
-- On SEPARATED shift to state 10
-- On RESULT shift to state 12
-- On PLUS shift to state 13
-- On OLD shift to state 14
-- On NULL shift to state 16
-- On NOT shift to state 17
-- On MINUS shift to state 18
-- On LPAR shift to state 19
-- On IF shift to state 39
-- On IDENTIFIER shift to state 40
-- On FULLSEPARATED shift to state 42
-- On FRESH shift to state 44
-- On FORALL shift to state 46
-- On FALSE shift to state 65
-- On EXISTS shift to state 66
-- On CONSTANT shift to state 69
-- On BLOCK_LENGTH shift to state 70
-- On BASE_ADDR shift to state 72
-- On AT shift to state 74
-- On AMP shift to state 76
-- On ne_lexpr_list shift to state 141
-- On lexpr shift to state 139
## Reductions:

State 141:
## Known stack suffix:
## lexpr COMMA ne_lexpr_list
## LR(1) items:
ne_lexpr_list -> lexpr COMMA ne_lexpr_list . [ RPAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ne_lexpr_list -> lexpr COMMA ne_lexpr_list

State 142:
## Known stack suffix:
## IDENTIFIER COLONCOLON
## LR(1) items:
lexpr -> IDENTIFIER COLONCOLON . lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
-- On VALID_RANGE shift to state 2
-- On VALID_INDEX shift to state 4
-- On VALID shift to state 6
-- On TRUE shift to state 8
-- On STAR shift to state 9
-- On SEPARATED shift to state 10
-- On RESULT shift to state 12
-- On PLUS shift to state 13
-- On OLD shift to state 14
-- On NULL shift to state 16
-- On NOT shift to state 17
-- On MINUS shift to state 18
-- On LPAR shift to state 19
-- On IF shift to state 39
-- On IDENTIFIER shift to state 40
-- On FULLSEPARATED shift to state 42
-- On FRESH shift to state 44
-- On FORALL shift to state 46
-- On FALSE shift to state 65
-- On EXISTS shift to state 66
-- On CONSTANT shift to state 69
-- On BLOCK_LENGTH shift to state 70
-- On BASE_ADDR shift to state 72
-- On AT shift to state 74
-- On AMP shift to state 76
-- On lexpr shift to state 143
## Reductions:

State 143:
## Known stack suffix:
## IDENTIFIER COLONCOLON lexpr
## LR(1) items:
lexpr -> lexpr . IMPLIES lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . IFF lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . OR lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . AND lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . relation lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . PLUS lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . MINUS lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . STAR lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . SLASH lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . PERCENT lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . ARROW IDENTIFIER [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . DOT IDENTIFIER [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr RSQUARE [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr_option DOTDOT lexpr_option RSQUARE [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . QUESTION lexpr COLON lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> IDENTIFIER COLONCOLON lexpr . [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
-- On STAR shift to state 84
-- On SLASH shift to state 92
-- On QUESTION shift to state 100
-- On PLUS shift to state 94
-- On PERCENT shift to state 96
-- On OR shift to state 102
-- On NE shift to state 104
-- On MINUS shift to state 98
-- On LT shift to state 105
-- On LSQUARE shift to state 78
-- On LE shift to state 106
-- On IMPLIES shift to state 112
-- On IFF shift to state 114
-- On GT shift to state 107
-- On GE shift to state 108
-- On EQ shift to state 109
-- On DOT shift to state 86
-- On ARROW shift to state 88
-- On AND shift to state 110
-- On relation shift to state 90
## Reductions:
-- On VARIANT reduce production lexpr -> IDENTIFIER COLONCOLON lexpr
-- On THEN reduce production lexpr -> IDENTIFIER COLONCOLON lexpr
-- On RSQUARE reduce production lexpr -> IDENTIFIER COLONCOLON lexpr
-- On RPAR reduce production lexpr -> IDENTIFIER COLONCOLON lexpr
-- On RBRACE reduce production lexpr -> IDENTIFIER COLONCOLON lexpr
-- On LOOP_ASSIGNS reduce production lexpr -> IDENTIFIER COLONCOLON lexpr
-- On FOR reduce production lexpr -> IDENTIFIER COLONCOLON lexpr
-- On EQUAL reduce production lexpr -> IDENTIFIER COLONCOLON lexpr
-- On EOF reduce production lexpr -> IDENTIFIER COLONCOLON lexpr
-- On ENSURES reduce production lexpr -> IDENTIFIER COLONCOLON lexpr
-- On ELSE reduce production lexpr -> IDENTIFIER COLONCOLON lexpr
-- On DOTDOT reduce production lexpr -> IDENTIFIER COLONCOLON lexpr
-- On DECREASES reduce production lexpr -> IDENTIFIER COLONCOLON lexpr
-- On COMMA reduce production lexpr -> IDENTIFIER COLONCOLON lexpr
-- On COLON reduce production lexpr -> IDENTIFIER COLONCOLON lexpr
-- On ASSIGNS reduce production lexpr -> IDENTIFIER COLONCOLON lexpr

State 144:
## Known stack suffix:
## IF lexpr
## LR(1) items:
lexpr -> lexpr . IMPLIES lexpr [ THEN STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . IFF lexpr [ THEN STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . OR lexpr [ THEN STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . AND lexpr [ THEN STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . relation lexpr [ THEN STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> IF lexpr . THEN lexpr ELSE lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . PLUS lexpr [ THEN STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . MINUS lexpr [ THEN STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . STAR lexpr [ THEN STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . SLASH lexpr [ THEN STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . PERCENT lexpr [ THEN STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . ARROW IDENTIFIER [ THEN STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . DOT IDENTIFIER [ THEN STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr RSQUARE [ THEN STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr_option DOTDOT lexpr_option RSQUARE [ THEN STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . QUESTION lexpr COLON lexpr [ THEN STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
## Transitions:
-- On THEN shift to state 145
-- On STAR shift to state 84
-- On SLASH shift to state 92
-- On QUESTION shift to state 100
-- On PLUS shift to state 94
-- On PERCENT shift to state 96
-- On OR shift to state 102
-- On NE shift to state 104
-- On MINUS shift to state 98
-- On LT shift to state 105
-- On LSQUARE shift to state 78
-- On LE shift to state 106
-- On IMPLIES shift to state 112
-- On IFF shift to state 114
-- On GT shift to state 107
-- On GE shift to state 108
-- On EQ shift to state 109
-- On DOT shift to state 86
-- On ARROW shift to state 88
-- On AND shift to state 110
-- On relation shift to state 90
## Reductions:

State 145:
## Known stack suffix:
## IF lexpr THEN
## LR(1) items:
lexpr -> IF lexpr THEN . lexpr ELSE lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
-- On VALID_RANGE shift to state 2
-- On VALID_INDEX shift to state 4
-- On VALID shift to state 6
-- On TRUE shift to state 8
-- On STAR shift to state 9
-- On SEPARATED shift to state 10
-- On RESULT shift to state 12
-- On PLUS shift to state 13
-- On OLD shift to state 14
-- On NULL shift to state 16
-- On NOT shift to state 17
-- On MINUS shift to state 18
-- On LPAR shift to state 19
-- On IF shift to state 39
-- On IDENTIFIER shift to state 40
-- On FULLSEPARATED shift to state 42
-- On FRESH shift to state 44
-- On FORALL shift to state 46
-- On FALSE shift to state 65
-- On EXISTS shift to state 66
-- On CONSTANT shift to state 69
-- On BLOCK_LENGTH shift to state 70
-- On BASE_ADDR shift to state 72
-- On AT shift to state 74
-- On AMP shift to state 76
-- On lexpr shift to state 146
## Reductions:

State 146:
## Known stack suffix:
## IF lexpr THEN lexpr
## LR(1) items:
lexpr -> lexpr . IMPLIES lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ ELSE DOT ARROW AND ]
lexpr -> lexpr . IFF lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ ELSE DOT ARROW AND ]
lexpr -> lexpr . OR lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ ELSE DOT ARROW AND ]
lexpr -> lexpr . AND lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ ELSE DOT ARROW AND ]
lexpr -> lexpr . relation lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ ELSE DOT ARROW AND ]
lexpr -> IF lexpr THEN lexpr . ELSE lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . PLUS lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ ELSE DOT ARROW AND ]
lexpr -> lexpr . MINUS lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ ELSE DOT ARROW AND ]
lexpr -> lexpr . STAR lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ ELSE DOT ARROW AND ]
lexpr -> lexpr . SLASH lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ ELSE DOT ARROW AND ]
lexpr -> lexpr . PERCENT lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ ELSE DOT ARROW AND ]
lexpr -> lexpr . ARROW IDENTIFIER [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ ELSE DOT ARROW AND ]
lexpr -> lexpr . DOT IDENTIFIER [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ ELSE DOT ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr RSQUARE [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ ELSE DOT ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr_option DOTDOT lexpr_option RSQUARE [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ ELSE DOT ARROW AND ]
lexpr -> lexpr . QUESTION lexpr COLON lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ ELSE DOT ARROW AND ]
## Transitions:
-- On STAR shift to state 84
-- On SLASH shift to state 92
-- On QUESTION shift to state 100
-- On PLUS shift to state 94
-- On PERCENT shift to state 96
-- On OR shift to state 102
-- On NE shift to state 104
-- On MINUS shift to state 98
-- On LT shift to state 105
-- On LSQUARE shift to state 78
-- On LE shift to state 106
-- On IMPLIES shift to state 112
-- On IFF shift to state 114
-- On GT shift to state 107
-- On GE shift to state 108
-- On EQ shift to state 109
-- On ELSE shift to state 147
-- On DOT shift to state 86
-- On ARROW shift to state 88
-- On AND shift to state 110
-- On relation shift to state 90
## Reductions:

State 147:
## Known stack suffix:
## IF lexpr THEN lexpr ELSE
## LR(1) items:
lexpr -> IF lexpr THEN lexpr ELSE . lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
-- On VALID_RANGE shift to state 2
-- On VALID_INDEX shift to state 4
-- On VALID shift to state 6
-- On TRUE shift to state 8
-- On STAR shift to state 9
-- On SEPARATED shift to state 10
-- On RESULT shift to state 12
-- On PLUS shift to state 13
-- On OLD shift to state 14
-- On NULL shift to state 16
-- On NOT shift to state 17
-- On MINUS shift to state 18
-- On LPAR shift to state 19
-- On IF shift to state 39
-- On IDENTIFIER shift to state 40
-- On FULLSEPARATED shift to state 42
-- On FRESH shift to state 44
-- On FORALL shift to state 46
-- On FALSE shift to state 65
-- On EXISTS shift to state 66
-- On CONSTANT shift to state 69
-- On BLOCK_LENGTH shift to state 70
-- On BASE_ADDR shift to state 72
-- On AT shift to state 74
-- On AMP shift to state 76
-- On lexpr shift to state 148
## Reductions:

State 148:
## Known stack suffix:
## IF lexpr THEN lexpr ELSE lexpr
## LR(1) items:
lexpr -> lexpr . IMPLIES lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . IFF lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . OR lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . AND lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . relation lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> IF lexpr THEN lexpr ELSE lexpr . [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . PLUS lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . MINUS lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . STAR lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . SLASH lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . PERCENT lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . ARROW IDENTIFIER [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . DOT IDENTIFIER [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr RSQUARE [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr_option DOTDOT lexpr_option RSQUARE [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . QUESTION lexpr COLON lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
-- On STAR shift to state 84
-- On SLASH shift to state 92
-- On QUESTION shift to state 100
-- On PLUS shift to state 94
-- On PERCENT shift to state 96
-- On NE shift to state 104
-- On MINUS shift to state 98
-- On LT shift to state 105
-- On LSQUARE shift to state 78
-- On LE shift to state 106
-- On GT shift to state 107
-- On GE shift to state 108
-- On EQ shift to state 109
-- On DOT shift to state 86
-- On ARROW shift to state 88
-- On relation shift to state 90
## Reductions:
-- On VARIANT reduce production lexpr -> IF lexpr THEN lexpr ELSE lexpr
-- On THEN reduce production lexpr -> IF lexpr THEN lexpr ELSE lexpr
-- On RSQUARE reduce production lexpr -> IF lexpr THEN lexpr ELSE lexpr
-- On RPAR reduce production lexpr -> IF lexpr THEN lexpr ELSE lexpr
-- On RBRACE reduce production lexpr -> IF lexpr THEN lexpr ELSE lexpr
-- On OR reduce production lexpr -> IF lexpr THEN lexpr ELSE lexpr
-- On LOOP_ASSIGNS reduce production lexpr -> IF lexpr THEN lexpr ELSE lexpr
-- On IMPLIES reduce production lexpr -> IF lexpr THEN lexpr ELSE lexpr
-- On IFF reduce production lexpr -> IF lexpr THEN lexpr ELSE lexpr
-- On FOR reduce production lexpr -> IF lexpr THEN lexpr ELSE lexpr
-- On EQUAL reduce production lexpr -> IF lexpr THEN lexpr ELSE lexpr
-- On EOF reduce production lexpr -> IF lexpr THEN lexpr ELSE lexpr
-- On ENSURES reduce production lexpr -> IF lexpr THEN lexpr ELSE lexpr
-- On ELSE reduce production lexpr -> IF lexpr THEN lexpr ELSE lexpr
-- On DOTDOT reduce production lexpr -> IF lexpr THEN lexpr ELSE lexpr
-- On DECREASES reduce production lexpr -> IF lexpr THEN lexpr ELSE lexpr
-- On COMMA reduce production lexpr -> IF lexpr THEN lexpr ELSE lexpr
-- On COLON reduce production lexpr -> IF lexpr THEN lexpr ELSE lexpr
-- On ASSIGNS reduce production lexpr -> IF lexpr THEN lexpr ELSE lexpr
-- On AND reduce production lexpr -> IF lexpr THEN lexpr ELSE lexpr

State 149:
## Known stack suffix:
## LPAR logic_type_not_id
## LR(1) items:
lexpr -> LPAR logic_type_not_id . RPAR lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
logic_type_not_id -> logic_type_not_id . STAR [ STAR RPAR ]
## Transitions:
-- On STAR shift to state 58
-- On RPAR shift to state 150
## Reductions:

State 150:
## Known stack suffix:
## LPAR logic_type_not_id RPAR
## LR(1) items:
lexpr -> LPAR logic_type_not_id RPAR . lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
-- On VALID_RANGE shift to state 2
-- On VALID_INDEX shift to state 4
-- On VALID shift to state 6
-- On TRUE shift to state 8
-- On STAR shift to state 9
-- On SEPARATED shift to state 10
-- On RESULT shift to state 12
-- On PLUS shift to state 13
-- On OLD shift to state 14
-- On NULL shift to state 16
-- On NOT shift to state 17
-- On MINUS shift to state 18
-- On LPAR shift to state 19
-- On IF shift to state 39
-- On IDENTIFIER shift to state 40
-- On FULLSEPARATED shift to state 42
-- On FRESH shift to state 44
-- On FORALL shift to state 46
-- On FALSE shift to state 65
-- On EXISTS shift to state 66
-- On CONSTANT shift to state 69
-- On BLOCK_LENGTH shift to state 70
-- On BASE_ADDR shift to state 72
-- On AT shift to state 74
-- On AMP shift to state 76
-- On lexpr shift to state 151
## Reductions:

State 151:
## Known stack suffix:
## LPAR logic_type_not_id RPAR lexpr
## LR(1) items:
lexpr -> lexpr . IMPLIES lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . IFF lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . OR lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . AND lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . relation lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . PLUS lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . MINUS lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . STAR lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . SLASH lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . PERCENT lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . ARROW IDENTIFIER [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . DOT IDENTIFIER [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr RSQUARE [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr_option DOTDOT lexpr_option RSQUARE [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . QUESTION lexpr COLON lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> LPAR logic_type_not_id RPAR lexpr . [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
-- On LSQUARE shift to state 78
-- On DOT shift to state 86
-- On ARROW shift to state 88
-- On relation shift to state 90
## Reductions:
-- On VARIANT reduce production lexpr -> LPAR logic_type_not_id RPAR lexpr
-- On THEN reduce production lexpr -> LPAR logic_type_not_id RPAR lexpr
-- On STAR reduce production lexpr -> LPAR logic_type_not_id RPAR lexpr
-- On SLASH reduce production lexpr -> LPAR logic_type_not_id RPAR lexpr
-- On RSQUARE reduce production lexpr -> LPAR logic_type_not_id RPAR lexpr
-- On RPAR reduce production lexpr -> LPAR logic_type_not_id RPAR lexpr
-- On RBRACE reduce production lexpr -> LPAR logic_type_not_id RPAR lexpr
-- On QUESTION reduce production lexpr -> LPAR logic_type_not_id RPAR lexpr
-- On PLUS reduce production lexpr -> LPAR logic_type_not_id RPAR lexpr
-- On PERCENT reduce production lexpr -> LPAR logic_type_not_id RPAR lexpr
-- On OR reduce production lexpr -> LPAR logic_type_not_id RPAR lexpr
-- On NE reduce production lexpr -> LPAR logic_type_not_id RPAR lexpr
-- On MINUS reduce production lexpr -> LPAR logic_type_not_id RPAR lexpr
-- On LT reduce production lexpr -> LPAR logic_type_not_id RPAR lexpr
-- On LOOP_ASSIGNS reduce production lexpr -> LPAR logic_type_not_id RPAR lexpr
-- On LE reduce production lexpr -> LPAR logic_type_not_id RPAR lexpr
-- On IMPLIES reduce production lexpr -> LPAR logic_type_not_id RPAR lexpr
-- On IFF reduce production lexpr -> LPAR logic_type_not_id RPAR lexpr
-- On GT reduce production lexpr -> LPAR logic_type_not_id RPAR lexpr
-- On GE reduce production lexpr -> LPAR logic_type_not_id RPAR lexpr
-- On FOR reduce production lexpr -> LPAR logic_type_not_id RPAR lexpr
-- On EQUAL reduce production lexpr -> LPAR logic_type_not_id RPAR lexpr
-- On EQ reduce production lexpr -> LPAR logic_type_not_id RPAR lexpr
-- On EOF reduce production lexpr -> LPAR logic_type_not_id RPAR lexpr
-- On ENSURES reduce production lexpr -> LPAR logic_type_not_id RPAR lexpr
-- On ELSE reduce production lexpr -> LPAR logic_type_not_id RPAR lexpr
-- On DOTDOT reduce production lexpr -> LPAR logic_type_not_id RPAR lexpr
-- On DECREASES reduce production lexpr -> LPAR logic_type_not_id RPAR lexpr
-- On COMMA reduce production lexpr -> LPAR logic_type_not_id RPAR lexpr
-- On COLON reduce production lexpr -> LPAR logic_type_not_id RPAR lexpr
-- On ASSIGNS reduce production lexpr -> LPAR logic_type_not_id RPAR lexpr
-- On AND reduce production lexpr -> LPAR logic_type_not_id RPAR lexpr

State 152:
## Known stack suffix:
## LPAR lexpr
## LR(1) items:
lexpr -> lexpr . IMPLIES lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . IFF lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . OR lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . AND lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . relation lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . PLUS lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . MINUS lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . STAR lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . SLASH lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . PERCENT lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . ARROW IDENTIFIER [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . DOT IDENTIFIER [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr RSQUARE [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr_option DOTDOT lexpr_option RSQUARE [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . QUESTION lexpr COLON lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> LPAR lexpr . RPAR [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> LPAR lexpr . RPAR lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
-- On STAR shift to state 84
-- On SLASH shift to state 92
-- On RPAR shift to state 153
-- On QUESTION shift to state 100
-- On PLUS shift to state 94
-- On PERCENT shift to state 96
-- On OR shift to state 102
-- On NE shift to state 104
-- On MINUS shift to state 98
-- On LT shift to state 105
-- On LSQUARE shift to state 78
-- On LE shift to state 106
-- On IMPLIES shift to state 112
-- On IFF shift to state 114
-- On GT shift to state 107
-- On GE shift to state 108
-- On EQ shift to state 109
-- On DOT shift to state 86
-- On ARROW shift to state 88
-- On AND shift to state 110
-- On relation shift to state 90
## Reductions:

State 153:
## Known stack suffix:
## LPAR lexpr RPAR
## LR(1) items:
lexpr -> LPAR lexpr RPAR . [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> LPAR lexpr RPAR . lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
-- On VALID_RANGE shift to state 2
-- On VALID_INDEX shift to state 4
-- On VALID shift to state 6
-- On TRUE shift to state 8
-- On SEPARATED shift to state 10
-- On RESULT shift to state 12
-- On OLD shift to state 14
-- On NULL shift to state 16
-- On NOT shift to state 17
-- On LPAR shift to state 19
-- On IF shift to state 39
-- On IDENTIFIER shift to state 40
-- On FULLSEPARATED shift to state 42
-- On FRESH shift to state 44
-- On FORALL shift to state 46
-- On FALSE shift to state 65
-- On EXISTS shift to state 66
-- On CONSTANT shift to state 69
-- On BLOCK_LENGTH shift to state 70
-- On BASE_ADDR shift to state 72
-- On AT shift to state 74
-- On AMP shift to state 76
-- On lexpr shift to state 154
## Reductions:
-- On VARIANT reduce production lexpr -> LPAR lexpr RPAR
-- On THEN reduce production lexpr -> LPAR lexpr RPAR
-- On STAR reduce production lexpr -> LPAR lexpr RPAR
-- On SLASH reduce production lexpr -> LPAR lexpr RPAR
-- On RSQUARE reduce production lexpr -> LPAR lexpr RPAR
-- On RPAR reduce production lexpr -> LPAR lexpr RPAR
-- On RBRACE reduce production lexpr -> LPAR lexpr RPAR
-- On QUESTION reduce production lexpr -> LPAR lexpr RPAR
-- On PLUS reduce production lexpr -> LPAR lexpr RPAR
-- On PERCENT reduce production lexpr -> LPAR lexpr RPAR
-- On OR reduce production lexpr -> LPAR lexpr RPAR
-- On NE reduce production lexpr -> LPAR lexpr RPAR
-- On MINUS reduce production lexpr -> LPAR lexpr RPAR
-- On LT reduce production lexpr -> LPAR lexpr RPAR
-- On LSQUARE reduce production lexpr -> LPAR lexpr RPAR
-- On LOOP_ASSIGNS reduce production lexpr -> LPAR lexpr RPAR
-- On LE reduce production lexpr -> LPAR lexpr RPAR
-- On IMPLIES reduce production lexpr -> LPAR lexpr RPAR
-- On IFF reduce production lexpr -> LPAR lexpr RPAR
-- On GT reduce production lexpr -> LPAR lexpr RPAR
-- On GE reduce production lexpr -> LPAR lexpr RPAR
-- On FOR reduce production lexpr -> LPAR lexpr RPAR
-- On EQUAL reduce production lexpr -> LPAR lexpr RPAR
-- On EQ reduce production lexpr -> LPAR lexpr RPAR
-- On EOF reduce production lexpr -> LPAR lexpr RPAR
-- On ENSURES reduce production lexpr -> LPAR lexpr RPAR
-- On ELSE reduce production lexpr -> LPAR lexpr RPAR
-- On DOTDOT reduce production lexpr -> LPAR lexpr RPAR
-- On DOT reduce production lexpr -> LPAR lexpr RPAR
-- On DECREASES reduce production lexpr -> LPAR lexpr RPAR
-- On COMMA reduce production lexpr -> LPAR lexpr RPAR
-- On COLON reduce production lexpr -> LPAR lexpr RPAR
-- On ASSIGNS reduce production lexpr -> LPAR lexpr RPAR
-- On ARROW reduce production lexpr -> LPAR lexpr RPAR
-- On AND reduce production lexpr -> LPAR lexpr RPAR

State 154:
## Known stack suffix:
## LPAR lexpr RPAR lexpr
## LR(1) items:
lexpr -> lexpr . IMPLIES lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . IFF lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . OR lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . AND lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . relation lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . PLUS lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . MINUS lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . STAR lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . SLASH lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . PERCENT lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . ARROW IDENTIFIER [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . DOT IDENTIFIER [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr RSQUARE [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr_option DOTDOT lexpr_option RSQUARE [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . QUESTION lexpr COLON lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> LPAR lexpr RPAR lexpr . [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
-- On LSQUARE shift to state 78
-- On DOT shift to state 86
-- On ARROW shift to state 88
-- On relation shift to state 90
## Reductions:
-- On VARIANT reduce production lexpr -> LPAR lexpr RPAR lexpr
-- On THEN reduce production lexpr -> LPAR lexpr RPAR lexpr
-- On STAR reduce production lexpr -> LPAR lexpr RPAR lexpr
-- On SLASH reduce production lexpr -> LPAR lexpr RPAR lexpr
-- On RSQUARE reduce production lexpr -> LPAR lexpr RPAR lexpr
-- On RPAR reduce production lexpr -> LPAR lexpr RPAR lexpr
-- On RBRACE reduce production lexpr -> LPAR lexpr RPAR lexpr
-- On QUESTION reduce production lexpr -> LPAR lexpr RPAR lexpr
-- On PLUS reduce production lexpr -> LPAR lexpr RPAR lexpr
-- On PERCENT reduce production lexpr -> LPAR lexpr RPAR lexpr
-- On OR reduce production lexpr -> LPAR lexpr RPAR lexpr
-- On NE reduce production lexpr -> LPAR lexpr RPAR lexpr
-- On MINUS reduce production lexpr -> LPAR lexpr RPAR lexpr
-- On LT reduce production lexpr -> LPAR lexpr RPAR lexpr
-- On LOOP_ASSIGNS reduce production lexpr -> LPAR lexpr RPAR lexpr
-- On LE reduce production lexpr -> LPAR lexpr RPAR lexpr
-- On IMPLIES reduce production lexpr -> LPAR lexpr RPAR lexpr
-- On IFF reduce production lexpr -> LPAR lexpr RPAR lexpr
-- On GT reduce production lexpr -> LPAR lexpr RPAR lexpr
-- On GE reduce production lexpr -> LPAR lexpr RPAR lexpr
-- On FOR reduce production lexpr -> LPAR lexpr RPAR lexpr
-- On EQUAL reduce production lexpr -> LPAR lexpr RPAR lexpr
-- On EQ reduce production lexpr -> LPAR lexpr RPAR lexpr
-- On EOF reduce production lexpr -> LPAR lexpr RPAR lexpr
-- On ENSURES reduce production lexpr -> LPAR lexpr RPAR lexpr
-- On ELSE reduce production lexpr -> LPAR lexpr RPAR lexpr
-- On DOTDOT reduce production lexpr -> LPAR lexpr RPAR lexpr
-- On DECREASES reduce production lexpr -> LPAR lexpr RPAR lexpr
-- On COMMA reduce production lexpr -> LPAR lexpr RPAR lexpr
-- On COLON reduce production lexpr -> LPAR lexpr RPAR lexpr
-- On ASSIGNS reduce production lexpr -> LPAR lexpr RPAR lexpr
-- On AND reduce production lexpr -> LPAR lexpr RPAR lexpr

State 155:
## Known stack suffix:
## MINUS lexpr
## LR(1) items:
lexpr -> lexpr . IMPLIES lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . IFF lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . OR lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . AND lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . relation lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . PLUS lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . MINUS lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . STAR lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . SLASH lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . PERCENT lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . ARROW IDENTIFIER [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . DOT IDENTIFIER [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr RSQUARE [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr_option DOTDOT lexpr_option RSQUARE [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> MINUS lexpr . [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . QUESTION lexpr COLON lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
-- On LSQUARE shift to state 78
-- On DOT shift to state 86
-- On ARROW shift to state 88
-- On relation shift to state 90
## Reductions:
-- On VARIANT reduce production lexpr -> MINUS lexpr
-- On THEN reduce production lexpr -> MINUS lexpr
-- On STAR reduce production lexpr -> MINUS lexpr
-- On SLASH reduce production lexpr -> MINUS lexpr
-- On RSQUARE reduce production lexpr -> MINUS lexpr
-- On RPAR reduce production lexpr -> MINUS lexpr
-- On RBRACE reduce production lexpr -> MINUS lexpr
-- On QUESTION reduce production lexpr -> MINUS lexpr
-- On PLUS reduce production lexpr -> MINUS lexpr
-- On PERCENT reduce production lexpr -> MINUS lexpr
-- On OR reduce production lexpr -> MINUS lexpr
-- On NE reduce production lexpr -> MINUS lexpr
-- On MINUS reduce production lexpr -> MINUS lexpr
-- On LT reduce production lexpr -> MINUS lexpr
-- On LOOP_ASSIGNS reduce production lexpr -> MINUS lexpr
-- On LE reduce production lexpr -> MINUS lexpr
-- On IMPLIES reduce production lexpr -> MINUS lexpr
-- On IFF reduce production lexpr -> MINUS lexpr
-- On GT reduce production lexpr -> MINUS lexpr
-- On GE reduce production lexpr -> MINUS lexpr
-- On FOR reduce production lexpr -> MINUS lexpr
-- On EQUAL reduce production lexpr -> MINUS lexpr
-- On EQ reduce production lexpr -> MINUS lexpr
-- On EOF reduce production lexpr -> MINUS lexpr
-- On ENSURES reduce production lexpr -> MINUS lexpr
-- On ELSE reduce production lexpr -> MINUS lexpr
-- On DOTDOT reduce production lexpr -> MINUS lexpr
-- On DECREASES reduce production lexpr -> MINUS lexpr
-- On COMMA reduce production lexpr -> MINUS lexpr
-- On COLON reduce production lexpr -> MINUS lexpr
-- On ASSIGNS reduce production lexpr -> MINUS lexpr
-- On AND reduce production lexpr -> MINUS lexpr

State 156:
## Known stack suffix:
## NOT lexpr
## LR(1) items:
lexpr -> lexpr . IMPLIES lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . IFF lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . OR lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . AND lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> NOT lexpr . [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . relation lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . PLUS lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . MINUS lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . STAR lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . SLASH lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . PERCENT lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . ARROW IDENTIFIER [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . DOT IDENTIFIER [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr RSQUARE [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr_option DOTDOT lexpr_option RSQUARE [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . QUESTION lexpr COLON lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
-- On STAR shift to state 84
-- On SLASH shift to state 92
-- On QUESTION shift to state 100
-- On PLUS shift to state 94
-- On PERCENT shift to state 96
-- On NE shift to state 104
-- On MINUS shift to state 98
-- On LT shift to state 105
-- On LSQUARE shift to state 78
-- On LE shift to state 106
-- On GT shift to state 107
-- On GE shift to state 108
-- On EQ shift to state 109
-- On DOT shift to state 86
-- On ARROW shift to state 88
-- On relation shift to state 90
## Reductions:
-- On VARIANT reduce production lexpr -> NOT lexpr
-- On THEN reduce production lexpr -> NOT lexpr
-- On RSQUARE reduce production lexpr -> NOT lexpr
-- On RPAR reduce production lexpr -> NOT lexpr
-- On RBRACE reduce production lexpr -> NOT lexpr
-- On OR reduce production lexpr -> NOT lexpr
-- On LOOP_ASSIGNS reduce production lexpr -> NOT lexpr
-- On IMPLIES reduce production lexpr -> NOT lexpr
-- On IFF reduce production lexpr -> NOT lexpr
-- On FOR reduce production lexpr -> NOT lexpr
-- On EQUAL reduce production lexpr -> NOT lexpr
-- On EOF reduce production lexpr -> NOT lexpr
-- On ENSURES reduce production lexpr -> NOT lexpr
-- On ELSE reduce production lexpr -> NOT lexpr
-- On DOTDOT reduce production lexpr -> NOT lexpr
-- On DECREASES reduce production lexpr -> NOT lexpr
-- On COMMA reduce production lexpr -> NOT lexpr
-- On COLON reduce production lexpr -> NOT lexpr
-- On ASSIGNS reduce production lexpr -> NOT lexpr
-- On AND reduce production lexpr -> NOT lexpr

State 157:
## Known stack suffix:
## OLD LPAR lexpr
## LR(1) items:
lexpr -> lexpr . IMPLIES lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . IFF lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . OR lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . AND lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . relation lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . PLUS lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . MINUS lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . STAR lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . SLASH lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . PERCENT lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . ARROW IDENTIFIER [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . DOT IDENTIFIER [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr RSQUARE [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr_option DOTDOT lexpr_option RSQUARE [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . QUESTION lexpr COLON lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> OLD LPAR lexpr . RPAR [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
-- On STAR shift to state 84
-- On SLASH shift to state 92
-- On RPAR shift to state 158
-- On QUESTION shift to state 100
-- On PLUS shift to state 94
-- On PERCENT shift to state 96
-- On OR shift to state 102
-- On NE shift to state 104
-- On MINUS shift to state 98
-- On LT shift to state 105
-- On LSQUARE shift to state 78
-- On LE shift to state 106
-- On IMPLIES shift to state 112
-- On IFF shift to state 114
-- On GT shift to state 107
-- On GE shift to state 108
-- On EQ shift to state 109
-- On DOT shift to state 86
-- On ARROW shift to state 88
-- On AND shift to state 110
-- On relation shift to state 90
## Reductions:

State 158:
## Known stack suffix:
## OLD LPAR lexpr RPAR
## LR(1) items:
lexpr -> OLD LPAR lexpr RPAR . [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production lexpr -> OLD LPAR lexpr RPAR

State 159:
## Known stack suffix:
## PLUS lexpr
## LR(1) items:
lexpr -> lexpr . IMPLIES lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . IFF lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . OR lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . AND lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . relation lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . PLUS lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . MINUS lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . STAR lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . SLASH lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . PERCENT lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . ARROW IDENTIFIER [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . DOT IDENTIFIER [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr RSQUARE [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr_option DOTDOT lexpr_option RSQUARE [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> PLUS lexpr . [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . QUESTION lexpr COLON lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
-- On LSQUARE shift to state 78
-- On DOT shift to state 86
-- On ARROW shift to state 88
-- On relation shift to state 90
## Reductions:
-- On VARIANT reduce production lexpr -> PLUS lexpr
-- On THEN reduce production lexpr -> PLUS lexpr
-- On STAR reduce production lexpr -> PLUS lexpr
-- On SLASH reduce production lexpr -> PLUS lexpr
-- On RSQUARE reduce production lexpr -> PLUS lexpr
-- On RPAR reduce production lexpr -> PLUS lexpr
-- On RBRACE reduce production lexpr -> PLUS lexpr
-- On QUESTION reduce production lexpr -> PLUS lexpr
-- On PLUS reduce production lexpr -> PLUS lexpr
-- On PERCENT reduce production lexpr -> PLUS lexpr
-- On OR reduce production lexpr -> PLUS lexpr
-- On NE reduce production lexpr -> PLUS lexpr
-- On MINUS reduce production lexpr -> PLUS lexpr
-- On LT reduce production lexpr -> PLUS lexpr
-- On LOOP_ASSIGNS reduce production lexpr -> PLUS lexpr
-- On LE reduce production lexpr -> PLUS lexpr
-- On IMPLIES reduce production lexpr -> PLUS lexpr
-- On IFF reduce production lexpr -> PLUS lexpr
-- On GT reduce production lexpr -> PLUS lexpr
-- On GE reduce production lexpr -> PLUS lexpr
-- On FOR reduce production lexpr -> PLUS lexpr
-- On EQUAL reduce production lexpr -> PLUS lexpr
-- On EQ reduce production lexpr -> PLUS lexpr
-- On EOF reduce production lexpr -> PLUS lexpr
-- On ENSURES reduce production lexpr -> PLUS lexpr
-- On ELSE reduce production lexpr -> PLUS lexpr
-- On DOTDOT reduce production lexpr -> PLUS lexpr
-- On DECREASES reduce production lexpr -> PLUS lexpr
-- On COMMA reduce production lexpr -> PLUS lexpr
-- On COLON reduce production lexpr -> PLUS lexpr
-- On ASSIGNS reduce production lexpr -> PLUS lexpr
-- On AND reduce production lexpr -> PLUS lexpr

State 160:
## Known stack suffix:
## SEPARATED LPAR lexpr
## LR(1) items:
lexpr -> lexpr . IMPLIES lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> lexpr . IFF lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> lexpr . OR lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> lexpr . AND lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> lexpr . relation lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> SEPARATED LPAR lexpr . COMMA lexpr RPAR [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . PLUS lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> lexpr . MINUS lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> lexpr . STAR lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> lexpr . SLASH lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> lexpr . PERCENT lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> lexpr . ARROW IDENTIFIER [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> lexpr . DOT IDENTIFIER [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr RSQUARE [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr_option DOTDOT lexpr_option RSQUARE [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> lexpr . QUESTION lexpr COLON lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
## Transitions:
-- On STAR shift to state 84
-- On SLASH shift to state 92
-- On QUESTION shift to state 100
-- On PLUS shift to state 94
-- On PERCENT shift to state 96
-- On OR shift to state 102
-- On NE shift to state 104
-- On MINUS shift to state 98
-- On LT shift to state 105
-- On LSQUARE shift to state 78
-- On LE shift to state 106
-- On IMPLIES shift to state 112
-- On IFF shift to state 114
-- On GT shift to state 107
-- On GE shift to state 108
-- On EQ shift to state 109
-- On DOT shift to state 86
-- On COMMA shift to state 161
-- On ARROW shift to state 88
-- On AND shift to state 110
-- On relation shift to state 90
## Reductions:

State 161:
## Known stack suffix:
## SEPARATED LPAR lexpr COMMA
## LR(1) items:
lexpr -> SEPARATED LPAR lexpr COMMA . lexpr RPAR [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
-- On VALID_RANGE shift to state 2
-- On VALID_INDEX shift to state 4
-- On VALID shift to state 6
-- On TRUE shift to state 8
-- On STAR shift to state 9
-- On SEPARATED shift to state 10
-- On RESULT shift to state 12
-- On PLUS shift to state 13
-- On OLD shift to state 14
-- On NULL shift to state 16
-- On NOT shift to state 17
-- On MINUS shift to state 18
-- On LPAR shift to state 19
-- On IF shift to state 39
-- On IDENTIFIER shift to state 40
-- On FULLSEPARATED shift to state 42
-- On FRESH shift to state 44
-- On FORALL shift to state 46
-- On FALSE shift to state 65
-- On EXISTS shift to state 66
-- On CONSTANT shift to state 69
-- On BLOCK_LENGTH shift to state 70
-- On BASE_ADDR shift to state 72
-- On AT shift to state 74
-- On AMP shift to state 76
-- On lexpr shift to state 162
## Reductions:

State 162:
## Known stack suffix:
## SEPARATED LPAR lexpr COMMA lexpr
## LR(1) items:
lexpr -> lexpr . IMPLIES lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . IFF lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . OR lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . AND lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . relation lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> SEPARATED LPAR lexpr COMMA lexpr . RPAR [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . PLUS lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . MINUS lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . STAR lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . SLASH lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . PERCENT lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . ARROW IDENTIFIER [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . DOT IDENTIFIER [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr RSQUARE [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr_option DOTDOT lexpr_option RSQUARE [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . QUESTION lexpr COLON lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
## Transitions:
-- On STAR shift to state 84
-- On SLASH shift to state 92
-- On RPAR shift to state 163
-- On QUESTION shift to state 100
-- On PLUS shift to state 94
-- On PERCENT shift to state 96
-- On OR shift to state 102
-- On NE shift to state 104
-- On MINUS shift to state 98
-- On LT shift to state 105
-- On LSQUARE shift to state 78
-- On LE shift to state 106
-- On IMPLIES shift to state 112
-- On IFF shift to state 114
-- On GT shift to state 107
-- On GE shift to state 108
-- On EQ shift to state 109
-- On DOT shift to state 86
-- On ARROW shift to state 88
-- On AND shift to state 110
-- On relation shift to state 90
## Reductions:

State 163:
## Known stack suffix:
## SEPARATED LPAR lexpr COMMA lexpr RPAR
## LR(1) items:
lexpr -> SEPARATED LPAR lexpr COMMA lexpr RPAR . [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production lexpr -> SEPARATED LPAR lexpr COMMA lexpr RPAR

State 164:
## Known stack suffix:
## STAR lexpr
## LR(1) items:
lexpr -> lexpr . IMPLIES lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . IFF lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . OR lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . AND lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . relation lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . PLUS lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . MINUS lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . STAR lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . SLASH lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . PERCENT lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . ARROW IDENTIFIER [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . DOT IDENTIFIER [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr RSQUARE [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr_option DOTDOT lexpr_option RSQUARE [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> STAR lexpr . [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . QUESTION lexpr COLON lexpr [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
-- On LSQUARE shift to state 78
-- On DOT shift to state 86
-- On ARROW shift to state 88
-- On relation shift to state 90
## Reductions:
-- On VARIANT reduce production lexpr -> STAR lexpr
-- On THEN reduce production lexpr -> STAR lexpr
-- On STAR reduce production lexpr -> STAR lexpr
-- On SLASH reduce production lexpr -> STAR lexpr
-- On RSQUARE reduce production lexpr -> STAR lexpr
-- On RPAR reduce production lexpr -> STAR lexpr
-- On RBRACE reduce production lexpr -> STAR lexpr
-- On QUESTION reduce production lexpr -> STAR lexpr
-- On PLUS reduce production lexpr -> STAR lexpr
-- On PERCENT reduce production lexpr -> STAR lexpr
-- On OR reduce production lexpr -> STAR lexpr
-- On NE reduce production lexpr -> STAR lexpr
-- On MINUS reduce production lexpr -> STAR lexpr
-- On LT reduce production lexpr -> STAR lexpr
-- On LOOP_ASSIGNS reduce production lexpr -> STAR lexpr
-- On LE reduce production lexpr -> STAR lexpr
-- On IMPLIES reduce production lexpr -> STAR lexpr
-- On IFF reduce production lexpr -> STAR lexpr
-- On GT reduce production lexpr -> STAR lexpr
-- On GE reduce production lexpr -> STAR lexpr
-- On FOR reduce production lexpr -> STAR lexpr
-- On EQUAL reduce production lexpr -> STAR lexpr
-- On EQ reduce production lexpr -> STAR lexpr
-- On EOF reduce production lexpr -> STAR lexpr
-- On ENSURES reduce production lexpr -> STAR lexpr
-- On ELSE reduce production lexpr -> STAR lexpr
-- On DOTDOT reduce production lexpr -> STAR lexpr
-- On DECREASES reduce production lexpr -> STAR lexpr
-- On COMMA reduce production lexpr -> STAR lexpr
-- On COLON reduce production lexpr -> STAR lexpr
-- On ASSIGNS reduce production lexpr -> STAR lexpr
-- On AND reduce production lexpr -> STAR lexpr

State 165:
## Known stack suffix:
## VALID LPAR lexpr
## LR(1) items:
lexpr -> lexpr . IMPLIES lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . IFF lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . OR lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . AND lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . relation lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> VALID LPAR lexpr . RPAR [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . PLUS lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . MINUS lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . STAR lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . SLASH lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . PERCENT lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . ARROW IDENTIFIER [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . DOT IDENTIFIER [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr RSQUARE [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr_option DOTDOT lexpr_option RSQUARE [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . QUESTION lexpr COLON lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
## Transitions:
-- On STAR shift to state 84
-- On SLASH shift to state 92
-- On RPAR shift to state 166
-- On QUESTION shift to state 100
-- On PLUS shift to state 94
-- On PERCENT shift to state 96
-- On OR shift to state 102
-- On NE shift to state 104
-- On MINUS shift to state 98
-- On LT shift to state 105
-- On LSQUARE shift to state 78
-- On LE shift to state 106
-- On IMPLIES shift to state 112
-- On IFF shift to state 114
-- On GT shift to state 107
-- On GE shift to state 108
-- On EQ shift to state 109
-- On DOT shift to state 86
-- On ARROW shift to state 88
-- On AND shift to state 110
-- On relation shift to state 90
## Reductions:

State 166:
## Known stack suffix:
## VALID LPAR lexpr RPAR
## LR(1) items:
lexpr -> VALID LPAR lexpr RPAR . [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production lexpr -> VALID LPAR lexpr RPAR

State 167:
## Known stack suffix:
## VALID_INDEX LPAR lexpr
## LR(1) items:
lexpr -> lexpr . IMPLIES lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> lexpr . IFF lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> lexpr . OR lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> lexpr . AND lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> lexpr . relation lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> VALID_INDEX LPAR lexpr . COMMA lexpr RPAR [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . PLUS lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> lexpr . MINUS lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> lexpr . STAR lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> lexpr . SLASH lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> lexpr . PERCENT lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> lexpr . ARROW IDENTIFIER [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> lexpr . DOT IDENTIFIER [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr RSQUARE [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr_option DOTDOT lexpr_option RSQUARE [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> lexpr . QUESTION lexpr COLON lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
## Transitions:
-- On STAR shift to state 84
-- On SLASH shift to state 92
-- On QUESTION shift to state 100
-- On PLUS shift to state 94
-- On PERCENT shift to state 96
-- On OR shift to state 102
-- On NE shift to state 104
-- On MINUS shift to state 98
-- On LT shift to state 105
-- On LSQUARE shift to state 78
-- On LE shift to state 106
-- On IMPLIES shift to state 112
-- On IFF shift to state 114
-- On GT shift to state 107
-- On GE shift to state 108
-- On EQ shift to state 109
-- On DOT shift to state 86
-- On COMMA shift to state 168
-- On ARROW shift to state 88
-- On AND shift to state 110
-- On relation shift to state 90
## Reductions:

State 168:
## Known stack suffix:
## VALID_INDEX LPAR lexpr COMMA
## LR(1) items:
lexpr -> VALID_INDEX LPAR lexpr COMMA . lexpr RPAR [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
-- On VALID_RANGE shift to state 2
-- On VALID_INDEX shift to state 4
-- On VALID shift to state 6
-- On TRUE shift to state 8
-- On STAR shift to state 9
-- On SEPARATED shift to state 10
-- On RESULT shift to state 12
-- On PLUS shift to state 13
-- On OLD shift to state 14
-- On NULL shift to state 16
-- On NOT shift to state 17
-- On MINUS shift to state 18
-- On LPAR shift to state 19
-- On IF shift to state 39
-- On IDENTIFIER shift to state 40
-- On FULLSEPARATED shift to state 42
-- On FRESH shift to state 44
-- On FORALL shift to state 46
-- On FALSE shift to state 65
-- On EXISTS shift to state 66
-- On CONSTANT shift to state 69
-- On BLOCK_LENGTH shift to state 70
-- On BASE_ADDR shift to state 72
-- On AT shift to state 74
-- On AMP shift to state 76
-- On lexpr shift to state 169
## Reductions:

State 169:
## Known stack suffix:
## VALID_INDEX LPAR lexpr COMMA lexpr
## LR(1) items:
lexpr -> lexpr . IMPLIES lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . IFF lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . OR lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . AND lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . relation lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> VALID_INDEX LPAR lexpr COMMA lexpr . RPAR [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . PLUS lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . MINUS lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . STAR lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . SLASH lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . PERCENT lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . ARROW IDENTIFIER [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . DOT IDENTIFIER [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr RSQUARE [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr_option DOTDOT lexpr_option RSQUARE [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . QUESTION lexpr COLON lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
## Transitions:
-- On STAR shift to state 84
-- On SLASH shift to state 92
-- On RPAR shift to state 170
-- On QUESTION shift to state 100
-- On PLUS shift to state 94
-- On PERCENT shift to state 96
-- On OR shift to state 102
-- On NE shift to state 104
-- On MINUS shift to state 98
-- On LT shift to state 105
-- On LSQUARE shift to state 78
-- On LE shift to state 106
-- On IMPLIES shift to state 112
-- On IFF shift to state 114
-- On GT shift to state 107
-- On GE shift to state 108
-- On EQ shift to state 109
-- On DOT shift to state 86
-- On ARROW shift to state 88
-- On AND shift to state 110
-- On relation shift to state 90
## Reductions:

State 170:
## Known stack suffix:
## VALID_INDEX LPAR lexpr COMMA lexpr RPAR
## LR(1) items:
lexpr -> VALID_INDEX LPAR lexpr COMMA lexpr RPAR . [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production lexpr -> VALID_INDEX LPAR lexpr COMMA lexpr RPAR

State 171:
## Known stack suffix:
## VALID_RANGE LPAR lexpr
## LR(1) items:
lexpr -> lexpr . IMPLIES lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> lexpr . IFF lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> lexpr . OR lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> lexpr . AND lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> lexpr . relation lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> VALID_RANGE LPAR lexpr . COMMA lexpr COMMA lexpr RPAR [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . PLUS lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> lexpr . MINUS lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> lexpr . STAR lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> lexpr . SLASH lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> lexpr . PERCENT lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> lexpr . ARROW IDENTIFIER [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> lexpr . DOT IDENTIFIER [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr RSQUARE [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr_option DOTDOT lexpr_option RSQUARE [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> lexpr . QUESTION lexpr COLON lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
## Transitions:
-- On STAR shift to state 84
-- On SLASH shift to state 92
-- On QUESTION shift to state 100
-- On PLUS shift to state 94
-- On PERCENT shift to state 96
-- On OR shift to state 102
-- On NE shift to state 104
-- On MINUS shift to state 98
-- On LT shift to state 105
-- On LSQUARE shift to state 78
-- On LE shift to state 106
-- On IMPLIES shift to state 112
-- On IFF shift to state 114
-- On GT shift to state 107
-- On GE shift to state 108
-- On EQ shift to state 109
-- On DOT shift to state 86
-- On COMMA shift to state 172
-- On ARROW shift to state 88
-- On AND shift to state 110
-- On relation shift to state 90
## Reductions:

State 172:
## Known stack suffix:
## VALID_RANGE LPAR lexpr COMMA
## LR(1) items:
lexpr -> VALID_RANGE LPAR lexpr COMMA . lexpr COMMA lexpr RPAR [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
-- On VALID_RANGE shift to state 2
-- On VALID_INDEX shift to state 4
-- On VALID shift to state 6
-- On TRUE shift to state 8
-- On STAR shift to state 9
-- On SEPARATED shift to state 10
-- On RESULT shift to state 12
-- On PLUS shift to state 13
-- On OLD shift to state 14
-- On NULL shift to state 16
-- On NOT shift to state 17
-- On MINUS shift to state 18
-- On LPAR shift to state 19
-- On IF shift to state 39
-- On IDENTIFIER shift to state 40
-- On FULLSEPARATED shift to state 42
-- On FRESH shift to state 44
-- On FORALL shift to state 46
-- On FALSE shift to state 65
-- On EXISTS shift to state 66
-- On CONSTANT shift to state 69
-- On BLOCK_LENGTH shift to state 70
-- On BASE_ADDR shift to state 72
-- On AT shift to state 74
-- On AMP shift to state 76
-- On lexpr shift to state 173
## Reductions:

State 173:
## Known stack suffix:
## VALID_RANGE LPAR lexpr COMMA lexpr
## LR(1) items:
lexpr -> lexpr . IMPLIES lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> lexpr . IFF lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> lexpr . OR lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> lexpr . AND lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> lexpr . relation lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> VALID_RANGE LPAR lexpr COMMA lexpr . COMMA lexpr RPAR [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . PLUS lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> lexpr . MINUS lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> lexpr . STAR lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> lexpr . SLASH lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> lexpr . PERCENT lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> lexpr . ARROW IDENTIFIER [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> lexpr . DOT IDENTIFIER [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr RSQUARE [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr_option DOTDOT lexpr_option RSQUARE [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
lexpr -> lexpr . QUESTION lexpr COLON lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT COMMA ARROW AND ]
## Transitions:
-- On STAR shift to state 84
-- On SLASH shift to state 92
-- On QUESTION shift to state 100
-- On PLUS shift to state 94
-- On PERCENT shift to state 96
-- On OR shift to state 102
-- On NE shift to state 104
-- On MINUS shift to state 98
-- On LT shift to state 105
-- On LSQUARE shift to state 78
-- On LE shift to state 106
-- On IMPLIES shift to state 112
-- On IFF shift to state 114
-- On GT shift to state 107
-- On GE shift to state 108
-- On EQ shift to state 109
-- On DOT shift to state 86
-- On COMMA shift to state 174
-- On ARROW shift to state 88
-- On AND shift to state 110
-- On relation shift to state 90
## Reductions:

State 174:
## Known stack suffix:
## VALID_RANGE LPAR lexpr COMMA lexpr COMMA
## LR(1) items:
lexpr -> VALID_RANGE LPAR lexpr COMMA lexpr COMMA . lexpr RPAR [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
-- On VALID_RANGE shift to state 2
-- On VALID_INDEX shift to state 4
-- On VALID shift to state 6
-- On TRUE shift to state 8
-- On STAR shift to state 9
-- On SEPARATED shift to state 10
-- On RESULT shift to state 12
-- On PLUS shift to state 13
-- On OLD shift to state 14
-- On NULL shift to state 16
-- On NOT shift to state 17
-- On MINUS shift to state 18
-- On LPAR shift to state 19
-- On IF shift to state 39
-- On IDENTIFIER shift to state 40
-- On FULLSEPARATED shift to state 42
-- On FRESH shift to state 44
-- On FORALL shift to state 46
-- On FALSE shift to state 65
-- On EXISTS shift to state 66
-- On CONSTANT shift to state 69
-- On BLOCK_LENGTH shift to state 70
-- On BASE_ADDR shift to state 72
-- On AT shift to state 74
-- On AMP shift to state 76
-- On lexpr shift to state 175
## Reductions:

State 175:
## Known stack suffix:
## VALID_RANGE LPAR lexpr COMMA lexpr COMMA lexpr
## LR(1) items:
lexpr -> lexpr . IMPLIES lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . IFF lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . OR lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . AND lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . relation lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> VALID_RANGE LPAR lexpr COMMA lexpr COMMA lexpr . RPAR [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
lexpr -> lexpr . PLUS lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . MINUS lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . STAR lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . SLASH lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . PERCENT lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . ARROW IDENTIFIER [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . DOT IDENTIFIER [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr RSQUARE [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr_option DOTDOT lexpr_option RSQUARE [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . QUESTION lexpr COLON lexpr [ STAR SLASH RPAR QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
## Transitions:
-- On STAR shift to state 84
-- On SLASH shift to state 92
-- On RPAR shift to state 176
-- On QUESTION shift to state 100
-- On PLUS shift to state 94
-- On PERCENT shift to state 96
-- On OR shift to state 102
-- On NE shift to state 104
-- On MINUS shift to state 98
-- On LT shift to state 105
-- On LSQUARE shift to state 78
-- On LE shift to state 106
-- On IMPLIES shift to state 112
-- On IFF shift to state 114
-- On GT shift to state 107
-- On GE shift to state 108
-- On EQ shift to state 109
-- On DOT shift to state 86
-- On ARROW shift to state 88
-- On AND shift to state 110
-- On relation shift to state 90
## Reductions:

State 176:
## Known stack suffix:
## VALID_RANGE LPAR lexpr COMMA lexpr COMMA lexpr RPAR
## LR(1) items:
lexpr -> VALID_RANGE LPAR lexpr COMMA lexpr COMMA lexpr RPAR . [ VARIANT THEN STAR SLASH RSQUARE RPAR RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE FOR EQUAL EQ EOF ENSURES ELSE DOTDOT DOT DECREASES COMMA COLON ASSIGNS ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production lexpr -> VALID_RANGE LPAR lexpr COMMA lexpr COMMA lexpr RPAR

State 177:
## Known stack suffix:
## lexpr
## LR(1) items:
ghost_lvalue -> lexpr . [ EQUAL ]
lexpr -> lexpr . IMPLIES lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQUAL EQ DOT ARROW AND ]
lexpr -> lexpr . IFF lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQUAL EQ DOT ARROW AND ]
lexpr -> lexpr . OR lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQUAL EQ DOT ARROW AND ]
lexpr -> lexpr . AND lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQUAL EQ DOT ARROW AND ]
lexpr -> lexpr . relation lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQUAL EQ DOT ARROW AND ]
lexpr -> lexpr . PLUS lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQUAL EQ DOT ARROW AND ]
lexpr -> lexpr . MINUS lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQUAL EQ DOT ARROW AND ]
lexpr -> lexpr . STAR lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQUAL EQ DOT ARROW AND ]
lexpr -> lexpr . SLASH lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQUAL EQ DOT ARROW AND ]
lexpr -> lexpr . PERCENT lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQUAL EQ DOT ARROW AND ]
lexpr -> lexpr . ARROW IDENTIFIER [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQUAL EQ DOT ARROW AND ]
lexpr -> lexpr . DOT IDENTIFIER [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQUAL EQ DOT ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr RSQUARE [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQUAL EQ DOT ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr_option DOTDOT lexpr_option RSQUARE [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQUAL EQ DOT ARROW AND ]
lexpr -> lexpr . QUESTION lexpr COLON lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQUAL EQ DOT ARROW AND ]
## Transitions:
-- On STAR shift to state 84
-- On SLASH shift to state 92
-- On QUESTION shift to state 100
-- On PLUS shift to state 94
-- On PERCENT shift to state 96
-- On OR shift to state 102
-- On NE shift to state 104
-- On MINUS shift to state 98
-- On LT shift to state 105
-- On LSQUARE shift to state 78
-- On LE shift to state 106
-- On IMPLIES shift to state 112
-- On IFF shift to state 114
-- On GT shift to state 107
-- On GE shift to state 108
-- On EQ shift to state 109
-- On DOT shift to state 86
-- On ARROW shift to state 88
-- On AND shift to state 110
-- On relation shift to state 90
## Reductions:
-- On EQUAL reduce production ghost_lvalue -> lexpr

State 178:
## Known stack suffix:
## SET ghost_lvalue
## LR(1) items:
annotation -> SET ghost_lvalue . EQUAL lexpr [ EOF ]
## Transitions:
-- On EQUAL shift to state 179
## Reductions:

State 179:
## Known stack suffix:
## SET ghost_lvalue EQUAL
## LR(1) items:
annotation -> SET ghost_lvalue EQUAL . lexpr [ EOF ]
## Transitions:
-- On VALID_RANGE shift to state 2
-- On VALID_INDEX shift to state 4
-- On VALID shift to state 6
-- On TRUE shift to state 8
-- On STAR shift to state 9
-- On SEPARATED shift to state 10
-- On RESULT shift to state 12
-- On PLUS shift to state 13
-- On OLD shift to state 14
-- On NULL shift to state 16
-- On NOT shift to state 17
-- On MINUS shift to state 18
-- On LPAR shift to state 19
-- On IF shift to state 39
-- On IDENTIFIER shift to state 40
-- On FULLSEPARATED shift to state 42
-- On FRESH shift to state 44
-- On FORALL shift to state 46
-- On FALSE shift to state 65
-- On EXISTS shift to state 66
-- On CONSTANT shift to state 69
-- On BLOCK_LENGTH shift to state 70
-- On BASE_ADDR shift to state 72
-- On AT shift to state 74
-- On AMP shift to state 76
-- On lexpr shift to state 180
## Reductions:

State 180:
## Known stack suffix:
## SET ghost_lvalue EQUAL lexpr
## LR(1) items:
annotation -> SET ghost_lvalue EQUAL lexpr . [ EOF ]
lexpr -> lexpr . IMPLIES lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF DOT ARROW AND ]
lexpr -> lexpr . IFF lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF DOT ARROW AND ]
lexpr -> lexpr . OR lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF DOT ARROW AND ]
lexpr -> lexpr . AND lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF DOT ARROW AND ]
lexpr -> lexpr . relation lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF DOT ARROW AND ]
lexpr -> lexpr . PLUS lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF DOT ARROW AND ]
lexpr -> lexpr . MINUS lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF DOT ARROW AND ]
lexpr -> lexpr . STAR lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF DOT ARROW AND ]
lexpr -> lexpr . SLASH lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF DOT ARROW AND ]
lexpr -> lexpr . PERCENT lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF DOT ARROW AND ]
lexpr -> lexpr . ARROW IDENTIFIER [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF DOT ARROW AND ]
lexpr -> lexpr . DOT IDENTIFIER [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF DOT ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr RSQUARE [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF DOT ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr_option DOTDOT lexpr_option RSQUARE [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF DOT ARROW AND ]
lexpr -> lexpr . QUESTION lexpr COLON lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF DOT ARROW AND ]
## Transitions:
-- On STAR shift to state 84
-- On SLASH shift to state 92
-- On QUESTION shift to state 100
-- On PLUS shift to state 94
-- On PERCENT shift to state 96
-- On OR shift to state 102
-- On NE shift to state 104
-- On MINUS shift to state 98
-- On LT shift to state 105
-- On LSQUARE shift to state 78
-- On LE shift to state 106
-- On IMPLIES shift to state 112
-- On IFF shift to state 114
-- On GT shift to state 107
-- On GE shift to state 108
-- On EQ shift to state 109
-- On DOT shift to state 86
-- On ARROW shift to state 88
-- On AND shift to state 110
-- On relation shift to state 90
## Reductions:
-- On EOF reduce production annotation -> SET ghost_lvalue EQUAL lexpr

State 181:
## Known stack suffix:
## REQUIRES
## LR(1) items:
pre_condition -> REQUIRES . lexpr [ EOF ENSURES DECREASES ASSIGNS ]
## Transitions:
-- On VALID_RANGE shift to state 2
-- On VALID_INDEX shift to state 4
-- On VALID shift to state 6
-- On TRUE shift to state 8
-- On STAR shift to state 9
-- On SEPARATED shift to state 10
-- On RESULT shift to state 12
-- On PLUS shift to state 13
-- On OLD shift to state 14
-- On NULL shift to state 16
-- On NOT shift to state 17
-- On MINUS shift to state 18
-- On LPAR shift to state 19
-- On IF shift to state 39
-- On IDENTIFIER shift to state 40
-- On FULLSEPARATED shift to state 42
-- On FRESH shift to state 44
-- On FORALL shift to state 46
-- On FALSE shift to state 65
-- On EXISTS shift to state 66
-- On CONSTANT shift to state 69
-- On BLOCK_LENGTH shift to state 70
-- On BASE_ADDR shift to state 72
-- On AT shift to state 74
-- On AMP shift to state 76
-- On lexpr shift to state 182
## Reductions:

State 182:
## Known stack suffix:
## REQUIRES lexpr
## LR(1) items:
lexpr -> lexpr . IMPLIES lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF ENSURES DOT DECREASES ASSIGNS ARROW AND ]
lexpr -> lexpr . IFF lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF ENSURES DOT DECREASES ASSIGNS ARROW AND ]
lexpr -> lexpr . OR lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF ENSURES DOT DECREASES ASSIGNS ARROW AND ]
lexpr -> lexpr . AND lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF ENSURES DOT DECREASES ASSIGNS ARROW AND ]
lexpr -> lexpr . relation lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF ENSURES DOT DECREASES ASSIGNS ARROW AND ]
lexpr -> lexpr . PLUS lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF ENSURES DOT DECREASES ASSIGNS ARROW AND ]
lexpr -> lexpr . MINUS lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF ENSURES DOT DECREASES ASSIGNS ARROW AND ]
lexpr -> lexpr . STAR lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF ENSURES DOT DECREASES ASSIGNS ARROW AND ]
lexpr -> lexpr . SLASH lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF ENSURES DOT DECREASES ASSIGNS ARROW AND ]
lexpr -> lexpr . PERCENT lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF ENSURES DOT DECREASES ASSIGNS ARROW AND ]
lexpr -> lexpr . ARROW IDENTIFIER [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF ENSURES DOT DECREASES ASSIGNS ARROW AND ]
lexpr -> lexpr . DOT IDENTIFIER [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF ENSURES DOT DECREASES ASSIGNS ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr RSQUARE [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF ENSURES DOT DECREASES ASSIGNS ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr_option DOTDOT lexpr_option RSQUARE [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF ENSURES DOT DECREASES ASSIGNS ARROW AND ]
lexpr -> lexpr . QUESTION lexpr COLON lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF ENSURES DOT DECREASES ASSIGNS ARROW AND ]
pre_condition -> REQUIRES lexpr . [ EOF ENSURES DECREASES ASSIGNS ]
## Transitions:
-- On STAR shift to state 84
-- On SLASH shift to state 92
-- On QUESTION shift to state 100
-- On PLUS shift to state 94
-- On PERCENT shift to state 96
-- On OR shift to state 102
-- On NE shift to state 104
-- On MINUS shift to state 98
-- On LT shift to state 105
-- On LSQUARE shift to state 78
-- On LE shift to state 106
-- On IMPLIES shift to state 112
-- On IFF shift to state 114
-- On GT shift to state 107
-- On GE shift to state 108
-- On EQ shift to state 109
-- On DOT shift to state 86
-- On ARROW shift to state 88
-- On AND shift to state 110
-- On relation shift to state 90
## Reductions:
-- On EOF reduce production pre_condition -> REQUIRES lexpr
-- On ENSURES reduce production pre_condition -> REQUIRES lexpr
-- On DECREASES reduce production pre_condition -> REQUIRES lexpr
-- On ASSIGNS reduce production pre_condition -> REQUIRES lexpr

State 183:
## Known stack suffix:
## PREDICATE
## LR(1) items:
decl -> PREDICATE . IDENTIFIER LPAR parameters RPAR [ EOF ]
decl -> PREDICATE . IDENTIFIER LPAR parameters RPAR READS locations [ EOF ]
decl -> PREDICATE . IDENTIFIER LPAR parameters RPAR LBRACE lexpr RBRACE [ EOF ]
## Transitions:
-- On IDENTIFIER shift to state 184
## Reductions:

State 184:
## Known stack suffix:
## PREDICATE IDENTIFIER
## LR(1) items:
decl -> PREDICATE IDENTIFIER . LPAR parameters RPAR [ EOF ]
decl -> PREDICATE IDENTIFIER . LPAR parameters RPAR READS locations [ EOF ]
decl -> PREDICATE IDENTIFIER . LPAR parameters RPAR LBRACE lexpr RBRACE [ EOF ]
## Transitions:
-- On LPAR shift to state 185
## Reductions:

State 185:
## Known stack suffix:
## PREDICATE IDENTIFIER LPAR
## LR(1) items:
decl -> PREDICATE IDENTIFIER LPAR . parameters RPAR [ EOF ]
decl -> PREDICATE IDENTIFIER LPAR . parameters RPAR READS locations [ EOF ]
decl -> PREDICATE IDENTIFIER LPAR . parameters RPAR LBRACE lexpr RBRACE [ EOF ]
## Transitions:
-- On VOID shift to state 20
-- On UNSIGNED shift to state 21
-- On TYPENAME shift to state 27
-- On SIGNED shift to state 28
-- On SHORT shift to state 34
-- On LONG shift to state 35
-- On INT shift to state 38
-- On IDENTIFIER shift to state 47
-- On FLOAT shift to state 51
-- On DOUBLE shift to state 52
-- On CHAR shift to state 53
-- On parameters shift to state 186
-- On parameter shift to state 54
-- On ne_parameters shift to state 197
-- On logic_type_not_id shift to state 57
-- On logic_type shift to state 59
## Reductions:
-- On RPAR reduce production parameters ->

State 186:
## Known stack suffix:
## PREDICATE IDENTIFIER LPAR parameters
## LR(1) items:
decl -> PREDICATE IDENTIFIER LPAR parameters . RPAR [ EOF ]
decl -> PREDICATE IDENTIFIER LPAR parameters . RPAR READS locations [ EOF ]
decl -> PREDICATE IDENTIFIER LPAR parameters . RPAR LBRACE lexpr RBRACE [ EOF ]
## Transitions:
-- On RPAR shift to state 187
## Reductions:

State 187:
## Known stack suffix:
## PREDICATE IDENTIFIER LPAR parameters RPAR
## LR(1) items:
decl -> PREDICATE IDENTIFIER LPAR parameters RPAR . [ EOF ]
decl -> PREDICATE IDENTIFIER LPAR parameters RPAR . READS locations [ EOF ]
decl -> PREDICATE IDENTIFIER LPAR parameters RPAR . LBRACE lexpr RBRACE [ EOF ]
## Transitions:
-- On READS shift to state 188
-- On LBRACE shift to state 194
## Reductions:
-- On EOF reduce production decl -> PREDICATE IDENTIFIER LPAR parameters RPAR

State 188:
## Known stack suffix:
## PREDICATE IDENTIFIER LPAR parameters RPAR READS
## LR(1) items:
decl -> PREDICATE IDENTIFIER LPAR parameters RPAR READS . locations [ EOF ]
## Transitions:
-- On VALID_RANGE shift to state 2
-- On VALID_INDEX shift to state 4
-- On VALID shift to state 6
-- On TRUE shift to state 8
-- On STAR shift to state 9
-- On SEPARATED shift to state 10
-- On RESULT shift to state 12
-- On PLUS shift to state 13
-- On OLD shift to state 14
-- On NULL shift to state 16
-- On NOT shift to state 17
-- On MINUS shift to state 18
-- On LPAR shift to state 19
-- On IF shift to state 39
-- On IDENTIFIER shift to state 40
-- On FULLSEPARATED shift to state 42
-- On FRESH shift to state 44
-- On FORALL shift to state 46
-- On FALSE shift to state 65
-- On EXISTS shift to state 66
-- On CONSTANT shift to state 69
-- On BLOCK_LENGTH shift to state 70
-- On BASE_ADDR shift to state 72
-- On AT shift to state 74
-- On AMP shift to state 76
-- On locations shift to state 189
-- On location shift to state 190
-- On lexpr shift to state 193
## Reductions:

State 189:
## Known stack suffix:
## PREDICATE IDENTIFIER LPAR parameters RPAR READS locations
## LR(1) items:
decl -> PREDICATE IDENTIFIER LPAR parameters RPAR READS locations . [ EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production decl -> PREDICATE IDENTIFIER LPAR parameters RPAR READS locations

State 190:
## Known stack suffix:
## location
## LR(1) items:
locations -> location . [ VARIANT EOF ENSURES DECREASES ]
locations -> location . COMMA locations [ VARIANT EOF ENSURES DECREASES ]
## Transitions:
-- On COMMA shift to state 191
## Reductions:
-- On VARIANT reduce production locations -> location
-- On EOF reduce production locations -> location
-- On ENSURES reduce production locations -> location
-- On DECREASES reduce production locations -> location

State 191:
## Known stack suffix:
## location COMMA
## LR(1) items:
locations -> location COMMA . locations [ VARIANT EOF ENSURES DECREASES ]
## Transitions:
-- On VALID_RANGE shift to state 2
-- On VALID_INDEX shift to state 4
-- On VALID shift to state 6
-- On TRUE shift to state 8
-- On STAR shift to state 9
-- On SEPARATED shift to state 10
-- On RESULT shift to state 12
-- On PLUS shift to state 13
-- On OLD shift to state 14
-- On NULL shift to state 16
-- On NOT shift to state 17
-- On MINUS shift to state 18
-- On LPAR shift to state 19
-- On IF shift to state 39
-- On IDENTIFIER shift to state 40
-- On FULLSEPARATED shift to state 42
-- On FRESH shift to state 44
-- On FORALL shift to state 46
-- On FALSE shift to state 65
-- On EXISTS shift to state 66
-- On CONSTANT shift to state 69
-- On BLOCK_LENGTH shift to state 70
-- On BASE_ADDR shift to state 72
-- On AT shift to state 74
-- On AMP shift to state 76
-- On locations shift to state 192
-- On location shift to state 190
-- On lexpr shift to state 193
## Reductions:

State 192:
## Known stack suffix:
## location COMMA locations
## LR(1) items:
locations -> location COMMA locations . [ VARIANT EOF ENSURES DECREASES ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production locations -> location COMMA locations

State 193:
## Known stack suffix:
## lexpr
## LR(1) items:
lexpr -> lexpr . IMPLIES lexpr [ VARIANT STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF ENSURES DOT DECREASES COMMA ARROW AND ]
lexpr -> lexpr . IFF lexpr [ VARIANT STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF ENSURES DOT DECREASES COMMA ARROW AND ]
lexpr -> lexpr . OR lexpr [ VARIANT STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF ENSURES DOT DECREASES COMMA ARROW AND ]
lexpr -> lexpr . AND lexpr [ VARIANT STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF ENSURES DOT DECREASES COMMA ARROW AND ]
lexpr -> lexpr . relation lexpr [ VARIANT STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF ENSURES DOT DECREASES COMMA ARROW AND ]
lexpr -> lexpr . PLUS lexpr [ VARIANT STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF ENSURES DOT DECREASES COMMA ARROW AND ]
lexpr -> lexpr . MINUS lexpr [ VARIANT STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF ENSURES DOT DECREASES COMMA ARROW AND ]
lexpr -> lexpr . STAR lexpr [ VARIANT STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF ENSURES DOT DECREASES COMMA ARROW AND ]
lexpr -> lexpr . SLASH lexpr [ VARIANT STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF ENSURES DOT DECREASES COMMA ARROW AND ]
lexpr -> lexpr . PERCENT lexpr [ VARIANT STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF ENSURES DOT DECREASES COMMA ARROW AND ]
lexpr -> lexpr . ARROW IDENTIFIER [ VARIANT STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF ENSURES DOT DECREASES COMMA ARROW AND ]
lexpr -> lexpr . DOT IDENTIFIER [ VARIANT STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF ENSURES DOT DECREASES COMMA ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr RSQUARE [ VARIANT STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF ENSURES DOT DECREASES COMMA ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr_option DOTDOT lexpr_option RSQUARE [ VARIANT STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF ENSURES DOT DECREASES COMMA ARROW AND ]
lexpr -> lexpr . QUESTION lexpr COLON lexpr [ VARIANT STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF ENSURES DOT DECREASES COMMA ARROW AND ]
location -> lexpr . [ VARIANT EOF ENSURES DECREASES COMMA ]
## Transitions:
-- On STAR shift to state 84
-- On SLASH shift to state 92
-- On QUESTION shift to state 100
-- On PLUS shift to state 94
-- On PERCENT shift to state 96
-- On OR shift to state 102
-- On NE shift to state 104
-- On MINUS shift to state 98
-- On LT shift to state 105
-- On LSQUARE shift to state 78
-- On LE shift to state 106
-- On IMPLIES shift to state 112
-- On IFF shift to state 114
-- On GT shift to state 107
-- On GE shift to state 108
-- On EQ shift to state 109
-- On DOT shift to state 86
-- On ARROW shift to state 88
-- On AND shift to state 110
-- On relation shift to state 90
## Reductions:
-- On VARIANT reduce production location -> lexpr
-- On EOF reduce production location -> lexpr
-- On ENSURES reduce production location -> lexpr
-- On DECREASES reduce production location -> lexpr
-- On COMMA reduce production location -> lexpr

State 194:
## Known stack suffix:
## PREDICATE IDENTIFIER LPAR parameters RPAR LBRACE
## LR(1) items:
decl -> PREDICATE IDENTIFIER LPAR parameters RPAR LBRACE . lexpr RBRACE [ EOF ]
## Transitions:
-- On VALID_RANGE shift to state 2
-- On VALID_INDEX shift to state 4
-- On VALID shift to state 6
-- On TRUE shift to state 8
-- On STAR shift to state 9
-- On SEPARATED shift to state 10
-- On RESULT shift to state 12
-- On PLUS shift to state 13
-- On OLD shift to state 14
-- On NULL shift to state 16
-- On NOT shift to state 17
-- On MINUS shift to state 18
-- On LPAR shift to state 19
-- On IF shift to state 39
-- On IDENTIFIER shift to state 40
-- On FULLSEPARATED shift to state 42
-- On FRESH shift to state 44
-- On FORALL shift to state 46
-- On FALSE shift to state 65
-- On EXISTS shift to state 66
-- On CONSTANT shift to state 69
-- On BLOCK_LENGTH shift to state 70
-- On BASE_ADDR shift to state 72
-- On AT shift to state 74
-- On AMP shift to state 76
-- On lexpr shift to state 195
## Reductions:

State 195:
## Known stack suffix:
## PREDICATE IDENTIFIER LPAR parameters RPAR LBRACE lexpr
## LR(1) items:
decl -> PREDICATE IDENTIFIER LPAR parameters RPAR LBRACE lexpr . RBRACE [ EOF ]
lexpr -> lexpr . IMPLIES lexpr [ STAR SLASH RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . IFF lexpr [ STAR SLASH RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . OR lexpr [ STAR SLASH RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . AND lexpr [ STAR SLASH RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . relation lexpr [ STAR SLASH RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . PLUS lexpr [ STAR SLASH RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . MINUS lexpr [ STAR SLASH RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . STAR lexpr [ STAR SLASH RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . SLASH lexpr [ STAR SLASH RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . PERCENT lexpr [ STAR SLASH RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . ARROW IDENTIFIER [ STAR SLASH RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . DOT IDENTIFIER [ STAR SLASH RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr RSQUARE [ STAR SLASH RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr_option DOTDOT lexpr_option RSQUARE [ STAR SLASH RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . QUESTION lexpr COLON lexpr [ STAR SLASH RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
## Transitions:
-- On STAR shift to state 84
-- On SLASH shift to state 92
-- On RBRACE shift to state 196
-- On QUESTION shift to state 100
-- On PLUS shift to state 94
-- On PERCENT shift to state 96
-- On OR shift to state 102
-- On NE shift to state 104
-- On MINUS shift to state 98
-- On LT shift to state 105
-- On LSQUARE shift to state 78
-- On LE shift to state 106
-- On IMPLIES shift to state 112
-- On IFF shift to state 114
-- On GT shift to state 107
-- On GE shift to state 108
-- On EQ shift to state 109
-- On DOT shift to state 86
-- On ARROW shift to state 88
-- On AND shift to state 110
-- On relation shift to state 90
## Reductions:

State 196:
## Known stack suffix:
## PREDICATE IDENTIFIER LPAR parameters RPAR LBRACE lexpr RBRACE
## LR(1) items:
decl -> PREDICATE IDENTIFIER LPAR parameters RPAR LBRACE lexpr RBRACE . [ EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production decl -> PREDICATE IDENTIFIER LPAR parameters RPAR LBRACE lexpr RBRACE

State 197:
## Known stack suffix:
## ne_parameters
## LR(1) items:
parameters -> ne_parameters . [ RPAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production parameters -> ne_parameters

State 198:
## Known stack suffix:
## LOOP_ASSIGNS
## LR(1) items:
ne_loop_effects -> LOOP_ASSIGNS . locations [ VARIANT EOF ]
ne_loop_effects -> LOOP_ASSIGNS . NOTHING [ VARIANT EOF ]
## Transitions:
-- On VALID_RANGE shift to state 2
-- On VALID_INDEX shift to state 4
-- On VALID shift to state 6
-- On TRUE shift to state 8
-- On STAR shift to state 9
-- On SEPARATED shift to state 10
-- On RESULT shift to state 12
-- On PLUS shift to state 13
-- On OLD shift to state 14
-- On NULL shift to state 16
-- On NOTHING shift to state 199
-- On NOT shift to state 17
-- On MINUS shift to state 18
-- On LPAR shift to state 19
-- On IF shift to state 39
-- On IDENTIFIER shift to state 40
-- On FULLSEPARATED shift to state 42
-- On FRESH shift to state 44
-- On FORALL shift to state 46
-- On FALSE shift to state 65
-- On EXISTS shift to state 66
-- On CONSTANT shift to state 69
-- On BLOCK_LENGTH shift to state 70
-- On BASE_ADDR shift to state 72
-- On AT shift to state 74
-- On AMP shift to state 76
-- On locations shift to state 200
-- On location shift to state 190
-- On lexpr shift to state 193
## Reductions:

State 199:
## Known stack suffix:
## LOOP_ASSIGNS NOTHING
## LR(1) items:
ne_loop_effects -> LOOP_ASSIGNS NOTHING . [ VARIANT EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ne_loop_effects -> LOOP_ASSIGNS NOTHING

State 200:
## Known stack suffix:
## LOOP_ASSIGNS locations
## LR(1) items:
ne_loop_effects -> LOOP_ASSIGNS locations . [ VARIANT EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ne_loop_effects -> LOOP_ASSIGNS locations

State 201:
## Known stack suffix:
## LOGIC
## LR(1) items:
decl -> LOGIC . logic_type IDENTIFIER LPAR parameters RPAR [ EOF ]
decl -> LOGIC . logic_type IDENTIFIER LPAR parameters RPAR READS locations [ EOF ]
decl -> LOGIC . logic_type IDENTIFIER LPAR parameters RPAR LBRACE lexpr RBRACE [ EOF ]
## Transitions:
-- On VOID shift to state 20
-- On UNSIGNED shift to state 21
-- On TYPENAME shift to state 27
-- On SIGNED shift to state 28
-- On SHORT shift to state 34
-- On LONG shift to state 35
-- On INT shift to state 38
-- On IDENTIFIER shift to state 47
-- On FLOAT shift to state 51
-- On DOUBLE shift to state 52
-- On CHAR shift to state 53
-- On logic_type_not_id shift to state 57
-- On logic_type shift to state 202
## Reductions:

State 202:
## Known stack suffix:
## LOGIC logic_type
## LR(1) items:
decl -> LOGIC logic_type . IDENTIFIER LPAR parameters RPAR [ EOF ]
decl -> LOGIC logic_type . IDENTIFIER LPAR parameters RPAR READS locations [ EOF ]
decl -> LOGIC logic_type . IDENTIFIER LPAR parameters RPAR LBRACE lexpr RBRACE [ EOF ]
## Transitions:
-- On IDENTIFIER shift to state 203
## Reductions:

State 203:
## Known stack suffix:
## LOGIC logic_type IDENTIFIER
## LR(1) items:
decl -> LOGIC logic_type IDENTIFIER . LPAR parameters RPAR [ EOF ]
decl -> LOGIC logic_type IDENTIFIER . LPAR parameters RPAR READS locations [ EOF ]
decl -> LOGIC logic_type IDENTIFIER . LPAR parameters RPAR LBRACE lexpr RBRACE [ EOF ]
## Transitions:
-- On LPAR shift to state 204
## Reductions:

State 204:
## Known stack suffix:
## LOGIC logic_type IDENTIFIER LPAR
## LR(1) items:
decl -> LOGIC logic_type IDENTIFIER LPAR . parameters RPAR [ EOF ]
decl -> LOGIC logic_type IDENTIFIER LPAR . parameters RPAR READS locations [ EOF ]
decl -> LOGIC logic_type IDENTIFIER LPAR . parameters RPAR LBRACE lexpr RBRACE [ EOF ]
## Transitions:
-- On VOID shift to state 20
-- On UNSIGNED shift to state 21
-- On TYPENAME shift to state 27
-- On SIGNED shift to state 28
-- On SHORT shift to state 34
-- On LONG shift to state 35
-- On INT shift to state 38
-- On IDENTIFIER shift to state 47
-- On FLOAT shift to state 51
-- On DOUBLE shift to state 52
-- On CHAR shift to state 53
-- On parameters shift to state 205
-- On parameter shift to state 54
-- On ne_parameters shift to state 197
-- On logic_type_not_id shift to state 57
-- On logic_type shift to state 59
## Reductions:
-- On RPAR reduce production parameters ->

State 205:
## Known stack suffix:
## LOGIC logic_type IDENTIFIER LPAR parameters
## LR(1) items:
decl -> LOGIC logic_type IDENTIFIER LPAR parameters . RPAR [ EOF ]
decl -> LOGIC logic_type IDENTIFIER LPAR parameters . RPAR READS locations [ EOF ]
decl -> LOGIC logic_type IDENTIFIER LPAR parameters . RPAR LBRACE lexpr RBRACE [ EOF ]
## Transitions:
-- On RPAR shift to state 206
## Reductions:

State 206:
## Known stack suffix:
## LOGIC logic_type IDENTIFIER LPAR parameters RPAR
## LR(1) items:
decl -> LOGIC logic_type IDENTIFIER LPAR parameters RPAR . [ EOF ]
decl -> LOGIC logic_type IDENTIFIER LPAR parameters RPAR . READS locations [ EOF ]
decl -> LOGIC logic_type IDENTIFIER LPAR parameters RPAR . LBRACE lexpr RBRACE [ EOF ]
## Transitions:
-- On READS shift to state 207
-- On LBRACE shift to state 209
## Reductions:
-- On EOF reduce production decl -> LOGIC logic_type IDENTIFIER LPAR parameters RPAR

State 207:
## Known stack suffix:
## LOGIC logic_type IDENTIFIER LPAR parameters RPAR READS
## LR(1) items:
decl -> LOGIC logic_type IDENTIFIER LPAR parameters RPAR READS . locations [ EOF ]
## Transitions:
-- On VALID_RANGE shift to state 2
-- On VALID_INDEX shift to state 4
-- On VALID shift to state 6
-- On TRUE shift to state 8
-- On STAR shift to state 9
-- On SEPARATED shift to state 10
-- On RESULT shift to state 12
-- On PLUS shift to state 13
-- On OLD shift to state 14
-- On NULL shift to state 16
-- On NOT shift to state 17
-- On MINUS shift to state 18
-- On LPAR shift to state 19
-- On IF shift to state 39
-- On IDENTIFIER shift to state 40
-- On FULLSEPARATED shift to state 42
-- On FRESH shift to state 44
-- On FORALL shift to state 46
-- On FALSE shift to state 65
-- On EXISTS shift to state 66
-- On CONSTANT shift to state 69
-- On BLOCK_LENGTH shift to state 70
-- On BASE_ADDR shift to state 72
-- On AT shift to state 74
-- On AMP shift to state 76
-- On locations shift to state 208
-- On location shift to state 190
-- On lexpr shift to state 193
## Reductions:

State 208:
## Known stack suffix:
## LOGIC logic_type IDENTIFIER LPAR parameters RPAR READS locations
## LR(1) items:
decl -> LOGIC logic_type IDENTIFIER LPAR parameters RPAR READS locations . [ EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production decl -> LOGIC logic_type IDENTIFIER LPAR parameters RPAR READS locations

State 209:
## Known stack suffix:
## LOGIC logic_type IDENTIFIER LPAR parameters RPAR LBRACE
## LR(1) items:
decl -> LOGIC logic_type IDENTIFIER LPAR parameters RPAR LBRACE . lexpr RBRACE [ EOF ]
## Transitions:
-- On VALID_RANGE shift to state 2
-- On VALID_INDEX shift to state 4
-- On VALID shift to state 6
-- On TRUE shift to state 8
-- On STAR shift to state 9
-- On SEPARATED shift to state 10
-- On RESULT shift to state 12
-- On PLUS shift to state 13
-- On OLD shift to state 14
-- On NULL shift to state 16
-- On NOT shift to state 17
-- On MINUS shift to state 18
-- On LPAR shift to state 19
-- On IF shift to state 39
-- On IDENTIFIER shift to state 40
-- On FULLSEPARATED shift to state 42
-- On FRESH shift to state 44
-- On FORALL shift to state 46
-- On FALSE shift to state 65
-- On EXISTS shift to state 66
-- On CONSTANT shift to state 69
-- On BLOCK_LENGTH shift to state 70
-- On BASE_ADDR shift to state 72
-- On AT shift to state 74
-- On AMP shift to state 76
-- On lexpr shift to state 210
## Reductions:

State 210:
## Known stack suffix:
## LOGIC logic_type IDENTIFIER LPAR parameters RPAR LBRACE lexpr
## LR(1) items:
decl -> LOGIC logic_type IDENTIFIER LPAR parameters RPAR LBRACE lexpr . RBRACE [ EOF ]
lexpr -> lexpr . IMPLIES lexpr [ STAR SLASH RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . IFF lexpr [ STAR SLASH RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . OR lexpr [ STAR SLASH RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . AND lexpr [ STAR SLASH RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . relation lexpr [ STAR SLASH RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . PLUS lexpr [ STAR SLASH RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . MINUS lexpr [ STAR SLASH RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . STAR lexpr [ STAR SLASH RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . SLASH lexpr [ STAR SLASH RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . PERCENT lexpr [ STAR SLASH RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . ARROW IDENTIFIER [ STAR SLASH RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . DOT IDENTIFIER [ STAR SLASH RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr RSQUARE [ STAR SLASH RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr_option DOTDOT lexpr_option RSQUARE [ STAR SLASH RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . QUESTION lexpr COLON lexpr [ STAR SLASH RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
## Transitions:
-- On STAR shift to state 84
-- On SLASH shift to state 92
-- On RBRACE shift to state 211
-- On QUESTION shift to state 100
-- On PLUS shift to state 94
-- On PERCENT shift to state 96
-- On OR shift to state 102
-- On NE shift to state 104
-- On MINUS shift to state 98
-- On LT shift to state 105
-- On LSQUARE shift to state 78
-- On LE shift to state 106
-- On IMPLIES shift to state 112
-- On IFF shift to state 114
-- On GT shift to state 107
-- On GE shift to state 108
-- On EQ shift to state 109
-- On DOT shift to state 86
-- On ARROW shift to state 88
-- On AND shift to state 110
-- On relation shift to state 90
## Reductions:

State 211:
## Known stack suffix:
## LOGIC logic_type IDENTIFIER LPAR parameters RPAR LBRACE lexpr RBRACE
## LR(1) items:
decl -> LOGIC logic_type IDENTIFIER LPAR parameters RPAR LBRACE lexpr RBRACE . [ EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production decl -> LOGIC logic_type IDENTIFIER LPAR parameters RPAR LBRACE lexpr RBRACE

State 212:
## Known stack suffix:
## LABEL
## LR(1) items:
annotation -> LABEL . IDENTIFIER [ EOF ]
## Transitions:
-- On IDENTIFIER shift to state 213
## Reductions:

State 213:
## Known stack suffix:
## LABEL IDENTIFIER
## LR(1) items:
annotation -> LABEL IDENTIFIER . [ EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production annotation -> LABEL IDENTIFIER

State 214:
## Known stack suffix:
## INVARIANT
## LR(1) items:
decl -> INVARIANT . IDENTIFIER COLON lexpr [ EOF ]
invariant -> INVARIANT . lexpr [ VARIANT LOOP_ASSIGNS EOF ]
## Transitions:
-- On VALID_RANGE shift to state 2
-- On VALID_INDEX shift to state 4
-- On VALID shift to state 6
-- On TRUE shift to state 8
-- On STAR shift to state 9
-- On SEPARATED shift to state 10
-- On RESULT shift to state 12
-- On PLUS shift to state 13
-- On OLD shift to state 14
-- On NULL shift to state 16
-- On NOT shift to state 17
-- On MINUS shift to state 18
-- On LPAR shift to state 19
-- On IF shift to state 39
-- On IDENTIFIER shift to state 215
-- On FULLSEPARATED shift to state 42
-- On FRESH shift to state 44
-- On FORALL shift to state 46
-- On FALSE shift to state 65
-- On EXISTS shift to state 66
-- On CONSTANT shift to state 69
-- On BLOCK_LENGTH shift to state 70
-- On BASE_ADDR shift to state 72
-- On AT shift to state 74
-- On AMP shift to state 76
-- On lexpr shift to state 218
## Reductions:

State 215:
## Known stack suffix:
## INVARIANT IDENTIFIER
## LR(1) items:
decl -> INVARIANT IDENTIFIER . COLON lexpr [ EOF ]
lexpr -> IDENTIFIER . [ VARIANT STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE EQ EOF DOT ARROW AND ]
lexpr -> IDENTIFIER . LPAR lexpr_list RPAR [ VARIANT STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE EQ EOF DOT ARROW AND ]
lexpr -> IDENTIFIER . COLONCOLON lexpr [ VARIANT STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE EQ EOF DOT ARROW AND ]
## Transitions:
-- On LPAR shift to state 41
-- On COLONCOLON shift to state 142
-- On COLON shift to state 216
## Reductions:
-- On VARIANT reduce production lexpr -> IDENTIFIER
-- On STAR reduce production lexpr -> IDENTIFIER
-- On SLASH reduce production lexpr -> IDENTIFIER
-- On QUESTION reduce production lexpr -> IDENTIFIER
-- On PLUS reduce production lexpr -> IDENTIFIER
-- On PERCENT reduce production lexpr -> IDENTIFIER
-- On OR reduce production lexpr -> IDENTIFIER
-- On NE reduce production lexpr -> IDENTIFIER
-- On MINUS reduce production lexpr -> IDENTIFIER
-- On LT reduce production lexpr -> IDENTIFIER
-- On LSQUARE reduce production lexpr -> IDENTIFIER
-- On LOOP_ASSIGNS reduce production lexpr -> IDENTIFIER
-- On LE reduce production lexpr -> IDENTIFIER
-- On IMPLIES reduce production lexpr -> IDENTIFIER
-- On IFF reduce production lexpr -> IDENTIFIER
-- On GT reduce production lexpr -> IDENTIFIER
-- On GE reduce production lexpr -> IDENTIFIER
-- On EQ reduce production lexpr -> IDENTIFIER
-- On EOF reduce production lexpr -> IDENTIFIER
-- On DOT reduce production lexpr -> IDENTIFIER
-- On ARROW reduce production lexpr -> IDENTIFIER
-- On AND reduce production lexpr -> IDENTIFIER

State 216:
## Known stack suffix:
## INVARIANT IDENTIFIER COLON
## LR(1) items:
decl -> INVARIANT IDENTIFIER COLON . lexpr [ EOF ]
## Transitions:
-- On VALID_RANGE shift to state 2
-- On VALID_INDEX shift to state 4
-- On VALID shift to state 6
-- On TRUE shift to state 8
-- On STAR shift to state 9
-- On SEPARATED shift to state 10
-- On RESULT shift to state 12
-- On PLUS shift to state 13
-- On OLD shift to state 14
-- On NULL shift to state 16
-- On NOT shift to state 17
-- On MINUS shift to state 18
-- On LPAR shift to state 19
-- On IF shift to state 39
-- On IDENTIFIER shift to state 40
-- On FULLSEPARATED shift to state 42
-- On FRESH shift to state 44
-- On FORALL shift to state 46
-- On FALSE shift to state 65
-- On EXISTS shift to state 66
-- On CONSTANT shift to state 69
-- On BLOCK_LENGTH shift to state 70
-- On BASE_ADDR shift to state 72
-- On AT shift to state 74
-- On AMP shift to state 76
-- On lexpr shift to state 217
## Reductions:

State 217:
## Known stack suffix:
## INVARIANT IDENTIFIER COLON lexpr
## LR(1) items:
decl -> INVARIANT IDENTIFIER COLON lexpr . [ EOF ]
lexpr -> lexpr . IMPLIES lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF DOT ARROW AND ]
lexpr -> lexpr . IFF lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF DOT ARROW AND ]
lexpr -> lexpr . OR lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF DOT ARROW AND ]
lexpr -> lexpr . AND lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF DOT ARROW AND ]
lexpr -> lexpr . relation lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF DOT ARROW AND ]
lexpr -> lexpr . PLUS lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF DOT ARROW AND ]
lexpr -> lexpr . MINUS lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF DOT ARROW AND ]
lexpr -> lexpr . STAR lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF DOT ARROW AND ]
lexpr -> lexpr . SLASH lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF DOT ARROW AND ]
lexpr -> lexpr . PERCENT lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF DOT ARROW AND ]
lexpr -> lexpr . ARROW IDENTIFIER [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF DOT ARROW AND ]
lexpr -> lexpr . DOT IDENTIFIER [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF DOT ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr RSQUARE [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF DOT ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr_option DOTDOT lexpr_option RSQUARE [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF DOT ARROW AND ]
lexpr -> lexpr . QUESTION lexpr COLON lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF DOT ARROW AND ]
## Transitions:
-- On STAR shift to state 84
-- On SLASH shift to state 92
-- On QUESTION shift to state 100
-- On PLUS shift to state 94
-- On PERCENT shift to state 96
-- On OR shift to state 102
-- On NE shift to state 104
-- On MINUS shift to state 98
-- On LT shift to state 105
-- On LSQUARE shift to state 78
-- On LE shift to state 106
-- On IMPLIES shift to state 112
-- On IFF shift to state 114
-- On GT shift to state 107
-- On GE shift to state 108
-- On EQ shift to state 109
-- On DOT shift to state 86
-- On ARROW shift to state 88
-- On AND shift to state 110
-- On relation shift to state 90
## Reductions:
-- On EOF reduce production decl -> INVARIANT IDENTIFIER COLON lexpr

State 218:
## Known stack suffix:
## INVARIANT lexpr
## LR(1) items:
invariant -> INVARIANT lexpr . [ VARIANT LOOP_ASSIGNS EOF ]
lexpr -> lexpr . IMPLIES lexpr [ VARIANT STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE EQ EOF DOT ARROW AND ]
lexpr -> lexpr . IFF lexpr [ VARIANT STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE EQ EOF DOT ARROW AND ]
lexpr -> lexpr . OR lexpr [ VARIANT STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE EQ EOF DOT ARROW AND ]
lexpr -> lexpr . AND lexpr [ VARIANT STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE EQ EOF DOT ARROW AND ]
lexpr -> lexpr . relation lexpr [ VARIANT STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE EQ EOF DOT ARROW AND ]
lexpr -> lexpr . PLUS lexpr [ VARIANT STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE EQ EOF DOT ARROW AND ]
lexpr -> lexpr . MINUS lexpr [ VARIANT STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE EQ EOF DOT ARROW AND ]
lexpr -> lexpr . STAR lexpr [ VARIANT STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE EQ EOF DOT ARROW AND ]
lexpr -> lexpr . SLASH lexpr [ VARIANT STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE EQ EOF DOT ARROW AND ]
lexpr -> lexpr . PERCENT lexpr [ VARIANT STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE EQ EOF DOT ARROW AND ]
lexpr -> lexpr . ARROW IDENTIFIER [ VARIANT STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE EQ EOF DOT ARROW AND ]
lexpr -> lexpr . DOT IDENTIFIER [ VARIANT STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE EQ EOF DOT ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr RSQUARE [ VARIANT STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE EQ EOF DOT ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr_option DOTDOT lexpr_option RSQUARE [ VARIANT STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE EQ EOF DOT ARROW AND ]
lexpr -> lexpr . QUESTION lexpr COLON lexpr [ VARIANT STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LOOP_ASSIGNS LE IMPLIES IFF GT GE EQ EOF DOT ARROW AND ]
## Transitions:
-- On STAR shift to state 84
-- On SLASH shift to state 92
-- On QUESTION shift to state 100
-- On PLUS shift to state 94
-- On PERCENT shift to state 96
-- On OR shift to state 102
-- On NE shift to state 104
-- On MINUS shift to state 98
-- On LT shift to state 105
-- On LSQUARE shift to state 78
-- On LE shift to state 106
-- On IMPLIES shift to state 112
-- On IFF shift to state 114
-- On GT shift to state 107
-- On GE shift to state 108
-- On EQ shift to state 109
-- On DOT shift to state 86
-- On ARROW shift to state 88
-- On AND shift to state 110
-- On relation shift to state 90
## Reductions:
-- On VARIANT reduce production invariant -> INVARIANT lexpr
-- On LOOP_ASSIGNS reduce production invariant -> INVARIANT lexpr
-- On EOF reduce production invariant -> INVARIANT lexpr

State 219:
## Known stack suffix:
## GHOST
## LR(1) items:
ghost_decl -> GHOST . type_specifier init_declarator_list [ EOF ]
## Transitions:
-- On INT shift to state 220
-- On FLOAT shift to state 221
-- On DOUBLE shift to state 222
-- On CHAR shift to state 223
-- On type_specifier shift to state 224
## Reductions:

State 220:
## Known stack suffix:
## INT
## LR(1) items:
type_specifier -> INT . [ IDENTIFIER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_specifier -> INT

State 221:
## Known stack suffix:
## FLOAT
## LR(1) items:
type_specifier -> FLOAT . [ IDENTIFIER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_specifier -> FLOAT

State 222:
## Known stack suffix:
## DOUBLE
## LR(1) items:
type_specifier -> DOUBLE . [ IDENTIFIER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_specifier -> DOUBLE

State 223:
## Known stack suffix:
## CHAR
## LR(1) items:
type_specifier -> CHAR . [ IDENTIFIER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_specifier -> CHAR

State 224:
## Known stack suffix:
## GHOST type_specifier
## LR(1) items:
ghost_decl -> GHOST type_specifier . init_declarator_list [ EOF ]
## Transitions:
-- On IDENTIFIER shift to state 225
-- On init_declarator_list shift to state 226
-- On init_declarator shift to state 245
-- On direct_declarator shift to state 229
-- On declarator shift to state 234
## Reductions:

State 225:
## Known stack suffix:
## IDENTIFIER
## LR(1) items:
direct_declarator -> IDENTIFIER . [ LSQUARE EQUAL EOF COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production direct_declarator -> IDENTIFIER

State 226:
## Known stack suffix:
## GHOST type_specifier init_declarator_list
## LR(1) items:
ghost_decl -> GHOST type_specifier init_declarator_list . [ EOF ]
init_declarator_list -> init_declarator_list . COMMA init_declarator [ EOF COMMA ]
## Transitions:
-- On COMMA shift to state 227
## Reductions:
-- On EOF reduce production ghost_decl -> GHOST type_specifier init_declarator_list

State 227:
## Known stack suffix:
## init_declarator_list COMMA
## LR(1) items:
init_declarator_list -> init_declarator_list COMMA . init_declarator [ EOF COMMA ]
## Transitions:
-- On IDENTIFIER shift to state 225
-- On init_declarator shift to state 228
-- On direct_declarator shift to state 229
-- On declarator shift to state 234
## Reductions:

State 228:
## Known stack suffix:
## init_declarator_list COMMA init_declarator
## LR(1) items:
init_declarator_list -> init_declarator_list COMMA init_declarator . [ EOF COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production init_declarator_list -> init_declarator_list COMMA init_declarator

State 229:
## Known stack suffix:
## direct_declarator
## LR(1) items:
declarator -> direct_declarator . [ EQUAL EOF COMMA ]
direct_declarator -> direct_declarator . LSQUARE lexpr RSQUARE [ LSQUARE EQUAL EOF COMMA ]
direct_declarator -> direct_declarator . LSQUARE RSQUARE [ LSQUARE EQUAL EOF COMMA ]
## Transitions:
-- On LSQUARE shift to state 230
## Reductions:
-- On EQUAL reduce production declarator -> direct_declarator
-- On EOF reduce production declarator -> direct_declarator
-- On COMMA reduce production declarator -> direct_declarator

State 230:
## Known stack suffix:
## direct_declarator LSQUARE
## LR(1) items:
direct_declarator -> direct_declarator LSQUARE . lexpr RSQUARE [ LSQUARE EQUAL EOF COMMA ]
direct_declarator -> direct_declarator LSQUARE . RSQUARE [ LSQUARE EQUAL EOF COMMA ]
## Transitions:
-- On VALID_RANGE shift to state 2
-- On VALID_INDEX shift to state 4
-- On VALID shift to state 6
-- On TRUE shift to state 8
-- On STAR shift to state 9
-- On SEPARATED shift to state 10
-- On RSQUARE shift to state 231
-- On RESULT shift to state 12
-- On PLUS shift to state 13
-- On OLD shift to state 14
-- On NULL shift to state 16
-- On NOT shift to state 17
-- On MINUS shift to state 18
-- On LPAR shift to state 19
-- On IF shift to state 39
-- On IDENTIFIER shift to state 40
-- On FULLSEPARATED shift to state 42
-- On FRESH shift to state 44
-- On FORALL shift to state 46
-- On FALSE shift to state 65
-- On EXISTS shift to state 66
-- On CONSTANT shift to state 69
-- On BLOCK_LENGTH shift to state 70
-- On BASE_ADDR shift to state 72
-- On AT shift to state 74
-- On AMP shift to state 76
-- On lexpr shift to state 232
## Reductions:

State 231:
## Known stack suffix:
## direct_declarator LSQUARE RSQUARE
## LR(1) items:
direct_declarator -> direct_declarator LSQUARE RSQUARE . [ LSQUARE EQUAL EOF COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production direct_declarator -> direct_declarator LSQUARE RSQUARE

State 232:
## Known stack suffix:
## direct_declarator LSQUARE lexpr
## LR(1) items:
direct_declarator -> direct_declarator LSQUARE lexpr . RSQUARE [ LSQUARE EQUAL EOF COMMA ]
lexpr -> lexpr . IMPLIES lexpr [ STAR SLASH RSQUARE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . IFF lexpr [ STAR SLASH RSQUARE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . OR lexpr [ STAR SLASH RSQUARE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . AND lexpr [ STAR SLASH RSQUARE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . relation lexpr [ STAR SLASH RSQUARE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . PLUS lexpr [ STAR SLASH RSQUARE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . MINUS lexpr [ STAR SLASH RSQUARE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . STAR lexpr [ STAR SLASH RSQUARE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . SLASH lexpr [ STAR SLASH RSQUARE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . PERCENT lexpr [ STAR SLASH RSQUARE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . ARROW IDENTIFIER [ STAR SLASH RSQUARE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . DOT IDENTIFIER [ STAR SLASH RSQUARE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr RSQUARE [ STAR SLASH RSQUARE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr_option DOTDOT lexpr_option RSQUARE [ STAR SLASH RSQUARE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
lexpr -> lexpr . QUESTION lexpr COLON lexpr [ STAR SLASH RSQUARE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ DOT ARROW AND ]
## Transitions:
-- On STAR shift to state 84
-- On SLASH shift to state 92
-- On RSQUARE shift to state 233
-- On QUESTION shift to state 100
-- On PLUS shift to state 94
-- On PERCENT shift to state 96
-- On OR shift to state 102
-- On NE shift to state 104
-- On MINUS shift to state 98
-- On LT shift to state 105
-- On LSQUARE shift to state 78
-- On LE shift to state 106
-- On IMPLIES shift to state 112
-- On IFF shift to state 114
-- On GT shift to state 107
-- On GE shift to state 108
-- On EQ shift to state 109
-- On DOT shift to state 86
-- On ARROW shift to state 88
-- On AND shift to state 110
-- On relation shift to state 90
## Reductions:

State 233:
## Known stack suffix:
## direct_declarator LSQUARE lexpr RSQUARE
## LR(1) items:
direct_declarator -> direct_declarator LSQUARE lexpr RSQUARE . [ LSQUARE EQUAL EOF COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production direct_declarator -> direct_declarator LSQUARE lexpr RSQUARE

State 234:
## Known stack suffix:
## declarator
## LR(1) items:
init_declarator -> declarator . [ EOF COMMA ]
init_declarator -> declarator . EQUAL c_initializer [ EOF COMMA ]
## Transitions:
-- On EQUAL shift to state 235
## Reductions:
-- On EOF reduce production init_declarator -> declarator
-- On COMMA reduce production init_declarator -> declarator

State 235:
## Known stack suffix:
## declarator EQUAL
## LR(1) items:
init_declarator -> declarator EQUAL . c_initializer [ EOF COMMA ]
## Transitions:
-- On VALID_RANGE shift to state 2
-- On VALID_INDEX shift to state 4
-- On VALID shift to state 6
-- On TRUE shift to state 8
-- On STAR shift to state 9
-- On SEPARATED shift to state 10
-- On RESULT shift to state 12
-- On PLUS shift to state 13
-- On OLD shift to state 14
-- On NULL shift to state 16
-- On NOT shift to state 17
-- On MINUS shift to state 18
-- On LPAR shift to state 19
-- On LBRACE shift to state 236
-- On IF shift to state 39
-- On IDENTIFIER shift to state 40
-- On FULLSEPARATED shift to state 42
-- On FRESH shift to state 44
-- On FORALL shift to state 46
-- On FALSE shift to state 65
-- On EXISTS shift to state 66
-- On CONSTANT shift to state 69
-- On BLOCK_LENGTH shift to state 70
-- On BASE_ADDR shift to state 72
-- On AT shift to state 74
-- On AMP shift to state 76
-- On lexpr shift to state 237
-- On c_initializer shift to state 244
## Reductions:

State 236:
## Known stack suffix:
## LBRACE
## LR(1) items:
c_initializer -> LBRACE . c_initializer_list RBRACE [ RBRACE EOF COMMA ]
c_initializer -> LBRACE . c_initializer_list COMMA RBRACE [ RBRACE EOF COMMA ]
## Transitions:
-- On VALID_RANGE shift to state 2
-- On VALID_INDEX shift to state 4
-- On VALID shift to state 6
-- On TRUE shift to state 8
-- On STAR shift to state 9
-- On SEPARATED shift to state 10
-- On RESULT shift to state 12
-- On PLUS shift to state 13
-- On OLD shift to state 14
-- On NULL shift to state 16
-- On NOT shift to state 17
-- On MINUS shift to state 18
-- On LPAR shift to state 19
-- On LBRACE shift to state 236
-- On IF shift to state 39
-- On IDENTIFIER shift to state 40
-- On FULLSEPARATED shift to state 42
-- On FRESH shift to state 44
-- On FORALL shift to state 46
-- On FALSE shift to state 65
-- On EXISTS shift to state 66
-- On CONSTANT shift to state 69
-- On BLOCK_LENGTH shift to state 70
-- On BASE_ADDR shift to state 72
-- On AT shift to state 74
-- On AMP shift to state 76
-- On lexpr shift to state 237
-- On c_initializer_list shift to state 238
-- On c_initializer shift to state 243
## Reductions:

State 237:
## Known stack suffix:
## lexpr
## LR(1) items:
c_initializer -> lexpr . [ RBRACE EOF COMMA ]
lexpr -> lexpr . IMPLIES lexpr [ STAR SLASH RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF DOT COMMA ARROW AND ]
lexpr -> lexpr . IFF lexpr [ STAR SLASH RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF DOT COMMA ARROW AND ]
lexpr -> lexpr . OR lexpr [ STAR SLASH RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF DOT COMMA ARROW AND ]
lexpr -> lexpr . AND lexpr [ STAR SLASH RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF DOT COMMA ARROW AND ]
lexpr -> lexpr . relation lexpr [ STAR SLASH RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF DOT COMMA ARROW AND ]
lexpr -> lexpr . PLUS lexpr [ STAR SLASH RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF DOT COMMA ARROW AND ]
lexpr -> lexpr . MINUS lexpr [ STAR SLASH RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF DOT COMMA ARROW AND ]
lexpr -> lexpr . STAR lexpr [ STAR SLASH RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF DOT COMMA ARROW AND ]
lexpr -> lexpr . SLASH lexpr [ STAR SLASH RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF DOT COMMA ARROW AND ]
lexpr -> lexpr . PERCENT lexpr [ STAR SLASH RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF DOT COMMA ARROW AND ]
lexpr -> lexpr . ARROW IDENTIFIER [ STAR SLASH RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF DOT COMMA ARROW AND ]
lexpr -> lexpr . DOT IDENTIFIER [ STAR SLASH RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF DOT COMMA ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr RSQUARE [ STAR SLASH RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF DOT COMMA ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr_option DOTDOT lexpr_option RSQUARE [ STAR SLASH RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF DOT COMMA ARROW AND ]
lexpr -> lexpr . QUESTION lexpr COLON lexpr [ STAR SLASH RBRACE QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF DOT COMMA ARROW AND ]
## Transitions:
-- On STAR shift to state 84
-- On SLASH shift to state 92
-- On QUESTION shift to state 100
-- On PLUS shift to state 94
-- On PERCENT shift to state 96
-- On OR shift to state 102
-- On NE shift to state 104
-- On MINUS shift to state 98
-- On LT shift to state 105
-- On LSQUARE shift to state 78
-- On LE shift to state 106
-- On IMPLIES shift to state 112
-- On IFF shift to state 114
-- On GT shift to state 107
-- On GE shift to state 108
-- On EQ shift to state 109
-- On DOT shift to state 86
-- On ARROW shift to state 88
-- On AND shift to state 110
-- On relation shift to state 90
## Reductions:
-- On RBRACE reduce production c_initializer -> lexpr
-- On EOF reduce production c_initializer -> lexpr
-- On COMMA reduce production c_initializer -> lexpr

State 238:
## Known stack suffix:
## LBRACE c_initializer_list
## LR(1) items:
c_initializer -> LBRACE c_initializer_list . RBRACE [ RBRACE EOF COMMA ]
c_initializer -> LBRACE c_initializer_list . COMMA RBRACE [ RBRACE EOF COMMA ]
c_initializer_list -> c_initializer_list . COMMA c_initializer [ RBRACE COMMA ]
## Transitions:
-- On RBRACE shift to state 239
-- On COMMA shift to state 240
## Reductions:

State 239:
## Known stack suffix:
## LBRACE c_initializer_list RBRACE
## LR(1) items:
c_initializer -> LBRACE c_initializer_list RBRACE . [ RBRACE EOF COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production c_initializer -> LBRACE c_initializer_list RBRACE

State 240:
## Known stack suffix:
## LBRACE c_initializer_list COMMA
## LR(1) items:
c_initializer -> LBRACE c_initializer_list COMMA . RBRACE [ RBRACE EOF COMMA ]
c_initializer_list -> c_initializer_list COMMA . c_initializer [ RBRACE COMMA ]
## Transitions:
-- On VALID_RANGE shift to state 2
-- On VALID_INDEX shift to state 4
-- On VALID shift to state 6
-- On TRUE shift to state 8
-- On STAR shift to state 9
-- On SEPARATED shift to state 10
-- On RESULT shift to state 12
-- On RBRACE shift to state 241
-- On PLUS shift to state 13
-- On OLD shift to state 14
-- On NULL shift to state 16
-- On NOT shift to state 17
-- On MINUS shift to state 18
-- On LPAR shift to state 19
-- On LBRACE shift to state 236
-- On IF shift to state 39
-- On IDENTIFIER shift to state 40
-- On FULLSEPARATED shift to state 42
-- On FRESH shift to state 44
-- On FORALL shift to state 46
-- On FALSE shift to state 65
-- On EXISTS shift to state 66
-- On CONSTANT shift to state 69
-- On BLOCK_LENGTH shift to state 70
-- On BASE_ADDR shift to state 72
-- On AT shift to state 74
-- On AMP shift to state 76
-- On lexpr shift to state 237
-- On c_initializer shift to state 242
## Reductions:

State 241:
## Known stack suffix:
## LBRACE c_initializer_list COMMA RBRACE
## LR(1) items:
c_initializer -> LBRACE c_initializer_list COMMA RBRACE . [ RBRACE EOF COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production c_initializer -> LBRACE c_initializer_list COMMA RBRACE

State 242:
## Known stack suffix:
## c_initializer_list COMMA c_initializer
## LR(1) items:
c_initializer_list -> c_initializer_list COMMA c_initializer . [ RBRACE COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production c_initializer_list -> c_initializer_list COMMA c_initializer

State 243:
## Known stack suffix:
## c_initializer
## LR(1) items:
c_initializer_list -> c_initializer . [ RBRACE COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production c_initializer_list -> c_initializer

State 244:
## Known stack suffix:
## declarator EQUAL c_initializer
## LR(1) items:
init_declarator -> declarator EQUAL c_initializer . [ EOF COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production init_declarator -> declarator EQUAL c_initializer

State 245:
## Known stack suffix:
## init_declarator
## LR(1) items:
init_declarator_list -> init_declarator . [ EOF COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production init_declarator_list -> init_declarator

State 246:
## Known stack suffix:
## AXIOM
## LR(1) items:
decl -> AXIOM . IDENTIFIER COLON lexpr [ EOF ]
## Transitions:
-- On IDENTIFIER shift to state 247
## Reductions:

State 247:
## Known stack suffix:
## AXIOM IDENTIFIER
## LR(1) items:
decl -> AXIOM IDENTIFIER . COLON lexpr [ EOF ]
## Transitions:
-- On COLON shift to state 248
## Reductions:

State 248:
## Known stack suffix:
## AXIOM IDENTIFIER COLON
## LR(1) items:
decl -> AXIOM IDENTIFIER COLON . lexpr [ EOF ]
## Transitions:
-- On VALID_RANGE shift to state 2
-- On VALID_INDEX shift to state 4
-- On VALID shift to state 6
-- On TRUE shift to state 8
-- On STAR shift to state 9
-- On SEPARATED shift to state 10
-- On RESULT shift to state 12
-- On PLUS shift to state 13
-- On OLD shift to state 14
-- On NULL shift to state 16
-- On NOT shift to state 17
-- On MINUS shift to state 18
-- On LPAR shift to state 19
-- On IF shift to state 39
-- On IDENTIFIER shift to state 40
-- On FULLSEPARATED shift to state 42
-- On FRESH shift to state 44
-- On FORALL shift to state 46
-- On FALSE shift to state 65
-- On EXISTS shift to state 66
-- On CONSTANT shift to state 69
-- On BLOCK_LENGTH shift to state 70
-- On BASE_ADDR shift to state 72
-- On AT shift to state 74
-- On AMP shift to state 76
-- On lexpr shift to state 249
## Reductions:

State 249:
## Known stack suffix:
## AXIOM IDENTIFIER COLON lexpr
## LR(1) items:
decl -> AXIOM IDENTIFIER COLON lexpr . [ EOF ]
lexpr -> lexpr . IMPLIES lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF DOT ARROW AND ]
lexpr -> lexpr . IFF lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF DOT ARROW AND ]
lexpr -> lexpr . OR lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF DOT ARROW AND ]
lexpr -> lexpr . AND lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF DOT ARROW AND ]
lexpr -> lexpr . relation lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF DOT ARROW AND ]
lexpr -> lexpr . PLUS lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF DOT ARROW AND ]
lexpr -> lexpr . MINUS lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF DOT ARROW AND ]
lexpr -> lexpr . STAR lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF DOT ARROW AND ]
lexpr -> lexpr . SLASH lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF DOT ARROW AND ]
lexpr -> lexpr . PERCENT lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF DOT ARROW AND ]
lexpr -> lexpr . ARROW IDENTIFIER [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF DOT ARROW AND ]
lexpr -> lexpr . DOT IDENTIFIER [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF DOT ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr RSQUARE [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF DOT ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr_option DOTDOT lexpr_option RSQUARE [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF DOT ARROW AND ]
lexpr -> lexpr . QUESTION lexpr COLON lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF DOT ARROW AND ]
## Transitions:
-- On STAR shift to state 84
-- On SLASH shift to state 92
-- On QUESTION shift to state 100
-- On PLUS shift to state 94
-- On PERCENT shift to state 96
-- On OR shift to state 102
-- On NE shift to state 104
-- On MINUS shift to state 98
-- On LT shift to state 105
-- On LSQUARE shift to state 78
-- On LE shift to state 106
-- On IMPLIES shift to state 112
-- On IFF shift to state 114
-- On GT shift to state 107
-- On GE shift to state 108
-- On EQ shift to state 109
-- On DOT shift to state 86
-- On ARROW shift to state 88
-- On AND shift to state 110
-- On relation shift to state 90
## Reductions:
-- On EOF reduce production decl -> AXIOM IDENTIFIER COLON lexpr

State 250:
## Known stack suffix:
## ASSERT
## LR(1) items:
annotation -> ASSERT . lexpr [ EOF ]
## Transitions:
-- On VALID_RANGE shift to state 2
-- On VALID_INDEX shift to state 4
-- On VALID shift to state 6
-- On TRUE shift to state 8
-- On STAR shift to state 9
-- On SEPARATED shift to state 10
-- On RESULT shift to state 12
-- On PLUS shift to state 13
-- On OLD shift to state 14
-- On NULL shift to state 16
-- On NOT shift to state 17
-- On MINUS shift to state 18
-- On LPAR shift to state 19
-- On IF shift to state 39
-- On IDENTIFIER shift to state 40
-- On FULLSEPARATED shift to state 42
-- On FRESH shift to state 44
-- On FORALL shift to state 46
-- On FALSE shift to state 65
-- On EXISTS shift to state 66
-- On CONSTANT shift to state 69
-- On BLOCK_LENGTH shift to state 70
-- On BASE_ADDR shift to state 72
-- On AT shift to state 74
-- On AMP shift to state 76
-- On lexpr shift to state 251
## Reductions:

State 251:
## Known stack suffix:
## ASSERT lexpr
## LR(1) items:
annotation -> ASSERT lexpr . [ EOF ]
lexpr -> lexpr . IMPLIES lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF DOT ARROW AND ]
lexpr -> lexpr . IFF lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF DOT ARROW AND ]
lexpr -> lexpr . OR lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF DOT ARROW AND ]
lexpr -> lexpr . AND lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF DOT ARROW AND ]
lexpr -> lexpr . relation lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF DOT ARROW AND ]
lexpr -> lexpr . PLUS lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF DOT ARROW AND ]
lexpr -> lexpr . MINUS lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF DOT ARROW AND ]
lexpr -> lexpr . STAR lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF DOT ARROW AND ]
lexpr -> lexpr . SLASH lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF DOT ARROW AND ]
lexpr -> lexpr . PERCENT lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF DOT ARROW AND ]
lexpr -> lexpr . ARROW IDENTIFIER [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF DOT ARROW AND ]
lexpr -> lexpr . DOT IDENTIFIER [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF DOT ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr RSQUARE [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF DOT ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr_option DOTDOT lexpr_option RSQUARE [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF DOT ARROW AND ]
lexpr -> lexpr . QUESTION lexpr COLON lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF DOT ARROW AND ]
## Transitions:
-- On STAR shift to state 84
-- On SLASH shift to state 92
-- On QUESTION shift to state 100
-- On PLUS shift to state 94
-- On PERCENT shift to state 96
-- On OR shift to state 102
-- On NE shift to state 104
-- On MINUS shift to state 98
-- On LT shift to state 105
-- On LSQUARE shift to state 78
-- On LE shift to state 106
-- On IMPLIES shift to state 112
-- On IFF shift to state 114
-- On GT shift to state 107
-- On GE shift to state 108
-- On EQ shift to state 109
-- On DOT shift to state 86
-- On ARROW shift to state 88
-- On AND shift to state 110
-- On relation shift to state 90
## Reductions:
-- On EOF reduce production annotation -> ASSERT lexpr

State 252:
## Known stack suffix:
## spec
## LR(1) items:
annotation -> spec . [ EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production annotation -> spec

State 253:
## Known stack suffix:
## pre_condition
## LR(1) items:
spec -> pre_condition . effects post_condition decreases [ EOF ]
## Transitions:
-- On ASSIGNS shift to state 254
-- On effects shift to state 257
## Reductions:
-- On EOF reduce production effects ->
-- On ENSURES reduce production effects ->
-- On DECREASES reduce production effects ->

State 254:
## Known stack suffix:
## ASSIGNS
## LR(1) items:
effects -> ASSIGNS . locations [ EOF ENSURES DECREASES ]
effects -> ASSIGNS . NOTHING [ EOF ENSURES DECREASES ]
## Transitions:
-- On VALID_RANGE shift to state 2
-- On VALID_INDEX shift to state 4
-- On VALID shift to state 6
-- On TRUE shift to state 8
-- On STAR shift to state 9
-- On SEPARATED shift to state 10
-- On RESULT shift to state 12
-- On PLUS shift to state 13
-- On OLD shift to state 14
-- On NULL shift to state 16
-- On NOTHING shift to state 255
-- On NOT shift to state 17
-- On MINUS shift to state 18
-- On LPAR shift to state 19
-- On IF shift to state 39
-- On IDENTIFIER shift to state 40
-- On FULLSEPARATED shift to state 42
-- On FRESH shift to state 44
-- On FORALL shift to state 46
-- On FALSE shift to state 65
-- On EXISTS shift to state 66
-- On CONSTANT shift to state 69
-- On BLOCK_LENGTH shift to state 70
-- On BASE_ADDR shift to state 72
-- On AT shift to state 74
-- On AMP shift to state 76
-- On locations shift to state 256
-- On location shift to state 190
-- On lexpr shift to state 193
## Reductions:

State 255:
## Known stack suffix:
## ASSIGNS NOTHING
## LR(1) items:
effects -> ASSIGNS NOTHING . [ EOF ENSURES DECREASES ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production effects -> ASSIGNS NOTHING

State 256:
## Known stack suffix:
## ASSIGNS locations
## LR(1) items:
effects -> ASSIGNS locations . [ EOF ENSURES DECREASES ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production effects -> ASSIGNS locations

State 257:
## Known stack suffix:
## pre_condition effects
## LR(1) items:
spec -> pre_condition effects . post_condition decreases [ EOF ]
## Transitions:
-- On ENSURES shift to state 258
-- On post_condition shift to state 260
## Reductions:
-- On EOF reduce production post_condition ->
-- On DECREASES reduce production post_condition ->

State 258:
## Known stack suffix:
## ENSURES
## LR(1) items:
post_condition -> ENSURES . lexpr [ EOF DECREASES ]
## Transitions:
-- On VALID_RANGE shift to state 2
-- On VALID_INDEX shift to state 4
-- On VALID shift to state 6
-- On TRUE shift to state 8
-- On STAR shift to state 9
-- On SEPARATED shift to state 10
-- On RESULT shift to state 12
-- On PLUS shift to state 13
-- On OLD shift to state 14
-- On NULL shift to state 16
-- On NOT shift to state 17
-- On MINUS shift to state 18
-- On LPAR shift to state 19
-- On IF shift to state 39
-- On IDENTIFIER shift to state 40
-- On FULLSEPARATED shift to state 42
-- On FRESH shift to state 44
-- On FORALL shift to state 46
-- On FALSE shift to state 65
-- On EXISTS shift to state 66
-- On CONSTANT shift to state 69
-- On BLOCK_LENGTH shift to state 70
-- On BASE_ADDR shift to state 72
-- On AT shift to state 74
-- On AMP shift to state 76
-- On lexpr shift to state 259
## Reductions:

State 259:
## Known stack suffix:
## ENSURES lexpr
## LR(1) items:
lexpr -> lexpr . IMPLIES lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF DOT DECREASES ARROW AND ]
lexpr -> lexpr . IFF lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF DOT DECREASES ARROW AND ]
lexpr -> lexpr . OR lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF DOT DECREASES ARROW AND ]
lexpr -> lexpr . AND lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF DOT DECREASES ARROW AND ]
lexpr -> lexpr . relation lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF DOT DECREASES ARROW AND ]
lexpr -> lexpr . PLUS lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF DOT DECREASES ARROW AND ]
lexpr -> lexpr . MINUS lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF DOT DECREASES ARROW AND ]
lexpr -> lexpr . STAR lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF DOT DECREASES ARROW AND ]
lexpr -> lexpr . SLASH lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF DOT DECREASES ARROW AND ]
lexpr -> lexpr . PERCENT lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF DOT DECREASES ARROW AND ]
lexpr -> lexpr . ARROW IDENTIFIER [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF DOT DECREASES ARROW AND ]
lexpr -> lexpr . DOT IDENTIFIER [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF DOT DECREASES ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr RSQUARE [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF DOT DECREASES ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr_option DOTDOT lexpr_option RSQUARE [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF DOT DECREASES ARROW AND ]
lexpr -> lexpr . QUESTION lexpr COLON lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE EQ EOF DOT DECREASES ARROW AND ]
post_condition -> ENSURES lexpr . [ EOF DECREASES ]
## Transitions:
-- On STAR shift to state 84
-- On SLASH shift to state 92
-- On QUESTION shift to state 100
-- On PLUS shift to state 94
-- On PERCENT shift to state 96
-- On OR shift to state 102
-- On NE shift to state 104
-- On MINUS shift to state 98
-- On LT shift to state 105
-- On LSQUARE shift to state 78
-- On LE shift to state 106
-- On IMPLIES shift to state 112
-- On IFF shift to state 114
-- On GT shift to state 107
-- On GE shift to state 108
-- On EQ shift to state 109
-- On DOT shift to state 86
-- On ARROW shift to state 88
-- On AND shift to state 110
-- On relation shift to state 90
## Reductions:
-- On EOF reduce production post_condition -> ENSURES lexpr
-- On DECREASES reduce production post_condition -> ENSURES lexpr

State 260:
## Known stack suffix:
## pre_condition effects post_condition
## LR(1) items:
spec -> pre_condition effects post_condition . decreases [ EOF ]
## Transitions:
-- On DECREASES shift to state 261
-- On decreases shift to state 267
## Reductions:
-- On EOF reduce production decreases ->

State 261:
## Known stack suffix:
## DECREASES
## LR(1) items:
decreases -> DECREASES . variant [ EOF ]
## Transitions:
-- On VARIANT shift to state 262
-- On variant shift to state 266
## Reductions:

State 262:
## Known stack suffix:
## VARIANT
## LR(1) items:
variant -> VARIANT . lexpr FOR IDENTIFIER [ EOF ]
variant -> VARIANT . lexpr [ EOF ]
## Transitions:
-- On VALID_RANGE shift to state 2
-- On VALID_INDEX shift to state 4
-- On VALID shift to state 6
-- On TRUE shift to state 8
-- On STAR shift to state 9
-- On SEPARATED shift to state 10
-- On RESULT shift to state 12
-- On PLUS shift to state 13
-- On OLD shift to state 14
-- On NULL shift to state 16
-- On NOT shift to state 17
-- On MINUS shift to state 18
-- On LPAR shift to state 19
-- On IF shift to state 39
-- On IDENTIFIER shift to state 40
-- On FULLSEPARATED shift to state 42
-- On FRESH shift to state 44
-- On FORALL shift to state 46
-- On FALSE shift to state 65
-- On EXISTS shift to state 66
-- On CONSTANT shift to state 69
-- On BLOCK_LENGTH shift to state 70
-- On BASE_ADDR shift to state 72
-- On AT shift to state 74
-- On AMP shift to state 76
-- On lexpr shift to state 263
## Reductions:

State 263:
## Known stack suffix:
## VARIANT lexpr
## LR(1) items:
lexpr -> lexpr . IMPLIES lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE FOR EQ EOF DOT ARROW AND ]
lexpr -> lexpr . IFF lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE FOR EQ EOF DOT ARROW AND ]
lexpr -> lexpr . OR lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE FOR EQ EOF DOT ARROW AND ]
lexpr -> lexpr . AND lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE FOR EQ EOF DOT ARROW AND ]
lexpr -> lexpr . relation lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE FOR EQ EOF DOT ARROW AND ]
lexpr -> lexpr . PLUS lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE FOR EQ EOF DOT ARROW AND ]
lexpr -> lexpr . MINUS lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE FOR EQ EOF DOT ARROW AND ]
lexpr -> lexpr . STAR lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE FOR EQ EOF DOT ARROW AND ]
lexpr -> lexpr . SLASH lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE FOR EQ EOF DOT ARROW AND ]
lexpr -> lexpr . PERCENT lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE FOR EQ EOF DOT ARROW AND ]
lexpr -> lexpr . ARROW IDENTIFIER [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE FOR EQ EOF DOT ARROW AND ]
lexpr -> lexpr . DOT IDENTIFIER [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE FOR EQ EOF DOT ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr RSQUARE [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE FOR EQ EOF DOT ARROW AND ]
lexpr -> lexpr . LSQUARE lexpr_option DOTDOT lexpr_option RSQUARE [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE FOR EQ EOF DOT ARROW AND ]
lexpr -> lexpr . QUESTION lexpr COLON lexpr [ STAR SLASH QUESTION PLUS PERCENT OR NE MINUS LT LSQUARE LE IMPLIES IFF GT GE FOR EQ EOF DOT ARROW AND ]
variant -> VARIANT lexpr . FOR IDENTIFIER [ EOF ]
variant -> VARIANT lexpr . [ EOF ]
## Transitions:
-- On STAR shift to state 84
-- On SLASH shift to state 92
-- On QUESTION shift to state 100
-- On PLUS shift to state 94
-- On PERCENT shift to state 96
-- On OR shift to state 102
-- On NE shift to state 104
-- On MINUS shift to state 98
-- On LT shift to state 105
-- On LSQUARE shift to state 78
-- On LE shift to state 106
-- On IMPLIES shift to state 112
-- On IFF shift to state 114
-- On GT shift to state 107
-- On GE shift to state 108
-- On FOR shift to state 264
-- On EQ shift to state 109
-- On DOT shift to state 86
-- On ARROW shift to state 88
-- On AND shift to state 110
-- On relation shift to state 90
## Reductions:
-- On EOF reduce production variant -> VARIANT lexpr

State 264:
## Known stack suffix:
## VARIANT lexpr FOR
## LR(1) items:
variant -> VARIANT lexpr FOR . IDENTIFIER [ EOF ]
## Transitions:
-- On IDENTIFIER shift to state 265
## Reductions:

State 265:
## Known stack suffix:
## VARIANT lexpr FOR IDENTIFIER
## LR(1) items:
variant -> VARIANT lexpr FOR IDENTIFIER . [ EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production variant -> VARIANT lexpr FOR IDENTIFIER

State 266:
## Known stack suffix:
## DECREASES variant
## LR(1) items:
decreases -> DECREASES variant . [ EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production decreases -> DECREASES variant

State 267:
## Known stack suffix:
## pre_condition effects post_condition decreases
## LR(1) items:
spec -> pre_condition effects post_condition decreases . [ EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production spec -> pre_condition effects post_condition decreases

State 268:
## Known stack suffix:
## ne_loop_effects
## LR(1) items:
loop_annot -> ne_loop_effects . [ EOF ]
loop_effects -> ne_loop_effects . [ VARIANT ]
## Transitions:
## Reductions:
-- On VARIANT reduce production loop_effects -> ne_loop_effects
-- On EOF reduce production loop_annot -> ne_loop_effects

State 269:
## Known stack suffix:
## loop_effects
## LR(1) items:
loop_annot -> loop_effects . variant [ EOF ]
## Transitions:
-- On VARIANT shift to state 262
-- On variant shift to state 270
## Reductions:

State 270:
## Known stack suffix:
## loop_effects variant
## LR(1) items:
loop_annot -> loop_effects variant . [ EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production loop_annot -> loop_effects variant

State 271:
## Known stack suffix:
## loop_annot
## LR(1) items:
annotation -> loop_annot . [ EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production annotation -> loop_annot

State 272:
## Known stack suffix:
## invariant
## LR(1) items:
loop_annot -> invariant . loop_effects variant [ EOF ]
loop_annot -> invariant . loop_effects [ EOF ]
## Transitions:
-- On LOOP_ASSIGNS shift to state 198
-- On ne_loop_effects shift to state 273
-- On loop_effects shift to state 274
## Reductions:
-- On VARIANT reduce production loop_effects ->
-- On EOF reduce production loop_effects ->

State 273:
## Known stack suffix:
## ne_loop_effects
## LR(1) items:
loop_effects -> ne_loop_effects . [ VARIANT EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production loop_effects -> ne_loop_effects

State 274:
## Known stack suffix:
## invariant loop_effects
## LR(1) items:
loop_annot -> invariant loop_effects . variant [ EOF ]
loop_annot -> invariant loop_effects . [ EOF ]
## Transitions:
-- On VARIANT shift to state 262
-- On variant shift to state 275
## Reductions:
-- On EOF reduce production loop_annot -> invariant loop_effects

State 275:
## Known stack suffix:
## invariant loop_effects variant
## LR(1) items:
loop_annot -> invariant loop_effects variant . [ EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production loop_annot -> invariant loop_effects variant

State 276:
## Known stack suffix:
## ghost_decl
## LR(1) items:
annotation -> ghost_decl . [ EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production annotation -> ghost_decl

State 277:
## Known stack suffix:
## decl
## LR(1) items:
annotation -> decl . [ EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production annotation -> decl

State 278:
## Known stack suffix:
## annotation
## LR(1) items:
annot -> annotation . EOF [ # ]
## Transitions:
-- On EOF shift to state 279
## Reductions:

State 279:
## Known stack suffix:
## annotation EOF
## LR(1) items:
annot -> annotation EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production annot -> annotation EOF

State 280:
## Known stack suffix:
## annot
## LR(1) items:
annot' -> annot . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept annot

