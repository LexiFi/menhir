File "why-clparser.mly", line 65, characters 58-62:
Warning: the token ENUM is unused.
File "why-clparser.mly", line 54, characters 27-41:
Warning: the token STRING_LITERAL is unused.
File "why-clparser.mly", line 65, characters 51-57:
Warning: the token STRUCT is unused.
File "why-clparser.mly", line 65, characters 63-68:
Warning: the token UNION is unused.
%{
  open Ctypes
  open Cast
  open Clogic

  let loc () = (symbol_start (), symbol_end ())
  let loc_i i = (rhs_start i, rhs_end i)
  let info x = { Clogic.lexpr_node = x; lexpr_loc = loc () }

  type ghost_decl =
    | Dsimple
    | Darray of ghost_decl * lexpr option

  let rec expr_of_lexpr e =
    match e.lexpr_node with
      | PLconstant c ->
	  { Cast.node = Cast.CEconstant c ; Cast.loc = e.lexpr_loc }
      | _ -> Creport.error e.lexpr_loc "not a constant"

  let option_app f = function None -> None | Some x -> Some (f x)

  let rec ghost_type ty gd =
    match gd with
      | Dsimple -> ty
      | Darray(gd,size) ->
	    Cast_misc.noattr
	      (Cast.CTarray (ghost_type ty gd, option_app expr_of_lexpr size))

  let ghost ty (id,gd,cinit) =
    let gty = ghost_type ty gd in
    LDghost(gty,id,cinit)


%}
%start annot
%token AMP
%token AND
%token ARROW
%token ASSERT
%token ASSIGNS
%token AT
%token AXIOM
%token BASE_ADDR
%token BLOCK_LENGTH
%token CHAR
%token COLON
%token COLONCOLON
%token COMMA
%token <Clogic.constant> CONSTANT
%token DECREASES
%token DOT
%token DOTDOT
%token DOUBLE
%token ELSE
%token ENSURES
%token ENUM
%token EOF
%token EQ
%token EQUAL
%token EXISTS
%token FALSE
%token FLOAT
%token FOR
%token FORALL
%token FRESH
%token FULLSEPARATED
%token GE
%token GHOST
%token GT
%token <string> IDENTIFIER
%token IF
%token IFF
%token IMPLIES
%token INT
%token INVARIANT
%token LABEL
%token LBRACE
%token LE
%token LOGIC
%token LONG
%token LOOP_ASSIGNS
%token LPAR
%token LSQUARE
%token LT
%token MINUS
%token NE
%token NOT
%token NOTHING
%token NULL
%token OLD
%token OR
%token PERCENT
%token PLUS
%token PREDICATE
%token QUESTION
%token RBRACE
%token READS
%token REQUIRES
%token RESULT
%token RPAR
%token RSQUARE
%token SEMICOLON
%token SEPARATED
%token SET
%token SHORT
%token SIGNED
%token SLASH
%token STAR
%token <string> STRING_LITERAL
%token STRUCT
%token THEN
%token TRUE
%token <string> TYPENAME
%token UNION
%token UNSIGNED
%token VALID
%token VALID_INDEX
%token VALID_RANGE
%token VARIANT
%token VOID
%right prec_named
%nonassoc prec_exists prec_forall
%right IFF IMPLIES
%left OR
%left AND
%nonassoc prec_not
%nonassoc prec_if
%right QUESTION prec_question
%left EQ GE GT LE LT NE prec_relation
%left MINUS PLUS
%left AMP PERCENT SLASH STAR
%right prec_uminus
%right prec_cast
%left ARROW DOT LSQUARE
%right prec_par
%type <Cast.parsed_annot> annot
%%

lexpr:
  _1 = lexpr _2 = IMPLIES _3 = lexpr
    {                      ( info (PLimplies (_1, _3)) )}
| _1 = lexpr _2 = IFF _3 = lexpr
    {                  ( info (PLiff (_1, _3)) )}
| _1 = lexpr _2 = OR _3 = lexpr
    {                     ( info (PLor (_1, _3)) )}
| _1 = lexpr _2 = AND _3 = lexpr
    {                     ( info (PLand (_1, _3)) )}
| _1 = NOT _2 = lexpr %prec prec_not
    {                           ( info (PLnot _2) )}
| _1 = TRUE
    {       ( info PLtrue )}
| _1 = FALSE
    {        ( info PLfalse )}
| _1 = lexpr _2 = relation _3 = lexpr %prec prec_relation
    {                                           ( info (PLrel (_1, _2, _3)) )}
| _1 = IF _2 = lexpr _3 = THEN _4 = lexpr _5 = ELSE _6 = lexpr %prec prec_if
    {      ( info (PLif (_2, _4, _6)) )}
| _1 = FORALL _2 = ne_parameters _3 = SEMICOLON _4 = lexpr %prec prec_forall
    {      ( info (PLforall (_2, _4)) )}
| _1 = EXISTS _2 = ne_parameters _3 = SEMICOLON _4 = lexpr %prec prec_exists
    {      ( info (PLexists (_2, _4)) )}
| _1 = SEPARATED _2 = LPAR _3 = lexpr _4 = COMMA _5 = lexpr _6 = RPAR
    {                                        ( info (PLseparated (_3,_5)) )}
| _1 = FULLSEPARATED _2 = LPAR _3 = lexpr _4 = COMMA _5 = lexpr _6 = RPAR
    {                                            ( info (PLfullseparated (_3,_5)) )}
| _1 = VALID _2 = LPAR _3 = lexpr _4 = RPAR
    {                        ( info (PLvalid (_3)) )}
| _1 = VALID_INDEX _2 = LPAR _3 = lexpr _4 = COMMA _5 = lexpr _6 = RPAR
    {                                          ( info (PLvalid_index (_3,_5)) )}
| _1 = VALID_RANGE _2 = LPAR _3 = lexpr _4 = COMMA _5 = lexpr _6 = COMMA _7 = lexpr _8 = RPAR
    {      ( info (PLvalid_range (_3,_5,_7)) )}
| _1 = FRESH _2 = LPAR _3 = lexpr _4 = RPAR
    {                        ( info (PLfresh (_3)) )}
| _1 = NULL
    {       ( info PLnull )}
| _1 = CONSTANT
    {           ( info (PLconstant _1) )}
| _1 = lexpr _2 = PLUS _3 = lexpr
    {                   ( info (PLbinop (_1, Badd, _3)) )}
| _1 = lexpr _2 = MINUS _3 = lexpr
    {                    ( info (PLbinop (_1, Bsub, _3)) )}
| _1 = lexpr _2 = STAR _3 = lexpr
    {                   ( info (PLbinop (_1, Bmul, _3)) )}
| _1 = lexpr _2 = SLASH _3 = lexpr
    {                    ( info (PLbinop (_1, Bdiv, _3)) )}
| _1 = lexpr _2 = PERCENT _3 = lexpr
    {                      ( info (PLbinop (_1, Bmod, _3)) )}
| _1 = lexpr _2 = ARROW _3 = IDENTIFIER
    {                         ( info (PLarrow (_1, _3)) )}
| _1 = lexpr _2 = DOT _3 = IDENTIFIER
    {                       ( info (PLdot (_1, _3)) )}
| _1 = lexpr _2 = LSQUARE _3 = lexpr _4 = RSQUARE
    {                              ( info (PLarrget (_1, _3)) )}
| _1 = lexpr _2 = LSQUARE _3 = lexpr_option _4 = DOTDOT _5 = lexpr_option _6 = RSQUARE
    {   ( info (PLrange (_1, _3, _5)) )}
| _1 = MINUS _2 = lexpr %prec prec_uminus
    {                                ( info (PLunop (Uminus, _2)) )}
| _1 = PLUS _2 = lexpr %prec prec_uminus
    {                               ( _2 )}
| _1 = STAR _2 = lexpr
    {             ( info (PLunop (Ustar, _2)) )}
| _1 = AMP _2 = lexpr
    {            ( info (PLunop (Uamp, _2)) )}
| _1 = lexpr _2 = QUESTION _3 = lexpr _4 = COLON _5 = lexpr %prec prec_question
    {    ( info (PLif (_1, _3, _5)) )}
| _1 = OLD _2 = LPAR _3 = lexpr _4 = RPAR
    {                      ( info (PLold _3) )}
| _1 = AT _2 = LPAR _3 = lexpr _4 = COMMA _5 = IDENTIFIER _6 = RPAR
    {                                      ( info (PLat (_3, _5)) )}
| _1 = BASE_ADDR _2 = LPAR _3 = lexpr _4 = RPAR
    {                            ( info (PLbase_addr _3) )}
| _1 = BLOCK_LENGTH _2 = LPAR _3 = lexpr _4 = RPAR
    {                               ( info (PLblock_length _3) )}
| _1 = RESULT
    {         ( info PLresult )}
| _1 = LPAR _2 = lexpr _3 = RPAR %prec prec_par
    {                                 ( _2 )}
| _1 = IDENTIFIER
    {             ( info (PLvar (Info.default_var_info _1)) )}
| _1 = IDENTIFIER _2 = LPAR _3 = lexpr_list _4 = RPAR
    {    ( info (PLapp (Info.default_logic_info _1, _3)) )}
| _1 = LPAR _2 = logic_type_not_id _3 = RPAR _4 = lexpr %prec prec_cast
    {                                                    ( info (PLcast (_2, _4)) )}
| _1 = LPAR _2 = lexpr _3 = RPAR _4 = lexpr %prec prec_cast
    {    ( match _2.lexpr_node with
	| PLvar x -> info (PLcast (LTvar x.Info.var_name, _4))
	| _ -> raise Parse_error )}
| _1 = IDENTIFIER _2 = COLONCOLON _3 = lexpr %prec prec_named
    {                                               ( info (PLnamed (_1, _3)) )}

lexpr_option:
  
    {                ( None )}
| _1 = lexpr
    {                ( Some _1 )}

logic_type:
  _1 = IDENTIFIER
    {             ( LTvar _1 )}
| _1 = IDENTIFIER _2 = stars
    {                   ( _2 (LTvar _1) )}
| _1 = logic_type_not_id
    {                    ( _1 )}

logic_type_not_id:
  _1 = VOID
    {                 ( LTvoid )}
| _1 = CHAR
    {                 ( LTint )}
| _1 = SIGNED _2 = CHAR
    {                 ( LTint )}
| _1 = UNSIGNED _2 = CHAR
    {                 ( LTint )}
| _1 = SIGNED _2 = INT
    {                 ( LTint )}
| _1 = INT
    {                 ( LTint )}
| _1 = UNSIGNED _2 = INT
    {                 ( LTint )}
| _1 = SIGNED _2 = SHORT
    {                 ( LTint )}
| _1 = SHORT
    {                 ( LTint )}
| _1 = UNSIGNED _2 = SHORT
    {                 ( LTint )}
| _1 = SIGNED _2 = LONG
    {                 ( LTint )}
| _1 = LONG
    {                 ( LTint )}
| _1 = UNSIGNED _2 = LONG
    {                 ( LTint )}
| _1 = SIGNED _2 = LONG _3 = LONG
    {                   ( LTint )}
| _1 = LONG _2 = LONG
    {              ( LTint )}
| _1 = UNSIGNED _2 = LONG _3 = LONG
    {                     ( LTint )}
| _1 = FLOAT
    {              ( LTfloat )}
| _1 = DOUBLE
    {              ( LTfloat )}
| _1 = LONG _2 = DOUBLE
    {              ( LTfloat )}
| _1 = TYPENAME
    {                   ( LTvar _1 )}
| _1 = logic_type_not_id _2 = STAR
    {                         ( LTpointer _1 )}

stars:
  _1 = STAR
    {       ( fun t -> LTpointer t )}
| _1 = stars _2 = STAR
    {             ( fun t -> _1 (LTpointer t) )}

relation:
  _1 = LT
    {          ( Lt )}
| _1 = GT
    {          ( Gt )}
| _1 = LE
    {          ( Le )}
| _1 = GE
    {          ( Ge )}
| _1 = EQ
    {          ( Eq )}
| _1 = NE
    {          ( Neq )}

lexpr_list:
  
    {                ( [] )}
| _1 = ne_lexpr_list
    {                 ( _1 )}

ne_lexpr_list:
  _1 = lexpr
    {                           ( [_1] )}
| _1 = lexpr _2 = COMMA _3 = ne_lexpr_list
    {                            ( _1 :: _3 )}

pre_condition:
  
    {                ( None )}
| _1 = REQUIRES _2 = lexpr
    {                 ( Some _2 )}

post_condition:
  
    {                 ( None )}
| _1 = ENSURES _2 = lexpr
    {                ( Some _2 )}

spec:
  _1 = pre_condition _2 = effects _3 = post_condition _4 = decreases
    {    ( { requires = _1; assigns = _2; ensures = _3; decreases = _4 } )}

loop_annot:
  _1 = invariant _2 = loop_effects _3 = variant
    {    ( { invariant = Some _1; loop_assigns = _2; variant = Some _3 } )}
| _1 = loop_effects _2 = variant
    {    ( { invariant = None; loop_assigns = _1; variant = Some _2 } )}
| _1 = invariant _2 = loop_effects
    {    ( { invariant = Some _1; loop_assigns = _2; variant = None } )}
| _1 = ne_loop_effects
    {    ( { invariant = None; loop_assigns = Some _1; variant = None } )}

invariant:
  _1 = INVARIANT _2 = lexpr
    {                  ( _2 )}

variant:
  _1 = VARIANT _2 = lexpr _3 = FOR _4 = IDENTIFIER
    {                               ( (_2, Some _4) )}
| _1 = VARIANT _2 = lexpr
    {                               ( (_2, None) )}

decreases:
  
    {                  ( None )}
| _1 = DECREASES _2 = variant
    {                    ( Some _2 )}

annot:
  _1 = annotation _2 = EOF
    {                   ( _1 )}

annotation:
  _1 = decl
    {                   ( Adecl [_1] )}
| _1 = ghost_decl
    {                   ( Adecl _1 )}
| _1 = spec
    {                   ( Aspec _1 )}
| _1 = loop_annot
    {                   ( Aloop_annot _1 )}
| _1 = ASSERT _2 = lexpr
    {                   ( Acode_annot (Assert _2) )}
| _1 = LABEL _2 = IDENTIFIER
    {                   ( Acode_annot (Label _2) )}
| _1 = SET _2 = ghost_lvalue _3 = EQUAL _4 = lexpr
    {                   ( Acode_annot(GhostSet(_2,_4)) )}

ghost_lvalue:
  _1 = lexpr
    {                    ( _1 )}

effects:
  
    {                ( None )}
| _1 = ASSIGNS _2 = locations
    {                    ( Some _2 )}
| _1 = ASSIGNS _2 = NOTHING
    {                  ( Some [] )}

loop_effects:
  
    {                ( None )}
| _1 = ne_loop_effects
    {                  ( Some _1 )}

ne_loop_effects:
  _1 = LOOP_ASSIGNS _2 = locations
    {                         ( _2 )}
| _1 = LOOP_ASSIGNS _2 = NOTHING
    {                       ( [] )}

locations:
  _1 = location
    {           ( [_1] )}
| _1 = location _2 = COMMA _3 = locations
    {                           ( _1 :: _3 )}

location:
  _1 = lexpr
    {        ( _1 )}

decl:
  _1 = LOGIC _2 = logic_type _3 = IDENTIFIER _4 = LPAR _5 = parameters _6 = RPAR
    {    ( LDlogic (Info.default_logic_info _3, _2, _5, []) )}
| _1 = LOGIC _2 = logic_type _3 = IDENTIFIER _4 = LPAR _5 = parameters _6 = RPAR _7 = READS _8 = locations
    {    ( LDlogic (Info.default_logic_info _3, _2, _5, _8) )}
| _1 = LOGIC _2 = logic_type _3 = IDENTIFIER _4 = LPAR _5 = parameters _6 = RPAR _7 = LBRACE _8 = lexpr _9 = RBRACE
    {    ( LDlogic_def (Info.default_logic_info _3, _2, _5, _8) )}
| _1 = PREDICATE _2 = IDENTIFIER _3 = LPAR _4 = parameters _5 = RPAR
    {    ( LDpredicate_reads (Info.default_logic_info _2, _4, []) )}
| _1 = PREDICATE _2 = IDENTIFIER _3 = LPAR _4 = parameters _5 = RPAR _6 = READS _7 = locations
    {    ( LDpredicate_reads (Info.default_logic_info _2, _4, _7) )}
| _1 = PREDICATE _2 = IDENTIFIER _3 = LPAR _4 = parameters _5 = RPAR _6 = LBRACE _7 = lexpr _8 = RBRACE
    {    ( LDpredicate_def (Info.default_logic_info _2, _4, _7) )}
| _1 = AXIOM _2 = IDENTIFIER _3 = COLON _4 = lexpr
    {                               ( LDaxiom (_2, _4) )}
| _1 = INVARIANT _2 = IDENTIFIER _3 = COLON _4 = lexpr
    {                                   ( LDinvariant (_2, _4) )}

ghost_decl:
  _1 = GHOST _2 = type_specifier _3 = init_declarator_list
    {      ( List.map (ghost _2) _3 )}

type_specifier:
  _1 = CHAR
    {       ( Cast_misc.noattr (CTint (Unsigned, Char)) )}
| _1 = INT
    {      ( Cast_misc.noattr (CTint (Signed, Int)) )}
| _1 = FLOAT
    {        ( Cast_misc.noattr (CTfloat Float) )}
| _1 = DOUBLE
    {         ( Cast_misc.noattr (CTfloat Double) )}

parameters:
  
    {                 ( [] )}
| _1 = ne_parameters
    {                ( _1 )}

ne_parameters:
  _1 = parameter
    {            ( [_1] )}
| _1 = parameter _2 = COMMA _3 = ne_parameters
    {                                ( _1 :: _3 )}

parameter:
  _1 = logic_type _2 = IDENTIFIER
    {                        ( (_1, _2) )}
| _1 = logic_type _2 = IDENTIFIER _3 = LSQUARE _4 = RSQUARE
    {                                        ( (LTarray _1, _2) )}

init_declarator_list:
  _1 = init_declarator
    {                          ( [_1] )}
| _1 = init_declarator_list _2 = COMMA _3 = init_declarator
    {                                                     ( _1 @ [_3] )}

init_declarator:
  _1 = declarator
    {            ( let (id,d) = _1 in (id,d, None) )}
| _1 = declarator _2 = EQUAL _3 = c_initializer
    {     ( let (id,d) = _1 in (id,d, Some _3) )}

declarator:
  _1 = direct_declarator
    {                              ( _1 )}

direct_declarator:
  _1 = IDENTIFIER
    {            ( _1, Dsimple )}
| _1 = direct_declarator _2 = LSQUARE _3 = lexpr _4 = RSQUARE
    {     ( let id,d = _1 in id, Darray (d, Some _3) )}
| _1 = direct_declarator _2 = LSQUARE _3 = RSQUARE
    {     ( let id,d = _1 in id, Darray (d, None) )}

c_initializer:
  _1 = lexpr
    {                ( Iexpr _1 )}
| _1 = LBRACE _2 = c_initializer_list _3 = RBRACE
    {                                           ( Ilist _2 )}
| _1 = LBRACE _2 = c_initializer_list _3 = COMMA _4 = RBRACE
    {                                                 ( Ilist _2 )}

c_initializer_list:
  _1 = c_initializer
    {                        ( [_1] )}
| _1 = c_initializer_list _2 = COMMA _3 = c_initializer
    {                                                 ( _1 @ [_3] )}

%%


