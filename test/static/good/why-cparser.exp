Grammar has 76 nonterminal symbols, among which 1 start symbols.
Grammar has 89 terminal symbols.
Grammar has 248 productions.
nullable(unary_operator) = false
nullable(unary_expression) = false
nullable(type_specifier_no_name) = false
nullable(type_specifier) = false
nullable(type_qualifier_list) = false
nullable(type_qualifier) = false
nullable(type_name) = false
nullable(translation_unit) = false
nullable(struct_or_union_specifier) = false
nullable(struct_or_union) = false
nullable(struct_declarator_list) = false
nullable(struct_declarator) = false
nullable(struct_declaration_list) = false
nullable(struct_declaration) = false
nullable(storage_class_specifier) = false
nullable(statement_list) = false
nullable(statement) = false
nullable(specifier_qualifier_list_no_name) = false
nullable(specifier_qualifier_list) = false
nullable(shift_expression) = false
nullable(selection_statement) = false
nullable(relational_expression) = false
nullable(primary_expression) = false
nullable(postfix_expression) = false
nullable(pointer) = false
nullable(parameter_type_list) = false
nullable(parameter_list) = false
nullable(parameter_declaration) = false
nullable(multiplicative_expression) = false
nullable(loop_annot) = true
nullable(logical_or_expression) = false
nullable(logical_and_expression) = false
nullable(labeled_statement) = false
nullable(jump_statement) = false
nullable(iteration_statement) = false
nullable(init_declarator_list) = false
nullable(init_declarator) = false
nullable(inclusive_or_expression) = false
nullable(identifier_list) = false
nullable(identifier) = false
nullable(function_prototype) = false
nullable(function_definition) = false
nullable(file) = false
nullable(external_declaration) = false
nullable(expression_statement) = false
nullable(expression) = false
nullable(exclusive_or_expression) = false
nullable(equality_expression) = false
nullable(enumerator_list) = false
nullable(enumerator) = false
nullable(enum_specifier) = false
nullable(direct_declarator) = false
nullable(direct_abstract_declarator) = false
nullable(declarator) = false
nullable(declaration_specifiers_no_name) = false
nullable(declaration_specifiers) = false
nullable(declaration_list) = false
nullable(declaration) = false
nullable(constant_expression) = false
nullable(conditional_expression) = false
nullable(compound_statement_LBRACE) = false
nullable(compound_statement) = false
nullable(cast_expression) = false
nullable(c_initializer_list) = false
nullable(c_initializer) = false
nullable(attributes_opt) = true
nullable(attributes) = false
nullable(attribute_list) = true
nullable(attribute) = false
nullable(attrib) = true
nullable(assignment_operator) = false
nullable(assignment_expression) = false
nullable(argument_expression_list) = false
nullable(and_expression) = false
nullable(additive_expression) = false
nullable(abstract_declarator) = false
first(unary_operator) = TILDE STAR PLUS MINUS EXL AMP
first(unary_expression) = TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAR INC_OP IDENTIFIER EXL DEC_OP CONSTANT AMP
first(type_specifier_no_name) = VOID UNSIGNED UNION STRUCT SIGNED SHORT LONG INT FLOAT ENUM DOUBLE CHAR
first(type_specifier) = VOID UNSIGNED UNION TYPE_NAME STRUCT SIGNED SHORT LONG INT FLOAT ENUM DOUBLE CHAR
first(type_qualifier_list) = VOLATILE RESTRICT CONST
first(type_qualifier) = VOLATILE RESTRICT CONST
first(type_name) = VOLATILE VOID UNSIGNED UNION TYPE_NAME STRUCT SIGNED SHORT RESTRICT LONG INT FLOAT ENUM DOUBLE CONST CHAR
first(translation_unit) = VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SPEC SIGNED SHORT RESTRICT REGISTER LPAR LONG INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE DECL CONST CHAR AUTO
first(struct_or_union_specifier) = UNION STRUCT
first(struct_or_union) = UNION STRUCT
first(struct_declarator_list) = TYPE_NAME STAR LPAR IDENTIFIER COLON
first(struct_declarator) = TYPE_NAME STAR LPAR IDENTIFIER COLON
first(struct_declaration_list) = VOLATILE VOID UNSIGNED UNION TYPE_NAME STRUCT SIGNED SHORT RESTRICT LONG INT FLOAT ENUM DOUBLE CONST CHAR
first(struct_declaration) = VOLATILE VOID UNSIGNED UNION TYPE_NAME STRUCT SIGNED SHORT RESTRICT LONG INT FLOAT ENUM DOUBLE CONST CHAR
first(storage_class_specifier) = TYPEDEF STATIC REGISTER EXTERN AUTO
first(statement_list) = WHILE TYPE_NAME TILDE SWITCH STRING_LITERAL STAR SPEC SIZEOF SEMICOLON RETURN PLUS MINUS LPAR LOOP_ANNOT LBRACE INC_OP IF IDENTIFIER GOTO FOR EXL DO DEFAULT DEC_OP CONTINUE CONSTANT CODE_ANNOT CASE BREAK AMP
first(statement) = WHILE TYPE_NAME TILDE SWITCH STRING_LITERAL STAR SPEC SIZEOF SEMICOLON RETURN PLUS MINUS LPAR LOOP_ANNOT LBRACE INC_OP IF IDENTIFIER GOTO FOR EXL DO DEFAULT DEC_OP CONTINUE CONSTANT CODE_ANNOT CASE BREAK AMP
first(specifier_qualifier_list_no_name) = VOLATILE VOID UNSIGNED UNION STRUCT SIGNED SHORT RESTRICT LONG INT FLOAT ENUM DOUBLE CONST CHAR
first(specifier_qualifier_list) = VOLATILE VOID UNSIGNED UNION TYPE_NAME STRUCT SIGNED SHORT RESTRICT LONG INT FLOAT ENUM DOUBLE CONST CHAR
first(shift_expression) = TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAR INC_OP IDENTIFIER EXL DEC_OP CONSTANT AMP
first(selection_statement) = SWITCH IF
first(relational_expression) = TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAR INC_OP IDENTIFIER EXL DEC_OP CONSTANT AMP
first(primary_expression) = STRING_LITERAL LPAR IDENTIFIER CONSTANT
first(postfix_expression) = STRING_LITERAL LPAR IDENTIFIER CONSTANT
first(pointer) = STAR
first(parameter_type_list) = VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC SIGNED SHORT RESTRICT REGISTER LONG INT FLOAT EXTERN ENUM DOUBLE CONST CHAR AUTO
first(parameter_list) = VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC SIGNED SHORT RESTRICT REGISTER LONG INT FLOAT EXTERN ENUM DOUBLE CONST CHAR AUTO
first(parameter_declaration) = VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC SIGNED SHORT RESTRICT REGISTER LONG INT FLOAT EXTERN ENUM DOUBLE CONST CHAR AUTO
first(multiplicative_expression) = TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAR INC_OP IDENTIFIER EXL DEC_OP CONSTANT AMP
first(loop_annot) = LOOP_ANNOT
first(logical_or_expression) = TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAR INC_OP IDENTIFIER EXL DEC_OP CONSTANT AMP
first(logical_and_expression) = TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAR INC_OP IDENTIFIER EXL DEC_OP CONSTANT AMP
first(labeled_statement) = TYPE_NAME IDENTIFIER DEFAULT CASE
first(jump_statement) = RETURN GOTO CONTINUE BREAK
first(iteration_statement) = WHILE LOOP_ANNOT FOR DO
first(init_declarator_list) = TYPE_NAME STAR LPAR IDENTIFIER
first(init_declarator) = TYPE_NAME STAR LPAR IDENTIFIER
first(inclusive_or_expression) = TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAR INC_OP IDENTIFIER EXL DEC_OP CONSTANT AMP
first(identifier_list) = IDENTIFIER
first(identifier) = TYPE_NAME IDENTIFIER
first(function_prototype) = VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT RESTRICT REGISTER LPAR LONG INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST CHAR AUTO
first(function_definition) = VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SPEC SIGNED SHORT RESTRICT REGISTER LPAR LONG INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST CHAR AUTO
first(file) = VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SPEC SIGNED SHORT RESTRICT REGISTER LPAR LONG INT IDENTIFIER FLOAT EXTERN EOF ENUM DOUBLE DECL CONST CHAR AUTO
first(external_declaration) = VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SPEC SIGNED SHORT RESTRICT REGISTER LPAR LONG INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE DECL CONST CHAR AUTO
first(expression_statement) = TILDE STRING_LITERAL STAR SIZEOF SEMICOLON PLUS MINUS LPAR INC_OP IDENTIFIER EXL DEC_OP CONSTANT CODE_ANNOT AMP
first(expression) = TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAR INC_OP IDENTIFIER EXL DEC_OP CONSTANT AMP
first(exclusive_or_expression) = TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAR INC_OP IDENTIFIER EXL DEC_OP CONSTANT AMP
first(equality_expression) = TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAR INC_OP IDENTIFIER EXL DEC_OP CONSTANT AMP
first(enumerator_list) = IDENTIFIER
first(enumerator) = IDENTIFIER
first(enum_specifier) = ENUM
first(direct_declarator) = TYPE_NAME LPAR IDENTIFIER
first(direct_abstract_declarator) = LSQUARE LPAR
first(declarator) = TYPE_NAME STAR LPAR IDENTIFIER
first(declaration_specifiers_no_name) = VOLATILE VOID UNSIGNED UNION TYPEDEF STRUCT STATIC SIGNED SHORT RESTRICT REGISTER LONG INT FLOAT EXTERN ENUM DOUBLE CONST CHAR AUTO
first(declaration_specifiers) = VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC SIGNED SHORT RESTRICT REGISTER LONG INT FLOAT EXTERN ENUM DOUBLE CONST CHAR AUTO
first(declaration_list) = VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC SPEC SIGNED SHORT RESTRICT REGISTER LONG INT FLOAT EXTERN ENUM DOUBLE DECL CONST CHAR AUTO
first(declaration) = VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC SPEC SIGNED SHORT RESTRICT REGISTER LONG INT FLOAT EXTERN ENUM DOUBLE DECL CONST CHAR AUTO
first(constant_expression) = TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAR INC_OP IDENTIFIER EXL DEC_OP CONSTANT AMP
first(conditional_expression) = TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAR INC_OP IDENTIFIER EXL DEC_OP CONSTANT AMP
first(compound_statement_LBRACE) = LBRACE
first(compound_statement) = LBRACE
first(cast_expression) = TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAR INC_OP IDENTIFIER EXL DEC_OP CONSTANT AMP
first(c_initializer_list) = TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAR LBRACE INC_OP IDENTIFIER EXL DEC_OP CONSTANT AMP
first(c_initializer) = TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAR LBRACE INC_OP IDENTIFIER EXL DEC_OP CONSTANT AMP
first(attributes_opt) = ATTRIBUTE
first(attributes) = ATTRIBUTE
first(attribute_list) = TYPE_NAME IDENTIFIER CONST COMMA
first(attribute) = ATTRIBUTE
first(attrib) = TYPE_NAME IDENTIFIER CONST
first(assignment_operator) = XOR_ASSIGN SUB_ASSIGN RIGHT_ASSIGN OR_ASSIGN MUL_ASSIGN MOD_ASSIGN LEFT_ASSIGN EQUAL DIV_ASSIGN AND_ASSIGN ADD_ASSIGN
first(assignment_expression) = TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAR INC_OP IDENTIFIER EXL DEC_OP CONSTANT AMP
first(argument_expression_list) = TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAR INC_OP IDENTIFIER EXL DEC_OP CONSTANT AMP
first(and_expression) = TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAR INC_OP IDENTIFIER EXL DEC_OP CONSTANT AMP
first(additive_expression) = TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAR INC_OP IDENTIFIER EXL DEC_OP CONSTANT AMP
first(abstract_declarator) = STAR LSQUARE LPAR
minimal(unary_operator) = (* 1 *) AMP
minimal(unary_expression) = (* 1 *) IDENTIFIER
minimal(type_specifier_no_name) = (* 1 *) VOID
minimal(type_specifier) = (* 1 *) VOID
minimal(type_qualifier_list) = (* 1 *) CONST
minimal(type_qualifier) = (* 1 *) CONST
minimal(type_name) = (* 1 *) VOID
minimal(translation_unit) = (* 1 *) DECL
minimal(struct_or_union_specifier) = (* 2 *) STRUCT IDENTIFIER
minimal(struct_or_union) = (* 1 *) STRUCT
minimal(struct_declarator_list) = (* 1 *) IDENTIFIER
minimal(struct_declarator) = (* 1 *) IDENTIFIER
minimal(struct_declaration_list) = (* 3 *) VOID IDENTIFIER SEMICOLON
minimal(struct_declaration) = (* 3 *) VOID IDENTIFIER SEMICOLON
minimal(storage_class_specifier) = (* 1 *) TYPEDEF
minimal(statement_list) = (* 1 *) SEMICOLON
minimal(statement) = (* 1 *) SEMICOLON
minimal(specifier_qualifier_list_no_name) = (* 1 *) VOID
minimal(specifier_qualifier_list) = (* 1 *) VOID
minimal(shift_expression) = (* 1 *) IDENTIFIER
minimal(selection_statement) = (* 5 *) IF LPAR IDENTIFIER RPAR SEMICOLON
minimal(relational_expression) = (* 1 *) IDENTIFIER
minimal(primary_expression) = (* 1 *) IDENTIFIER
minimal(postfix_expression) = (* 1 *) IDENTIFIER
minimal(pointer) = (* 1 *) STAR
minimal(parameter_type_list) = (* 1 *) TYPEDEF
minimal(parameter_list) = (* 1 *) TYPEDEF
minimal(parameter_declaration) = (* 1 *) TYPEDEF
minimal(multiplicative_expression) = (* 1 *) IDENTIFIER
minimal(loop_annot) = (* 0 *)
minimal(logical_or_expression) = (* 1 *) IDENTIFIER
minimal(logical_and_expression) = (* 1 *) IDENTIFIER
minimal(labeled_statement) = (* 3 *) IDENTIFIER COLON SEMICOLON
minimal(jump_statement) = (* 2 *) CONTINUE SEMICOLON
minimal(iteration_statement) = (* 5 *) WHILE LPAR IDENTIFIER RPAR SEMICOLON
minimal(init_declarator_list) = (* 1 *) IDENTIFIER
minimal(init_declarator) = (* 1 *) IDENTIFIER
minimal(inclusive_or_expression) = (* 1 *) IDENTIFIER
minimal(identifier_list) = (* 1 *) IDENTIFIER
minimal(identifier) = (* 1 *) IDENTIFIER
minimal(function_prototype) = (* 1 *) IDENTIFIER
minimal(function_definition) = (* 3 *) IDENTIFIER LBRACE RBRACE
minimal(file) = (* 1 *) EOF
minimal(external_declaration) = (* 1 *) DECL
minimal(expression_statement) = (* 1 *) SEMICOLON
minimal(expression) = (* 1 *) IDENTIFIER
minimal(exclusive_or_expression) = (* 1 *) IDENTIFIER
minimal(equality_expression) = (* 1 *) IDENTIFIER
minimal(enumerator_list) = (* 1 *) IDENTIFIER
minimal(enumerator) = (* 1 *) IDENTIFIER
minimal(enum_specifier) = (* 2 *) ENUM IDENTIFIER
minimal(direct_declarator) = (* 1 *) IDENTIFIER
minimal(direct_abstract_declarator) = (* 2 *) LSQUARE RSQUARE
minimal(declarator) = (* 1 *) IDENTIFIER
minimal(declaration_specifiers_no_name) = (* 1 *) TYPEDEF
minimal(declaration_specifiers) = (* 1 *) TYPEDEF
minimal(declaration_list) = (* 1 *) DECL
minimal(declaration) = (* 1 *) DECL
minimal(constant_expression) = (* 1 *) IDENTIFIER
minimal(conditional_expression) = (* 1 *) IDENTIFIER
minimal(compound_statement_LBRACE) = (* 1 *) LBRACE
minimal(compound_statement) = (* 2 *) LBRACE RBRACE
minimal(cast_expression) = (* 1 *) IDENTIFIER
minimal(c_initializer_list) = (* 1 *) IDENTIFIER
minimal(c_initializer) = (* 1 *) IDENTIFIER
minimal(attributes_opt) = (* 0 *)
minimal(attributes) = (* 5 *) ATTRIBUTE LPAR LPAR RPAR RPAR
minimal(attribute_list) = (* 0 *)
minimal(attribute) = (* 5 *) ATTRIBUTE LPAR LPAR RPAR RPAR
minimal(attrib) = (* 0 *)
minimal(assignment_operator) = (* 1 *) EQUAL
minimal(assignment_expression) = (* 1 *) IDENTIFIER
minimal(argument_expression_list) = (* 1 *) IDENTIFIER
minimal(and_expression) = (* 1 *) IDENTIFIER
minimal(additive_expression) = (* 1 *) IDENTIFIER
minimal(abstract_declarator) = (* 1 *) STAR
follow(unary_operator) = TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAR INC_OP IDENTIFIER EXL DEC_OP CONSTANT AMP
follow(unary_expression) = XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RSQUARE RPAR RIGHT_OP RIGHT_ASSIGN RBRACE QUESTION PLUS PIPE PERCENT OR_OP OR_ASSIGN NE_OP MUL_ASSIGN MOD_ASSIGN MINUS LT LE_OP LEFT_OP LEFT_ASSIGN HAT GT GE_OP EQ_OP EQUAL DIV_ASSIGN COMMA COLON ATTRIBUTE AND_OP AND_ASSIGN AMP ADD_ASSIGN
follow(type_specifier_no_name) = VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAR RESTRICT REGISTER LSQUARE LPAR LONG INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO
follow(type_specifier) = VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAR RESTRICT REGISTER LSQUARE LPAR LONG INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO
follow(type_qualifier_list) = VOLATILE TYPE_NAME STAR RPAR RESTRICT LSQUARE LPAR IDENTIFIER CONST COMMA
follow(type_qualifier) = VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAR RESTRICT REGISTER LSQUARE LPAR LONG INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO
follow(type_name) = RPAR
follow(translation_unit) = VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SPEC SIGNED SHORT RESTRICT REGISTER LPAR LONG INT IDENTIFIER FLOAT EXTERN EOF ENUM DOUBLE DECL CONST CHAR AUTO
follow(struct_or_union_specifier) = VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAR RESTRICT REGISTER LSQUARE LPAR LONG INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO
follow(struct_or_union) = TYPE_NAME LBRACE IDENTIFIER
follow(struct_declarator_list) = SEMICOLON COMMA
follow(struct_declarator) = SEMICOLON COMMA
follow(struct_declaration_list) = VOLATILE VOID UNSIGNED UNION TYPE_NAME STRUCT SIGNED SHORT RESTRICT RBRACE LONG INT FLOAT ENUM DOUBLE CONST CHAR
follow(struct_declaration) = VOLATILE VOID UNSIGNED UNION TYPE_NAME STRUCT SIGNED SHORT RESTRICT RBRACE LONG INT FLOAT ENUM DOUBLE CONST CHAR
follow(storage_class_specifier) = VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAR RESTRICT REGISTER LSQUARE LPAR LONG INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA CHAR AUTO
follow(statement_list) = WHILE TYPE_NAME TILDE SWITCH STRING_LITERAL STAR SPEC SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAR LOOP_ANNOT LBRACE INC_OP IF IDENTIFIER GOTO FOR EXL DO DEFAULT DEC_OP CONTINUE CONSTANT CODE_ANNOT CASE BREAK AMP
follow(statement) = WHILE TYPE_NAME TILDE SWITCH STRING_LITERAL STAR SPEC SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAR LOOP_ANNOT LBRACE INC_OP IF IDENTIFIER GOTO FOR EXL ELSE DO DEFAULT DEC_OP CONTINUE CONSTANT CODE_ANNOT CASE BREAK AMP
follow(specifier_qualifier_list_no_name) = TYPE_NAME STAR RPAR LSQUARE LPAR IDENTIFIER COLON
follow(specifier_qualifier_list) = TYPE_NAME STAR RPAR LSQUARE LPAR IDENTIFIER COLON
follow(shift_expression) = SEMICOLON RSQUARE RPAR RIGHT_OP RBRACE QUESTION PIPE OR_OP NE_OP LT LE_OP LEFT_OP HAT GT GE_OP EQ_OP COMMA COLON ATTRIBUTE AND_OP AMP
follow(selection_statement) = WHILE TYPE_NAME TILDE SWITCH STRING_LITERAL STAR SPEC SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAR LOOP_ANNOT LBRACE INC_OP IF IDENTIFIER GOTO FOR EXL ELSE DO DEFAULT DEC_OP CONTINUE CONSTANT CODE_ANNOT CASE BREAK AMP
follow(relational_expression) = SEMICOLON RSQUARE RPAR RBRACE QUESTION PIPE OR_OP NE_OP LT LE_OP HAT GT GE_OP EQ_OP COMMA COLON ATTRIBUTE AND_OP AMP
follow(primary_expression) = XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RSQUARE RPAR RIGHT_OP RIGHT_ASSIGN RBRACE QUESTION PTR_OP PLUS PIPE PERCENT OR_OP OR_ASSIGN NE_OP MUL_ASSIGN MOD_ASSIGN MINUS LT LSQUARE LPAR LE_OP LEFT_OP LEFT_ASSIGN INC_OP HAT GT GE_OP EQ_OP EQUAL DOT DIV_ASSIGN DEC_OP COMMA COLON ATTRIBUTE AND_OP AND_ASSIGN AMP ADD_ASSIGN
follow(postfix_expression) = XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RSQUARE RPAR RIGHT_OP RIGHT_ASSIGN RBRACE QUESTION PTR_OP PLUS PIPE PERCENT OR_OP OR_ASSIGN NE_OP MUL_ASSIGN MOD_ASSIGN MINUS LT LSQUARE LPAR LE_OP LEFT_OP LEFT_ASSIGN INC_OP HAT GT GE_OP EQ_OP EQUAL DOT DIV_ASSIGN DEC_OP COMMA COLON ATTRIBUTE AND_OP AND_ASSIGN AMP ADD_ASSIGN
follow(pointer) = TYPE_NAME RPAR LSQUARE LPAR IDENTIFIER COMMA
follow(parameter_type_list) = RPAR
follow(parameter_list) = RPAR COMMA
follow(parameter_declaration) = RPAR COMMA
follow(multiplicative_expression) = STAR SLASH SEMICOLON RSQUARE RPAR RIGHT_OP RBRACE QUESTION PLUS PIPE PERCENT OR_OP NE_OP MINUS LT LE_OP LEFT_OP HAT GT GE_OP EQ_OP COMMA COLON ATTRIBUTE AND_OP AMP
follow(loop_annot) = WHILE FOR DO
follow(logical_or_expression) = SEMICOLON RSQUARE RPAR RBRACE QUESTION OR_OP COMMA COLON ATTRIBUTE
follow(logical_and_expression) = SEMICOLON RSQUARE RPAR RBRACE QUESTION OR_OP COMMA COLON ATTRIBUTE AND_OP
follow(labeled_statement) = WHILE TYPE_NAME TILDE SWITCH STRING_LITERAL STAR SPEC SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAR LOOP_ANNOT LBRACE INC_OP IF IDENTIFIER GOTO FOR EXL ELSE DO DEFAULT DEC_OP CONTINUE CONSTANT CODE_ANNOT CASE BREAK AMP
follow(jump_statement) = WHILE TYPE_NAME TILDE SWITCH STRING_LITERAL STAR SPEC SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAR LOOP_ANNOT LBRACE INC_OP IF IDENTIFIER GOTO FOR EXL ELSE DO DEFAULT DEC_OP CONTINUE CONSTANT CODE_ANNOT CASE BREAK AMP
follow(iteration_statement) = WHILE TYPE_NAME TILDE SWITCH STRING_LITERAL STAR SPEC SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAR LOOP_ANNOT LBRACE INC_OP IF IDENTIFIER GOTO FOR EXL ELSE DO DEFAULT DEC_OP CONTINUE CONSTANT CODE_ANNOT CASE BREAK AMP
follow(init_declarator_list) = SEMICOLON COMMA ATTRIBUTE
follow(init_declarator) = SEMICOLON COMMA ATTRIBUTE
follow(inclusive_or_expression) = SEMICOLON RSQUARE RPAR RBRACE QUESTION PIPE OR_OP COMMA COLON ATTRIBUTE AND_OP
follow(identifier_list) = RPAR COMMA
follow(identifier) = XOR_ASSIGN VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF SUB_ASSIGN STRUCT STATIC STAR SPEC SLASH SIGNED SHORT SEMICOLON RSQUARE RPAR RIGHT_OP RIGHT_ASSIGN RESTRICT REGISTER RBRACE QUESTION PTR_OP PLUS PIPE PERCENT OR_OP OR_ASSIGN NE_OP MUL_ASSIGN MOD_ASSIGN MINUS LT LSQUARE LPAR LONG LE_OP LEFT_OP LEFT_ASSIGN LBRACE INT INC_OP IDENTIFIER HAT GT GE_OP FLOAT EXTERN EQ_OP EQUAL ENUM DOUBLE DOT DIV_ASSIGN DEC_OP DECL CONST COMMA COLON CHAR AUTO ATTRIBUTE AND_OP AND_ASSIGN AMP ADD_ASSIGN
follow(function_prototype) = LBRACE
follow(function_definition) = VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SPEC SIGNED SHORT RESTRICT REGISTER LPAR LONG INT IDENTIFIER FLOAT EXTERN EOF ENUM DOUBLE DECL CONST CHAR AUTO
follow(file) = #
follow(external_declaration) = VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SPEC SIGNED SHORT RESTRICT REGISTER LPAR LONG INT IDENTIFIER FLOAT EXTERN EOF ENUM DOUBLE DECL CONST CHAR AUTO
follow(expression_statement) = WHILE TYPE_NAME TILDE SWITCH STRING_LITERAL STAR SPEC SIZEOF SEMICOLON RPAR RETURN RBRACE PLUS MINUS LPAR LOOP_ANNOT LBRACE INC_OP IF IDENTIFIER GOTO FOR EXL ELSE DO DEFAULT DEC_OP CONTINUE CONSTANT CODE_ANNOT CASE BREAK AMP
follow(expression) = SEMICOLON RSQUARE RPAR COMMA COLON
follow(exclusive_or_expression) = SEMICOLON RSQUARE RPAR RBRACE QUESTION PIPE OR_OP HAT COMMA COLON ATTRIBUTE AND_OP
follow(equality_expression) = SEMICOLON RSQUARE RPAR RBRACE QUESTION PIPE OR_OP NE_OP HAT EQ_OP COMMA COLON ATTRIBUTE AND_OP AMP
follow(enumerator_list) = RBRACE COMMA
follow(enumerator) = RBRACE COMMA
follow(enum_specifier) = VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAR RESTRICT REGISTER LSQUARE LPAR LONG INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO
follow(direct_declarator) = VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC SPEC SIGNED SHORT SEMICOLON RPAR RESTRICT REGISTER LSQUARE LPAR LONG LBRACE INT FLOAT EXTERN EQUAL ENUM DOUBLE DECL CONST COMMA COLON CHAR AUTO ATTRIBUTE
follow(direct_abstract_declarator) = RPAR LSQUARE LPAR COMMA
follow(declarator) = VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC SPEC SIGNED SHORT SEMICOLON RPAR RESTRICT REGISTER LONG LBRACE INT FLOAT EXTERN EQUAL ENUM DOUBLE DECL CONST COMMA COLON CHAR AUTO ATTRIBUTE
follow(declaration_specifiers_no_name) = TYPE_NAME STAR SEMICOLON RPAR LSQUARE LPAR IDENTIFIER COMMA
follow(declaration_specifiers) = TYPE_NAME STAR SEMICOLON RPAR LSQUARE LPAR IDENTIFIER COMMA
follow(declaration_list) = WHILE VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SPEC SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PLUS MINUS LPAR LOOP_ANNOT LONG LBRACE INT INC_OP IF IDENTIFIER GOTO FOR FLOAT EXTERN EXL ENUM DOUBLE DO DEFAULT DEC_OP DECL CONTINUE CONSTANT CONST CODE_ANNOT CHAR CASE BREAK AUTO AMP
follow(declaration) = WHILE VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SPEC SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PLUS MINUS LPAR LOOP_ANNOT LONG LBRACE INT INC_OP IF IDENTIFIER GOTO FOR FLOAT EXTERN EXL EOF ENUM DOUBLE DO DEFAULT DEC_OP DECL CONTINUE CONSTANT CONST CODE_ANNOT CHAR CASE BREAK AUTO AMP
follow(constant_expression) = SEMICOLON RSQUARE RBRACE COMMA COLON
follow(conditional_expression) = SEMICOLON RSQUARE RPAR RBRACE COMMA COLON ATTRIBUTE
follow(compound_statement_LBRACE) = WHILE VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SPEC SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PLUS MINUS LPAR LOOP_ANNOT LONG LBRACE INT INC_OP IF IDENTIFIER GOTO FOR FLOAT EXTERN EXL ENUM DOUBLE DO DEFAULT DEC_OP DECL CONTINUE CONSTANT CONST CODE_ANNOT CHAR CASE BREAK AUTO AMP
follow(compound_statement) = WHILE VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SPEC SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PLUS MINUS LPAR LOOP_ANNOT LONG LBRACE INT INC_OP IF IDENTIFIER GOTO FOR FLOAT EXTERN EXL EOF ENUM ELSE DOUBLE DO DEFAULT DEC_OP DECL CONTINUE CONSTANT CONST CODE_ANNOT CHAR CASE BREAK AUTO AMP
follow(cast_expression) = XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RSQUARE RPAR RIGHT_OP RIGHT_ASSIGN RBRACE QUESTION PLUS PIPE PERCENT OR_OP OR_ASSIGN NE_OP MUL_ASSIGN MOD_ASSIGN MINUS LT LE_OP LEFT_OP LEFT_ASSIGN HAT GT GE_OP EQ_OP EQUAL DIV_ASSIGN COMMA COLON ATTRIBUTE AND_OP AND_ASSIGN AMP ADD_ASSIGN
follow(c_initializer_list) = RBRACE COMMA
follow(c_initializer) = SEMICOLON RBRACE COMMA ATTRIBUTE
follow(attributes_opt) = SEMICOLON
follow(attributes) = SEMICOLON ATTRIBUTE
follow(attribute_list) = RPAR COMMA
follow(attribute) = SEMICOLON ATTRIBUTE
follow(attrib) = RPAR COMMA
follow(assignment_operator) = TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAR INC_OP IDENTIFIER EXL DEC_OP CONSTANT AMP
follow(assignment_expression) = SEMICOLON RSQUARE RPAR RBRACE COMMA COLON ATTRIBUTE
follow(argument_expression_list) = RPAR COMMA
follow(and_expression) = SEMICOLON RSQUARE RPAR RBRACE QUESTION PIPE OR_OP HAT COMMA COLON ATTRIBUTE AND_OP AMP
follow(additive_expression) = SEMICOLON RSQUARE RPAR RIGHT_OP RBRACE QUESTION PLUS PIPE OR_OP NE_OP MINUS LT LE_OP LEFT_OP HAT GT GE_OP EQ_OP COMMA COLON ATTRIBUTE AND_OP AMP
follow(abstract_declarator) = RPAR COMMA
Built an LR(0) automaton with 402 states.
The grammar is not SLR(1) -- 8 states have a conflict.
The construction mode is pager.
Built an LR(1) automaton with 402 states.
4 shift/reduce conflicts were silently solved.
File "why-cparser.mly", line 330, characters 0-9:
Warning: the precedence level assigned to no_annot is never useful.
File "why-cparser.mly", line 555, characters 40-45:
Warning: this %prec declaration is never useful.
File "why-cparser.mly", line 712, characters 30-38:
Warning: this %prec declaration is never useful.
Warning: one state has shift/reduce conflicts.
Warning: one state has reduce/reduce conflicts.
Warning: one shift/reduce conflict was arbitrarily resolved.
Warning: 24 reduce/reduce conflicts were arbitrarily resolved.
188 out of 402 states have a default reduction.
126 out of 402 states are represented.
0 out of 168 symbols keep track of their start position.
0 out of 168 symbols keep track of their end position.
150 out of 249 productions exploit shiftreduce optimization.
731 functions before inlining, 179 functions after inlining.
