%{

  open Format
  open Coptions
  open Ptree
  open Ctypes
  open Cast
  open Parsing
  open Cerror

  let loc () = (symbol_start (), symbol_end ())
  let loc_i i = (rhs_start i, rhs_end i)

  let locate x = { node = x; loc = loc() }
  let locate_i i x = { node = x; loc = loc_i i }
  let with_loc l x = { node = x; loc = l }

  let error s =
    Creport.raise_located (loc ()) (AnyMessage ("Syntax error: " ^ s))

  let uns () = error "Unsupported C syntax"
  let unss s = error ("Unsupported C syntax: " ^ s)

  let warning s =
    Format.eprintf "%a warning: %s\n" Loc.report_line (symbol_start ()) s
  let vwarning s = if verbose then warning s
  let dwarning s = if debug then warning s

  let no_loop_annot =
    { Clogic.invariant = None;
      Clogic.loop_assigns = None;
      Clogic.variant = None }

  let add_pre_loc lb = function
    | Some (b,_) -> Loc.join (b,0) lb
    | _ -> lb

  let expr_of_statement s = match s.node with
    | CSnop -> { node = CEnop; loc = s.loc }
    | CSexpr e -> e
    | _ -> assert false

  (* used only for parsing types *)

  type specifier =
    | Stypedef
    | Sstorage of storage_class
    | Stype of cexpr ctype_node
    | Slong
    | Sshort
    | Sconst
    | Svolatile
    | Srestrict
    | Ssign of sign
    | Sstruct_decl of string option * fields
    | Sunion_decl of string option * fields

  and specifiers = specifier list

  and declarator =
    | Dsimple
    | Dpointer of declarator
    | Darray of declarator * cexpr option
    | Dfunction of declarator * parameters

  and parameters = (specifiers * declarator * string) list

  and fields = (specifiers * declarator * string * cexpr option) list

  (* interps a list of specifiers / declarators as a [ctype] *)
  (* TODO: short/long *)

  let storage_class =
    let rec loop st = function
      | [] ->
	  st
      | Sstorage st' :: s when st = No_storage ->
	  loop st' s
      | Sstorage st' :: s when st' = st ->
	  warning "duplicate storage class"; loop st s
      | Sstorage st' :: _ ->
	  error "multiple storage class"
      | _ :: s ->
	  loop st s
    in
    loop No_storage

  let sign =
    let rec loop so = function
      | [] ->
	  so
      | Ssign b' :: sp ->
	  (match so with
	     | None -> loop (Some b') sp
	     | Some b when b = b' -> warning "duplicate (un)signed"; loop so sp
	     | Some b -> error "both signed and unsigned")
      | _ :: sp ->
	  loop so sp
    in
    loop None

  let apply_sign sg ty = match sg, ty with
    | None, _ -> ty
    | Some b, (CTint (_, i)) -> CTint (b, i)
    | Some _, _ -> error "signed or unsigned invalid"

  type length = Short | Long | LongLong

  let length =
    let rec loop lo = function
      | [] ->
	  lo
      | (Sshort | Slong as s) :: sp ->
	  (match s, lo with
	     | Sshort, None ->
		 loop (Some Short) sp
	     | Slong, None ->
		 loop (Some Long) sp
	     | Sshort, Some Short ->
		 warning "duplicate short"; loop lo sp
	     | Sshort, Some (Long | LongLong) | Slong, Some Short ->
		 error "both long and short specified"
	     | Slong, Some Long ->
		 loop (Some LongLong) sp
	     | Slong, Some LongLong ->
		 error "too long for caduceus"
	     | _ ->
		 assert false)
      | _ :: sp ->
	  loop lo sp
    in
    loop None

  let apply_length lg ty = match lg, ty with
    | None, _ -> ty
    | Some Short, (CTint (s, _)) -> CTint (s, Cast.Short)
    | Some Long, (CTint (s, _)) -> CTint (s, Cast.Long)
    | Some LongLong, (CTint (s, _)) -> CTint (s, Cast.LongLong)
    | Some Long, CTfloat Double -> CTfloat LongDouble
    | Some _, CTfloat Float
    | Some Short, CTfloat _ ->
	error "long or short specified with floating type"
    | Some LongLong, CTfloat _ ->
	error "the only valid combination is `long double'"
    | Some _, _ -> ty

  (* debug *)
  let rec explain_type fmt = function
    | CTfun (_, t) ->
	fprintf fmt "function returning %a" explain_type t.ctype_node
    | CTpointer t ->
	fprintf fmt "pointer on %a" explain_type t.ctype_node
    | CTarray (t, _) ->
	fprintf fmt "array[] of %a" explain_type t.ctype_node
    | _ ->
	fprintf fmt "other"

  (* fresh names for anonymous structures *)

  let fresh_name =
    let r = ref (-1) in
    function
      | Some s -> s
      | None -> incr r; "anonymous_" ^ string_of_int !r

  (* Interpretation of type expression.
     [gl] indicates a global declaration (implies the check for a type or
     a storage class) *)

  let rec interp_type gl specs decl =
    let st = storage_class specs in
    let cst = List.exists ((=) Sconst) specs in
    let vl = List.exists ((=) Svolatile) specs in
    let sg = sign specs in
    let lg = length specs in
    let rec base_type tyo = function
      | [] ->
	  (match tyo with
	     | Some ty -> ty
	     | None when gl && st = No_storage && sg = None && lg = None ->
		 error "data definition has no type or storage class"
	     | None -> CTint (Signed, Int))
      | Stype t :: sp when tyo = None ->
	  base_type (Some t) sp
      | Sstruct_decl (so, pl) :: sp when tyo = None ->
	  base_type (Some (CTstruct (fresh_name so, Decl (fields pl)))) sp
      | Sunion_decl (so, pl) :: sp when tyo = None ->
	  base_type (Some (CTunion (fresh_name so, Decl (fields pl)))) sp
      | (Stype _ | Sstruct_decl _ | Sunion_decl _) :: _ ->
	  error "two or more data types in declaration"
      | _ :: sp ->
	  base_type tyo sp
    and full_type ty = function
      | Dsimple -> ty
      | Dpointer d -> full_type (Cast_misc.noattr (CTpointer ty)) d
      | Darray (d, so) -> full_type (Cast_misc.noattr (CTarray (ty, so))) d
      | Dfunction (d, pl) -> full_type (Cast_misc.noattr (CTfun (params pl, ty))) d
    and params pl =
      List.map (fun (s,d,x) -> (interp_type false s d, x)) pl
    and fields fl =
      List.map (fun (s,d,x,bf) -> (interp_type false s d, x, bf)) fl
    in
    let bt = base_type None specs in
    let bt = apply_sign sg bt in
    let bt = apply_length lg bt in
    let bt = { ctype_node = bt; ctype_storage = st;
	       ctype_const = cst; ctype_volatile = vl }
    in
    let ty = full_type bt decl in
    if debug then eprintf "%a@." explain_type ty.ctype_node;
    ty

  let interp_param (s, d, id) = interp_type false s d, id
  let interp_params = List.map interp_param

  let is_typedef = List.exists ((=) Stypedef)

  let declaration specs decls =
    let l = loc() in
    if is_typedef specs then
      let interp = function
	| (n,d), None ->
	    Ctypes.add n; Ctypedef (interp_type true specs d, n)
	| (n,_), _ ->
	    error ("typedef " ^ n ^ " is initialized")
      in
      List.map interp decls
    else
      let interp ((n,d),i) =
	Ctypes.remove n; Cdecl (interp_type true specs d, n, i)
      in
      List.map interp decls

  let spec_declaration s specs decls =
    match declaration specs decls with
      | [Cdecl ({ ctype_node = CTfun (pl, ty) }, f, _)] ->
	  Cfunspec (s, ty, f, pl)
      | _ ->
	  raise Parsing.Parse_error

  let type_declarations specs =
    if is_typedef specs then warning "useless keyword in empty declaration";
    let ty = interp_type true specs Dsimple in
    match ty.ctype_node with
      | CTstruct _ | CTunion _ | CTenum _ ->
          [ locate (Ctypedecl ty) ]
      | _ ->
	  warning "empty declaration";
	  []

  (* old style function prototype: f(x,y,z) t1 x; t2 y; ...
     some parameters may be omitted *)
  let old_style_params pl decls =
    let pids = List.map (fun (_,x) -> x) pl in
    let h = Hashtbl.create 17 in
    (* we first check that no parameter is initialized or occurs twice *)
    List.iter
      (fun d -> match d.node with
	 | Cdecl (ty, x, None) ->
	     if not (List.mem x pids) then
	       error ("declaration for " ^ x ^ " but no such parameter");
	     if Hashtbl.mem h x then error ("duplicate declaration for " ^ x);
	     Hashtbl.add h x ty
	 | Cdecl (_,x,_) -> error ("parameter " ^ x ^ " is initialized")
	 | _ -> ())
      decls;
    (* do it for all parameters *)
    List.map (fun (tx, x) -> (try Hashtbl.find h x with Not_found -> tx), x) pl

  let function_declaration specs (id,d) decls =
    let ty = interp_type false specs d in
    match ty.ctype_node with
      | CTfun (pl, tyf) ->
	  let pl =
	    if decls = [] then pl else old_style_params pl decls
	  in
	  List.iter (fun (_,x) -> Ctypes.remove x) pl;
	  tyf, id, pl
      | _ ->
	  raise Parsing.Parse_error

%}
%start file
%token ADD_ASSIGN
%token AMP
%token AND_ASSIGN
%token AND_OP
%token ATTRIBUTE
%token AUTO
%token BREAK
%token CASE
%token CHAR
%token <int * Cast.parsed_code_annot> CODE_ANNOT
%token COLON
%token COMMA
%token CONST
%token <Clogic.constant> CONSTANT
%token CONTINUE
%token <int * Cast.parsed_decl list> DECL
%token DEC_OP
%token DEFAULT
%token DIV_ASSIGN
%token DO
%token DOT
%token DOUBLE
%token ELLIPSIS
%token ELSE
%token ENUM
%token EOF
%token EQUAL
%token EQ_OP
%token EXL
%token EXTERN
%token FLOAT
%token FOR
%token GE_OP
%token GOTO
%token GT
%token HAT
%token <string> IDENTIFIER
%token IF
%token INC_OP
%token INT
%token LBRACE
%token LEFT_ASSIGN
%token LEFT_OP
%token LE_OP
%token LONG
%token <int * Cast.parsed_loop_annot> LOOP_ANNOT
%token LPAR
%token LSQUARE
%token LT
%token MINUS
%token MOD_ASSIGN
%token MUL_ASSIGN
%token NE_OP
%token OR_ASSIGN
%token OR_OP
%token PERCENT
%token PIPE
%token PLUS
%token PTR_OP
%token QUESTION
%token RBRACE
%token REGISTER
%token RESTRICT
%token RETURN
%token RIGHT_ASSIGN
%token RIGHT_OP
%token RPAR
%token RSQUARE
%token SEMICOLON
%token SHORT
%token SIGNED
%token SIZEOF
%token SLASH
%token <int * Cast.parsed_spec> SPEC
%token STAR
%token STATIC
%token <string> STRING_LITERAL
%token STRUCT
%token SUB_ASSIGN
%token SWITCH
%token TILDE
%token TYPEDEF
%token <string> TYPE_NAME
%token UNION
%token UNSIGNED
%token VOID
%token VOLATILE
%token WHILE
%token XOR_ASSIGN
%nonassoc specs
%nonassoc TYPE_NAME
%nonassoc no_annot
%type <Cast.file> file
%%

file:
  _1 = translation_unit _2 = EOF
    {                               ( _1 )}
| _1 = EOF
    {              ( [] )}

primary_expression:
  _1 = IDENTIFIER
    {                     ( locate (CEvar _1) )}
| _1 = CONSTANT
    {                   ( locate (CEconstant _1) )}
| _1 = STRING_LITERAL
    {                         ( locate (CEstring_literal _1) )}
| _1 = LPAR _2 = expression _3 = RPAR
    {                               ( _2 )}

postfix_expression:
  _1 = primary_expression
    {            ( _1 )}
| _1 = postfix_expression _2 = LSQUARE _3 = expression _4 = RSQUARE
    {     ( locate (CEarrget (_1, _3)) )}
| _1 = postfix_expression _2 = LPAR _3 = RPAR
    {     ( locate (CEcall (_1, [])) )}
| _1 = postfix_expression _2 = LPAR _3 = argument_expression_list _4 = RPAR
    {     ( locate (CEcall (_1, _3)) )}
| _1 = postfix_expression _2 = DOT _3 = identifier
    {     ( locate (CEdot (_1, _3)) )}
| _1 = postfix_expression _2 = PTR_OP _3 = identifier
    {     ( locate (CEarrow (_1, _3)) )}
| _1 = postfix_expression _2 = INC_OP
    {     ( locate (CEincr (Upostfix_inc, _1)) )}
| _1 = postfix_expression _2 = DEC_OP
    {     ( locate (CEincr (Upostfix_dec, _1)) )}

argument_expression_list:
  _1 = assignment_expression
    {                                ( [_1] )}
| _1 = argument_expression_list _2 = COMMA _3 = assignment_expression
    {                                                               ( _1 @ [_3] )}

unary_expression:
  _1 = postfix_expression
    {                             ( _1 )}
| _1 = INC_OP _2 = unary_expression
    {                                  ( locate (CEincr (Uprefix_inc, _2)) )}
| _1 = DEC_OP _2 = unary_expression
    {                                  ( locate (CEincr (Uprefix_dec, _2)) )}
| _1 = unary_operator _2 = cast_expression
    {                                         ( locate (CEunary (_1, _2)) )}
| _1 = SIZEOF _2 = unary_expression
    {                                  ( locate (CEsizeof_expr _2) )}
| _1 = SIZEOF _2 = LPAR _3 = type_name _4 = RPAR
    {     ( let s,d = _3 in locate (CEsizeof (interp_type false s d)) )}

unary_operator:
  _1 = AMP
    {              ( Uamp )}
| _1 = STAR
    {               ( Ustar )}
| _1 = PLUS
    {               ( Uplus )}
| _1 = MINUS
    {                ( Uminus )}
| _1 = TILDE
    {                ( Utilde )}
| _1 = EXL
    {              ( Unot )}

cast_expression:
  _1 = unary_expression
    {                           ( _1 )}
| _1 = LPAR _2 = type_name _3 = RPAR _4 = cast_expression
    {     ( let s,d = _2 in locate (CEcast (interp_type false s d, _4)) )}

multiplicative_expression:
  _1 = cast_expression
    {            ( _1 )}
| _1 = multiplicative_expression _2 = STAR _3 = cast_expression
    {     ( locate (CEbinary (_1, Bmul, _3)) )}
| _1 = multiplicative_expression _2 = SLASH _3 = cast_expression
    {     ( locate (CEbinary (_1, Bdiv, _3)) )}
| _1 = multiplicative_expression _2 = PERCENT _3 = cast_expression
    {     ( locate (CEbinary (_1, Bmod, _3)) )}

additive_expression:
  _1 = multiplicative_expression
    {           ( _1 )}
| _1 = additive_expression _2 = PLUS _3 = multiplicative_expression
    {     ( locate (CEbinary (_1, Badd, _3)) )}
| _1 = additive_expression _2 = MINUS _3 = multiplicative_expression
    {     ( locate (CEbinary (_1, Bsub, _3)) )}

shift_expression:
  _1 = additive_expression
    {                              ( _1 )}
| _1 = shift_expression _2 = LEFT_OP _3 = additive_expression
    {     ( locate (CEbinary (_1, Bshift_left, _3)) )}
| _1 = shift_expression _2 = RIGHT_OP _3 = additive_expression
    {     ( locate (CEbinary (_1, Bshift_right, _3)) )}

relational_expression:
  _1 = shift_expression
    {            ( _1 )}
| _1 = relational_expression _2 = LT _3 = shift_expression
    {     ( locate (CEbinary (_1, Blt, _3)) )}
| _1 = relational_expression _2 = GT _3 = shift_expression
    {     ( locate (CEbinary (_1, Bgt, _3)) )}
| _1 = relational_expression _2 = LE_OP _3 = shift_expression
    {     ( locate (CEbinary (_1, Ble, _3)) )}
| _1 = relational_expression _2 = GE_OP _3 = shift_expression
    {     ( locate (CEbinary (_1, Bge, _3)) )}

equality_expression:
  _1 = relational_expression
    {            ( _1 )}
| _1 = equality_expression _2 = EQ_OP _3 = relational_expression
    {     ( locate (CEbinary (_1, Beq, _3)) )}
| _1 = equality_expression _2 = NE_OP _3 = relational_expression
    {     ( locate (CEbinary (_1, Bneq, _3)) )}

and_expression:
  _1 = equality_expression
    {            ( _1 )}
| _1 = and_expression _2 = AMP _3 = equality_expression
    {     ( locate (CEbinary (_1, Bbw_and, _3)) )}

exclusive_or_expression:
  _1 = and_expression
    {            ( _1 )}
| _1 = exclusive_or_expression _2 = HAT _3 = and_expression
    {     ( locate (CEbinary (_1, Bbw_xor, _3)) )}

inclusive_or_expression:
  _1 = exclusive_or_expression
    {            ( _1 )}
| _1 = inclusive_or_expression _2 = PIPE _3 = exclusive_or_expression
    {     ( locate (CEbinary (_1, Bbw_or, _3)) )}

logical_and_expression:
  _1 = inclusive_or_expression
    {            ( _1 )}
| _1 = logical_and_expression _2 = AND_OP _3 = inclusive_or_expression
    {     ( locate (CEbinary (_1, Band, _3)) )}

logical_or_expression:
  _1 = logical_and_expression
    {            ( _1 )}
| _1 = logical_or_expression _2 = OR_OP _3 = logical_and_expression
    {     ( locate (CEbinary (_1, Bor, _3)) )}

conditional_expression:
  _1 = logical_or_expression
    {            ( _1 )}
| _1 = logical_or_expression _2 = QUESTION _3 = expression _4 = COLON _5 = conditional_expression
    {     ( locate (CEcond (_1, _3, _5)) )}

assignment_expression:
  _1 = conditional_expression
    {            ( _1 )}
| _1 = unary_expression _2 = assignment_operator _3 = assignment_expression
    {     ( locate (match _2 with
			| Aequal -> CEassign (_1, _3)
			| Amul -> CEassign_op (_1, Bmul, _3)
			| Adiv -> CEassign_op (_1, Bdiv, _3)
			| Amod -> CEassign_op (_1, Bmod, _3)
			| Aadd -> CEassign_op (_1, Badd, _3)
			| Asub -> CEassign_op (_1, Bsub, _3)
			| Aleft -> CEassign_op (_1, Bshift_left, _3)
			| Aright -> CEassign_op (_1, Bshift_right, _3)
			| Aand -> CEassign_op (_1, Bbw_and, _3)
			| Axor -> CEassign_op (_1, Bbw_xor, _3)
			| Aor -> CEassign_op (_1, Bbw_or, _3)) )}

assignment_operator:
  _1 = EQUAL
    {                ( Aequal )}
| _1 = MUL_ASSIGN
    {                     ( Amul )}
| _1 = DIV_ASSIGN
    {                     ( Adiv )}
| _1 = MOD_ASSIGN
    {                     ( Amod )}
| _1 = ADD_ASSIGN
    {                     ( Aadd )}
| _1 = SUB_ASSIGN
    {                     ( Asub )}
| _1 = LEFT_ASSIGN
    {                      ( Aleft )}
| _1 = RIGHT_ASSIGN
    {                       ( Aright )}
| _1 = AND_ASSIGN
    {                     ( Aand )}
| _1 = XOR_ASSIGN
    {                     ( Axor )}
| _1 = OR_ASSIGN
    {                    ( Aor )}

expression:
  _1 = assignment_expression
    {                                ( _1 )}
| _1 = expression _2 = COMMA _3 = assignment_expression
    {                                                 ( locate (CEseq (_1, _3)) )}

constant_expression:
  _1 = conditional_expression
    {                                 ( _1 )}

declaration:
  _1 = declaration_specifiers _2 = SEMICOLON
    {            ( type_declarations _1 )}
| _1 = declaration_specifiers _2 = init_declarator_list _3 = attributes_opt _4 = SEMICOLON
    {     ( List.map locate (declaration _1 _2) )}
| _1 = SPEC _2 = declaration_specifiers _3 = init_declarator_list _4 = attributes_opt _5 = SEMICOLON
    {     ( [locate (spec_declaration _1 _2 _3)] )}
| _1 = DECL
    {     ( let ofs,d = _1 in
	      List.map (fun d -> locate (Cspecdecl (ofs,d))) d )}

declaration_specifiers:
  _1 = storage_class_specifier %prec specs
    {                                              ( [_1] )}
| _1 = storage_class_specifier _2 = declaration_specifiers
    {                                                         ( _1 :: _2 )}
| _1 = type_specifier
    {                         ( [_1] )}
| _1 = type_specifier _2 = declaration_specifiers_no_name
    {                                                        ( _1 :: _2 )}
| _1 = type_qualifier %prec specs
    {                                     ( [_1] )}
| _1 = type_qualifier _2 = declaration_specifiers
    {                                                ( _1 :: _2 )}

declaration_specifiers_no_name:
  _1 = storage_class_specifier %prec specs
    {                                              ( [_1] )}
| _1 = storage_class_specifier _2 = declaration_specifiers_no_name
    {                                                                 ( _1 :: _2 )}
| _1 = type_specifier_no_name
    {                                 ( [_1] )}
| _1 = type_specifier_no_name _2 = declaration_specifiers_no_name
    {                                                                ( _1 :: _2 )}
| _1 = type_qualifier %prec specs
    {                                     ( [_1] )}
| _1 = type_qualifier _2 = declaration_specifiers
    {                                                ( _1 :: _2 )}

init_declarator_list:
  _1 = init_declarator
    {                          ( [_1] )}
| _1 = init_declarator_list _2 = COMMA _3 = init_declarator
    {                                                     ( _1 @ [_3] )}

init_declarator:
  _1 = declarator
    {            ( _1, None )}
| _1 = declarator _2 = EQUAL _3 = c_initializer
    {     ( _1, Some _3 )}

storage_class_specifier:
  _1 = TYPEDEF
    {                  ( Stypedef )}
| _1 = EXTERN
    {                 ( Sstorage Extern )}
| _1 = STATIC
    {                 ( Sstorage Static )}
| _1 = AUTO
    {               ( Sstorage Auto )}
| _1 = REGISTER
    {                   ( Sstorage Register )}

type_specifier:
  _1 = type_specifier_no_name
    {                                 ( _1 )}
| _1 = TYPE_NAME
    {                    ( Stype (CTvar _1) )}

type_specifier_no_name:
  _1 = VOID
    {               ( Stype CTvoid )}
| _1 = CHAR
    {               ( Stype (CTint (Unsigned, Char)) )}
| _1 = SHORT
    {                ( Sshort )}
| _1 = INT
    {              ( Stype (CTint (Signed, Int)) )}
| _1 = LONG
    {               ( Slong )}
| _1 = FLOAT
    {                ( Stype (CTfloat Float) )}
| _1 = DOUBLE
    {                 ( Stype (CTfloat Double) )}
| _1 = SIGNED
    {                 ( Ssign Signed )}
| _1 = UNSIGNED
    {                   ( Ssign Unsigned )}
| _1 = struct_or_union_specifier
    {                                    ( _1 )}
| _1 = enum_specifier
    {                         ( _1 )}

identifier:
  _1 = IDENTIFIER
    {                     ( _1 )}
| _1 = TYPE_NAME
    {                     ( _1 )}

struct_or_union_specifier:
  _1 = struct_or_union _2 = identifier _3 = LBRACE _4 = struct_declaration_list _5 = RBRACE
    {            ( if _1 then
		Sstruct_decl (Some _2, _4)
	      else
		Sunion_decl (Some _2, _4) )}
| _1 = struct_or_union _2 = LBRACE _3 = struct_declaration_list _4 = RBRACE
    {     ( if _1 then Sstruct_decl (None, _3) else Sunion_decl (None, _3) )}
| _1 = struct_or_union _2 = identifier
    {     ( Stype (if _1 then CTstruct (_2, Tag) else CTunion (_2, Tag)) )}

struct_or_union:
  _1 = STRUCT
    {                 ( true )}
| _1 = UNION
    {                ( false )}

struct_declaration_list:
  _1 = struct_declaration
    {                             ( _1 )}
| _1 = struct_declaration_list _2 = struct_declaration
    {                                                     ( _1 @ _2 )}

struct_declaration:
  _1 = specifier_qualifier_list _2 = struct_declarator_list _3 = SEMICOLON
    {            ( let s = _1 in List.map (fun ((id,d),bf) -> s,d,id,bf) _2 )}

specifier_qualifier_list:
  _1 = type_specifier _2 = specifier_qualifier_list_no_name
    {                                                          ( _1 :: _2 )}
| _1 = type_specifier
    {                         ( [_1] )}
| _1 = type_qualifier _2 = specifier_qualifier_list
    {                                                  ( _1 :: _2 )}
| _1 = type_qualifier %prec specs
    {                                     ( [_1] )}

specifier_qualifier_list_no_name:
  _1 = type_specifier_no_name _2 = specifier_qualifier_list_no_name
    {                                                                  ( _1 :: _2 )}
| _1 = type_specifier_no_name
    {                                 ( [_1] )}
| _1 = type_qualifier _2 = specifier_qualifier_list_no_name
    {                                                          ( _1 :: _2 )}
| _1 = type_qualifier
    {                         ( [_1] )}

struct_declarator_list:
  _1 = struct_declarator
    {                            ( [_1] )}
| _1 = struct_declarator_list _2 = COMMA _3 = struct_declarator
    {                                                         ( _1 @ [_3] )}

struct_declarator:
  _1 = declarator
    {            ( _1, None )}
| _1 = COLON _2 = constant_expression
    {     ( ("_", Dsimple), Some _2 )}
| _1 = declarator _2 = COLON _3 = constant_expression
    {     ( _1, Some _3 )}

enum_specifier:
  _1 = ENUM _2 = LBRACE _3 = enumerator_list _4 = RBRACE
    {            ( Stype (CTenum (fresh_name None, Decl _3)) )}
| _1 = ENUM _2 = identifier _3 = LBRACE _4 = enumerator_list _5 = RBRACE
    {     ( Stype (CTenum (_2, Decl _4)) )}
| _1 = ENUM _2 = identifier
    {     ( Stype (CTenum (_2, Tag)) )}

enumerator_list:
  _1 = enumerator
    {                     ( [_1] )}
| _1 = enumerator_list _2 = COMMA _3 = enumerator
    {                                           ( _1 @ [_3] )}

enumerator:
  _1 = IDENTIFIER
    {                     ( _1, None )}
| _1 = IDENTIFIER _2 = EQUAL _3 = constant_expression
    {                                               ( _1, Some _3 )}

type_qualifier:
  _1 = CONST
    {                ( Sconst )}
| _1 = VOLATILE
    {                   ( Svolatile )}
| _1 = RESTRICT
    {            ( dwarning "ignored __restrict"; Srestrict )}

declarator:
  _1 = pointer _2 = direct_declarator
    {                                    ( let id,d = _2 in id, _1 d )}
| _1 = direct_declarator
    {                            ( _1 )}

direct_declarator:
  _1 = identifier
    {            ( _1, Dsimple )}
| _1 = LPAR _2 = declarator _3 = RPAR
    {     ( _2 )}
| _1 = direct_declarator _2 = LSQUARE _3 = constant_expression _4 = RSQUARE
    {     ( let id,d = _1 in id, Darray (d, Some _3) )}
| _1 = direct_declarator _2 = LSQUARE _3 = RSQUARE
    {     ( let id,d = _1 in id, Darray (d, None) )}
| _1 = direct_declarator _2 = LPAR _3 = parameter_type_list _4 = RPAR
    {     ( let id,d = _1 in id, Dfunction (d, _3) )}
| _1 = direct_declarator _2 = LPAR _3 = identifier_list _4 = RPAR
    {     ( let pl = List.map (fun x -> ([], Dsimple, x)) _3 in
	      let id,d = _1 in id, Dfunction (d, pl) )}
| _1 = direct_declarator _2 = LPAR _3 = RPAR
    {            ( let id,d = _1 in id, Dfunction (d, []) )}

loop_annot:
  _1 = LOOP_ANNOT
    {                                       ( _1 )}
|  %prec no_annot
    {                                       ( symbol_start (), no_loop_annot )}

pointer:
  _1 = STAR
    {               ( fun d -> Dpointer d )}
| _1 = STAR _2 = type_qualifier_list
    {     ( dwarning "ignored qualifiers"; fun d -> Dpointer d )}
| _1 = STAR _2 = pointer
    {                       ( fun d -> Dpointer (_2 d) )}
| _1 = STAR _2 = type_qualifier_list _3 = pointer
    {     ( dwarning "ignored qualifiers"; fun d -> Dpointer (_3 d) )}

type_qualifier_list:
  _1 = type_qualifier
    {                         ( [_1] )}
| _1 = type_qualifier_list _2 = type_qualifier
    {                                             ( _1 @ [_2] )}

parameter_type_list:
  _1 = parameter_list
    {                         ( _1 )}
| _1 = parameter_list _2 = COMMA _3 = ELLIPSIS
    {                                        ( dwarning "ignored <...>"; _1 )}

parameter_list:
  _1 = parameter_declaration
    {                                ( [_1] )}
| _1 = parameter_list _2 = COMMA _3 = parameter_declaration
    {                                                     ( _1 @ [_3] )}

parameter_declaration:
  _1 = declaration_specifiers _2 = declarator
    {            ( let id,d = _2 in _1, d, id )}
| _1 = declaration_specifiers _2 = abstract_declarator
    {     ( _1, _2, "_" )}
| _1 = declaration_specifiers
    {     ( (_1, Dsimple, "_") )}

identifier_list:
  _1 = IDENTIFIER
    {                     ( [_1] )}
| _1 = identifier_list _2 = COMMA _3 = IDENTIFIER
    {                                           ( _1 @ [_3] )}

type_name:
  _1 = specifier_qualifier_list
    {                                   ( _1, Dsimple )}
| _1 = specifier_qualifier_list _2 = abstract_declarator
    {                                                       ( _1, _2 )}

abstract_declarator:
  _1 = pointer
    {                  ( _1 Dsimple )}
| _1 = direct_abstract_declarator
    {                                     ( _1 )}
| _1 = pointer _2 = direct_abstract_declarator
    {                                             ( _1 _2 )}

direct_abstract_declarator:
  _1 = LPAR _2 = abstract_declarator _3 = RPAR
    {            ( _2 )}
| _1 = LSQUARE _2 = RSQUARE
    {     ( Darray (Dsimple, None) )}
| _1 = LSQUARE _2 = constant_expression _3 = RSQUARE
    {     ( Darray (Dsimple, Some _2) )}
| _1 = direct_abstract_declarator _2 = LSQUARE _3 = RSQUARE
    {     ( Darray (_1, None) )}
| _1 = direct_abstract_declarator _2 = LSQUARE _3 = constant_expression _4 = RSQUARE
    {     ( Darray (_1, Some _3) )}
| _1 = LPAR _2 = RPAR
    {     ( Dfunction (Dsimple, []) )}
| _1 = LPAR _2 = parameter_type_list _3 = RPAR
    {     ( Dfunction (Dsimple, _2) )}
| _1 = direct_abstract_declarator _2 = LPAR _3 = RPAR
    {     ( Dfunction (_1, []) )}
| _1 = direct_abstract_declarator _2 = LPAR _3 = parameter_type_list _4 = RPAR
    {     ( Dfunction (_1, _3) )}

c_initializer:
  _1 = assignment_expression
    {                                ( Iexpr _1 )}
| _1 = LBRACE _2 = c_initializer_list _3 = RBRACE
    {                                           ( Ilist _2 )}
| _1 = LBRACE _2 = c_initializer_list _3 = COMMA _4 = RBRACE
    {                                                 ( Ilist _2 )}

c_initializer_list:
  _1 = c_initializer
    {                        ( [_1] )}
| _1 = c_initializer_list _2 = COMMA _3 = c_initializer
    {                                                 ( _1 @ [_3] )}

statement:
  _1 = labeled_statement
    {                            ( _1 )}
| _1 = compound_statement
    {                             ( locate (CSblock _1) )}
| _1 = expression_statement
    {                               ( _1 )}
| _1 = selection_statement
    {                              ( _1 )}
| _1 = iteration_statement
    {                              ( _1 )}
| _1 = jump_statement
    {                         ( _1 )}
| _1 = SPEC _2 = statement
    {                  ( locate (CSspec (_1,_2)) )}

labeled_statement:
  _1 = identifier _2 = COLON _3 = statement
    {                                            ( locate (CSlabel (_1, _3)) )}
| _1 = CASE _2 = constant_expression _3 = COLON _4 = statement
    {                                                   ( locate (CScase (_2, _4)) )}
| _1 = DEFAULT _2 = COLON _3 = statement
    {                                  ( locate (CSdefault(_3)) )}

compound_statement:
  _1 = compound_statement_LBRACE _2 = RBRACE
    {            ( Ctypes.pop (); [], [] )}
| _1 = compound_statement_LBRACE _2 = statement_list _3 = RBRACE
    {     ( Ctypes.pop (); [], _2 )}
| _1 = compound_statement_LBRACE _2 = declaration_list _3 = RBRACE
    {     ( Ctypes.pop (); _2, [] )}
| _1 = compound_statement_LBRACE _2 = declaration_list _3 = statement_list _4 = RBRACE
    {     ( Ctypes.pop (); _2, _3 )}

compound_statement_LBRACE:
  _1 = LBRACE
    {         ( Ctypes.push () )}

declaration_list:
  _1 = declaration
    {                      ( _1 )}
| _1 = declaration_list _2 = declaration
    {                                       ( _1 @ _2 )}

statement_list:
  _1 = statement
    {                    ( [_1] )}
| _1 = statement_list _2 = statement
    {                                   ( _1 @ [_2] )}

expression_statement:
  _1 = SEMICOLON
    {                    ( locate CSnop )}
| _1 = CODE_ANNOT
    {              ( locate (CSannot _1) )}
| _1 = expression _2 = SEMICOLON
    {                               ( locate (CSexpr _1) )}

selection_statement:
  _1 = IF _2 = LPAR _3 = expression _4 = RPAR _5 = statement
    {            ( locate (CSif (_3, _5, locate CSnop)) )}
| _1 = IF _2 = LPAR _3 = expression _4 = RPAR _5 = statement _6 = ELSE _7 = statement
    {     ( locate (CSif (_3, _5, _7)) )}
| _1 = SWITCH _2 = LPAR _3 = expression _4 = RPAR _5 = statement
    {     ( locate (CSswitch (_3, _5)) )}

iteration_statement:
  _1 = loop_annot _2 = WHILE _3 = LPAR _4 = expression _5 = RPAR _6 = statement
    {            ( locate (CSwhile (_1, _4, _6)) )}
| _1 = loop_annot _2 = DO _3 = statement _4 = WHILE _5 = LPAR _6 = expression _7 = RPAR _8 = SEMICOLON
    {     ( locate (CSdowhile (_1, _3, _6)) )}
| _1 = loop_annot _2 = FOR _3 = LPAR _4 = expression_statement _5 = expression_statement _6 = RPAR _7 = statement
    {     ( locate (CSfor (_1, expr_of_statement _4, expr_of_statement _5,
			     locate CEnop, _7)) )}
| _1 = loop_annot _2 = FOR _3 = LPAR _4 = expression_statement _5 = expression_statement _6 = expression _7 = RPAR _8 = statement
    {     ( locate (CSfor (_1, expr_of_statement _4, expr_of_statement _5,
			     _6, _8)) )}

jump_statement:
  _1 = GOTO _2 = identifier _3 = SEMICOLON
    {                                           ( locate (CSgoto _2) )}
| _1 = CONTINUE _2 = SEMICOLON
    {                             ( locate CScontinue )}
| _1 = BREAK _2 = SEMICOLON
    {                          ( locate CSbreak )}
| _1 = RETURN _2 = SEMICOLON
    {                           ( locate (CSreturn None) )}
| _1 = RETURN _2 = expression _3 = SEMICOLON
    {                                      ( locate (CSreturn (Some _2)) )}

translation_unit:
  _1 = external_declaration
    {                               ( _1 )}
| _1 = translation_unit _2 = external_declaration
    {                                                ( _1 @ _2 )}

external_declaration:
  _1 = function_definition
    {                              ( [_1] )}
| _1 = declaration
    {                      ( _1 )}

function_definition:
  _1 = function_prototype _2 = compound_statement
    {            ( Ctypes.pop (); (* pushed by function_prototype *)
	      let ty,id,pl = _1 in
	      let bl = locate_i 2 (CSblock _2) in
	      locate (Cfundef (None, ty, id, pl, bl)) )}
| _1 = SPEC _2 = function_prototype _3 = compound_statement
    {            ( Ctypes.pop (); (* pushed by function_prototype *)
	      let ty,id,pl = _2 in
	      let bl = locate_i 3 (CSblock _3) in
	      locate (Cfundef (Some _1, ty, id, pl, bl)) )}

function_prototype:
  _1 = declaration_specifiers _2 = declarator _3 = declaration_list
    {            ( Ctypes.push (); function_declaration _1 _2 _3 )}
| _1 = declaration_specifiers _2 = declarator
    {     ( Ctypes.push (); function_declaration _1 _2 [] )}
| _1 = declarator _2 = declaration_list
    {     ( Ctypes.push (); function_declaration [] _1 _2 )}
| _1 = declarator
    {     ( Ctypes.push (); function_declaration [] _1 [] )}

attributes_opt:
  
    {              ()}
| _1 = attributes
    {             ( dwarning "ignored attributes" )}

attributes:
  _1 = attribute
    {            ()}
| _1 = attributes _2 = attribute
    {                       ()}

attribute:
  _1 = ATTRIBUTE _2 = LPAR _3 = LPAR _4 = attribute_list _5 = RPAR _6 = RPAR
    {                                               ()}

attribute_list:
  _1 = attrib
    {         ()}
| _1 = attribute_list _2 = COMMA _3 = attrib
    {                              ()}

attrib:
  
    {              ()}
| _1 = identifier
    {             ()}
| _1 = identifier _2 = LPAR _3 = RPAR
    {                       ()}
| _1 = identifier _2 = LPAR _3 = argument_expression_list _4 = RPAR
    {                                                ()}
| _1 = CONST
    {        ()}

%%
