State 0:
file' -> . file [ # ]
-- On NEWLINE shift to state 1
-- On option(NEWLINE) shift to state 4
-- On list(NEWLINE) shift to state 245
-- On file shift to state 247
-- On WHILE reduce production option(NEWLINE) -> 
-- On TRUE reduce production option(NEWLINE) -> 
-- On STRING reduce production option(NEWLINE) -> 
-- On RETURN reduce production option(NEWLINE) -> 
-- On PREDICATE reduce production option(NEWLINE) -> 
-- On NOT reduce production option(NEWLINE) -> 
-- On NONE reduce production option(NEWLINE) -> 
-- On MINUS reduce production option(NEWLINE) -> 
-- On LEFTSQ reduce production option(NEWLINE) -> 
-- On LEFTPAR reduce production option(NEWLINE) -> 
-- On LABEL reduce production option(NEWLINE) -> 
-- On INTEGER reduce production option(NEWLINE) -> 
-- On IF reduce production option(NEWLINE) -> 
-- On IDENT reduce production option(NEWLINE) -> 
-- On FUNCTION reduce production option(NEWLINE) -> 
-- On FROM reduce production option(NEWLINE) -> 
-- On FOR reduce production option(NEWLINE) -> 
-- On FALSE reduce production option(NEWLINE) -> 
-- On EOF reduce production list(NEWLINE) -> 
-- On DEF reduce production option(NEWLINE) -> 
-- On CHECK reduce production option(NEWLINE) -> 
-- On BREAK reduce production option(NEWLINE) -> 
-- On ASSUME reduce production option(NEWLINE) -> 
-- On ASSERT reduce production option(NEWLINE) -> 

State 1:
list(NEWLINE) -> NEWLINE . list(NEWLINE) [ EOF ]
option(NEWLINE) -> NEWLINE . [ WHILE TRUE STRING RETURN PREDICATE NOT NONE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE DEF CHECK BREAK ASSUME ASSERT ]
-- On NEWLINE shift to state 2
-- On list(NEWLINE) shift to state 3
-- On WHILE reduce production option(NEWLINE) -> NEWLINE 
-- On TRUE reduce production option(NEWLINE) -> NEWLINE 
-- On STRING reduce production option(NEWLINE) -> NEWLINE 
-- On RETURN reduce production option(NEWLINE) -> NEWLINE 
-- On PREDICATE reduce production option(NEWLINE) -> NEWLINE 
-- On NOT reduce production option(NEWLINE) -> NEWLINE 
-- On NONE reduce production option(NEWLINE) -> NEWLINE 
-- On MINUS reduce production option(NEWLINE) -> NEWLINE 
-- On LEFTSQ reduce production option(NEWLINE) -> NEWLINE 
-- On LEFTPAR reduce production option(NEWLINE) -> NEWLINE 
-- On LABEL reduce production option(NEWLINE) -> NEWLINE 
-- On INTEGER reduce production option(NEWLINE) -> NEWLINE 
-- On IF reduce production option(NEWLINE) -> NEWLINE 
-- On IDENT reduce production option(NEWLINE) -> NEWLINE 
-- On FUNCTION reduce production option(NEWLINE) -> NEWLINE 
-- On FROM reduce production option(NEWLINE) -> NEWLINE 
-- On FOR reduce production option(NEWLINE) -> NEWLINE 
-- On FALSE reduce production option(NEWLINE) -> NEWLINE 
-- On EOF reduce production list(NEWLINE) -> 
-- On DEF reduce production option(NEWLINE) -> NEWLINE 
-- On CHECK reduce production option(NEWLINE) -> NEWLINE 
-- On BREAK reduce production option(NEWLINE) -> NEWLINE 
-- On ASSUME reduce production option(NEWLINE) -> NEWLINE 
-- On ASSERT reduce production option(NEWLINE) -> NEWLINE 

State 2:
list(NEWLINE) -> NEWLINE . list(NEWLINE) [ EOF ]
-- On NEWLINE shift to state 2
-- On list(NEWLINE) shift to state 3
-- On EOF reduce production list(NEWLINE) -> 

State 3:
list(NEWLINE) -> NEWLINE list(NEWLINE) . [ EOF ]
-- On EOF reduce production list(NEWLINE) -> NEWLINE list(NEWLINE) 

State 4:
file -> option(NEWLINE) . nonempty_list(decl) option(NEWLINE) EOF [ # ]
-- On WHILE shift to state 5
-- On TRUE shift to state 6
-- On STRING shift to state 7
-- On RETURN shift to state 52
-- On PREDICATE shift to state 196
-- On NOT shift to state 8
-- On NONE shift to state 9
-- On MINUS shift to state 10
-- On LEFTSQ shift to state 11
-- On LEFTPAR shift to state 12
-- On LABEL shift to state 141
-- On INTEGER shift to state 13
-- On IF shift to state 143
-- On IDENT shift to state 14
-- On FUNCTION shift to state 203
-- On FROM shift to state 209
-- On FOR shift to state 148
-- On FALSE shift to state 15
-- On DEF shift to state 214
-- On CHECK shift to state 153
-- On BREAK shift to state 154
-- On ASSUME shift to state 155
-- On ASSERT shift to state 156
-- On stmt_desc shift to state 173
-- On stmt shift to state 235
-- On simple_stmt_desc shift to state 157
-- On simple_stmt shift to state 175
-- On nonempty_list(decl) shift to state 236
-- On located(stmt_desc) shift to state 178
-- On located(simple_stmt_desc) shift to state 161
-- On import shift to state 240
-- On ident shift to state 162
-- On func shift to state 241
-- On expr_desc shift to state 21
-- On expr shift to state 165
-- On def shift to state 242
-- On decl shift to state 243
-- On assertion_kind shift to state 171

State 5:
stmt_desc -> WHILE . expr COLON loop_body [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF END DEF CHECK BREAK ASSUME ASSERT ]
-- On TRUE shift to state 6
-- On STRING shift to state 7
-- On NOT shift to state 8
-- On NONE shift to state 9
-- On MINUS shift to state 10
-- On LEFTSQ shift to state 11
-- On LEFTPAR shift to state 12
-- On INTEGER shift to state 13
-- On IDENT shift to state 14
-- On FALSE shift to state 15
-- On ident shift to state 16
-- On expr_desc shift to state 21
-- On expr shift to state 50

State 6:
expr_desc -> TRUE . [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
-- On TIMES reduce production expr_desc -> TRUE 
-- On RIGHTSQ reduce production expr_desc -> TRUE 
-- On RIGHTPAR reduce production expr_desc -> TRUE 
-- On PLUS reduce production expr_desc -> TRUE 
-- On OR reduce production expr_desc -> TRUE 
-- On NEWLINE reduce production expr_desc -> TRUE 
-- On MOD reduce production expr_desc -> TRUE 
-- On MINUS reduce production expr_desc -> TRUE 
-- On LEFTSQ reduce production expr_desc -> TRUE 
-- On DIV reduce production expr_desc -> TRUE 
-- On COMMA reduce production expr_desc -> TRUE 
-- On COLON reduce production expr_desc -> TRUE 
-- On CMP reduce production expr_desc -> TRUE 
-- On AND reduce production expr_desc -> TRUE 

State 7:
expr_desc -> STRING . [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
-- On TIMES reduce production expr_desc -> STRING 
-- On RIGHTSQ reduce production expr_desc -> STRING 
-- On RIGHTPAR reduce production expr_desc -> STRING 
-- On PLUS reduce production expr_desc -> STRING 
-- On OR reduce production expr_desc -> STRING 
-- On NEWLINE reduce production expr_desc -> STRING 
-- On MOD reduce production expr_desc -> STRING 
-- On MINUS reduce production expr_desc -> STRING 
-- On LEFTSQ reduce production expr_desc -> STRING 
-- On DIV reduce production expr_desc -> STRING 
-- On COMMA reduce production expr_desc -> STRING 
-- On COLON reduce production expr_desc -> STRING 
-- On CMP reduce production expr_desc -> STRING 
-- On AND reduce production expr_desc -> STRING 

State 8:
expr_desc -> NOT . expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
-- On TRUE shift to state 6
-- On STRING shift to state 7
-- On NOT shift to state 8
-- On NONE shift to state 9
-- On MINUS shift to state 10
-- On LEFTSQ shift to state 11
-- On LEFTPAR shift to state 12
-- On INTEGER shift to state 13
-- On IDENT shift to state 14
-- On FALSE shift to state 15
-- On ident shift to state 16
-- On expr_desc shift to state 21
-- On expr shift to state 49

State 9:
expr_desc -> NONE . [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
-- On TIMES reduce production expr_desc -> NONE 
-- On RIGHTSQ reduce production expr_desc -> NONE 
-- On RIGHTPAR reduce production expr_desc -> NONE 
-- On PLUS reduce production expr_desc -> NONE 
-- On OR reduce production expr_desc -> NONE 
-- On NEWLINE reduce production expr_desc -> NONE 
-- On MOD reduce production expr_desc -> NONE 
-- On MINUS reduce production expr_desc -> NONE 
-- On LEFTSQ reduce production expr_desc -> NONE 
-- On DIV reduce production expr_desc -> NONE 
-- On COMMA reduce production expr_desc -> NONE 
-- On COLON reduce production expr_desc -> NONE 
-- On CMP reduce production expr_desc -> NONE 
-- On AND reduce production expr_desc -> NONE 

State 10:
expr_desc -> MINUS . expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
-- On TRUE shift to state 6
-- On STRING shift to state 7
-- On NOT shift to state 8
-- On NONE shift to state 9
-- On MINUS shift to state 10
-- On LEFTSQ shift to state 11
-- On LEFTPAR shift to state 12
-- On INTEGER shift to state 13
-- On IDENT shift to state 14
-- On FALSE shift to state 15
-- On ident shift to state 16
-- On expr_desc shift to state 21
-- On expr shift to state 48

State 11:
expr_desc -> LEFTSQ . loption(separated_nonempty_list(COMMA,expr)) RIGHTSQ [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
-- On TRUE shift to state 6
-- On STRING shift to state 7
-- On NOT shift to state 8
-- On NONE shift to state 9
-- On MINUS shift to state 10
-- On LEFTSQ shift to state 11
-- On LEFTPAR shift to state 12
-- On INTEGER shift to state 13
-- On IDENT shift to state 14
-- On FALSE shift to state 15
-- On separated_nonempty_list(COMMA,expr) shift to state 18
-- On loption(separated_nonempty_list(COMMA,expr)) shift to state 46
-- On ident shift to state 16
-- On expr_desc shift to state 21
-- On expr shift to state 22
-- On RIGHTSQ reduce production loption(separated_nonempty_list(COMMA,expr)) -> 

State 12:
expr_desc -> LEFTPAR . expr RIGHTPAR [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
-- On TRUE shift to state 6
-- On STRING shift to state 7
-- On NOT shift to state 8
-- On NONE shift to state 9
-- On MINUS shift to state 10
-- On LEFTSQ shift to state 11
-- On LEFTPAR shift to state 12
-- On INTEGER shift to state 13
-- On IDENT shift to state 14
-- On FALSE shift to state 15
-- On ident shift to state 16
-- On expr_desc shift to state 21
-- On expr shift to state 44

State 13:
expr_desc -> INTEGER . [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
-- On TIMES reduce production expr_desc -> INTEGER 
-- On RIGHTSQ reduce production expr_desc -> INTEGER 
-- On RIGHTPAR reduce production expr_desc -> INTEGER 
-- On PLUS reduce production expr_desc -> INTEGER 
-- On OR reduce production expr_desc -> INTEGER 
-- On NEWLINE reduce production expr_desc -> INTEGER 
-- On MOD reduce production expr_desc -> INTEGER 
-- On MINUS reduce production expr_desc -> INTEGER 
-- On LEFTSQ reduce production expr_desc -> INTEGER 
-- On DIV reduce production expr_desc -> INTEGER 
-- On COMMA reduce production expr_desc -> INTEGER 
-- On COLON reduce production expr_desc -> INTEGER 
-- On CMP reduce production expr_desc -> INTEGER 
-- On AND reduce production expr_desc -> INTEGER 

State 14:
ident -> IDENT . [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LEFTSQ LEFTPAR LARROW IN IMPORT EQUAL ELSE DOT DIV COMMA COLON CMP ARROW AND ]
-- On TIMES reduce production ident -> IDENT 
-- On THEN reduce production ident -> IDENT 
-- On RIGHTSQ reduce production ident -> IDENT 
-- On RIGHTPAR reduce production ident -> IDENT 
-- On PLUS reduce production ident -> IDENT 
-- On OR reduce production ident -> IDENT 
-- On NEWLINE reduce production ident -> IDENT 
-- On MOD reduce production ident -> IDENT 
-- On MINUS reduce production ident -> IDENT 
-- On LRARROW reduce production ident -> IDENT 
-- On LEFTSQ reduce production ident -> IDENT 
-- On LEFTPAR reduce production ident -> IDENT 
-- On LARROW reduce production ident -> IDENT 
-- On IN reduce production ident -> IDENT 
-- On IMPORT reduce production ident -> IDENT 
-- On EQUAL reduce production ident -> IDENT 
-- On ELSE reduce production ident -> IDENT 
-- On DOT reduce production ident -> IDENT 
-- On DIV reduce production ident -> IDENT 
-- On COMMA reduce production ident -> IDENT 
-- On COLON reduce production ident -> IDENT 
-- On CMP reduce production ident -> IDENT 
-- On ARROW reduce production ident -> IDENT 
-- On AND reduce production ident -> IDENT 

State 15:
expr_desc -> FALSE . [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
-- On TIMES reduce production expr_desc -> FALSE 
-- On RIGHTSQ reduce production expr_desc -> FALSE 
-- On RIGHTPAR reduce production expr_desc -> FALSE 
-- On PLUS reduce production expr_desc -> FALSE 
-- On OR reduce production expr_desc -> FALSE 
-- On NEWLINE reduce production expr_desc -> FALSE 
-- On MOD reduce production expr_desc -> FALSE 
-- On MINUS reduce production expr_desc -> FALSE 
-- On LEFTSQ reduce production expr_desc -> FALSE 
-- On DIV reduce production expr_desc -> FALSE 
-- On COMMA reduce production expr_desc -> FALSE 
-- On COLON reduce production expr_desc -> FALSE 
-- On CMP reduce production expr_desc -> FALSE 
-- On AND reduce production expr_desc -> FALSE 

State 16:
expr_desc -> ident . [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> ident . LEFTPAR loption(separated_nonempty_list(COMMA,expr)) RIGHTPAR [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
-- On LEFTPAR shift to state 17
-- On TIMES reduce production expr_desc -> ident 
-- On RIGHTSQ reduce production expr_desc -> ident 
-- On RIGHTPAR reduce production expr_desc -> ident 
-- On PLUS reduce production expr_desc -> ident 
-- On OR reduce production expr_desc -> ident 
-- On NEWLINE reduce production expr_desc -> ident 
-- On MOD reduce production expr_desc -> ident 
-- On MINUS reduce production expr_desc -> ident 
-- On LEFTSQ reduce production expr_desc -> ident 
-- On DIV reduce production expr_desc -> ident 
-- On COMMA reduce production expr_desc -> ident 
-- On COLON reduce production expr_desc -> ident 
-- On CMP reduce production expr_desc -> ident 
-- On AND reduce production expr_desc -> ident 

State 17:
expr_desc -> ident LEFTPAR . loption(separated_nonempty_list(COMMA,expr)) RIGHTPAR [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
-- On TRUE shift to state 6
-- On STRING shift to state 7
-- On NOT shift to state 8
-- On NONE shift to state 9
-- On MINUS shift to state 10
-- On LEFTSQ shift to state 11
-- On LEFTPAR shift to state 12
-- On INTEGER shift to state 13
-- On IDENT shift to state 14
-- On FALSE shift to state 15
-- On separated_nonempty_list(COMMA,expr) shift to state 18
-- On loption(separated_nonempty_list(COMMA,expr)) shift to state 19
-- On ident shift to state 16
-- On expr_desc shift to state 21
-- On expr shift to state 22
-- On RIGHTPAR reduce production loption(separated_nonempty_list(COMMA,expr)) -> 

State 18:
loption(separated_nonempty_list(COMMA,expr)) -> separated_nonempty_list(COMMA,expr) . [ RIGHTSQ RIGHTPAR ]
-- On RIGHTSQ reduce production loption(separated_nonempty_list(COMMA,expr)) -> separated_nonempty_list(COMMA,expr) 
-- On RIGHTPAR reduce production loption(separated_nonempty_list(COMMA,expr)) -> separated_nonempty_list(COMMA,expr) 

State 19:
expr_desc -> ident LEFTPAR loption(separated_nonempty_list(COMMA,expr)) . RIGHTPAR [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
-- On RIGHTPAR shift to state 20

State 20:
expr_desc -> ident LEFTPAR loption(separated_nonempty_list(COMMA,expr)) RIGHTPAR . [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
-- On TIMES reduce production expr_desc -> ident LEFTPAR loption(separated_nonempty_list(COMMA,expr)) RIGHTPAR 
-- On RIGHTSQ reduce production expr_desc -> ident LEFTPAR loption(separated_nonempty_list(COMMA,expr)) RIGHTPAR 
-- On RIGHTPAR reduce production expr_desc -> ident LEFTPAR loption(separated_nonempty_list(COMMA,expr)) RIGHTPAR 
-- On PLUS reduce production expr_desc -> ident LEFTPAR loption(separated_nonempty_list(COMMA,expr)) RIGHTPAR 
-- On OR reduce production expr_desc -> ident LEFTPAR loption(separated_nonempty_list(COMMA,expr)) RIGHTPAR 
-- On NEWLINE reduce production expr_desc -> ident LEFTPAR loption(separated_nonempty_list(COMMA,expr)) RIGHTPAR 
-- On MOD reduce production expr_desc -> ident LEFTPAR loption(separated_nonempty_list(COMMA,expr)) RIGHTPAR 
-- On MINUS reduce production expr_desc -> ident LEFTPAR loption(separated_nonempty_list(COMMA,expr)) RIGHTPAR 
-- On LEFTSQ reduce production expr_desc -> ident LEFTPAR loption(separated_nonempty_list(COMMA,expr)) RIGHTPAR 
-- On DIV reduce production expr_desc -> ident LEFTPAR loption(separated_nonempty_list(COMMA,expr)) RIGHTPAR 
-- On COMMA reduce production expr_desc -> ident LEFTPAR loption(separated_nonempty_list(COMMA,expr)) RIGHTPAR 
-- On COLON reduce production expr_desc -> ident LEFTPAR loption(separated_nonempty_list(COMMA,expr)) RIGHTPAR 
-- On CMP reduce production expr_desc -> ident LEFTPAR loption(separated_nonempty_list(COMMA,expr)) RIGHTPAR 
-- On AND reduce production expr_desc -> ident LEFTPAR loption(separated_nonempty_list(COMMA,expr)) RIGHTPAR 

State 21:
expr -> expr_desc . [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
-- On TIMES reduce production expr -> expr_desc 
-- On RIGHTSQ reduce production expr -> expr_desc 
-- On RIGHTPAR reduce production expr -> expr_desc 
-- On PLUS reduce production expr -> expr_desc 
-- On OR reduce production expr -> expr_desc 
-- On NEWLINE reduce production expr -> expr_desc 
-- On MOD reduce production expr -> expr_desc 
-- On MINUS reduce production expr -> expr_desc 
-- On LEFTSQ reduce production expr -> expr_desc 
-- On DIV reduce production expr -> expr_desc 
-- On COMMA reduce production expr -> expr_desc 
-- On COLON reduce production expr -> expr_desc 
-- On CMP reduce production expr -> expr_desc 
-- On AND reduce production expr -> expr_desc 

State 22:
expr_desc -> expr . LEFTSQ expr RIGHTSQ [ TIMES RIGHTSQ RIGHTPAR PLUS OR MOD MINUS LEFTSQ DIV COMMA CMP AND ]
expr_desc -> expr . PLUS expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR MOD MINUS LEFTSQ DIV COMMA CMP AND ]
expr_desc -> expr . MINUS expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR MOD MINUS LEFTSQ DIV COMMA CMP AND ]
expr_desc -> expr . DIV expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR MOD MINUS LEFTSQ DIV COMMA CMP AND ]
expr_desc -> expr . MOD expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR MOD MINUS LEFTSQ DIV COMMA CMP AND ]
expr_desc -> expr . CMP expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR MOD MINUS LEFTSQ DIV COMMA CMP AND ]
expr_desc -> expr . AND expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR MOD MINUS LEFTSQ DIV COMMA CMP AND ]
expr_desc -> expr . OR expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR MOD MINUS LEFTSQ DIV COMMA CMP AND ]
expr_desc -> expr . TIMES expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR MOD MINUS LEFTSQ DIV COMMA CMP AND ]
separated_nonempty_list(COMMA,expr) -> expr . [ RIGHTSQ RIGHTPAR ]
separated_nonempty_list(COMMA,expr) -> expr . COMMA separated_nonempty_list(COMMA,expr) [ RIGHTSQ RIGHTPAR ]
-- On TIMES shift to state 23
-- On PLUS shift to state 28
-- On OR shift to state 34
-- On MOD shift to state 30
-- On MINUS shift to state 36
-- On LEFTSQ shift to state 25
-- On DIV shift to state 32
-- On COMMA shift to state 42
-- On CMP shift to state 38
-- On AND shift to state 40
-- On RIGHTSQ reduce production separated_nonempty_list(COMMA,expr) -> expr 
-- On RIGHTPAR reduce production separated_nonempty_list(COMMA,expr) -> expr 

State 23:
expr_desc -> expr TIMES . expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
-- On TRUE shift to state 6
-- On STRING shift to state 7
-- On NOT shift to state 8
-- On NONE shift to state 9
-- On MINUS shift to state 10
-- On LEFTSQ shift to state 11
-- On LEFTPAR shift to state 12
-- On INTEGER shift to state 13
-- On IDENT shift to state 14
-- On FALSE shift to state 15
-- On ident shift to state 16
-- On expr_desc shift to state 21
-- On expr shift to state 24

State 24:
expr_desc -> expr . LEFTSQ expr RIGHTSQ [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . PLUS expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . MINUS expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . DIV expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . MOD expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . CMP expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . AND expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . OR expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . TIMES expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr TIMES expr . [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
-- On LEFTSQ shift to state 25
-- On TIMES reduce production expr_desc -> expr TIMES expr 
-- On RIGHTSQ reduce production expr_desc -> expr TIMES expr 
-- On RIGHTPAR reduce production expr_desc -> expr TIMES expr 
-- On PLUS reduce production expr_desc -> expr TIMES expr 
-- On OR reduce production expr_desc -> expr TIMES expr 
-- On NEWLINE reduce production expr_desc -> expr TIMES expr 
-- On MOD reduce production expr_desc -> expr TIMES expr 
-- On MINUS reduce production expr_desc -> expr TIMES expr 
-- On DIV reduce production expr_desc -> expr TIMES expr 
-- On COMMA reduce production expr_desc -> expr TIMES expr 
-- On COLON reduce production expr_desc -> expr TIMES expr 
-- On CMP reduce production expr_desc -> expr TIMES expr 
-- On AND reduce production expr_desc -> expr TIMES expr 

State 25:
expr_desc -> expr LEFTSQ . expr RIGHTSQ [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
-- On TRUE shift to state 6
-- On STRING shift to state 7
-- On NOT shift to state 8
-- On NONE shift to state 9
-- On MINUS shift to state 10
-- On LEFTSQ shift to state 11
-- On LEFTPAR shift to state 12
-- On INTEGER shift to state 13
-- On IDENT shift to state 14
-- On FALSE shift to state 15
-- On ident shift to state 16
-- On expr_desc shift to state 21
-- On expr shift to state 26

State 26:
expr_desc -> expr . LEFTSQ expr RIGHTSQ [ TIMES RIGHTSQ PLUS OR MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr LEFTSQ expr . RIGHTSQ [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . PLUS expr [ TIMES RIGHTSQ PLUS OR MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . MINUS expr [ TIMES RIGHTSQ PLUS OR MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . DIV expr [ TIMES RIGHTSQ PLUS OR MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . MOD expr [ TIMES RIGHTSQ PLUS OR MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . CMP expr [ TIMES RIGHTSQ PLUS OR MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . AND expr [ TIMES RIGHTSQ PLUS OR MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . OR expr [ TIMES RIGHTSQ PLUS OR MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . TIMES expr [ TIMES RIGHTSQ PLUS OR MOD MINUS LEFTSQ DIV CMP AND ]
-- On TIMES shift to state 23
-- On RIGHTSQ shift to state 27
-- On PLUS shift to state 28
-- On OR shift to state 34
-- On MOD shift to state 30
-- On MINUS shift to state 36
-- On LEFTSQ shift to state 25
-- On DIV shift to state 32
-- On CMP shift to state 38
-- On AND shift to state 40

State 27:
expr_desc -> expr LEFTSQ expr RIGHTSQ . [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
-- On TIMES reduce production expr_desc -> expr LEFTSQ expr RIGHTSQ 
-- On RIGHTSQ reduce production expr_desc -> expr LEFTSQ expr RIGHTSQ 
-- On RIGHTPAR reduce production expr_desc -> expr LEFTSQ expr RIGHTSQ 
-- On PLUS reduce production expr_desc -> expr LEFTSQ expr RIGHTSQ 
-- On OR reduce production expr_desc -> expr LEFTSQ expr RIGHTSQ 
-- On NEWLINE reduce production expr_desc -> expr LEFTSQ expr RIGHTSQ 
-- On MOD reduce production expr_desc -> expr LEFTSQ expr RIGHTSQ 
-- On MINUS reduce production expr_desc -> expr LEFTSQ expr RIGHTSQ 
-- On LEFTSQ reduce production expr_desc -> expr LEFTSQ expr RIGHTSQ 
-- On DIV reduce production expr_desc -> expr LEFTSQ expr RIGHTSQ 
-- On COMMA reduce production expr_desc -> expr LEFTSQ expr RIGHTSQ 
-- On COLON reduce production expr_desc -> expr LEFTSQ expr RIGHTSQ 
-- On CMP reduce production expr_desc -> expr LEFTSQ expr RIGHTSQ 
-- On AND reduce production expr_desc -> expr LEFTSQ expr RIGHTSQ 

State 28:
expr_desc -> expr PLUS . expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
-- On TRUE shift to state 6
-- On STRING shift to state 7
-- On NOT shift to state 8
-- On NONE shift to state 9
-- On MINUS shift to state 10
-- On LEFTSQ shift to state 11
-- On LEFTPAR shift to state 12
-- On INTEGER shift to state 13
-- On IDENT shift to state 14
-- On FALSE shift to state 15
-- On ident shift to state 16
-- On expr_desc shift to state 21
-- On expr shift to state 29

State 29:
expr_desc -> expr . LEFTSQ expr RIGHTSQ [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . PLUS expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr PLUS expr . [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . MINUS expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . DIV expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . MOD expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . CMP expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . AND expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . OR expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . TIMES expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
-- On TIMES shift to state 23
-- On MOD shift to state 30
-- On LEFTSQ shift to state 25
-- On DIV shift to state 32
-- On RIGHTSQ reduce production expr_desc -> expr PLUS expr 
-- On RIGHTPAR reduce production expr_desc -> expr PLUS expr 
-- On PLUS reduce production expr_desc -> expr PLUS expr 
-- On OR reduce production expr_desc -> expr PLUS expr 
-- On NEWLINE reduce production expr_desc -> expr PLUS expr 
-- On MINUS reduce production expr_desc -> expr PLUS expr 
-- On COMMA reduce production expr_desc -> expr PLUS expr 
-- On COLON reduce production expr_desc -> expr PLUS expr 
-- On CMP reduce production expr_desc -> expr PLUS expr 
-- On AND reduce production expr_desc -> expr PLUS expr 

State 30:
expr_desc -> expr MOD . expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
-- On TRUE shift to state 6
-- On STRING shift to state 7
-- On NOT shift to state 8
-- On NONE shift to state 9
-- On MINUS shift to state 10
-- On LEFTSQ shift to state 11
-- On LEFTPAR shift to state 12
-- On INTEGER shift to state 13
-- On IDENT shift to state 14
-- On FALSE shift to state 15
-- On ident shift to state 16
-- On expr_desc shift to state 21
-- On expr shift to state 31

State 31:
expr_desc -> expr . LEFTSQ expr RIGHTSQ [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . PLUS expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . MINUS expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . DIV expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . MOD expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr MOD expr . [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . CMP expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . AND expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . OR expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . TIMES expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
-- On LEFTSQ shift to state 25
-- On TIMES reduce production expr_desc -> expr MOD expr 
-- On RIGHTSQ reduce production expr_desc -> expr MOD expr 
-- On RIGHTPAR reduce production expr_desc -> expr MOD expr 
-- On PLUS reduce production expr_desc -> expr MOD expr 
-- On OR reduce production expr_desc -> expr MOD expr 
-- On NEWLINE reduce production expr_desc -> expr MOD expr 
-- On MOD reduce production expr_desc -> expr MOD expr 
-- On MINUS reduce production expr_desc -> expr MOD expr 
-- On DIV reduce production expr_desc -> expr MOD expr 
-- On COMMA reduce production expr_desc -> expr MOD expr 
-- On COLON reduce production expr_desc -> expr MOD expr 
-- On CMP reduce production expr_desc -> expr MOD expr 
-- On AND reduce production expr_desc -> expr MOD expr 

State 32:
expr_desc -> expr DIV . expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
-- On TRUE shift to state 6
-- On STRING shift to state 7
-- On NOT shift to state 8
-- On NONE shift to state 9
-- On MINUS shift to state 10
-- On LEFTSQ shift to state 11
-- On LEFTPAR shift to state 12
-- On INTEGER shift to state 13
-- On IDENT shift to state 14
-- On FALSE shift to state 15
-- On ident shift to state 16
-- On expr_desc shift to state 21
-- On expr shift to state 33

State 33:
expr_desc -> expr . LEFTSQ expr RIGHTSQ [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . PLUS expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . MINUS expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . DIV expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr DIV expr . [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . MOD expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . CMP expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . AND expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . OR expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . TIMES expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
-- On LEFTSQ shift to state 25
-- On TIMES reduce production expr_desc -> expr DIV expr 
-- On RIGHTSQ reduce production expr_desc -> expr DIV expr 
-- On RIGHTPAR reduce production expr_desc -> expr DIV expr 
-- On PLUS reduce production expr_desc -> expr DIV expr 
-- On OR reduce production expr_desc -> expr DIV expr 
-- On NEWLINE reduce production expr_desc -> expr DIV expr 
-- On MOD reduce production expr_desc -> expr DIV expr 
-- On MINUS reduce production expr_desc -> expr DIV expr 
-- On DIV reduce production expr_desc -> expr DIV expr 
-- On COMMA reduce production expr_desc -> expr DIV expr 
-- On COLON reduce production expr_desc -> expr DIV expr 
-- On CMP reduce production expr_desc -> expr DIV expr 
-- On AND reduce production expr_desc -> expr DIV expr 

State 34:
expr_desc -> expr OR . expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
-- On TRUE shift to state 6
-- On STRING shift to state 7
-- On NOT shift to state 8
-- On NONE shift to state 9
-- On MINUS shift to state 10
-- On LEFTSQ shift to state 11
-- On LEFTPAR shift to state 12
-- On INTEGER shift to state 13
-- On IDENT shift to state 14
-- On FALSE shift to state 15
-- On ident shift to state 16
-- On expr_desc shift to state 21
-- On expr shift to state 35

State 35:
expr_desc -> expr . LEFTSQ expr RIGHTSQ [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . PLUS expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . MINUS expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . DIV expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . MOD expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . CMP expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . AND expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . OR expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr OR expr . [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . TIMES expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
-- On TIMES shift to state 23
-- On PLUS shift to state 28
-- On OR shift to state 34
-- On MOD shift to state 30
-- On MINUS shift to state 36
-- On LEFTSQ shift to state 25
-- On DIV shift to state 32
-- On CMP shift to state 38
-- On AND shift to state 40
-- On RIGHTSQ reduce production expr_desc -> expr OR expr 
-- On RIGHTPAR reduce production expr_desc -> expr OR expr 
-- On NEWLINE reduce production expr_desc -> expr OR expr 
-- On COMMA reduce production expr_desc -> expr OR expr 
-- On COLON reduce production expr_desc -> expr OR expr 

State 36:
expr_desc -> expr MINUS . expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
-- On TRUE shift to state 6
-- On STRING shift to state 7
-- On NOT shift to state 8
-- On NONE shift to state 9
-- On MINUS shift to state 10
-- On LEFTSQ shift to state 11
-- On LEFTPAR shift to state 12
-- On INTEGER shift to state 13
-- On IDENT shift to state 14
-- On FALSE shift to state 15
-- On ident shift to state 16
-- On expr_desc shift to state 21
-- On expr shift to state 37

State 37:
expr_desc -> expr . LEFTSQ expr RIGHTSQ [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . PLUS expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . MINUS expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr MINUS expr . [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . DIV expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . MOD expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . CMP expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . AND expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . OR expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . TIMES expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
-- On TIMES shift to state 23
-- On MOD shift to state 30
-- On LEFTSQ shift to state 25
-- On DIV shift to state 32
-- On RIGHTSQ reduce production expr_desc -> expr MINUS expr 
-- On RIGHTPAR reduce production expr_desc -> expr MINUS expr 
-- On PLUS reduce production expr_desc -> expr MINUS expr 
-- On OR reduce production expr_desc -> expr MINUS expr 
-- On NEWLINE reduce production expr_desc -> expr MINUS expr 
-- On MINUS reduce production expr_desc -> expr MINUS expr 
-- On COMMA reduce production expr_desc -> expr MINUS expr 
-- On COLON reduce production expr_desc -> expr MINUS expr 
-- On CMP reduce production expr_desc -> expr MINUS expr 
-- On AND reduce production expr_desc -> expr MINUS expr 

State 38:
expr_desc -> expr CMP . expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
-- On TRUE shift to state 6
-- On STRING shift to state 7
-- On NOT shift to state 8
-- On NONE shift to state 9
-- On MINUS shift to state 10
-- On LEFTSQ shift to state 11
-- On LEFTPAR shift to state 12
-- On INTEGER shift to state 13
-- On IDENT shift to state 14
-- On FALSE shift to state 15
-- On ident shift to state 16
-- On expr_desc shift to state 21
-- On expr shift to state 39

State 39:
expr_desc -> expr . LEFTSQ expr RIGHTSQ [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . PLUS expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . MINUS expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . DIV expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . MOD expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . CMP expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr CMP expr . [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . AND expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . OR expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . TIMES expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
-- On TIMES shift to state 23
-- On PLUS shift to state 28
-- On MOD shift to state 30
-- On MINUS shift to state 36
-- On LEFTSQ shift to state 25
-- On DIV shift to state 32
-- On CMP shift to state 38
-- On RIGHTSQ reduce production expr_desc -> expr CMP expr 
-- On RIGHTPAR reduce production expr_desc -> expr CMP expr 
-- On OR reduce production expr_desc -> expr CMP expr 
-- On NEWLINE reduce production expr_desc -> expr CMP expr 
-- On COMMA reduce production expr_desc -> expr CMP expr 
-- On COLON reduce production expr_desc -> expr CMP expr 
-- On AND reduce production expr_desc -> expr CMP expr 

State 40:
expr_desc -> expr AND . expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
-- On TRUE shift to state 6
-- On STRING shift to state 7
-- On NOT shift to state 8
-- On NONE shift to state 9
-- On MINUS shift to state 10
-- On LEFTSQ shift to state 11
-- On LEFTPAR shift to state 12
-- On INTEGER shift to state 13
-- On IDENT shift to state 14
-- On FALSE shift to state 15
-- On ident shift to state 16
-- On expr_desc shift to state 21
-- On expr shift to state 41

State 41:
expr_desc -> expr . LEFTSQ expr RIGHTSQ [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . PLUS expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . MINUS expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . DIV expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . MOD expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . CMP expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . AND expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr AND expr . [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . OR expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . TIMES expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
-- On TIMES shift to state 23
-- On PLUS shift to state 28
-- On MOD shift to state 30
-- On MINUS shift to state 36
-- On LEFTSQ shift to state 25
-- On DIV shift to state 32
-- On CMP shift to state 38
-- On AND shift to state 40
-- On RIGHTSQ reduce production expr_desc -> expr AND expr 
-- On RIGHTPAR reduce production expr_desc -> expr AND expr 
-- On OR reduce production expr_desc -> expr AND expr 
-- On NEWLINE reduce production expr_desc -> expr AND expr 
-- On COMMA reduce production expr_desc -> expr AND expr 
-- On COLON reduce production expr_desc -> expr AND expr 

State 42:
separated_nonempty_list(COMMA,expr) -> expr COMMA . separated_nonempty_list(COMMA,expr) [ RIGHTSQ RIGHTPAR ]
-- On TRUE shift to state 6
-- On STRING shift to state 7
-- On NOT shift to state 8
-- On NONE shift to state 9
-- On MINUS shift to state 10
-- On LEFTSQ shift to state 11
-- On LEFTPAR shift to state 12
-- On INTEGER shift to state 13
-- On IDENT shift to state 14
-- On FALSE shift to state 15
-- On separated_nonempty_list(COMMA,expr) shift to state 43
-- On ident shift to state 16
-- On expr_desc shift to state 21
-- On expr shift to state 22

State 43:
separated_nonempty_list(COMMA,expr) -> expr COMMA separated_nonempty_list(COMMA,expr) . [ RIGHTSQ RIGHTPAR ]
-- On RIGHTSQ reduce production separated_nonempty_list(COMMA,expr) -> expr COMMA separated_nonempty_list(COMMA,expr) 
-- On RIGHTPAR reduce production separated_nonempty_list(COMMA,expr) -> expr COMMA separated_nonempty_list(COMMA,expr) 

State 44:
expr_desc -> expr . LEFTSQ expr RIGHTSQ [ TIMES RIGHTPAR PLUS OR MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . PLUS expr [ TIMES RIGHTPAR PLUS OR MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . MINUS expr [ TIMES RIGHTPAR PLUS OR MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . DIV expr [ TIMES RIGHTPAR PLUS OR MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . MOD expr [ TIMES RIGHTPAR PLUS OR MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . CMP expr [ TIMES RIGHTPAR PLUS OR MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . AND expr [ TIMES RIGHTPAR PLUS OR MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . OR expr [ TIMES RIGHTPAR PLUS OR MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . TIMES expr [ TIMES RIGHTPAR PLUS OR MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> LEFTPAR expr . RIGHTPAR [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
-- On TIMES shift to state 23
-- On RIGHTPAR shift to state 45
-- On PLUS shift to state 28
-- On OR shift to state 34
-- On MOD shift to state 30
-- On MINUS shift to state 36
-- On LEFTSQ shift to state 25
-- On DIV shift to state 32
-- On CMP shift to state 38
-- On AND shift to state 40

State 45:
expr_desc -> LEFTPAR expr RIGHTPAR . [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
-- On TIMES reduce production expr_desc -> LEFTPAR expr RIGHTPAR 
-- On RIGHTSQ reduce production expr_desc -> LEFTPAR expr RIGHTPAR 
-- On RIGHTPAR reduce production expr_desc -> LEFTPAR expr RIGHTPAR 
-- On PLUS reduce production expr_desc -> LEFTPAR expr RIGHTPAR 
-- On OR reduce production expr_desc -> LEFTPAR expr RIGHTPAR 
-- On NEWLINE reduce production expr_desc -> LEFTPAR expr RIGHTPAR 
-- On MOD reduce production expr_desc -> LEFTPAR expr RIGHTPAR 
-- On MINUS reduce production expr_desc -> LEFTPAR expr RIGHTPAR 
-- On LEFTSQ reduce production expr_desc -> LEFTPAR expr RIGHTPAR 
-- On DIV reduce production expr_desc -> LEFTPAR expr RIGHTPAR 
-- On COMMA reduce production expr_desc -> LEFTPAR expr RIGHTPAR 
-- On COLON reduce production expr_desc -> LEFTPAR expr RIGHTPAR 
-- On CMP reduce production expr_desc -> LEFTPAR expr RIGHTPAR 
-- On AND reduce production expr_desc -> LEFTPAR expr RIGHTPAR 

State 46:
expr_desc -> LEFTSQ loption(separated_nonempty_list(COMMA,expr)) . RIGHTSQ [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
-- On RIGHTSQ shift to state 47

State 47:
expr_desc -> LEFTSQ loption(separated_nonempty_list(COMMA,expr)) RIGHTSQ . [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
-- On TIMES reduce production expr_desc -> LEFTSQ loption(separated_nonempty_list(COMMA,expr)) RIGHTSQ 
-- On RIGHTSQ reduce production expr_desc -> LEFTSQ loption(separated_nonempty_list(COMMA,expr)) RIGHTSQ 
-- On RIGHTPAR reduce production expr_desc -> LEFTSQ loption(separated_nonempty_list(COMMA,expr)) RIGHTSQ 
-- On PLUS reduce production expr_desc -> LEFTSQ loption(separated_nonempty_list(COMMA,expr)) RIGHTSQ 
-- On OR reduce production expr_desc -> LEFTSQ loption(separated_nonempty_list(COMMA,expr)) RIGHTSQ 
-- On NEWLINE reduce production expr_desc -> LEFTSQ loption(separated_nonempty_list(COMMA,expr)) RIGHTSQ 
-- On MOD reduce production expr_desc -> LEFTSQ loption(separated_nonempty_list(COMMA,expr)) RIGHTSQ 
-- On MINUS reduce production expr_desc -> LEFTSQ loption(separated_nonempty_list(COMMA,expr)) RIGHTSQ 
-- On LEFTSQ reduce production expr_desc -> LEFTSQ loption(separated_nonempty_list(COMMA,expr)) RIGHTSQ 
-- On DIV reduce production expr_desc -> LEFTSQ loption(separated_nonempty_list(COMMA,expr)) RIGHTSQ 
-- On COMMA reduce production expr_desc -> LEFTSQ loption(separated_nonempty_list(COMMA,expr)) RIGHTSQ 
-- On COLON reduce production expr_desc -> LEFTSQ loption(separated_nonempty_list(COMMA,expr)) RIGHTSQ 
-- On CMP reduce production expr_desc -> LEFTSQ loption(separated_nonempty_list(COMMA,expr)) RIGHTSQ 
-- On AND reduce production expr_desc -> LEFTSQ loption(separated_nonempty_list(COMMA,expr)) RIGHTSQ 

State 48:
expr_desc -> expr . LEFTSQ expr RIGHTSQ [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> MINUS expr . [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . PLUS expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . MINUS expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . DIV expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . MOD expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . CMP expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . AND expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . OR expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . TIMES expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
-- On LEFTSQ shift to state 25
-- On TIMES reduce production expr_desc -> MINUS expr 
-- On RIGHTSQ reduce production expr_desc -> MINUS expr 
-- On RIGHTPAR reduce production expr_desc -> MINUS expr 
-- On PLUS reduce production expr_desc -> MINUS expr 
-- On OR reduce production expr_desc -> MINUS expr 
-- On NEWLINE reduce production expr_desc -> MINUS expr 
-- On MOD reduce production expr_desc -> MINUS expr 
-- On MINUS reduce production expr_desc -> MINUS expr 
-- On DIV reduce production expr_desc -> MINUS expr 
-- On COMMA reduce production expr_desc -> MINUS expr 
-- On COLON reduce production expr_desc -> MINUS expr 
-- On CMP reduce production expr_desc -> MINUS expr 
-- On AND reduce production expr_desc -> MINUS expr 

State 49:
expr_desc -> expr . LEFTSQ expr RIGHTSQ [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> NOT expr . [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . PLUS expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . MINUS expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . DIV expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . MOD expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . CMP expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . AND expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . OR expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . TIMES expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
-- On TIMES shift to state 23
-- On PLUS shift to state 28
-- On MOD shift to state 30
-- On MINUS shift to state 36
-- On LEFTSQ shift to state 25
-- On DIV shift to state 32
-- On CMP shift to state 38
-- On RIGHTSQ reduce production expr_desc -> NOT expr 
-- On RIGHTPAR reduce production expr_desc -> NOT expr 
-- On OR reduce production expr_desc -> NOT expr 
-- On NEWLINE reduce production expr_desc -> NOT expr 
-- On COMMA reduce production expr_desc -> NOT expr 
-- On COLON reduce production expr_desc -> NOT expr 
-- On AND reduce production expr_desc -> NOT expr 

State 50:
expr_desc -> expr . LEFTSQ expr RIGHTSQ [ TIMES PLUS OR MOD MINUS LEFTSQ DIV COLON CMP AND ]
expr_desc -> expr . PLUS expr [ TIMES PLUS OR MOD MINUS LEFTSQ DIV COLON CMP AND ]
expr_desc -> expr . MINUS expr [ TIMES PLUS OR MOD MINUS LEFTSQ DIV COLON CMP AND ]
expr_desc -> expr . DIV expr [ TIMES PLUS OR MOD MINUS LEFTSQ DIV COLON CMP AND ]
expr_desc -> expr . MOD expr [ TIMES PLUS OR MOD MINUS LEFTSQ DIV COLON CMP AND ]
expr_desc -> expr . CMP expr [ TIMES PLUS OR MOD MINUS LEFTSQ DIV COLON CMP AND ]
expr_desc -> expr . AND expr [ TIMES PLUS OR MOD MINUS LEFTSQ DIV COLON CMP AND ]
expr_desc -> expr . OR expr [ TIMES PLUS OR MOD MINUS LEFTSQ DIV COLON CMP AND ]
expr_desc -> expr . TIMES expr [ TIMES PLUS OR MOD MINUS LEFTSQ DIV COLON CMP AND ]
stmt_desc -> WHILE expr . COLON loop_body [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF END DEF CHECK BREAK ASSUME ASSERT ]
-- On TIMES shift to state 23
-- On PLUS shift to state 28
-- On OR shift to state 34
-- On MOD shift to state 30
-- On MINUS shift to state 36
-- On LEFTSQ shift to state 25
-- On DIV shift to state 32
-- On COLON shift to state 51
-- On CMP shift to state 38
-- On AND shift to state 40

State 51:
stmt_desc -> WHILE expr COLON . loop_body [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF END DEF CHECK BREAK ASSUME ASSERT ]
-- On TRUE shift to state 6
-- On STRING shift to state 7
-- On RETURN shift to state 52
-- On NOT shift to state 8
-- On NONE shift to state 9
-- On NEWLINE shift to state 54
-- On MINUS shift to state 10
-- On LEFTSQ shift to state 11
-- On LEFTPAR shift to state 12
-- On LABEL shift to state 141
-- On INTEGER shift to state 13
-- On IDENT shift to state 14
-- On FALSE shift to state 15
-- On CHECK shift to state 153
-- On BREAK shift to state 154
-- On ASSUME shift to state 155
-- On ASSERT shift to state 156
-- On simple_stmt_desc shift to state 157
-- On simple_stmt shift to state 158
-- On loop_body shift to state 195
-- On located(simple_stmt_desc) shift to state 161
-- On ident shift to state 162
-- On expr_desc shift to state 21
-- On expr shift to state 165
-- On assertion_kind shift to state 171

State 52:
simple_stmt_desc -> RETURN . expr [ NEWLINE ]
-- On TRUE shift to state 6
-- On STRING shift to state 7
-- On NOT shift to state 8
-- On NONE shift to state 9
-- On MINUS shift to state 10
-- On LEFTSQ shift to state 11
-- On LEFTPAR shift to state 12
-- On INTEGER shift to state 13
-- On IDENT shift to state 14
-- On FALSE shift to state 15
-- On ident shift to state 16
-- On expr_desc shift to state 21
-- On expr shift to state 53

State 53:
expr_desc -> expr . LEFTSQ expr RIGHTSQ [ TIMES PLUS OR NEWLINE MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . PLUS expr [ TIMES PLUS OR NEWLINE MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . MINUS expr [ TIMES PLUS OR NEWLINE MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . DIV expr [ TIMES PLUS OR NEWLINE MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . MOD expr [ TIMES PLUS OR NEWLINE MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . CMP expr [ TIMES PLUS OR NEWLINE MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . AND expr [ TIMES PLUS OR NEWLINE MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . OR expr [ TIMES PLUS OR NEWLINE MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . TIMES expr [ TIMES PLUS OR NEWLINE MOD MINUS LEFTSQ DIV CMP AND ]
simple_stmt_desc -> RETURN expr . [ NEWLINE ]
-- On TIMES shift to state 23
-- On PLUS shift to state 28
-- On OR shift to state 34
-- On MOD shift to state 30
-- On MINUS shift to state 36
-- On LEFTSQ shift to state 25
-- On DIV shift to state 32
-- On CMP shift to state 38
-- On AND shift to state 40
-- On NEWLINE reduce production simple_stmt_desc -> RETURN expr 

State 54:
loop_body -> NEWLINE . BEGIN loop_annotation nonempty_list(stmt) END [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF END DEF CHECK BREAK ASSUME ASSERT ]
-- On BEGIN shift to state 55

State 55:
loop_body -> NEWLINE BEGIN . loop_annotation nonempty_list(stmt) END [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF END DEF CHECK BREAK ASSUME ASSERT ]
-- On VARIANT shift to state 56
-- On INVARIANT shift to state 133
-- On variant shift to state 136
-- On loop_annotation shift to state 140
-- On invariant shift to state 138
-- On WHILE reduce production loop_annotation -> 
-- On TRUE reduce production loop_annotation -> 
-- On STRING reduce production loop_annotation -> 
-- On RETURN reduce production loop_annotation -> 
-- On NOT reduce production loop_annotation -> 
-- On NONE reduce production loop_annotation -> 
-- On MINUS reduce production loop_annotation -> 
-- On LEFTSQ reduce production loop_annotation -> 
-- On LEFTPAR reduce production loop_annotation -> 
-- On LABEL reduce production loop_annotation -> 
-- On INTEGER reduce production loop_annotation -> 
-- On IF reduce production loop_annotation -> 
-- On IDENT reduce production loop_annotation -> 
-- On FOR reduce production loop_annotation -> 
-- On FALSE reduce production loop_annotation -> 
-- On CHECK reduce production loop_annotation -> 
-- On BREAK reduce production loop_annotation -> 
-- On ASSUME reduce production loop_annotation -> 
-- On ASSERT reduce production loop_annotation -> 

State 56:
variant -> VARIANT . comma_list1(term) NEWLINE [ WHILE VARIANT TRUE STRING RETURN REQUIRES NOT NONE MINUS LEFTSQ LEFTPAR LABEL INVARIANT INTEGER IF IDENT FOR FALSE ENSURES CHECK BREAK ASSUME ASSERT ]
-- On TRUE shift to state 57
-- On NOT shift to state 58
-- On NONE shift to state 59
-- On MINUS shift to state 60
-- On LET shift to state 61
-- On LEFTPAR shift to state 64
-- On INTEGER shift to state 65
-- On IF shift to state 66
-- On IDENT shift to state 14
-- On FORALL shift to state 67
-- On FALSE shift to state 68
-- On EXISTS shift to state 69
-- On term_sub_ shift to state 70
-- On term_arg_ shift to state 71
-- On term_arg shift to state 72
-- On term_ shift to state 74
-- On term shift to state 94
-- On separated_nonempty_list(COMMA,term) shift to state 130
-- On quant shift to state 78
-- On mk_term(term_arg_) shift to state 90
-- On mk_term(term_) shift to state 91
-- On ident shift to state 92
-- On comma_list1(term) shift to state 131

State 57:
term_arg_ -> TRUE . [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LEFTSQ LARROW IN ELSE DIV COMMA CMP ARROW AND ]
-- On TIMES reduce production term_arg_ -> TRUE 
-- On THEN reduce production term_arg_ -> TRUE 
-- On RIGHTSQ reduce production term_arg_ -> TRUE 
-- On RIGHTPAR reduce production term_arg_ -> TRUE 
-- On PLUS reduce production term_arg_ -> TRUE 
-- On OR reduce production term_arg_ -> TRUE 
-- On NEWLINE reduce production term_arg_ -> TRUE 
-- On MOD reduce production term_arg_ -> TRUE 
-- On MINUS reduce production term_arg_ -> TRUE 
-- On LRARROW reduce production term_arg_ -> TRUE 
-- On LEFTSQ reduce production term_arg_ -> TRUE 
-- On LARROW reduce production term_arg_ -> TRUE 
-- On IN reduce production term_arg_ -> TRUE 
-- On ELSE reduce production term_arg_ -> TRUE 
-- On DIV reduce production term_arg_ -> TRUE 
-- On COMMA reduce production term_arg_ -> TRUE 
-- On CMP reduce production term_arg_ -> TRUE 
-- On ARROW reduce production term_arg_ -> TRUE 
-- On AND reduce production term_arg_ -> TRUE 

State 58:
term_ -> NOT . term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
-- On TRUE shift to state 57
-- On NOT shift to state 58
-- On NONE shift to state 59
-- On MINUS shift to state 60
-- On LET shift to state 61
-- On LEFTPAR shift to state 64
-- On INTEGER shift to state 65
-- On IF shift to state 66
-- On IDENT shift to state 14
-- On FORALL shift to state 67
-- On FALSE shift to state 68
-- On EXISTS shift to state 69
-- On term_sub_ shift to state 70
-- On term_arg_ shift to state 71
-- On term_arg shift to state 72
-- On term_ shift to state 74
-- On term shift to state 129
-- On quant shift to state 78
-- On mk_term(term_arg_) shift to state 90
-- On mk_term(term_) shift to state 91
-- On ident shift to state 92

State 59:
term_arg_ -> NONE . [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LEFTSQ LARROW IN ELSE DIV COMMA CMP ARROW AND ]
-- On TIMES reduce production term_arg_ -> NONE 
-- On THEN reduce production term_arg_ -> NONE 
-- On RIGHTSQ reduce production term_arg_ -> NONE 
-- On RIGHTPAR reduce production term_arg_ -> NONE 
-- On PLUS reduce production term_arg_ -> NONE 
-- On OR reduce production term_arg_ -> NONE 
-- On NEWLINE reduce production term_arg_ -> NONE 
-- On MOD reduce production term_arg_ -> NONE 
-- On MINUS reduce production term_arg_ -> NONE 
-- On LRARROW reduce production term_arg_ -> NONE 
-- On LEFTSQ reduce production term_arg_ -> NONE 
-- On LARROW reduce production term_arg_ -> NONE 
-- On IN reduce production term_arg_ -> NONE 
-- On ELSE reduce production term_arg_ -> NONE 
-- On DIV reduce production term_arg_ -> NONE 
-- On COMMA reduce production term_arg_ -> NONE 
-- On CMP reduce production term_arg_ -> NONE 
-- On ARROW reduce production term_arg_ -> NONE 
-- On AND reduce production term_arg_ -> NONE 

State 60:
term_ -> MINUS . term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
-- On TRUE shift to state 57
-- On NOT shift to state 58
-- On NONE shift to state 59
-- On MINUS shift to state 60
-- On LET shift to state 61
-- On LEFTPAR shift to state 64
-- On INTEGER shift to state 65
-- On IF shift to state 66
-- On IDENT shift to state 14
-- On FORALL shift to state 67
-- On FALSE shift to state 68
-- On EXISTS shift to state 69
-- On term_sub_ shift to state 70
-- On term_arg_ shift to state 71
-- On term_arg shift to state 72
-- On term_ shift to state 74
-- On term shift to state 128
-- On quant shift to state 78
-- On mk_term(term_arg_) shift to state 90
-- On mk_term(term_) shift to state 91
-- On ident shift to state 92

State 61:
term_ -> LET . ident EQUAL term IN term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
-- On IDENT shift to state 14
-- On ident shift to state 62

State 62:
term_ -> LET ident . EQUAL term IN term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
-- On EQUAL shift to state 63

State 63:
term_ -> LET ident EQUAL . term IN term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
-- On TRUE shift to state 57
-- On NOT shift to state 58
-- On NONE shift to state 59
-- On MINUS shift to state 60
-- On LET shift to state 61
-- On LEFTPAR shift to state 64
-- On INTEGER shift to state 65
-- On IF shift to state 66
-- On IDENT shift to state 14
-- On FORALL shift to state 67
-- On FALSE shift to state 68
-- On EXISTS shift to state 69
-- On term_sub_ shift to state 70
-- On term_arg_ shift to state 71
-- On term_arg shift to state 72
-- On term_ shift to state 74
-- On term shift to state 125
-- On quant shift to state 78
-- On mk_term(term_arg_) shift to state 90
-- On mk_term(term_) shift to state 91
-- On ident shift to state 92

State 64:
term_sub_ -> LEFTPAR . term RIGHTPAR [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LEFTSQ LARROW IN ELSE DIV COMMA CMP ARROW AND ]
-- On TRUE shift to state 57
-- On NOT shift to state 58
-- On NONE shift to state 59
-- On MINUS shift to state 60
-- On LET shift to state 61
-- On LEFTPAR shift to state 64
-- On INTEGER shift to state 65
-- On IF shift to state 66
-- On IDENT shift to state 14
-- On FORALL shift to state 67
-- On FALSE shift to state 68
-- On EXISTS shift to state 69
-- On term_sub_ shift to state 70
-- On term_arg_ shift to state 71
-- On term_arg shift to state 72
-- On term_ shift to state 74
-- On term shift to state 123
-- On quant shift to state 78
-- On mk_term(term_arg_) shift to state 90
-- On mk_term(term_) shift to state 91
-- On ident shift to state 92

State 65:
term_arg_ -> INTEGER . [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LEFTSQ LARROW IN ELSE DIV COMMA CMP ARROW AND ]
-- On TIMES reduce production term_arg_ -> INTEGER 
-- On THEN reduce production term_arg_ -> INTEGER 
-- On RIGHTSQ reduce production term_arg_ -> INTEGER 
-- On RIGHTPAR reduce production term_arg_ -> INTEGER 
-- On PLUS reduce production term_arg_ -> INTEGER 
-- On OR reduce production term_arg_ -> INTEGER 
-- On NEWLINE reduce production term_arg_ -> INTEGER 
-- On MOD reduce production term_arg_ -> INTEGER 
-- On MINUS reduce production term_arg_ -> INTEGER 
-- On LRARROW reduce production term_arg_ -> INTEGER 
-- On LEFTSQ reduce production term_arg_ -> INTEGER 
-- On LARROW reduce production term_arg_ -> INTEGER 
-- On IN reduce production term_arg_ -> INTEGER 
-- On ELSE reduce production term_arg_ -> INTEGER 
-- On DIV reduce production term_arg_ -> INTEGER 
-- On COMMA reduce production term_arg_ -> INTEGER 
-- On CMP reduce production term_arg_ -> INTEGER 
-- On ARROW reduce production term_arg_ -> INTEGER 
-- On AND reduce production term_arg_ -> INTEGER 

State 66:
term_ -> IF . term THEN term ELSE term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
-- On TRUE shift to state 57
-- On NOT shift to state 58
-- On NONE shift to state 59
-- On MINUS shift to state 60
-- On LET shift to state 61
-- On LEFTPAR shift to state 64
-- On INTEGER shift to state 65
-- On IF shift to state 66
-- On IDENT shift to state 14
-- On FORALL shift to state 67
-- On FALSE shift to state 68
-- On EXISTS shift to state 69
-- On term_sub_ shift to state 70
-- On term_arg_ shift to state 71
-- On term_arg shift to state 72
-- On term_ shift to state 74
-- On term shift to state 118
-- On quant shift to state 78
-- On mk_term(term_arg_) shift to state 90
-- On mk_term(term_) shift to state 91
-- On ident shift to state 92

State 67:
quant -> FORALL . [ IDENT ]
-- On IDENT reduce production quant -> FORALL 

State 68:
term_arg_ -> FALSE . [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LEFTSQ LARROW IN ELSE DIV COMMA CMP ARROW AND ]
-- On TIMES reduce production term_arg_ -> FALSE 
-- On THEN reduce production term_arg_ -> FALSE 
-- On RIGHTSQ reduce production term_arg_ -> FALSE 
-- On RIGHTPAR reduce production term_arg_ -> FALSE 
-- On PLUS reduce production term_arg_ -> FALSE 
-- On OR reduce production term_arg_ -> FALSE 
-- On NEWLINE reduce production term_arg_ -> FALSE 
-- On MOD reduce production term_arg_ -> FALSE 
-- On MINUS reduce production term_arg_ -> FALSE 
-- On LRARROW reduce production term_arg_ -> FALSE 
-- On LEFTSQ reduce production term_arg_ -> FALSE 
-- On LARROW reduce production term_arg_ -> FALSE 
-- On IN reduce production term_arg_ -> FALSE 
-- On ELSE reduce production term_arg_ -> FALSE 
-- On DIV reduce production term_arg_ -> FALSE 
-- On COMMA reduce production term_arg_ -> FALSE 
-- On CMP reduce production term_arg_ -> FALSE 
-- On ARROW reduce production term_arg_ -> FALSE 
-- On AND reduce production term_arg_ -> FALSE 

State 69:
quant -> EXISTS . [ IDENT ]
-- On IDENT reduce production quant -> EXISTS 

State 70:
term_arg_ -> term_sub_ . [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LEFTSQ LARROW IN ELSE DIV COMMA CMP ARROW AND ]
-- On TIMES reduce production term_arg_ -> term_sub_ 
-- On THEN reduce production term_arg_ -> term_sub_ 
-- On RIGHTSQ reduce production term_arg_ -> term_sub_ 
-- On RIGHTPAR reduce production term_arg_ -> term_sub_ 
-- On PLUS reduce production term_arg_ -> term_sub_ 
-- On OR reduce production term_arg_ -> term_sub_ 
-- On NEWLINE reduce production term_arg_ -> term_sub_ 
-- On MOD reduce production term_arg_ -> term_sub_ 
-- On MINUS reduce production term_arg_ -> term_sub_ 
-- On LRARROW reduce production term_arg_ -> term_sub_ 
-- On LEFTSQ reduce production term_arg_ -> term_sub_ 
-- On LARROW reduce production term_arg_ -> term_sub_ 
-- On IN reduce production term_arg_ -> term_sub_ 
-- On ELSE reduce production term_arg_ -> term_sub_ 
-- On DIV reduce production term_arg_ -> term_sub_ 
-- On COMMA reduce production term_arg_ -> term_sub_ 
-- On CMP reduce production term_arg_ -> term_sub_ 
-- On ARROW reduce production term_arg_ -> term_sub_ 
-- On AND reduce production term_arg_ -> term_sub_ 

State 71:
mk_term(term_arg_) -> term_arg_ . [ LEFTSQ ]
term_ -> term_arg_ . [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
-- On TIMES reduce production term_ -> term_arg_ 
-- On THEN reduce production term_ -> term_arg_ 
-- On RIGHTSQ reduce production term_ -> term_arg_ 
-- On RIGHTPAR reduce production term_ -> term_arg_ 
-- On PLUS reduce production term_ -> term_arg_ 
-- On OR reduce production term_ -> term_arg_ 
-- On NEWLINE reduce production term_ -> term_arg_ 
-- On MOD reduce production term_ -> term_arg_ 
-- On MINUS reduce production term_ -> term_arg_ 
-- On LRARROW reduce production term_ -> term_arg_ 
-- On LEFTSQ reduce production mk_term(term_arg_) -> term_arg_ 
-- On LARROW reduce production term_ -> term_arg_ 
-- On IN reduce production term_ -> term_arg_ 
-- On ELSE reduce production term_ -> term_arg_ 
-- On DIV reduce production term_ -> term_arg_ 
-- On COMMA reduce production term_ -> term_arg_ 
-- On CMP reduce production term_ -> term_arg_ 
-- On ARROW reduce production term_ -> term_arg_ 
-- On AND reduce production term_ -> term_arg_ 

State 72:
term_sub_ -> term_arg . LEFTSQ term RIGHTSQ [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LEFTSQ LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_sub_ -> term_arg . LEFTSQ term LARROW term RIGHTSQ [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LEFTSQ LARROW IN ELSE DIV COMMA CMP ARROW AND ]
-- On LEFTSQ shift to state 73

State 73:
term_sub_ -> term_arg LEFTSQ . term RIGHTSQ [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LEFTSQ LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_sub_ -> term_arg LEFTSQ . term LARROW term RIGHTSQ [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LEFTSQ LARROW IN ELSE DIV COMMA CMP ARROW AND ]
-- On TRUE shift to state 57
-- On NOT shift to state 58
-- On NONE shift to state 59
-- On MINUS shift to state 60
-- On LET shift to state 61
-- On LEFTPAR shift to state 64
-- On INTEGER shift to state 65
-- On IF shift to state 66
-- On IDENT shift to state 14
-- On FORALL shift to state 67
-- On FALSE shift to state 68
-- On EXISTS shift to state 69
-- On term_sub_ shift to state 70
-- On term_arg_ shift to state 71
-- On term_arg shift to state 72
-- On term_ shift to state 74
-- On term shift to state 75
-- On quant shift to state 78
-- On mk_term(term_arg_) shift to state 90
-- On mk_term(term_) shift to state 91
-- On ident shift to state 92

State 74:
mk_term(term_) -> term_ . [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
-- On TIMES reduce production mk_term(term_) -> term_ 
-- On THEN reduce production mk_term(term_) -> term_ 
-- On RIGHTSQ reduce production mk_term(term_) -> term_ 
-- On RIGHTPAR reduce production mk_term(term_) -> term_ 
-- On PLUS reduce production mk_term(term_) -> term_ 
-- On OR reduce production mk_term(term_) -> term_ 
-- On NEWLINE reduce production mk_term(term_) -> term_ 
-- On MOD reduce production mk_term(term_) -> term_ 
-- On MINUS reduce production mk_term(term_) -> term_ 
-- On LRARROW reduce production mk_term(term_) -> term_ 
-- On LARROW reduce production mk_term(term_) -> term_ 
-- On IN reduce production mk_term(term_) -> term_ 
-- On ELSE reduce production mk_term(term_) -> term_ 
-- On DIV reduce production mk_term(term_) -> term_ 
-- On COMMA reduce production mk_term(term_) -> term_ 
-- On CMP reduce production mk_term(term_) -> term_ 
-- On ARROW reduce production mk_term(term_) -> term_ 
-- On AND reduce production mk_term(term_) -> term_ 

State 75:
term_ -> term . ARROW term [ TIMES RIGHTSQ PLUS OR MOD MINUS LRARROW LARROW DIV CMP ARROW AND ]
term_ -> term . LRARROW term [ TIMES RIGHTSQ PLUS OR MOD MINUS LRARROW LARROW DIV CMP ARROW AND ]
term_ -> term . OR term [ TIMES RIGHTSQ PLUS OR MOD MINUS LRARROW LARROW DIV CMP ARROW AND ]
term_ -> term . AND term [ TIMES RIGHTSQ PLUS OR MOD MINUS LRARROW LARROW DIV CMP ARROW AND ]
term_ -> term . CMP term [ TIMES RIGHTSQ PLUS OR MOD MINUS LRARROW LARROW DIV CMP ARROW AND ]
term_ -> term . DIV term [ TIMES RIGHTSQ PLUS OR MOD MINUS LRARROW LARROW DIV CMP ARROW AND ]
term_ -> term . MOD term [ TIMES RIGHTSQ PLUS OR MOD MINUS LRARROW LARROW DIV CMP ARROW AND ]
term_ -> term . PLUS term [ TIMES RIGHTSQ PLUS OR MOD MINUS LRARROW LARROW DIV CMP ARROW AND ]
term_ -> term . MINUS term [ TIMES RIGHTSQ PLUS OR MOD MINUS LRARROW LARROW DIV CMP ARROW AND ]
term_ -> term . TIMES term [ TIMES RIGHTSQ PLUS OR MOD MINUS LRARROW LARROW DIV CMP ARROW AND ]
term_sub_ -> term_arg LEFTSQ term . RIGHTSQ [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LEFTSQ LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_sub_ -> term_arg LEFTSQ term . LARROW term RIGHTSQ [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LEFTSQ LARROW IN ELSE DIV COMMA CMP ARROW AND ]
-- On TIMES shift to state 76
-- On RIGHTSQ shift to state 114
-- On PLUS shift to state 86
-- On OR shift to state 95
-- On MOD shift to state 88
-- On MINUS shift to state 97
-- On LRARROW shift to state 105
-- On LARROW shift to state 115
-- On DIV shift to state 99
-- On CMP shift to state 101
-- On ARROW shift to state 107
-- On AND shift to state 103

State 76:
term_ -> term TIMES . term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
-- On TRUE shift to state 57
-- On NOT shift to state 58
-- On NONE shift to state 59
-- On MINUS shift to state 60
-- On LET shift to state 61
-- On LEFTPAR shift to state 64
-- On INTEGER shift to state 65
-- On IF shift to state 66
-- On IDENT shift to state 14
-- On FORALL shift to state 67
-- On FALSE shift to state 68
-- On EXISTS shift to state 69
-- On term_sub_ shift to state 70
-- On term_arg_ shift to state 71
-- On term_arg shift to state 72
-- On term_ shift to state 74
-- On term shift to state 77
-- On quant shift to state 78
-- On mk_term(term_arg_) shift to state 90
-- On mk_term(term_) shift to state 91
-- On ident shift to state 92

State 77:
term_ -> term . ARROW term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . LRARROW term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . OR term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . AND term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . CMP term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . DIV term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . MOD term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . PLUS term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . MINUS term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . TIMES term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term TIMES term . [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
-- On TIMES reduce production term_ -> term TIMES term 
-- On THEN reduce production term_ -> term TIMES term 
-- On RIGHTSQ reduce production term_ -> term TIMES term 
-- On RIGHTPAR reduce production term_ -> term TIMES term 
-- On PLUS reduce production term_ -> term TIMES term 
-- On OR reduce production term_ -> term TIMES term 
-- On NEWLINE reduce production term_ -> term TIMES term 
-- On MOD reduce production term_ -> term TIMES term 
-- On MINUS reduce production term_ -> term TIMES term 
-- On LRARROW reduce production term_ -> term TIMES term 
-- On LARROW reduce production term_ -> term TIMES term 
-- On IN reduce production term_ -> term TIMES term 
-- On ELSE reduce production term_ -> term TIMES term 
-- On DIV reduce production term_ -> term TIMES term 
-- On COMMA reduce production term_ -> term TIMES term 
-- On CMP reduce production term_ -> term TIMES term 
-- On ARROW reduce production term_ -> term TIMES term 
-- On AND reduce production term_ -> term TIMES term 

State 78:
term_ -> quant . comma_list1(ident) DOT term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
-- On IDENT shift to state 14
-- On separated_nonempty_list(COMMA,ident) shift to state 79
-- On ident shift to state 80
-- On comma_list1(ident) shift to state 83

State 79:
comma_list1(ident) -> separated_nonempty_list(COMMA,ident) . [ DOT ]
-- On DOT reduce production comma_list1(ident) -> separated_nonempty_list(COMMA,ident) 

State 80:
separated_nonempty_list(COMMA,ident) -> ident . [ RIGHTPAR NEWLINE DOT ]
separated_nonempty_list(COMMA,ident) -> ident . COMMA separated_nonempty_list(COMMA,ident) [ RIGHTPAR NEWLINE DOT ]
-- On COMMA shift to state 81
-- On RIGHTPAR reduce production separated_nonempty_list(COMMA,ident) -> ident 
-- On NEWLINE reduce production separated_nonempty_list(COMMA,ident) -> ident 
-- On DOT reduce production separated_nonempty_list(COMMA,ident) -> ident 

State 81:
separated_nonempty_list(COMMA,ident) -> ident COMMA . separated_nonempty_list(COMMA,ident) [ RIGHTPAR NEWLINE DOT ]
-- On IDENT shift to state 14
-- On separated_nonempty_list(COMMA,ident) shift to state 82
-- On ident shift to state 80

State 82:
separated_nonempty_list(COMMA,ident) -> ident COMMA separated_nonempty_list(COMMA,ident) . [ RIGHTPAR NEWLINE DOT ]
-- On RIGHTPAR reduce production separated_nonempty_list(COMMA,ident) -> ident COMMA separated_nonempty_list(COMMA,ident) 
-- On NEWLINE reduce production separated_nonempty_list(COMMA,ident) -> ident COMMA separated_nonempty_list(COMMA,ident) 
-- On DOT reduce production separated_nonempty_list(COMMA,ident) -> ident COMMA separated_nonempty_list(COMMA,ident) 

State 83:
term_ -> quant comma_list1(ident) . DOT term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
-- On DOT shift to state 84

State 84:
term_ -> quant comma_list1(ident) DOT . term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
-- On TRUE shift to state 57
-- On NOT shift to state 58
-- On NONE shift to state 59
-- On MINUS shift to state 60
-- On LET shift to state 61
-- On LEFTPAR shift to state 64
-- On INTEGER shift to state 65
-- On IF shift to state 66
-- On IDENT shift to state 14
-- On FORALL shift to state 67
-- On FALSE shift to state 68
-- On EXISTS shift to state 69
-- On term_sub_ shift to state 70
-- On term_arg_ shift to state 71
-- On term_arg shift to state 72
-- On term_ shift to state 74
-- On term shift to state 85
-- On quant shift to state 78
-- On mk_term(term_arg_) shift to state 90
-- On mk_term(term_) shift to state 91
-- On ident shift to state 92

State 85:
term_ -> term . ARROW term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . LRARROW term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . OR term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . AND term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . CMP term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . DIV term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . MOD term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . PLUS term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . MINUS term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . TIMES term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> quant comma_list1(ident) DOT term . [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
-- On TIMES shift to state 76
-- On PLUS shift to state 86
-- On OR shift to state 95
-- On MOD shift to state 88
-- On MINUS shift to state 97
-- On LRARROW shift to state 105
-- On DIV shift to state 99
-- On CMP shift to state 101
-- On ARROW shift to state 107
-- On AND shift to state 103
-- On THEN reduce production term_ -> quant comma_list1(ident) DOT term 
-- On RIGHTSQ reduce production term_ -> quant comma_list1(ident) DOT term 
-- On RIGHTPAR reduce production term_ -> quant comma_list1(ident) DOT term 
-- On NEWLINE reduce production term_ -> quant comma_list1(ident) DOT term 
-- On LARROW reduce production term_ -> quant comma_list1(ident) DOT term 
-- On IN reduce production term_ -> quant comma_list1(ident) DOT term 
-- On ELSE reduce production term_ -> quant comma_list1(ident) DOT term 
-- On COMMA reduce production term_ -> quant comma_list1(ident) DOT term 

State 86:
term_ -> term PLUS . term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
-- On TRUE shift to state 57
-- On NOT shift to state 58
-- On NONE shift to state 59
-- On MINUS shift to state 60
-- On LET shift to state 61
-- On LEFTPAR shift to state 64
-- On INTEGER shift to state 65
-- On IF shift to state 66
-- On IDENT shift to state 14
-- On FORALL shift to state 67
-- On FALSE shift to state 68
-- On EXISTS shift to state 69
-- On term_sub_ shift to state 70
-- On term_arg_ shift to state 71
-- On term_arg shift to state 72
-- On term_ shift to state 74
-- On term shift to state 87
-- On quant shift to state 78
-- On mk_term(term_arg_) shift to state 90
-- On mk_term(term_) shift to state 91
-- On ident shift to state 92

State 87:
term_ -> term . ARROW term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . LRARROW term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . OR term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . AND term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . CMP term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . DIV term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . MOD term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . PLUS term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term PLUS term . [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . MINUS term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . TIMES term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
-- On TIMES shift to state 76
-- On MOD shift to state 88
-- On DIV shift to state 99
-- On THEN reduce production term_ -> term PLUS term 
-- On RIGHTSQ reduce production term_ -> term PLUS term 
-- On RIGHTPAR reduce production term_ -> term PLUS term 
-- On PLUS reduce production term_ -> term PLUS term 
-- On OR reduce production term_ -> term PLUS term 
-- On NEWLINE reduce production term_ -> term PLUS term 
-- On MINUS reduce production term_ -> term PLUS term 
-- On LRARROW reduce production term_ -> term PLUS term 
-- On LARROW reduce production term_ -> term PLUS term 
-- On IN reduce production term_ -> term PLUS term 
-- On ELSE reduce production term_ -> term PLUS term 
-- On COMMA reduce production term_ -> term PLUS term 
-- On CMP reduce production term_ -> term PLUS term 
-- On ARROW reduce production term_ -> term PLUS term 
-- On AND reduce production term_ -> term PLUS term 

State 88:
term_ -> term MOD . term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
-- On TRUE shift to state 57
-- On NOT shift to state 58
-- On NONE shift to state 59
-- On MINUS shift to state 60
-- On LET shift to state 61
-- On LEFTPAR shift to state 64
-- On INTEGER shift to state 65
-- On IF shift to state 66
-- On IDENT shift to state 14
-- On FORALL shift to state 67
-- On FALSE shift to state 68
-- On EXISTS shift to state 69
-- On term_sub_ shift to state 70
-- On term_arg_ shift to state 71
-- On term_arg shift to state 72
-- On term_ shift to state 74
-- On term shift to state 89
-- On quant shift to state 78
-- On mk_term(term_arg_) shift to state 90
-- On mk_term(term_) shift to state 91
-- On ident shift to state 92

State 89:
term_ -> term . ARROW term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . LRARROW term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . OR term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . AND term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . CMP term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . DIV term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . MOD term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term MOD term . [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . PLUS term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . MINUS term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . TIMES term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
-- On TIMES reduce production term_ -> term MOD term 
-- On THEN reduce production term_ -> term MOD term 
-- On RIGHTSQ reduce production term_ -> term MOD term 
-- On RIGHTPAR reduce production term_ -> term MOD term 
-- On PLUS reduce production term_ -> term MOD term 
-- On OR reduce production term_ -> term MOD term 
-- On NEWLINE reduce production term_ -> term MOD term 
-- On MOD reduce production term_ -> term MOD term 
-- On MINUS reduce production term_ -> term MOD term 
-- On LRARROW reduce production term_ -> term MOD term 
-- On LARROW reduce production term_ -> term MOD term 
-- On IN reduce production term_ -> term MOD term 
-- On ELSE reduce production term_ -> term MOD term 
-- On DIV reduce production term_ -> term MOD term 
-- On COMMA reduce production term_ -> term MOD term 
-- On CMP reduce production term_ -> term MOD term 
-- On ARROW reduce production term_ -> term MOD term 
-- On AND reduce production term_ -> term MOD term 

State 90:
term_arg -> mk_term(term_arg_) . [ LEFTSQ ]
-- On LEFTSQ reduce production term_arg -> mk_term(term_arg_) 

State 91:
term -> mk_term(term_) . [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
-- On TIMES reduce production term -> mk_term(term_) 
-- On THEN reduce production term -> mk_term(term_) 
-- On RIGHTSQ reduce production term -> mk_term(term_) 
-- On RIGHTPAR reduce production term -> mk_term(term_) 
-- On PLUS reduce production term -> mk_term(term_) 
-- On OR reduce production term -> mk_term(term_) 
-- On NEWLINE reduce production term -> mk_term(term_) 
-- On MOD reduce production term -> mk_term(term_) 
-- On MINUS reduce production term -> mk_term(term_) 
-- On LRARROW reduce production term -> mk_term(term_) 
-- On LARROW reduce production term -> mk_term(term_) 
-- On IN reduce production term -> mk_term(term_) 
-- On ELSE reduce production term -> mk_term(term_) 
-- On DIV reduce production term -> mk_term(term_) 
-- On COMMA reduce production term -> mk_term(term_) 
-- On CMP reduce production term -> mk_term(term_) 
-- On ARROW reduce production term -> mk_term(term_) 
-- On AND reduce production term -> mk_term(term_) 

State 92:
term_ -> ident . LEFTPAR loption(separated_nonempty_list(COMMA,term)) RIGHTPAR [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_arg_ -> ident . [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LEFTSQ LARROW IN ELSE DIV COMMA CMP ARROW AND ]
-- On LEFTPAR shift to state 93
-- On TIMES reduce production term_arg_ -> ident 
-- On THEN reduce production term_arg_ -> ident 
-- On RIGHTSQ reduce production term_arg_ -> ident 
-- On RIGHTPAR reduce production term_arg_ -> ident 
-- On PLUS reduce production term_arg_ -> ident 
-- On OR reduce production term_arg_ -> ident 
-- On NEWLINE reduce production term_arg_ -> ident 
-- On MOD reduce production term_arg_ -> ident 
-- On MINUS reduce production term_arg_ -> ident 
-- On LRARROW reduce production term_arg_ -> ident 
-- On LEFTSQ reduce production term_arg_ -> ident 
-- On LARROW reduce production term_arg_ -> ident 
-- On IN reduce production term_arg_ -> ident 
-- On ELSE reduce production term_arg_ -> ident 
-- On DIV reduce production term_arg_ -> ident 
-- On COMMA reduce production term_arg_ -> ident 
-- On CMP reduce production term_arg_ -> ident 
-- On ARROW reduce production term_arg_ -> ident 
-- On AND reduce production term_arg_ -> ident 

State 93:
term_ -> ident LEFTPAR . loption(separated_nonempty_list(COMMA,term)) RIGHTPAR [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
-- On TRUE shift to state 57
-- On NOT shift to state 58
-- On NONE shift to state 59
-- On MINUS shift to state 60
-- On LET shift to state 61
-- On LEFTPAR shift to state 64
-- On INTEGER shift to state 65
-- On IF shift to state 66
-- On IDENT shift to state 14
-- On FORALL shift to state 67
-- On FALSE shift to state 68
-- On EXISTS shift to state 69
-- On term_sub_ shift to state 70
-- On term_arg_ shift to state 71
-- On term_arg shift to state 72
-- On term_ shift to state 74
-- On term shift to state 94
-- On separated_nonempty_list(COMMA,term) shift to state 111
-- On quant shift to state 78
-- On mk_term(term_arg_) shift to state 90
-- On mk_term(term_) shift to state 91
-- On loption(separated_nonempty_list(COMMA,term)) shift to state 112
-- On ident shift to state 92
-- On RIGHTPAR reduce production loption(separated_nonempty_list(COMMA,term)) -> 

State 94:
separated_nonempty_list(COMMA,term) -> term . [ RIGHTPAR NEWLINE ]
separated_nonempty_list(COMMA,term) -> term . COMMA separated_nonempty_list(COMMA,term) [ RIGHTPAR NEWLINE ]
term_ -> term . ARROW term [ TIMES RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW DIV COMMA CMP ARROW AND ]
term_ -> term . LRARROW term [ TIMES RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW DIV COMMA CMP ARROW AND ]
term_ -> term . OR term [ TIMES RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW DIV COMMA CMP ARROW AND ]
term_ -> term . AND term [ TIMES RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW DIV COMMA CMP ARROW AND ]
term_ -> term . CMP term [ TIMES RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW DIV COMMA CMP ARROW AND ]
term_ -> term . DIV term [ TIMES RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW DIV COMMA CMP ARROW AND ]
term_ -> term . MOD term [ TIMES RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW DIV COMMA CMP ARROW AND ]
term_ -> term . PLUS term [ TIMES RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW DIV COMMA CMP ARROW AND ]
term_ -> term . MINUS term [ TIMES RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW DIV COMMA CMP ARROW AND ]
term_ -> term . TIMES term [ TIMES RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW DIV COMMA CMP ARROW AND ]
-- On TIMES shift to state 76
-- On PLUS shift to state 86
-- On OR shift to state 95
-- On MOD shift to state 88
-- On MINUS shift to state 97
-- On LRARROW shift to state 105
-- On DIV shift to state 99
-- On COMMA shift to state 109
-- On CMP shift to state 101
-- On ARROW shift to state 107
-- On AND shift to state 103
-- On RIGHTPAR reduce production separated_nonempty_list(COMMA,term) -> term 
-- On NEWLINE reduce production separated_nonempty_list(COMMA,term) -> term 

State 95:
term_ -> term OR . term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
-- On TRUE shift to state 57
-- On NOT shift to state 58
-- On NONE shift to state 59
-- On MINUS shift to state 60
-- On LET shift to state 61
-- On LEFTPAR shift to state 64
-- On INTEGER shift to state 65
-- On IF shift to state 66
-- On IDENT shift to state 14
-- On FORALL shift to state 67
-- On FALSE shift to state 68
-- On EXISTS shift to state 69
-- On term_sub_ shift to state 70
-- On term_arg_ shift to state 71
-- On term_arg shift to state 72
-- On term_ shift to state 74
-- On term shift to state 96
-- On quant shift to state 78
-- On mk_term(term_arg_) shift to state 90
-- On mk_term(term_) shift to state 91
-- On ident shift to state 92

State 96:
term_ -> term . ARROW term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . LRARROW term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . OR term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term OR term . [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . AND term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . CMP term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . DIV term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . MOD term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . PLUS term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . MINUS term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . TIMES term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
-- On TIMES shift to state 76
-- On PLUS shift to state 86
-- On OR shift to state 95
-- On MOD shift to state 88
-- On MINUS shift to state 97
-- On DIV shift to state 99
-- On CMP shift to state 101
-- On AND shift to state 103
-- On THEN reduce production term_ -> term OR term 
-- On RIGHTSQ reduce production term_ -> term OR term 
-- On RIGHTPAR reduce production term_ -> term OR term 
-- On NEWLINE reduce production term_ -> term OR term 
-- On LRARROW reduce production term_ -> term OR term 
-- On LARROW reduce production term_ -> term OR term 
-- On IN reduce production term_ -> term OR term 
-- On ELSE reduce production term_ -> term OR term 
-- On COMMA reduce production term_ -> term OR term 
-- On ARROW reduce production term_ -> term OR term 

State 97:
term_ -> term MINUS . term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
-- On TRUE shift to state 57
-- On NOT shift to state 58
-- On NONE shift to state 59
-- On MINUS shift to state 60
-- On LET shift to state 61
-- On LEFTPAR shift to state 64
-- On INTEGER shift to state 65
-- On IF shift to state 66
-- On IDENT shift to state 14
-- On FORALL shift to state 67
-- On FALSE shift to state 68
-- On EXISTS shift to state 69
-- On term_sub_ shift to state 70
-- On term_arg_ shift to state 71
-- On term_arg shift to state 72
-- On term_ shift to state 74
-- On term shift to state 98
-- On quant shift to state 78
-- On mk_term(term_arg_) shift to state 90
-- On mk_term(term_) shift to state 91
-- On ident shift to state 92

State 98:
term_ -> term . ARROW term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . LRARROW term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . OR term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . AND term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . CMP term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . DIV term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . MOD term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . PLUS term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . MINUS term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term MINUS term . [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . TIMES term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
-- On TIMES shift to state 76
-- On MOD shift to state 88
-- On DIV shift to state 99
-- On THEN reduce production term_ -> term MINUS term 
-- On RIGHTSQ reduce production term_ -> term MINUS term 
-- On RIGHTPAR reduce production term_ -> term MINUS term 
-- On PLUS reduce production term_ -> term MINUS term 
-- On OR reduce production term_ -> term MINUS term 
-- On NEWLINE reduce production term_ -> term MINUS term 
-- On MINUS reduce production term_ -> term MINUS term 
-- On LRARROW reduce production term_ -> term MINUS term 
-- On LARROW reduce production term_ -> term MINUS term 
-- On IN reduce production term_ -> term MINUS term 
-- On ELSE reduce production term_ -> term MINUS term 
-- On COMMA reduce production term_ -> term MINUS term 
-- On CMP reduce production term_ -> term MINUS term 
-- On ARROW reduce production term_ -> term MINUS term 
-- On AND reduce production term_ -> term MINUS term 

State 99:
term_ -> term DIV . term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
-- On TRUE shift to state 57
-- On NOT shift to state 58
-- On NONE shift to state 59
-- On MINUS shift to state 60
-- On LET shift to state 61
-- On LEFTPAR shift to state 64
-- On INTEGER shift to state 65
-- On IF shift to state 66
-- On IDENT shift to state 14
-- On FORALL shift to state 67
-- On FALSE shift to state 68
-- On EXISTS shift to state 69
-- On term_sub_ shift to state 70
-- On term_arg_ shift to state 71
-- On term_arg shift to state 72
-- On term_ shift to state 74
-- On term shift to state 100
-- On quant shift to state 78
-- On mk_term(term_arg_) shift to state 90
-- On mk_term(term_) shift to state 91
-- On ident shift to state 92

State 100:
term_ -> term . ARROW term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . LRARROW term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . OR term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . AND term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . CMP term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . DIV term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term DIV term . [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . MOD term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . PLUS term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . MINUS term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . TIMES term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
-- On TIMES reduce production term_ -> term DIV term 
-- On THEN reduce production term_ -> term DIV term 
-- On RIGHTSQ reduce production term_ -> term DIV term 
-- On RIGHTPAR reduce production term_ -> term DIV term 
-- On PLUS reduce production term_ -> term DIV term 
-- On OR reduce production term_ -> term DIV term 
-- On NEWLINE reduce production term_ -> term DIV term 
-- On MOD reduce production term_ -> term DIV term 
-- On MINUS reduce production term_ -> term DIV term 
-- On LRARROW reduce production term_ -> term DIV term 
-- On LARROW reduce production term_ -> term DIV term 
-- On IN reduce production term_ -> term DIV term 
-- On ELSE reduce production term_ -> term DIV term 
-- On DIV reduce production term_ -> term DIV term 
-- On COMMA reduce production term_ -> term DIV term 
-- On CMP reduce production term_ -> term DIV term 
-- On ARROW reduce production term_ -> term DIV term 
-- On AND reduce production term_ -> term DIV term 

State 101:
term_ -> term CMP . term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
-- On TRUE shift to state 57
-- On NOT shift to state 58
-- On NONE shift to state 59
-- On MINUS shift to state 60
-- On LET shift to state 61
-- On LEFTPAR shift to state 64
-- On INTEGER shift to state 65
-- On IF shift to state 66
-- On IDENT shift to state 14
-- On FORALL shift to state 67
-- On FALSE shift to state 68
-- On EXISTS shift to state 69
-- On term_sub_ shift to state 70
-- On term_arg_ shift to state 71
-- On term_arg shift to state 72
-- On term_ shift to state 74
-- On term shift to state 102
-- On quant shift to state 78
-- On mk_term(term_arg_) shift to state 90
-- On mk_term(term_) shift to state 91
-- On ident shift to state 92

State 102:
term_ -> term . ARROW term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . LRARROW term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . OR term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . AND term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . CMP term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term CMP term . [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . DIV term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . MOD term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . PLUS term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . MINUS term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . TIMES term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
-- On TIMES shift to state 76
-- On PLUS shift to state 86
-- On MOD shift to state 88
-- On MINUS shift to state 97
-- On DIV shift to state 99
-- On CMP shift to state 101
-- On THEN reduce production term_ -> term CMP term 
-- On RIGHTSQ reduce production term_ -> term CMP term 
-- On RIGHTPAR reduce production term_ -> term CMP term 
-- On OR reduce production term_ -> term CMP term 
-- On NEWLINE reduce production term_ -> term CMP term 
-- On LRARROW reduce production term_ -> term CMP term 
-- On LARROW reduce production term_ -> term CMP term 
-- On IN reduce production term_ -> term CMP term 
-- On ELSE reduce production term_ -> term CMP term 
-- On COMMA reduce production term_ -> term CMP term 
-- On ARROW reduce production term_ -> term CMP term 
-- On AND reduce production term_ -> term CMP term 

State 103:
term_ -> term AND . term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
-- On TRUE shift to state 57
-- On NOT shift to state 58
-- On NONE shift to state 59
-- On MINUS shift to state 60
-- On LET shift to state 61
-- On LEFTPAR shift to state 64
-- On INTEGER shift to state 65
-- On IF shift to state 66
-- On IDENT shift to state 14
-- On FORALL shift to state 67
-- On FALSE shift to state 68
-- On EXISTS shift to state 69
-- On term_sub_ shift to state 70
-- On term_arg_ shift to state 71
-- On term_arg shift to state 72
-- On term_ shift to state 74
-- On term shift to state 104
-- On quant shift to state 78
-- On mk_term(term_arg_) shift to state 90
-- On mk_term(term_) shift to state 91
-- On ident shift to state 92

State 104:
term_ -> term . ARROW term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . LRARROW term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . OR term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . AND term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term AND term . [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . CMP term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . DIV term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . MOD term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . PLUS term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . MINUS term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . TIMES term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
-- On TIMES shift to state 76
-- On PLUS shift to state 86
-- On MOD shift to state 88
-- On MINUS shift to state 97
-- On DIV shift to state 99
-- On CMP shift to state 101
-- On AND shift to state 103
-- On THEN reduce production term_ -> term AND term 
-- On RIGHTSQ reduce production term_ -> term AND term 
-- On RIGHTPAR reduce production term_ -> term AND term 
-- On OR reduce production term_ -> term AND term 
-- On NEWLINE reduce production term_ -> term AND term 
-- On LRARROW reduce production term_ -> term AND term 
-- On LARROW reduce production term_ -> term AND term 
-- On IN reduce production term_ -> term AND term 
-- On ELSE reduce production term_ -> term AND term 
-- On COMMA reduce production term_ -> term AND term 
-- On ARROW reduce production term_ -> term AND term 

State 105:
term_ -> term LRARROW . term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
-- On TRUE shift to state 57
-- On NOT shift to state 58
-- On NONE shift to state 59
-- On MINUS shift to state 60
-- On LET shift to state 61
-- On LEFTPAR shift to state 64
-- On INTEGER shift to state 65
-- On IF shift to state 66
-- On IDENT shift to state 14
-- On FORALL shift to state 67
-- On FALSE shift to state 68
-- On EXISTS shift to state 69
-- On term_sub_ shift to state 70
-- On term_arg_ shift to state 71
-- On term_arg shift to state 72
-- On term_ shift to state 74
-- On term shift to state 106
-- On quant shift to state 78
-- On mk_term(term_arg_) shift to state 90
-- On mk_term(term_) shift to state 91
-- On ident shift to state 92

State 106:
term_ -> term . ARROW term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . LRARROW term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term LRARROW term . [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . OR term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . AND term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . CMP term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . DIV term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . MOD term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . PLUS term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . MINUS term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . TIMES term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
-- On TIMES shift to state 76
-- On PLUS shift to state 86
-- On OR shift to state 95
-- On MOD shift to state 88
-- On MINUS shift to state 97
-- On LRARROW shift to state 105
-- On DIV shift to state 99
-- On CMP shift to state 101
-- On ARROW shift to state 107
-- On AND shift to state 103
-- On THEN reduce production term_ -> term LRARROW term 
-- On RIGHTSQ reduce production term_ -> term LRARROW term 
-- On RIGHTPAR reduce production term_ -> term LRARROW term 
-- On NEWLINE reduce production term_ -> term LRARROW term 
-- On LARROW reduce production term_ -> term LRARROW term 
-- On IN reduce production term_ -> term LRARROW term 
-- On ELSE reduce production term_ -> term LRARROW term 
-- On COMMA reduce production term_ -> term LRARROW term 

State 107:
term_ -> term ARROW . term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
-- On TRUE shift to state 57
-- On NOT shift to state 58
-- On NONE shift to state 59
-- On MINUS shift to state 60
-- On LET shift to state 61
-- On LEFTPAR shift to state 64
-- On INTEGER shift to state 65
-- On IF shift to state 66
-- On IDENT shift to state 14
-- On FORALL shift to state 67
-- On FALSE shift to state 68
-- On EXISTS shift to state 69
-- On term_sub_ shift to state 70
-- On term_arg_ shift to state 71
-- On term_arg shift to state 72
-- On term_ shift to state 74
-- On term shift to state 108
-- On quant shift to state 78
-- On mk_term(term_arg_) shift to state 90
-- On mk_term(term_) shift to state 91
-- On ident shift to state 92

State 108:
term_ -> term . ARROW term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term ARROW term . [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . LRARROW term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . OR term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . AND term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . CMP term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . DIV term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . MOD term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . PLUS term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . MINUS term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . TIMES term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
-- On TIMES shift to state 76
-- On PLUS shift to state 86
-- On OR shift to state 95
-- On MOD shift to state 88
-- On MINUS shift to state 97
-- On LRARROW shift to state 105
-- On DIV shift to state 99
-- On CMP shift to state 101
-- On ARROW shift to state 107
-- On AND shift to state 103
-- On THEN reduce production term_ -> term ARROW term 
-- On RIGHTSQ reduce production term_ -> term ARROW term 
-- On RIGHTPAR reduce production term_ -> term ARROW term 
-- On NEWLINE reduce production term_ -> term ARROW term 
-- On LARROW reduce production term_ -> term ARROW term 
-- On IN reduce production term_ -> term ARROW term 
-- On ELSE reduce production term_ -> term ARROW term 
-- On COMMA reduce production term_ -> term ARROW term 

State 109:
separated_nonempty_list(COMMA,term) -> term COMMA . separated_nonempty_list(COMMA,term) [ RIGHTPAR NEWLINE ]
-- On TRUE shift to state 57
-- On NOT shift to state 58
-- On NONE shift to state 59
-- On MINUS shift to state 60
-- On LET shift to state 61
-- On LEFTPAR shift to state 64
-- On INTEGER shift to state 65
-- On IF shift to state 66
-- On IDENT shift to state 14
-- On FORALL shift to state 67
-- On FALSE shift to state 68
-- On EXISTS shift to state 69
-- On term_sub_ shift to state 70
-- On term_arg_ shift to state 71
-- On term_arg shift to state 72
-- On term_ shift to state 74
-- On term shift to state 94
-- On separated_nonempty_list(COMMA,term) shift to state 110
-- On quant shift to state 78
-- On mk_term(term_arg_) shift to state 90
-- On mk_term(term_) shift to state 91
-- On ident shift to state 92

State 110:
separated_nonempty_list(COMMA,term) -> term COMMA separated_nonempty_list(COMMA,term) . [ RIGHTPAR NEWLINE ]
-- On RIGHTPAR reduce production separated_nonempty_list(COMMA,term) -> term COMMA separated_nonempty_list(COMMA,term) 
-- On NEWLINE reduce production separated_nonempty_list(COMMA,term) -> term COMMA separated_nonempty_list(COMMA,term) 

State 111:
loption(separated_nonempty_list(COMMA,term)) -> separated_nonempty_list(COMMA,term) . [ RIGHTPAR ]
-- On RIGHTPAR reduce production loption(separated_nonempty_list(COMMA,term)) -> separated_nonempty_list(COMMA,term) 

State 112:
term_ -> ident LEFTPAR loption(separated_nonempty_list(COMMA,term)) . RIGHTPAR [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
-- On RIGHTPAR shift to state 113

State 113:
term_ -> ident LEFTPAR loption(separated_nonempty_list(COMMA,term)) RIGHTPAR . [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
-- On TIMES reduce production term_ -> ident LEFTPAR loption(separated_nonempty_list(COMMA,term)) RIGHTPAR 
-- On THEN reduce production term_ -> ident LEFTPAR loption(separated_nonempty_list(COMMA,term)) RIGHTPAR 
-- On RIGHTSQ reduce production term_ -> ident LEFTPAR loption(separated_nonempty_list(COMMA,term)) RIGHTPAR 
-- On RIGHTPAR reduce production term_ -> ident LEFTPAR loption(separated_nonempty_list(COMMA,term)) RIGHTPAR 
-- On PLUS reduce production term_ -> ident LEFTPAR loption(separated_nonempty_list(COMMA,term)) RIGHTPAR 
-- On OR reduce production term_ -> ident LEFTPAR loption(separated_nonempty_list(COMMA,term)) RIGHTPAR 
-- On NEWLINE reduce production term_ -> ident LEFTPAR loption(separated_nonempty_list(COMMA,term)) RIGHTPAR 
-- On MOD reduce production term_ -> ident LEFTPAR loption(separated_nonempty_list(COMMA,term)) RIGHTPAR 
-- On MINUS reduce production term_ -> ident LEFTPAR loption(separated_nonempty_list(COMMA,term)) RIGHTPAR 
-- On LRARROW reduce production term_ -> ident LEFTPAR loption(separated_nonempty_list(COMMA,term)) RIGHTPAR 
-- On LARROW reduce production term_ -> ident LEFTPAR loption(separated_nonempty_list(COMMA,term)) RIGHTPAR 
-- On IN reduce production term_ -> ident LEFTPAR loption(separated_nonempty_list(COMMA,term)) RIGHTPAR 
-- On ELSE reduce production term_ -> ident LEFTPAR loption(separated_nonempty_list(COMMA,term)) RIGHTPAR 
-- On DIV reduce production term_ -> ident LEFTPAR loption(separated_nonempty_list(COMMA,term)) RIGHTPAR 
-- On COMMA reduce production term_ -> ident LEFTPAR loption(separated_nonempty_list(COMMA,term)) RIGHTPAR 
-- On CMP reduce production term_ -> ident LEFTPAR loption(separated_nonempty_list(COMMA,term)) RIGHTPAR 
-- On ARROW reduce production term_ -> ident LEFTPAR loption(separated_nonempty_list(COMMA,term)) RIGHTPAR 
-- On AND reduce production term_ -> ident LEFTPAR loption(separated_nonempty_list(COMMA,term)) RIGHTPAR 

State 114:
term_sub_ -> term_arg LEFTSQ term RIGHTSQ . [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LEFTSQ LARROW IN ELSE DIV COMMA CMP ARROW AND ]
-- On TIMES reduce production term_sub_ -> term_arg LEFTSQ term RIGHTSQ 
-- On THEN reduce production term_sub_ -> term_arg LEFTSQ term RIGHTSQ 
-- On RIGHTSQ reduce production term_sub_ -> term_arg LEFTSQ term RIGHTSQ 
-- On RIGHTPAR reduce production term_sub_ -> term_arg LEFTSQ term RIGHTSQ 
-- On PLUS reduce production term_sub_ -> term_arg LEFTSQ term RIGHTSQ 
-- On OR reduce production term_sub_ -> term_arg LEFTSQ term RIGHTSQ 
-- On NEWLINE reduce production term_sub_ -> term_arg LEFTSQ term RIGHTSQ 
-- On MOD reduce production term_sub_ -> term_arg LEFTSQ term RIGHTSQ 
-- On MINUS reduce production term_sub_ -> term_arg LEFTSQ term RIGHTSQ 
-- On LRARROW reduce production term_sub_ -> term_arg LEFTSQ term RIGHTSQ 
-- On LEFTSQ reduce production term_sub_ -> term_arg LEFTSQ term RIGHTSQ 
-- On LARROW reduce production term_sub_ -> term_arg LEFTSQ term RIGHTSQ 
-- On IN reduce production term_sub_ -> term_arg LEFTSQ term RIGHTSQ 
-- On ELSE reduce production term_sub_ -> term_arg LEFTSQ term RIGHTSQ 
-- On DIV reduce production term_sub_ -> term_arg LEFTSQ term RIGHTSQ 
-- On COMMA reduce production term_sub_ -> term_arg LEFTSQ term RIGHTSQ 
-- On CMP reduce production term_sub_ -> term_arg LEFTSQ term RIGHTSQ 
-- On ARROW reduce production term_sub_ -> term_arg LEFTSQ term RIGHTSQ 
-- On AND reduce production term_sub_ -> term_arg LEFTSQ term RIGHTSQ 

State 115:
term_sub_ -> term_arg LEFTSQ term LARROW . term RIGHTSQ [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LEFTSQ LARROW IN ELSE DIV COMMA CMP ARROW AND ]
-- On TRUE shift to state 57
-- On NOT shift to state 58
-- On NONE shift to state 59
-- On MINUS shift to state 60
-- On LET shift to state 61
-- On LEFTPAR shift to state 64
-- On INTEGER shift to state 65
-- On IF shift to state 66
-- On IDENT shift to state 14
-- On FORALL shift to state 67
-- On FALSE shift to state 68
-- On EXISTS shift to state 69
-- On term_sub_ shift to state 70
-- On term_arg_ shift to state 71
-- On term_arg shift to state 72
-- On term_ shift to state 74
-- On term shift to state 116
-- On quant shift to state 78
-- On mk_term(term_arg_) shift to state 90
-- On mk_term(term_) shift to state 91
-- On ident shift to state 92

State 116:
term_ -> term . ARROW term [ TIMES RIGHTSQ PLUS OR MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . LRARROW term [ TIMES RIGHTSQ PLUS OR MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . OR term [ TIMES RIGHTSQ PLUS OR MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . AND term [ TIMES RIGHTSQ PLUS OR MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . CMP term [ TIMES RIGHTSQ PLUS OR MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . DIV term [ TIMES RIGHTSQ PLUS OR MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . MOD term [ TIMES RIGHTSQ PLUS OR MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . PLUS term [ TIMES RIGHTSQ PLUS OR MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . MINUS term [ TIMES RIGHTSQ PLUS OR MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . TIMES term [ TIMES RIGHTSQ PLUS OR MOD MINUS LRARROW DIV CMP ARROW AND ]
term_sub_ -> term_arg LEFTSQ term LARROW term . RIGHTSQ [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LEFTSQ LARROW IN ELSE DIV COMMA CMP ARROW AND ]
-- On TIMES shift to state 76
-- On RIGHTSQ shift to state 117
-- On PLUS shift to state 86
-- On OR shift to state 95
-- On MOD shift to state 88
-- On MINUS shift to state 97
-- On LRARROW shift to state 105
-- On DIV shift to state 99
-- On CMP shift to state 101
-- On ARROW shift to state 107
-- On AND shift to state 103

State 117:
term_sub_ -> term_arg LEFTSQ term LARROW term RIGHTSQ . [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LEFTSQ LARROW IN ELSE DIV COMMA CMP ARROW AND ]
-- On TIMES reduce production term_sub_ -> term_arg LEFTSQ term LARROW term RIGHTSQ 
-- On THEN reduce production term_sub_ -> term_arg LEFTSQ term LARROW term RIGHTSQ 
-- On RIGHTSQ reduce production term_sub_ -> term_arg LEFTSQ term LARROW term RIGHTSQ 
-- On RIGHTPAR reduce production term_sub_ -> term_arg LEFTSQ term LARROW term RIGHTSQ 
-- On PLUS reduce production term_sub_ -> term_arg LEFTSQ term LARROW term RIGHTSQ 
-- On OR reduce production term_sub_ -> term_arg LEFTSQ term LARROW term RIGHTSQ 
-- On NEWLINE reduce production term_sub_ -> term_arg LEFTSQ term LARROW term RIGHTSQ 
-- On MOD reduce production term_sub_ -> term_arg LEFTSQ term LARROW term RIGHTSQ 
-- On MINUS reduce production term_sub_ -> term_arg LEFTSQ term LARROW term RIGHTSQ 
-- On LRARROW reduce production term_sub_ -> term_arg LEFTSQ term LARROW term RIGHTSQ 
-- On LEFTSQ reduce production term_sub_ -> term_arg LEFTSQ term LARROW term RIGHTSQ 
-- On LARROW reduce production term_sub_ -> term_arg LEFTSQ term LARROW term RIGHTSQ 
-- On IN reduce production term_sub_ -> term_arg LEFTSQ term LARROW term RIGHTSQ 
-- On ELSE reduce production term_sub_ -> term_arg LEFTSQ term LARROW term RIGHTSQ 
-- On DIV reduce production term_sub_ -> term_arg LEFTSQ term LARROW term RIGHTSQ 
-- On COMMA reduce production term_sub_ -> term_arg LEFTSQ term LARROW term RIGHTSQ 
-- On CMP reduce production term_sub_ -> term_arg LEFTSQ term LARROW term RIGHTSQ 
-- On ARROW reduce production term_sub_ -> term_arg LEFTSQ term LARROW term RIGHTSQ 
-- On AND reduce production term_sub_ -> term_arg LEFTSQ term LARROW term RIGHTSQ 

State 118:
term_ -> term . ARROW term [ TIMES THEN PLUS OR MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . LRARROW term [ TIMES THEN PLUS OR MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . OR term [ TIMES THEN PLUS OR MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . AND term [ TIMES THEN PLUS OR MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . CMP term [ TIMES THEN PLUS OR MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . DIV term [ TIMES THEN PLUS OR MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . MOD term [ TIMES THEN PLUS OR MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . PLUS term [ TIMES THEN PLUS OR MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . MINUS term [ TIMES THEN PLUS OR MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . TIMES term [ TIMES THEN PLUS OR MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> IF term . THEN term ELSE term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
-- On TIMES shift to state 76
-- On THEN shift to state 119
-- On PLUS shift to state 86
-- On OR shift to state 95
-- On MOD shift to state 88
-- On MINUS shift to state 97
-- On LRARROW shift to state 105
-- On DIV shift to state 99
-- On CMP shift to state 101
-- On ARROW shift to state 107
-- On AND shift to state 103

State 119:
term_ -> IF term THEN . term ELSE term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
-- On TRUE shift to state 57
-- On NOT shift to state 58
-- On NONE shift to state 59
-- On MINUS shift to state 60
-- On LET shift to state 61
-- On LEFTPAR shift to state 64
-- On INTEGER shift to state 65
-- On IF shift to state 66
-- On IDENT shift to state 14
-- On FORALL shift to state 67
-- On FALSE shift to state 68
-- On EXISTS shift to state 69
-- On term_sub_ shift to state 70
-- On term_arg_ shift to state 71
-- On term_arg shift to state 72
-- On term_ shift to state 74
-- On term shift to state 120
-- On quant shift to state 78
-- On mk_term(term_arg_) shift to state 90
-- On mk_term(term_) shift to state 91
-- On ident shift to state 92

State 120:
term_ -> term . ARROW term [ TIMES PLUS OR MOD MINUS LRARROW ELSE DIV CMP ARROW AND ]
term_ -> term . LRARROW term [ TIMES PLUS OR MOD MINUS LRARROW ELSE DIV CMP ARROW AND ]
term_ -> term . OR term [ TIMES PLUS OR MOD MINUS LRARROW ELSE DIV CMP ARROW AND ]
term_ -> term . AND term [ TIMES PLUS OR MOD MINUS LRARROW ELSE DIV CMP ARROW AND ]
term_ -> term . CMP term [ TIMES PLUS OR MOD MINUS LRARROW ELSE DIV CMP ARROW AND ]
term_ -> term . DIV term [ TIMES PLUS OR MOD MINUS LRARROW ELSE DIV CMP ARROW AND ]
term_ -> term . MOD term [ TIMES PLUS OR MOD MINUS LRARROW ELSE DIV CMP ARROW AND ]
term_ -> term . PLUS term [ TIMES PLUS OR MOD MINUS LRARROW ELSE DIV CMP ARROW AND ]
term_ -> term . MINUS term [ TIMES PLUS OR MOD MINUS LRARROW ELSE DIV CMP ARROW AND ]
term_ -> term . TIMES term [ TIMES PLUS OR MOD MINUS LRARROW ELSE DIV CMP ARROW AND ]
term_ -> IF term THEN term . ELSE term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
-- On TIMES shift to state 76
-- On PLUS shift to state 86
-- On OR shift to state 95
-- On MOD shift to state 88
-- On MINUS shift to state 97
-- On LRARROW shift to state 105
-- On ELSE shift to state 121
-- On DIV shift to state 99
-- On CMP shift to state 101
-- On ARROW shift to state 107
-- On AND shift to state 103

State 121:
term_ -> IF term THEN term ELSE . term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
-- On TRUE shift to state 57
-- On NOT shift to state 58
-- On NONE shift to state 59
-- On MINUS shift to state 60
-- On LET shift to state 61
-- On LEFTPAR shift to state 64
-- On INTEGER shift to state 65
-- On IF shift to state 66
-- On IDENT shift to state 14
-- On FORALL shift to state 67
-- On FALSE shift to state 68
-- On EXISTS shift to state 69
-- On term_sub_ shift to state 70
-- On term_arg_ shift to state 71
-- On term_arg shift to state 72
-- On term_ shift to state 74
-- On term shift to state 122
-- On quant shift to state 78
-- On mk_term(term_arg_) shift to state 90
-- On mk_term(term_) shift to state 91
-- On ident shift to state 92

State 122:
term_ -> term . ARROW term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . LRARROW term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . OR term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . AND term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . CMP term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . DIV term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . MOD term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . PLUS term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . MINUS term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . TIMES term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> IF term THEN term ELSE term . [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
-- On TIMES shift to state 76
-- On PLUS shift to state 86
-- On OR shift to state 95
-- On MOD shift to state 88
-- On MINUS shift to state 97
-- On LRARROW shift to state 105
-- On DIV shift to state 99
-- On CMP shift to state 101
-- On ARROW shift to state 107
-- On AND shift to state 103
-- On THEN reduce production term_ -> IF term THEN term ELSE term 
-- On RIGHTSQ reduce production term_ -> IF term THEN term ELSE term 
-- On RIGHTPAR reduce production term_ -> IF term THEN term ELSE term 
-- On NEWLINE reduce production term_ -> IF term THEN term ELSE term 
-- On LARROW reduce production term_ -> IF term THEN term ELSE term 
-- On IN reduce production term_ -> IF term THEN term ELSE term 
-- On ELSE reduce production term_ -> IF term THEN term ELSE term 
-- On COMMA reduce production term_ -> IF term THEN term ELSE term 

State 123:
term_ -> term . ARROW term [ TIMES RIGHTPAR PLUS OR MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . LRARROW term [ TIMES RIGHTPAR PLUS OR MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . OR term [ TIMES RIGHTPAR PLUS OR MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . AND term [ TIMES RIGHTPAR PLUS OR MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . CMP term [ TIMES RIGHTPAR PLUS OR MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . DIV term [ TIMES RIGHTPAR PLUS OR MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . MOD term [ TIMES RIGHTPAR PLUS OR MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . PLUS term [ TIMES RIGHTPAR PLUS OR MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . MINUS term [ TIMES RIGHTPAR PLUS OR MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . TIMES term [ TIMES RIGHTPAR PLUS OR MOD MINUS LRARROW DIV CMP ARROW AND ]
term_sub_ -> LEFTPAR term . RIGHTPAR [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LEFTSQ LARROW IN ELSE DIV COMMA CMP ARROW AND ]
-- On TIMES shift to state 76
-- On RIGHTPAR shift to state 124
-- On PLUS shift to state 86
-- On OR shift to state 95
-- On MOD shift to state 88
-- On MINUS shift to state 97
-- On LRARROW shift to state 105
-- On DIV shift to state 99
-- On CMP shift to state 101
-- On ARROW shift to state 107
-- On AND shift to state 103

State 124:
term_sub_ -> LEFTPAR term RIGHTPAR . [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LEFTSQ LARROW IN ELSE DIV COMMA CMP ARROW AND ]
-- On TIMES reduce production term_sub_ -> LEFTPAR term RIGHTPAR 
-- On THEN reduce production term_sub_ -> LEFTPAR term RIGHTPAR 
-- On RIGHTSQ reduce production term_sub_ -> LEFTPAR term RIGHTPAR 
-- On RIGHTPAR reduce production term_sub_ -> LEFTPAR term RIGHTPAR 
-- On PLUS reduce production term_sub_ -> LEFTPAR term RIGHTPAR 
-- On OR reduce production term_sub_ -> LEFTPAR term RIGHTPAR 
-- On NEWLINE reduce production term_sub_ -> LEFTPAR term RIGHTPAR 
-- On MOD reduce production term_sub_ -> LEFTPAR term RIGHTPAR 
-- On MINUS reduce production term_sub_ -> LEFTPAR term RIGHTPAR 
-- On LRARROW reduce production term_sub_ -> LEFTPAR term RIGHTPAR 
-- On LEFTSQ reduce production term_sub_ -> LEFTPAR term RIGHTPAR 
-- On LARROW reduce production term_sub_ -> LEFTPAR term RIGHTPAR 
-- On IN reduce production term_sub_ -> LEFTPAR term RIGHTPAR 
-- On ELSE reduce production term_sub_ -> LEFTPAR term RIGHTPAR 
-- On DIV reduce production term_sub_ -> LEFTPAR term RIGHTPAR 
-- On COMMA reduce production term_sub_ -> LEFTPAR term RIGHTPAR 
-- On CMP reduce production term_sub_ -> LEFTPAR term RIGHTPAR 
-- On ARROW reduce production term_sub_ -> LEFTPAR term RIGHTPAR 
-- On AND reduce production term_sub_ -> LEFTPAR term RIGHTPAR 

State 125:
term_ -> term . ARROW term [ TIMES PLUS OR MOD MINUS LRARROW IN DIV CMP ARROW AND ]
term_ -> term . LRARROW term [ TIMES PLUS OR MOD MINUS LRARROW IN DIV CMP ARROW AND ]
term_ -> term . OR term [ TIMES PLUS OR MOD MINUS LRARROW IN DIV CMP ARROW AND ]
term_ -> term . AND term [ TIMES PLUS OR MOD MINUS LRARROW IN DIV CMP ARROW AND ]
term_ -> term . CMP term [ TIMES PLUS OR MOD MINUS LRARROW IN DIV CMP ARROW AND ]
term_ -> term . DIV term [ TIMES PLUS OR MOD MINUS LRARROW IN DIV CMP ARROW AND ]
term_ -> term . MOD term [ TIMES PLUS OR MOD MINUS LRARROW IN DIV CMP ARROW AND ]
term_ -> term . PLUS term [ TIMES PLUS OR MOD MINUS LRARROW IN DIV CMP ARROW AND ]
term_ -> term . MINUS term [ TIMES PLUS OR MOD MINUS LRARROW IN DIV CMP ARROW AND ]
term_ -> term . TIMES term [ TIMES PLUS OR MOD MINUS LRARROW IN DIV CMP ARROW AND ]
term_ -> LET ident EQUAL term . IN term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
-- On TIMES shift to state 76
-- On PLUS shift to state 86
-- On OR shift to state 95
-- On MOD shift to state 88
-- On MINUS shift to state 97
-- On LRARROW shift to state 105
-- On IN shift to state 126
-- On DIV shift to state 99
-- On CMP shift to state 101
-- On ARROW shift to state 107
-- On AND shift to state 103

State 126:
term_ -> LET ident EQUAL term IN . term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
-- On TRUE shift to state 57
-- On NOT shift to state 58
-- On NONE shift to state 59
-- On MINUS shift to state 60
-- On LET shift to state 61
-- On LEFTPAR shift to state 64
-- On INTEGER shift to state 65
-- On IF shift to state 66
-- On IDENT shift to state 14
-- On FORALL shift to state 67
-- On FALSE shift to state 68
-- On EXISTS shift to state 69
-- On term_sub_ shift to state 70
-- On term_arg_ shift to state 71
-- On term_arg shift to state 72
-- On term_ shift to state 74
-- On term shift to state 127
-- On quant shift to state 78
-- On mk_term(term_arg_) shift to state 90
-- On mk_term(term_) shift to state 91
-- On ident shift to state 92

State 127:
term_ -> term . ARROW term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . LRARROW term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . OR term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . AND term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . CMP term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . DIV term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . MOD term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . PLUS term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . MINUS term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . TIMES term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> LET ident EQUAL term IN term . [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
-- On TIMES shift to state 76
-- On PLUS shift to state 86
-- On OR shift to state 95
-- On MOD shift to state 88
-- On MINUS shift to state 97
-- On LRARROW shift to state 105
-- On DIV shift to state 99
-- On CMP shift to state 101
-- On ARROW shift to state 107
-- On AND shift to state 103
-- On THEN reduce production term_ -> LET ident EQUAL term IN term 
-- On RIGHTSQ reduce production term_ -> LET ident EQUAL term IN term 
-- On RIGHTPAR reduce production term_ -> LET ident EQUAL term IN term 
-- On NEWLINE reduce production term_ -> LET ident EQUAL term IN term 
-- On LARROW reduce production term_ -> LET ident EQUAL term IN term 
-- On IN reduce production term_ -> LET ident EQUAL term IN term 
-- On ELSE reduce production term_ -> LET ident EQUAL term IN term 
-- On COMMA reduce production term_ -> LET ident EQUAL term IN term 

State 128:
term_ -> MINUS term . [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . ARROW term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . LRARROW term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . OR term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . AND term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . CMP term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . DIV term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . MOD term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . PLUS term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . MINUS term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . TIMES term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
-- On TIMES reduce production term_ -> MINUS term 
-- On THEN reduce production term_ -> MINUS term 
-- On RIGHTSQ reduce production term_ -> MINUS term 
-- On RIGHTPAR reduce production term_ -> MINUS term 
-- On PLUS reduce production term_ -> MINUS term 
-- On OR reduce production term_ -> MINUS term 
-- On NEWLINE reduce production term_ -> MINUS term 
-- On MOD reduce production term_ -> MINUS term 
-- On MINUS reduce production term_ -> MINUS term 
-- On LRARROW reduce production term_ -> MINUS term 
-- On LARROW reduce production term_ -> MINUS term 
-- On IN reduce production term_ -> MINUS term 
-- On ELSE reduce production term_ -> MINUS term 
-- On DIV reduce production term_ -> MINUS term 
-- On COMMA reduce production term_ -> MINUS term 
-- On CMP reduce production term_ -> MINUS term 
-- On ARROW reduce production term_ -> MINUS term 
-- On AND reduce production term_ -> MINUS term 

State 129:
term_ -> NOT term . [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . ARROW term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . LRARROW term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . OR term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . AND term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . CMP term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . DIV term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . MOD term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . PLUS term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . MINUS term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . TIMES term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
-- On TIMES shift to state 76
-- On PLUS shift to state 86
-- On MOD shift to state 88
-- On MINUS shift to state 97
-- On DIV shift to state 99
-- On CMP shift to state 101
-- On THEN reduce production term_ -> NOT term 
-- On RIGHTSQ reduce production term_ -> NOT term 
-- On RIGHTPAR reduce production term_ -> NOT term 
-- On OR reduce production term_ -> NOT term 
-- On NEWLINE reduce production term_ -> NOT term 
-- On LRARROW reduce production term_ -> NOT term 
-- On LARROW reduce production term_ -> NOT term 
-- On IN reduce production term_ -> NOT term 
-- On ELSE reduce production term_ -> NOT term 
-- On COMMA reduce production term_ -> NOT term 
-- On ARROW reduce production term_ -> NOT term 
-- On AND reduce production term_ -> NOT term 

State 130:
comma_list1(term) -> separated_nonempty_list(COMMA,term) . [ NEWLINE ]
-- On NEWLINE reduce production comma_list1(term) -> separated_nonempty_list(COMMA,term) 

State 131:
variant -> VARIANT comma_list1(term) . NEWLINE [ WHILE VARIANT TRUE STRING RETURN REQUIRES NOT NONE MINUS LEFTSQ LEFTPAR LABEL INVARIANT INTEGER IF IDENT FOR FALSE ENSURES CHECK BREAK ASSUME ASSERT ]
-- On NEWLINE shift to state 132

State 132:
variant -> VARIANT comma_list1(term) NEWLINE . [ WHILE VARIANT TRUE STRING RETURN REQUIRES NOT NONE MINUS LEFTSQ LEFTPAR LABEL INVARIANT INTEGER IF IDENT FOR FALSE ENSURES CHECK BREAK ASSUME ASSERT ]
-- On WHILE reduce production variant -> VARIANT comma_list1(term) NEWLINE 
-- On VARIANT reduce production variant -> VARIANT comma_list1(term) NEWLINE 
-- On TRUE reduce production variant -> VARIANT comma_list1(term) NEWLINE 
-- On STRING reduce production variant -> VARIANT comma_list1(term) NEWLINE 
-- On RETURN reduce production variant -> VARIANT comma_list1(term) NEWLINE 
-- On REQUIRES reduce production variant -> VARIANT comma_list1(term) NEWLINE 
-- On NOT reduce production variant -> VARIANT comma_list1(term) NEWLINE 
-- On NONE reduce production variant -> VARIANT comma_list1(term) NEWLINE 
-- On MINUS reduce production variant -> VARIANT comma_list1(term) NEWLINE 
-- On LEFTSQ reduce production variant -> VARIANT comma_list1(term) NEWLINE 
-- On LEFTPAR reduce production variant -> VARIANT comma_list1(term) NEWLINE 
-- On LABEL reduce production variant -> VARIANT comma_list1(term) NEWLINE 
-- On INVARIANT reduce production variant -> VARIANT comma_list1(term) NEWLINE 
-- On INTEGER reduce production variant -> VARIANT comma_list1(term) NEWLINE 
-- On IF reduce production variant -> VARIANT comma_list1(term) NEWLINE 
-- On IDENT reduce production variant -> VARIANT comma_list1(term) NEWLINE 
-- On FOR reduce production variant -> VARIANT comma_list1(term) NEWLINE 
-- On FALSE reduce production variant -> VARIANT comma_list1(term) NEWLINE 
-- On ENSURES reduce production variant -> VARIANT comma_list1(term) NEWLINE 
-- On CHECK reduce production variant -> VARIANT comma_list1(term) NEWLINE 
-- On BREAK reduce production variant -> VARIANT comma_list1(term) NEWLINE 
-- On ASSUME reduce production variant -> VARIANT comma_list1(term) NEWLINE 
-- On ASSERT reduce production variant -> VARIANT comma_list1(term) NEWLINE 

State 133:
invariant -> INVARIANT . term NEWLINE [ WHILE VARIANT TRUE STRING RETURN NOT NONE MINUS LEFTSQ LEFTPAR LABEL INVARIANT INTEGER IF IDENT FOR FALSE CHECK BREAK ASSUME ASSERT ]
-- On TRUE shift to state 57
-- On NOT shift to state 58
-- On NONE shift to state 59
-- On MINUS shift to state 60
-- On LET shift to state 61
-- On LEFTPAR shift to state 64
-- On INTEGER shift to state 65
-- On IF shift to state 66
-- On IDENT shift to state 14
-- On FORALL shift to state 67
-- On FALSE shift to state 68
-- On EXISTS shift to state 69
-- On term_sub_ shift to state 70
-- On term_arg_ shift to state 71
-- On term_arg shift to state 72
-- On term_ shift to state 74
-- On term shift to state 134
-- On quant shift to state 78
-- On mk_term(term_arg_) shift to state 90
-- On mk_term(term_) shift to state 91
-- On ident shift to state 92

State 134:
invariant -> INVARIANT term . NEWLINE [ WHILE VARIANT TRUE STRING RETURN NOT NONE MINUS LEFTSQ LEFTPAR LABEL INVARIANT INTEGER IF IDENT FOR FALSE CHECK BREAK ASSUME ASSERT ]
term_ -> term . ARROW term [ TIMES PLUS OR NEWLINE MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . LRARROW term [ TIMES PLUS OR NEWLINE MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . OR term [ TIMES PLUS OR NEWLINE MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . AND term [ TIMES PLUS OR NEWLINE MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . CMP term [ TIMES PLUS OR NEWLINE MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . DIV term [ TIMES PLUS OR NEWLINE MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . MOD term [ TIMES PLUS OR NEWLINE MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . PLUS term [ TIMES PLUS OR NEWLINE MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . MINUS term [ TIMES PLUS OR NEWLINE MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . TIMES term [ TIMES PLUS OR NEWLINE MOD MINUS LRARROW DIV CMP ARROW AND ]
-- On TIMES shift to state 76
-- On PLUS shift to state 86
-- On OR shift to state 95
-- On NEWLINE shift to state 135
-- On MOD shift to state 88
-- On MINUS shift to state 97
-- On LRARROW shift to state 105
-- On DIV shift to state 99
-- On CMP shift to state 101
-- On ARROW shift to state 107
-- On AND shift to state 103

State 135:
invariant -> INVARIANT term NEWLINE . [ WHILE VARIANT TRUE STRING RETURN NOT NONE MINUS LEFTSQ LEFTPAR LABEL INVARIANT INTEGER IF IDENT FOR FALSE CHECK BREAK ASSUME ASSERT ]
-- On WHILE reduce production invariant -> INVARIANT term NEWLINE 
-- On VARIANT reduce production invariant -> INVARIANT term NEWLINE 
-- On TRUE reduce production invariant -> INVARIANT term NEWLINE 
-- On STRING reduce production invariant -> INVARIANT term NEWLINE 
-- On RETURN reduce production invariant -> INVARIANT term NEWLINE 
-- On NOT reduce production invariant -> INVARIANT term NEWLINE 
-- On NONE reduce production invariant -> INVARIANT term NEWLINE 
-- On MINUS reduce production invariant -> INVARIANT term NEWLINE 
-- On LEFTSQ reduce production invariant -> INVARIANT term NEWLINE 
-- On LEFTPAR reduce production invariant -> INVARIANT term NEWLINE 
-- On LABEL reduce production invariant -> INVARIANT term NEWLINE 
-- On INVARIANT reduce production invariant -> INVARIANT term NEWLINE 
-- On INTEGER reduce production invariant -> INVARIANT term NEWLINE 
-- On IF reduce production invariant -> INVARIANT term NEWLINE 
-- On IDENT reduce production invariant -> INVARIANT term NEWLINE 
-- On FOR reduce production invariant -> INVARIANT term NEWLINE 
-- On FALSE reduce production invariant -> INVARIANT term NEWLINE 
-- On CHECK reduce production invariant -> INVARIANT term NEWLINE 
-- On BREAK reduce production invariant -> INVARIANT term NEWLINE 
-- On ASSUME reduce production invariant -> INVARIANT term NEWLINE 
-- On ASSERT reduce production invariant -> INVARIANT term NEWLINE 

State 136:
loop_annotation -> variant . loop_annotation [ WHILE TRUE STRING RETURN NOT NONE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FOR FALSE CHECK BREAK ASSUME ASSERT ]
-- On VARIANT shift to state 56
-- On INVARIANT shift to state 133
-- On variant shift to state 136
-- On loop_annotation shift to state 137
-- On invariant shift to state 138
-- On WHILE reduce production loop_annotation -> 
-- On TRUE reduce production loop_annotation -> 
-- On STRING reduce production loop_annotation -> 
-- On RETURN reduce production loop_annotation -> 
-- On NOT reduce production loop_annotation -> 
-- On NONE reduce production loop_annotation -> 
-- On MINUS reduce production loop_annotation -> 
-- On LEFTSQ reduce production loop_annotation -> 
-- On LEFTPAR reduce production loop_annotation -> 
-- On LABEL reduce production loop_annotation -> 
-- On INTEGER reduce production loop_annotation -> 
-- On IF reduce production loop_annotation -> 
-- On IDENT reduce production loop_annotation -> 
-- On FOR reduce production loop_annotation -> 
-- On FALSE reduce production loop_annotation -> 
-- On CHECK reduce production loop_annotation -> 
-- On BREAK reduce production loop_annotation -> 
-- On ASSUME reduce production loop_annotation -> 
-- On ASSERT reduce production loop_annotation -> 

State 137:
loop_annotation -> variant loop_annotation . [ WHILE TRUE STRING RETURN NOT NONE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FOR FALSE CHECK BREAK ASSUME ASSERT ]
-- On WHILE reduce production loop_annotation -> variant loop_annotation 
-- On TRUE reduce production loop_annotation -> variant loop_annotation 
-- On STRING reduce production loop_annotation -> variant loop_annotation 
-- On RETURN reduce production loop_annotation -> variant loop_annotation 
-- On NOT reduce production loop_annotation -> variant loop_annotation 
-- On NONE reduce production loop_annotation -> variant loop_annotation 
-- On MINUS reduce production loop_annotation -> variant loop_annotation 
-- On LEFTSQ reduce production loop_annotation -> variant loop_annotation 
-- On LEFTPAR reduce production loop_annotation -> variant loop_annotation 
-- On LABEL reduce production loop_annotation -> variant loop_annotation 
-- On INTEGER reduce production loop_annotation -> variant loop_annotation 
-- On IF reduce production loop_annotation -> variant loop_annotation 
-- On IDENT reduce production loop_annotation -> variant loop_annotation 
-- On FOR reduce production loop_annotation -> variant loop_annotation 
-- On FALSE reduce production loop_annotation -> variant loop_annotation 
-- On CHECK reduce production loop_annotation -> variant loop_annotation 
-- On BREAK reduce production loop_annotation -> variant loop_annotation 
-- On ASSUME reduce production loop_annotation -> variant loop_annotation 
-- On ASSERT reduce production loop_annotation -> variant loop_annotation 

State 138:
loop_annotation -> invariant . loop_annotation [ WHILE TRUE STRING RETURN NOT NONE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FOR FALSE CHECK BREAK ASSUME ASSERT ]
-- On VARIANT shift to state 56
-- On INVARIANT shift to state 133
-- On variant shift to state 136
-- On loop_annotation shift to state 139
-- On invariant shift to state 138
-- On WHILE reduce production loop_annotation -> 
-- On TRUE reduce production loop_annotation -> 
-- On STRING reduce production loop_annotation -> 
-- On RETURN reduce production loop_annotation -> 
-- On NOT reduce production loop_annotation -> 
-- On NONE reduce production loop_annotation -> 
-- On MINUS reduce production loop_annotation -> 
-- On LEFTSQ reduce production loop_annotation -> 
-- On LEFTPAR reduce production loop_annotation -> 
-- On LABEL reduce production loop_annotation -> 
-- On INTEGER reduce production loop_annotation -> 
-- On IF reduce production loop_annotation -> 
-- On IDENT reduce production loop_annotation -> 
-- On FOR reduce production loop_annotation -> 
-- On FALSE reduce production loop_annotation -> 
-- On CHECK reduce production loop_annotation -> 
-- On BREAK reduce production loop_annotation -> 
-- On ASSUME reduce production loop_annotation -> 
-- On ASSERT reduce production loop_annotation -> 

State 139:
loop_annotation -> invariant loop_annotation . [ WHILE TRUE STRING RETURN NOT NONE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FOR FALSE CHECK BREAK ASSUME ASSERT ]
-- On WHILE reduce production loop_annotation -> invariant loop_annotation 
-- On TRUE reduce production loop_annotation -> invariant loop_annotation 
-- On STRING reduce production loop_annotation -> invariant loop_annotation 
-- On RETURN reduce production loop_annotation -> invariant loop_annotation 
-- On NOT reduce production loop_annotation -> invariant loop_annotation 
-- On NONE reduce production loop_annotation -> invariant loop_annotation 
-- On MINUS reduce production loop_annotation -> invariant loop_annotation 
-- On LEFTSQ reduce production loop_annotation -> invariant loop_annotation 
-- On LEFTPAR reduce production loop_annotation -> invariant loop_annotation 
-- On LABEL reduce production loop_annotation -> invariant loop_annotation 
-- On INTEGER reduce production loop_annotation -> invariant loop_annotation 
-- On IF reduce production loop_annotation -> invariant loop_annotation 
-- On IDENT reduce production loop_annotation -> invariant loop_annotation 
-- On FOR reduce production loop_annotation -> invariant loop_annotation 
-- On FALSE reduce production loop_annotation -> invariant loop_annotation 
-- On CHECK reduce production loop_annotation -> invariant loop_annotation 
-- On BREAK reduce production loop_annotation -> invariant loop_annotation 
-- On ASSUME reduce production loop_annotation -> invariant loop_annotation 
-- On ASSERT reduce production loop_annotation -> invariant loop_annotation 

State 140:
loop_body -> NEWLINE BEGIN loop_annotation . nonempty_list(stmt) END [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF END DEF CHECK BREAK ASSUME ASSERT ]
-- On WHILE shift to state 5
-- On TRUE shift to state 6
-- On STRING shift to state 7
-- On RETURN shift to state 52
-- On NOT shift to state 8
-- On NONE shift to state 9
-- On MINUS shift to state 10
-- On LEFTSQ shift to state 11
-- On LEFTPAR shift to state 12
-- On LABEL shift to state 141
-- On INTEGER shift to state 13
-- On IF shift to state 143
-- On IDENT shift to state 14
-- On FOR shift to state 148
-- On FALSE shift to state 15
-- On CHECK shift to state 153
-- On BREAK shift to state 154
-- On ASSUME shift to state 155
-- On ASSERT shift to state 156
-- On stmt_desc shift to state 173
-- On stmt shift to state 174
-- On simple_stmt_desc shift to state 157
-- On simple_stmt shift to state 175
-- On nonempty_list(stmt) shift to state 193
-- On located(stmt_desc) shift to state 178
-- On located(simple_stmt_desc) shift to state 161
-- On ident shift to state 162
-- On expr_desc shift to state 21
-- On expr shift to state 165
-- On assertion_kind shift to state 171

State 141:
simple_stmt_desc -> LABEL . ident [ NEWLINE ]
-- On IDENT shift to state 14
-- On ident shift to state 142

State 142:
simple_stmt_desc -> LABEL ident . [ NEWLINE ]
-- On NEWLINE reduce production simple_stmt_desc -> LABEL ident 

State 143:
stmt_desc -> IF . expr COLON suite else_branch [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF END DEF CHECK BREAK ASSUME ASSERT ]
-- On TRUE shift to state 6
-- On STRING shift to state 7
-- On NOT shift to state 8
-- On NONE shift to state 9
-- On MINUS shift to state 10
-- On LEFTSQ shift to state 11
-- On LEFTPAR shift to state 12
-- On INTEGER shift to state 13
-- On IDENT shift to state 14
-- On FALSE shift to state 15
-- On ident shift to state 16
-- On expr_desc shift to state 21
-- On expr shift to state 144

State 144:
expr_desc -> expr . LEFTSQ expr RIGHTSQ [ TIMES PLUS OR MOD MINUS LEFTSQ DIV COLON CMP AND ]
expr_desc -> expr . PLUS expr [ TIMES PLUS OR MOD MINUS LEFTSQ DIV COLON CMP AND ]
expr_desc -> expr . MINUS expr [ TIMES PLUS OR MOD MINUS LEFTSQ DIV COLON CMP AND ]
expr_desc -> expr . DIV expr [ TIMES PLUS OR MOD MINUS LEFTSQ DIV COLON CMP AND ]
expr_desc -> expr . MOD expr [ TIMES PLUS OR MOD MINUS LEFTSQ DIV COLON CMP AND ]
expr_desc -> expr . CMP expr [ TIMES PLUS OR MOD MINUS LEFTSQ DIV COLON CMP AND ]
expr_desc -> expr . AND expr [ TIMES PLUS OR MOD MINUS LEFTSQ DIV COLON CMP AND ]
expr_desc -> expr . OR expr [ TIMES PLUS OR MOD MINUS LEFTSQ DIV COLON CMP AND ]
expr_desc -> expr . TIMES expr [ TIMES PLUS OR MOD MINUS LEFTSQ DIV COLON CMP AND ]
stmt_desc -> IF expr . COLON suite else_branch [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF END DEF CHECK BREAK ASSUME ASSERT ]
-- On TIMES shift to state 23
-- On PLUS shift to state 28
-- On OR shift to state 34
-- On MOD shift to state 30
-- On MINUS shift to state 36
-- On LEFTSQ shift to state 25
-- On DIV shift to state 32
-- On COLON shift to state 145
-- On CMP shift to state 38
-- On AND shift to state 40

State 145:
stmt_desc -> IF expr COLON . suite else_branch [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF END DEF CHECK BREAK ASSUME ASSERT ]
-- On TRUE shift to state 6
-- On STRING shift to state 7
-- On RETURN shift to state 52
-- On NOT shift to state 8
-- On NONE shift to state 9
-- On NEWLINE shift to state 146
-- On MINUS shift to state 10
-- On LEFTSQ shift to state 11
-- On LEFTPAR shift to state 12
-- On LABEL shift to state 141
-- On INTEGER shift to state 13
-- On IDENT shift to state 14
-- On FALSE shift to state 15
-- On CHECK shift to state 153
-- On BREAK shift to state 154
-- On ASSUME shift to state 155
-- On ASSERT shift to state 156
-- On suite shift to state 181
-- On simple_stmt_desc shift to state 157
-- On simple_stmt shift to state 185
-- On located(simple_stmt_desc) shift to state 161
-- On ident shift to state 162
-- On expr_desc shift to state 21
-- On expr shift to state 165
-- On assertion_kind shift to state 171

State 146:
suite -> NEWLINE . BEGIN nonempty_list(stmt) END [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF END ELSE ELIF DEF CHECK BREAK ASSUME ASSERT ]
-- On BEGIN shift to state 147

State 147:
suite -> NEWLINE BEGIN . nonempty_list(stmt) END [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF END ELSE ELIF DEF CHECK BREAK ASSUME ASSERT ]
-- On WHILE shift to state 5
-- On TRUE shift to state 6
-- On STRING shift to state 7
-- On RETURN shift to state 52
-- On NOT shift to state 8
-- On NONE shift to state 9
-- On MINUS shift to state 10
-- On LEFTSQ shift to state 11
-- On LEFTPAR shift to state 12
-- On LABEL shift to state 141
-- On INTEGER shift to state 13
-- On IF shift to state 143
-- On IDENT shift to state 14
-- On FOR shift to state 148
-- On FALSE shift to state 15
-- On CHECK shift to state 153
-- On BREAK shift to state 154
-- On ASSUME shift to state 155
-- On ASSERT shift to state 156
-- On stmt_desc shift to state 173
-- On stmt shift to state 174
-- On simple_stmt_desc shift to state 157
-- On simple_stmt shift to state 175
-- On nonempty_list(stmt) shift to state 179
-- On located(stmt_desc) shift to state 178
-- On located(simple_stmt_desc) shift to state 161
-- On ident shift to state 162
-- On expr_desc shift to state 21
-- On expr shift to state 165
-- On assertion_kind shift to state 171

State 148:
stmt_desc -> FOR . ident IN expr COLON loop_body [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF END DEF CHECK BREAK ASSUME ASSERT ]
-- On IDENT shift to state 14
-- On ident shift to state 149

State 149:
stmt_desc -> FOR ident . IN expr COLON loop_body [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF END DEF CHECK BREAK ASSUME ASSERT ]
-- On IN shift to state 150

State 150:
stmt_desc -> FOR ident IN . expr COLON loop_body [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF END DEF CHECK BREAK ASSUME ASSERT ]
-- On TRUE shift to state 6
-- On STRING shift to state 7
-- On NOT shift to state 8
-- On NONE shift to state 9
-- On MINUS shift to state 10
-- On LEFTSQ shift to state 11
-- On LEFTPAR shift to state 12
-- On INTEGER shift to state 13
-- On IDENT shift to state 14
-- On FALSE shift to state 15
-- On ident shift to state 16
-- On expr_desc shift to state 21
-- On expr shift to state 151

State 151:
expr_desc -> expr . LEFTSQ expr RIGHTSQ [ TIMES PLUS OR MOD MINUS LEFTSQ DIV COLON CMP AND ]
expr_desc -> expr . PLUS expr [ TIMES PLUS OR MOD MINUS LEFTSQ DIV COLON CMP AND ]
expr_desc -> expr . MINUS expr [ TIMES PLUS OR MOD MINUS LEFTSQ DIV COLON CMP AND ]
expr_desc -> expr . DIV expr [ TIMES PLUS OR MOD MINUS LEFTSQ DIV COLON CMP AND ]
expr_desc -> expr . MOD expr [ TIMES PLUS OR MOD MINUS LEFTSQ DIV COLON CMP AND ]
expr_desc -> expr . CMP expr [ TIMES PLUS OR MOD MINUS LEFTSQ DIV COLON CMP AND ]
expr_desc -> expr . AND expr [ TIMES PLUS OR MOD MINUS LEFTSQ DIV COLON CMP AND ]
expr_desc -> expr . OR expr [ TIMES PLUS OR MOD MINUS LEFTSQ DIV COLON CMP AND ]
expr_desc -> expr . TIMES expr [ TIMES PLUS OR MOD MINUS LEFTSQ DIV COLON CMP AND ]
stmt_desc -> FOR ident IN expr . COLON loop_body [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF END DEF CHECK BREAK ASSUME ASSERT ]
-- On TIMES shift to state 23
-- On PLUS shift to state 28
-- On OR shift to state 34
-- On MOD shift to state 30
-- On MINUS shift to state 36
-- On LEFTSQ shift to state 25
-- On DIV shift to state 32
-- On COLON shift to state 152
-- On CMP shift to state 38
-- On AND shift to state 40

State 152:
stmt_desc -> FOR ident IN expr COLON . loop_body [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF END DEF CHECK BREAK ASSUME ASSERT ]
-- On TRUE shift to state 6
-- On STRING shift to state 7
-- On RETURN shift to state 52
-- On NOT shift to state 8
-- On NONE shift to state 9
-- On NEWLINE shift to state 54
-- On MINUS shift to state 10
-- On LEFTSQ shift to state 11
-- On LEFTPAR shift to state 12
-- On LABEL shift to state 141
-- On INTEGER shift to state 13
-- On IDENT shift to state 14
-- On FALSE shift to state 15
-- On CHECK shift to state 153
-- On BREAK shift to state 154
-- On ASSUME shift to state 155
-- On ASSERT shift to state 156
-- On simple_stmt_desc shift to state 157
-- On simple_stmt shift to state 158
-- On loop_body shift to state 160
-- On located(simple_stmt_desc) shift to state 161
-- On ident shift to state 162
-- On expr_desc shift to state 21
-- On expr shift to state 165
-- On assertion_kind shift to state 171

State 153:
assertion_kind -> CHECK . [ TRUE NOT NONE MINUS LET LEFTPAR INTEGER IF IDENT FORALL FALSE EXISTS ]
-- On TRUE reduce production assertion_kind -> CHECK 
-- On NOT reduce production assertion_kind -> CHECK 
-- On NONE reduce production assertion_kind -> CHECK 
-- On MINUS reduce production assertion_kind -> CHECK 
-- On LET reduce production assertion_kind -> CHECK 
-- On LEFTPAR reduce production assertion_kind -> CHECK 
-- On INTEGER reduce production assertion_kind -> CHECK 
-- On IF reduce production assertion_kind -> CHECK 
-- On IDENT reduce production assertion_kind -> CHECK 
-- On FORALL reduce production assertion_kind -> CHECK 
-- On FALSE reduce production assertion_kind -> CHECK 
-- On EXISTS reduce production assertion_kind -> CHECK 

State 154:
simple_stmt_desc -> BREAK . [ NEWLINE ]
-- On NEWLINE reduce production simple_stmt_desc -> BREAK 

State 155:
assertion_kind -> ASSUME . [ TRUE NOT NONE MINUS LET LEFTPAR INTEGER IF IDENT FORALL FALSE EXISTS ]
-- On TRUE reduce production assertion_kind -> ASSUME 
-- On NOT reduce production assertion_kind -> ASSUME 
-- On NONE reduce production assertion_kind -> ASSUME 
-- On MINUS reduce production assertion_kind -> ASSUME 
-- On LET reduce production assertion_kind -> ASSUME 
-- On LEFTPAR reduce production assertion_kind -> ASSUME 
-- On INTEGER reduce production assertion_kind -> ASSUME 
-- On IF reduce production assertion_kind -> ASSUME 
-- On IDENT reduce production assertion_kind -> ASSUME 
-- On FORALL reduce production assertion_kind -> ASSUME 
-- On FALSE reduce production assertion_kind -> ASSUME 
-- On EXISTS reduce production assertion_kind -> ASSUME 

State 156:
assertion_kind -> ASSERT . [ TRUE NOT NONE MINUS LET LEFTPAR INTEGER IF IDENT FORALL FALSE EXISTS ]
-- On TRUE reduce production assertion_kind -> ASSERT 
-- On NOT reduce production assertion_kind -> ASSERT 
-- On NONE reduce production assertion_kind -> ASSERT 
-- On MINUS reduce production assertion_kind -> ASSERT 
-- On LET reduce production assertion_kind -> ASSERT 
-- On LEFTPAR reduce production assertion_kind -> ASSERT 
-- On INTEGER reduce production assertion_kind -> ASSERT 
-- On IF reduce production assertion_kind -> ASSERT 
-- On IDENT reduce production assertion_kind -> ASSERT 
-- On FORALL reduce production assertion_kind -> ASSERT 
-- On FALSE reduce production assertion_kind -> ASSERT 
-- On EXISTS reduce production assertion_kind -> ASSERT 

State 157:
located(simple_stmt_desc) -> simple_stmt_desc . [ NEWLINE ]
-- On NEWLINE reduce production located(simple_stmt_desc) -> simple_stmt_desc 

State 158:
loop_body -> simple_stmt . NEWLINE [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF END DEF CHECK BREAK ASSUME ASSERT ]
-- On NEWLINE shift to state 159

State 159:
loop_body -> simple_stmt NEWLINE . [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF END DEF CHECK BREAK ASSUME ASSERT ]
-- On WHILE reduce production loop_body -> simple_stmt NEWLINE 
-- On TRUE reduce production loop_body -> simple_stmt NEWLINE 
-- On STRING reduce production loop_body -> simple_stmt NEWLINE 
-- On RETURN reduce production loop_body -> simple_stmt NEWLINE 
-- On PREDICATE reduce production loop_body -> simple_stmt NEWLINE 
-- On NOT reduce production loop_body -> simple_stmt NEWLINE 
-- On NONE reduce production loop_body -> simple_stmt NEWLINE 
-- On NEWLINE reduce production loop_body -> simple_stmt NEWLINE 
-- On MINUS reduce production loop_body -> simple_stmt NEWLINE 
-- On LEFTSQ reduce production loop_body -> simple_stmt NEWLINE 
-- On LEFTPAR reduce production loop_body -> simple_stmt NEWLINE 
-- On LABEL reduce production loop_body -> simple_stmt NEWLINE 
-- On INTEGER reduce production loop_body -> simple_stmt NEWLINE 
-- On IF reduce production loop_body -> simple_stmt NEWLINE 
-- On IDENT reduce production loop_body -> simple_stmt NEWLINE 
-- On FUNCTION reduce production loop_body -> simple_stmt NEWLINE 
-- On FROM reduce production loop_body -> simple_stmt NEWLINE 
-- On FOR reduce production loop_body -> simple_stmt NEWLINE 
-- On FALSE reduce production loop_body -> simple_stmt NEWLINE 
-- On EOF reduce production loop_body -> simple_stmt NEWLINE 
-- On END reduce production loop_body -> simple_stmt NEWLINE 
-- On DEF reduce production loop_body -> simple_stmt NEWLINE 
-- On CHECK reduce production loop_body -> simple_stmt NEWLINE 
-- On BREAK reduce production loop_body -> simple_stmt NEWLINE 
-- On ASSUME reduce production loop_body -> simple_stmt NEWLINE 
-- On ASSERT reduce production loop_body -> simple_stmt NEWLINE 

State 160:
stmt_desc -> FOR ident IN expr COLON loop_body . [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF END DEF CHECK BREAK ASSUME ASSERT ]
-- On WHILE reduce production stmt_desc -> FOR ident IN expr COLON loop_body 
-- On TRUE reduce production stmt_desc -> FOR ident IN expr COLON loop_body 
-- On STRING reduce production stmt_desc -> FOR ident IN expr COLON loop_body 
-- On RETURN reduce production stmt_desc -> FOR ident IN expr COLON loop_body 
-- On PREDICATE reduce production stmt_desc -> FOR ident IN expr COLON loop_body 
-- On NOT reduce production stmt_desc -> FOR ident IN expr COLON loop_body 
-- On NONE reduce production stmt_desc -> FOR ident IN expr COLON loop_body 
-- On NEWLINE reduce production stmt_desc -> FOR ident IN expr COLON loop_body 
-- On MINUS reduce production stmt_desc -> FOR ident IN expr COLON loop_body 
-- On LEFTSQ reduce production stmt_desc -> FOR ident IN expr COLON loop_body 
-- On LEFTPAR reduce production stmt_desc -> FOR ident IN expr COLON loop_body 
-- On LABEL reduce production stmt_desc -> FOR ident IN expr COLON loop_body 
-- On INTEGER reduce production stmt_desc -> FOR ident IN expr COLON loop_body 
-- On IF reduce production stmt_desc -> FOR ident IN expr COLON loop_body 
-- On IDENT reduce production stmt_desc -> FOR ident IN expr COLON loop_body 
-- On FUNCTION reduce production stmt_desc -> FOR ident IN expr COLON loop_body 
-- On FROM reduce production stmt_desc -> FOR ident IN expr COLON loop_body 
-- On FOR reduce production stmt_desc -> FOR ident IN expr COLON loop_body 
-- On FALSE reduce production stmt_desc -> FOR ident IN expr COLON loop_body 
-- On EOF reduce production stmt_desc -> FOR ident IN expr COLON loop_body 
-- On END reduce production stmt_desc -> FOR ident IN expr COLON loop_body 
-- On DEF reduce production stmt_desc -> FOR ident IN expr COLON loop_body 
-- On CHECK reduce production stmt_desc -> FOR ident IN expr COLON loop_body 
-- On BREAK reduce production stmt_desc -> FOR ident IN expr COLON loop_body 
-- On ASSUME reduce production stmt_desc -> FOR ident IN expr COLON loop_body 
-- On ASSERT reduce production stmt_desc -> FOR ident IN expr COLON loop_body 

State 161:
simple_stmt -> located(simple_stmt_desc) . [ NEWLINE ]
-- On NEWLINE reduce production simple_stmt -> located(simple_stmt_desc) 

State 162:
expr_desc -> ident . [ TIMES PLUS OR NEWLINE MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> ident . LEFTPAR loption(separated_nonempty_list(COMMA,expr)) RIGHTPAR [ TIMES PLUS OR NEWLINE MOD MINUS LEFTSQ DIV CMP AND ]
simple_stmt_desc -> ident . EQUAL expr [ NEWLINE ]
-- On LEFTPAR shift to state 17
-- On EQUAL shift to state 163
-- On TIMES reduce production expr_desc -> ident 
-- On PLUS reduce production expr_desc -> ident 
-- On OR reduce production expr_desc -> ident 
-- On NEWLINE reduce production expr_desc -> ident 
-- On MOD reduce production expr_desc -> ident 
-- On MINUS reduce production expr_desc -> ident 
-- On LEFTSQ reduce production expr_desc -> ident 
-- On DIV reduce production expr_desc -> ident 
-- On CMP reduce production expr_desc -> ident 
-- On AND reduce production expr_desc -> ident 

State 163:
simple_stmt_desc -> ident EQUAL . expr [ NEWLINE ]
-- On TRUE shift to state 6
-- On STRING shift to state 7
-- On NOT shift to state 8
-- On NONE shift to state 9
-- On MINUS shift to state 10
-- On LEFTSQ shift to state 11
-- On LEFTPAR shift to state 12
-- On INTEGER shift to state 13
-- On IDENT shift to state 14
-- On FALSE shift to state 15
-- On ident shift to state 16
-- On expr_desc shift to state 21
-- On expr shift to state 164

State 164:
expr_desc -> expr . LEFTSQ expr RIGHTSQ [ TIMES PLUS OR NEWLINE MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . PLUS expr [ TIMES PLUS OR NEWLINE MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . MINUS expr [ TIMES PLUS OR NEWLINE MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . DIV expr [ TIMES PLUS OR NEWLINE MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . MOD expr [ TIMES PLUS OR NEWLINE MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . CMP expr [ TIMES PLUS OR NEWLINE MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . AND expr [ TIMES PLUS OR NEWLINE MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . OR expr [ TIMES PLUS OR NEWLINE MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . TIMES expr [ TIMES PLUS OR NEWLINE MOD MINUS LEFTSQ DIV CMP AND ]
simple_stmt_desc -> ident EQUAL expr . [ NEWLINE ]
-- On TIMES shift to state 23
-- On PLUS shift to state 28
-- On OR shift to state 34
-- On MOD shift to state 30
-- On MINUS shift to state 36
-- On LEFTSQ shift to state 25
-- On DIV shift to state 32
-- On CMP shift to state 38
-- On AND shift to state 40
-- On NEWLINE reduce production simple_stmt_desc -> ident EQUAL expr 

State 165:
expr_desc -> expr . LEFTSQ expr RIGHTSQ [ TIMES PLUS OR NEWLINE MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . PLUS expr [ TIMES PLUS OR NEWLINE MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . MINUS expr [ TIMES PLUS OR NEWLINE MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . DIV expr [ TIMES PLUS OR NEWLINE MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . MOD expr [ TIMES PLUS OR NEWLINE MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . CMP expr [ TIMES PLUS OR NEWLINE MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . AND expr [ TIMES PLUS OR NEWLINE MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . OR expr [ TIMES PLUS OR NEWLINE MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . TIMES expr [ TIMES PLUS OR NEWLINE MOD MINUS LEFTSQ DIV CMP AND ]
simple_stmt_desc -> expr . LEFTSQ expr RIGHTSQ EQUAL expr [ NEWLINE ]
simple_stmt_desc -> expr . [ NEWLINE ]
-- On TIMES shift to state 23
-- On PLUS shift to state 28
-- On OR shift to state 34
-- On MOD shift to state 30
-- On MINUS shift to state 36
-- On LEFTSQ shift to state 166
-- On DIV shift to state 32
-- On CMP shift to state 38
-- On AND shift to state 40
-- On NEWLINE reduce production simple_stmt_desc -> expr 

State 166:
expr_desc -> expr LEFTSQ . expr RIGHTSQ [ TIMES PLUS OR NEWLINE MOD MINUS LEFTSQ DIV CMP AND ]
simple_stmt_desc -> expr LEFTSQ . expr RIGHTSQ EQUAL expr [ NEWLINE ]
-- On TRUE shift to state 6
-- On STRING shift to state 7
-- On NOT shift to state 8
-- On NONE shift to state 9
-- On MINUS shift to state 10
-- On LEFTSQ shift to state 11
-- On LEFTPAR shift to state 12
-- On INTEGER shift to state 13
-- On IDENT shift to state 14
-- On FALSE shift to state 15
-- On ident shift to state 16
-- On expr_desc shift to state 21
-- On expr shift to state 167

State 167:
expr_desc -> expr . LEFTSQ expr RIGHTSQ [ TIMES RIGHTSQ PLUS OR MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr LEFTSQ expr . RIGHTSQ [ TIMES PLUS OR NEWLINE MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . PLUS expr [ TIMES RIGHTSQ PLUS OR MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . MINUS expr [ TIMES RIGHTSQ PLUS OR MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . DIV expr [ TIMES RIGHTSQ PLUS OR MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . MOD expr [ TIMES RIGHTSQ PLUS OR MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . CMP expr [ TIMES RIGHTSQ PLUS OR MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . AND expr [ TIMES RIGHTSQ PLUS OR MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . OR expr [ TIMES RIGHTSQ PLUS OR MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . TIMES expr [ TIMES RIGHTSQ PLUS OR MOD MINUS LEFTSQ DIV CMP AND ]
simple_stmt_desc -> expr LEFTSQ expr . RIGHTSQ EQUAL expr [ NEWLINE ]
-- On TIMES shift to state 23
-- On RIGHTSQ shift to state 168
-- On PLUS shift to state 28
-- On OR shift to state 34
-- On MOD shift to state 30
-- On MINUS shift to state 36
-- On LEFTSQ shift to state 25
-- On DIV shift to state 32
-- On CMP shift to state 38
-- On AND shift to state 40

State 168:
expr_desc -> expr LEFTSQ expr RIGHTSQ . [ TIMES PLUS OR NEWLINE MOD MINUS LEFTSQ DIV CMP AND ]
simple_stmt_desc -> expr LEFTSQ expr RIGHTSQ . EQUAL expr [ NEWLINE ]
-- On EQUAL shift to state 169
-- On TIMES reduce production expr_desc -> expr LEFTSQ expr RIGHTSQ 
-- On PLUS reduce production expr_desc -> expr LEFTSQ expr RIGHTSQ 
-- On OR reduce production expr_desc -> expr LEFTSQ expr RIGHTSQ 
-- On NEWLINE reduce production expr_desc -> expr LEFTSQ expr RIGHTSQ 
-- On MOD reduce production expr_desc -> expr LEFTSQ expr RIGHTSQ 
-- On MINUS reduce production expr_desc -> expr LEFTSQ expr RIGHTSQ 
-- On LEFTSQ reduce production expr_desc -> expr LEFTSQ expr RIGHTSQ 
-- On DIV reduce production expr_desc -> expr LEFTSQ expr RIGHTSQ 
-- On CMP reduce production expr_desc -> expr LEFTSQ expr RIGHTSQ 
-- On AND reduce production expr_desc -> expr LEFTSQ expr RIGHTSQ 

State 169:
simple_stmt_desc -> expr LEFTSQ expr RIGHTSQ EQUAL . expr [ NEWLINE ]
-- On TRUE shift to state 6
-- On STRING shift to state 7
-- On NOT shift to state 8
-- On NONE shift to state 9
-- On MINUS shift to state 10
-- On LEFTSQ shift to state 11
-- On LEFTPAR shift to state 12
-- On INTEGER shift to state 13
-- On IDENT shift to state 14
-- On FALSE shift to state 15
-- On ident shift to state 16
-- On expr_desc shift to state 21
-- On expr shift to state 170

State 170:
expr_desc -> expr . LEFTSQ expr RIGHTSQ [ TIMES PLUS OR NEWLINE MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . PLUS expr [ TIMES PLUS OR NEWLINE MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . MINUS expr [ TIMES PLUS OR NEWLINE MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . DIV expr [ TIMES PLUS OR NEWLINE MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . MOD expr [ TIMES PLUS OR NEWLINE MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . CMP expr [ TIMES PLUS OR NEWLINE MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . AND expr [ TIMES PLUS OR NEWLINE MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . OR expr [ TIMES PLUS OR NEWLINE MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . TIMES expr [ TIMES PLUS OR NEWLINE MOD MINUS LEFTSQ DIV CMP AND ]
simple_stmt_desc -> expr LEFTSQ expr RIGHTSQ EQUAL expr . [ NEWLINE ]
-- On TIMES shift to state 23
-- On PLUS shift to state 28
-- On OR shift to state 34
-- On MOD shift to state 30
-- On MINUS shift to state 36
-- On LEFTSQ shift to state 25
-- On DIV shift to state 32
-- On CMP shift to state 38
-- On AND shift to state 40
-- On NEWLINE reduce production simple_stmt_desc -> expr LEFTSQ expr RIGHTSQ EQUAL expr 

State 171:
simple_stmt_desc -> assertion_kind . term [ NEWLINE ]
-- On TRUE shift to state 57
-- On NOT shift to state 58
-- On NONE shift to state 59
-- On MINUS shift to state 60
-- On LET shift to state 61
-- On LEFTPAR shift to state 64
-- On INTEGER shift to state 65
-- On IF shift to state 66
-- On IDENT shift to state 14
-- On FORALL shift to state 67
-- On FALSE shift to state 68
-- On EXISTS shift to state 69
-- On term_sub_ shift to state 70
-- On term_arg_ shift to state 71
-- On term_arg shift to state 72
-- On term_ shift to state 74
-- On term shift to state 172
-- On quant shift to state 78
-- On mk_term(term_arg_) shift to state 90
-- On mk_term(term_) shift to state 91
-- On ident shift to state 92

State 172:
simple_stmt_desc -> assertion_kind term . [ NEWLINE ]
term_ -> term . ARROW term [ TIMES PLUS OR NEWLINE MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . LRARROW term [ TIMES PLUS OR NEWLINE MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . OR term [ TIMES PLUS OR NEWLINE MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . AND term [ TIMES PLUS OR NEWLINE MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . CMP term [ TIMES PLUS OR NEWLINE MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . DIV term [ TIMES PLUS OR NEWLINE MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . MOD term [ TIMES PLUS OR NEWLINE MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . PLUS term [ TIMES PLUS OR NEWLINE MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . MINUS term [ TIMES PLUS OR NEWLINE MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . TIMES term [ TIMES PLUS OR NEWLINE MOD MINUS LRARROW DIV CMP ARROW AND ]
-- On TIMES shift to state 76
-- On PLUS shift to state 86
-- On OR shift to state 95
-- On MOD shift to state 88
-- On MINUS shift to state 97
-- On LRARROW shift to state 105
-- On DIV shift to state 99
-- On CMP shift to state 101
-- On ARROW shift to state 107
-- On AND shift to state 103
-- On NEWLINE reduce production simple_stmt_desc -> assertion_kind term 

State 173:
located(stmt_desc) -> stmt_desc . [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF END DEF CHECK BREAK ASSUME ASSERT ]
-- On WHILE reduce production located(stmt_desc) -> stmt_desc 
-- On TRUE reduce production located(stmt_desc) -> stmt_desc 
-- On STRING reduce production located(stmt_desc) -> stmt_desc 
-- On RETURN reduce production located(stmt_desc) -> stmt_desc 
-- On PREDICATE reduce production located(stmt_desc) -> stmt_desc 
-- On NOT reduce production located(stmt_desc) -> stmt_desc 
-- On NONE reduce production located(stmt_desc) -> stmt_desc 
-- On NEWLINE reduce production located(stmt_desc) -> stmt_desc 
-- On MINUS reduce production located(stmt_desc) -> stmt_desc 
-- On LEFTSQ reduce production located(stmt_desc) -> stmt_desc 
-- On LEFTPAR reduce production located(stmt_desc) -> stmt_desc 
-- On LABEL reduce production located(stmt_desc) -> stmt_desc 
-- On INTEGER reduce production located(stmt_desc) -> stmt_desc 
-- On IF reduce production located(stmt_desc) -> stmt_desc 
-- On IDENT reduce production located(stmt_desc) -> stmt_desc 
-- On FUNCTION reduce production located(stmt_desc) -> stmt_desc 
-- On FROM reduce production located(stmt_desc) -> stmt_desc 
-- On FOR reduce production located(stmt_desc) -> stmt_desc 
-- On FALSE reduce production located(stmt_desc) -> stmt_desc 
-- On EOF reduce production located(stmt_desc) -> stmt_desc 
-- On END reduce production located(stmt_desc) -> stmt_desc 
-- On DEF reduce production located(stmt_desc) -> stmt_desc 
-- On CHECK reduce production located(stmt_desc) -> stmt_desc 
-- On BREAK reduce production located(stmt_desc) -> stmt_desc 
-- On ASSUME reduce production located(stmt_desc) -> stmt_desc 
-- On ASSERT reduce production located(stmt_desc) -> stmt_desc 

State 174:
nonempty_list(stmt) -> stmt . [ END ]
nonempty_list(stmt) -> stmt . nonempty_list(stmt) [ END ]
-- On WHILE shift to state 5
-- On TRUE shift to state 6
-- On STRING shift to state 7
-- On RETURN shift to state 52
-- On NOT shift to state 8
-- On NONE shift to state 9
-- On MINUS shift to state 10
-- On LEFTSQ shift to state 11
-- On LEFTPAR shift to state 12
-- On LABEL shift to state 141
-- On INTEGER shift to state 13
-- On IF shift to state 143
-- On IDENT shift to state 14
-- On FOR shift to state 148
-- On FALSE shift to state 15
-- On CHECK shift to state 153
-- On BREAK shift to state 154
-- On ASSUME shift to state 155
-- On ASSERT shift to state 156
-- On stmt_desc shift to state 173
-- On stmt shift to state 174
-- On simple_stmt_desc shift to state 157
-- On simple_stmt shift to state 175
-- On nonempty_list(stmt) shift to state 177
-- On located(stmt_desc) shift to state 178
-- On located(simple_stmt_desc) shift to state 161
-- On ident shift to state 162
-- On expr_desc shift to state 21
-- On expr shift to state 165
-- On assertion_kind shift to state 171
-- On END reduce production nonempty_list(stmt) -> stmt 

State 175:
stmt -> simple_stmt . NEWLINE [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF END DEF CHECK BREAK ASSUME ASSERT ]
-- On NEWLINE shift to state 176

State 176:
stmt -> simple_stmt NEWLINE . [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF END DEF CHECK BREAK ASSUME ASSERT ]
-- On WHILE reduce production stmt -> simple_stmt NEWLINE 
-- On TRUE reduce production stmt -> simple_stmt NEWLINE 
-- On STRING reduce production stmt -> simple_stmt NEWLINE 
-- On RETURN reduce production stmt -> simple_stmt NEWLINE 
-- On PREDICATE reduce production stmt -> simple_stmt NEWLINE 
-- On NOT reduce production stmt -> simple_stmt NEWLINE 
-- On NONE reduce production stmt -> simple_stmt NEWLINE 
-- On NEWLINE reduce production stmt -> simple_stmt NEWLINE 
-- On MINUS reduce production stmt -> simple_stmt NEWLINE 
-- On LEFTSQ reduce production stmt -> simple_stmt NEWLINE 
-- On LEFTPAR reduce production stmt -> simple_stmt NEWLINE 
-- On LABEL reduce production stmt -> simple_stmt NEWLINE 
-- On INTEGER reduce production stmt -> simple_stmt NEWLINE 
-- On IF reduce production stmt -> simple_stmt NEWLINE 
-- On IDENT reduce production stmt -> simple_stmt NEWLINE 
-- On FUNCTION reduce production stmt -> simple_stmt NEWLINE 
-- On FROM reduce production stmt -> simple_stmt NEWLINE 
-- On FOR reduce production stmt -> simple_stmt NEWLINE 
-- On FALSE reduce production stmt -> simple_stmt NEWLINE 
-- On EOF reduce production stmt -> simple_stmt NEWLINE 
-- On END reduce production stmt -> simple_stmt NEWLINE 
-- On DEF reduce production stmt -> simple_stmt NEWLINE 
-- On CHECK reduce production stmt -> simple_stmt NEWLINE 
-- On BREAK reduce production stmt -> simple_stmt NEWLINE 
-- On ASSUME reduce production stmt -> simple_stmt NEWLINE 
-- On ASSERT reduce production stmt -> simple_stmt NEWLINE 

State 177:
nonempty_list(stmt) -> stmt nonempty_list(stmt) . [ END ]
-- On END reduce production nonempty_list(stmt) -> stmt nonempty_list(stmt) 

State 178:
stmt -> located(stmt_desc) . [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF END DEF CHECK BREAK ASSUME ASSERT ]
-- On WHILE reduce production stmt -> located(stmt_desc) 
-- On TRUE reduce production stmt -> located(stmt_desc) 
-- On STRING reduce production stmt -> located(stmt_desc) 
-- On RETURN reduce production stmt -> located(stmt_desc) 
-- On PREDICATE reduce production stmt -> located(stmt_desc) 
-- On NOT reduce production stmt -> located(stmt_desc) 
-- On NONE reduce production stmt -> located(stmt_desc) 
-- On NEWLINE reduce production stmt -> located(stmt_desc) 
-- On MINUS reduce production stmt -> located(stmt_desc) 
-- On LEFTSQ reduce production stmt -> located(stmt_desc) 
-- On LEFTPAR reduce production stmt -> located(stmt_desc) 
-- On LABEL reduce production stmt -> located(stmt_desc) 
-- On INTEGER reduce production stmt -> located(stmt_desc) 
-- On IF reduce production stmt -> located(stmt_desc) 
-- On IDENT reduce production stmt -> located(stmt_desc) 
-- On FUNCTION reduce production stmt -> located(stmt_desc) 
-- On FROM reduce production stmt -> located(stmt_desc) 
-- On FOR reduce production stmt -> located(stmt_desc) 
-- On FALSE reduce production stmt -> located(stmt_desc) 
-- On EOF reduce production stmt -> located(stmt_desc) 
-- On END reduce production stmt -> located(stmt_desc) 
-- On DEF reduce production stmt -> located(stmt_desc) 
-- On CHECK reduce production stmt -> located(stmt_desc) 
-- On BREAK reduce production stmt -> located(stmt_desc) 
-- On ASSUME reduce production stmt -> located(stmt_desc) 
-- On ASSERT reduce production stmt -> located(stmt_desc) 

State 179:
suite -> NEWLINE BEGIN nonempty_list(stmt) . END [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF END ELSE ELIF DEF CHECK BREAK ASSUME ASSERT ]
-- On END shift to state 180

State 180:
suite -> NEWLINE BEGIN nonempty_list(stmt) END . [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF END ELSE ELIF DEF CHECK BREAK ASSUME ASSERT ]
-- On WHILE reduce production suite -> NEWLINE BEGIN nonempty_list(stmt) END 
-- On TRUE reduce production suite -> NEWLINE BEGIN nonempty_list(stmt) END 
-- On STRING reduce production suite -> NEWLINE BEGIN nonempty_list(stmt) END 
-- On RETURN reduce production suite -> NEWLINE BEGIN nonempty_list(stmt) END 
-- On PREDICATE reduce production suite -> NEWLINE BEGIN nonempty_list(stmt) END 
-- On NOT reduce production suite -> NEWLINE BEGIN nonempty_list(stmt) END 
-- On NONE reduce production suite -> NEWLINE BEGIN nonempty_list(stmt) END 
-- On NEWLINE reduce production suite -> NEWLINE BEGIN nonempty_list(stmt) END 
-- On MINUS reduce production suite -> NEWLINE BEGIN nonempty_list(stmt) END 
-- On LEFTSQ reduce production suite -> NEWLINE BEGIN nonempty_list(stmt) END 
-- On LEFTPAR reduce production suite -> NEWLINE BEGIN nonempty_list(stmt) END 
-- On LABEL reduce production suite -> NEWLINE BEGIN nonempty_list(stmt) END 
-- On INTEGER reduce production suite -> NEWLINE BEGIN nonempty_list(stmt) END 
-- On IF reduce production suite -> NEWLINE BEGIN nonempty_list(stmt) END 
-- On IDENT reduce production suite -> NEWLINE BEGIN nonempty_list(stmt) END 
-- On FUNCTION reduce production suite -> NEWLINE BEGIN nonempty_list(stmt) END 
-- On FROM reduce production suite -> NEWLINE BEGIN nonempty_list(stmt) END 
-- On FOR reduce production suite -> NEWLINE BEGIN nonempty_list(stmt) END 
-- On FALSE reduce production suite -> NEWLINE BEGIN nonempty_list(stmt) END 
-- On EOF reduce production suite -> NEWLINE BEGIN nonempty_list(stmt) END 
-- On END reduce production suite -> NEWLINE BEGIN nonempty_list(stmt) END 
-- On ELSE reduce production suite -> NEWLINE BEGIN nonempty_list(stmt) END 
-- On ELIF reduce production suite -> NEWLINE BEGIN nonempty_list(stmt) END 
-- On DEF reduce production suite -> NEWLINE BEGIN nonempty_list(stmt) END 
-- On CHECK reduce production suite -> NEWLINE BEGIN nonempty_list(stmt) END 
-- On BREAK reduce production suite -> NEWLINE BEGIN nonempty_list(stmt) END 
-- On ASSUME reduce production suite -> NEWLINE BEGIN nonempty_list(stmt) END 
-- On ASSERT reduce production suite -> NEWLINE BEGIN nonempty_list(stmt) END 

State 181:
stmt_desc -> IF expr COLON suite . else_branch [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF END DEF CHECK BREAK ASSUME ASSERT ]
-- On ELSE shift to state 182
-- On ELIF shift to state 187
-- On else_branch shift to state 192
-- On WHILE reduce production else_branch -> 
-- On TRUE reduce production else_branch -> 
-- On STRING reduce production else_branch -> 
-- On RETURN reduce production else_branch -> 
-- On PREDICATE reduce production else_branch -> 
-- On NOT reduce production else_branch -> 
-- On NONE reduce production else_branch -> 
-- On NEWLINE reduce production else_branch -> 
-- On MINUS reduce production else_branch -> 
-- On LEFTSQ reduce production else_branch -> 
-- On LEFTPAR reduce production else_branch -> 
-- On LABEL reduce production else_branch -> 
-- On INTEGER reduce production else_branch -> 
-- On IF reduce production else_branch -> 
-- On IDENT reduce production else_branch -> 
-- On FUNCTION reduce production else_branch -> 
-- On FROM reduce production else_branch -> 
-- On FOR reduce production else_branch -> 
-- On FALSE reduce production else_branch -> 
-- On EOF reduce production else_branch -> 
-- On END reduce production else_branch -> 
-- On DEF reduce production else_branch -> 
-- On CHECK reduce production else_branch -> 
-- On BREAK reduce production else_branch -> 
-- On ASSUME reduce production else_branch -> 
-- On ASSERT reduce production else_branch -> 

State 182:
else_branch -> ELSE . COLON suite [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF END DEF CHECK BREAK ASSUME ASSERT ]
-- On COLON shift to state 183

State 183:
else_branch -> ELSE COLON . suite [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF END DEF CHECK BREAK ASSUME ASSERT ]
-- On TRUE shift to state 6
-- On STRING shift to state 7
-- On RETURN shift to state 52
-- On NOT shift to state 8
-- On NONE shift to state 9
-- On NEWLINE shift to state 146
-- On MINUS shift to state 10
-- On LEFTSQ shift to state 11
-- On LEFTPAR shift to state 12
-- On LABEL shift to state 141
-- On INTEGER shift to state 13
-- On IDENT shift to state 14
-- On FALSE shift to state 15
-- On CHECK shift to state 153
-- On BREAK shift to state 154
-- On ASSUME shift to state 155
-- On ASSERT shift to state 156
-- On suite shift to state 184
-- On simple_stmt_desc shift to state 157
-- On simple_stmt shift to state 185
-- On located(simple_stmt_desc) shift to state 161
-- On ident shift to state 162
-- On expr_desc shift to state 21
-- On expr shift to state 165
-- On assertion_kind shift to state 171

State 184:
else_branch -> ELSE COLON suite . [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF END DEF CHECK BREAK ASSUME ASSERT ]
-- On WHILE reduce production else_branch -> ELSE COLON suite 
-- On TRUE reduce production else_branch -> ELSE COLON suite 
-- On STRING reduce production else_branch -> ELSE COLON suite 
-- On RETURN reduce production else_branch -> ELSE COLON suite 
-- On PREDICATE reduce production else_branch -> ELSE COLON suite 
-- On NOT reduce production else_branch -> ELSE COLON suite 
-- On NONE reduce production else_branch -> ELSE COLON suite 
-- On NEWLINE reduce production else_branch -> ELSE COLON suite 
-- On MINUS reduce production else_branch -> ELSE COLON suite 
-- On LEFTSQ reduce production else_branch -> ELSE COLON suite 
-- On LEFTPAR reduce production else_branch -> ELSE COLON suite 
-- On LABEL reduce production else_branch -> ELSE COLON suite 
-- On INTEGER reduce production else_branch -> ELSE COLON suite 
-- On IF reduce production else_branch -> ELSE COLON suite 
-- On IDENT reduce production else_branch -> ELSE COLON suite 
-- On FUNCTION reduce production else_branch -> ELSE COLON suite 
-- On FROM reduce production else_branch -> ELSE COLON suite 
-- On FOR reduce production else_branch -> ELSE COLON suite 
-- On FALSE reduce production else_branch -> ELSE COLON suite 
-- On EOF reduce production else_branch -> ELSE COLON suite 
-- On END reduce production else_branch -> ELSE COLON suite 
-- On DEF reduce production else_branch -> ELSE COLON suite 
-- On CHECK reduce production else_branch -> ELSE COLON suite 
-- On BREAK reduce production else_branch -> ELSE COLON suite 
-- On ASSUME reduce production else_branch -> ELSE COLON suite 
-- On ASSERT reduce production else_branch -> ELSE COLON suite 

State 185:
suite -> simple_stmt . NEWLINE [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF END ELSE ELIF DEF CHECK BREAK ASSUME ASSERT ]
-- On NEWLINE shift to state 186

State 186:
suite -> simple_stmt NEWLINE . [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF END ELSE ELIF DEF CHECK BREAK ASSUME ASSERT ]
-- On WHILE reduce production suite -> simple_stmt NEWLINE 
-- On TRUE reduce production suite -> simple_stmt NEWLINE 
-- On STRING reduce production suite -> simple_stmt NEWLINE 
-- On RETURN reduce production suite -> simple_stmt NEWLINE 
-- On PREDICATE reduce production suite -> simple_stmt NEWLINE 
-- On NOT reduce production suite -> simple_stmt NEWLINE 
-- On NONE reduce production suite -> simple_stmt NEWLINE 
-- On NEWLINE reduce production suite -> simple_stmt NEWLINE 
-- On MINUS reduce production suite -> simple_stmt NEWLINE 
-- On LEFTSQ reduce production suite -> simple_stmt NEWLINE 
-- On LEFTPAR reduce production suite -> simple_stmt NEWLINE 
-- On LABEL reduce production suite -> simple_stmt NEWLINE 
-- On INTEGER reduce production suite -> simple_stmt NEWLINE 
-- On IF reduce production suite -> simple_stmt NEWLINE 
-- On IDENT reduce production suite -> simple_stmt NEWLINE 
-- On FUNCTION reduce production suite -> simple_stmt NEWLINE 
-- On FROM reduce production suite -> simple_stmt NEWLINE 
-- On FOR reduce production suite -> simple_stmt NEWLINE 
-- On FALSE reduce production suite -> simple_stmt NEWLINE 
-- On EOF reduce production suite -> simple_stmt NEWLINE 
-- On END reduce production suite -> simple_stmt NEWLINE 
-- On ELSE reduce production suite -> simple_stmt NEWLINE 
-- On ELIF reduce production suite -> simple_stmt NEWLINE 
-- On DEF reduce production suite -> simple_stmt NEWLINE 
-- On CHECK reduce production suite -> simple_stmt NEWLINE 
-- On BREAK reduce production suite -> simple_stmt NEWLINE 
-- On ASSUME reduce production suite -> simple_stmt NEWLINE 
-- On ASSERT reduce production suite -> simple_stmt NEWLINE 

State 187:
else_branch -> ELIF . expr COLON suite else_branch [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF END DEF CHECK BREAK ASSUME ASSERT ]
-- On TRUE shift to state 6
-- On STRING shift to state 7
-- On NOT shift to state 8
-- On NONE shift to state 9
-- On MINUS shift to state 10
-- On LEFTSQ shift to state 11
-- On LEFTPAR shift to state 12
-- On INTEGER shift to state 13
-- On IDENT shift to state 14
-- On FALSE shift to state 15
-- On ident shift to state 16
-- On expr_desc shift to state 21
-- On expr shift to state 188

State 188:
else_branch -> ELIF expr . COLON suite else_branch [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF END DEF CHECK BREAK ASSUME ASSERT ]
expr_desc -> expr . LEFTSQ expr RIGHTSQ [ TIMES PLUS OR MOD MINUS LEFTSQ DIV COLON CMP AND ]
expr_desc -> expr . PLUS expr [ TIMES PLUS OR MOD MINUS LEFTSQ DIV COLON CMP AND ]
expr_desc -> expr . MINUS expr [ TIMES PLUS OR MOD MINUS LEFTSQ DIV COLON CMP AND ]
expr_desc -> expr . DIV expr [ TIMES PLUS OR MOD MINUS LEFTSQ DIV COLON CMP AND ]
expr_desc -> expr . MOD expr [ TIMES PLUS OR MOD MINUS LEFTSQ DIV COLON CMP AND ]
expr_desc -> expr . CMP expr [ TIMES PLUS OR MOD MINUS LEFTSQ DIV COLON CMP AND ]
expr_desc -> expr . AND expr [ TIMES PLUS OR MOD MINUS LEFTSQ DIV COLON CMP AND ]
expr_desc -> expr . OR expr [ TIMES PLUS OR MOD MINUS LEFTSQ DIV COLON CMP AND ]
expr_desc -> expr . TIMES expr [ TIMES PLUS OR MOD MINUS LEFTSQ DIV COLON CMP AND ]
-- On TIMES shift to state 23
-- On PLUS shift to state 28
-- On OR shift to state 34
-- On MOD shift to state 30
-- On MINUS shift to state 36
-- On LEFTSQ shift to state 25
-- On DIV shift to state 32
-- On COLON shift to state 189
-- On CMP shift to state 38
-- On AND shift to state 40

State 189:
else_branch -> ELIF expr COLON . suite else_branch [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF END DEF CHECK BREAK ASSUME ASSERT ]
-- On TRUE shift to state 6
-- On STRING shift to state 7
-- On RETURN shift to state 52
-- On NOT shift to state 8
-- On NONE shift to state 9
-- On NEWLINE shift to state 146
-- On MINUS shift to state 10
-- On LEFTSQ shift to state 11
-- On LEFTPAR shift to state 12
-- On LABEL shift to state 141
-- On INTEGER shift to state 13
-- On IDENT shift to state 14
-- On FALSE shift to state 15
-- On CHECK shift to state 153
-- On BREAK shift to state 154
-- On ASSUME shift to state 155
-- On ASSERT shift to state 156
-- On suite shift to state 190
-- On simple_stmt_desc shift to state 157
-- On simple_stmt shift to state 185
-- On located(simple_stmt_desc) shift to state 161
-- On ident shift to state 162
-- On expr_desc shift to state 21
-- On expr shift to state 165
-- On assertion_kind shift to state 171

State 190:
else_branch -> ELIF expr COLON suite . else_branch [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF END DEF CHECK BREAK ASSUME ASSERT ]
-- On ELSE shift to state 182
-- On ELIF shift to state 187
-- On else_branch shift to state 191
-- On WHILE reduce production else_branch -> 
-- On TRUE reduce production else_branch -> 
-- On STRING reduce production else_branch -> 
-- On RETURN reduce production else_branch -> 
-- On PREDICATE reduce production else_branch -> 
-- On NOT reduce production else_branch -> 
-- On NONE reduce production else_branch -> 
-- On NEWLINE reduce production else_branch -> 
-- On MINUS reduce production else_branch -> 
-- On LEFTSQ reduce production else_branch -> 
-- On LEFTPAR reduce production else_branch -> 
-- On LABEL reduce production else_branch -> 
-- On INTEGER reduce production else_branch -> 
-- On IF reduce production else_branch -> 
-- On IDENT reduce production else_branch -> 
-- On FUNCTION reduce production else_branch -> 
-- On FROM reduce production else_branch -> 
-- On FOR reduce production else_branch -> 
-- On FALSE reduce production else_branch -> 
-- On EOF reduce production else_branch -> 
-- On END reduce production else_branch -> 
-- On DEF reduce production else_branch -> 
-- On CHECK reduce production else_branch -> 
-- On BREAK reduce production else_branch -> 
-- On ASSUME reduce production else_branch -> 
-- On ASSERT reduce production else_branch -> 

State 191:
else_branch -> ELIF expr COLON suite else_branch . [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF END DEF CHECK BREAK ASSUME ASSERT ]
-- On WHILE reduce production else_branch -> ELIF expr COLON suite else_branch 
-- On TRUE reduce production else_branch -> ELIF expr COLON suite else_branch 
-- On STRING reduce production else_branch -> ELIF expr COLON suite else_branch 
-- On RETURN reduce production else_branch -> ELIF expr COLON suite else_branch 
-- On PREDICATE reduce production else_branch -> ELIF expr COLON suite else_branch 
-- On NOT reduce production else_branch -> ELIF expr COLON suite else_branch 
-- On NONE reduce production else_branch -> ELIF expr COLON suite else_branch 
-- On NEWLINE reduce production else_branch -> ELIF expr COLON suite else_branch 
-- On MINUS reduce production else_branch -> ELIF expr COLON suite else_branch 
-- On LEFTSQ reduce production else_branch -> ELIF expr COLON suite else_branch 
-- On LEFTPAR reduce production else_branch -> ELIF expr COLON suite else_branch 
-- On LABEL reduce production else_branch -> ELIF expr COLON suite else_branch 
-- On INTEGER reduce production else_branch -> ELIF expr COLON suite else_branch 
-- On IF reduce production else_branch -> ELIF expr COLON suite else_branch 
-- On IDENT reduce production else_branch -> ELIF expr COLON suite else_branch 
-- On FUNCTION reduce production else_branch -> ELIF expr COLON suite else_branch 
-- On FROM reduce production else_branch -> ELIF expr COLON suite else_branch 
-- On FOR reduce production else_branch -> ELIF expr COLON suite else_branch 
-- On FALSE reduce production else_branch -> ELIF expr COLON suite else_branch 
-- On EOF reduce production else_branch -> ELIF expr COLON suite else_branch 
-- On END reduce production else_branch -> ELIF expr COLON suite else_branch 
-- On DEF reduce production else_branch -> ELIF expr COLON suite else_branch 
-- On CHECK reduce production else_branch -> ELIF expr COLON suite else_branch 
-- On BREAK reduce production else_branch -> ELIF expr COLON suite else_branch 
-- On ASSUME reduce production else_branch -> ELIF expr COLON suite else_branch 
-- On ASSERT reduce production else_branch -> ELIF expr COLON suite else_branch 

State 192:
stmt_desc -> IF expr COLON suite else_branch . [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF END DEF CHECK BREAK ASSUME ASSERT ]
-- On WHILE reduce production stmt_desc -> IF expr COLON suite else_branch 
-- On TRUE reduce production stmt_desc -> IF expr COLON suite else_branch 
-- On STRING reduce production stmt_desc -> IF expr COLON suite else_branch 
-- On RETURN reduce production stmt_desc -> IF expr COLON suite else_branch 
-- On PREDICATE reduce production stmt_desc -> IF expr COLON suite else_branch 
-- On NOT reduce production stmt_desc -> IF expr COLON suite else_branch 
-- On NONE reduce production stmt_desc -> IF expr COLON suite else_branch 
-- On NEWLINE reduce production stmt_desc -> IF expr COLON suite else_branch 
-- On MINUS reduce production stmt_desc -> IF expr COLON suite else_branch 
-- On LEFTSQ reduce production stmt_desc -> IF expr COLON suite else_branch 
-- On LEFTPAR reduce production stmt_desc -> IF expr COLON suite else_branch 
-- On LABEL reduce production stmt_desc -> IF expr COLON suite else_branch 
-- On INTEGER reduce production stmt_desc -> IF expr COLON suite else_branch 
-- On IF reduce production stmt_desc -> IF expr COLON suite else_branch 
-- On IDENT reduce production stmt_desc -> IF expr COLON suite else_branch 
-- On FUNCTION reduce production stmt_desc -> IF expr COLON suite else_branch 
-- On FROM reduce production stmt_desc -> IF expr COLON suite else_branch 
-- On FOR reduce production stmt_desc -> IF expr COLON suite else_branch 
-- On FALSE reduce production stmt_desc -> IF expr COLON suite else_branch 
-- On EOF reduce production stmt_desc -> IF expr COLON suite else_branch 
-- On END reduce production stmt_desc -> IF expr COLON suite else_branch 
-- On DEF reduce production stmt_desc -> IF expr COLON suite else_branch 
-- On CHECK reduce production stmt_desc -> IF expr COLON suite else_branch 
-- On BREAK reduce production stmt_desc -> IF expr COLON suite else_branch 
-- On ASSUME reduce production stmt_desc -> IF expr COLON suite else_branch 
-- On ASSERT reduce production stmt_desc -> IF expr COLON suite else_branch 

State 193:
loop_body -> NEWLINE BEGIN loop_annotation nonempty_list(stmt) . END [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF END DEF CHECK BREAK ASSUME ASSERT ]
-- On END shift to state 194

State 194:
loop_body -> NEWLINE BEGIN loop_annotation nonempty_list(stmt) END . [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF END DEF CHECK BREAK ASSUME ASSERT ]
-- On WHILE reduce production loop_body -> NEWLINE BEGIN loop_annotation nonempty_list(stmt) END 
-- On TRUE reduce production loop_body -> NEWLINE BEGIN loop_annotation nonempty_list(stmt) END 
-- On STRING reduce production loop_body -> NEWLINE BEGIN loop_annotation nonempty_list(stmt) END 
-- On RETURN reduce production loop_body -> NEWLINE BEGIN loop_annotation nonempty_list(stmt) END 
-- On PREDICATE reduce production loop_body -> NEWLINE BEGIN loop_annotation nonempty_list(stmt) END 
-- On NOT reduce production loop_body -> NEWLINE BEGIN loop_annotation nonempty_list(stmt) END 
-- On NONE reduce production loop_body -> NEWLINE BEGIN loop_annotation nonempty_list(stmt) END 
-- On NEWLINE reduce production loop_body -> NEWLINE BEGIN loop_annotation nonempty_list(stmt) END 
-- On MINUS reduce production loop_body -> NEWLINE BEGIN loop_annotation nonempty_list(stmt) END 
-- On LEFTSQ reduce production loop_body -> NEWLINE BEGIN loop_annotation nonempty_list(stmt) END 
-- On LEFTPAR reduce production loop_body -> NEWLINE BEGIN loop_annotation nonempty_list(stmt) END 
-- On LABEL reduce production loop_body -> NEWLINE BEGIN loop_annotation nonempty_list(stmt) END 
-- On INTEGER reduce production loop_body -> NEWLINE BEGIN loop_annotation nonempty_list(stmt) END 
-- On IF reduce production loop_body -> NEWLINE BEGIN loop_annotation nonempty_list(stmt) END 
-- On IDENT reduce production loop_body -> NEWLINE BEGIN loop_annotation nonempty_list(stmt) END 
-- On FUNCTION reduce production loop_body -> NEWLINE BEGIN loop_annotation nonempty_list(stmt) END 
-- On FROM reduce production loop_body -> NEWLINE BEGIN loop_annotation nonempty_list(stmt) END 
-- On FOR reduce production loop_body -> NEWLINE BEGIN loop_annotation nonempty_list(stmt) END 
-- On FALSE reduce production loop_body -> NEWLINE BEGIN loop_annotation nonempty_list(stmt) END 
-- On EOF reduce production loop_body -> NEWLINE BEGIN loop_annotation nonempty_list(stmt) END 
-- On END reduce production loop_body -> NEWLINE BEGIN loop_annotation nonempty_list(stmt) END 
-- On DEF reduce production loop_body -> NEWLINE BEGIN loop_annotation nonempty_list(stmt) END 
-- On CHECK reduce production loop_body -> NEWLINE BEGIN loop_annotation nonempty_list(stmt) END 
-- On BREAK reduce production loop_body -> NEWLINE BEGIN loop_annotation nonempty_list(stmt) END 
-- On ASSUME reduce production loop_body -> NEWLINE BEGIN loop_annotation nonempty_list(stmt) END 
-- On ASSERT reduce production loop_body -> NEWLINE BEGIN loop_annotation nonempty_list(stmt) END 

State 195:
stmt_desc -> WHILE expr COLON loop_body . [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF END DEF CHECK BREAK ASSUME ASSERT ]
-- On WHILE reduce production stmt_desc -> WHILE expr COLON loop_body 
-- On TRUE reduce production stmt_desc -> WHILE expr COLON loop_body 
-- On STRING reduce production stmt_desc -> WHILE expr COLON loop_body 
-- On RETURN reduce production stmt_desc -> WHILE expr COLON loop_body 
-- On PREDICATE reduce production stmt_desc -> WHILE expr COLON loop_body 
-- On NOT reduce production stmt_desc -> WHILE expr COLON loop_body 
-- On NONE reduce production stmt_desc -> WHILE expr COLON loop_body 
-- On NEWLINE reduce production stmt_desc -> WHILE expr COLON loop_body 
-- On MINUS reduce production stmt_desc -> WHILE expr COLON loop_body 
-- On LEFTSQ reduce production stmt_desc -> WHILE expr COLON loop_body 
-- On LEFTPAR reduce production stmt_desc -> WHILE expr COLON loop_body 
-- On LABEL reduce production stmt_desc -> WHILE expr COLON loop_body 
-- On INTEGER reduce production stmt_desc -> WHILE expr COLON loop_body 
-- On IF reduce production stmt_desc -> WHILE expr COLON loop_body 
-- On IDENT reduce production stmt_desc -> WHILE expr COLON loop_body 
-- On FUNCTION reduce production stmt_desc -> WHILE expr COLON loop_body 
-- On FROM reduce production stmt_desc -> WHILE expr COLON loop_body 
-- On FOR reduce production stmt_desc -> WHILE expr COLON loop_body 
-- On FALSE reduce production stmt_desc -> WHILE expr COLON loop_body 
-- On EOF reduce production stmt_desc -> WHILE expr COLON loop_body 
-- On END reduce production stmt_desc -> WHILE expr COLON loop_body 
-- On DEF reduce production stmt_desc -> WHILE expr COLON loop_body 
-- On CHECK reduce production stmt_desc -> WHILE expr COLON loop_body 
-- On BREAK reduce production stmt_desc -> WHILE expr COLON loop_body 
-- On ASSUME reduce production stmt_desc -> WHILE expr COLON loop_body 
-- On ASSERT reduce production stmt_desc -> WHILE expr COLON loop_body 

State 196:
func -> PREDICATE . ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR NEWLINE [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF DEF CHECK BREAK ASSUME ASSERT ]
-- On IDENT shift to state 14
-- On ident shift to state 197

State 197:
func -> PREDICATE ident . LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR NEWLINE [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF DEF CHECK BREAK ASSUME ASSERT ]
-- On LEFTPAR shift to state 198

State 198:
func -> PREDICATE ident LEFTPAR . loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR NEWLINE [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF DEF CHECK BREAK ASSUME ASSERT ]
-- On IDENT shift to state 14
-- On separated_nonempty_list(COMMA,ident) shift to state 199
-- On loption(separated_nonempty_list(COMMA,ident)) shift to state 200
-- On ident shift to state 80
-- On RIGHTPAR reduce production loption(separated_nonempty_list(COMMA,ident)) -> 

State 199:
loption(separated_nonempty_list(COMMA,ident)) -> separated_nonempty_list(COMMA,ident) . [ RIGHTPAR NEWLINE ]
-- On RIGHTPAR reduce production loption(separated_nonempty_list(COMMA,ident)) -> separated_nonempty_list(COMMA,ident) 
-- On NEWLINE reduce production loption(separated_nonempty_list(COMMA,ident)) -> separated_nonempty_list(COMMA,ident) 

State 200:
func -> PREDICATE ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) . RIGHTPAR NEWLINE [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF DEF CHECK BREAK ASSUME ASSERT ]
-- On RIGHTPAR shift to state 201

State 201:
func -> PREDICATE ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR . NEWLINE [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF DEF CHECK BREAK ASSUME ASSERT ]
-- On NEWLINE shift to state 202

State 202:
func -> PREDICATE ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR NEWLINE . [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF DEF CHECK BREAK ASSUME ASSERT ]
-- On WHILE reduce production func -> PREDICATE ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR NEWLINE 
-- On TRUE reduce production func -> PREDICATE ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR NEWLINE 
-- On STRING reduce production func -> PREDICATE ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR NEWLINE 
-- On RETURN reduce production func -> PREDICATE ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR NEWLINE 
-- On PREDICATE reduce production func -> PREDICATE ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR NEWLINE 
-- On NOT reduce production func -> PREDICATE ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR NEWLINE 
-- On NONE reduce production func -> PREDICATE ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR NEWLINE 
-- On NEWLINE reduce production func -> PREDICATE ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR NEWLINE 
-- On MINUS reduce production func -> PREDICATE ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR NEWLINE 
-- On LEFTSQ reduce production func -> PREDICATE ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR NEWLINE 
-- On LEFTPAR reduce production func -> PREDICATE ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR NEWLINE 
-- On LABEL reduce production func -> PREDICATE ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR NEWLINE 
-- On INTEGER reduce production func -> PREDICATE ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR NEWLINE 
-- On IF reduce production func -> PREDICATE ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR NEWLINE 
-- On IDENT reduce production func -> PREDICATE ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR NEWLINE 
-- On FUNCTION reduce production func -> PREDICATE ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR NEWLINE 
-- On FROM reduce production func -> PREDICATE ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR NEWLINE 
-- On FOR reduce production func -> PREDICATE ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR NEWLINE 
-- On FALSE reduce production func -> PREDICATE ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR NEWLINE 
-- On EOF reduce production func -> PREDICATE ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR NEWLINE 
-- On DEF reduce production func -> PREDICATE ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR NEWLINE 
-- On CHECK reduce production func -> PREDICATE ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR NEWLINE 
-- On BREAK reduce production func -> PREDICATE ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR NEWLINE 
-- On ASSUME reduce production func -> PREDICATE ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR NEWLINE 
-- On ASSERT reduce production func -> PREDICATE ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR NEWLINE 

State 203:
func -> FUNCTION . ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR NEWLINE [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF DEF CHECK BREAK ASSUME ASSERT ]
-- On IDENT shift to state 14
-- On ident shift to state 204

State 204:
func -> FUNCTION ident . LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR NEWLINE [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF DEF CHECK BREAK ASSUME ASSERT ]
-- On LEFTPAR shift to state 205

State 205:
func -> FUNCTION ident LEFTPAR . loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR NEWLINE [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF DEF CHECK BREAK ASSUME ASSERT ]
-- On IDENT shift to state 14
-- On separated_nonempty_list(COMMA,ident) shift to state 199
-- On loption(separated_nonempty_list(COMMA,ident)) shift to state 206
-- On ident shift to state 80
-- On RIGHTPAR reduce production loption(separated_nonempty_list(COMMA,ident)) -> 

State 206:
func -> FUNCTION ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) . RIGHTPAR NEWLINE [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF DEF CHECK BREAK ASSUME ASSERT ]
-- On RIGHTPAR shift to state 207

State 207:
func -> FUNCTION ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR . NEWLINE [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF DEF CHECK BREAK ASSUME ASSERT ]
-- On NEWLINE shift to state 208

State 208:
func -> FUNCTION ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR NEWLINE . [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF DEF CHECK BREAK ASSUME ASSERT ]
-- On WHILE reduce production func -> FUNCTION ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR NEWLINE 
-- On TRUE reduce production func -> FUNCTION ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR NEWLINE 
-- On STRING reduce production func -> FUNCTION ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR NEWLINE 
-- On RETURN reduce production func -> FUNCTION ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR NEWLINE 
-- On PREDICATE reduce production func -> FUNCTION ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR NEWLINE 
-- On NOT reduce production func -> FUNCTION ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR NEWLINE 
-- On NONE reduce production func -> FUNCTION ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR NEWLINE 
-- On NEWLINE reduce production func -> FUNCTION ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR NEWLINE 
-- On MINUS reduce production func -> FUNCTION ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR NEWLINE 
-- On LEFTSQ reduce production func -> FUNCTION ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR NEWLINE 
-- On LEFTPAR reduce production func -> FUNCTION ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR NEWLINE 
-- On LABEL reduce production func -> FUNCTION ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR NEWLINE 
-- On INTEGER reduce production func -> FUNCTION ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR NEWLINE 
-- On IF reduce production func -> FUNCTION ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR NEWLINE 
-- On IDENT reduce production func -> FUNCTION ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR NEWLINE 
-- On FUNCTION reduce production func -> FUNCTION ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR NEWLINE 
-- On FROM reduce production func -> FUNCTION ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR NEWLINE 
-- On FOR reduce production func -> FUNCTION ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR NEWLINE 
-- On FALSE reduce production func -> FUNCTION ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR NEWLINE 
-- On EOF reduce production func -> FUNCTION ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR NEWLINE 
-- On DEF reduce production func -> FUNCTION ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR NEWLINE 
-- On CHECK reduce production func -> FUNCTION ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR NEWLINE 
-- On BREAK reduce production func -> FUNCTION ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR NEWLINE 
-- On ASSUME reduce production func -> FUNCTION ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR NEWLINE 
-- On ASSERT reduce production func -> FUNCTION ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR NEWLINE 

State 209:
import -> FROM . ident IMPORT loption(separated_nonempty_list(COMMA,ident)) NEWLINE [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF DEF CHECK BREAK ASSUME ASSERT ]
-- On IDENT shift to state 14
-- On ident shift to state 210

State 210:
import -> FROM ident . IMPORT loption(separated_nonempty_list(COMMA,ident)) NEWLINE [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF DEF CHECK BREAK ASSUME ASSERT ]
-- On IMPORT shift to state 211

State 211:
import -> FROM ident IMPORT . loption(separated_nonempty_list(COMMA,ident)) NEWLINE [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF DEF CHECK BREAK ASSUME ASSERT ]
-- On IDENT shift to state 14
-- On separated_nonempty_list(COMMA,ident) shift to state 199
-- On loption(separated_nonempty_list(COMMA,ident)) shift to state 212
-- On ident shift to state 80
-- On NEWLINE reduce production loption(separated_nonempty_list(COMMA,ident)) -> 

State 212:
import -> FROM ident IMPORT loption(separated_nonempty_list(COMMA,ident)) . NEWLINE [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF DEF CHECK BREAK ASSUME ASSERT ]
-- On NEWLINE shift to state 213

State 213:
import -> FROM ident IMPORT loption(separated_nonempty_list(COMMA,ident)) NEWLINE . [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF DEF CHECK BREAK ASSUME ASSERT ]
-- On WHILE reduce production import -> FROM ident IMPORT loption(separated_nonempty_list(COMMA,ident)) NEWLINE 
-- On TRUE reduce production import -> FROM ident IMPORT loption(separated_nonempty_list(COMMA,ident)) NEWLINE 
-- On STRING reduce production import -> FROM ident IMPORT loption(separated_nonempty_list(COMMA,ident)) NEWLINE 
-- On RETURN reduce production import -> FROM ident IMPORT loption(separated_nonempty_list(COMMA,ident)) NEWLINE 
-- On PREDICATE reduce production import -> FROM ident IMPORT loption(separated_nonempty_list(COMMA,ident)) NEWLINE 
-- On NOT reduce production import -> FROM ident IMPORT loption(separated_nonempty_list(COMMA,ident)) NEWLINE 
-- On NONE reduce production import -> FROM ident IMPORT loption(separated_nonempty_list(COMMA,ident)) NEWLINE 
-- On NEWLINE reduce production import -> FROM ident IMPORT loption(separated_nonempty_list(COMMA,ident)) NEWLINE 
-- On MINUS reduce production import -> FROM ident IMPORT loption(separated_nonempty_list(COMMA,ident)) NEWLINE 
-- On LEFTSQ reduce production import -> FROM ident IMPORT loption(separated_nonempty_list(COMMA,ident)) NEWLINE 
-- On LEFTPAR reduce production import -> FROM ident IMPORT loption(separated_nonempty_list(COMMA,ident)) NEWLINE 
-- On LABEL reduce production import -> FROM ident IMPORT loption(separated_nonempty_list(COMMA,ident)) NEWLINE 
-- On INTEGER reduce production import -> FROM ident IMPORT loption(separated_nonempty_list(COMMA,ident)) NEWLINE 
-- On IF reduce production import -> FROM ident IMPORT loption(separated_nonempty_list(COMMA,ident)) NEWLINE 
-- On IDENT reduce production import -> FROM ident IMPORT loption(separated_nonempty_list(COMMA,ident)) NEWLINE 
-- On FUNCTION reduce production import -> FROM ident IMPORT loption(separated_nonempty_list(COMMA,ident)) NEWLINE 
-- On FROM reduce production import -> FROM ident IMPORT loption(separated_nonempty_list(COMMA,ident)) NEWLINE 
-- On FOR reduce production import -> FROM ident IMPORT loption(separated_nonempty_list(COMMA,ident)) NEWLINE 
-- On FALSE reduce production import -> FROM ident IMPORT loption(separated_nonempty_list(COMMA,ident)) NEWLINE 
-- On EOF reduce production import -> FROM ident IMPORT loption(separated_nonempty_list(COMMA,ident)) NEWLINE 
-- On DEF reduce production import -> FROM ident IMPORT loption(separated_nonempty_list(COMMA,ident)) NEWLINE 
-- On CHECK reduce production import -> FROM ident IMPORT loption(separated_nonempty_list(COMMA,ident)) NEWLINE 
-- On BREAK reduce production import -> FROM ident IMPORT loption(separated_nonempty_list(COMMA,ident)) NEWLINE 
-- On ASSUME reduce production import -> FROM ident IMPORT loption(separated_nonempty_list(COMMA,ident)) NEWLINE 
-- On ASSERT reduce production import -> FROM ident IMPORT loption(separated_nonempty_list(COMMA,ident)) NEWLINE 

State 214:
def -> DEF . ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR COLON NEWLINE BEGIN spec nonempty_list(stmt) END [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF DEF CHECK BREAK ASSUME ASSERT ]
-- On IDENT shift to state 14
-- On ident shift to state 215

State 215:
def -> DEF ident . LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR COLON NEWLINE BEGIN spec nonempty_list(stmt) END [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF DEF CHECK BREAK ASSUME ASSERT ]
-- On LEFTPAR shift to state 216

State 216:
def -> DEF ident LEFTPAR . loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR COLON NEWLINE BEGIN spec nonempty_list(stmt) END [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF DEF CHECK BREAK ASSUME ASSERT ]
-- On IDENT shift to state 14
-- On separated_nonempty_list(COMMA,ident) shift to state 199
-- On loption(separated_nonempty_list(COMMA,ident)) shift to state 217
-- On ident shift to state 80
-- On RIGHTPAR reduce production loption(separated_nonempty_list(COMMA,ident)) -> 

State 217:
def -> DEF ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) . RIGHTPAR COLON NEWLINE BEGIN spec nonempty_list(stmt) END [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF DEF CHECK BREAK ASSUME ASSERT ]
-- On RIGHTPAR shift to state 218

State 218:
def -> DEF ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR . COLON NEWLINE BEGIN spec nonempty_list(stmt) END [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF DEF CHECK BREAK ASSUME ASSERT ]
-- On COLON shift to state 219

State 219:
def -> DEF ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR COLON . NEWLINE BEGIN spec nonempty_list(stmt) END [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF DEF CHECK BREAK ASSUME ASSERT ]
-- On NEWLINE shift to state 220

State 220:
def -> DEF ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR COLON NEWLINE . BEGIN spec nonempty_list(stmt) END [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF DEF CHECK BREAK ASSUME ASSERT ]
-- On BEGIN shift to state 221

State 221:
def -> DEF ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR COLON NEWLINE BEGIN . spec nonempty_list(stmt) END [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF DEF CHECK BREAK ASSUME ASSERT ]
-- On VARIANT shift to state 56
-- On REQUIRES shift to state 222
-- On ENSURES shift to state 225
-- On variant shift to state 229
-- On spec shift to state 230
-- On single_spec shift to state 233
-- On WHILE reduce production spec -> 
-- On TRUE reduce production spec -> 
-- On STRING reduce production spec -> 
-- On RETURN reduce production spec -> 
-- On NOT reduce production spec -> 
-- On NONE reduce production spec -> 
-- On MINUS reduce production spec -> 
-- On LEFTSQ reduce production spec -> 
-- On LEFTPAR reduce production spec -> 
-- On LABEL reduce production spec -> 
-- On INTEGER reduce production spec -> 
-- On IF reduce production spec -> 
-- On IDENT reduce production spec -> 
-- On FOR reduce production spec -> 
-- On FALSE reduce production spec -> 
-- On CHECK reduce production spec -> 
-- On BREAK reduce production spec -> 
-- On ASSUME reduce production spec -> 
-- On ASSERT reduce production spec -> 

State 222:
single_spec -> REQUIRES . term NEWLINE [ WHILE VARIANT TRUE STRING RETURN REQUIRES NOT NONE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FOR FALSE ENSURES CHECK BREAK ASSUME ASSERT ]
-- On TRUE shift to state 57
-- On NOT shift to state 58
-- On NONE shift to state 59
-- On MINUS shift to state 60
-- On LET shift to state 61
-- On LEFTPAR shift to state 64
-- On INTEGER shift to state 65
-- On IF shift to state 66
-- On IDENT shift to state 14
-- On FORALL shift to state 67
-- On FALSE shift to state 68
-- On EXISTS shift to state 69
-- On term_sub_ shift to state 70
-- On term_arg_ shift to state 71
-- On term_arg shift to state 72
-- On term_ shift to state 74
-- On term shift to state 223
-- On quant shift to state 78
-- On mk_term(term_arg_) shift to state 90
-- On mk_term(term_) shift to state 91
-- On ident shift to state 92

State 223:
single_spec -> REQUIRES term . NEWLINE [ WHILE VARIANT TRUE STRING RETURN REQUIRES NOT NONE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FOR FALSE ENSURES CHECK BREAK ASSUME ASSERT ]
term_ -> term . ARROW term [ TIMES PLUS OR NEWLINE MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . LRARROW term [ TIMES PLUS OR NEWLINE MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . OR term [ TIMES PLUS OR NEWLINE MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . AND term [ TIMES PLUS OR NEWLINE MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . CMP term [ TIMES PLUS OR NEWLINE MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . DIV term [ TIMES PLUS OR NEWLINE MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . MOD term [ TIMES PLUS OR NEWLINE MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . PLUS term [ TIMES PLUS OR NEWLINE MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . MINUS term [ TIMES PLUS OR NEWLINE MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . TIMES term [ TIMES PLUS OR NEWLINE MOD MINUS LRARROW DIV CMP ARROW AND ]
-- On TIMES shift to state 76
-- On PLUS shift to state 86
-- On OR shift to state 95
-- On NEWLINE shift to state 224
-- On MOD shift to state 88
-- On MINUS shift to state 97
-- On LRARROW shift to state 105
-- On DIV shift to state 99
-- On CMP shift to state 101
-- On ARROW shift to state 107
-- On AND shift to state 103

State 224:
single_spec -> REQUIRES term NEWLINE . [ WHILE VARIANT TRUE STRING RETURN REQUIRES NOT NONE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FOR FALSE ENSURES CHECK BREAK ASSUME ASSERT ]
-- On WHILE reduce production single_spec -> REQUIRES term NEWLINE 
-- On VARIANT reduce production single_spec -> REQUIRES term NEWLINE 
-- On TRUE reduce production single_spec -> REQUIRES term NEWLINE 
-- On STRING reduce production single_spec -> REQUIRES term NEWLINE 
-- On RETURN reduce production single_spec -> REQUIRES term NEWLINE 
-- On REQUIRES reduce production single_spec -> REQUIRES term NEWLINE 
-- On NOT reduce production single_spec -> REQUIRES term NEWLINE 
-- On NONE reduce production single_spec -> REQUIRES term NEWLINE 
-- On MINUS reduce production single_spec -> REQUIRES term NEWLINE 
-- On LEFTSQ reduce production single_spec -> REQUIRES term NEWLINE 
-- On LEFTPAR reduce production single_spec -> REQUIRES term NEWLINE 
-- On LABEL reduce production single_spec -> REQUIRES term NEWLINE 
-- On INTEGER reduce production single_spec -> REQUIRES term NEWLINE 
-- On IF reduce production single_spec -> REQUIRES term NEWLINE 
-- On IDENT reduce production single_spec -> REQUIRES term NEWLINE 
-- On FOR reduce production single_spec -> REQUIRES term NEWLINE 
-- On FALSE reduce production single_spec -> REQUIRES term NEWLINE 
-- On ENSURES reduce production single_spec -> REQUIRES term NEWLINE 
-- On CHECK reduce production single_spec -> REQUIRES term NEWLINE 
-- On BREAK reduce production single_spec -> REQUIRES term NEWLINE 
-- On ASSUME reduce production single_spec -> REQUIRES term NEWLINE 
-- On ASSERT reduce production single_spec -> REQUIRES term NEWLINE 

State 225:
single_spec -> ENSURES . ensures NEWLINE [ WHILE VARIANT TRUE STRING RETURN REQUIRES NOT NONE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FOR FALSE ENSURES CHECK BREAK ASSUME ASSERT ]
-- On TRUE shift to state 57
-- On NOT shift to state 58
-- On NONE shift to state 59
-- On MINUS shift to state 60
-- On LET shift to state 61
-- On LEFTPAR shift to state 64
-- On INTEGER shift to state 65
-- On IF shift to state 66
-- On IDENT shift to state 14
-- On FORALL shift to state 67
-- On FALSE shift to state 68
-- On EXISTS shift to state 69
-- On term_sub_ shift to state 70
-- On term_arg_ shift to state 71
-- On term_arg shift to state 72
-- On term_ shift to state 74
-- On term shift to state 226
-- On quant shift to state 78
-- On mk_term(term_arg_) shift to state 90
-- On mk_term(term_) shift to state 91
-- On ident shift to state 92
-- On ensures shift to state 227

State 226:
ensures -> term . [ NEWLINE ]
term_ -> term . ARROW term [ TIMES PLUS OR NEWLINE MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . LRARROW term [ TIMES PLUS OR NEWLINE MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . OR term [ TIMES PLUS OR NEWLINE MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . AND term [ TIMES PLUS OR NEWLINE MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . CMP term [ TIMES PLUS OR NEWLINE MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . DIV term [ TIMES PLUS OR NEWLINE MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . MOD term [ TIMES PLUS OR NEWLINE MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . PLUS term [ TIMES PLUS OR NEWLINE MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . MINUS term [ TIMES PLUS OR NEWLINE MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . TIMES term [ TIMES PLUS OR NEWLINE MOD MINUS LRARROW DIV CMP ARROW AND ]
-- On TIMES shift to state 76
-- On PLUS shift to state 86
-- On OR shift to state 95
-- On MOD shift to state 88
-- On MINUS shift to state 97
-- On LRARROW shift to state 105
-- On DIV shift to state 99
-- On CMP shift to state 101
-- On ARROW shift to state 107
-- On AND shift to state 103
-- On NEWLINE reduce production ensures -> term 

State 227:
single_spec -> ENSURES ensures . NEWLINE [ WHILE VARIANT TRUE STRING RETURN REQUIRES NOT NONE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FOR FALSE ENSURES CHECK BREAK ASSUME ASSERT ]
-- On NEWLINE shift to state 228

State 228:
single_spec -> ENSURES ensures NEWLINE . [ WHILE VARIANT TRUE STRING RETURN REQUIRES NOT NONE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FOR FALSE ENSURES CHECK BREAK ASSUME ASSERT ]
-- On WHILE reduce production single_spec -> ENSURES ensures NEWLINE 
-- On VARIANT reduce production single_spec -> ENSURES ensures NEWLINE 
-- On TRUE reduce production single_spec -> ENSURES ensures NEWLINE 
-- On STRING reduce production single_spec -> ENSURES ensures NEWLINE 
-- On RETURN reduce production single_spec -> ENSURES ensures NEWLINE 
-- On REQUIRES reduce production single_spec -> ENSURES ensures NEWLINE 
-- On NOT reduce production single_spec -> ENSURES ensures NEWLINE 
-- On NONE reduce production single_spec -> ENSURES ensures NEWLINE 
-- On MINUS reduce production single_spec -> ENSURES ensures NEWLINE 
-- On LEFTSQ reduce production single_spec -> ENSURES ensures NEWLINE 
-- On LEFTPAR reduce production single_spec -> ENSURES ensures NEWLINE 
-- On LABEL reduce production single_spec -> ENSURES ensures NEWLINE 
-- On INTEGER reduce production single_spec -> ENSURES ensures NEWLINE 
-- On IF reduce production single_spec -> ENSURES ensures NEWLINE 
-- On IDENT reduce production single_spec -> ENSURES ensures NEWLINE 
-- On FOR reduce production single_spec -> ENSURES ensures NEWLINE 
-- On FALSE reduce production single_spec -> ENSURES ensures NEWLINE 
-- On ENSURES reduce production single_spec -> ENSURES ensures NEWLINE 
-- On CHECK reduce production single_spec -> ENSURES ensures NEWLINE 
-- On BREAK reduce production single_spec -> ENSURES ensures NEWLINE 
-- On ASSUME reduce production single_spec -> ENSURES ensures NEWLINE 
-- On ASSERT reduce production single_spec -> ENSURES ensures NEWLINE 

State 229:
single_spec -> variant . [ WHILE VARIANT TRUE STRING RETURN REQUIRES NOT NONE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FOR FALSE ENSURES CHECK BREAK ASSUME ASSERT ]
-- On WHILE reduce production single_spec -> variant 
-- On VARIANT reduce production single_spec -> variant 
-- On TRUE reduce production single_spec -> variant 
-- On STRING reduce production single_spec -> variant 
-- On RETURN reduce production single_spec -> variant 
-- On REQUIRES reduce production single_spec -> variant 
-- On NOT reduce production single_spec -> variant 
-- On NONE reduce production single_spec -> variant 
-- On MINUS reduce production single_spec -> variant 
-- On LEFTSQ reduce production single_spec -> variant 
-- On LEFTPAR reduce production single_spec -> variant 
-- On LABEL reduce production single_spec -> variant 
-- On INTEGER reduce production single_spec -> variant 
-- On IF reduce production single_spec -> variant 
-- On IDENT reduce production single_spec -> variant 
-- On FOR reduce production single_spec -> variant 
-- On FALSE reduce production single_spec -> variant 
-- On ENSURES reduce production single_spec -> variant 
-- On CHECK reduce production single_spec -> variant 
-- On BREAK reduce production single_spec -> variant 
-- On ASSUME reduce production single_spec -> variant 
-- On ASSERT reduce production single_spec -> variant 

State 230:
def -> DEF ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR COLON NEWLINE BEGIN spec . nonempty_list(stmt) END [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF DEF CHECK BREAK ASSUME ASSERT ]
-- On WHILE shift to state 5
-- On TRUE shift to state 6
-- On STRING shift to state 7
-- On RETURN shift to state 52
-- On NOT shift to state 8
-- On NONE shift to state 9
-- On MINUS shift to state 10
-- On LEFTSQ shift to state 11
-- On LEFTPAR shift to state 12
-- On LABEL shift to state 141
-- On INTEGER shift to state 13
-- On IF shift to state 143
-- On IDENT shift to state 14
-- On FOR shift to state 148
-- On FALSE shift to state 15
-- On CHECK shift to state 153
-- On BREAK shift to state 154
-- On ASSUME shift to state 155
-- On ASSERT shift to state 156
-- On stmt_desc shift to state 173
-- On stmt shift to state 174
-- On simple_stmt_desc shift to state 157
-- On simple_stmt shift to state 175
-- On nonempty_list(stmt) shift to state 231
-- On located(stmt_desc) shift to state 178
-- On located(simple_stmt_desc) shift to state 161
-- On ident shift to state 162
-- On expr_desc shift to state 21
-- On expr shift to state 165
-- On assertion_kind shift to state 171

State 231:
def -> DEF ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR COLON NEWLINE BEGIN spec nonempty_list(stmt) . END [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF DEF CHECK BREAK ASSUME ASSERT ]
-- On END shift to state 232

State 232:
def -> DEF ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR COLON NEWLINE BEGIN spec nonempty_list(stmt) END . [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF DEF CHECK BREAK ASSUME ASSERT ]
-- On WHILE reduce production def -> DEF ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR COLON NEWLINE BEGIN spec nonempty_list(stmt) END 
-- On TRUE reduce production def -> DEF ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR COLON NEWLINE BEGIN spec nonempty_list(stmt) END 
-- On STRING reduce production def -> DEF ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR COLON NEWLINE BEGIN spec nonempty_list(stmt) END 
-- On RETURN reduce production def -> DEF ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR COLON NEWLINE BEGIN spec nonempty_list(stmt) END 
-- On PREDICATE reduce production def -> DEF ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR COLON NEWLINE BEGIN spec nonempty_list(stmt) END 
-- On NOT reduce production def -> DEF ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR COLON NEWLINE BEGIN spec nonempty_list(stmt) END 
-- On NONE reduce production def -> DEF ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR COLON NEWLINE BEGIN spec nonempty_list(stmt) END 
-- On NEWLINE reduce production def -> DEF ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR COLON NEWLINE BEGIN spec nonempty_list(stmt) END 
-- On MINUS reduce production def -> DEF ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR COLON NEWLINE BEGIN spec nonempty_list(stmt) END 
-- On LEFTSQ reduce production def -> DEF ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR COLON NEWLINE BEGIN spec nonempty_list(stmt) END 
-- On LEFTPAR reduce production def -> DEF ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR COLON NEWLINE BEGIN spec nonempty_list(stmt) END 
-- On LABEL reduce production def -> DEF ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR COLON NEWLINE BEGIN spec nonempty_list(stmt) END 
-- On INTEGER reduce production def -> DEF ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR COLON NEWLINE BEGIN spec nonempty_list(stmt) END 
-- On IF reduce production def -> DEF ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR COLON NEWLINE BEGIN spec nonempty_list(stmt) END 
-- On IDENT reduce production def -> DEF ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR COLON NEWLINE BEGIN spec nonempty_list(stmt) END 
-- On FUNCTION reduce production def -> DEF ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR COLON NEWLINE BEGIN spec nonempty_list(stmt) END 
-- On FROM reduce production def -> DEF ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR COLON NEWLINE BEGIN spec nonempty_list(stmt) END 
-- On FOR reduce production def -> DEF ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR COLON NEWLINE BEGIN spec nonempty_list(stmt) END 
-- On FALSE reduce production def -> DEF ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR COLON NEWLINE BEGIN spec nonempty_list(stmt) END 
-- On EOF reduce production def -> DEF ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR COLON NEWLINE BEGIN spec nonempty_list(stmt) END 
-- On DEF reduce production def -> DEF ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR COLON NEWLINE BEGIN spec nonempty_list(stmt) END 
-- On CHECK reduce production def -> DEF ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR COLON NEWLINE BEGIN spec nonempty_list(stmt) END 
-- On BREAK reduce production def -> DEF ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR COLON NEWLINE BEGIN spec nonempty_list(stmt) END 
-- On ASSUME reduce production def -> DEF ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR COLON NEWLINE BEGIN spec nonempty_list(stmt) END 
-- On ASSERT reduce production def -> DEF ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR COLON NEWLINE BEGIN spec nonempty_list(stmt) END 

State 233:
spec -> single_spec . spec [ WHILE TRUE STRING RETURN NOT NONE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FOR FALSE CHECK BREAK ASSUME ASSERT ]
-- On VARIANT shift to state 56
-- On REQUIRES shift to state 222
-- On ENSURES shift to state 225
-- On variant shift to state 229
-- On spec shift to state 234
-- On single_spec shift to state 233
-- On WHILE reduce production spec -> 
-- On TRUE reduce production spec -> 
-- On STRING reduce production spec -> 
-- On RETURN reduce production spec -> 
-- On NOT reduce production spec -> 
-- On NONE reduce production spec -> 
-- On MINUS reduce production spec -> 
-- On LEFTSQ reduce production spec -> 
-- On LEFTPAR reduce production spec -> 
-- On LABEL reduce production spec -> 
-- On INTEGER reduce production spec -> 
-- On IF reduce production spec -> 
-- On IDENT reduce production spec -> 
-- On FOR reduce production spec -> 
-- On FALSE reduce production spec -> 
-- On CHECK reduce production spec -> 
-- On BREAK reduce production spec -> 
-- On ASSUME reduce production spec -> 
-- On ASSERT reduce production spec -> 

State 234:
spec -> single_spec spec . [ WHILE TRUE STRING RETURN NOT NONE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FOR FALSE CHECK BREAK ASSUME ASSERT ]
-- On WHILE reduce production spec -> single_spec spec 
-- On TRUE reduce production spec -> single_spec spec 
-- On STRING reduce production spec -> single_spec spec 
-- On RETURN reduce production spec -> single_spec spec 
-- On NOT reduce production spec -> single_spec spec 
-- On NONE reduce production spec -> single_spec spec 
-- On MINUS reduce production spec -> single_spec spec 
-- On LEFTSQ reduce production spec -> single_spec spec 
-- On LEFTPAR reduce production spec -> single_spec spec 
-- On LABEL reduce production spec -> single_spec spec 
-- On INTEGER reduce production spec -> single_spec spec 
-- On IF reduce production spec -> single_spec spec 
-- On IDENT reduce production spec -> single_spec spec 
-- On FOR reduce production spec -> single_spec spec 
-- On FALSE reduce production spec -> single_spec spec 
-- On CHECK reduce production spec -> single_spec spec 
-- On BREAK reduce production spec -> single_spec spec 
-- On ASSUME reduce production spec -> single_spec spec 
-- On ASSERT reduce production spec -> single_spec spec 

State 235:
decl -> stmt . [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF DEF CHECK BREAK ASSUME ASSERT ]
-- On WHILE reduce production decl -> stmt 
-- On TRUE reduce production decl -> stmt 
-- On STRING reduce production decl -> stmt 
-- On RETURN reduce production decl -> stmt 
-- On PREDICATE reduce production decl -> stmt 
-- On NOT reduce production decl -> stmt 
-- On NONE reduce production decl -> stmt 
-- On NEWLINE reduce production decl -> stmt 
-- On MINUS reduce production decl -> stmt 
-- On LEFTSQ reduce production decl -> stmt 
-- On LEFTPAR reduce production decl -> stmt 
-- On LABEL reduce production decl -> stmt 
-- On INTEGER reduce production decl -> stmt 
-- On IF reduce production decl -> stmt 
-- On IDENT reduce production decl -> stmt 
-- On FUNCTION reduce production decl -> stmt 
-- On FROM reduce production decl -> stmt 
-- On FOR reduce production decl -> stmt 
-- On FALSE reduce production decl -> stmt 
-- On EOF reduce production decl -> stmt 
-- On DEF reduce production decl -> stmt 
-- On CHECK reduce production decl -> stmt 
-- On BREAK reduce production decl -> stmt 
-- On ASSUME reduce production decl -> stmt 
-- On ASSERT reduce production decl -> stmt 

State 236:
file -> option(NEWLINE) nonempty_list(decl) . option(NEWLINE) EOF [ # ]
-- On NEWLINE shift to state 237
-- On option(NEWLINE) shift to state 238
-- On EOF reduce production option(NEWLINE) -> 

State 237:
option(NEWLINE) -> NEWLINE . [ EOF ]
-- On EOF reduce production option(NEWLINE) -> NEWLINE 

State 238:
file -> option(NEWLINE) nonempty_list(decl) option(NEWLINE) . EOF [ # ]
-- On EOF shift to state 239

State 239:
file -> option(NEWLINE) nonempty_list(decl) option(NEWLINE) EOF . [ # ]
-- On # reduce production file -> option(NEWLINE) nonempty_list(decl) option(NEWLINE) EOF 

State 240:
decl -> import . [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF DEF CHECK BREAK ASSUME ASSERT ]
-- On WHILE reduce production decl -> import 
-- On TRUE reduce production decl -> import 
-- On STRING reduce production decl -> import 
-- On RETURN reduce production decl -> import 
-- On PREDICATE reduce production decl -> import 
-- On NOT reduce production decl -> import 
-- On NONE reduce production decl -> import 
-- On NEWLINE reduce production decl -> import 
-- On MINUS reduce production decl -> import 
-- On LEFTSQ reduce production decl -> import 
-- On LEFTPAR reduce production decl -> import 
-- On LABEL reduce production decl -> import 
-- On INTEGER reduce production decl -> import 
-- On IF reduce production decl -> import 
-- On IDENT reduce production decl -> import 
-- On FUNCTION reduce production decl -> import 
-- On FROM reduce production decl -> import 
-- On FOR reduce production decl -> import 
-- On FALSE reduce production decl -> import 
-- On EOF reduce production decl -> import 
-- On DEF reduce production decl -> import 
-- On CHECK reduce production decl -> import 
-- On BREAK reduce production decl -> import 
-- On ASSUME reduce production decl -> import 
-- On ASSERT reduce production decl -> import 

State 241:
decl -> func . [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF DEF CHECK BREAK ASSUME ASSERT ]
-- On WHILE reduce production decl -> func 
-- On TRUE reduce production decl -> func 
-- On STRING reduce production decl -> func 
-- On RETURN reduce production decl -> func 
-- On PREDICATE reduce production decl -> func 
-- On NOT reduce production decl -> func 
-- On NONE reduce production decl -> func 
-- On NEWLINE reduce production decl -> func 
-- On MINUS reduce production decl -> func 
-- On LEFTSQ reduce production decl -> func 
-- On LEFTPAR reduce production decl -> func 
-- On LABEL reduce production decl -> func 
-- On INTEGER reduce production decl -> func 
-- On IF reduce production decl -> func 
-- On IDENT reduce production decl -> func 
-- On FUNCTION reduce production decl -> func 
-- On FROM reduce production decl -> func 
-- On FOR reduce production decl -> func 
-- On FALSE reduce production decl -> func 
-- On EOF reduce production decl -> func 
-- On DEF reduce production decl -> func 
-- On CHECK reduce production decl -> func 
-- On BREAK reduce production decl -> func 
-- On ASSUME reduce production decl -> func 
-- On ASSERT reduce production decl -> func 

State 242:
decl -> def . [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF DEF CHECK BREAK ASSUME ASSERT ]
-- On WHILE reduce production decl -> def 
-- On TRUE reduce production decl -> def 
-- On STRING reduce production decl -> def 
-- On RETURN reduce production decl -> def 
-- On PREDICATE reduce production decl -> def 
-- On NOT reduce production decl -> def 
-- On NONE reduce production decl -> def 
-- On NEWLINE reduce production decl -> def 
-- On MINUS reduce production decl -> def 
-- On LEFTSQ reduce production decl -> def 
-- On LEFTPAR reduce production decl -> def 
-- On LABEL reduce production decl -> def 
-- On INTEGER reduce production decl -> def 
-- On IF reduce production decl -> def 
-- On IDENT reduce production decl -> def 
-- On FUNCTION reduce production decl -> def 
-- On FROM reduce production decl -> def 
-- On FOR reduce production decl -> def 
-- On FALSE reduce production decl -> def 
-- On EOF reduce production decl -> def 
-- On DEF reduce production decl -> def 
-- On CHECK reduce production decl -> def 
-- On BREAK reduce production decl -> def 
-- On ASSUME reduce production decl -> def 
-- On ASSERT reduce production decl -> def 

State 243:
nonempty_list(decl) -> decl . [ NEWLINE EOF ]
nonempty_list(decl) -> decl . nonempty_list(decl) [ NEWLINE EOF ]
-- On WHILE shift to state 5
-- On TRUE shift to state 6
-- On STRING shift to state 7
-- On RETURN shift to state 52
-- On PREDICATE shift to state 196
-- On NOT shift to state 8
-- On NONE shift to state 9
-- On MINUS shift to state 10
-- On LEFTSQ shift to state 11
-- On LEFTPAR shift to state 12
-- On LABEL shift to state 141
-- On INTEGER shift to state 13
-- On IF shift to state 143
-- On IDENT shift to state 14
-- On FUNCTION shift to state 203
-- On FROM shift to state 209
-- On FOR shift to state 148
-- On FALSE shift to state 15
-- On DEF shift to state 214
-- On CHECK shift to state 153
-- On BREAK shift to state 154
-- On ASSUME shift to state 155
-- On ASSERT shift to state 156
-- On stmt_desc shift to state 173
-- On stmt shift to state 235
-- On simple_stmt_desc shift to state 157
-- On simple_stmt shift to state 175
-- On nonempty_list(decl) shift to state 244
-- On located(stmt_desc) shift to state 178
-- On located(simple_stmt_desc) shift to state 161
-- On import shift to state 240
-- On ident shift to state 162
-- On func shift to state 241
-- On expr_desc shift to state 21
-- On expr shift to state 165
-- On def shift to state 242
-- On decl shift to state 243
-- On assertion_kind shift to state 171
-- On NEWLINE reduce production nonempty_list(decl) -> decl 
-- On EOF reduce production nonempty_list(decl) -> decl 

State 244:
nonempty_list(decl) -> decl nonempty_list(decl) . [ NEWLINE EOF ]
-- On NEWLINE reduce production nonempty_list(decl) -> decl nonempty_list(decl) 
-- On EOF reduce production nonempty_list(decl) -> decl nonempty_list(decl) 

State 245:
file -> list(NEWLINE) . EOF [ # ]
-- On EOF shift to state 246

State 246:
file -> list(NEWLINE) EOF . [ # ]
-- On # reduce production file -> list(NEWLINE) EOF 

State 247:
file' -> file . [ # ]
-- On # accept file

