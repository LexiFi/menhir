State 0:
## Known stack suffix:
##
## LR(1) items:
file' -> . file [ # ]
## Transitions:
-- On NEWLINE shift to state 1
-- On option(NEWLINE) shift to state 4
-- On list(NEWLINE) shift to state 245
-- On file shift to state 247
## Reductions:
-- On EOF
--   reduce production list(NEWLINE) ->
-- On WHILE TRUE STRING RETURN PREDICATE NOT NONE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE DEF CHECK BREAK ASSUME ASSERT
--   reduce production option(NEWLINE) ->

State 1:
## Known stack suffix:
## NEWLINE
## LR(1) items:
list(NEWLINE) -> NEWLINE . list(NEWLINE) [ EOF ]
option(NEWLINE) -> NEWLINE . [ WHILE TRUE STRING RETURN PREDICATE NOT NONE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE DEF CHECK BREAK ASSUME ASSERT ]
## Transitions:
-- On NEWLINE shift to state 2
-- On list(NEWLINE) shift to state 3
## Reductions:
-- On EOF
--   reduce production list(NEWLINE) ->
-- On WHILE TRUE STRING RETURN PREDICATE NOT NONE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE DEF CHECK BREAK ASSUME ASSERT
--   reduce production option(NEWLINE) -> NEWLINE

State 2:
## Known stack suffix:
## NEWLINE
## LR(1) items:
list(NEWLINE) -> NEWLINE . list(NEWLINE) [ EOF ]
## Transitions:
-- On NEWLINE shift to state 2
-- On list(NEWLINE) shift to state 3
## Reductions:
-- On EOF
--   reduce production list(NEWLINE) ->

State 3:
## Known stack suffix:
## NEWLINE list(NEWLINE)
## LR(1) items:
list(NEWLINE) -> NEWLINE list(NEWLINE) . [ EOF ]
## Transitions:
## Reductions:
-- On EOF
--   reduce production list(NEWLINE) -> NEWLINE list(NEWLINE)

State 4:
## Known stack suffix:
## option(NEWLINE)
## LR(1) items:
file -> option(NEWLINE) . nonempty_list(decl) option(NEWLINE) EOF [ # ]
## Transitions:
-- On WHILE shift to state 5
-- On TRUE shift to state 6
-- On STRING shift to state 7
-- On RETURN shift to state 52
-- On PREDICATE shift to state 196
-- On NOT shift to state 8
-- On NONE shift to state 9
-- On MINUS shift to state 10
-- On LEFTSQ shift to state 11
-- On LEFTPAR shift to state 12
-- On LABEL shift to state 141
-- On INTEGER shift to state 13
-- On IF shift to state 143
-- On IDENT shift to state 14
-- On FUNCTION shift to state 203
-- On FROM shift to state 209
-- On FOR shift to state 148
-- On FALSE shift to state 15
-- On DEF shift to state 214
-- On CHECK shift to state 153
-- On BREAK shift to state 154
-- On ASSUME shift to state 155
-- On ASSERT shift to state 156
-- On stmt_desc shift to state 173
-- On stmt shift to state 235
-- On simple_stmt_desc shift to state 157
-- On simple_stmt shift to state 175
-- On nonempty_list(decl) shift to state 236
-- On located(stmt_desc) shift to state 178
-- On located(simple_stmt_desc) shift to state 161
-- On import shift to state 240
-- On ident shift to state 162
-- On func shift to state 241
-- On expr_desc shift to state 21
-- On expr shift to state 165
-- On def shift to state 242
-- On decl shift to state 243
-- On assertion_kind shift to state 171
## Reductions:

State 5:
## Known stack suffix:
## WHILE
## LR(1) items:
stmt_desc -> WHILE . expr COLON loop_body [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF END DEF CHECK BREAK ASSUME ASSERT ]
## Transitions:
-- On TRUE shift to state 6
-- On STRING shift to state 7
-- On NOT shift to state 8
-- On NONE shift to state 9
-- On MINUS shift to state 10
-- On LEFTSQ shift to state 11
-- On LEFTPAR shift to state 12
-- On INTEGER shift to state 13
-- On IDENT shift to state 14
-- On FALSE shift to state 15
-- On ident shift to state 16
-- On expr_desc shift to state 21
-- On expr shift to state 50
## Reductions:

State 6:
## Known stack suffix:
## TRUE
## LR(1) items:
expr_desc -> TRUE . [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
## Transitions:
## Reductions:
-- On TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND
--   reduce production expr_desc -> TRUE

State 7:
## Known stack suffix:
## STRING
## LR(1) items:
expr_desc -> STRING . [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
## Transitions:
## Reductions:
-- On TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND
--   reduce production expr_desc -> STRING

State 8:
## Known stack suffix:
## NOT
## LR(1) items:
expr_desc -> NOT . expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
## Transitions:
-- On TRUE shift to state 6
-- On STRING shift to state 7
-- On NOT shift to state 8
-- On NONE shift to state 9
-- On MINUS shift to state 10
-- On LEFTSQ shift to state 11
-- On LEFTPAR shift to state 12
-- On INTEGER shift to state 13
-- On IDENT shift to state 14
-- On FALSE shift to state 15
-- On ident shift to state 16
-- On expr_desc shift to state 21
-- On expr shift to state 49
## Reductions:

State 9:
## Known stack suffix:
## NONE
## LR(1) items:
expr_desc -> NONE . [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
## Transitions:
## Reductions:
-- On TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND
--   reduce production expr_desc -> NONE

State 10:
## Known stack suffix:
## MINUS
## LR(1) items:
expr_desc -> MINUS . expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
## Transitions:
-- On TRUE shift to state 6
-- On STRING shift to state 7
-- On NOT shift to state 8
-- On NONE shift to state 9
-- On MINUS shift to state 10
-- On LEFTSQ shift to state 11
-- On LEFTPAR shift to state 12
-- On INTEGER shift to state 13
-- On IDENT shift to state 14
-- On FALSE shift to state 15
-- On ident shift to state 16
-- On expr_desc shift to state 21
-- On expr shift to state 48
## Reductions:

State 11:
## Known stack suffix:
## LEFTSQ
## LR(1) items:
expr_desc -> LEFTSQ . loption(separated_nonempty_list(COMMA,expr)) RIGHTSQ [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
## Transitions:
-- On TRUE shift to state 6
-- On STRING shift to state 7
-- On NOT shift to state 8
-- On NONE shift to state 9
-- On MINUS shift to state 10
-- On LEFTSQ shift to state 11
-- On LEFTPAR shift to state 12
-- On INTEGER shift to state 13
-- On IDENT shift to state 14
-- On FALSE shift to state 15
-- On separated_nonempty_list(COMMA,expr) shift to state 18
-- On loption(separated_nonempty_list(COMMA,expr)) shift to state 46
-- On ident shift to state 16
-- On expr_desc shift to state 21
-- On expr shift to state 22
## Reductions:
-- On RIGHTSQ
--   reduce production loption(separated_nonempty_list(COMMA,expr)) ->

State 12:
## Known stack suffix:
## LEFTPAR
## LR(1) items:
expr_desc -> LEFTPAR . expr RIGHTPAR [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
## Transitions:
-- On TRUE shift to state 6
-- On STRING shift to state 7
-- On NOT shift to state 8
-- On NONE shift to state 9
-- On MINUS shift to state 10
-- On LEFTSQ shift to state 11
-- On LEFTPAR shift to state 12
-- On INTEGER shift to state 13
-- On IDENT shift to state 14
-- On FALSE shift to state 15
-- On ident shift to state 16
-- On expr_desc shift to state 21
-- On expr shift to state 44
## Reductions:

State 13:
## Known stack suffix:
## INTEGER
## LR(1) items:
expr_desc -> INTEGER . [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
## Transitions:
## Reductions:
-- On TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND
--   reduce production expr_desc -> INTEGER

State 14:
## Known stack suffix:
## IDENT
## LR(1) items:
ident -> IDENT . [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LEFTSQ LEFTPAR LARROW IN IMPORT EQUAL ELSE DOT DIV COMMA COLON CMP ARROW AND ]
## Transitions:
## Reductions:
-- On TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LEFTSQ LEFTPAR LARROW IN IMPORT EQUAL ELSE DOT DIV COMMA COLON CMP ARROW AND
--   reduce production ident -> IDENT

State 15:
## Known stack suffix:
## FALSE
## LR(1) items:
expr_desc -> FALSE . [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
## Transitions:
## Reductions:
-- On TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND
--   reduce production expr_desc -> FALSE

State 16:
## Known stack suffix:
## ident
## LR(1) items:
expr_desc -> ident . [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> ident . LEFTPAR loption(separated_nonempty_list(COMMA,expr)) RIGHTPAR [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
## Transitions:
-- On LEFTPAR shift to state 17
## Reductions:
-- On TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND
--   reduce production expr_desc -> ident

State 17:
## Known stack suffix:
## ident LEFTPAR
## LR(1) items:
expr_desc -> ident LEFTPAR . loption(separated_nonempty_list(COMMA,expr)) RIGHTPAR [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
## Transitions:
-- On TRUE shift to state 6
-- On STRING shift to state 7
-- On NOT shift to state 8
-- On NONE shift to state 9
-- On MINUS shift to state 10
-- On LEFTSQ shift to state 11
-- On LEFTPAR shift to state 12
-- On INTEGER shift to state 13
-- On IDENT shift to state 14
-- On FALSE shift to state 15
-- On separated_nonempty_list(COMMA,expr) shift to state 18
-- On loption(separated_nonempty_list(COMMA,expr)) shift to state 19
-- On ident shift to state 16
-- On expr_desc shift to state 21
-- On expr shift to state 22
## Reductions:
-- On RIGHTPAR
--   reduce production loption(separated_nonempty_list(COMMA,expr)) ->

State 18:
## Known stack suffix:
## separated_nonempty_list(COMMA,expr)
## LR(1) items:
loption(separated_nonempty_list(COMMA,expr)) -> separated_nonempty_list(COMMA,expr) . [ RIGHTSQ RIGHTPAR ]
## Transitions:
## Reductions:
-- On RIGHTSQ RIGHTPAR
--   reduce production loption(separated_nonempty_list(COMMA,expr)) -> separated_nonempty_list(COMMA,expr)

State 19:
## Known stack suffix:
## ident LEFTPAR loption(separated_nonempty_list(COMMA,expr))
## LR(1) items:
expr_desc -> ident LEFTPAR loption(separated_nonempty_list(COMMA,expr)) . RIGHTPAR [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
## Transitions:
-- On RIGHTPAR shift to state 20
## Reductions:

State 20:
## Known stack suffix:
## ident LEFTPAR loption(separated_nonempty_list(COMMA,expr)) RIGHTPAR
## LR(1) items:
expr_desc -> ident LEFTPAR loption(separated_nonempty_list(COMMA,expr)) RIGHTPAR . [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
## Transitions:
## Reductions:
-- On TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND
--   reduce production expr_desc -> ident LEFTPAR loption(separated_nonempty_list(COMMA,expr)) RIGHTPAR

State 21:
## Known stack suffix:
## expr_desc
## LR(1) items:
expr -> expr_desc . [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
## Transitions:
## Reductions:
-- On TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND
--   reduce production expr -> expr_desc

State 22:
## Known stack suffix:
## expr
## LR(1) items:
expr_desc -> expr . LEFTSQ expr RIGHTSQ [ TIMES RIGHTSQ RIGHTPAR PLUS OR MOD MINUS LEFTSQ DIV COMMA CMP AND ]
expr_desc -> expr . PLUS expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR MOD MINUS LEFTSQ DIV COMMA CMP AND ]
expr_desc -> expr . MINUS expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR MOD MINUS LEFTSQ DIV COMMA CMP AND ]
expr_desc -> expr . DIV expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR MOD MINUS LEFTSQ DIV COMMA CMP AND ]
expr_desc -> expr . MOD expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR MOD MINUS LEFTSQ DIV COMMA CMP AND ]
expr_desc -> expr . CMP expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR MOD MINUS LEFTSQ DIV COMMA CMP AND ]
expr_desc -> expr . AND expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR MOD MINUS LEFTSQ DIV COMMA CMP AND ]
expr_desc -> expr . OR expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR MOD MINUS LEFTSQ DIV COMMA CMP AND ]
expr_desc -> expr . TIMES expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR MOD MINUS LEFTSQ DIV COMMA CMP AND ]
separated_nonempty_list(COMMA,expr) -> expr . [ RIGHTSQ RIGHTPAR ]
separated_nonempty_list(COMMA,expr) -> expr . COMMA separated_nonempty_list(COMMA,expr) [ RIGHTSQ RIGHTPAR ]
## Transitions:
-- On TIMES shift to state 23
-- On PLUS shift to state 28
-- On OR shift to state 34
-- On MOD shift to state 30
-- On MINUS shift to state 36
-- On LEFTSQ shift to state 25
-- On DIV shift to state 32
-- On COMMA shift to state 42
-- On CMP shift to state 38
-- On AND shift to state 40
## Reductions:
-- On RIGHTSQ RIGHTPAR
--   reduce production separated_nonempty_list(COMMA,expr) -> expr

State 23:
## Known stack suffix:
## expr TIMES
## LR(1) items:
expr_desc -> expr TIMES . expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
## Transitions:
-- On TRUE shift to state 6
-- On STRING shift to state 7
-- On NOT shift to state 8
-- On NONE shift to state 9
-- On MINUS shift to state 10
-- On LEFTSQ shift to state 11
-- On LEFTPAR shift to state 12
-- On INTEGER shift to state 13
-- On IDENT shift to state 14
-- On FALSE shift to state 15
-- On ident shift to state 16
-- On expr_desc shift to state 21
-- On expr shift to state 24
## Reductions:

State 24:
## Known stack suffix:
## expr TIMES expr
## LR(1) items:
expr_desc -> expr . LEFTSQ expr RIGHTSQ [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . PLUS expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . MINUS expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . DIV expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . MOD expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . CMP expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . AND expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . OR expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . TIMES expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr TIMES expr . [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
## Transitions:
-- On LEFTSQ shift to state 25
## Reductions:
-- On TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS DIV COMMA COLON CMP AND
--   reduce production expr_desc -> expr TIMES expr

State 25:
## Known stack suffix:
## expr LEFTSQ
## LR(1) items:
expr_desc -> expr LEFTSQ . expr RIGHTSQ [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
## Transitions:
-- On TRUE shift to state 6
-- On STRING shift to state 7
-- On NOT shift to state 8
-- On NONE shift to state 9
-- On MINUS shift to state 10
-- On LEFTSQ shift to state 11
-- On LEFTPAR shift to state 12
-- On INTEGER shift to state 13
-- On IDENT shift to state 14
-- On FALSE shift to state 15
-- On ident shift to state 16
-- On expr_desc shift to state 21
-- On expr shift to state 26
## Reductions:

State 26:
## Known stack suffix:
## expr LEFTSQ expr
## LR(1) items:
expr_desc -> expr . LEFTSQ expr RIGHTSQ [ TIMES RIGHTSQ PLUS OR MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr LEFTSQ expr . RIGHTSQ [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . PLUS expr [ TIMES RIGHTSQ PLUS OR MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . MINUS expr [ TIMES RIGHTSQ PLUS OR MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . DIV expr [ TIMES RIGHTSQ PLUS OR MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . MOD expr [ TIMES RIGHTSQ PLUS OR MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . CMP expr [ TIMES RIGHTSQ PLUS OR MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . AND expr [ TIMES RIGHTSQ PLUS OR MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . OR expr [ TIMES RIGHTSQ PLUS OR MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . TIMES expr [ TIMES RIGHTSQ PLUS OR MOD MINUS LEFTSQ DIV CMP AND ]
## Transitions:
-- On TIMES shift to state 23
-- On RIGHTSQ shift to state 27
-- On PLUS shift to state 28
-- On OR shift to state 34
-- On MOD shift to state 30
-- On MINUS shift to state 36
-- On LEFTSQ shift to state 25
-- On DIV shift to state 32
-- On CMP shift to state 38
-- On AND shift to state 40
## Reductions:

State 27:
## Known stack suffix:
## expr LEFTSQ expr RIGHTSQ
## LR(1) items:
expr_desc -> expr LEFTSQ expr RIGHTSQ . [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
## Transitions:
## Reductions:
-- On TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND
--   reduce production expr_desc -> expr LEFTSQ expr RIGHTSQ

State 28:
## Known stack suffix:
## expr PLUS
## LR(1) items:
expr_desc -> expr PLUS . expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
## Transitions:
-- On TRUE shift to state 6
-- On STRING shift to state 7
-- On NOT shift to state 8
-- On NONE shift to state 9
-- On MINUS shift to state 10
-- On LEFTSQ shift to state 11
-- On LEFTPAR shift to state 12
-- On INTEGER shift to state 13
-- On IDENT shift to state 14
-- On FALSE shift to state 15
-- On ident shift to state 16
-- On expr_desc shift to state 21
-- On expr shift to state 29
## Reductions:

State 29:
## Known stack suffix:
## expr PLUS expr
## LR(1) items:
expr_desc -> expr . LEFTSQ expr RIGHTSQ [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . PLUS expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr PLUS expr . [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . MINUS expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . DIV expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . MOD expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . CMP expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . AND expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . OR expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . TIMES expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
## Transitions:
-- On TIMES shift to state 23
-- On MOD shift to state 30
-- On LEFTSQ shift to state 25
-- On DIV shift to state 32
## Reductions:
-- On RIGHTSQ RIGHTPAR PLUS OR NEWLINE MINUS COMMA COLON CMP AND
--   reduce production expr_desc -> expr PLUS expr

State 30:
## Known stack suffix:
## expr MOD
## LR(1) items:
expr_desc -> expr MOD . expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
## Transitions:
-- On TRUE shift to state 6
-- On STRING shift to state 7
-- On NOT shift to state 8
-- On NONE shift to state 9
-- On MINUS shift to state 10
-- On LEFTSQ shift to state 11
-- On LEFTPAR shift to state 12
-- On INTEGER shift to state 13
-- On IDENT shift to state 14
-- On FALSE shift to state 15
-- On ident shift to state 16
-- On expr_desc shift to state 21
-- On expr shift to state 31
## Reductions:

State 31:
## Known stack suffix:
## expr MOD expr
## LR(1) items:
expr_desc -> expr . LEFTSQ expr RIGHTSQ [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . PLUS expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . MINUS expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . DIV expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . MOD expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr MOD expr . [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . CMP expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . AND expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . OR expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . TIMES expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
## Transitions:
-- On LEFTSQ shift to state 25
## Reductions:
-- On TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS DIV COMMA COLON CMP AND
--   reduce production expr_desc -> expr MOD expr

State 32:
## Known stack suffix:
## expr DIV
## LR(1) items:
expr_desc -> expr DIV . expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
## Transitions:
-- On TRUE shift to state 6
-- On STRING shift to state 7
-- On NOT shift to state 8
-- On NONE shift to state 9
-- On MINUS shift to state 10
-- On LEFTSQ shift to state 11
-- On LEFTPAR shift to state 12
-- On INTEGER shift to state 13
-- On IDENT shift to state 14
-- On FALSE shift to state 15
-- On ident shift to state 16
-- On expr_desc shift to state 21
-- On expr shift to state 33
## Reductions:

State 33:
## Known stack suffix:
## expr DIV expr
## LR(1) items:
expr_desc -> expr . LEFTSQ expr RIGHTSQ [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . PLUS expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . MINUS expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . DIV expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr DIV expr . [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . MOD expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . CMP expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . AND expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . OR expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . TIMES expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
## Transitions:
-- On LEFTSQ shift to state 25
## Reductions:
-- On TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS DIV COMMA COLON CMP AND
--   reduce production expr_desc -> expr DIV expr

State 34:
## Known stack suffix:
## expr OR
## LR(1) items:
expr_desc -> expr OR . expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
## Transitions:
-- On TRUE shift to state 6
-- On STRING shift to state 7
-- On NOT shift to state 8
-- On NONE shift to state 9
-- On MINUS shift to state 10
-- On LEFTSQ shift to state 11
-- On LEFTPAR shift to state 12
-- On INTEGER shift to state 13
-- On IDENT shift to state 14
-- On FALSE shift to state 15
-- On ident shift to state 16
-- On expr_desc shift to state 21
-- On expr shift to state 35
## Reductions:

State 35:
## Known stack suffix:
## expr OR expr
## LR(1) items:
expr_desc -> expr . LEFTSQ expr RIGHTSQ [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . PLUS expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . MINUS expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . DIV expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . MOD expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . CMP expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . AND expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . OR expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr OR expr . [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . TIMES expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
## Transitions:
-- On TIMES shift to state 23
-- On PLUS shift to state 28
-- On OR shift to state 34
-- On MOD shift to state 30
-- On MINUS shift to state 36
-- On LEFTSQ shift to state 25
-- On DIV shift to state 32
-- On CMP shift to state 38
-- On AND shift to state 40
## Reductions:
-- On RIGHTSQ RIGHTPAR NEWLINE COMMA COLON
--   reduce production expr_desc -> expr OR expr

State 36:
## Known stack suffix:
## expr MINUS
## LR(1) items:
expr_desc -> expr MINUS . expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
## Transitions:
-- On TRUE shift to state 6
-- On STRING shift to state 7
-- On NOT shift to state 8
-- On NONE shift to state 9
-- On MINUS shift to state 10
-- On LEFTSQ shift to state 11
-- On LEFTPAR shift to state 12
-- On INTEGER shift to state 13
-- On IDENT shift to state 14
-- On FALSE shift to state 15
-- On ident shift to state 16
-- On expr_desc shift to state 21
-- On expr shift to state 37
## Reductions:

State 37:
## Known stack suffix:
## expr MINUS expr
## LR(1) items:
expr_desc -> expr . LEFTSQ expr RIGHTSQ [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . PLUS expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . MINUS expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr MINUS expr . [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . DIV expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . MOD expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . CMP expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . AND expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . OR expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . TIMES expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
## Transitions:
-- On TIMES shift to state 23
-- On MOD shift to state 30
-- On LEFTSQ shift to state 25
-- On DIV shift to state 32
## Reductions:
-- On RIGHTSQ RIGHTPAR PLUS OR NEWLINE MINUS COMMA COLON CMP AND
--   reduce production expr_desc -> expr MINUS expr

State 38:
## Known stack suffix:
## expr CMP
## LR(1) items:
expr_desc -> expr CMP . expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
## Transitions:
-- On TRUE shift to state 6
-- On STRING shift to state 7
-- On NOT shift to state 8
-- On NONE shift to state 9
-- On MINUS shift to state 10
-- On LEFTSQ shift to state 11
-- On LEFTPAR shift to state 12
-- On INTEGER shift to state 13
-- On IDENT shift to state 14
-- On FALSE shift to state 15
-- On ident shift to state 16
-- On expr_desc shift to state 21
-- On expr shift to state 39
## Reductions:

State 39:
## Known stack suffix:
## expr CMP expr
## LR(1) items:
expr_desc -> expr . LEFTSQ expr RIGHTSQ [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . PLUS expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . MINUS expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . DIV expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . MOD expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . CMP expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr CMP expr . [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . AND expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . OR expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . TIMES expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
## Transitions:
-- On TIMES shift to state 23
-- On PLUS shift to state 28
-- On MOD shift to state 30
-- On MINUS shift to state 36
-- On LEFTSQ shift to state 25
-- On DIV shift to state 32
-- On CMP shift to state 38
## Reductions:
-- On RIGHTSQ RIGHTPAR OR NEWLINE COMMA COLON AND
--   reduce production expr_desc -> expr CMP expr

State 40:
## Known stack suffix:
## expr AND
## LR(1) items:
expr_desc -> expr AND . expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
## Transitions:
-- On TRUE shift to state 6
-- On STRING shift to state 7
-- On NOT shift to state 8
-- On NONE shift to state 9
-- On MINUS shift to state 10
-- On LEFTSQ shift to state 11
-- On LEFTPAR shift to state 12
-- On INTEGER shift to state 13
-- On IDENT shift to state 14
-- On FALSE shift to state 15
-- On ident shift to state 16
-- On expr_desc shift to state 21
-- On expr shift to state 41
## Reductions:

State 41:
## Known stack suffix:
## expr AND expr
## LR(1) items:
expr_desc -> expr . LEFTSQ expr RIGHTSQ [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . PLUS expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . MINUS expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . DIV expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . MOD expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . CMP expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . AND expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr AND expr . [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . OR expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . TIMES expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
## Transitions:
-- On TIMES shift to state 23
-- On PLUS shift to state 28
-- On MOD shift to state 30
-- On MINUS shift to state 36
-- On LEFTSQ shift to state 25
-- On DIV shift to state 32
-- On CMP shift to state 38
-- On AND shift to state 40
## Reductions:
-- On RIGHTSQ RIGHTPAR OR NEWLINE COMMA COLON
--   reduce production expr_desc -> expr AND expr

State 42:
## Known stack suffix:
## expr COMMA
## LR(1) items:
separated_nonempty_list(COMMA,expr) -> expr COMMA . separated_nonempty_list(COMMA,expr) [ RIGHTSQ RIGHTPAR ]
## Transitions:
-- On TRUE shift to state 6
-- On STRING shift to state 7
-- On NOT shift to state 8
-- On NONE shift to state 9
-- On MINUS shift to state 10
-- On LEFTSQ shift to state 11
-- On LEFTPAR shift to state 12
-- On INTEGER shift to state 13
-- On IDENT shift to state 14
-- On FALSE shift to state 15
-- On separated_nonempty_list(COMMA,expr) shift to state 43
-- On ident shift to state 16
-- On expr_desc shift to state 21
-- On expr shift to state 22
## Reductions:

State 43:
## Known stack suffix:
## expr COMMA separated_nonempty_list(COMMA,expr)
## LR(1) items:
separated_nonempty_list(COMMA,expr) -> expr COMMA separated_nonempty_list(COMMA,expr) . [ RIGHTSQ RIGHTPAR ]
## Transitions:
## Reductions:
-- On RIGHTSQ RIGHTPAR
--   reduce production separated_nonempty_list(COMMA,expr) -> expr COMMA separated_nonempty_list(COMMA,expr)

State 44:
## Known stack suffix:
## LEFTPAR expr
## LR(1) items:
expr_desc -> expr . LEFTSQ expr RIGHTSQ [ TIMES RIGHTPAR PLUS OR MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . PLUS expr [ TIMES RIGHTPAR PLUS OR MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . MINUS expr [ TIMES RIGHTPAR PLUS OR MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . DIV expr [ TIMES RIGHTPAR PLUS OR MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . MOD expr [ TIMES RIGHTPAR PLUS OR MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . CMP expr [ TIMES RIGHTPAR PLUS OR MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . AND expr [ TIMES RIGHTPAR PLUS OR MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . OR expr [ TIMES RIGHTPAR PLUS OR MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . TIMES expr [ TIMES RIGHTPAR PLUS OR MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> LEFTPAR expr . RIGHTPAR [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
## Transitions:
-- On TIMES shift to state 23
-- On RIGHTPAR shift to state 45
-- On PLUS shift to state 28
-- On OR shift to state 34
-- On MOD shift to state 30
-- On MINUS shift to state 36
-- On LEFTSQ shift to state 25
-- On DIV shift to state 32
-- On CMP shift to state 38
-- On AND shift to state 40
## Reductions:

State 45:
## Known stack suffix:
## LEFTPAR expr RIGHTPAR
## LR(1) items:
expr_desc -> LEFTPAR expr RIGHTPAR . [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
## Transitions:
## Reductions:
-- On TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND
--   reduce production expr_desc -> LEFTPAR expr RIGHTPAR

State 46:
## Known stack suffix:
## LEFTSQ loption(separated_nonempty_list(COMMA,expr))
## LR(1) items:
expr_desc -> LEFTSQ loption(separated_nonempty_list(COMMA,expr)) . RIGHTSQ [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
## Transitions:
-- On RIGHTSQ shift to state 47
## Reductions:

State 47:
## Known stack suffix:
## LEFTSQ loption(separated_nonempty_list(COMMA,expr)) RIGHTSQ
## LR(1) items:
expr_desc -> LEFTSQ loption(separated_nonempty_list(COMMA,expr)) RIGHTSQ . [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
## Transitions:
## Reductions:
-- On TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND
--   reduce production expr_desc -> LEFTSQ loption(separated_nonempty_list(COMMA,expr)) RIGHTSQ

State 48:
## Known stack suffix:
## MINUS expr
## LR(1) items:
expr_desc -> expr . LEFTSQ expr RIGHTSQ [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> MINUS expr . [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . PLUS expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . MINUS expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . DIV expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . MOD expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . CMP expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . AND expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . OR expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . TIMES expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
## Transitions:
-- On LEFTSQ shift to state 25
## Reductions:
-- On TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS DIV COMMA COLON CMP AND
--   reduce production expr_desc -> MINUS expr

State 49:
## Known stack suffix:
## NOT expr
## LR(1) items:
expr_desc -> expr . LEFTSQ expr RIGHTSQ [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> NOT expr . [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . PLUS expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . MINUS expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . DIV expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . MOD expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . CMP expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . AND expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . OR expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
expr_desc -> expr . TIMES expr [ TIMES RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LEFTSQ DIV COMMA COLON CMP AND ]
## Transitions:
-- On TIMES shift to state 23
-- On PLUS shift to state 28
-- On MOD shift to state 30
-- On MINUS shift to state 36
-- On LEFTSQ shift to state 25
-- On DIV shift to state 32
-- On CMP shift to state 38
## Reductions:
-- On RIGHTSQ RIGHTPAR OR NEWLINE COMMA COLON AND
--   reduce production expr_desc -> NOT expr

State 50:
## Known stack suffix:
## WHILE expr
## LR(1) items:
expr_desc -> expr . LEFTSQ expr RIGHTSQ [ TIMES PLUS OR MOD MINUS LEFTSQ DIV COLON CMP AND ]
expr_desc -> expr . PLUS expr [ TIMES PLUS OR MOD MINUS LEFTSQ DIV COLON CMP AND ]
expr_desc -> expr . MINUS expr [ TIMES PLUS OR MOD MINUS LEFTSQ DIV COLON CMP AND ]
expr_desc -> expr . DIV expr [ TIMES PLUS OR MOD MINUS LEFTSQ DIV COLON CMP AND ]
expr_desc -> expr . MOD expr [ TIMES PLUS OR MOD MINUS LEFTSQ DIV COLON CMP AND ]
expr_desc -> expr . CMP expr [ TIMES PLUS OR MOD MINUS LEFTSQ DIV COLON CMP AND ]
expr_desc -> expr . AND expr [ TIMES PLUS OR MOD MINUS LEFTSQ DIV COLON CMP AND ]
expr_desc -> expr . OR expr [ TIMES PLUS OR MOD MINUS LEFTSQ DIV COLON CMP AND ]
expr_desc -> expr . TIMES expr [ TIMES PLUS OR MOD MINUS LEFTSQ DIV COLON CMP AND ]
stmt_desc -> WHILE expr . COLON loop_body [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF END DEF CHECK BREAK ASSUME ASSERT ]
## Transitions:
-- On TIMES shift to state 23
-- On PLUS shift to state 28
-- On OR shift to state 34
-- On MOD shift to state 30
-- On MINUS shift to state 36
-- On LEFTSQ shift to state 25
-- On DIV shift to state 32
-- On COLON shift to state 51
-- On CMP shift to state 38
-- On AND shift to state 40
## Reductions:

State 51:
## Known stack suffix:
## WHILE expr COLON
## LR(1) items:
stmt_desc -> WHILE expr COLON . loop_body [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF END DEF CHECK BREAK ASSUME ASSERT ]
## Transitions:
-- On TRUE shift to state 6
-- On STRING shift to state 7
-- On RETURN shift to state 52
-- On NOT shift to state 8
-- On NONE shift to state 9
-- On NEWLINE shift to state 54
-- On MINUS shift to state 10
-- On LEFTSQ shift to state 11
-- On LEFTPAR shift to state 12
-- On LABEL shift to state 141
-- On INTEGER shift to state 13
-- On IDENT shift to state 14
-- On FALSE shift to state 15
-- On CHECK shift to state 153
-- On BREAK shift to state 154
-- On ASSUME shift to state 155
-- On ASSERT shift to state 156
-- On simple_stmt_desc shift to state 157
-- On simple_stmt shift to state 158
-- On loop_body shift to state 195
-- On located(simple_stmt_desc) shift to state 161
-- On ident shift to state 162
-- On expr_desc shift to state 21
-- On expr shift to state 165
-- On assertion_kind shift to state 171
## Reductions:

State 52:
## Known stack suffix:
## RETURN
## LR(1) items:
simple_stmt_desc -> RETURN . expr [ NEWLINE ]
## Transitions:
-- On TRUE shift to state 6
-- On STRING shift to state 7
-- On NOT shift to state 8
-- On NONE shift to state 9
-- On MINUS shift to state 10
-- On LEFTSQ shift to state 11
-- On LEFTPAR shift to state 12
-- On INTEGER shift to state 13
-- On IDENT shift to state 14
-- On FALSE shift to state 15
-- On ident shift to state 16
-- On expr_desc shift to state 21
-- On expr shift to state 53
## Reductions:

State 53:
## Known stack suffix:
## RETURN expr
## LR(1) items:
expr_desc -> expr . LEFTSQ expr RIGHTSQ [ TIMES PLUS OR NEWLINE MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . PLUS expr [ TIMES PLUS OR NEWLINE MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . MINUS expr [ TIMES PLUS OR NEWLINE MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . DIV expr [ TIMES PLUS OR NEWLINE MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . MOD expr [ TIMES PLUS OR NEWLINE MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . CMP expr [ TIMES PLUS OR NEWLINE MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . AND expr [ TIMES PLUS OR NEWLINE MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . OR expr [ TIMES PLUS OR NEWLINE MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . TIMES expr [ TIMES PLUS OR NEWLINE MOD MINUS LEFTSQ DIV CMP AND ]
simple_stmt_desc -> RETURN expr . [ NEWLINE ]
## Transitions:
-- On TIMES shift to state 23
-- On PLUS shift to state 28
-- On OR shift to state 34
-- On MOD shift to state 30
-- On MINUS shift to state 36
-- On LEFTSQ shift to state 25
-- On DIV shift to state 32
-- On CMP shift to state 38
-- On AND shift to state 40
## Reductions:
-- On NEWLINE
--   reduce production simple_stmt_desc -> RETURN expr

State 54:
## Known stack suffix:
## NEWLINE
## LR(1) items:
loop_body -> NEWLINE . BEGIN loop_annotation nonempty_list(stmt) END [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF END DEF CHECK BREAK ASSUME ASSERT ]
## Transitions:
-- On BEGIN shift to state 55
## Reductions:

State 55:
## Known stack suffix:
## NEWLINE BEGIN
## LR(1) items:
loop_body -> NEWLINE BEGIN . loop_annotation nonempty_list(stmt) END [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF END DEF CHECK BREAK ASSUME ASSERT ]
## Transitions:
-- On VARIANT shift to state 56
-- On INVARIANT shift to state 133
-- On variant shift to state 136
-- On loop_annotation shift to state 140
-- On invariant shift to state 138
## Reductions:
-- On WHILE TRUE STRING RETURN NOT NONE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FOR FALSE CHECK BREAK ASSUME ASSERT
--   reduce production loop_annotation ->

State 56:
## Known stack suffix:
## VARIANT
## LR(1) items:
variant -> VARIANT . comma_list1(term) NEWLINE [ WHILE VARIANT TRUE STRING RETURN REQUIRES NOT NONE MINUS LEFTSQ LEFTPAR LABEL INVARIANT INTEGER IF IDENT FOR FALSE ENSURES CHECK BREAK ASSUME ASSERT ]
## Transitions:
-- On TRUE shift to state 57
-- On NOT shift to state 58
-- On NONE shift to state 59
-- On MINUS shift to state 60
-- On LET shift to state 61
-- On LEFTPAR shift to state 64
-- On INTEGER shift to state 65
-- On IF shift to state 66
-- On IDENT shift to state 14
-- On FORALL shift to state 67
-- On FALSE shift to state 68
-- On EXISTS shift to state 69
-- On term_sub_ shift to state 70
-- On term_arg_ shift to state 71
-- On term_arg shift to state 72
-- On term_ shift to state 74
-- On term shift to state 94
-- On separated_nonempty_list(COMMA,term) shift to state 130
-- On quant shift to state 78
-- On mk_term(term_arg_) shift to state 90
-- On mk_term(term_) shift to state 91
-- On ident shift to state 92
-- On comma_list1(term) shift to state 131
## Reductions:

State 57:
## Known stack suffix:
## TRUE
## LR(1) items:
term_arg_ -> TRUE . [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LEFTSQ LARROW IN ELSE DIV COMMA CMP ARROW AND ]
## Transitions:
## Reductions:
-- On TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LEFTSQ LARROW IN ELSE DIV COMMA CMP ARROW AND
--   reduce production term_arg_ -> TRUE

State 58:
## Known stack suffix:
## NOT
## LR(1) items:
term_ -> NOT . term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
## Transitions:
-- On TRUE shift to state 57
-- On NOT shift to state 58
-- On NONE shift to state 59
-- On MINUS shift to state 60
-- On LET shift to state 61
-- On LEFTPAR shift to state 64
-- On INTEGER shift to state 65
-- On IF shift to state 66
-- On IDENT shift to state 14
-- On FORALL shift to state 67
-- On FALSE shift to state 68
-- On EXISTS shift to state 69
-- On term_sub_ shift to state 70
-- On term_arg_ shift to state 71
-- On term_arg shift to state 72
-- On term_ shift to state 74
-- On term shift to state 129
-- On quant shift to state 78
-- On mk_term(term_arg_) shift to state 90
-- On mk_term(term_) shift to state 91
-- On ident shift to state 92
## Reductions:

State 59:
## Known stack suffix:
## NONE
## LR(1) items:
term_arg_ -> NONE . [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LEFTSQ LARROW IN ELSE DIV COMMA CMP ARROW AND ]
## Transitions:
## Reductions:
-- On TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LEFTSQ LARROW IN ELSE DIV COMMA CMP ARROW AND
--   reduce production term_arg_ -> NONE

State 60:
## Known stack suffix:
## MINUS
## LR(1) items:
term_ -> MINUS . term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
## Transitions:
-- On TRUE shift to state 57
-- On NOT shift to state 58
-- On NONE shift to state 59
-- On MINUS shift to state 60
-- On LET shift to state 61
-- On LEFTPAR shift to state 64
-- On INTEGER shift to state 65
-- On IF shift to state 66
-- On IDENT shift to state 14
-- On FORALL shift to state 67
-- On FALSE shift to state 68
-- On EXISTS shift to state 69
-- On term_sub_ shift to state 70
-- On term_arg_ shift to state 71
-- On term_arg shift to state 72
-- On term_ shift to state 74
-- On term shift to state 128
-- On quant shift to state 78
-- On mk_term(term_arg_) shift to state 90
-- On mk_term(term_) shift to state 91
-- On ident shift to state 92
## Reductions:

State 61:
## Known stack suffix:
## LET
## LR(1) items:
term_ -> LET . ident EQUAL term IN term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
## Transitions:
-- On IDENT shift to state 14
-- On ident shift to state 62
## Reductions:

State 62:
## Known stack suffix:
## LET ident
## LR(1) items:
term_ -> LET ident . EQUAL term IN term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
## Transitions:
-- On EQUAL shift to state 63
## Reductions:

State 63:
## Known stack suffix:
## LET ident EQUAL
## LR(1) items:
term_ -> LET ident EQUAL . term IN term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
## Transitions:
-- On TRUE shift to state 57
-- On NOT shift to state 58
-- On NONE shift to state 59
-- On MINUS shift to state 60
-- On LET shift to state 61
-- On LEFTPAR shift to state 64
-- On INTEGER shift to state 65
-- On IF shift to state 66
-- On IDENT shift to state 14
-- On FORALL shift to state 67
-- On FALSE shift to state 68
-- On EXISTS shift to state 69
-- On term_sub_ shift to state 70
-- On term_arg_ shift to state 71
-- On term_arg shift to state 72
-- On term_ shift to state 74
-- On term shift to state 125
-- On quant shift to state 78
-- On mk_term(term_arg_) shift to state 90
-- On mk_term(term_) shift to state 91
-- On ident shift to state 92
## Reductions:

State 64:
## Known stack suffix:
## LEFTPAR
## LR(1) items:
term_sub_ -> LEFTPAR . term RIGHTPAR [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LEFTSQ LARROW IN ELSE DIV COMMA CMP ARROW AND ]
## Transitions:
-- On TRUE shift to state 57
-- On NOT shift to state 58
-- On NONE shift to state 59
-- On MINUS shift to state 60
-- On LET shift to state 61
-- On LEFTPAR shift to state 64
-- On INTEGER shift to state 65
-- On IF shift to state 66
-- On IDENT shift to state 14
-- On FORALL shift to state 67
-- On FALSE shift to state 68
-- On EXISTS shift to state 69
-- On term_sub_ shift to state 70
-- On term_arg_ shift to state 71
-- On term_arg shift to state 72
-- On term_ shift to state 74
-- On term shift to state 123
-- On quant shift to state 78
-- On mk_term(term_arg_) shift to state 90
-- On mk_term(term_) shift to state 91
-- On ident shift to state 92
## Reductions:

State 65:
## Known stack suffix:
## INTEGER
## LR(1) items:
term_arg_ -> INTEGER . [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LEFTSQ LARROW IN ELSE DIV COMMA CMP ARROW AND ]
## Transitions:
## Reductions:
-- On TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LEFTSQ LARROW IN ELSE DIV COMMA CMP ARROW AND
--   reduce production term_arg_ -> INTEGER

State 66:
## Known stack suffix:
## IF
## LR(1) items:
term_ -> IF . term THEN term ELSE term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
## Transitions:
-- On TRUE shift to state 57
-- On NOT shift to state 58
-- On NONE shift to state 59
-- On MINUS shift to state 60
-- On LET shift to state 61
-- On LEFTPAR shift to state 64
-- On INTEGER shift to state 65
-- On IF shift to state 66
-- On IDENT shift to state 14
-- On FORALL shift to state 67
-- On FALSE shift to state 68
-- On EXISTS shift to state 69
-- On term_sub_ shift to state 70
-- On term_arg_ shift to state 71
-- On term_arg shift to state 72
-- On term_ shift to state 74
-- On term shift to state 118
-- On quant shift to state 78
-- On mk_term(term_arg_) shift to state 90
-- On mk_term(term_) shift to state 91
-- On ident shift to state 92
## Reductions:

State 67:
## Known stack suffix:
## FORALL
## LR(1) items:
quant -> FORALL . [ IDENT ]
## Transitions:
## Reductions:
-- On IDENT
--   reduce production quant -> FORALL

State 68:
## Known stack suffix:
## FALSE
## LR(1) items:
term_arg_ -> FALSE . [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LEFTSQ LARROW IN ELSE DIV COMMA CMP ARROW AND ]
## Transitions:
## Reductions:
-- On TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LEFTSQ LARROW IN ELSE DIV COMMA CMP ARROW AND
--   reduce production term_arg_ -> FALSE

State 69:
## Known stack suffix:
## EXISTS
## LR(1) items:
quant -> EXISTS . [ IDENT ]
## Transitions:
## Reductions:
-- On IDENT
--   reduce production quant -> EXISTS

State 70:
## Known stack suffix:
## term_sub_
## LR(1) items:
term_arg_ -> term_sub_ . [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LEFTSQ LARROW IN ELSE DIV COMMA CMP ARROW AND ]
## Transitions:
## Reductions:
-- On TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LEFTSQ LARROW IN ELSE DIV COMMA CMP ARROW AND
--   reduce production term_arg_ -> term_sub_

State 71:
## Known stack suffix:
## term_arg_
## LR(1) items:
mk_term(term_arg_) -> term_arg_ . [ LEFTSQ ]
term_ -> term_arg_ . [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
## Transitions:
## Reductions:
-- On LEFTSQ
--   reduce production mk_term(term_arg_) -> term_arg_
-- On TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND
--   reduce production term_ -> term_arg_

State 72:
## Known stack suffix:
## term_arg
## LR(1) items:
term_sub_ -> term_arg . LEFTSQ term RIGHTSQ [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LEFTSQ LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_sub_ -> term_arg . LEFTSQ term LARROW term RIGHTSQ [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LEFTSQ LARROW IN ELSE DIV COMMA CMP ARROW AND ]
## Transitions:
-- On LEFTSQ shift to state 73
## Reductions:

State 73:
## Known stack suffix:
## term_arg LEFTSQ
## LR(1) items:
term_sub_ -> term_arg LEFTSQ . term RIGHTSQ [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LEFTSQ LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_sub_ -> term_arg LEFTSQ . term LARROW term RIGHTSQ [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LEFTSQ LARROW IN ELSE DIV COMMA CMP ARROW AND ]
## Transitions:
-- On TRUE shift to state 57
-- On NOT shift to state 58
-- On NONE shift to state 59
-- On MINUS shift to state 60
-- On LET shift to state 61
-- On LEFTPAR shift to state 64
-- On INTEGER shift to state 65
-- On IF shift to state 66
-- On IDENT shift to state 14
-- On FORALL shift to state 67
-- On FALSE shift to state 68
-- On EXISTS shift to state 69
-- On term_sub_ shift to state 70
-- On term_arg_ shift to state 71
-- On term_arg shift to state 72
-- On term_ shift to state 74
-- On term shift to state 75
-- On quant shift to state 78
-- On mk_term(term_arg_) shift to state 90
-- On mk_term(term_) shift to state 91
-- On ident shift to state 92
## Reductions:

State 74:
## Known stack suffix:
## term_
## LR(1) items:
mk_term(term_) -> term_ . [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
## Transitions:
## Reductions:
-- On TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND
--   reduce production mk_term(term_) -> term_

State 75:
## Known stack suffix:
## term_arg LEFTSQ term
## LR(1) items:
term_ -> term . ARROW term [ TIMES RIGHTSQ PLUS OR MOD MINUS LRARROW LARROW DIV CMP ARROW AND ]
term_ -> term . LRARROW term [ TIMES RIGHTSQ PLUS OR MOD MINUS LRARROW LARROW DIV CMP ARROW AND ]
term_ -> term . OR term [ TIMES RIGHTSQ PLUS OR MOD MINUS LRARROW LARROW DIV CMP ARROW AND ]
term_ -> term . AND term [ TIMES RIGHTSQ PLUS OR MOD MINUS LRARROW LARROW DIV CMP ARROW AND ]
term_ -> term . CMP term [ TIMES RIGHTSQ PLUS OR MOD MINUS LRARROW LARROW DIV CMP ARROW AND ]
term_ -> term . DIV term [ TIMES RIGHTSQ PLUS OR MOD MINUS LRARROW LARROW DIV CMP ARROW AND ]
term_ -> term . MOD term [ TIMES RIGHTSQ PLUS OR MOD MINUS LRARROW LARROW DIV CMP ARROW AND ]
term_ -> term . PLUS term [ TIMES RIGHTSQ PLUS OR MOD MINUS LRARROW LARROW DIV CMP ARROW AND ]
term_ -> term . MINUS term [ TIMES RIGHTSQ PLUS OR MOD MINUS LRARROW LARROW DIV CMP ARROW AND ]
term_ -> term . TIMES term [ TIMES RIGHTSQ PLUS OR MOD MINUS LRARROW LARROW DIV CMP ARROW AND ]
term_sub_ -> term_arg LEFTSQ term . RIGHTSQ [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LEFTSQ LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_sub_ -> term_arg LEFTSQ term . LARROW term RIGHTSQ [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LEFTSQ LARROW IN ELSE DIV COMMA CMP ARROW AND ]
## Transitions:
-- On TIMES shift to state 76
-- On RIGHTSQ shift to state 114
-- On PLUS shift to state 86
-- On OR shift to state 95
-- On MOD shift to state 88
-- On MINUS shift to state 97
-- On LRARROW shift to state 105
-- On LARROW shift to state 115
-- On DIV shift to state 99
-- On CMP shift to state 101
-- On ARROW shift to state 107
-- On AND shift to state 103
## Reductions:

State 76:
## Known stack suffix:
## term TIMES
## LR(1) items:
term_ -> term TIMES . term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
## Transitions:
-- On TRUE shift to state 57
-- On NOT shift to state 58
-- On NONE shift to state 59
-- On MINUS shift to state 60
-- On LET shift to state 61
-- On LEFTPAR shift to state 64
-- On INTEGER shift to state 65
-- On IF shift to state 66
-- On IDENT shift to state 14
-- On FORALL shift to state 67
-- On FALSE shift to state 68
-- On EXISTS shift to state 69
-- On term_sub_ shift to state 70
-- On term_arg_ shift to state 71
-- On term_arg shift to state 72
-- On term_ shift to state 74
-- On term shift to state 77
-- On quant shift to state 78
-- On mk_term(term_arg_) shift to state 90
-- On mk_term(term_) shift to state 91
-- On ident shift to state 92
## Reductions:

State 77:
## Known stack suffix:
## term TIMES term
## LR(1) items:
term_ -> term . ARROW term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . LRARROW term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . OR term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . AND term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . CMP term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . DIV term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . MOD term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . PLUS term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . MINUS term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . TIMES term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term TIMES term . [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
## Transitions:
## Reductions:
-- On TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND
--   reduce production term_ -> term TIMES term

State 78:
## Known stack suffix:
## quant
## LR(1) items:
term_ -> quant . comma_list1(ident) DOT term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
## Transitions:
-- On IDENT shift to state 14
-- On separated_nonempty_list(COMMA,ident) shift to state 79
-- On ident shift to state 80
-- On comma_list1(ident) shift to state 83
## Reductions:

State 79:
## Known stack suffix:
## separated_nonempty_list(COMMA,ident)
## LR(1) items:
comma_list1(ident) -> separated_nonempty_list(COMMA,ident) . [ DOT ]
## Transitions:
## Reductions:
-- On DOT
--   reduce production comma_list1(ident) -> separated_nonempty_list(COMMA,ident)

State 80:
## Known stack suffix:
## ident
## LR(1) items:
separated_nonempty_list(COMMA,ident) -> ident . [ RIGHTPAR NEWLINE DOT ]
separated_nonempty_list(COMMA,ident) -> ident . COMMA separated_nonempty_list(COMMA,ident) [ RIGHTPAR NEWLINE DOT ]
## Transitions:
-- On COMMA shift to state 81
## Reductions:
-- On RIGHTPAR NEWLINE DOT
--   reduce production separated_nonempty_list(COMMA,ident) -> ident

State 81:
## Known stack suffix:
## ident COMMA
## LR(1) items:
separated_nonempty_list(COMMA,ident) -> ident COMMA . separated_nonempty_list(COMMA,ident) [ RIGHTPAR NEWLINE DOT ]
## Transitions:
-- On IDENT shift to state 14
-- On separated_nonempty_list(COMMA,ident) shift to state 82
-- On ident shift to state 80
## Reductions:

State 82:
## Known stack suffix:
## ident COMMA separated_nonempty_list(COMMA,ident)
## LR(1) items:
separated_nonempty_list(COMMA,ident) -> ident COMMA separated_nonempty_list(COMMA,ident) . [ RIGHTPAR NEWLINE DOT ]
## Transitions:
## Reductions:
-- On RIGHTPAR NEWLINE DOT
--   reduce production separated_nonempty_list(COMMA,ident) -> ident COMMA separated_nonempty_list(COMMA,ident)

State 83:
## Known stack suffix:
## quant comma_list1(ident)
## LR(1) items:
term_ -> quant comma_list1(ident) . DOT term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
## Transitions:
-- On DOT shift to state 84
## Reductions:

State 84:
## Known stack suffix:
## quant comma_list1(ident) DOT
## LR(1) items:
term_ -> quant comma_list1(ident) DOT . term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
## Transitions:
-- On TRUE shift to state 57
-- On NOT shift to state 58
-- On NONE shift to state 59
-- On MINUS shift to state 60
-- On LET shift to state 61
-- On LEFTPAR shift to state 64
-- On INTEGER shift to state 65
-- On IF shift to state 66
-- On IDENT shift to state 14
-- On FORALL shift to state 67
-- On FALSE shift to state 68
-- On EXISTS shift to state 69
-- On term_sub_ shift to state 70
-- On term_arg_ shift to state 71
-- On term_arg shift to state 72
-- On term_ shift to state 74
-- On term shift to state 85
-- On quant shift to state 78
-- On mk_term(term_arg_) shift to state 90
-- On mk_term(term_) shift to state 91
-- On ident shift to state 92
## Reductions:

State 85:
## Known stack suffix:
## quant comma_list1(ident) DOT term
## LR(1) items:
term_ -> term . ARROW term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . LRARROW term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . OR term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . AND term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . CMP term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . DIV term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . MOD term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . PLUS term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . MINUS term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . TIMES term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> quant comma_list1(ident) DOT term . [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
## Transitions:
-- On TIMES shift to state 76
-- On PLUS shift to state 86
-- On OR shift to state 95
-- On MOD shift to state 88
-- On MINUS shift to state 97
-- On LRARROW shift to state 105
-- On DIV shift to state 99
-- On CMP shift to state 101
-- On ARROW shift to state 107
-- On AND shift to state 103
## Reductions:
-- On THEN RIGHTSQ RIGHTPAR NEWLINE LARROW IN ELSE COMMA
--   reduce production term_ -> quant comma_list1(ident) DOT term

State 86:
## Known stack suffix:
## term PLUS
## LR(1) items:
term_ -> term PLUS . term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
## Transitions:
-- On TRUE shift to state 57
-- On NOT shift to state 58
-- On NONE shift to state 59
-- On MINUS shift to state 60
-- On LET shift to state 61
-- On LEFTPAR shift to state 64
-- On INTEGER shift to state 65
-- On IF shift to state 66
-- On IDENT shift to state 14
-- On FORALL shift to state 67
-- On FALSE shift to state 68
-- On EXISTS shift to state 69
-- On term_sub_ shift to state 70
-- On term_arg_ shift to state 71
-- On term_arg shift to state 72
-- On term_ shift to state 74
-- On term shift to state 87
-- On quant shift to state 78
-- On mk_term(term_arg_) shift to state 90
-- On mk_term(term_) shift to state 91
-- On ident shift to state 92
## Reductions:

State 87:
## Known stack suffix:
## term PLUS term
## LR(1) items:
term_ -> term . ARROW term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . LRARROW term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . OR term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . AND term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . CMP term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . DIV term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . MOD term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . PLUS term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term PLUS term . [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . MINUS term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . TIMES term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
## Transitions:
-- On TIMES shift to state 76
-- On MOD shift to state 88
-- On DIV shift to state 99
## Reductions:
-- On THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MINUS LRARROW LARROW IN ELSE COMMA CMP ARROW AND
--   reduce production term_ -> term PLUS term

State 88:
## Known stack suffix:
## term MOD
## LR(1) items:
term_ -> term MOD . term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
## Transitions:
-- On TRUE shift to state 57
-- On NOT shift to state 58
-- On NONE shift to state 59
-- On MINUS shift to state 60
-- On LET shift to state 61
-- On LEFTPAR shift to state 64
-- On INTEGER shift to state 65
-- On IF shift to state 66
-- On IDENT shift to state 14
-- On FORALL shift to state 67
-- On FALSE shift to state 68
-- On EXISTS shift to state 69
-- On term_sub_ shift to state 70
-- On term_arg_ shift to state 71
-- On term_arg shift to state 72
-- On term_ shift to state 74
-- On term shift to state 89
-- On quant shift to state 78
-- On mk_term(term_arg_) shift to state 90
-- On mk_term(term_) shift to state 91
-- On ident shift to state 92
## Reductions:

State 89:
## Known stack suffix:
## term MOD term
## LR(1) items:
term_ -> term . ARROW term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . LRARROW term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . OR term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . AND term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . CMP term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . DIV term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . MOD term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term MOD term . [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . PLUS term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . MINUS term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . TIMES term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
## Transitions:
## Reductions:
-- On TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND
--   reduce production term_ -> term MOD term

State 90:
## Known stack suffix:
## mk_term(term_arg_)
## LR(1) items:
term_arg -> mk_term(term_arg_) . [ LEFTSQ ]
## Transitions:
## Reductions:
-- On LEFTSQ
--   reduce production term_arg -> mk_term(term_arg_)

State 91:
## Known stack suffix:
## mk_term(term_)
## LR(1) items:
term -> mk_term(term_) . [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
## Transitions:
## Reductions:
-- On TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND
--   reduce production term -> mk_term(term_)

State 92:
## Known stack suffix:
## ident
## LR(1) items:
term_ -> ident . LEFTPAR loption(separated_nonempty_list(COMMA,term)) RIGHTPAR [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_arg_ -> ident . [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LEFTSQ LARROW IN ELSE DIV COMMA CMP ARROW AND ]
## Transitions:
-- On LEFTPAR shift to state 93
## Reductions:
-- On TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LEFTSQ LARROW IN ELSE DIV COMMA CMP ARROW AND
--   reduce production term_arg_ -> ident

State 93:
## Known stack suffix:
## ident LEFTPAR
## LR(1) items:
term_ -> ident LEFTPAR . loption(separated_nonempty_list(COMMA,term)) RIGHTPAR [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
## Transitions:
-- On TRUE shift to state 57
-- On NOT shift to state 58
-- On NONE shift to state 59
-- On MINUS shift to state 60
-- On LET shift to state 61
-- On LEFTPAR shift to state 64
-- On INTEGER shift to state 65
-- On IF shift to state 66
-- On IDENT shift to state 14
-- On FORALL shift to state 67
-- On FALSE shift to state 68
-- On EXISTS shift to state 69
-- On term_sub_ shift to state 70
-- On term_arg_ shift to state 71
-- On term_arg shift to state 72
-- On term_ shift to state 74
-- On term shift to state 94
-- On separated_nonempty_list(COMMA,term) shift to state 111
-- On quant shift to state 78
-- On mk_term(term_arg_) shift to state 90
-- On mk_term(term_) shift to state 91
-- On loption(separated_nonempty_list(COMMA,term)) shift to state 112
-- On ident shift to state 92
## Reductions:
-- On RIGHTPAR
--   reduce production loption(separated_nonempty_list(COMMA,term)) ->

State 94:
## Known stack suffix:
## term
## LR(1) items:
separated_nonempty_list(COMMA,term) -> term . [ RIGHTPAR NEWLINE ]
separated_nonempty_list(COMMA,term) -> term . COMMA separated_nonempty_list(COMMA,term) [ RIGHTPAR NEWLINE ]
term_ -> term . ARROW term [ TIMES RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW DIV COMMA CMP ARROW AND ]
term_ -> term . LRARROW term [ TIMES RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW DIV COMMA CMP ARROW AND ]
term_ -> term . OR term [ TIMES RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW DIV COMMA CMP ARROW AND ]
term_ -> term . AND term [ TIMES RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW DIV COMMA CMP ARROW AND ]
term_ -> term . CMP term [ TIMES RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW DIV COMMA CMP ARROW AND ]
term_ -> term . DIV term [ TIMES RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW DIV COMMA CMP ARROW AND ]
term_ -> term . MOD term [ TIMES RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW DIV COMMA CMP ARROW AND ]
term_ -> term . PLUS term [ TIMES RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW DIV COMMA CMP ARROW AND ]
term_ -> term . MINUS term [ TIMES RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW DIV COMMA CMP ARROW AND ]
term_ -> term . TIMES term [ TIMES RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW DIV COMMA CMP ARROW AND ]
## Transitions:
-- On TIMES shift to state 76
-- On PLUS shift to state 86
-- On OR shift to state 95
-- On MOD shift to state 88
-- On MINUS shift to state 97
-- On LRARROW shift to state 105
-- On DIV shift to state 99
-- On COMMA shift to state 109
-- On CMP shift to state 101
-- On ARROW shift to state 107
-- On AND shift to state 103
## Reductions:
-- On RIGHTPAR NEWLINE
--   reduce production separated_nonempty_list(COMMA,term) -> term

State 95:
## Known stack suffix:
## term OR
## LR(1) items:
term_ -> term OR . term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
## Transitions:
-- On TRUE shift to state 57
-- On NOT shift to state 58
-- On NONE shift to state 59
-- On MINUS shift to state 60
-- On LET shift to state 61
-- On LEFTPAR shift to state 64
-- On INTEGER shift to state 65
-- On IF shift to state 66
-- On IDENT shift to state 14
-- On FORALL shift to state 67
-- On FALSE shift to state 68
-- On EXISTS shift to state 69
-- On term_sub_ shift to state 70
-- On term_arg_ shift to state 71
-- On term_arg shift to state 72
-- On term_ shift to state 74
-- On term shift to state 96
-- On quant shift to state 78
-- On mk_term(term_arg_) shift to state 90
-- On mk_term(term_) shift to state 91
-- On ident shift to state 92
## Reductions:

State 96:
## Known stack suffix:
## term OR term
## LR(1) items:
term_ -> term . ARROW term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . LRARROW term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . OR term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term OR term . [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . AND term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . CMP term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . DIV term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . MOD term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . PLUS term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . MINUS term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . TIMES term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
## Transitions:
-- On TIMES shift to state 76
-- On PLUS shift to state 86
-- On OR shift to state 95
-- On MOD shift to state 88
-- On MINUS shift to state 97
-- On DIV shift to state 99
-- On CMP shift to state 101
-- On AND shift to state 103
## Reductions:
-- On THEN RIGHTSQ RIGHTPAR NEWLINE LRARROW LARROW IN ELSE COMMA ARROW
--   reduce production term_ -> term OR term

State 97:
## Known stack suffix:
## term MINUS
## LR(1) items:
term_ -> term MINUS . term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
## Transitions:
-- On TRUE shift to state 57
-- On NOT shift to state 58
-- On NONE shift to state 59
-- On MINUS shift to state 60
-- On LET shift to state 61
-- On LEFTPAR shift to state 64
-- On INTEGER shift to state 65
-- On IF shift to state 66
-- On IDENT shift to state 14
-- On FORALL shift to state 67
-- On FALSE shift to state 68
-- On EXISTS shift to state 69
-- On term_sub_ shift to state 70
-- On term_arg_ shift to state 71
-- On term_arg shift to state 72
-- On term_ shift to state 74
-- On term shift to state 98
-- On quant shift to state 78
-- On mk_term(term_arg_) shift to state 90
-- On mk_term(term_) shift to state 91
-- On ident shift to state 92
## Reductions:

State 98:
## Known stack suffix:
## term MINUS term
## LR(1) items:
term_ -> term . ARROW term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . LRARROW term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . OR term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . AND term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . CMP term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . DIV term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . MOD term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . PLUS term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . MINUS term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term MINUS term . [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . TIMES term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
## Transitions:
-- On TIMES shift to state 76
-- On MOD shift to state 88
-- On DIV shift to state 99
## Reductions:
-- On THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MINUS LRARROW LARROW IN ELSE COMMA CMP ARROW AND
--   reduce production term_ -> term MINUS term

State 99:
## Known stack suffix:
## term DIV
## LR(1) items:
term_ -> term DIV . term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
## Transitions:
-- On TRUE shift to state 57
-- On NOT shift to state 58
-- On NONE shift to state 59
-- On MINUS shift to state 60
-- On LET shift to state 61
-- On LEFTPAR shift to state 64
-- On INTEGER shift to state 65
-- On IF shift to state 66
-- On IDENT shift to state 14
-- On FORALL shift to state 67
-- On FALSE shift to state 68
-- On EXISTS shift to state 69
-- On term_sub_ shift to state 70
-- On term_arg_ shift to state 71
-- On term_arg shift to state 72
-- On term_ shift to state 74
-- On term shift to state 100
-- On quant shift to state 78
-- On mk_term(term_arg_) shift to state 90
-- On mk_term(term_) shift to state 91
-- On ident shift to state 92
## Reductions:

State 100:
## Known stack suffix:
## term DIV term
## LR(1) items:
term_ -> term . ARROW term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . LRARROW term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . OR term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . AND term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . CMP term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . DIV term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term DIV term . [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . MOD term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . PLUS term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . MINUS term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . TIMES term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
## Transitions:
## Reductions:
-- On TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND
--   reduce production term_ -> term DIV term

State 101:
## Known stack suffix:
## term CMP
## LR(1) items:
term_ -> term CMP . term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
## Transitions:
-- On TRUE shift to state 57
-- On NOT shift to state 58
-- On NONE shift to state 59
-- On MINUS shift to state 60
-- On LET shift to state 61
-- On LEFTPAR shift to state 64
-- On INTEGER shift to state 65
-- On IF shift to state 66
-- On IDENT shift to state 14
-- On FORALL shift to state 67
-- On FALSE shift to state 68
-- On EXISTS shift to state 69
-- On term_sub_ shift to state 70
-- On term_arg_ shift to state 71
-- On term_arg shift to state 72
-- On term_ shift to state 74
-- On term shift to state 102
-- On quant shift to state 78
-- On mk_term(term_arg_) shift to state 90
-- On mk_term(term_) shift to state 91
-- On ident shift to state 92
## Reductions:

State 102:
## Known stack suffix:
## term CMP term
## LR(1) items:
term_ -> term . ARROW term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . LRARROW term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . OR term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . AND term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . CMP term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term CMP term . [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . DIV term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . MOD term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . PLUS term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . MINUS term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . TIMES term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
## Transitions:
-- On TIMES shift to state 76
-- On PLUS shift to state 86
-- On MOD shift to state 88
-- On MINUS shift to state 97
-- On DIV shift to state 99
-- On CMP shift to state 101
## Reductions:
-- On THEN RIGHTSQ RIGHTPAR OR NEWLINE LRARROW LARROW IN ELSE COMMA ARROW AND
--   reduce production term_ -> term CMP term

State 103:
## Known stack suffix:
## term AND
## LR(1) items:
term_ -> term AND . term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
## Transitions:
-- On TRUE shift to state 57
-- On NOT shift to state 58
-- On NONE shift to state 59
-- On MINUS shift to state 60
-- On LET shift to state 61
-- On LEFTPAR shift to state 64
-- On INTEGER shift to state 65
-- On IF shift to state 66
-- On IDENT shift to state 14
-- On FORALL shift to state 67
-- On FALSE shift to state 68
-- On EXISTS shift to state 69
-- On term_sub_ shift to state 70
-- On term_arg_ shift to state 71
-- On term_arg shift to state 72
-- On term_ shift to state 74
-- On term shift to state 104
-- On quant shift to state 78
-- On mk_term(term_arg_) shift to state 90
-- On mk_term(term_) shift to state 91
-- On ident shift to state 92
## Reductions:

State 104:
## Known stack suffix:
## term AND term
## LR(1) items:
term_ -> term . ARROW term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . LRARROW term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . OR term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . AND term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term AND term . [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . CMP term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . DIV term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . MOD term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . PLUS term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . MINUS term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . TIMES term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
## Transitions:
-- On TIMES shift to state 76
-- On PLUS shift to state 86
-- On MOD shift to state 88
-- On MINUS shift to state 97
-- On DIV shift to state 99
-- On CMP shift to state 101
-- On AND shift to state 103
## Reductions:
-- On THEN RIGHTSQ RIGHTPAR OR NEWLINE LRARROW LARROW IN ELSE COMMA ARROW
--   reduce production term_ -> term AND term

State 105:
## Known stack suffix:
## term LRARROW
## LR(1) items:
term_ -> term LRARROW . term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
## Transitions:
-- On TRUE shift to state 57
-- On NOT shift to state 58
-- On NONE shift to state 59
-- On MINUS shift to state 60
-- On LET shift to state 61
-- On LEFTPAR shift to state 64
-- On INTEGER shift to state 65
-- On IF shift to state 66
-- On IDENT shift to state 14
-- On FORALL shift to state 67
-- On FALSE shift to state 68
-- On EXISTS shift to state 69
-- On term_sub_ shift to state 70
-- On term_arg_ shift to state 71
-- On term_arg shift to state 72
-- On term_ shift to state 74
-- On term shift to state 106
-- On quant shift to state 78
-- On mk_term(term_arg_) shift to state 90
-- On mk_term(term_) shift to state 91
-- On ident shift to state 92
## Reductions:

State 106:
## Known stack suffix:
## term LRARROW term
## LR(1) items:
term_ -> term . ARROW term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . LRARROW term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term LRARROW term . [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . OR term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . AND term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . CMP term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . DIV term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . MOD term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . PLUS term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . MINUS term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . TIMES term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
## Transitions:
-- On TIMES shift to state 76
-- On PLUS shift to state 86
-- On OR shift to state 95
-- On MOD shift to state 88
-- On MINUS shift to state 97
-- On LRARROW shift to state 105
-- On DIV shift to state 99
-- On CMP shift to state 101
-- On ARROW shift to state 107
-- On AND shift to state 103
## Reductions:
-- On THEN RIGHTSQ RIGHTPAR NEWLINE LARROW IN ELSE COMMA
--   reduce production term_ -> term LRARROW term

State 107:
## Known stack suffix:
## term ARROW
## LR(1) items:
term_ -> term ARROW . term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
## Transitions:
-- On TRUE shift to state 57
-- On NOT shift to state 58
-- On NONE shift to state 59
-- On MINUS shift to state 60
-- On LET shift to state 61
-- On LEFTPAR shift to state 64
-- On INTEGER shift to state 65
-- On IF shift to state 66
-- On IDENT shift to state 14
-- On FORALL shift to state 67
-- On FALSE shift to state 68
-- On EXISTS shift to state 69
-- On term_sub_ shift to state 70
-- On term_arg_ shift to state 71
-- On term_arg shift to state 72
-- On term_ shift to state 74
-- On term shift to state 108
-- On quant shift to state 78
-- On mk_term(term_arg_) shift to state 90
-- On mk_term(term_) shift to state 91
-- On ident shift to state 92
## Reductions:

State 108:
## Known stack suffix:
## term ARROW term
## LR(1) items:
term_ -> term . ARROW term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term ARROW term . [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . LRARROW term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . OR term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . AND term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . CMP term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . DIV term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . MOD term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . PLUS term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . MINUS term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . TIMES term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
## Transitions:
-- On TIMES shift to state 76
-- On PLUS shift to state 86
-- On OR shift to state 95
-- On MOD shift to state 88
-- On MINUS shift to state 97
-- On LRARROW shift to state 105
-- On DIV shift to state 99
-- On CMP shift to state 101
-- On ARROW shift to state 107
-- On AND shift to state 103
## Reductions:
-- On THEN RIGHTSQ RIGHTPAR NEWLINE LARROW IN ELSE COMMA
--   reduce production term_ -> term ARROW term

State 109:
## Known stack suffix:
## term COMMA
## LR(1) items:
separated_nonempty_list(COMMA,term) -> term COMMA . separated_nonempty_list(COMMA,term) [ RIGHTPAR NEWLINE ]
## Transitions:
-- On TRUE shift to state 57
-- On NOT shift to state 58
-- On NONE shift to state 59
-- On MINUS shift to state 60
-- On LET shift to state 61
-- On LEFTPAR shift to state 64
-- On INTEGER shift to state 65
-- On IF shift to state 66
-- On IDENT shift to state 14
-- On FORALL shift to state 67
-- On FALSE shift to state 68
-- On EXISTS shift to state 69
-- On term_sub_ shift to state 70
-- On term_arg_ shift to state 71
-- On term_arg shift to state 72
-- On term_ shift to state 74
-- On term shift to state 94
-- On separated_nonempty_list(COMMA,term) shift to state 110
-- On quant shift to state 78
-- On mk_term(term_arg_) shift to state 90
-- On mk_term(term_) shift to state 91
-- On ident shift to state 92
## Reductions:

State 110:
## Known stack suffix:
## term COMMA separated_nonempty_list(COMMA,term)
## LR(1) items:
separated_nonempty_list(COMMA,term) -> term COMMA separated_nonempty_list(COMMA,term) . [ RIGHTPAR NEWLINE ]
## Transitions:
## Reductions:
-- On RIGHTPAR NEWLINE
--   reduce production separated_nonempty_list(COMMA,term) -> term COMMA separated_nonempty_list(COMMA,term)

State 111:
## Known stack suffix:
## separated_nonempty_list(COMMA,term)
## LR(1) items:
loption(separated_nonempty_list(COMMA,term)) -> separated_nonempty_list(COMMA,term) . [ RIGHTPAR ]
## Transitions:
## Reductions:
-- On RIGHTPAR
--   reduce production loption(separated_nonempty_list(COMMA,term)) -> separated_nonempty_list(COMMA,term)

State 112:
## Known stack suffix:
## ident LEFTPAR loption(separated_nonempty_list(COMMA,term))
## LR(1) items:
term_ -> ident LEFTPAR loption(separated_nonempty_list(COMMA,term)) . RIGHTPAR [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
## Transitions:
-- On RIGHTPAR shift to state 113
## Reductions:

State 113:
## Known stack suffix:
## ident LEFTPAR loption(separated_nonempty_list(COMMA,term)) RIGHTPAR
## LR(1) items:
term_ -> ident LEFTPAR loption(separated_nonempty_list(COMMA,term)) RIGHTPAR . [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
## Transitions:
## Reductions:
-- On TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND
--   reduce production term_ -> ident LEFTPAR loption(separated_nonempty_list(COMMA,term)) RIGHTPAR

State 114:
## Known stack suffix:
## term_arg LEFTSQ term RIGHTSQ
## LR(1) items:
term_sub_ -> term_arg LEFTSQ term RIGHTSQ . [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LEFTSQ LARROW IN ELSE DIV COMMA CMP ARROW AND ]
## Transitions:
## Reductions:
-- On TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LEFTSQ LARROW IN ELSE DIV COMMA CMP ARROW AND
--   reduce production term_sub_ -> term_arg LEFTSQ term RIGHTSQ

State 115:
## Known stack suffix:
## term_arg LEFTSQ term LARROW
## LR(1) items:
term_sub_ -> term_arg LEFTSQ term LARROW . term RIGHTSQ [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LEFTSQ LARROW IN ELSE DIV COMMA CMP ARROW AND ]
## Transitions:
-- On TRUE shift to state 57
-- On NOT shift to state 58
-- On NONE shift to state 59
-- On MINUS shift to state 60
-- On LET shift to state 61
-- On LEFTPAR shift to state 64
-- On INTEGER shift to state 65
-- On IF shift to state 66
-- On IDENT shift to state 14
-- On FORALL shift to state 67
-- On FALSE shift to state 68
-- On EXISTS shift to state 69
-- On term_sub_ shift to state 70
-- On term_arg_ shift to state 71
-- On term_arg shift to state 72
-- On term_ shift to state 74
-- On term shift to state 116
-- On quant shift to state 78
-- On mk_term(term_arg_) shift to state 90
-- On mk_term(term_) shift to state 91
-- On ident shift to state 92
## Reductions:

State 116:
## Known stack suffix:
## term_arg LEFTSQ term LARROW term
## LR(1) items:
term_ -> term . ARROW term [ TIMES RIGHTSQ PLUS OR MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . LRARROW term [ TIMES RIGHTSQ PLUS OR MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . OR term [ TIMES RIGHTSQ PLUS OR MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . AND term [ TIMES RIGHTSQ PLUS OR MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . CMP term [ TIMES RIGHTSQ PLUS OR MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . DIV term [ TIMES RIGHTSQ PLUS OR MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . MOD term [ TIMES RIGHTSQ PLUS OR MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . PLUS term [ TIMES RIGHTSQ PLUS OR MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . MINUS term [ TIMES RIGHTSQ PLUS OR MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . TIMES term [ TIMES RIGHTSQ PLUS OR MOD MINUS LRARROW DIV CMP ARROW AND ]
term_sub_ -> term_arg LEFTSQ term LARROW term . RIGHTSQ [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LEFTSQ LARROW IN ELSE DIV COMMA CMP ARROW AND ]
## Transitions:
-- On TIMES shift to state 76
-- On RIGHTSQ shift to state 117
-- On PLUS shift to state 86
-- On OR shift to state 95
-- On MOD shift to state 88
-- On MINUS shift to state 97
-- On LRARROW shift to state 105
-- On DIV shift to state 99
-- On CMP shift to state 101
-- On ARROW shift to state 107
-- On AND shift to state 103
## Reductions:

State 117:
## Known stack suffix:
## term_arg LEFTSQ term LARROW term RIGHTSQ
## LR(1) items:
term_sub_ -> term_arg LEFTSQ term LARROW term RIGHTSQ . [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LEFTSQ LARROW IN ELSE DIV COMMA CMP ARROW AND ]
## Transitions:
## Reductions:
-- On TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LEFTSQ LARROW IN ELSE DIV COMMA CMP ARROW AND
--   reduce production term_sub_ -> term_arg LEFTSQ term LARROW term RIGHTSQ

State 118:
## Known stack suffix:
## IF term
## LR(1) items:
term_ -> term . ARROW term [ TIMES THEN PLUS OR MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . LRARROW term [ TIMES THEN PLUS OR MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . OR term [ TIMES THEN PLUS OR MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . AND term [ TIMES THEN PLUS OR MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . CMP term [ TIMES THEN PLUS OR MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . DIV term [ TIMES THEN PLUS OR MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . MOD term [ TIMES THEN PLUS OR MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . PLUS term [ TIMES THEN PLUS OR MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . MINUS term [ TIMES THEN PLUS OR MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . TIMES term [ TIMES THEN PLUS OR MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> IF term . THEN term ELSE term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
## Transitions:
-- On TIMES shift to state 76
-- On THEN shift to state 119
-- On PLUS shift to state 86
-- On OR shift to state 95
-- On MOD shift to state 88
-- On MINUS shift to state 97
-- On LRARROW shift to state 105
-- On DIV shift to state 99
-- On CMP shift to state 101
-- On ARROW shift to state 107
-- On AND shift to state 103
## Reductions:

State 119:
## Known stack suffix:
## IF term THEN
## LR(1) items:
term_ -> IF term THEN . term ELSE term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
## Transitions:
-- On TRUE shift to state 57
-- On NOT shift to state 58
-- On NONE shift to state 59
-- On MINUS shift to state 60
-- On LET shift to state 61
-- On LEFTPAR shift to state 64
-- On INTEGER shift to state 65
-- On IF shift to state 66
-- On IDENT shift to state 14
-- On FORALL shift to state 67
-- On FALSE shift to state 68
-- On EXISTS shift to state 69
-- On term_sub_ shift to state 70
-- On term_arg_ shift to state 71
-- On term_arg shift to state 72
-- On term_ shift to state 74
-- On term shift to state 120
-- On quant shift to state 78
-- On mk_term(term_arg_) shift to state 90
-- On mk_term(term_) shift to state 91
-- On ident shift to state 92
## Reductions:

State 120:
## Known stack suffix:
## IF term THEN term
## LR(1) items:
term_ -> term . ARROW term [ TIMES PLUS OR MOD MINUS LRARROW ELSE DIV CMP ARROW AND ]
term_ -> term . LRARROW term [ TIMES PLUS OR MOD MINUS LRARROW ELSE DIV CMP ARROW AND ]
term_ -> term . OR term [ TIMES PLUS OR MOD MINUS LRARROW ELSE DIV CMP ARROW AND ]
term_ -> term . AND term [ TIMES PLUS OR MOD MINUS LRARROW ELSE DIV CMP ARROW AND ]
term_ -> term . CMP term [ TIMES PLUS OR MOD MINUS LRARROW ELSE DIV CMP ARROW AND ]
term_ -> term . DIV term [ TIMES PLUS OR MOD MINUS LRARROW ELSE DIV CMP ARROW AND ]
term_ -> term . MOD term [ TIMES PLUS OR MOD MINUS LRARROW ELSE DIV CMP ARROW AND ]
term_ -> term . PLUS term [ TIMES PLUS OR MOD MINUS LRARROW ELSE DIV CMP ARROW AND ]
term_ -> term . MINUS term [ TIMES PLUS OR MOD MINUS LRARROW ELSE DIV CMP ARROW AND ]
term_ -> term . TIMES term [ TIMES PLUS OR MOD MINUS LRARROW ELSE DIV CMP ARROW AND ]
term_ -> IF term THEN term . ELSE term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
## Transitions:
-- On TIMES shift to state 76
-- On PLUS shift to state 86
-- On OR shift to state 95
-- On MOD shift to state 88
-- On MINUS shift to state 97
-- On LRARROW shift to state 105
-- On ELSE shift to state 121
-- On DIV shift to state 99
-- On CMP shift to state 101
-- On ARROW shift to state 107
-- On AND shift to state 103
## Reductions:

State 121:
## Known stack suffix:
## IF term THEN term ELSE
## LR(1) items:
term_ -> IF term THEN term ELSE . term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
## Transitions:
-- On TRUE shift to state 57
-- On NOT shift to state 58
-- On NONE shift to state 59
-- On MINUS shift to state 60
-- On LET shift to state 61
-- On LEFTPAR shift to state 64
-- On INTEGER shift to state 65
-- On IF shift to state 66
-- On IDENT shift to state 14
-- On FORALL shift to state 67
-- On FALSE shift to state 68
-- On EXISTS shift to state 69
-- On term_sub_ shift to state 70
-- On term_arg_ shift to state 71
-- On term_arg shift to state 72
-- On term_ shift to state 74
-- On term shift to state 122
-- On quant shift to state 78
-- On mk_term(term_arg_) shift to state 90
-- On mk_term(term_) shift to state 91
-- On ident shift to state 92
## Reductions:

State 122:
## Known stack suffix:
## IF term THEN term ELSE term
## LR(1) items:
term_ -> term . ARROW term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . LRARROW term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . OR term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . AND term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . CMP term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . DIV term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . MOD term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . PLUS term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . MINUS term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . TIMES term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> IF term THEN term ELSE term . [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
## Transitions:
-- On TIMES shift to state 76
-- On PLUS shift to state 86
-- On OR shift to state 95
-- On MOD shift to state 88
-- On MINUS shift to state 97
-- On LRARROW shift to state 105
-- On DIV shift to state 99
-- On CMP shift to state 101
-- On ARROW shift to state 107
-- On AND shift to state 103
## Reductions:
-- On THEN RIGHTSQ RIGHTPAR NEWLINE LARROW IN ELSE COMMA
--   reduce production term_ -> IF term THEN term ELSE term

State 123:
## Known stack suffix:
## LEFTPAR term
## LR(1) items:
term_ -> term . ARROW term [ TIMES RIGHTPAR PLUS OR MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . LRARROW term [ TIMES RIGHTPAR PLUS OR MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . OR term [ TIMES RIGHTPAR PLUS OR MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . AND term [ TIMES RIGHTPAR PLUS OR MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . CMP term [ TIMES RIGHTPAR PLUS OR MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . DIV term [ TIMES RIGHTPAR PLUS OR MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . MOD term [ TIMES RIGHTPAR PLUS OR MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . PLUS term [ TIMES RIGHTPAR PLUS OR MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . MINUS term [ TIMES RIGHTPAR PLUS OR MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . TIMES term [ TIMES RIGHTPAR PLUS OR MOD MINUS LRARROW DIV CMP ARROW AND ]
term_sub_ -> LEFTPAR term . RIGHTPAR [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LEFTSQ LARROW IN ELSE DIV COMMA CMP ARROW AND ]
## Transitions:
-- On TIMES shift to state 76
-- On RIGHTPAR shift to state 124
-- On PLUS shift to state 86
-- On OR shift to state 95
-- On MOD shift to state 88
-- On MINUS shift to state 97
-- On LRARROW shift to state 105
-- On DIV shift to state 99
-- On CMP shift to state 101
-- On ARROW shift to state 107
-- On AND shift to state 103
## Reductions:

State 124:
## Known stack suffix:
## LEFTPAR term RIGHTPAR
## LR(1) items:
term_sub_ -> LEFTPAR term RIGHTPAR . [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LEFTSQ LARROW IN ELSE DIV COMMA CMP ARROW AND ]
## Transitions:
## Reductions:
-- On TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LEFTSQ LARROW IN ELSE DIV COMMA CMP ARROW AND
--   reduce production term_sub_ -> LEFTPAR term RIGHTPAR

State 125:
## Known stack suffix:
## LET ident EQUAL term
## LR(1) items:
term_ -> term . ARROW term [ TIMES PLUS OR MOD MINUS LRARROW IN DIV CMP ARROW AND ]
term_ -> term . LRARROW term [ TIMES PLUS OR MOD MINUS LRARROW IN DIV CMP ARROW AND ]
term_ -> term . OR term [ TIMES PLUS OR MOD MINUS LRARROW IN DIV CMP ARROW AND ]
term_ -> term . AND term [ TIMES PLUS OR MOD MINUS LRARROW IN DIV CMP ARROW AND ]
term_ -> term . CMP term [ TIMES PLUS OR MOD MINUS LRARROW IN DIV CMP ARROW AND ]
term_ -> term . DIV term [ TIMES PLUS OR MOD MINUS LRARROW IN DIV CMP ARROW AND ]
term_ -> term . MOD term [ TIMES PLUS OR MOD MINUS LRARROW IN DIV CMP ARROW AND ]
term_ -> term . PLUS term [ TIMES PLUS OR MOD MINUS LRARROW IN DIV CMP ARROW AND ]
term_ -> term . MINUS term [ TIMES PLUS OR MOD MINUS LRARROW IN DIV CMP ARROW AND ]
term_ -> term . TIMES term [ TIMES PLUS OR MOD MINUS LRARROW IN DIV CMP ARROW AND ]
term_ -> LET ident EQUAL term . IN term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
## Transitions:
-- On TIMES shift to state 76
-- On PLUS shift to state 86
-- On OR shift to state 95
-- On MOD shift to state 88
-- On MINUS shift to state 97
-- On LRARROW shift to state 105
-- On IN shift to state 126
-- On DIV shift to state 99
-- On CMP shift to state 101
-- On ARROW shift to state 107
-- On AND shift to state 103
## Reductions:

State 126:
## Known stack suffix:
## LET ident EQUAL term IN
## LR(1) items:
term_ -> LET ident EQUAL term IN . term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
## Transitions:
-- On TRUE shift to state 57
-- On NOT shift to state 58
-- On NONE shift to state 59
-- On MINUS shift to state 60
-- On LET shift to state 61
-- On LEFTPAR shift to state 64
-- On INTEGER shift to state 65
-- On IF shift to state 66
-- On IDENT shift to state 14
-- On FORALL shift to state 67
-- On FALSE shift to state 68
-- On EXISTS shift to state 69
-- On term_sub_ shift to state 70
-- On term_arg_ shift to state 71
-- On term_arg shift to state 72
-- On term_ shift to state 74
-- On term shift to state 127
-- On quant shift to state 78
-- On mk_term(term_arg_) shift to state 90
-- On mk_term(term_) shift to state 91
-- On ident shift to state 92
## Reductions:

State 127:
## Known stack suffix:
## LET ident EQUAL term IN term
## LR(1) items:
term_ -> term . ARROW term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . LRARROW term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . OR term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . AND term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . CMP term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . DIV term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . MOD term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . PLUS term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . MINUS term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . TIMES term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> LET ident EQUAL term IN term . [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
## Transitions:
-- On TIMES shift to state 76
-- On PLUS shift to state 86
-- On OR shift to state 95
-- On MOD shift to state 88
-- On MINUS shift to state 97
-- On LRARROW shift to state 105
-- On DIV shift to state 99
-- On CMP shift to state 101
-- On ARROW shift to state 107
-- On AND shift to state 103
## Reductions:
-- On THEN RIGHTSQ RIGHTPAR NEWLINE LARROW IN ELSE COMMA
--   reduce production term_ -> LET ident EQUAL term IN term

State 128:
## Known stack suffix:
## MINUS term
## LR(1) items:
term_ -> MINUS term . [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . ARROW term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . LRARROW term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . OR term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . AND term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . CMP term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . DIV term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . MOD term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . PLUS term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . MINUS term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . TIMES term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
## Transitions:
## Reductions:
-- On TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND
--   reduce production term_ -> MINUS term

State 129:
## Known stack suffix:
## NOT term
## LR(1) items:
term_ -> NOT term . [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . ARROW term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . LRARROW term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . OR term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . AND term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . CMP term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . DIV term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . MOD term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . PLUS term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . MINUS term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
term_ -> term . TIMES term [ TIMES THEN RIGHTSQ RIGHTPAR PLUS OR NEWLINE MOD MINUS LRARROW LARROW IN ELSE DIV COMMA CMP ARROW AND ]
## Transitions:
-- On TIMES shift to state 76
-- On PLUS shift to state 86
-- On MOD shift to state 88
-- On MINUS shift to state 97
-- On DIV shift to state 99
-- On CMP shift to state 101
## Reductions:
-- On THEN RIGHTSQ RIGHTPAR OR NEWLINE LRARROW LARROW IN ELSE COMMA ARROW AND
--   reduce production term_ -> NOT term

State 130:
## Known stack suffix:
## separated_nonempty_list(COMMA,term)
## LR(1) items:
comma_list1(term) -> separated_nonempty_list(COMMA,term) . [ NEWLINE ]
## Transitions:
## Reductions:
-- On NEWLINE
--   reduce production comma_list1(term) -> separated_nonempty_list(COMMA,term)

State 131:
## Known stack suffix:
## VARIANT comma_list1(term)
## LR(1) items:
variant -> VARIANT comma_list1(term) . NEWLINE [ WHILE VARIANT TRUE STRING RETURN REQUIRES NOT NONE MINUS LEFTSQ LEFTPAR LABEL INVARIANT INTEGER IF IDENT FOR FALSE ENSURES CHECK BREAK ASSUME ASSERT ]
## Transitions:
-- On NEWLINE shift to state 132
## Reductions:

State 132:
## Known stack suffix:
## VARIANT comma_list1(term) NEWLINE
## LR(1) items:
variant -> VARIANT comma_list1(term) NEWLINE . [ WHILE VARIANT TRUE STRING RETURN REQUIRES NOT NONE MINUS LEFTSQ LEFTPAR LABEL INVARIANT INTEGER IF IDENT FOR FALSE ENSURES CHECK BREAK ASSUME ASSERT ]
## Transitions:
## Reductions:
-- On WHILE VARIANT TRUE STRING RETURN REQUIRES NOT NONE MINUS LEFTSQ LEFTPAR LABEL INVARIANT INTEGER IF IDENT FOR FALSE ENSURES CHECK BREAK ASSUME ASSERT
--   reduce production variant -> VARIANT comma_list1(term) NEWLINE

State 133:
## Known stack suffix:
## INVARIANT
## LR(1) items:
invariant -> INVARIANT . term NEWLINE [ WHILE VARIANT TRUE STRING RETURN NOT NONE MINUS LEFTSQ LEFTPAR LABEL INVARIANT INTEGER IF IDENT FOR FALSE CHECK BREAK ASSUME ASSERT ]
## Transitions:
-- On TRUE shift to state 57
-- On NOT shift to state 58
-- On NONE shift to state 59
-- On MINUS shift to state 60
-- On LET shift to state 61
-- On LEFTPAR shift to state 64
-- On INTEGER shift to state 65
-- On IF shift to state 66
-- On IDENT shift to state 14
-- On FORALL shift to state 67
-- On FALSE shift to state 68
-- On EXISTS shift to state 69
-- On term_sub_ shift to state 70
-- On term_arg_ shift to state 71
-- On term_arg shift to state 72
-- On term_ shift to state 74
-- On term shift to state 134
-- On quant shift to state 78
-- On mk_term(term_arg_) shift to state 90
-- On mk_term(term_) shift to state 91
-- On ident shift to state 92
## Reductions:

State 134:
## Known stack suffix:
## INVARIANT term
## LR(1) items:
invariant -> INVARIANT term . NEWLINE [ WHILE VARIANT TRUE STRING RETURN NOT NONE MINUS LEFTSQ LEFTPAR LABEL INVARIANT INTEGER IF IDENT FOR FALSE CHECK BREAK ASSUME ASSERT ]
term_ -> term . ARROW term [ TIMES PLUS OR NEWLINE MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . LRARROW term [ TIMES PLUS OR NEWLINE MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . OR term [ TIMES PLUS OR NEWLINE MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . AND term [ TIMES PLUS OR NEWLINE MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . CMP term [ TIMES PLUS OR NEWLINE MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . DIV term [ TIMES PLUS OR NEWLINE MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . MOD term [ TIMES PLUS OR NEWLINE MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . PLUS term [ TIMES PLUS OR NEWLINE MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . MINUS term [ TIMES PLUS OR NEWLINE MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . TIMES term [ TIMES PLUS OR NEWLINE MOD MINUS LRARROW DIV CMP ARROW AND ]
## Transitions:
-- On TIMES shift to state 76
-- On PLUS shift to state 86
-- On OR shift to state 95
-- On NEWLINE shift to state 135
-- On MOD shift to state 88
-- On MINUS shift to state 97
-- On LRARROW shift to state 105
-- On DIV shift to state 99
-- On CMP shift to state 101
-- On ARROW shift to state 107
-- On AND shift to state 103
## Reductions:

State 135:
## Known stack suffix:
## INVARIANT term NEWLINE
## LR(1) items:
invariant -> INVARIANT term NEWLINE . [ WHILE VARIANT TRUE STRING RETURN NOT NONE MINUS LEFTSQ LEFTPAR LABEL INVARIANT INTEGER IF IDENT FOR FALSE CHECK BREAK ASSUME ASSERT ]
## Transitions:
## Reductions:
-- On WHILE VARIANT TRUE STRING RETURN NOT NONE MINUS LEFTSQ LEFTPAR LABEL INVARIANT INTEGER IF IDENT FOR FALSE CHECK BREAK ASSUME ASSERT
--   reduce production invariant -> INVARIANT term NEWLINE

State 136:
## Known stack suffix:
## variant
## LR(1) items:
loop_annotation -> variant . loop_annotation [ WHILE TRUE STRING RETURN NOT NONE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FOR FALSE CHECK BREAK ASSUME ASSERT ]
## Transitions:
-- On VARIANT shift to state 56
-- On INVARIANT shift to state 133
-- On variant shift to state 136
-- On loop_annotation shift to state 137
-- On invariant shift to state 138
## Reductions:
-- On WHILE TRUE STRING RETURN NOT NONE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FOR FALSE CHECK BREAK ASSUME ASSERT
--   reduce production loop_annotation ->

State 137:
## Known stack suffix:
## variant loop_annotation
## LR(1) items:
loop_annotation -> variant loop_annotation . [ WHILE TRUE STRING RETURN NOT NONE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FOR FALSE CHECK BREAK ASSUME ASSERT ]
## Transitions:
## Reductions:
-- On WHILE TRUE STRING RETURN NOT NONE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FOR FALSE CHECK BREAK ASSUME ASSERT
--   reduce production loop_annotation -> variant loop_annotation

State 138:
## Known stack suffix:
## invariant
## LR(1) items:
loop_annotation -> invariant . loop_annotation [ WHILE TRUE STRING RETURN NOT NONE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FOR FALSE CHECK BREAK ASSUME ASSERT ]
## Transitions:
-- On VARIANT shift to state 56
-- On INVARIANT shift to state 133
-- On variant shift to state 136
-- On loop_annotation shift to state 139
-- On invariant shift to state 138
## Reductions:
-- On WHILE TRUE STRING RETURN NOT NONE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FOR FALSE CHECK BREAK ASSUME ASSERT
--   reduce production loop_annotation ->

State 139:
## Known stack suffix:
## invariant loop_annotation
## LR(1) items:
loop_annotation -> invariant loop_annotation . [ WHILE TRUE STRING RETURN NOT NONE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FOR FALSE CHECK BREAK ASSUME ASSERT ]
## Transitions:
## Reductions:
-- On WHILE TRUE STRING RETURN NOT NONE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FOR FALSE CHECK BREAK ASSUME ASSERT
--   reduce production loop_annotation -> invariant loop_annotation

State 140:
## Known stack suffix:
## NEWLINE BEGIN loop_annotation
## LR(1) items:
loop_body -> NEWLINE BEGIN loop_annotation . nonempty_list(stmt) END [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF END DEF CHECK BREAK ASSUME ASSERT ]
## Transitions:
-- On WHILE shift to state 5
-- On TRUE shift to state 6
-- On STRING shift to state 7
-- On RETURN shift to state 52
-- On NOT shift to state 8
-- On NONE shift to state 9
-- On MINUS shift to state 10
-- On LEFTSQ shift to state 11
-- On LEFTPAR shift to state 12
-- On LABEL shift to state 141
-- On INTEGER shift to state 13
-- On IF shift to state 143
-- On IDENT shift to state 14
-- On FOR shift to state 148
-- On FALSE shift to state 15
-- On CHECK shift to state 153
-- On BREAK shift to state 154
-- On ASSUME shift to state 155
-- On ASSERT shift to state 156
-- On stmt_desc shift to state 173
-- On stmt shift to state 174
-- On simple_stmt_desc shift to state 157
-- On simple_stmt shift to state 175
-- On nonempty_list(stmt) shift to state 193
-- On located(stmt_desc) shift to state 178
-- On located(simple_stmt_desc) shift to state 161
-- On ident shift to state 162
-- On expr_desc shift to state 21
-- On expr shift to state 165
-- On assertion_kind shift to state 171
## Reductions:

State 141:
## Known stack suffix:
## LABEL
## LR(1) items:
simple_stmt_desc -> LABEL . ident [ NEWLINE ]
## Transitions:
-- On IDENT shift to state 14
-- On ident shift to state 142
## Reductions:

State 142:
## Known stack suffix:
## LABEL ident
## LR(1) items:
simple_stmt_desc -> LABEL ident . [ NEWLINE ]
## Transitions:
## Reductions:
-- On NEWLINE
--   reduce production simple_stmt_desc -> LABEL ident

State 143:
## Known stack suffix:
## IF
## LR(1) items:
stmt_desc -> IF . expr COLON suite else_branch [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF END DEF CHECK BREAK ASSUME ASSERT ]
## Transitions:
-- On TRUE shift to state 6
-- On STRING shift to state 7
-- On NOT shift to state 8
-- On NONE shift to state 9
-- On MINUS shift to state 10
-- On LEFTSQ shift to state 11
-- On LEFTPAR shift to state 12
-- On INTEGER shift to state 13
-- On IDENT shift to state 14
-- On FALSE shift to state 15
-- On ident shift to state 16
-- On expr_desc shift to state 21
-- On expr shift to state 144
## Reductions:

State 144:
## Known stack suffix:
## IF expr
## LR(1) items:
expr_desc -> expr . LEFTSQ expr RIGHTSQ [ TIMES PLUS OR MOD MINUS LEFTSQ DIV COLON CMP AND ]
expr_desc -> expr . PLUS expr [ TIMES PLUS OR MOD MINUS LEFTSQ DIV COLON CMP AND ]
expr_desc -> expr . MINUS expr [ TIMES PLUS OR MOD MINUS LEFTSQ DIV COLON CMP AND ]
expr_desc -> expr . DIV expr [ TIMES PLUS OR MOD MINUS LEFTSQ DIV COLON CMP AND ]
expr_desc -> expr . MOD expr [ TIMES PLUS OR MOD MINUS LEFTSQ DIV COLON CMP AND ]
expr_desc -> expr . CMP expr [ TIMES PLUS OR MOD MINUS LEFTSQ DIV COLON CMP AND ]
expr_desc -> expr . AND expr [ TIMES PLUS OR MOD MINUS LEFTSQ DIV COLON CMP AND ]
expr_desc -> expr . OR expr [ TIMES PLUS OR MOD MINUS LEFTSQ DIV COLON CMP AND ]
expr_desc -> expr . TIMES expr [ TIMES PLUS OR MOD MINUS LEFTSQ DIV COLON CMP AND ]
stmt_desc -> IF expr . COLON suite else_branch [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF END DEF CHECK BREAK ASSUME ASSERT ]
## Transitions:
-- On TIMES shift to state 23
-- On PLUS shift to state 28
-- On OR shift to state 34
-- On MOD shift to state 30
-- On MINUS shift to state 36
-- On LEFTSQ shift to state 25
-- On DIV shift to state 32
-- On COLON shift to state 145
-- On CMP shift to state 38
-- On AND shift to state 40
## Reductions:

State 145:
## Known stack suffix:
## IF expr COLON
## LR(1) items:
stmt_desc -> IF expr COLON . suite else_branch [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF END DEF CHECK BREAK ASSUME ASSERT ]
## Transitions:
-- On TRUE shift to state 6
-- On STRING shift to state 7
-- On RETURN shift to state 52
-- On NOT shift to state 8
-- On NONE shift to state 9
-- On NEWLINE shift to state 146
-- On MINUS shift to state 10
-- On LEFTSQ shift to state 11
-- On LEFTPAR shift to state 12
-- On LABEL shift to state 141
-- On INTEGER shift to state 13
-- On IDENT shift to state 14
-- On FALSE shift to state 15
-- On CHECK shift to state 153
-- On BREAK shift to state 154
-- On ASSUME shift to state 155
-- On ASSERT shift to state 156
-- On suite shift to state 181
-- On simple_stmt_desc shift to state 157
-- On simple_stmt shift to state 185
-- On located(simple_stmt_desc) shift to state 161
-- On ident shift to state 162
-- On expr_desc shift to state 21
-- On expr shift to state 165
-- On assertion_kind shift to state 171
## Reductions:

State 146:
## Known stack suffix:
## NEWLINE
## LR(1) items:
suite -> NEWLINE . BEGIN nonempty_list(stmt) END [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF END ELSE ELIF DEF CHECK BREAK ASSUME ASSERT ]
## Transitions:
-- On BEGIN shift to state 147
## Reductions:

State 147:
## Known stack suffix:
## NEWLINE BEGIN
## LR(1) items:
suite -> NEWLINE BEGIN . nonempty_list(stmt) END [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF END ELSE ELIF DEF CHECK BREAK ASSUME ASSERT ]
## Transitions:
-- On WHILE shift to state 5
-- On TRUE shift to state 6
-- On STRING shift to state 7
-- On RETURN shift to state 52
-- On NOT shift to state 8
-- On NONE shift to state 9
-- On MINUS shift to state 10
-- On LEFTSQ shift to state 11
-- On LEFTPAR shift to state 12
-- On LABEL shift to state 141
-- On INTEGER shift to state 13
-- On IF shift to state 143
-- On IDENT shift to state 14
-- On FOR shift to state 148
-- On FALSE shift to state 15
-- On CHECK shift to state 153
-- On BREAK shift to state 154
-- On ASSUME shift to state 155
-- On ASSERT shift to state 156
-- On stmt_desc shift to state 173
-- On stmt shift to state 174
-- On simple_stmt_desc shift to state 157
-- On simple_stmt shift to state 175
-- On nonempty_list(stmt) shift to state 179
-- On located(stmt_desc) shift to state 178
-- On located(simple_stmt_desc) shift to state 161
-- On ident shift to state 162
-- On expr_desc shift to state 21
-- On expr shift to state 165
-- On assertion_kind shift to state 171
## Reductions:

State 148:
## Known stack suffix:
## FOR
## LR(1) items:
stmt_desc -> FOR . ident IN expr COLON loop_body [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF END DEF CHECK BREAK ASSUME ASSERT ]
## Transitions:
-- On IDENT shift to state 14
-- On ident shift to state 149
## Reductions:

State 149:
## Known stack suffix:
## FOR ident
## LR(1) items:
stmt_desc -> FOR ident . IN expr COLON loop_body [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF END DEF CHECK BREAK ASSUME ASSERT ]
## Transitions:
-- On IN shift to state 150
## Reductions:

State 150:
## Known stack suffix:
## FOR ident IN
## LR(1) items:
stmt_desc -> FOR ident IN . expr COLON loop_body [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF END DEF CHECK BREAK ASSUME ASSERT ]
## Transitions:
-- On TRUE shift to state 6
-- On STRING shift to state 7
-- On NOT shift to state 8
-- On NONE shift to state 9
-- On MINUS shift to state 10
-- On LEFTSQ shift to state 11
-- On LEFTPAR shift to state 12
-- On INTEGER shift to state 13
-- On IDENT shift to state 14
-- On FALSE shift to state 15
-- On ident shift to state 16
-- On expr_desc shift to state 21
-- On expr shift to state 151
## Reductions:

State 151:
## Known stack suffix:
## FOR ident IN expr
## LR(1) items:
expr_desc -> expr . LEFTSQ expr RIGHTSQ [ TIMES PLUS OR MOD MINUS LEFTSQ DIV COLON CMP AND ]
expr_desc -> expr . PLUS expr [ TIMES PLUS OR MOD MINUS LEFTSQ DIV COLON CMP AND ]
expr_desc -> expr . MINUS expr [ TIMES PLUS OR MOD MINUS LEFTSQ DIV COLON CMP AND ]
expr_desc -> expr . DIV expr [ TIMES PLUS OR MOD MINUS LEFTSQ DIV COLON CMP AND ]
expr_desc -> expr . MOD expr [ TIMES PLUS OR MOD MINUS LEFTSQ DIV COLON CMP AND ]
expr_desc -> expr . CMP expr [ TIMES PLUS OR MOD MINUS LEFTSQ DIV COLON CMP AND ]
expr_desc -> expr . AND expr [ TIMES PLUS OR MOD MINUS LEFTSQ DIV COLON CMP AND ]
expr_desc -> expr . OR expr [ TIMES PLUS OR MOD MINUS LEFTSQ DIV COLON CMP AND ]
expr_desc -> expr . TIMES expr [ TIMES PLUS OR MOD MINUS LEFTSQ DIV COLON CMP AND ]
stmt_desc -> FOR ident IN expr . COLON loop_body [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF END DEF CHECK BREAK ASSUME ASSERT ]
## Transitions:
-- On TIMES shift to state 23
-- On PLUS shift to state 28
-- On OR shift to state 34
-- On MOD shift to state 30
-- On MINUS shift to state 36
-- On LEFTSQ shift to state 25
-- On DIV shift to state 32
-- On COLON shift to state 152
-- On CMP shift to state 38
-- On AND shift to state 40
## Reductions:

State 152:
## Known stack suffix:
## FOR ident IN expr COLON
## LR(1) items:
stmt_desc -> FOR ident IN expr COLON . loop_body [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF END DEF CHECK BREAK ASSUME ASSERT ]
## Transitions:
-- On TRUE shift to state 6
-- On STRING shift to state 7
-- On RETURN shift to state 52
-- On NOT shift to state 8
-- On NONE shift to state 9
-- On NEWLINE shift to state 54
-- On MINUS shift to state 10
-- On LEFTSQ shift to state 11
-- On LEFTPAR shift to state 12
-- On LABEL shift to state 141
-- On INTEGER shift to state 13
-- On IDENT shift to state 14
-- On FALSE shift to state 15
-- On CHECK shift to state 153
-- On BREAK shift to state 154
-- On ASSUME shift to state 155
-- On ASSERT shift to state 156
-- On simple_stmt_desc shift to state 157
-- On simple_stmt shift to state 158
-- On loop_body shift to state 160
-- On located(simple_stmt_desc) shift to state 161
-- On ident shift to state 162
-- On expr_desc shift to state 21
-- On expr shift to state 165
-- On assertion_kind shift to state 171
## Reductions:

State 153:
## Known stack suffix:
## CHECK
## LR(1) items:
assertion_kind -> CHECK . [ TRUE NOT NONE MINUS LET LEFTPAR INTEGER IF IDENT FORALL FALSE EXISTS ]
## Transitions:
## Reductions:
-- On TRUE NOT NONE MINUS LET LEFTPAR INTEGER IF IDENT FORALL FALSE EXISTS
--   reduce production assertion_kind -> CHECK

State 154:
## Known stack suffix:
## BREAK
## LR(1) items:
simple_stmt_desc -> BREAK . [ NEWLINE ]
## Transitions:
## Reductions:
-- On NEWLINE
--   reduce production simple_stmt_desc -> BREAK

State 155:
## Known stack suffix:
## ASSUME
## LR(1) items:
assertion_kind -> ASSUME . [ TRUE NOT NONE MINUS LET LEFTPAR INTEGER IF IDENT FORALL FALSE EXISTS ]
## Transitions:
## Reductions:
-- On TRUE NOT NONE MINUS LET LEFTPAR INTEGER IF IDENT FORALL FALSE EXISTS
--   reduce production assertion_kind -> ASSUME

State 156:
## Known stack suffix:
## ASSERT
## LR(1) items:
assertion_kind -> ASSERT . [ TRUE NOT NONE MINUS LET LEFTPAR INTEGER IF IDENT FORALL FALSE EXISTS ]
## Transitions:
## Reductions:
-- On TRUE NOT NONE MINUS LET LEFTPAR INTEGER IF IDENT FORALL FALSE EXISTS
--   reduce production assertion_kind -> ASSERT

State 157:
## Known stack suffix:
## simple_stmt_desc
## LR(1) items:
located(simple_stmt_desc) -> simple_stmt_desc . [ NEWLINE ]
## Transitions:
## Reductions:
-- On NEWLINE
--   reduce production located(simple_stmt_desc) -> simple_stmt_desc

State 158:
## Known stack suffix:
## simple_stmt
## LR(1) items:
loop_body -> simple_stmt . NEWLINE [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF END DEF CHECK BREAK ASSUME ASSERT ]
## Transitions:
-- On NEWLINE shift to state 159
## Reductions:

State 159:
## Known stack suffix:
## simple_stmt NEWLINE
## LR(1) items:
loop_body -> simple_stmt NEWLINE . [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF END DEF CHECK BREAK ASSUME ASSERT ]
## Transitions:
## Reductions:
-- On WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF END DEF CHECK BREAK ASSUME ASSERT
--   reduce production loop_body -> simple_stmt NEWLINE

State 160:
## Known stack suffix:
## FOR ident IN expr COLON loop_body
## LR(1) items:
stmt_desc -> FOR ident IN expr COLON loop_body . [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF END DEF CHECK BREAK ASSUME ASSERT ]
## Transitions:
## Reductions:
-- On WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF END DEF CHECK BREAK ASSUME ASSERT
--   reduce production stmt_desc -> FOR ident IN expr COLON loop_body

State 161:
## Known stack suffix:
## located(simple_stmt_desc)
## LR(1) items:
simple_stmt -> located(simple_stmt_desc) . [ NEWLINE ]
## Transitions:
## Reductions:
-- On NEWLINE
--   reduce production simple_stmt -> located(simple_stmt_desc)

State 162:
## Known stack suffix:
## ident
## LR(1) items:
expr_desc -> ident . [ TIMES PLUS OR NEWLINE MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> ident . LEFTPAR loption(separated_nonempty_list(COMMA,expr)) RIGHTPAR [ TIMES PLUS OR NEWLINE MOD MINUS LEFTSQ DIV CMP AND ]
simple_stmt_desc -> ident . EQUAL expr [ NEWLINE ]
## Transitions:
-- On LEFTPAR shift to state 17
-- On EQUAL shift to state 163
## Reductions:
-- On TIMES PLUS OR NEWLINE MOD MINUS LEFTSQ DIV CMP AND
--   reduce production expr_desc -> ident

State 163:
## Known stack suffix:
## ident EQUAL
## LR(1) items:
simple_stmt_desc -> ident EQUAL . expr [ NEWLINE ]
## Transitions:
-- On TRUE shift to state 6
-- On STRING shift to state 7
-- On NOT shift to state 8
-- On NONE shift to state 9
-- On MINUS shift to state 10
-- On LEFTSQ shift to state 11
-- On LEFTPAR shift to state 12
-- On INTEGER shift to state 13
-- On IDENT shift to state 14
-- On FALSE shift to state 15
-- On ident shift to state 16
-- On expr_desc shift to state 21
-- On expr shift to state 164
## Reductions:

State 164:
## Known stack suffix:
## ident EQUAL expr
## LR(1) items:
expr_desc -> expr . LEFTSQ expr RIGHTSQ [ TIMES PLUS OR NEWLINE MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . PLUS expr [ TIMES PLUS OR NEWLINE MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . MINUS expr [ TIMES PLUS OR NEWLINE MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . DIV expr [ TIMES PLUS OR NEWLINE MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . MOD expr [ TIMES PLUS OR NEWLINE MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . CMP expr [ TIMES PLUS OR NEWLINE MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . AND expr [ TIMES PLUS OR NEWLINE MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . OR expr [ TIMES PLUS OR NEWLINE MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . TIMES expr [ TIMES PLUS OR NEWLINE MOD MINUS LEFTSQ DIV CMP AND ]
simple_stmt_desc -> ident EQUAL expr . [ NEWLINE ]
## Transitions:
-- On TIMES shift to state 23
-- On PLUS shift to state 28
-- On OR shift to state 34
-- On MOD shift to state 30
-- On MINUS shift to state 36
-- On LEFTSQ shift to state 25
-- On DIV shift to state 32
-- On CMP shift to state 38
-- On AND shift to state 40
## Reductions:
-- On NEWLINE
--   reduce production simple_stmt_desc -> ident EQUAL expr

State 165:
## Known stack suffix:
## expr
## LR(1) items:
expr_desc -> expr . LEFTSQ expr RIGHTSQ [ TIMES PLUS OR NEWLINE MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . PLUS expr [ TIMES PLUS OR NEWLINE MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . MINUS expr [ TIMES PLUS OR NEWLINE MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . DIV expr [ TIMES PLUS OR NEWLINE MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . MOD expr [ TIMES PLUS OR NEWLINE MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . CMP expr [ TIMES PLUS OR NEWLINE MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . AND expr [ TIMES PLUS OR NEWLINE MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . OR expr [ TIMES PLUS OR NEWLINE MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . TIMES expr [ TIMES PLUS OR NEWLINE MOD MINUS LEFTSQ DIV CMP AND ]
simple_stmt_desc -> expr . LEFTSQ expr RIGHTSQ EQUAL expr [ NEWLINE ]
simple_stmt_desc -> expr . [ NEWLINE ]
## Transitions:
-- On TIMES shift to state 23
-- On PLUS shift to state 28
-- On OR shift to state 34
-- On MOD shift to state 30
-- On MINUS shift to state 36
-- On LEFTSQ shift to state 166
-- On DIV shift to state 32
-- On CMP shift to state 38
-- On AND shift to state 40
## Reductions:
-- On NEWLINE
--   reduce production simple_stmt_desc -> expr

State 166:
## Known stack suffix:
## expr LEFTSQ
## LR(1) items:
expr_desc -> expr LEFTSQ . expr RIGHTSQ [ TIMES PLUS OR NEWLINE MOD MINUS LEFTSQ DIV CMP AND ]
simple_stmt_desc -> expr LEFTSQ . expr RIGHTSQ EQUAL expr [ NEWLINE ]
## Transitions:
-- On TRUE shift to state 6
-- On STRING shift to state 7
-- On NOT shift to state 8
-- On NONE shift to state 9
-- On MINUS shift to state 10
-- On LEFTSQ shift to state 11
-- On LEFTPAR shift to state 12
-- On INTEGER shift to state 13
-- On IDENT shift to state 14
-- On FALSE shift to state 15
-- On ident shift to state 16
-- On expr_desc shift to state 21
-- On expr shift to state 167
## Reductions:

State 167:
## Known stack suffix:
## expr LEFTSQ expr
## LR(1) items:
expr_desc -> expr . LEFTSQ expr RIGHTSQ [ TIMES RIGHTSQ PLUS OR MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr LEFTSQ expr . RIGHTSQ [ TIMES PLUS OR NEWLINE MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . PLUS expr [ TIMES RIGHTSQ PLUS OR MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . MINUS expr [ TIMES RIGHTSQ PLUS OR MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . DIV expr [ TIMES RIGHTSQ PLUS OR MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . MOD expr [ TIMES RIGHTSQ PLUS OR MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . CMP expr [ TIMES RIGHTSQ PLUS OR MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . AND expr [ TIMES RIGHTSQ PLUS OR MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . OR expr [ TIMES RIGHTSQ PLUS OR MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . TIMES expr [ TIMES RIGHTSQ PLUS OR MOD MINUS LEFTSQ DIV CMP AND ]
simple_stmt_desc -> expr LEFTSQ expr . RIGHTSQ EQUAL expr [ NEWLINE ]
## Transitions:
-- On TIMES shift to state 23
-- On RIGHTSQ shift to state 168
-- On PLUS shift to state 28
-- On OR shift to state 34
-- On MOD shift to state 30
-- On MINUS shift to state 36
-- On LEFTSQ shift to state 25
-- On DIV shift to state 32
-- On CMP shift to state 38
-- On AND shift to state 40
## Reductions:

State 168:
## Known stack suffix:
## expr LEFTSQ expr RIGHTSQ
## LR(1) items:
expr_desc -> expr LEFTSQ expr RIGHTSQ . [ TIMES PLUS OR NEWLINE MOD MINUS LEFTSQ DIV CMP AND ]
simple_stmt_desc -> expr LEFTSQ expr RIGHTSQ . EQUAL expr [ NEWLINE ]
## Transitions:
-- On EQUAL shift to state 169
## Reductions:
-- On TIMES PLUS OR NEWLINE MOD MINUS LEFTSQ DIV CMP AND
--   reduce production expr_desc -> expr LEFTSQ expr RIGHTSQ

State 169:
## Known stack suffix:
## expr LEFTSQ expr RIGHTSQ EQUAL
## LR(1) items:
simple_stmt_desc -> expr LEFTSQ expr RIGHTSQ EQUAL . expr [ NEWLINE ]
## Transitions:
-- On TRUE shift to state 6
-- On STRING shift to state 7
-- On NOT shift to state 8
-- On NONE shift to state 9
-- On MINUS shift to state 10
-- On LEFTSQ shift to state 11
-- On LEFTPAR shift to state 12
-- On INTEGER shift to state 13
-- On IDENT shift to state 14
-- On FALSE shift to state 15
-- On ident shift to state 16
-- On expr_desc shift to state 21
-- On expr shift to state 170
## Reductions:

State 170:
## Known stack suffix:
## expr LEFTSQ expr RIGHTSQ EQUAL expr
## LR(1) items:
expr_desc -> expr . LEFTSQ expr RIGHTSQ [ TIMES PLUS OR NEWLINE MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . PLUS expr [ TIMES PLUS OR NEWLINE MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . MINUS expr [ TIMES PLUS OR NEWLINE MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . DIV expr [ TIMES PLUS OR NEWLINE MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . MOD expr [ TIMES PLUS OR NEWLINE MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . CMP expr [ TIMES PLUS OR NEWLINE MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . AND expr [ TIMES PLUS OR NEWLINE MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . OR expr [ TIMES PLUS OR NEWLINE MOD MINUS LEFTSQ DIV CMP AND ]
expr_desc -> expr . TIMES expr [ TIMES PLUS OR NEWLINE MOD MINUS LEFTSQ DIV CMP AND ]
simple_stmt_desc -> expr LEFTSQ expr RIGHTSQ EQUAL expr . [ NEWLINE ]
## Transitions:
-- On TIMES shift to state 23
-- On PLUS shift to state 28
-- On OR shift to state 34
-- On MOD shift to state 30
-- On MINUS shift to state 36
-- On LEFTSQ shift to state 25
-- On DIV shift to state 32
-- On CMP shift to state 38
-- On AND shift to state 40
## Reductions:
-- On NEWLINE
--   reduce production simple_stmt_desc -> expr LEFTSQ expr RIGHTSQ EQUAL expr

State 171:
## Known stack suffix:
## assertion_kind
## LR(1) items:
simple_stmt_desc -> assertion_kind . term [ NEWLINE ]
## Transitions:
-- On TRUE shift to state 57
-- On NOT shift to state 58
-- On NONE shift to state 59
-- On MINUS shift to state 60
-- On LET shift to state 61
-- On LEFTPAR shift to state 64
-- On INTEGER shift to state 65
-- On IF shift to state 66
-- On IDENT shift to state 14
-- On FORALL shift to state 67
-- On FALSE shift to state 68
-- On EXISTS shift to state 69
-- On term_sub_ shift to state 70
-- On term_arg_ shift to state 71
-- On term_arg shift to state 72
-- On term_ shift to state 74
-- On term shift to state 172
-- On quant shift to state 78
-- On mk_term(term_arg_) shift to state 90
-- On mk_term(term_) shift to state 91
-- On ident shift to state 92
## Reductions:

State 172:
## Known stack suffix:
## assertion_kind term
## LR(1) items:
simple_stmt_desc -> assertion_kind term . [ NEWLINE ]
term_ -> term . ARROW term [ TIMES PLUS OR NEWLINE MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . LRARROW term [ TIMES PLUS OR NEWLINE MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . OR term [ TIMES PLUS OR NEWLINE MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . AND term [ TIMES PLUS OR NEWLINE MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . CMP term [ TIMES PLUS OR NEWLINE MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . DIV term [ TIMES PLUS OR NEWLINE MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . MOD term [ TIMES PLUS OR NEWLINE MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . PLUS term [ TIMES PLUS OR NEWLINE MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . MINUS term [ TIMES PLUS OR NEWLINE MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . TIMES term [ TIMES PLUS OR NEWLINE MOD MINUS LRARROW DIV CMP ARROW AND ]
## Transitions:
-- On TIMES shift to state 76
-- On PLUS shift to state 86
-- On OR shift to state 95
-- On MOD shift to state 88
-- On MINUS shift to state 97
-- On LRARROW shift to state 105
-- On DIV shift to state 99
-- On CMP shift to state 101
-- On ARROW shift to state 107
-- On AND shift to state 103
## Reductions:
-- On NEWLINE
--   reduce production simple_stmt_desc -> assertion_kind term

State 173:
## Known stack suffix:
## stmt_desc
## LR(1) items:
located(stmt_desc) -> stmt_desc . [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF END DEF CHECK BREAK ASSUME ASSERT ]
## Transitions:
## Reductions:
-- On WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF END DEF CHECK BREAK ASSUME ASSERT
--   reduce production located(stmt_desc) -> stmt_desc

State 174:
## Known stack suffix:
## stmt
## LR(1) items:
nonempty_list(stmt) -> stmt . [ END ]
nonempty_list(stmt) -> stmt . nonempty_list(stmt) [ END ]
## Transitions:
-- On WHILE shift to state 5
-- On TRUE shift to state 6
-- On STRING shift to state 7
-- On RETURN shift to state 52
-- On NOT shift to state 8
-- On NONE shift to state 9
-- On MINUS shift to state 10
-- On LEFTSQ shift to state 11
-- On LEFTPAR shift to state 12
-- On LABEL shift to state 141
-- On INTEGER shift to state 13
-- On IF shift to state 143
-- On IDENT shift to state 14
-- On FOR shift to state 148
-- On FALSE shift to state 15
-- On CHECK shift to state 153
-- On BREAK shift to state 154
-- On ASSUME shift to state 155
-- On ASSERT shift to state 156
-- On stmt_desc shift to state 173
-- On stmt shift to state 174
-- On simple_stmt_desc shift to state 157
-- On simple_stmt shift to state 175
-- On nonempty_list(stmt) shift to state 177
-- On located(stmt_desc) shift to state 178
-- On located(simple_stmt_desc) shift to state 161
-- On ident shift to state 162
-- On expr_desc shift to state 21
-- On expr shift to state 165
-- On assertion_kind shift to state 171
## Reductions:
-- On END
--   reduce production nonempty_list(stmt) -> stmt

State 175:
## Known stack suffix:
## simple_stmt
## LR(1) items:
stmt -> simple_stmt . NEWLINE [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF END DEF CHECK BREAK ASSUME ASSERT ]
## Transitions:
-- On NEWLINE shift to state 176
## Reductions:

State 176:
## Known stack suffix:
## simple_stmt NEWLINE
## LR(1) items:
stmt -> simple_stmt NEWLINE . [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF END DEF CHECK BREAK ASSUME ASSERT ]
## Transitions:
## Reductions:
-- On WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF END DEF CHECK BREAK ASSUME ASSERT
--   reduce production stmt -> simple_stmt NEWLINE

State 177:
## Known stack suffix:
## stmt nonempty_list(stmt)
## LR(1) items:
nonempty_list(stmt) -> stmt nonempty_list(stmt) . [ END ]
## Transitions:
## Reductions:
-- On END
--   reduce production nonempty_list(stmt) -> stmt nonempty_list(stmt)

State 178:
## Known stack suffix:
## located(stmt_desc)
## LR(1) items:
stmt -> located(stmt_desc) . [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF END DEF CHECK BREAK ASSUME ASSERT ]
## Transitions:
## Reductions:
-- On WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF END DEF CHECK BREAK ASSUME ASSERT
--   reduce production stmt -> located(stmt_desc)

State 179:
## Known stack suffix:
## NEWLINE BEGIN nonempty_list(stmt)
## LR(1) items:
suite -> NEWLINE BEGIN nonempty_list(stmt) . END [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF END ELSE ELIF DEF CHECK BREAK ASSUME ASSERT ]
## Transitions:
-- On END shift to state 180
## Reductions:

State 180:
## Known stack suffix:
## NEWLINE BEGIN nonempty_list(stmt) END
## LR(1) items:
suite -> NEWLINE BEGIN nonempty_list(stmt) END . [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF END ELSE ELIF DEF CHECK BREAK ASSUME ASSERT ]
## Transitions:
## Reductions:
-- On WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF END ELSE ELIF DEF CHECK BREAK ASSUME ASSERT
--   reduce production suite -> NEWLINE BEGIN nonempty_list(stmt) END

State 181:
## Known stack suffix:
## IF expr COLON suite
## LR(1) items:
stmt_desc -> IF expr COLON suite . else_branch [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF END DEF CHECK BREAK ASSUME ASSERT ]
## Transitions:
-- On ELSE shift to state 182
-- On ELIF shift to state 187
-- On else_branch shift to state 192
## Reductions:
-- On WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF END DEF CHECK BREAK ASSUME ASSERT
--   reduce production else_branch ->

State 182:
## Known stack suffix:
## ELSE
## LR(1) items:
else_branch -> ELSE . COLON suite [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF END DEF CHECK BREAK ASSUME ASSERT ]
## Transitions:
-- On COLON shift to state 183
## Reductions:

State 183:
## Known stack suffix:
## ELSE COLON
## LR(1) items:
else_branch -> ELSE COLON . suite [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF END DEF CHECK BREAK ASSUME ASSERT ]
## Transitions:
-- On TRUE shift to state 6
-- On STRING shift to state 7
-- On RETURN shift to state 52
-- On NOT shift to state 8
-- On NONE shift to state 9
-- On NEWLINE shift to state 146
-- On MINUS shift to state 10
-- On LEFTSQ shift to state 11
-- On LEFTPAR shift to state 12
-- On LABEL shift to state 141
-- On INTEGER shift to state 13
-- On IDENT shift to state 14
-- On FALSE shift to state 15
-- On CHECK shift to state 153
-- On BREAK shift to state 154
-- On ASSUME shift to state 155
-- On ASSERT shift to state 156
-- On suite shift to state 184
-- On simple_stmt_desc shift to state 157
-- On simple_stmt shift to state 185
-- On located(simple_stmt_desc) shift to state 161
-- On ident shift to state 162
-- On expr_desc shift to state 21
-- On expr shift to state 165
-- On assertion_kind shift to state 171
## Reductions:

State 184:
## Known stack suffix:
## ELSE COLON suite
## LR(1) items:
else_branch -> ELSE COLON suite . [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF END DEF CHECK BREAK ASSUME ASSERT ]
## Transitions:
## Reductions:
-- On WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF END DEF CHECK BREAK ASSUME ASSERT
--   reduce production else_branch -> ELSE COLON suite

State 185:
## Known stack suffix:
## simple_stmt
## LR(1) items:
suite -> simple_stmt . NEWLINE [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF END ELSE ELIF DEF CHECK BREAK ASSUME ASSERT ]
## Transitions:
-- On NEWLINE shift to state 186
## Reductions:

State 186:
## Known stack suffix:
## simple_stmt NEWLINE
## LR(1) items:
suite -> simple_stmt NEWLINE . [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF END ELSE ELIF DEF CHECK BREAK ASSUME ASSERT ]
## Transitions:
## Reductions:
-- On WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF END ELSE ELIF DEF CHECK BREAK ASSUME ASSERT
--   reduce production suite -> simple_stmt NEWLINE

State 187:
## Known stack suffix:
## ELIF
## LR(1) items:
else_branch -> ELIF . expr COLON suite else_branch [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF END DEF CHECK BREAK ASSUME ASSERT ]
## Transitions:
-- On TRUE shift to state 6
-- On STRING shift to state 7
-- On NOT shift to state 8
-- On NONE shift to state 9
-- On MINUS shift to state 10
-- On LEFTSQ shift to state 11
-- On LEFTPAR shift to state 12
-- On INTEGER shift to state 13
-- On IDENT shift to state 14
-- On FALSE shift to state 15
-- On ident shift to state 16
-- On expr_desc shift to state 21
-- On expr shift to state 188
## Reductions:

State 188:
## Known stack suffix:
## ELIF expr
## LR(1) items:
else_branch -> ELIF expr . COLON suite else_branch [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF END DEF CHECK BREAK ASSUME ASSERT ]
expr_desc -> expr . LEFTSQ expr RIGHTSQ [ TIMES PLUS OR MOD MINUS LEFTSQ DIV COLON CMP AND ]
expr_desc -> expr . PLUS expr [ TIMES PLUS OR MOD MINUS LEFTSQ DIV COLON CMP AND ]
expr_desc -> expr . MINUS expr [ TIMES PLUS OR MOD MINUS LEFTSQ DIV COLON CMP AND ]
expr_desc -> expr . DIV expr [ TIMES PLUS OR MOD MINUS LEFTSQ DIV COLON CMP AND ]
expr_desc -> expr . MOD expr [ TIMES PLUS OR MOD MINUS LEFTSQ DIV COLON CMP AND ]
expr_desc -> expr . CMP expr [ TIMES PLUS OR MOD MINUS LEFTSQ DIV COLON CMP AND ]
expr_desc -> expr . AND expr [ TIMES PLUS OR MOD MINUS LEFTSQ DIV COLON CMP AND ]
expr_desc -> expr . OR expr [ TIMES PLUS OR MOD MINUS LEFTSQ DIV COLON CMP AND ]
expr_desc -> expr . TIMES expr [ TIMES PLUS OR MOD MINUS LEFTSQ DIV COLON CMP AND ]
## Transitions:
-- On TIMES shift to state 23
-- On PLUS shift to state 28
-- On OR shift to state 34
-- On MOD shift to state 30
-- On MINUS shift to state 36
-- On LEFTSQ shift to state 25
-- On DIV shift to state 32
-- On COLON shift to state 189
-- On CMP shift to state 38
-- On AND shift to state 40
## Reductions:

State 189:
## Known stack suffix:
## ELIF expr COLON
## LR(1) items:
else_branch -> ELIF expr COLON . suite else_branch [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF END DEF CHECK BREAK ASSUME ASSERT ]
## Transitions:
-- On TRUE shift to state 6
-- On STRING shift to state 7
-- On RETURN shift to state 52
-- On NOT shift to state 8
-- On NONE shift to state 9
-- On NEWLINE shift to state 146
-- On MINUS shift to state 10
-- On LEFTSQ shift to state 11
-- On LEFTPAR shift to state 12
-- On LABEL shift to state 141
-- On INTEGER shift to state 13
-- On IDENT shift to state 14
-- On FALSE shift to state 15
-- On CHECK shift to state 153
-- On BREAK shift to state 154
-- On ASSUME shift to state 155
-- On ASSERT shift to state 156
-- On suite shift to state 190
-- On simple_stmt_desc shift to state 157
-- On simple_stmt shift to state 185
-- On located(simple_stmt_desc) shift to state 161
-- On ident shift to state 162
-- On expr_desc shift to state 21
-- On expr shift to state 165
-- On assertion_kind shift to state 171
## Reductions:

State 190:
## Known stack suffix:
## ELIF expr COLON suite
## LR(1) items:
else_branch -> ELIF expr COLON suite . else_branch [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF END DEF CHECK BREAK ASSUME ASSERT ]
## Transitions:
-- On ELSE shift to state 182
-- On ELIF shift to state 187
-- On else_branch shift to state 191
## Reductions:
-- On WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF END DEF CHECK BREAK ASSUME ASSERT
--   reduce production else_branch ->

State 191:
## Known stack suffix:
## ELIF expr COLON suite else_branch
## LR(1) items:
else_branch -> ELIF expr COLON suite else_branch . [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF END DEF CHECK BREAK ASSUME ASSERT ]
## Transitions:
## Reductions:
-- On WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF END DEF CHECK BREAK ASSUME ASSERT
--   reduce production else_branch -> ELIF expr COLON suite else_branch

State 192:
## Known stack suffix:
## IF expr COLON suite else_branch
## LR(1) items:
stmt_desc -> IF expr COLON suite else_branch . [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF END DEF CHECK BREAK ASSUME ASSERT ]
## Transitions:
## Reductions:
-- On WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF END DEF CHECK BREAK ASSUME ASSERT
--   reduce production stmt_desc -> IF expr COLON suite else_branch

State 193:
## Known stack suffix:
## NEWLINE BEGIN loop_annotation nonempty_list(stmt)
## LR(1) items:
loop_body -> NEWLINE BEGIN loop_annotation nonempty_list(stmt) . END [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF END DEF CHECK BREAK ASSUME ASSERT ]
## Transitions:
-- On END shift to state 194
## Reductions:

State 194:
## Known stack suffix:
## NEWLINE BEGIN loop_annotation nonempty_list(stmt) END
## LR(1) items:
loop_body -> NEWLINE BEGIN loop_annotation nonempty_list(stmt) END . [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF END DEF CHECK BREAK ASSUME ASSERT ]
## Transitions:
## Reductions:
-- On WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF END DEF CHECK BREAK ASSUME ASSERT
--   reduce production loop_body -> NEWLINE BEGIN loop_annotation nonempty_list(stmt) END

State 195:
## Known stack suffix:
## WHILE expr COLON loop_body
## LR(1) items:
stmt_desc -> WHILE expr COLON loop_body . [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF END DEF CHECK BREAK ASSUME ASSERT ]
## Transitions:
## Reductions:
-- On WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF END DEF CHECK BREAK ASSUME ASSERT
--   reduce production stmt_desc -> WHILE expr COLON loop_body

State 196:
## Known stack suffix:
## PREDICATE
## LR(1) items:
func -> PREDICATE . ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR NEWLINE [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF DEF CHECK BREAK ASSUME ASSERT ]
## Transitions:
-- On IDENT shift to state 14
-- On ident shift to state 197
## Reductions:

State 197:
## Known stack suffix:
## PREDICATE ident
## LR(1) items:
func -> PREDICATE ident . LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR NEWLINE [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF DEF CHECK BREAK ASSUME ASSERT ]
## Transitions:
-- On LEFTPAR shift to state 198
## Reductions:

State 198:
## Known stack suffix:
## PREDICATE ident LEFTPAR
## LR(1) items:
func -> PREDICATE ident LEFTPAR . loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR NEWLINE [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF DEF CHECK BREAK ASSUME ASSERT ]
## Transitions:
-- On IDENT shift to state 14
-- On separated_nonempty_list(COMMA,ident) shift to state 199
-- On loption(separated_nonempty_list(COMMA,ident)) shift to state 200
-- On ident shift to state 80
## Reductions:
-- On RIGHTPAR
--   reduce production loption(separated_nonempty_list(COMMA,ident)) ->

State 199:
## Known stack suffix:
## separated_nonempty_list(COMMA,ident)
## LR(1) items:
loption(separated_nonempty_list(COMMA,ident)) -> separated_nonempty_list(COMMA,ident) . [ RIGHTPAR NEWLINE ]
## Transitions:
## Reductions:
-- On RIGHTPAR NEWLINE
--   reduce production loption(separated_nonempty_list(COMMA,ident)) -> separated_nonempty_list(COMMA,ident)

State 200:
## Known stack suffix:
## PREDICATE ident LEFTPAR loption(separated_nonempty_list(COMMA,ident))
## LR(1) items:
func -> PREDICATE ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) . RIGHTPAR NEWLINE [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF DEF CHECK BREAK ASSUME ASSERT ]
## Transitions:
-- On RIGHTPAR shift to state 201
## Reductions:

State 201:
## Known stack suffix:
## PREDICATE ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR
## LR(1) items:
func -> PREDICATE ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR . NEWLINE [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF DEF CHECK BREAK ASSUME ASSERT ]
## Transitions:
-- On NEWLINE shift to state 202
## Reductions:

State 202:
## Known stack suffix:
## PREDICATE ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR NEWLINE
## LR(1) items:
func -> PREDICATE ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR NEWLINE . [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF DEF CHECK BREAK ASSUME ASSERT ]
## Transitions:
## Reductions:
-- On WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF DEF CHECK BREAK ASSUME ASSERT
--   reduce production func -> PREDICATE ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR NEWLINE

State 203:
## Known stack suffix:
## FUNCTION
## LR(1) items:
func -> FUNCTION . ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR NEWLINE [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF DEF CHECK BREAK ASSUME ASSERT ]
## Transitions:
-- On IDENT shift to state 14
-- On ident shift to state 204
## Reductions:

State 204:
## Known stack suffix:
## FUNCTION ident
## LR(1) items:
func -> FUNCTION ident . LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR NEWLINE [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF DEF CHECK BREAK ASSUME ASSERT ]
## Transitions:
-- On LEFTPAR shift to state 205
## Reductions:

State 205:
## Known stack suffix:
## FUNCTION ident LEFTPAR
## LR(1) items:
func -> FUNCTION ident LEFTPAR . loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR NEWLINE [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF DEF CHECK BREAK ASSUME ASSERT ]
## Transitions:
-- On IDENT shift to state 14
-- On separated_nonempty_list(COMMA,ident) shift to state 199
-- On loption(separated_nonempty_list(COMMA,ident)) shift to state 206
-- On ident shift to state 80
## Reductions:
-- On RIGHTPAR
--   reduce production loption(separated_nonempty_list(COMMA,ident)) ->

State 206:
## Known stack suffix:
## FUNCTION ident LEFTPAR loption(separated_nonempty_list(COMMA,ident))
## LR(1) items:
func -> FUNCTION ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) . RIGHTPAR NEWLINE [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF DEF CHECK BREAK ASSUME ASSERT ]
## Transitions:
-- On RIGHTPAR shift to state 207
## Reductions:

State 207:
## Known stack suffix:
## FUNCTION ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR
## LR(1) items:
func -> FUNCTION ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR . NEWLINE [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF DEF CHECK BREAK ASSUME ASSERT ]
## Transitions:
-- On NEWLINE shift to state 208
## Reductions:

State 208:
## Known stack suffix:
## FUNCTION ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR NEWLINE
## LR(1) items:
func -> FUNCTION ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR NEWLINE . [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF DEF CHECK BREAK ASSUME ASSERT ]
## Transitions:
## Reductions:
-- On WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF DEF CHECK BREAK ASSUME ASSERT
--   reduce production func -> FUNCTION ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR NEWLINE

State 209:
## Known stack suffix:
## FROM
## LR(1) items:
import -> FROM . ident IMPORT loption(separated_nonempty_list(COMMA,ident)) NEWLINE [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF DEF CHECK BREAK ASSUME ASSERT ]
## Transitions:
-- On IDENT shift to state 14
-- On ident shift to state 210
## Reductions:

State 210:
## Known stack suffix:
## FROM ident
## LR(1) items:
import -> FROM ident . IMPORT loption(separated_nonempty_list(COMMA,ident)) NEWLINE [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF DEF CHECK BREAK ASSUME ASSERT ]
## Transitions:
-- On IMPORT shift to state 211
## Reductions:

State 211:
## Known stack suffix:
## FROM ident IMPORT
## LR(1) items:
import -> FROM ident IMPORT . loption(separated_nonempty_list(COMMA,ident)) NEWLINE [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF DEF CHECK BREAK ASSUME ASSERT ]
## Transitions:
-- On IDENT shift to state 14
-- On separated_nonempty_list(COMMA,ident) shift to state 199
-- On loption(separated_nonempty_list(COMMA,ident)) shift to state 212
-- On ident shift to state 80
## Reductions:
-- On NEWLINE
--   reduce production loption(separated_nonempty_list(COMMA,ident)) ->

State 212:
## Known stack suffix:
## FROM ident IMPORT loption(separated_nonempty_list(COMMA,ident))
## LR(1) items:
import -> FROM ident IMPORT loption(separated_nonempty_list(COMMA,ident)) . NEWLINE [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF DEF CHECK BREAK ASSUME ASSERT ]
## Transitions:
-- On NEWLINE shift to state 213
## Reductions:

State 213:
## Known stack suffix:
## FROM ident IMPORT loption(separated_nonempty_list(COMMA,ident)) NEWLINE
## LR(1) items:
import -> FROM ident IMPORT loption(separated_nonempty_list(COMMA,ident)) NEWLINE . [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF DEF CHECK BREAK ASSUME ASSERT ]
## Transitions:
## Reductions:
-- On WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF DEF CHECK BREAK ASSUME ASSERT
--   reduce production import -> FROM ident IMPORT loption(separated_nonempty_list(COMMA,ident)) NEWLINE

State 214:
## Known stack suffix:
## DEF
## LR(1) items:
def -> DEF . ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR COLON NEWLINE BEGIN spec nonempty_list(stmt) END [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF DEF CHECK BREAK ASSUME ASSERT ]
## Transitions:
-- On IDENT shift to state 14
-- On ident shift to state 215
## Reductions:

State 215:
## Known stack suffix:
## DEF ident
## LR(1) items:
def -> DEF ident . LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR COLON NEWLINE BEGIN spec nonempty_list(stmt) END [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF DEF CHECK BREAK ASSUME ASSERT ]
## Transitions:
-- On LEFTPAR shift to state 216
## Reductions:

State 216:
## Known stack suffix:
## DEF ident LEFTPAR
## LR(1) items:
def -> DEF ident LEFTPAR . loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR COLON NEWLINE BEGIN spec nonempty_list(stmt) END [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF DEF CHECK BREAK ASSUME ASSERT ]
## Transitions:
-- On IDENT shift to state 14
-- On separated_nonempty_list(COMMA,ident) shift to state 199
-- On loption(separated_nonempty_list(COMMA,ident)) shift to state 217
-- On ident shift to state 80
## Reductions:
-- On RIGHTPAR
--   reduce production loption(separated_nonempty_list(COMMA,ident)) ->

State 217:
## Known stack suffix:
## DEF ident LEFTPAR loption(separated_nonempty_list(COMMA,ident))
## LR(1) items:
def -> DEF ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) . RIGHTPAR COLON NEWLINE BEGIN spec nonempty_list(stmt) END [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF DEF CHECK BREAK ASSUME ASSERT ]
## Transitions:
-- On RIGHTPAR shift to state 218
## Reductions:

State 218:
## Known stack suffix:
## DEF ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR
## LR(1) items:
def -> DEF ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR . COLON NEWLINE BEGIN spec nonempty_list(stmt) END [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF DEF CHECK BREAK ASSUME ASSERT ]
## Transitions:
-- On COLON shift to state 219
## Reductions:

State 219:
## Known stack suffix:
## DEF ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR COLON
## LR(1) items:
def -> DEF ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR COLON . NEWLINE BEGIN spec nonempty_list(stmt) END [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF DEF CHECK BREAK ASSUME ASSERT ]
## Transitions:
-- On NEWLINE shift to state 220
## Reductions:

State 220:
## Known stack suffix:
## DEF ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR COLON NEWLINE
## LR(1) items:
def -> DEF ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR COLON NEWLINE . BEGIN spec nonempty_list(stmt) END [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF DEF CHECK BREAK ASSUME ASSERT ]
## Transitions:
-- On BEGIN shift to state 221
## Reductions:

State 221:
## Known stack suffix:
## DEF ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR COLON NEWLINE BEGIN
## LR(1) items:
def -> DEF ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR COLON NEWLINE BEGIN . spec nonempty_list(stmt) END [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF DEF CHECK BREAK ASSUME ASSERT ]
## Transitions:
-- On VARIANT shift to state 56
-- On REQUIRES shift to state 222
-- On ENSURES shift to state 225
-- On variant shift to state 229
-- On spec shift to state 230
-- On single_spec shift to state 233
## Reductions:
-- On WHILE TRUE STRING RETURN NOT NONE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FOR FALSE CHECK BREAK ASSUME ASSERT
--   reduce production spec ->

State 222:
## Known stack suffix:
## REQUIRES
## LR(1) items:
single_spec -> REQUIRES . term NEWLINE [ WHILE VARIANT TRUE STRING RETURN REQUIRES NOT NONE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FOR FALSE ENSURES CHECK BREAK ASSUME ASSERT ]
## Transitions:
-- On TRUE shift to state 57
-- On NOT shift to state 58
-- On NONE shift to state 59
-- On MINUS shift to state 60
-- On LET shift to state 61
-- On LEFTPAR shift to state 64
-- On INTEGER shift to state 65
-- On IF shift to state 66
-- On IDENT shift to state 14
-- On FORALL shift to state 67
-- On FALSE shift to state 68
-- On EXISTS shift to state 69
-- On term_sub_ shift to state 70
-- On term_arg_ shift to state 71
-- On term_arg shift to state 72
-- On term_ shift to state 74
-- On term shift to state 223
-- On quant shift to state 78
-- On mk_term(term_arg_) shift to state 90
-- On mk_term(term_) shift to state 91
-- On ident shift to state 92
## Reductions:

State 223:
## Known stack suffix:
## REQUIRES term
## LR(1) items:
single_spec -> REQUIRES term . NEWLINE [ WHILE VARIANT TRUE STRING RETURN REQUIRES NOT NONE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FOR FALSE ENSURES CHECK BREAK ASSUME ASSERT ]
term_ -> term . ARROW term [ TIMES PLUS OR NEWLINE MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . LRARROW term [ TIMES PLUS OR NEWLINE MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . OR term [ TIMES PLUS OR NEWLINE MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . AND term [ TIMES PLUS OR NEWLINE MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . CMP term [ TIMES PLUS OR NEWLINE MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . DIV term [ TIMES PLUS OR NEWLINE MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . MOD term [ TIMES PLUS OR NEWLINE MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . PLUS term [ TIMES PLUS OR NEWLINE MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . MINUS term [ TIMES PLUS OR NEWLINE MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . TIMES term [ TIMES PLUS OR NEWLINE MOD MINUS LRARROW DIV CMP ARROW AND ]
## Transitions:
-- On TIMES shift to state 76
-- On PLUS shift to state 86
-- On OR shift to state 95
-- On NEWLINE shift to state 224
-- On MOD shift to state 88
-- On MINUS shift to state 97
-- On LRARROW shift to state 105
-- On DIV shift to state 99
-- On CMP shift to state 101
-- On ARROW shift to state 107
-- On AND shift to state 103
## Reductions:

State 224:
## Known stack suffix:
## REQUIRES term NEWLINE
## LR(1) items:
single_spec -> REQUIRES term NEWLINE . [ WHILE VARIANT TRUE STRING RETURN REQUIRES NOT NONE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FOR FALSE ENSURES CHECK BREAK ASSUME ASSERT ]
## Transitions:
## Reductions:
-- On WHILE VARIANT TRUE STRING RETURN REQUIRES NOT NONE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FOR FALSE ENSURES CHECK BREAK ASSUME ASSERT
--   reduce production single_spec -> REQUIRES term NEWLINE

State 225:
## Known stack suffix:
## ENSURES
## LR(1) items:
single_spec -> ENSURES . ensures NEWLINE [ WHILE VARIANT TRUE STRING RETURN REQUIRES NOT NONE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FOR FALSE ENSURES CHECK BREAK ASSUME ASSERT ]
## Transitions:
-- On TRUE shift to state 57
-- On NOT shift to state 58
-- On NONE shift to state 59
-- On MINUS shift to state 60
-- On LET shift to state 61
-- On LEFTPAR shift to state 64
-- On INTEGER shift to state 65
-- On IF shift to state 66
-- On IDENT shift to state 14
-- On FORALL shift to state 67
-- On FALSE shift to state 68
-- On EXISTS shift to state 69
-- On term_sub_ shift to state 70
-- On term_arg_ shift to state 71
-- On term_arg shift to state 72
-- On term_ shift to state 74
-- On term shift to state 226
-- On quant shift to state 78
-- On mk_term(term_arg_) shift to state 90
-- On mk_term(term_) shift to state 91
-- On ident shift to state 92
-- On ensures shift to state 227
## Reductions:

State 226:
## Known stack suffix:
## term
## LR(1) items:
ensures -> term . [ NEWLINE ]
term_ -> term . ARROW term [ TIMES PLUS OR NEWLINE MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . LRARROW term [ TIMES PLUS OR NEWLINE MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . OR term [ TIMES PLUS OR NEWLINE MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . AND term [ TIMES PLUS OR NEWLINE MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . CMP term [ TIMES PLUS OR NEWLINE MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . DIV term [ TIMES PLUS OR NEWLINE MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . MOD term [ TIMES PLUS OR NEWLINE MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . PLUS term [ TIMES PLUS OR NEWLINE MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . MINUS term [ TIMES PLUS OR NEWLINE MOD MINUS LRARROW DIV CMP ARROW AND ]
term_ -> term . TIMES term [ TIMES PLUS OR NEWLINE MOD MINUS LRARROW DIV CMP ARROW AND ]
## Transitions:
-- On TIMES shift to state 76
-- On PLUS shift to state 86
-- On OR shift to state 95
-- On MOD shift to state 88
-- On MINUS shift to state 97
-- On LRARROW shift to state 105
-- On DIV shift to state 99
-- On CMP shift to state 101
-- On ARROW shift to state 107
-- On AND shift to state 103
## Reductions:
-- On NEWLINE
--   reduce production ensures -> term

State 227:
## Known stack suffix:
## ENSURES ensures
## LR(1) items:
single_spec -> ENSURES ensures . NEWLINE [ WHILE VARIANT TRUE STRING RETURN REQUIRES NOT NONE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FOR FALSE ENSURES CHECK BREAK ASSUME ASSERT ]
## Transitions:
-- On NEWLINE shift to state 228
## Reductions:

State 228:
## Known stack suffix:
## ENSURES ensures NEWLINE
## LR(1) items:
single_spec -> ENSURES ensures NEWLINE . [ WHILE VARIANT TRUE STRING RETURN REQUIRES NOT NONE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FOR FALSE ENSURES CHECK BREAK ASSUME ASSERT ]
## Transitions:
## Reductions:
-- On WHILE VARIANT TRUE STRING RETURN REQUIRES NOT NONE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FOR FALSE ENSURES CHECK BREAK ASSUME ASSERT
--   reduce production single_spec -> ENSURES ensures NEWLINE

State 229:
## Known stack suffix:
## variant
## LR(1) items:
single_spec -> variant . [ WHILE VARIANT TRUE STRING RETURN REQUIRES NOT NONE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FOR FALSE ENSURES CHECK BREAK ASSUME ASSERT ]
## Transitions:
## Reductions:
-- On WHILE VARIANT TRUE STRING RETURN REQUIRES NOT NONE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FOR FALSE ENSURES CHECK BREAK ASSUME ASSERT
--   reduce production single_spec -> variant

State 230:
## Known stack suffix:
## DEF ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR COLON NEWLINE BEGIN spec
## LR(1) items:
def -> DEF ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR COLON NEWLINE BEGIN spec . nonempty_list(stmt) END [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF DEF CHECK BREAK ASSUME ASSERT ]
## Transitions:
-- On WHILE shift to state 5
-- On TRUE shift to state 6
-- On STRING shift to state 7
-- On RETURN shift to state 52
-- On NOT shift to state 8
-- On NONE shift to state 9
-- On MINUS shift to state 10
-- On LEFTSQ shift to state 11
-- On LEFTPAR shift to state 12
-- On LABEL shift to state 141
-- On INTEGER shift to state 13
-- On IF shift to state 143
-- On IDENT shift to state 14
-- On FOR shift to state 148
-- On FALSE shift to state 15
-- On CHECK shift to state 153
-- On BREAK shift to state 154
-- On ASSUME shift to state 155
-- On ASSERT shift to state 156
-- On stmt_desc shift to state 173
-- On stmt shift to state 174
-- On simple_stmt_desc shift to state 157
-- On simple_stmt shift to state 175
-- On nonempty_list(stmt) shift to state 231
-- On located(stmt_desc) shift to state 178
-- On located(simple_stmt_desc) shift to state 161
-- On ident shift to state 162
-- On expr_desc shift to state 21
-- On expr shift to state 165
-- On assertion_kind shift to state 171
## Reductions:

State 231:
## Known stack suffix:
## DEF ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR COLON NEWLINE BEGIN spec nonempty_list(stmt)
## LR(1) items:
def -> DEF ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR COLON NEWLINE BEGIN spec nonempty_list(stmt) . END [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF DEF CHECK BREAK ASSUME ASSERT ]
## Transitions:
-- On END shift to state 232
## Reductions:

State 232:
## Known stack suffix:
## DEF ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR COLON NEWLINE BEGIN spec nonempty_list(stmt) END
## LR(1) items:
def -> DEF ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR COLON NEWLINE BEGIN spec nonempty_list(stmt) END . [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF DEF CHECK BREAK ASSUME ASSERT ]
## Transitions:
## Reductions:
-- On WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF DEF CHECK BREAK ASSUME ASSERT
--   reduce production def -> DEF ident LEFTPAR loption(separated_nonempty_list(COMMA,ident)) RIGHTPAR COLON NEWLINE BEGIN spec nonempty_list(stmt) END

State 233:
## Known stack suffix:
## single_spec
## LR(1) items:
spec -> single_spec . spec [ WHILE TRUE STRING RETURN NOT NONE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FOR FALSE CHECK BREAK ASSUME ASSERT ]
## Transitions:
-- On VARIANT shift to state 56
-- On REQUIRES shift to state 222
-- On ENSURES shift to state 225
-- On variant shift to state 229
-- On spec shift to state 234
-- On single_spec shift to state 233
## Reductions:
-- On WHILE TRUE STRING RETURN NOT NONE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FOR FALSE CHECK BREAK ASSUME ASSERT
--   reduce production spec ->

State 234:
## Known stack suffix:
## single_spec spec
## LR(1) items:
spec -> single_spec spec . [ WHILE TRUE STRING RETURN NOT NONE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FOR FALSE CHECK BREAK ASSUME ASSERT ]
## Transitions:
## Reductions:
-- On WHILE TRUE STRING RETURN NOT NONE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FOR FALSE CHECK BREAK ASSUME ASSERT
--   reduce production spec -> single_spec spec

State 235:
## Known stack suffix:
## stmt
## LR(1) items:
decl -> stmt . [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF DEF CHECK BREAK ASSUME ASSERT ]
## Transitions:
## Reductions:
-- On WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF DEF CHECK BREAK ASSUME ASSERT
--   reduce production decl -> stmt

State 236:
## Known stack suffix:
## option(NEWLINE) nonempty_list(decl)
## LR(1) items:
file -> option(NEWLINE) nonempty_list(decl) . option(NEWLINE) EOF [ # ]
## Transitions:
-- On NEWLINE shift to state 237
-- On option(NEWLINE) shift to state 238
## Reductions:
-- On EOF
--   reduce production option(NEWLINE) ->

State 237:
## Known stack suffix:
## NEWLINE
## LR(1) items:
option(NEWLINE) -> NEWLINE . [ EOF ]
## Transitions:
## Reductions:
-- On EOF
--   reduce production option(NEWLINE) -> NEWLINE

State 238:
## Known stack suffix:
## option(NEWLINE) nonempty_list(decl) option(NEWLINE)
## LR(1) items:
file -> option(NEWLINE) nonempty_list(decl) option(NEWLINE) . EOF [ # ]
## Transitions:
-- On EOF shift to state 239
## Reductions:

State 239:
## Known stack suffix:
## option(NEWLINE) nonempty_list(decl) option(NEWLINE) EOF
## LR(1) items:
file -> option(NEWLINE) nonempty_list(decl) option(NEWLINE) EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production file -> option(NEWLINE) nonempty_list(decl) option(NEWLINE) EOF

State 240:
## Known stack suffix:
## import
## LR(1) items:
decl -> import . [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF DEF CHECK BREAK ASSUME ASSERT ]
## Transitions:
## Reductions:
-- On WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF DEF CHECK BREAK ASSUME ASSERT
--   reduce production decl -> import

State 241:
## Known stack suffix:
## func
## LR(1) items:
decl -> func . [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF DEF CHECK BREAK ASSUME ASSERT ]
## Transitions:
## Reductions:
-- On WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF DEF CHECK BREAK ASSUME ASSERT
--   reduce production decl -> func

State 242:
## Known stack suffix:
## def
## LR(1) items:
decl -> def . [ WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF DEF CHECK BREAK ASSUME ASSERT ]
## Transitions:
## Reductions:
-- On WHILE TRUE STRING RETURN PREDICATE NOT NONE NEWLINE MINUS LEFTSQ LEFTPAR LABEL INTEGER IF IDENT FUNCTION FROM FOR FALSE EOF DEF CHECK BREAK ASSUME ASSERT
--   reduce production decl -> def

State 243:
## Known stack suffix:
## decl
## LR(1) items:
nonempty_list(decl) -> decl . [ NEWLINE EOF ]
nonempty_list(decl) -> decl . nonempty_list(decl) [ NEWLINE EOF ]
## Transitions:
-- On WHILE shift to state 5
-- On TRUE shift to state 6
-- On STRING shift to state 7
-- On RETURN shift to state 52
-- On PREDICATE shift to state 196
-- On NOT shift to state 8
-- On NONE shift to state 9
-- On MINUS shift to state 10
-- On LEFTSQ shift to state 11
-- On LEFTPAR shift to state 12
-- On LABEL shift to state 141
-- On INTEGER shift to state 13
-- On IF shift to state 143
-- On IDENT shift to state 14
-- On FUNCTION shift to state 203
-- On FROM shift to state 209
-- On FOR shift to state 148
-- On FALSE shift to state 15
-- On DEF shift to state 214
-- On CHECK shift to state 153
-- On BREAK shift to state 154
-- On ASSUME shift to state 155
-- On ASSERT shift to state 156
-- On stmt_desc shift to state 173
-- On stmt shift to state 235
-- On simple_stmt_desc shift to state 157
-- On simple_stmt shift to state 175
-- On nonempty_list(decl) shift to state 244
-- On located(stmt_desc) shift to state 178
-- On located(simple_stmt_desc) shift to state 161
-- On import shift to state 240
-- On ident shift to state 162
-- On func shift to state 241
-- On expr_desc shift to state 21
-- On expr shift to state 165
-- On def shift to state 242
-- On decl shift to state 243
-- On assertion_kind shift to state 171
## Reductions:
-- On NEWLINE EOF
--   reduce production nonempty_list(decl) -> decl

State 244:
## Known stack suffix:
## decl nonempty_list(decl)
## LR(1) items:
nonempty_list(decl) -> decl nonempty_list(decl) . [ NEWLINE EOF ]
## Transitions:
## Reductions:
-- On NEWLINE EOF
--   reduce production nonempty_list(decl) -> decl nonempty_list(decl)

State 245:
## Known stack suffix:
## list(NEWLINE)
## LR(1) items:
file -> list(NEWLINE) . EOF [ # ]
## Transitions:
-- On EOF shift to state 246
## Reductions:

State 246:
## Known stack suffix:
## list(NEWLINE) EOF
## LR(1) items:
file -> list(NEWLINE) EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production file -> list(NEWLINE) EOF

State 247:
## Known stack suffix:
## file
## LR(1) items:
file' -> file . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept file

