%{
  open Why3
  open Ptree
  open Py_ast

  let () = Exn_printer.register (fun fmt exn -> match exn with
    | Error -> Format.fprintf fmt "syntax error"
    | _ -> raise exn)

  let floc s e = Loc.extract (s,e)
  let mk_id id s e = { id_str = id; id_ats = []; id_loc = floc s e }
  let mk_pat  d s e = { pat_desc  = d; pat_loc  = floc s e }
  let mk_term d s e = { term_desc = d; term_loc = floc s e }
  let mk_expr loc d = { expr_desc = d; expr_loc = loc }
  let mk_stmt loc d = Dstmt { stmt_desc = d; stmt_loc = loc }

  let variant_union v1 v2 = match v1, v2 with
    | _, [] -> v1
    | [], _ -> v2
    | _, ({term_loc = loc},_)::_ -> Loc.errorm ~loc
        "multiple `variant' clauses are not allowed"

  let get_op s e = Qident (mk_id (Ident.op_get "") s e)
  let upd_op s e = Qident (mk_id (Ident.op_update "") s e)

  let empty_spec = {
    sp_pre     = [];    sp_post    = [];  sp_xpost  = [];
    sp_reads   = [];    sp_writes  = [];  sp_alias  = [];
    sp_variant = [];
    sp_checkrw = false; sp_diverge = false; sp_partial = false;
  }

  let spec_union s1 s2 = {
    sp_pre     = s1.sp_pre @ s2.sp_pre;
    sp_post    = s1.sp_post @ s2.sp_post;
    sp_xpost   = s1.sp_xpost @ s2.sp_xpost;
    sp_reads   = s1.sp_reads @ s2.sp_reads;
    sp_writes  = s1.sp_writes @ s2.sp_writes;
    sp_alias   = s1.sp_alias @ s2.sp_alias;
    sp_variant = variant_union s1.sp_variant s2.sp_variant;
    sp_checkrw = s1.sp_checkrw || s2.sp_checkrw;
    sp_diverge = s1.sp_diverge || s2.sp_diverge;
    sp_partial = s1.sp_partial || s2.sp_partial;
  }

%}
%start file
%token AND
%token ARROW
%token ASSERT
%token ASSUME
%token BEGIN
%token BREAK
%token CHECK
%token <Py_ast.binop> CMP
%token COLON
%token COMMA
%token DEF
%token DIV
%token DOT
%token ELIF
%token ELSE
%token END
%token ENSURES
%token EOF
%token EQUAL
%token EXISTS
%token FALSE
%token FOR
%token FORALL
%token FROM
%token FUNCTION
%token <string> IDENT
%token IF
%token IMPORT
%token IN
%token <string> INTEGER
%token INVARIANT
%token LABEL
%token LARROW
%token LEFTPAR
%token LEFTSQ
%token LET
%token LRARROW
%token MINUS
%token MOD
%token NEWLINE
%token NONE
%token NOT
%token OR
%token PLUS
%token PREDICATE
%token REQUIRES
%token RETURN
%token RIGHTPAR
%token RIGHTSQ
%token <string> STRING
%token THEN
%token TIMES
%token TRUE
%token VARIANT
%token WHILE
%nonassoc IN
%nonassoc DOT ELSE
%right ARROW LRARROW
%right OR
%right AND
%nonassoc NOT
%right CMP
%left MINUS PLUS
%left DIV MOD TIMES
%nonassoc prec_prefix_op unary_minus
%nonassoc LEFTSQ
%type <Py_ast.file> file
%type <Py_ast.decl> stmt
%%

option_NEWLINE_:
  
    {    ( None )} [@name none_NEWLINE]
| x = NEWLINE
    {    ( Some x )} [@name some_NEWLINE]

loption_separated_nonempty_list_COMMA_expr__:
  
    {    ( [] )} [@name none_separated_nonempty_list_COMMA_expr_]
| x = separated_nonempty_list_COMMA_expr_
    {    ( x )} [@name some_separated_nonempty_list_COMMA_expr_]

loption_separated_nonempty_list_COMMA_ident__:
  
    {    ( [] )} [@name none_separated_nonempty_list_COMMA_ident_]
| x = separated_nonempty_list_COMMA_ident_
    {    ( x )} [@name some_separated_nonempty_list_COMMA_ident_]

loption_separated_nonempty_list_COMMA_term__:
  
    {    ( [] )} [@name none_separated_nonempty_list_COMMA_term_]
| x = separated_nonempty_list_COMMA_term_
    {    ( x )} [@name some_separated_nonempty_list_COMMA_term_]

list_NEWLINE_:
  
    {    ( [] )} [@name nil_NEWLINE]
| x = NEWLINE xs = list_NEWLINE_
    {    ( x :: xs )} [@name cons_NEWLINE]

nonempty_list_decl_:
  x = decl
    {    ( [ x ] )} [@name one_decl]
| x = decl xs = nonempty_list_decl_
    {    ( x :: xs )} [@name more_decl]

nonempty_list_stmt_:
  x = stmt
    {    ( [ x ] )} [@name one_stmt]
| x = stmt xs = nonempty_list_stmt_
    {    ( x :: xs )} [@name more_stmt]

separated_nonempty_list_COMMA_expr_:
  x = expr
    {    ( [ x ] )} [@name one_COMMA_expr]
| x = expr _2 = COMMA xs = separated_nonempty_list_COMMA_expr_
    {    ( x :: xs )} [@name more_COMMA_expr]

separated_nonempty_list_COMMA_ident_:
  x = ident
    {    ( [ x ] )} [@name one_COMMA_ident]
| x = ident _2 = COMMA xs = separated_nonempty_list_COMMA_ident_
    {    ( x :: xs )} [@name more_COMMA_ident]

separated_nonempty_list_COMMA_term_:
  x = term
    {    ( [ x ] )} [@name one_COMMA_term]
| x = term _2 = COMMA xs = separated_nonempty_list_COMMA_term_
    {    ( x :: xs )} [@name more_COMMA_term]

file:
  _1 = list_NEWLINE_ _2 = EOF
    {    ( [] )}
| _1 = option_NEWLINE_ dl = nonempty_list_decl_ _3 = option_NEWLINE_ _4 = EOF
    {    ( dl )}

decl:
  _1 = import
    {         ( _1 )}
| _1 = def
    {         ( _1 )}
| _1 = stmt
    {         ( _1 )}
| _1 = func
    {         ( _1 )}

import:
  _1 = FROM m = ident _3 = IMPORT xs = loption_separated_nonempty_list_COMMA_ident__ _5 = NEWLINE
    {let l =     ( xs ) in
  ( Dimport (m, l) )}

func:
  _1 = FUNCTION id = ident _3 = LEFTPAR xs = loption_separated_nonempty_list_COMMA_ident__ _5 = RIGHTPAR _6 = NEWLINE
    {let l =     ( xs ) in
  ( Dlogic (true, id, l) )}
| _1 = PREDICATE id = ident _3 = LEFTPAR xs = loption_separated_nonempty_list_COMMA_ident__ _5 = RIGHTPAR _6 = NEWLINE
    {let l =     ( xs ) in
  ( Dlogic (false, id, l) )}

def:
  _1 = DEF f = ident _3 = LEFTPAR xs = loption_separated_nonempty_list_COMMA_ident__ _5 = RIGHTPAR _6 = COLON _7 = NEWLINE _8 = BEGIN s = spec l = nonempty_list_stmt_ _11 = END
    {let x =     ( xs ) in
    ( Ddef (f, x, s, l) )}

spec:
  
    {                    ( empty_spec )}
| _1 = single_spec _2 = spec
    {                    ( spec_union _1 _2 )}

single_spec:
  _1 = REQUIRES t = term _3 = NEWLINE
    {    ( { empty_spec with sp_pre = [t] } )}
| _1 = ENSURES e = ensures _3 = NEWLINE
    {    ( { empty_spec with sp_post = [floc _startpos_e_ _endpos_e_, e] } )}
| _1 = variant
    {    ( { empty_spec with sp_variant = _1 } )}

ensures:
  _1 = term
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
    ( let id = mk_id "result" _startpos _endpos in
      [mk_pat (Pvar id) _startpos _endpos, _1] )}

expr:
  d = expr_desc
    {let _endpos = _endpos_d_ in
let _startpos = _startpos_d_ in
   ( mk_expr (floc _startpos _endpos) d )}

expr_desc:
  _1 = NONE
    {    ( Enone )}
| _1 = TRUE
    {    ( Ebool true )}
| _1 = FALSE
    {    ( Ebool false )}
| c = INTEGER
    {    ( Eint c )}
| s = STRING
    {    ( Estring s )}
| id = ident
    {    ( Eident id )}
| e1 = expr _2 = LEFTSQ e2 = expr _4 = RIGHTSQ
    {    ( Eget (e1, e2) )}
| _1 = MINUS e1 = expr %prec unary_minus
    {    ( Eunop (Uneg, e1) )}
| _1 = NOT e1 = expr
    {    ( Eunop (Unot, e1) )}
| e1 = expr _1 = PLUS e2 = expr
    {let o =         ( Badd ) in
    ( Ebinop (o, e1, e2) )}
| e1 = expr _1 = MINUS e2 = expr
    {let o =         ( Bsub ) in
    ( Ebinop (o, e1, e2) )}
| e1 = expr _1 = DIV e2 = expr
    {let o =         ( Bdiv ) in
    ( Ebinop (o, e1, e2) )}
| e1 = expr _1 = MOD e2 = expr
    {let o =         ( Bmod ) in
    ( Ebinop (o, e1, e2) )}
| e1 = expr c = CMP e2 = expr
    {let o =         ( c    ) in
    ( Ebinop (o, e1, e2) )}
| e1 = expr _1 = AND e2 = expr
    {let o =         ( Band ) in
    ( Ebinop (o, e1, e2) )}
| e1 = expr _1 = OR e2 = expr
    {let o =         ( Bor  ) in
    ( Ebinop (o, e1, e2) )}
| e1 = expr _2 = TIMES e2 = expr
    {    ( match e1.expr_desc with
      | Elist [e1] -> Emake (e1, e2)
      | _ -> Ebinop (Bmul, e1, e2) )}
| f = ident _2 = LEFTPAR xs = loption_separated_nonempty_list_COMMA_expr__ _4 = RIGHTPAR
    {let e =     ( xs ) in
    ( Ecall (f, e) )}
| _1 = LEFTSQ xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RIGHTSQ
    {let l =     ( xs ) in
    ( Elist l )}
| _1 = LEFTPAR e = expr _3 = RIGHTPAR
    {    ( e.expr_desc )}

located_simple_stmt_desc_:
  _1 = simple_stmt_desc
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
    ( mk_stmt (floc _startpos _endpos) _1 )}

located_stmt_desc_:
  _1 = stmt_desc
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
    ( mk_stmt (floc _startpos _endpos) _1 )}

suite:
  s = simple_stmt _2 = NEWLINE
    {    ( [s] )}
| _1 = NEWLINE _2 = BEGIN l = nonempty_list_stmt_ _4 = END
    {    ( l )}

stmt:
  _1 = located_stmt_desc_
    {                          ( _1 )}
| s = simple_stmt _2 = NEWLINE
    {                          ( s )}

stmt_desc:
  _1 = IF c = expr _3 = COLON s1 = suite s2 = else_branch
    {    ( Sif (c, s1, s2) )}
| _1 = WHILE e = expr _3 = COLON b = loop_body
    {    ( let i, v, l = b in Swhile (e, i, v, l) )}
| _1 = FOR x = ident _3 = IN e = expr _5 = COLON b = loop_body
    {    ( let i, _, l = b in Sfor (x, e, i, l) )}

else_branch:
  
    {    ( [] )}
| _1 = ELSE _2 = COLON s2 = suite
    {    ( s2 )}
| _1 = ELIF c = expr _3 = COLON s1 = suite s2 = else_branch
    {let _endpos = _endpos_s2_ in
let _startpos = _startpos__1_ in
    ( [mk_stmt (floc _startpos _endpos) (Sif (c, s1, s2))] )}

loop_body:
  s = simple_stmt _2 = NEWLINE
    {  ( [], [], [s] )}
| _1 = NEWLINE _2 = BEGIN a = loop_annotation l = nonempty_list_stmt_ _5 = END
    {  ( fst a, snd a, l )}

loop_annotation:
  
    {    ( [], [] )}
| _1 = invariant _2 = loop_annotation
    {    ( let (i, v) = _2 in (_1::i, v) )}
| _1 = variant _2 = loop_annotation
    {    ( let (i, v) = _2 in (i, variant_union _1 v) )}

invariant:
  _1 = INVARIANT i = term _3 = NEWLINE
    {                           ( i )}

variant:
  _1 = VARIANT l = comma_list1_term_ _3 = NEWLINE
    {                                      ( List.map (fun t -> t, None) l )}

simple_stmt:
  _1 = located_simple_stmt_desc_
    {                                       ( _1 )}

simple_stmt_desc:
  _1 = RETURN e = expr
    {    ( Sreturn e )}
| id = ident _2 = EQUAL e = expr
    {    ( Sassign (id, e) )}
| e1 = expr _2 = LEFTSQ e2 = expr _4 = RIGHTSQ _5 = EQUAL e3 = expr
    {    ( Sset (e1, e2, e3) )}
| k = assertion_kind t = term
    {    ( Sassert (k, t) )}
| e = expr
    {    ( Seval e )}
| _1 = BREAK
    {    ( Sbreak )}
| _1 = LABEL id = ident
    {    ( Slabel id )}

assertion_kind:
  _1 = ASSERT
    {          ( Expr.Assert )}
| _1 = ASSUME
    {          ( Expr.Assume )}
| _1 = CHECK
    {          ( Expr.Check )}

ident:
  id = IDENT
    {let _endpos = _endpos_id_ in
let _startpos = _startpos_id_ in
             ( mk_id id _startpos _endpos )}

mk_term_term__:
  d = term_
    {let _endpos = _endpos_d_ in
let _startpos = _startpos_d_ in
                  ( mk_term d _startpos _endpos )}

mk_term_term_arg__:
  d = term_arg_
    {let _endpos = _endpos_d_ in
let _startpos = _startpos_d_ in
                  ( mk_term d _startpos _endpos )}

term:
  t = mk_term_term__
    {                         ( t )}

term_:
  _1 = term_arg_
    {    ( match _1 with (* break the infix relation chain *)
      | Tinfix (l,o,r) -> Tinnfix (l,o,r)
      | Tbinop (l,o,r) -> Tbinnop (l,o,r)
      | d -> d )}
| _1 = NOT _2 = term
    {    ( Tnot _2 )}
| _1 = MINUS t = term %prec prec_prefix_op
    {let o =
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
          ( mk_id (Ident.op_prefix "-")  _startpos _endpos )
in
    ( Tidapp (Qident o, [t]) )}
| l = term _1 = ARROW r = term
    {let o =           ( Dterm.DTimplies ) in
    ( Tbinop (l, o, r) )}
| l = term _1 = LRARROW r = term
    {let o =           ( Dterm.DTiff ) in
    ( Tbinop (l, o, r) )}
| l = term _1 = OR r = term
    {let o =           ( Dterm.DTor ) in
    ( Tbinop (l, o, r) )}
| l = term _1 = AND r = term
    {let o =           ( Dterm.DTand ) in
    ( Tbinop (l, o, r) )}
| l = term c = CMP r = term
    {let o =
  let _endpos = _endpos_c_ in
  let _startpos = _startpos_c_ in
           ( let op = match c with
          | Beq  -> "="
          | Bneq -> "<>"
          | Blt  -> "<"
          | Ble  -> "<="
          | Bgt  -> ">"
          | Bge  -> ">="
          | Badd|Bsub|Bmul|Bdiv|Bmod|Band|Bor -> assert false in
           mk_id (Ident.op_infix op) _startpos _endpos )
in
    ( Tinfix (l, o, r) )}
| l = term _1 = DIV r = term
    {let o =
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
           ( mk_id "div" _startpos _endpos )
in
    ( Tidapp (Qident o, [l; r]) )}
| l = term _1 = MOD r = term
    {let o =
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
           ( mk_id "mod" _startpos _endpos )
in
    ( Tidapp (Qident o, [l; r]) )}
| l = term _1 = PLUS r = term
    {let o =
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
           ( mk_id (Ident.op_infix "+") _startpos _endpos )
in
    ( Tidapp (Qident o, [l; r]) )}
| l = term _1 = MINUS r = term
    {let o =
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
           ( mk_id (Ident.op_infix "-") _startpos _endpos )
in
    ( Tidapp (Qident o, [l; r]) )}
| l = term _1 = TIMES r = term
    {let o =
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
           ( mk_id (Ident.op_infix "*") _startpos _endpos )
in
    ( Tidapp (Qident o, [l; r]) )}
| _1 = IF _2 = term _3 = THEN _4 = term _5 = ELSE _6 = term
    {    ( Tif (_2, _4, _6) )}
| _1 = LET id = ident _3 = EQUAL t1 = term _5 = IN t2 = term
    {    ( Tlet (id, t1, t2) )}
| q = quant l = comma_list1_ident_ _3 = DOT t = term
    {    ( let var id = id.id_loc, Some id, false, None in
      Tquant (q, List.map var l, [], t) )}
| id = ident _2 = LEFTPAR xs = loption_separated_nonempty_list_COMMA_term__ _4 = RIGHTPAR
    {let l =     ( xs ) in
    ( Tidapp (Qident id, l) )}

quant:
  _1 = FORALL
    {          ( Dterm.DTforall )}
| _1 = EXISTS
    {          ( Dterm.DTexists )}

term_arg:
  _1 = mk_term_term_arg__
    {                             ( _1 )}

term_arg_:
  _1 = ident
    {              ( Tident (Qident _1) )}
| _1 = INTEGER
    {              ( Tconst (Number.(ConstInt { ic_negative = false ; ic_abs = int_literal_dec _1})) )}
| _1 = NONE
    {              ( Ttuple [] )}
| _1 = TRUE
    {              ( Ttrue )}
| _1 = FALSE
    {              ( Tfalse )}
| _1 = term_sub_
    {                            ( _1 )}

term_sub_:
  _1 = LEFTPAR _2 = term _3 = RIGHTPAR
    {                                                    ( _2.term_desc )}
| _1 = term_arg _2 = LEFTSQ _3 = term _4 = RIGHTSQ
    {    ( Tidapp (get_op _startpos__2_ _endpos__2_, [_1;_3]) )}
| _1 = term_arg _2 = LEFTSQ _3 = term _4 = LARROW _5 = term _6 = RIGHTSQ
    {    ( Tidapp (upd_op _startpos__2_ _endpos__2_, [_1;_3;_5]) )}

comma_list1_ident_:
  _1 = separated_nonempty_list_COMMA_ident_
    {                                    ( _1 )}

comma_list1_term_:
  _1 = separated_nonempty_list_COMMA_term_
    {                                    ( _1 )}

%%
