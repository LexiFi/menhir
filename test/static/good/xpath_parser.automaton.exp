State 0:
expr' -> . expr [ # ]
-- On VAR shift to state 1
-- On SLASH shift to state 2
-- On NUMBER shift to state 14
-- On NODE_TYPE shift to state 3
-- On NAME_TEST shift to state 7
-- On MINUS shift to state 15
-- On LPAREN shift to state 16
-- On LITERAL shift to state 17
-- On FUNCTION_NAME shift to state 18
-- On DOUBLESLASH shift to state 20
-- On DOUBLEDOT shift to state 8
-- On DOT shift to state 9
-- On AXIS shift to state 10
-- On AT shift to state 11
-- On union_expr shift to state 30
-- On unary_expr shift to state 41
-- On step2 shift to state 12
-- On step shift to state 21
-- On relative_location_path shift to state 32
-- On relational_expr shift to state 42
-- On primary_expr shift to state 33
-- On path_expr shift to state 44
-- On or_expr shift to state 91
-- On node_test shift to state 25
-- On multiplicative_expr shift to state 45
-- On location_path shift to state 35
-- On function_call shift to state 36
-- On filter_expr shift to state 37
-- On expr shift to state 92
-- On equality_expr shift to state 66
-- On axis_specifier shift to state 26
-- On and_expr shift to state 77
-- On additive_expr shift to state 69
-- On absolute_location_path shift to state 48

State 1:
primary_expr -> VAR . [ SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT LBRACKET GTE GT EQUAL DOUBLESLASH DIV COMMA AND # ]
-- On SLASH reduce production primary_expr -> VAR
-- On RPAREN reduce production primary_expr -> VAR
-- On RBRACKET reduce production primary_expr -> VAR
-- On PLUS reduce production primary_expr -> VAR
-- On PIPE reduce production primary_expr -> VAR
-- On OR reduce production primary_expr -> VAR
-- On NOTEQUAL reduce production primary_expr -> VAR
-- On MUL reduce production primary_expr -> VAR
-- On MOD reduce production primary_expr -> VAR
-- On MINUS reduce production primary_expr -> VAR
-- On LTE reduce production primary_expr -> VAR
-- On LT reduce production primary_expr -> VAR
-- On LBRACKET reduce production primary_expr -> VAR
-- On GTE reduce production primary_expr -> VAR
-- On GT reduce production primary_expr -> VAR
-- On EQUAL reduce production primary_expr -> VAR
-- On DOUBLESLASH reduce production primary_expr -> VAR
-- On DIV reduce production primary_expr -> VAR
-- On COMMA reduce production primary_expr -> VAR
-- On AND reduce production primary_expr -> VAR
-- On # reduce production primary_expr -> VAR

State 2:
absolute_location_path -> SLASH . [ RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND # ]
absolute_location_path -> SLASH . relative_location_path [ RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND # ]
-- On NODE_TYPE shift to state 3
-- On NAME_TEST shift to state 7
-- On DOUBLEDOT shift to state 8
-- On DOT shift to state 9
-- On AXIS shift to state 10
-- On AT shift to state 11
-- On step2 shift to state 12
-- On step shift to state 21
-- On relative_location_path shift to state 90
-- On node_test shift to state 25
-- On axis_specifier shift to state 26
-- On RPAREN reduce production absolute_location_path -> SLASH
-- On RBRACKET reduce production absolute_location_path -> SLASH
-- On PLUS reduce production absolute_location_path -> SLASH
-- On PIPE reduce production absolute_location_path -> SLASH
-- On OR reduce production absolute_location_path -> SLASH
-- On NOTEQUAL reduce production absolute_location_path -> SLASH
-- On MUL reduce production absolute_location_path -> SLASH
-- On MOD reduce production absolute_location_path -> SLASH
-- On MINUS reduce production absolute_location_path -> SLASH
-- On LTE reduce production absolute_location_path -> SLASH
-- On LT reduce production absolute_location_path -> SLASH
-- On GTE reduce production absolute_location_path -> SLASH
-- On GT reduce production absolute_location_path -> SLASH
-- On EQUAL reduce production absolute_location_path -> SLASH
-- On DIV reduce production absolute_location_path -> SLASH
-- On COMMA reduce production absolute_location_path -> SLASH
-- On AND reduce production absolute_location_path -> SLASH
-- On # reduce production absolute_location_path -> SLASH

State 3:
node_test -> NODE_TYPE . RPAREN [ SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT LBRACKET GTE GT EQUAL DOUBLESLASH DIV COMMA AND # ]
node_test -> NODE_TYPE . LITERAL RPAREN [ SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT LBRACKET GTE GT EQUAL DOUBLESLASH DIV COMMA AND # ]
-- On RPAREN shift to state 4
-- On LITERAL shift to state 5

State 4:
node_test -> NODE_TYPE RPAREN . [ SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT LBRACKET GTE GT EQUAL DOUBLESLASH DIV COMMA AND # ]
-- On SLASH reduce production node_test -> NODE_TYPE RPAREN
-- On RPAREN reduce production node_test -> NODE_TYPE RPAREN
-- On RBRACKET reduce production node_test -> NODE_TYPE RPAREN
-- On PLUS reduce production node_test -> NODE_TYPE RPAREN
-- On PIPE reduce production node_test -> NODE_TYPE RPAREN
-- On OR reduce production node_test -> NODE_TYPE RPAREN
-- On NOTEQUAL reduce production node_test -> NODE_TYPE RPAREN
-- On MUL reduce production node_test -> NODE_TYPE RPAREN
-- On MOD reduce production node_test -> NODE_TYPE RPAREN
-- On MINUS reduce production node_test -> NODE_TYPE RPAREN
-- On LTE reduce production node_test -> NODE_TYPE RPAREN
-- On LT reduce production node_test -> NODE_TYPE RPAREN
-- On LBRACKET reduce production node_test -> NODE_TYPE RPAREN
-- On GTE reduce production node_test -> NODE_TYPE RPAREN
-- On GT reduce production node_test -> NODE_TYPE RPAREN
-- On EQUAL reduce production node_test -> NODE_TYPE RPAREN
-- On DOUBLESLASH reduce production node_test -> NODE_TYPE RPAREN
-- On DIV reduce production node_test -> NODE_TYPE RPAREN
-- On COMMA reduce production node_test -> NODE_TYPE RPAREN
-- On AND reduce production node_test -> NODE_TYPE RPAREN
-- On # reduce production node_test -> NODE_TYPE RPAREN

State 5:
node_test -> NODE_TYPE LITERAL . RPAREN [ SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT LBRACKET GTE GT EQUAL DOUBLESLASH DIV COMMA AND # ]
-- On RPAREN shift to state 6

State 6:
node_test -> NODE_TYPE LITERAL RPAREN . [ SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT LBRACKET GTE GT EQUAL DOUBLESLASH DIV COMMA AND # ]
-- On SLASH reduce production node_test -> NODE_TYPE LITERAL RPAREN
-- On RPAREN reduce production node_test -> NODE_TYPE LITERAL RPAREN
-- On RBRACKET reduce production node_test -> NODE_TYPE LITERAL RPAREN
-- On PLUS reduce production node_test -> NODE_TYPE LITERAL RPAREN
-- On PIPE reduce production node_test -> NODE_TYPE LITERAL RPAREN
-- On OR reduce production node_test -> NODE_TYPE LITERAL RPAREN
-- On NOTEQUAL reduce production node_test -> NODE_TYPE LITERAL RPAREN
-- On MUL reduce production node_test -> NODE_TYPE LITERAL RPAREN
-- On MOD reduce production node_test -> NODE_TYPE LITERAL RPAREN
-- On MINUS reduce production node_test -> NODE_TYPE LITERAL RPAREN
-- On LTE reduce production node_test -> NODE_TYPE LITERAL RPAREN
-- On LT reduce production node_test -> NODE_TYPE LITERAL RPAREN
-- On LBRACKET reduce production node_test -> NODE_TYPE LITERAL RPAREN
-- On GTE reduce production node_test -> NODE_TYPE LITERAL RPAREN
-- On GT reduce production node_test -> NODE_TYPE LITERAL RPAREN
-- On EQUAL reduce production node_test -> NODE_TYPE LITERAL RPAREN
-- On DOUBLESLASH reduce production node_test -> NODE_TYPE LITERAL RPAREN
-- On DIV reduce production node_test -> NODE_TYPE LITERAL RPAREN
-- On COMMA reduce production node_test -> NODE_TYPE LITERAL RPAREN
-- On AND reduce production node_test -> NODE_TYPE LITERAL RPAREN
-- On # reduce production node_test -> NODE_TYPE LITERAL RPAREN

State 7:
node_test -> NAME_TEST . [ SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT LBRACKET GTE GT EQUAL DOUBLESLASH DIV COMMA AND # ]
-- On SLASH reduce production node_test -> NAME_TEST
-- On RPAREN reduce production node_test -> NAME_TEST
-- On RBRACKET reduce production node_test -> NAME_TEST
-- On PLUS reduce production node_test -> NAME_TEST
-- On PIPE reduce production node_test -> NAME_TEST
-- On OR reduce production node_test -> NAME_TEST
-- On NOTEQUAL reduce production node_test -> NAME_TEST
-- On MUL reduce production node_test -> NAME_TEST
-- On MOD reduce production node_test -> NAME_TEST
-- On MINUS reduce production node_test -> NAME_TEST
-- On LTE reduce production node_test -> NAME_TEST
-- On LT reduce production node_test -> NAME_TEST
-- On LBRACKET reduce production node_test -> NAME_TEST
-- On GTE reduce production node_test -> NAME_TEST
-- On GT reduce production node_test -> NAME_TEST
-- On EQUAL reduce production node_test -> NAME_TEST
-- On DOUBLESLASH reduce production node_test -> NAME_TEST
-- On DIV reduce production node_test -> NAME_TEST
-- On COMMA reduce production node_test -> NAME_TEST
-- On AND reduce production node_test -> NAME_TEST
-- On # reduce production node_test -> NAME_TEST

State 8:
step -> DOUBLEDOT . [ SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DOUBLESLASH DIV COMMA AND # ]
-- On SLASH reduce production step -> DOUBLEDOT
-- On RPAREN reduce production step -> DOUBLEDOT
-- On RBRACKET reduce production step -> DOUBLEDOT
-- On PLUS reduce production step -> DOUBLEDOT
-- On PIPE reduce production step -> DOUBLEDOT
-- On OR reduce production step -> DOUBLEDOT
-- On NOTEQUAL reduce production step -> DOUBLEDOT
-- On MUL reduce production step -> DOUBLEDOT
-- On MOD reduce production step -> DOUBLEDOT
-- On MINUS reduce production step -> DOUBLEDOT
-- On LTE reduce production step -> DOUBLEDOT
-- On LT reduce production step -> DOUBLEDOT
-- On GTE reduce production step -> DOUBLEDOT
-- On GT reduce production step -> DOUBLEDOT
-- On EQUAL reduce production step -> DOUBLEDOT
-- On DOUBLESLASH reduce production step -> DOUBLEDOT
-- On DIV reduce production step -> DOUBLEDOT
-- On COMMA reduce production step -> DOUBLEDOT
-- On AND reduce production step -> DOUBLEDOT
-- On # reduce production step -> DOUBLEDOT

State 9:
step -> DOT . [ SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DOUBLESLASH DIV COMMA AND # ]
-- On SLASH reduce production step -> DOT
-- On RPAREN reduce production step -> DOT
-- On RBRACKET reduce production step -> DOT
-- On PLUS reduce production step -> DOT
-- On PIPE reduce production step -> DOT
-- On OR reduce production step -> DOT
-- On NOTEQUAL reduce production step -> DOT
-- On MUL reduce production step -> DOT
-- On MOD reduce production step -> DOT
-- On MINUS reduce production step -> DOT
-- On LTE reduce production step -> DOT
-- On LT reduce production step -> DOT
-- On GTE reduce production step -> DOT
-- On GT reduce production step -> DOT
-- On EQUAL reduce production step -> DOT
-- On DOUBLESLASH reduce production step -> DOT
-- On DIV reduce production step -> DOT
-- On COMMA reduce production step -> DOT
-- On AND reduce production step -> DOT
-- On # reduce production step -> DOT

State 10:
axis_specifier -> AXIS . [ NODE_TYPE NAME_TEST ]
-- On NODE_TYPE reduce production axis_specifier -> AXIS
-- On NAME_TEST reduce production axis_specifier -> AXIS

State 11:
axis_specifier -> AT . [ NODE_TYPE NAME_TEST ]
-- On NODE_TYPE reduce production axis_specifier -> AT
-- On NAME_TEST reduce production axis_specifier -> AT

State 12:
step -> step2 . [ SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DOUBLESLASH DIV COMMA AND # ]
step2 -> step2 . LBRACKET expr RBRACKET [ SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT LBRACKET GTE GT EQUAL DOUBLESLASH DIV COMMA AND # ]
-- On LBRACKET shift to state 13
-- On SLASH reduce production step -> step2
-- On RPAREN reduce production step -> step2
-- On RBRACKET reduce production step -> step2
-- On PLUS reduce production step -> step2
-- On PIPE reduce production step -> step2
-- On OR reduce production step -> step2
-- On NOTEQUAL reduce production step -> step2
-- On MUL reduce production step -> step2
-- On MOD reduce production step -> step2
-- On MINUS reduce production step -> step2
-- On LTE reduce production step -> step2
-- On LT reduce production step -> step2
-- On GTE reduce production step -> step2
-- On GT reduce production step -> step2
-- On EQUAL reduce production step -> step2
-- On DOUBLESLASH reduce production step -> step2
-- On DIV reduce production step -> step2
-- On COMMA reduce production step -> step2
-- On AND reduce production step -> step2
-- On # reduce production step -> step2

State 13:
step2 -> step2 LBRACKET . expr RBRACKET [ SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT LBRACKET GTE GT EQUAL DOUBLESLASH DIV COMMA AND # ]
-- On VAR shift to state 1
-- On SLASH shift to state 2
-- On NUMBER shift to state 14
-- On NODE_TYPE shift to state 3
-- On NAME_TEST shift to state 7
-- On MINUS shift to state 15
-- On LPAREN shift to state 16
-- On LITERAL shift to state 17
-- On FUNCTION_NAME shift to state 18
-- On DOUBLESLASH shift to state 20
-- On DOUBLEDOT shift to state 8
-- On DOT shift to state 9
-- On AXIS shift to state 10
-- On AT shift to state 11
-- On union_expr shift to state 30
-- On unary_expr shift to state 41
-- On step2 shift to state 12
-- On step shift to state 21
-- On relative_location_path shift to state 32
-- On relational_expr shift to state 42
-- On primary_expr shift to state 33
-- On path_expr shift to state 44
-- On or_expr shift to state 64
-- On node_test shift to state 25
-- On multiplicative_expr shift to state 45
-- On location_path shift to state 35
-- On function_call shift to state 36
-- On filter_expr shift to state 37
-- On expr shift to state 88
-- On equality_expr shift to state 66
-- On axis_specifier shift to state 26
-- On and_expr shift to state 77
-- On additive_expr shift to state 69
-- On absolute_location_path shift to state 48

State 14:
primary_expr -> NUMBER . [ SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT LBRACKET GTE GT EQUAL DOUBLESLASH DIV COMMA AND # ]
-- On SLASH reduce production primary_expr -> NUMBER
-- On RPAREN reduce production primary_expr -> NUMBER
-- On RBRACKET reduce production primary_expr -> NUMBER
-- On PLUS reduce production primary_expr -> NUMBER
-- On PIPE reduce production primary_expr -> NUMBER
-- On OR reduce production primary_expr -> NUMBER
-- On NOTEQUAL reduce production primary_expr -> NUMBER
-- On MUL reduce production primary_expr -> NUMBER
-- On MOD reduce production primary_expr -> NUMBER
-- On MINUS reduce production primary_expr -> NUMBER
-- On LTE reduce production primary_expr -> NUMBER
-- On LT reduce production primary_expr -> NUMBER
-- On LBRACKET reduce production primary_expr -> NUMBER
-- On GTE reduce production primary_expr -> NUMBER
-- On GT reduce production primary_expr -> NUMBER
-- On EQUAL reduce production primary_expr -> NUMBER
-- On DOUBLESLASH reduce production primary_expr -> NUMBER
-- On DIV reduce production primary_expr -> NUMBER
-- On COMMA reduce production primary_expr -> NUMBER
-- On AND reduce production primary_expr -> NUMBER
-- On # reduce production primary_expr -> NUMBER

State 15:
unary_expr -> MINUS . unary_expr [ RPAREN RBRACKET PLUS OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND # ]
-- On VAR shift to state 1
-- On SLASH shift to state 2
-- On NUMBER shift to state 14
-- On NODE_TYPE shift to state 3
-- On NAME_TEST shift to state 7
-- On MINUS shift to state 15
-- On LPAREN shift to state 16
-- On LITERAL shift to state 17
-- On FUNCTION_NAME shift to state 18
-- On DOUBLESLASH shift to state 20
-- On DOUBLEDOT shift to state 8
-- On DOT shift to state 9
-- On AXIS shift to state 10
-- On AT shift to state 11
-- On union_expr shift to state 30
-- On unary_expr shift to state 87
-- On step2 shift to state 12
-- On step shift to state 21
-- On relative_location_path shift to state 32
-- On primary_expr shift to state 33
-- On path_expr shift to state 44
-- On node_test shift to state 25
-- On location_path shift to state 35
-- On function_call shift to state 36
-- On filter_expr shift to state 37
-- On axis_specifier shift to state 26
-- On absolute_location_path shift to state 48

State 16:
primary_expr -> LPAREN . expr RPAREN [ SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT LBRACKET GTE GT EQUAL DOUBLESLASH DIV COMMA AND # ]
-- On VAR shift to state 1
-- On SLASH shift to state 2
-- On NUMBER shift to state 14
-- On NODE_TYPE shift to state 3
-- On NAME_TEST shift to state 7
-- On MINUS shift to state 15
-- On LPAREN shift to state 16
-- On LITERAL shift to state 17
-- On FUNCTION_NAME shift to state 18
-- On DOUBLESLASH shift to state 20
-- On DOUBLEDOT shift to state 8
-- On DOT shift to state 9
-- On AXIS shift to state 10
-- On AT shift to state 11
-- On union_expr shift to state 30
-- On unary_expr shift to state 41
-- On step2 shift to state 12
-- On step shift to state 21
-- On relative_location_path shift to state 32
-- On relational_expr shift to state 42
-- On primary_expr shift to state 33
-- On path_expr shift to state 44
-- On or_expr shift to state 64
-- On node_test shift to state 25
-- On multiplicative_expr shift to state 45
-- On location_path shift to state 35
-- On function_call shift to state 36
-- On filter_expr shift to state 37
-- On expr shift to state 85
-- On equality_expr shift to state 66
-- On axis_specifier shift to state 26
-- On and_expr shift to state 77
-- On additive_expr shift to state 69
-- On absolute_location_path shift to state 48

State 17:
primary_expr -> LITERAL . [ SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT LBRACKET GTE GT EQUAL DOUBLESLASH DIV COMMA AND # ]
-- On SLASH reduce production primary_expr -> LITERAL
-- On RPAREN reduce production primary_expr -> LITERAL
-- On RBRACKET reduce production primary_expr -> LITERAL
-- On PLUS reduce production primary_expr -> LITERAL
-- On PIPE reduce production primary_expr -> LITERAL
-- On OR reduce production primary_expr -> LITERAL
-- On NOTEQUAL reduce production primary_expr -> LITERAL
-- On MUL reduce production primary_expr -> LITERAL
-- On MOD reduce production primary_expr -> LITERAL
-- On MINUS reduce production primary_expr -> LITERAL
-- On LTE reduce production primary_expr -> LITERAL
-- On LT reduce production primary_expr -> LITERAL
-- On LBRACKET reduce production primary_expr -> LITERAL
-- On GTE reduce production primary_expr -> LITERAL
-- On GT reduce production primary_expr -> LITERAL
-- On EQUAL reduce production primary_expr -> LITERAL
-- On DOUBLESLASH reduce production primary_expr -> LITERAL
-- On DIV reduce production primary_expr -> LITERAL
-- On COMMA reduce production primary_expr -> LITERAL
-- On AND reduce production primary_expr -> LITERAL
-- On # reduce production primary_expr -> LITERAL

State 18:
function_call -> FUNCTION_NAME . RPAREN [ SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT LBRACKET GTE GT EQUAL DOUBLESLASH DIV COMMA AND # ]
function_call -> FUNCTION_NAME . arguments RPAREN [ SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT LBRACKET GTE GT EQUAL DOUBLESLASH DIV COMMA AND # ]
-- On VAR shift to state 1
-- On SLASH shift to state 2
-- On RPAREN shift to state 19
-- On NUMBER shift to state 14
-- On NODE_TYPE shift to state 3
-- On NAME_TEST shift to state 7
-- On MINUS shift to state 15
-- On LPAREN shift to state 16
-- On LITERAL shift to state 17
-- On FUNCTION_NAME shift to state 18
-- On DOUBLESLASH shift to state 20
-- On DOUBLEDOT shift to state 8
-- On DOT shift to state 9
-- On AXIS shift to state 10
-- On AT shift to state 11
-- On union_expr shift to state 30
-- On unary_expr shift to state 41
-- On step2 shift to state 12
-- On step shift to state 21
-- On relative_location_path shift to state 32
-- On relational_expr shift to state 42
-- On primary_expr shift to state 33
-- On path_expr shift to state 44
-- On or_expr shift to state 64
-- On node_test shift to state 25
-- On multiplicative_expr shift to state 45
-- On location_path shift to state 35
-- On function_call shift to state 36
-- On filter_expr shift to state 37
-- On expr shift to state 80
-- On equality_expr shift to state 66
-- On axis_specifier shift to state 26
-- On arguments shift to state 81
-- On and_expr shift to state 77
-- On additive_expr shift to state 69
-- On absolute_location_path shift to state 48

State 19:
function_call -> FUNCTION_NAME RPAREN . [ SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT LBRACKET GTE GT EQUAL DOUBLESLASH DIV COMMA AND # ]
-- On SLASH reduce production function_call -> FUNCTION_NAME RPAREN
-- On RPAREN reduce production function_call -> FUNCTION_NAME RPAREN
-- On RBRACKET reduce production function_call -> FUNCTION_NAME RPAREN
-- On PLUS reduce production function_call -> FUNCTION_NAME RPAREN
-- On PIPE reduce production function_call -> FUNCTION_NAME RPAREN
-- On OR reduce production function_call -> FUNCTION_NAME RPAREN
-- On NOTEQUAL reduce production function_call -> FUNCTION_NAME RPAREN
-- On MUL reduce production function_call -> FUNCTION_NAME RPAREN
-- On MOD reduce production function_call -> FUNCTION_NAME RPAREN
-- On MINUS reduce production function_call -> FUNCTION_NAME RPAREN
-- On LTE reduce production function_call -> FUNCTION_NAME RPAREN
-- On LT reduce production function_call -> FUNCTION_NAME RPAREN
-- On LBRACKET reduce production function_call -> FUNCTION_NAME RPAREN
-- On GTE reduce production function_call -> FUNCTION_NAME RPAREN
-- On GT reduce production function_call -> FUNCTION_NAME RPAREN
-- On EQUAL reduce production function_call -> FUNCTION_NAME RPAREN
-- On DOUBLESLASH reduce production function_call -> FUNCTION_NAME RPAREN
-- On DIV reduce production function_call -> FUNCTION_NAME RPAREN
-- On COMMA reduce production function_call -> FUNCTION_NAME RPAREN
-- On AND reduce production function_call -> FUNCTION_NAME RPAREN
-- On # reduce production function_call -> FUNCTION_NAME RPAREN

State 20:
absolute_location_path -> DOUBLESLASH . relative_location_path [ RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND # ]
-- On NODE_TYPE shift to state 3
-- On NAME_TEST shift to state 7
-- On DOUBLEDOT shift to state 8
-- On DOT shift to state 9
-- On AXIS shift to state 10
-- On AT shift to state 11
-- On step2 shift to state 12
-- On step shift to state 21
-- On relative_location_path shift to state 22
-- On node_test shift to state 25
-- On axis_specifier shift to state 26

State 21:
relative_location_path -> step . [ SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DOUBLESLASH DIV COMMA AND # ]
-- On SLASH reduce production relative_location_path -> step
-- On RPAREN reduce production relative_location_path -> step
-- On RBRACKET reduce production relative_location_path -> step
-- On PLUS reduce production relative_location_path -> step
-- On PIPE reduce production relative_location_path -> step
-- On OR reduce production relative_location_path -> step
-- On NOTEQUAL reduce production relative_location_path -> step
-- On MUL reduce production relative_location_path -> step
-- On MOD reduce production relative_location_path -> step
-- On MINUS reduce production relative_location_path -> step
-- On LTE reduce production relative_location_path -> step
-- On LT reduce production relative_location_path -> step
-- On GTE reduce production relative_location_path -> step
-- On GT reduce production relative_location_path -> step
-- On EQUAL reduce production relative_location_path -> step
-- On DOUBLESLASH reduce production relative_location_path -> step
-- On DIV reduce production relative_location_path -> step
-- On COMMA reduce production relative_location_path -> step
-- On AND reduce production relative_location_path -> step
-- On # reduce production relative_location_path -> step

State 22:
absolute_location_path -> DOUBLESLASH relative_location_path . [ RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND # ]
relative_location_path -> relative_location_path . SLASH step [ SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DOUBLESLASH DIV COMMA AND # ]
relative_location_path -> relative_location_path . DOUBLESLASH step [ SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DOUBLESLASH DIV COMMA AND # ]
-- On SLASH shift to state 23
-- On DOUBLESLASH shift to state 28
-- On RPAREN reduce production absolute_location_path -> DOUBLESLASH relative_location_path
-- On RBRACKET reduce production absolute_location_path -> DOUBLESLASH relative_location_path
-- On PLUS reduce production absolute_location_path -> DOUBLESLASH relative_location_path
-- On PIPE reduce production absolute_location_path -> DOUBLESLASH relative_location_path
-- On OR reduce production absolute_location_path -> DOUBLESLASH relative_location_path
-- On NOTEQUAL reduce production absolute_location_path -> DOUBLESLASH relative_location_path
-- On MUL reduce production absolute_location_path -> DOUBLESLASH relative_location_path
-- On MOD reduce production absolute_location_path -> DOUBLESLASH relative_location_path
-- On MINUS reduce production absolute_location_path -> DOUBLESLASH relative_location_path
-- On LTE reduce production absolute_location_path -> DOUBLESLASH relative_location_path
-- On LT reduce production absolute_location_path -> DOUBLESLASH relative_location_path
-- On GTE reduce production absolute_location_path -> DOUBLESLASH relative_location_path
-- On GT reduce production absolute_location_path -> DOUBLESLASH relative_location_path
-- On EQUAL reduce production absolute_location_path -> DOUBLESLASH relative_location_path
-- On DIV reduce production absolute_location_path -> DOUBLESLASH relative_location_path
-- On COMMA reduce production absolute_location_path -> DOUBLESLASH relative_location_path
-- On AND reduce production absolute_location_path -> DOUBLESLASH relative_location_path
-- On # reduce production absolute_location_path -> DOUBLESLASH relative_location_path

State 23:
relative_location_path -> relative_location_path SLASH . step [ SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DOUBLESLASH DIV COMMA AND # ]
-- On NODE_TYPE shift to state 3
-- On NAME_TEST shift to state 7
-- On DOUBLEDOT shift to state 8
-- On DOT shift to state 9
-- On AXIS shift to state 10
-- On AT shift to state 11
-- On step2 shift to state 12
-- On step shift to state 24
-- On node_test shift to state 25
-- On axis_specifier shift to state 26

State 24:
relative_location_path -> relative_location_path SLASH step . [ SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DOUBLESLASH DIV COMMA AND # ]
-- On SLASH reduce production relative_location_path -> relative_location_path SLASH step
-- On RPAREN reduce production relative_location_path -> relative_location_path SLASH step
-- On RBRACKET reduce production relative_location_path -> relative_location_path SLASH step
-- On PLUS reduce production relative_location_path -> relative_location_path SLASH step
-- On PIPE reduce production relative_location_path -> relative_location_path SLASH step
-- On OR reduce production relative_location_path -> relative_location_path SLASH step
-- On NOTEQUAL reduce production relative_location_path -> relative_location_path SLASH step
-- On MUL reduce production relative_location_path -> relative_location_path SLASH step
-- On MOD reduce production relative_location_path -> relative_location_path SLASH step
-- On MINUS reduce production relative_location_path -> relative_location_path SLASH step
-- On LTE reduce production relative_location_path -> relative_location_path SLASH step
-- On LT reduce production relative_location_path -> relative_location_path SLASH step
-- On GTE reduce production relative_location_path -> relative_location_path SLASH step
-- On GT reduce production relative_location_path -> relative_location_path SLASH step
-- On EQUAL reduce production relative_location_path -> relative_location_path SLASH step
-- On DOUBLESLASH reduce production relative_location_path -> relative_location_path SLASH step
-- On DIV reduce production relative_location_path -> relative_location_path SLASH step
-- On COMMA reduce production relative_location_path -> relative_location_path SLASH step
-- On AND reduce production relative_location_path -> relative_location_path SLASH step
-- On # reduce production relative_location_path -> relative_location_path SLASH step

State 25:
step2 -> node_test . [ SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT LBRACKET GTE GT EQUAL DOUBLESLASH DIV COMMA AND # ]
-- On SLASH reduce production step2 -> node_test
-- On RPAREN reduce production step2 -> node_test
-- On RBRACKET reduce production step2 -> node_test
-- On PLUS reduce production step2 -> node_test
-- On PIPE reduce production step2 -> node_test
-- On OR reduce production step2 -> node_test
-- On NOTEQUAL reduce production step2 -> node_test
-- On MUL reduce production step2 -> node_test
-- On MOD reduce production step2 -> node_test
-- On MINUS reduce production step2 -> node_test
-- On LTE reduce production step2 -> node_test
-- On LT reduce production step2 -> node_test
-- On LBRACKET reduce production step2 -> node_test
-- On GTE reduce production step2 -> node_test
-- On GT reduce production step2 -> node_test
-- On EQUAL reduce production step2 -> node_test
-- On DOUBLESLASH reduce production step2 -> node_test
-- On DIV reduce production step2 -> node_test
-- On COMMA reduce production step2 -> node_test
-- On AND reduce production step2 -> node_test
-- On # reduce production step2 -> node_test

State 26:
step -> axis_specifier . step2 [ SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DOUBLESLASH DIV COMMA AND # ]
-- On NODE_TYPE shift to state 3
-- On NAME_TEST shift to state 7
-- On step2 shift to state 27
-- On node_test shift to state 25

State 27:
step -> axis_specifier step2 . [ SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DOUBLESLASH DIV COMMA AND # ]
step2 -> step2 . LBRACKET expr RBRACKET [ SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT LBRACKET GTE GT EQUAL DOUBLESLASH DIV COMMA AND # ]
-- On LBRACKET shift to state 13
-- On SLASH reduce production step -> axis_specifier step2
-- On RPAREN reduce production step -> axis_specifier step2
-- On RBRACKET reduce production step -> axis_specifier step2
-- On PLUS reduce production step -> axis_specifier step2
-- On PIPE reduce production step -> axis_specifier step2
-- On OR reduce production step -> axis_specifier step2
-- On NOTEQUAL reduce production step -> axis_specifier step2
-- On MUL reduce production step -> axis_specifier step2
-- On MOD reduce production step -> axis_specifier step2
-- On MINUS reduce production step -> axis_specifier step2
-- On LTE reduce production step -> axis_specifier step2
-- On LT reduce production step -> axis_specifier step2
-- On GTE reduce production step -> axis_specifier step2
-- On GT reduce production step -> axis_specifier step2
-- On EQUAL reduce production step -> axis_specifier step2
-- On DOUBLESLASH reduce production step -> axis_specifier step2
-- On DIV reduce production step -> axis_specifier step2
-- On COMMA reduce production step -> axis_specifier step2
-- On AND reduce production step -> axis_specifier step2
-- On # reduce production step -> axis_specifier step2

State 28:
relative_location_path -> relative_location_path DOUBLESLASH . step [ SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DOUBLESLASH DIV COMMA AND # ]
-- On NODE_TYPE shift to state 3
-- On NAME_TEST shift to state 7
-- On DOUBLEDOT shift to state 8
-- On DOT shift to state 9
-- On AXIS shift to state 10
-- On AT shift to state 11
-- On step2 shift to state 12
-- On step shift to state 29
-- On node_test shift to state 25
-- On axis_specifier shift to state 26

State 29:
relative_location_path -> relative_location_path DOUBLESLASH step . [ SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DOUBLESLASH DIV COMMA AND # ]
-- On SLASH reduce production relative_location_path -> relative_location_path DOUBLESLASH step
-- On RPAREN reduce production relative_location_path -> relative_location_path DOUBLESLASH step
-- On RBRACKET reduce production relative_location_path -> relative_location_path DOUBLESLASH step
-- On PLUS reduce production relative_location_path -> relative_location_path DOUBLESLASH step
-- On PIPE reduce production relative_location_path -> relative_location_path DOUBLESLASH step
-- On OR reduce production relative_location_path -> relative_location_path DOUBLESLASH step
-- On NOTEQUAL reduce production relative_location_path -> relative_location_path DOUBLESLASH step
-- On MUL reduce production relative_location_path -> relative_location_path DOUBLESLASH step
-- On MOD reduce production relative_location_path -> relative_location_path DOUBLESLASH step
-- On MINUS reduce production relative_location_path -> relative_location_path DOUBLESLASH step
-- On LTE reduce production relative_location_path -> relative_location_path DOUBLESLASH step
-- On LT reduce production relative_location_path -> relative_location_path DOUBLESLASH step
-- On GTE reduce production relative_location_path -> relative_location_path DOUBLESLASH step
-- On GT reduce production relative_location_path -> relative_location_path DOUBLESLASH step
-- On EQUAL reduce production relative_location_path -> relative_location_path DOUBLESLASH step
-- On DOUBLESLASH reduce production relative_location_path -> relative_location_path DOUBLESLASH step
-- On DIV reduce production relative_location_path -> relative_location_path DOUBLESLASH step
-- On COMMA reduce production relative_location_path -> relative_location_path DOUBLESLASH step
-- On AND reduce production relative_location_path -> relative_location_path DOUBLESLASH step
-- On # reduce production relative_location_path -> relative_location_path DOUBLESLASH step

State 30:
unary_expr -> union_expr . [ RPAREN RBRACKET PLUS OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND # ]
union_expr -> union_expr . PIPE path_expr [ RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND # ]
-- On PIPE shift to state 31
-- On RPAREN reduce production unary_expr -> union_expr
-- On RBRACKET reduce production unary_expr -> union_expr
-- On PLUS reduce production unary_expr -> union_expr
-- On OR reduce production unary_expr -> union_expr
-- On NOTEQUAL reduce production unary_expr -> union_expr
-- On MUL reduce production unary_expr -> union_expr
-- On MOD reduce production unary_expr -> union_expr
-- On MINUS reduce production unary_expr -> union_expr
-- On LTE reduce production unary_expr -> union_expr
-- On LT reduce production unary_expr -> union_expr
-- On GTE reduce production unary_expr -> union_expr
-- On GT reduce production unary_expr -> union_expr
-- On EQUAL reduce production unary_expr -> union_expr
-- On DIV reduce production unary_expr -> union_expr
-- On COMMA reduce production unary_expr -> union_expr
-- On AND reduce production unary_expr -> union_expr
-- On # reduce production unary_expr -> union_expr

State 31:
union_expr -> union_expr PIPE . path_expr [ RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND # ]
-- On VAR shift to state 1
-- On SLASH shift to state 2
-- On NUMBER shift to state 14
-- On NODE_TYPE shift to state 3
-- On NAME_TEST shift to state 7
-- On LPAREN shift to state 16
-- On LITERAL shift to state 17
-- On FUNCTION_NAME shift to state 18
-- On DOUBLESLASH shift to state 20
-- On DOUBLEDOT shift to state 8
-- On DOT shift to state 9
-- On AXIS shift to state 10
-- On AT shift to state 11
-- On step2 shift to state 12
-- On step shift to state 21
-- On relative_location_path shift to state 32
-- On primary_expr shift to state 33
-- On path_expr shift to state 34
-- On node_test shift to state 25
-- On location_path shift to state 35
-- On function_call shift to state 36
-- On filter_expr shift to state 37
-- On axis_specifier shift to state 26
-- On absolute_location_path shift to state 48

State 32:
location_path -> relative_location_path . [ RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND # ]
relative_location_path -> relative_location_path . SLASH step [ SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DOUBLESLASH DIV COMMA AND # ]
relative_location_path -> relative_location_path . DOUBLESLASH step [ SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DOUBLESLASH DIV COMMA AND # ]
-- On SLASH shift to state 23
-- On DOUBLESLASH shift to state 28
-- On RPAREN reduce production location_path -> relative_location_path
-- On RBRACKET reduce production location_path -> relative_location_path
-- On PLUS reduce production location_path -> relative_location_path
-- On PIPE reduce production location_path -> relative_location_path
-- On OR reduce production location_path -> relative_location_path
-- On NOTEQUAL reduce production location_path -> relative_location_path
-- On MUL reduce production location_path -> relative_location_path
-- On MOD reduce production location_path -> relative_location_path
-- On MINUS reduce production location_path -> relative_location_path
-- On LTE reduce production location_path -> relative_location_path
-- On LT reduce production location_path -> relative_location_path
-- On GTE reduce production location_path -> relative_location_path
-- On GT reduce production location_path -> relative_location_path
-- On EQUAL reduce production location_path -> relative_location_path
-- On DIV reduce production location_path -> relative_location_path
-- On COMMA reduce production location_path -> relative_location_path
-- On AND reduce production location_path -> relative_location_path
-- On # reduce production location_path -> relative_location_path

State 33:
filter_expr -> primary_expr . [ SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT LBRACKET GTE GT EQUAL DOUBLESLASH DIV COMMA AND # ]
-- On SLASH reduce production filter_expr -> primary_expr
-- On RPAREN reduce production filter_expr -> primary_expr
-- On RBRACKET reduce production filter_expr -> primary_expr
-- On PLUS reduce production filter_expr -> primary_expr
-- On PIPE reduce production filter_expr -> primary_expr
-- On OR reduce production filter_expr -> primary_expr
-- On NOTEQUAL reduce production filter_expr -> primary_expr
-- On MUL reduce production filter_expr -> primary_expr
-- On MOD reduce production filter_expr -> primary_expr
-- On MINUS reduce production filter_expr -> primary_expr
-- On LTE reduce production filter_expr -> primary_expr
-- On LT reduce production filter_expr -> primary_expr
-- On LBRACKET reduce production filter_expr -> primary_expr
-- On GTE reduce production filter_expr -> primary_expr
-- On GT reduce production filter_expr -> primary_expr
-- On EQUAL reduce production filter_expr -> primary_expr
-- On DOUBLESLASH reduce production filter_expr -> primary_expr
-- On DIV reduce production filter_expr -> primary_expr
-- On COMMA reduce production filter_expr -> primary_expr
-- On AND reduce production filter_expr -> primary_expr
-- On # reduce production filter_expr -> primary_expr

State 34:
union_expr -> union_expr PIPE path_expr . [ RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND # ]
-- On RPAREN reduce production union_expr -> union_expr PIPE path_expr
-- On RBRACKET reduce production union_expr -> union_expr PIPE path_expr
-- On PLUS reduce production union_expr -> union_expr PIPE path_expr
-- On PIPE reduce production union_expr -> union_expr PIPE path_expr
-- On OR reduce production union_expr -> union_expr PIPE path_expr
-- On NOTEQUAL reduce production union_expr -> union_expr PIPE path_expr
-- On MUL reduce production union_expr -> union_expr PIPE path_expr
-- On MOD reduce production union_expr -> union_expr PIPE path_expr
-- On MINUS reduce production union_expr -> union_expr PIPE path_expr
-- On LTE reduce production union_expr -> union_expr PIPE path_expr
-- On LT reduce production union_expr -> union_expr PIPE path_expr
-- On GTE reduce production union_expr -> union_expr PIPE path_expr
-- On GT reduce production union_expr -> union_expr PIPE path_expr
-- On EQUAL reduce production union_expr -> union_expr PIPE path_expr
-- On DIV reduce production union_expr -> union_expr PIPE path_expr
-- On COMMA reduce production union_expr -> union_expr PIPE path_expr
-- On AND reduce production union_expr -> union_expr PIPE path_expr
-- On # reduce production union_expr -> union_expr PIPE path_expr

State 35:
path_expr -> location_path . [ RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND # ]
-- On RPAREN reduce production path_expr -> location_path
-- On RBRACKET reduce production path_expr -> location_path
-- On PLUS reduce production path_expr -> location_path
-- On PIPE reduce production path_expr -> location_path
-- On OR reduce production path_expr -> location_path
-- On NOTEQUAL reduce production path_expr -> location_path
-- On MUL reduce production path_expr -> location_path
-- On MOD reduce production path_expr -> location_path
-- On MINUS reduce production path_expr -> location_path
-- On LTE reduce production path_expr -> location_path
-- On LT reduce production path_expr -> location_path
-- On GTE reduce production path_expr -> location_path
-- On GT reduce production path_expr -> location_path
-- On EQUAL reduce production path_expr -> location_path
-- On DIV reduce production path_expr -> location_path
-- On COMMA reduce production path_expr -> location_path
-- On AND reduce production path_expr -> location_path
-- On # reduce production path_expr -> location_path

State 36:
primary_expr -> function_call . [ SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT LBRACKET GTE GT EQUAL DOUBLESLASH DIV COMMA AND # ]
-- On SLASH reduce production primary_expr -> function_call
-- On RPAREN reduce production primary_expr -> function_call
-- On RBRACKET reduce production primary_expr -> function_call
-- On PLUS reduce production primary_expr -> function_call
-- On PIPE reduce production primary_expr -> function_call
-- On OR reduce production primary_expr -> function_call
-- On NOTEQUAL reduce production primary_expr -> function_call
-- On MUL reduce production primary_expr -> function_call
-- On MOD reduce production primary_expr -> function_call
-- On MINUS reduce production primary_expr -> function_call
-- On LTE reduce production primary_expr -> function_call
-- On LT reduce production primary_expr -> function_call
-- On LBRACKET reduce production primary_expr -> function_call
-- On GTE reduce production primary_expr -> function_call
-- On GT reduce production primary_expr -> function_call
-- On EQUAL reduce production primary_expr -> function_call
-- On DOUBLESLASH reduce production primary_expr -> function_call
-- On DIV reduce production primary_expr -> function_call
-- On COMMA reduce production primary_expr -> function_call
-- On AND reduce production primary_expr -> function_call
-- On # reduce production primary_expr -> function_call

State 37:
filter_expr -> filter_expr . LBRACKET expr RBRACKET [ SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT LBRACKET GTE GT EQUAL DOUBLESLASH DIV COMMA AND # ]
path_expr -> filter_expr . [ RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND # ]
path_expr -> filter_expr . SLASH relative_location_path [ RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND # ]
path_expr -> filter_expr . DOUBLESLASH relative_location_path [ RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND # ]
-- On SLASH shift to state 38
-- On LBRACKET shift to state 40
-- On DOUBLESLASH shift to state 78
-- On RPAREN reduce production path_expr -> filter_expr
-- On RBRACKET reduce production path_expr -> filter_expr
-- On PLUS reduce production path_expr -> filter_expr
-- On PIPE reduce production path_expr -> filter_expr
-- On OR reduce production path_expr -> filter_expr
-- On NOTEQUAL reduce production path_expr -> filter_expr
-- On MUL reduce production path_expr -> filter_expr
-- On MOD reduce production path_expr -> filter_expr
-- On MINUS reduce production path_expr -> filter_expr
-- On LTE reduce production path_expr -> filter_expr
-- On LT reduce production path_expr -> filter_expr
-- On GTE reduce production path_expr -> filter_expr
-- On GT reduce production path_expr -> filter_expr
-- On EQUAL reduce production path_expr -> filter_expr
-- On DIV reduce production path_expr -> filter_expr
-- On COMMA reduce production path_expr -> filter_expr
-- On AND reduce production path_expr -> filter_expr
-- On # reduce production path_expr -> filter_expr

State 38:
path_expr -> filter_expr SLASH . relative_location_path [ RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND # ]
-- On NODE_TYPE shift to state 3
-- On NAME_TEST shift to state 7
-- On DOUBLEDOT shift to state 8
-- On DOT shift to state 9
-- On AXIS shift to state 10
-- On AT shift to state 11
-- On step2 shift to state 12
-- On step shift to state 21
-- On relative_location_path shift to state 39
-- On node_test shift to state 25
-- On axis_specifier shift to state 26

State 39:
path_expr -> filter_expr SLASH relative_location_path . [ RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND # ]
relative_location_path -> relative_location_path . SLASH step [ SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DOUBLESLASH DIV COMMA AND # ]
relative_location_path -> relative_location_path . DOUBLESLASH step [ SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DOUBLESLASH DIV COMMA AND # ]
-- On SLASH shift to state 23
-- On DOUBLESLASH shift to state 28
-- On RPAREN reduce production path_expr -> filter_expr SLASH relative_location_path
-- On RBRACKET reduce production path_expr -> filter_expr SLASH relative_location_path
-- On PLUS reduce production path_expr -> filter_expr SLASH relative_location_path
-- On PIPE reduce production path_expr -> filter_expr SLASH relative_location_path
-- On OR reduce production path_expr -> filter_expr SLASH relative_location_path
-- On NOTEQUAL reduce production path_expr -> filter_expr SLASH relative_location_path
-- On MUL reduce production path_expr -> filter_expr SLASH relative_location_path
-- On MOD reduce production path_expr -> filter_expr SLASH relative_location_path
-- On MINUS reduce production path_expr -> filter_expr SLASH relative_location_path
-- On LTE reduce production path_expr -> filter_expr SLASH relative_location_path
-- On LT reduce production path_expr -> filter_expr SLASH relative_location_path
-- On GTE reduce production path_expr -> filter_expr SLASH relative_location_path
-- On GT reduce production path_expr -> filter_expr SLASH relative_location_path
-- On EQUAL reduce production path_expr -> filter_expr SLASH relative_location_path
-- On DIV reduce production path_expr -> filter_expr SLASH relative_location_path
-- On COMMA reduce production path_expr -> filter_expr SLASH relative_location_path
-- On AND reduce production path_expr -> filter_expr SLASH relative_location_path
-- On # reduce production path_expr -> filter_expr SLASH relative_location_path

State 40:
filter_expr -> filter_expr LBRACKET . expr RBRACKET [ SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT LBRACKET GTE GT EQUAL DOUBLESLASH DIV COMMA AND # ]
-- On VAR shift to state 1
-- On SLASH shift to state 2
-- On NUMBER shift to state 14
-- On NODE_TYPE shift to state 3
-- On NAME_TEST shift to state 7
-- On MINUS shift to state 15
-- On LPAREN shift to state 16
-- On LITERAL shift to state 17
-- On FUNCTION_NAME shift to state 18
-- On DOUBLESLASH shift to state 20
-- On DOUBLEDOT shift to state 8
-- On DOT shift to state 9
-- On AXIS shift to state 10
-- On AT shift to state 11
-- On union_expr shift to state 30
-- On unary_expr shift to state 41
-- On step2 shift to state 12
-- On step shift to state 21
-- On relative_location_path shift to state 32
-- On relational_expr shift to state 42
-- On primary_expr shift to state 33
-- On path_expr shift to state 44
-- On or_expr shift to state 64
-- On node_test shift to state 25
-- On multiplicative_expr shift to state 45
-- On location_path shift to state 35
-- On function_call shift to state 36
-- On filter_expr shift to state 37
-- On expr shift to state 75
-- On equality_expr shift to state 66
-- On axis_specifier shift to state 26
-- On and_expr shift to state 77
-- On additive_expr shift to state 69
-- On absolute_location_path shift to state 48

State 41:
multiplicative_expr -> unary_expr . [ RPAREN RBRACKET PLUS OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND # ]
-- On RPAREN reduce production multiplicative_expr -> unary_expr
-- On RBRACKET reduce production multiplicative_expr -> unary_expr
-- On PLUS reduce production multiplicative_expr -> unary_expr
-- On OR reduce production multiplicative_expr -> unary_expr
-- On NOTEQUAL reduce production multiplicative_expr -> unary_expr
-- On MUL reduce production multiplicative_expr -> unary_expr
-- On MOD reduce production multiplicative_expr -> unary_expr
-- On MINUS reduce production multiplicative_expr -> unary_expr
-- On LTE reduce production multiplicative_expr -> unary_expr
-- On LT reduce production multiplicative_expr -> unary_expr
-- On GTE reduce production multiplicative_expr -> unary_expr
-- On GT reduce production multiplicative_expr -> unary_expr
-- On EQUAL reduce production multiplicative_expr -> unary_expr
-- On DIV reduce production multiplicative_expr -> unary_expr
-- On COMMA reduce production multiplicative_expr -> unary_expr
-- On AND reduce production multiplicative_expr -> unary_expr
-- On # reduce production multiplicative_expr -> unary_expr

State 42:
equality_expr -> relational_expr . [ RPAREN RBRACKET OR NOTEQUAL EQUAL COMMA AND # ]
relational_expr -> relational_expr . LT additive_expr [ RPAREN RBRACKET OR NOTEQUAL LTE LT GTE GT EQUAL COMMA AND # ]
relational_expr -> relational_expr . GT additive_expr [ RPAREN RBRACKET OR NOTEQUAL LTE LT GTE GT EQUAL COMMA AND # ]
relational_expr -> relational_expr . LTE additive_expr [ RPAREN RBRACKET OR NOTEQUAL LTE LT GTE GT EQUAL COMMA AND # ]
relational_expr -> relational_expr . GTE additive_expr [ RPAREN RBRACKET OR NOTEQUAL LTE LT GTE GT EQUAL COMMA AND # ]
-- On LTE shift to state 43
-- On LT shift to state 58
-- On GTE shift to state 60
-- On GT shift to state 62
-- On RPAREN reduce production equality_expr -> relational_expr
-- On RBRACKET reduce production equality_expr -> relational_expr
-- On OR reduce production equality_expr -> relational_expr
-- On NOTEQUAL reduce production equality_expr -> relational_expr
-- On EQUAL reduce production equality_expr -> relational_expr
-- On COMMA reduce production equality_expr -> relational_expr
-- On AND reduce production equality_expr -> relational_expr
-- On # reduce production equality_expr -> relational_expr

State 43:
relational_expr -> relational_expr LTE . additive_expr [ RPAREN RBRACKET OR NOTEQUAL LTE LT GTE GT EQUAL COMMA AND # ]
-- On VAR shift to state 1
-- On SLASH shift to state 2
-- On NUMBER shift to state 14
-- On NODE_TYPE shift to state 3
-- On NAME_TEST shift to state 7
-- On MINUS shift to state 15
-- On LPAREN shift to state 16
-- On LITERAL shift to state 17
-- On FUNCTION_NAME shift to state 18
-- On DOUBLESLASH shift to state 20
-- On DOUBLEDOT shift to state 8
-- On DOT shift to state 9
-- On AXIS shift to state 10
-- On AT shift to state 11
-- On union_expr shift to state 30
-- On unary_expr shift to state 41
-- On step2 shift to state 12
-- On step shift to state 21
-- On relative_location_path shift to state 32
-- On primary_expr shift to state 33
-- On path_expr shift to state 44
-- On node_test shift to state 25
-- On multiplicative_expr shift to state 45
-- On location_path shift to state 35
-- On function_call shift to state 36
-- On filter_expr shift to state 37
-- On axis_specifier shift to state 26
-- On additive_expr shift to state 53
-- On absolute_location_path shift to state 48

State 44:
union_expr -> path_expr . [ RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND # ]
-- On RPAREN reduce production union_expr -> path_expr
-- On RBRACKET reduce production union_expr -> path_expr
-- On PLUS reduce production union_expr -> path_expr
-- On PIPE reduce production union_expr -> path_expr
-- On OR reduce production union_expr -> path_expr
-- On NOTEQUAL reduce production union_expr -> path_expr
-- On MUL reduce production union_expr -> path_expr
-- On MOD reduce production union_expr -> path_expr
-- On MINUS reduce production union_expr -> path_expr
-- On LTE reduce production union_expr -> path_expr
-- On LT reduce production union_expr -> path_expr
-- On GTE reduce production union_expr -> path_expr
-- On GT reduce production union_expr -> path_expr
-- On EQUAL reduce production union_expr -> path_expr
-- On DIV reduce production union_expr -> path_expr
-- On COMMA reduce production union_expr -> path_expr
-- On AND reduce production union_expr -> path_expr
-- On # reduce production union_expr -> path_expr

State 45:
additive_expr -> multiplicative_expr . [ RPAREN RBRACKET PLUS OR NOTEQUAL MINUS LTE LT GTE GT EQUAL COMMA AND # ]
multiplicative_expr -> multiplicative_expr . MUL unary_expr [ RPAREN RBRACKET PLUS OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND # ]
multiplicative_expr -> multiplicative_expr . DIV unary_expr [ RPAREN RBRACKET PLUS OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND # ]
multiplicative_expr -> multiplicative_expr . MOD unary_expr [ RPAREN RBRACKET PLUS OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND # ]
-- On MUL shift to state 46
-- On MOD shift to state 49
-- On DIV shift to state 51
-- On RPAREN reduce production additive_expr -> multiplicative_expr
-- On RBRACKET reduce production additive_expr -> multiplicative_expr
-- On PLUS reduce production additive_expr -> multiplicative_expr
-- On OR reduce production additive_expr -> multiplicative_expr
-- On NOTEQUAL reduce production additive_expr -> multiplicative_expr
-- On MINUS reduce production additive_expr -> multiplicative_expr
-- On LTE reduce production additive_expr -> multiplicative_expr
-- On LT reduce production additive_expr -> multiplicative_expr
-- On GTE reduce production additive_expr -> multiplicative_expr
-- On GT reduce production additive_expr -> multiplicative_expr
-- On EQUAL reduce production additive_expr -> multiplicative_expr
-- On COMMA reduce production additive_expr -> multiplicative_expr
-- On AND reduce production additive_expr -> multiplicative_expr
-- On # reduce production additive_expr -> multiplicative_expr

State 46:
multiplicative_expr -> multiplicative_expr MUL . unary_expr [ RPAREN RBRACKET PLUS OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND # ]
-- On VAR shift to state 1
-- On SLASH shift to state 2
-- On NUMBER shift to state 14
-- On NODE_TYPE shift to state 3
-- On NAME_TEST shift to state 7
-- On MINUS shift to state 15
-- On LPAREN shift to state 16
-- On LITERAL shift to state 17
-- On FUNCTION_NAME shift to state 18
-- On DOUBLESLASH shift to state 20
-- On DOUBLEDOT shift to state 8
-- On DOT shift to state 9
-- On AXIS shift to state 10
-- On AT shift to state 11
-- On union_expr shift to state 30
-- On unary_expr shift to state 47
-- On step2 shift to state 12
-- On step shift to state 21
-- On relative_location_path shift to state 32
-- On primary_expr shift to state 33
-- On path_expr shift to state 44
-- On node_test shift to state 25
-- On location_path shift to state 35
-- On function_call shift to state 36
-- On filter_expr shift to state 37
-- On axis_specifier shift to state 26
-- On absolute_location_path shift to state 48

State 47:
multiplicative_expr -> multiplicative_expr MUL unary_expr . [ RPAREN RBRACKET PLUS OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND # ]
-- On RPAREN reduce production multiplicative_expr -> multiplicative_expr MUL unary_expr
-- On RBRACKET reduce production multiplicative_expr -> multiplicative_expr MUL unary_expr
-- On PLUS reduce production multiplicative_expr -> multiplicative_expr MUL unary_expr
-- On OR reduce production multiplicative_expr -> multiplicative_expr MUL unary_expr
-- On NOTEQUAL reduce production multiplicative_expr -> multiplicative_expr MUL unary_expr
-- On MUL reduce production multiplicative_expr -> multiplicative_expr MUL unary_expr
-- On MOD reduce production multiplicative_expr -> multiplicative_expr MUL unary_expr
-- On MINUS reduce production multiplicative_expr -> multiplicative_expr MUL unary_expr
-- On LTE reduce production multiplicative_expr -> multiplicative_expr MUL unary_expr
-- On LT reduce production multiplicative_expr -> multiplicative_expr MUL unary_expr
-- On GTE reduce production multiplicative_expr -> multiplicative_expr MUL unary_expr
-- On GT reduce production multiplicative_expr -> multiplicative_expr MUL unary_expr
-- On EQUAL reduce production multiplicative_expr -> multiplicative_expr MUL unary_expr
-- On DIV reduce production multiplicative_expr -> multiplicative_expr MUL unary_expr
-- On COMMA reduce production multiplicative_expr -> multiplicative_expr MUL unary_expr
-- On AND reduce production multiplicative_expr -> multiplicative_expr MUL unary_expr
-- On # reduce production multiplicative_expr -> multiplicative_expr MUL unary_expr

State 48:
location_path -> absolute_location_path . [ RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND # ]
-- On RPAREN reduce production location_path -> absolute_location_path
-- On RBRACKET reduce production location_path -> absolute_location_path
-- On PLUS reduce production location_path -> absolute_location_path
-- On PIPE reduce production location_path -> absolute_location_path
-- On OR reduce production location_path -> absolute_location_path
-- On NOTEQUAL reduce production location_path -> absolute_location_path
-- On MUL reduce production location_path -> absolute_location_path
-- On MOD reduce production location_path -> absolute_location_path
-- On MINUS reduce production location_path -> absolute_location_path
-- On LTE reduce production location_path -> absolute_location_path
-- On LT reduce production location_path -> absolute_location_path
-- On GTE reduce production location_path -> absolute_location_path
-- On GT reduce production location_path -> absolute_location_path
-- On EQUAL reduce production location_path -> absolute_location_path
-- On DIV reduce production location_path -> absolute_location_path
-- On COMMA reduce production location_path -> absolute_location_path
-- On AND reduce production location_path -> absolute_location_path
-- On # reduce production location_path -> absolute_location_path

State 49:
multiplicative_expr -> multiplicative_expr MOD . unary_expr [ RPAREN RBRACKET PLUS OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND # ]
-- On VAR shift to state 1
-- On SLASH shift to state 2
-- On NUMBER shift to state 14
-- On NODE_TYPE shift to state 3
-- On NAME_TEST shift to state 7
-- On MINUS shift to state 15
-- On LPAREN shift to state 16
-- On LITERAL shift to state 17
-- On FUNCTION_NAME shift to state 18
-- On DOUBLESLASH shift to state 20
-- On DOUBLEDOT shift to state 8
-- On DOT shift to state 9
-- On AXIS shift to state 10
-- On AT shift to state 11
-- On union_expr shift to state 30
-- On unary_expr shift to state 50
-- On step2 shift to state 12
-- On step shift to state 21
-- On relative_location_path shift to state 32
-- On primary_expr shift to state 33
-- On path_expr shift to state 44
-- On node_test shift to state 25
-- On location_path shift to state 35
-- On function_call shift to state 36
-- On filter_expr shift to state 37
-- On axis_specifier shift to state 26
-- On absolute_location_path shift to state 48

State 50:
multiplicative_expr -> multiplicative_expr MOD unary_expr . [ RPAREN RBRACKET PLUS OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND # ]
-- On RPAREN reduce production multiplicative_expr -> multiplicative_expr MOD unary_expr
-- On RBRACKET reduce production multiplicative_expr -> multiplicative_expr MOD unary_expr
-- On PLUS reduce production multiplicative_expr -> multiplicative_expr MOD unary_expr
-- On OR reduce production multiplicative_expr -> multiplicative_expr MOD unary_expr
-- On NOTEQUAL reduce production multiplicative_expr -> multiplicative_expr MOD unary_expr
-- On MUL reduce production multiplicative_expr -> multiplicative_expr MOD unary_expr
-- On MOD reduce production multiplicative_expr -> multiplicative_expr MOD unary_expr
-- On MINUS reduce production multiplicative_expr -> multiplicative_expr MOD unary_expr
-- On LTE reduce production multiplicative_expr -> multiplicative_expr MOD unary_expr
-- On LT reduce production multiplicative_expr -> multiplicative_expr MOD unary_expr
-- On GTE reduce production multiplicative_expr -> multiplicative_expr MOD unary_expr
-- On GT reduce production multiplicative_expr -> multiplicative_expr MOD unary_expr
-- On EQUAL reduce production multiplicative_expr -> multiplicative_expr MOD unary_expr
-- On DIV reduce production multiplicative_expr -> multiplicative_expr MOD unary_expr
-- On COMMA reduce production multiplicative_expr -> multiplicative_expr MOD unary_expr
-- On AND reduce production multiplicative_expr -> multiplicative_expr MOD unary_expr
-- On # reduce production multiplicative_expr -> multiplicative_expr MOD unary_expr

State 51:
multiplicative_expr -> multiplicative_expr DIV . unary_expr [ RPAREN RBRACKET PLUS OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND # ]
-- On VAR shift to state 1
-- On SLASH shift to state 2
-- On NUMBER shift to state 14
-- On NODE_TYPE shift to state 3
-- On NAME_TEST shift to state 7
-- On MINUS shift to state 15
-- On LPAREN shift to state 16
-- On LITERAL shift to state 17
-- On FUNCTION_NAME shift to state 18
-- On DOUBLESLASH shift to state 20
-- On DOUBLEDOT shift to state 8
-- On DOT shift to state 9
-- On AXIS shift to state 10
-- On AT shift to state 11
-- On union_expr shift to state 30
-- On unary_expr shift to state 52
-- On step2 shift to state 12
-- On step shift to state 21
-- On relative_location_path shift to state 32
-- On primary_expr shift to state 33
-- On path_expr shift to state 44
-- On node_test shift to state 25
-- On location_path shift to state 35
-- On function_call shift to state 36
-- On filter_expr shift to state 37
-- On axis_specifier shift to state 26
-- On absolute_location_path shift to state 48

State 52:
multiplicative_expr -> multiplicative_expr DIV unary_expr . [ RPAREN RBRACKET PLUS OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND # ]
-- On RPAREN reduce production multiplicative_expr -> multiplicative_expr DIV unary_expr
-- On RBRACKET reduce production multiplicative_expr -> multiplicative_expr DIV unary_expr
-- On PLUS reduce production multiplicative_expr -> multiplicative_expr DIV unary_expr
-- On OR reduce production multiplicative_expr -> multiplicative_expr DIV unary_expr
-- On NOTEQUAL reduce production multiplicative_expr -> multiplicative_expr DIV unary_expr
-- On MUL reduce production multiplicative_expr -> multiplicative_expr DIV unary_expr
-- On MOD reduce production multiplicative_expr -> multiplicative_expr DIV unary_expr
-- On MINUS reduce production multiplicative_expr -> multiplicative_expr DIV unary_expr
-- On LTE reduce production multiplicative_expr -> multiplicative_expr DIV unary_expr
-- On LT reduce production multiplicative_expr -> multiplicative_expr DIV unary_expr
-- On GTE reduce production multiplicative_expr -> multiplicative_expr DIV unary_expr
-- On GT reduce production multiplicative_expr -> multiplicative_expr DIV unary_expr
-- On EQUAL reduce production multiplicative_expr -> multiplicative_expr DIV unary_expr
-- On DIV reduce production multiplicative_expr -> multiplicative_expr DIV unary_expr
-- On COMMA reduce production multiplicative_expr -> multiplicative_expr DIV unary_expr
-- On AND reduce production multiplicative_expr -> multiplicative_expr DIV unary_expr
-- On # reduce production multiplicative_expr -> multiplicative_expr DIV unary_expr

State 53:
additive_expr -> additive_expr . PLUS multiplicative_expr [ RPAREN RBRACKET PLUS OR NOTEQUAL MINUS LTE LT GTE GT EQUAL COMMA AND # ]
additive_expr -> additive_expr . MINUS multiplicative_expr [ RPAREN RBRACKET PLUS OR NOTEQUAL MINUS LTE LT GTE GT EQUAL COMMA AND # ]
relational_expr -> relational_expr LTE additive_expr . [ RPAREN RBRACKET OR NOTEQUAL LTE LT GTE GT EQUAL COMMA AND # ]
-- On PLUS shift to state 54
-- On MINUS shift to state 56
-- On RPAREN reduce production relational_expr -> relational_expr LTE additive_expr
-- On RBRACKET reduce production relational_expr -> relational_expr LTE additive_expr
-- On OR reduce production relational_expr -> relational_expr LTE additive_expr
-- On NOTEQUAL reduce production relational_expr -> relational_expr LTE additive_expr
-- On LTE reduce production relational_expr -> relational_expr LTE additive_expr
-- On LT reduce production relational_expr -> relational_expr LTE additive_expr
-- On GTE reduce production relational_expr -> relational_expr LTE additive_expr
-- On GT reduce production relational_expr -> relational_expr LTE additive_expr
-- On EQUAL reduce production relational_expr -> relational_expr LTE additive_expr
-- On COMMA reduce production relational_expr -> relational_expr LTE additive_expr
-- On AND reduce production relational_expr -> relational_expr LTE additive_expr
-- On # reduce production relational_expr -> relational_expr LTE additive_expr

State 54:
additive_expr -> additive_expr PLUS . multiplicative_expr [ RPAREN RBRACKET PLUS OR NOTEQUAL MINUS LTE LT GTE GT EQUAL COMMA AND # ]
-- On VAR shift to state 1
-- On SLASH shift to state 2
-- On NUMBER shift to state 14
-- On NODE_TYPE shift to state 3
-- On NAME_TEST shift to state 7
-- On MINUS shift to state 15
-- On LPAREN shift to state 16
-- On LITERAL shift to state 17
-- On FUNCTION_NAME shift to state 18
-- On DOUBLESLASH shift to state 20
-- On DOUBLEDOT shift to state 8
-- On DOT shift to state 9
-- On AXIS shift to state 10
-- On AT shift to state 11
-- On union_expr shift to state 30
-- On unary_expr shift to state 41
-- On step2 shift to state 12
-- On step shift to state 21
-- On relative_location_path shift to state 32
-- On primary_expr shift to state 33
-- On path_expr shift to state 44
-- On node_test shift to state 25
-- On multiplicative_expr shift to state 55
-- On location_path shift to state 35
-- On function_call shift to state 36
-- On filter_expr shift to state 37
-- On axis_specifier shift to state 26
-- On absolute_location_path shift to state 48

State 55:
additive_expr -> additive_expr PLUS multiplicative_expr . [ RPAREN RBRACKET PLUS OR NOTEQUAL MINUS LTE LT GTE GT EQUAL COMMA AND # ]
multiplicative_expr -> multiplicative_expr . MUL unary_expr [ RPAREN RBRACKET PLUS OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND # ]
multiplicative_expr -> multiplicative_expr . DIV unary_expr [ RPAREN RBRACKET PLUS OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND # ]
multiplicative_expr -> multiplicative_expr . MOD unary_expr [ RPAREN RBRACKET PLUS OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND # ]
-- On MUL shift to state 46
-- On MOD shift to state 49
-- On DIV shift to state 51
-- On RPAREN reduce production additive_expr -> additive_expr PLUS multiplicative_expr
-- On RBRACKET reduce production additive_expr -> additive_expr PLUS multiplicative_expr
-- On PLUS reduce production additive_expr -> additive_expr PLUS multiplicative_expr
-- On OR reduce production additive_expr -> additive_expr PLUS multiplicative_expr
-- On NOTEQUAL reduce production additive_expr -> additive_expr PLUS multiplicative_expr
-- On MINUS reduce production additive_expr -> additive_expr PLUS multiplicative_expr
-- On LTE reduce production additive_expr -> additive_expr PLUS multiplicative_expr
-- On LT reduce production additive_expr -> additive_expr PLUS multiplicative_expr
-- On GTE reduce production additive_expr -> additive_expr PLUS multiplicative_expr
-- On GT reduce production additive_expr -> additive_expr PLUS multiplicative_expr
-- On EQUAL reduce production additive_expr -> additive_expr PLUS multiplicative_expr
-- On COMMA reduce production additive_expr -> additive_expr PLUS multiplicative_expr
-- On AND reduce production additive_expr -> additive_expr PLUS multiplicative_expr
-- On # reduce production additive_expr -> additive_expr PLUS multiplicative_expr

State 56:
additive_expr -> additive_expr MINUS . multiplicative_expr [ RPAREN RBRACKET PLUS OR NOTEQUAL MINUS LTE LT GTE GT EQUAL COMMA AND # ]
-- On VAR shift to state 1
-- On SLASH shift to state 2
-- On NUMBER shift to state 14
-- On NODE_TYPE shift to state 3
-- On NAME_TEST shift to state 7
-- On MINUS shift to state 15
-- On LPAREN shift to state 16
-- On LITERAL shift to state 17
-- On FUNCTION_NAME shift to state 18
-- On DOUBLESLASH shift to state 20
-- On DOUBLEDOT shift to state 8
-- On DOT shift to state 9
-- On AXIS shift to state 10
-- On AT shift to state 11
-- On union_expr shift to state 30
-- On unary_expr shift to state 41
-- On step2 shift to state 12
-- On step shift to state 21
-- On relative_location_path shift to state 32
-- On primary_expr shift to state 33
-- On path_expr shift to state 44
-- On node_test shift to state 25
-- On multiplicative_expr shift to state 57
-- On location_path shift to state 35
-- On function_call shift to state 36
-- On filter_expr shift to state 37
-- On axis_specifier shift to state 26
-- On absolute_location_path shift to state 48

State 57:
additive_expr -> additive_expr MINUS multiplicative_expr . [ RPAREN RBRACKET PLUS OR NOTEQUAL MINUS LTE LT GTE GT EQUAL COMMA AND # ]
multiplicative_expr -> multiplicative_expr . MUL unary_expr [ RPAREN RBRACKET PLUS OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND # ]
multiplicative_expr -> multiplicative_expr . DIV unary_expr [ RPAREN RBRACKET PLUS OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND # ]
multiplicative_expr -> multiplicative_expr . MOD unary_expr [ RPAREN RBRACKET PLUS OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND # ]
-- On MUL shift to state 46
-- On MOD shift to state 49
-- On DIV shift to state 51
-- On RPAREN reduce production additive_expr -> additive_expr MINUS multiplicative_expr
-- On RBRACKET reduce production additive_expr -> additive_expr MINUS multiplicative_expr
-- On PLUS reduce production additive_expr -> additive_expr MINUS multiplicative_expr
-- On OR reduce production additive_expr -> additive_expr MINUS multiplicative_expr
-- On NOTEQUAL reduce production additive_expr -> additive_expr MINUS multiplicative_expr
-- On MINUS reduce production additive_expr -> additive_expr MINUS multiplicative_expr
-- On LTE reduce production additive_expr -> additive_expr MINUS multiplicative_expr
-- On LT reduce production additive_expr -> additive_expr MINUS multiplicative_expr
-- On GTE reduce production additive_expr -> additive_expr MINUS multiplicative_expr
-- On GT reduce production additive_expr -> additive_expr MINUS multiplicative_expr
-- On EQUAL reduce production additive_expr -> additive_expr MINUS multiplicative_expr
-- On COMMA reduce production additive_expr -> additive_expr MINUS multiplicative_expr
-- On AND reduce production additive_expr -> additive_expr MINUS multiplicative_expr
-- On # reduce production additive_expr -> additive_expr MINUS multiplicative_expr

State 58:
relational_expr -> relational_expr LT . additive_expr [ RPAREN RBRACKET OR NOTEQUAL LTE LT GTE GT EQUAL COMMA AND # ]
-- On VAR shift to state 1
-- On SLASH shift to state 2
-- On NUMBER shift to state 14
-- On NODE_TYPE shift to state 3
-- On NAME_TEST shift to state 7
-- On MINUS shift to state 15
-- On LPAREN shift to state 16
-- On LITERAL shift to state 17
-- On FUNCTION_NAME shift to state 18
-- On DOUBLESLASH shift to state 20
-- On DOUBLEDOT shift to state 8
-- On DOT shift to state 9
-- On AXIS shift to state 10
-- On AT shift to state 11
-- On union_expr shift to state 30
-- On unary_expr shift to state 41
-- On step2 shift to state 12
-- On step shift to state 21
-- On relative_location_path shift to state 32
-- On primary_expr shift to state 33
-- On path_expr shift to state 44
-- On node_test shift to state 25
-- On multiplicative_expr shift to state 45
-- On location_path shift to state 35
-- On function_call shift to state 36
-- On filter_expr shift to state 37
-- On axis_specifier shift to state 26
-- On additive_expr shift to state 59
-- On absolute_location_path shift to state 48

State 59:
additive_expr -> additive_expr . PLUS multiplicative_expr [ RPAREN RBRACKET PLUS OR NOTEQUAL MINUS LTE LT GTE GT EQUAL COMMA AND # ]
additive_expr -> additive_expr . MINUS multiplicative_expr [ RPAREN RBRACKET PLUS OR NOTEQUAL MINUS LTE LT GTE GT EQUAL COMMA AND # ]
relational_expr -> relational_expr LT additive_expr . [ RPAREN RBRACKET OR NOTEQUAL LTE LT GTE GT EQUAL COMMA AND # ]
-- On PLUS shift to state 54
-- On MINUS shift to state 56
-- On RPAREN reduce production relational_expr -> relational_expr LT additive_expr
-- On RBRACKET reduce production relational_expr -> relational_expr LT additive_expr
-- On OR reduce production relational_expr -> relational_expr LT additive_expr
-- On NOTEQUAL reduce production relational_expr -> relational_expr LT additive_expr
-- On LTE reduce production relational_expr -> relational_expr LT additive_expr
-- On LT reduce production relational_expr -> relational_expr LT additive_expr
-- On GTE reduce production relational_expr -> relational_expr LT additive_expr
-- On GT reduce production relational_expr -> relational_expr LT additive_expr
-- On EQUAL reduce production relational_expr -> relational_expr LT additive_expr
-- On COMMA reduce production relational_expr -> relational_expr LT additive_expr
-- On AND reduce production relational_expr -> relational_expr LT additive_expr
-- On # reduce production relational_expr -> relational_expr LT additive_expr

State 60:
relational_expr -> relational_expr GTE . additive_expr [ RPAREN RBRACKET OR NOTEQUAL LTE LT GTE GT EQUAL COMMA AND # ]
-- On VAR shift to state 1
-- On SLASH shift to state 2
-- On NUMBER shift to state 14
-- On NODE_TYPE shift to state 3
-- On NAME_TEST shift to state 7
-- On MINUS shift to state 15
-- On LPAREN shift to state 16
-- On LITERAL shift to state 17
-- On FUNCTION_NAME shift to state 18
-- On DOUBLESLASH shift to state 20
-- On DOUBLEDOT shift to state 8
-- On DOT shift to state 9
-- On AXIS shift to state 10
-- On AT shift to state 11
-- On union_expr shift to state 30
-- On unary_expr shift to state 41
-- On step2 shift to state 12
-- On step shift to state 21
-- On relative_location_path shift to state 32
-- On primary_expr shift to state 33
-- On path_expr shift to state 44
-- On node_test shift to state 25
-- On multiplicative_expr shift to state 45
-- On location_path shift to state 35
-- On function_call shift to state 36
-- On filter_expr shift to state 37
-- On axis_specifier shift to state 26
-- On additive_expr shift to state 61
-- On absolute_location_path shift to state 48

State 61:
additive_expr -> additive_expr . PLUS multiplicative_expr [ RPAREN RBRACKET PLUS OR NOTEQUAL MINUS LTE LT GTE GT EQUAL COMMA AND # ]
additive_expr -> additive_expr . MINUS multiplicative_expr [ RPAREN RBRACKET PLUS OR NOTEQUAL MINUS LTE LT GTE GT EQUAL COMMA AND # ]
relational_expr -> relational_expr GTE additive_expr . [ RPAREN RBRACKET OR NOTEQUAL LTE LT GTE GT EQUAL COMMA AND # ]
-- On PLUS shift to state 54
-- On MINUS shift to state 56
-- On RPAREN reduce production relational_expr -> relational_expr GTE additive_expr
-- On RBRACKET reduce production relational_expr -> relational_expr GTE additive_expr
-- On OR reduce production relational_expr -> relational_expr GTE additive_expr
-- On NOTEQUAL reduce production relational_expr -> relational_expr GTE additive_expr
-- On LTE reduce production relational_expr -> relational_expr GTE additive_expr
-- On LT reduce production relational_expr -> relational_expr GTE additive_expr
-- On GTE reduce production relational_expr -> relational_expr GTE additive_expr
-- On GT reduce production relational_expr -> relational_expr GTE additive_expr
-- On EQUAL reduce production relational_expr -> relational_expr GTE additive_expr
-- On COMMA reduce production relational_expr -> relational_expr GTE additive_expr
-- On AND reduce production relational_expr -> relational_expr GTE additive_expr
-- On # reduce production relational_expr -> relational_expr GTE additive_expr

State 62:
relational_expr -> relational_expr GT . additive_expr [ RPAREN RBRACKET OR NOTEQUAL LTE LT GTE GT EQUAL COMMA AND # ]
-- On VAR shift to state 1
-- On SLASH shift to state 2
-- On NUMBER shift to state 14
-- On NODE_TYPE shift to state 3
-- On NAME_TEST shift to state 7
-- On MINUS shift to state 15
-- On LPAREN shift to state 16
-- On LITERAL shift to state 17
-- On FUNCTION_NAME shift to state 18
-- On DOUBLESLASH shift to state 20
-- On DOUBLEDOT shift to state 8
-- On DOT shift to state 9
-- On AXIS shift to state 10
-- On AT shift to state 11
-- On union_expr shift to state 30
-- On unary_expr shift to state 41
-- On step2 shift to state 12
-- On step shift to state 21
-- On relative_location_path shift to state 32
-- On primary_expr shift to state 33
-- On path_expr shift to state 44
-- On node_test shift to state 25
-- On multiplicative_expr shift to state 45
-- On location_path shift to state 35
-- On function_call shift to state 36
-- On filter_expr shift to state 37
-- On axis_specifier shift to state 26
-- On additive_expr shift to state 63
-- On absolute_location_path shift to state 48

State 63:
additive_expr -> additive_expr . PLUS multiplicative_expr [ RPAREN RBRACKET PLUS OR NOTEQUAL MINUS LTE LT GTE GT EQUAL COMMA AND # ]
additive_expr -> additive_expr . MINUS multiplicative_expr [ RPAREN RBRACKET PLUS OR NOTEQUAL MINUS LTE LT GTE GT EQUAL COMMA AND # ]
relational_expr -> relational_expr GT additive_expr . [ RPAREN RBRACKET OR NOTEQUAL LTE LT GTE GT EQUAL COMMA AND # ]
-- On PLUS shift to state 54
-- On MINUS shift to state 56
-- On RPAREN reduce production relational_expr -> relational_expr GT additive_expr
-- On RBRACKET reduce production relational_expr -> relational_expr GT additive_expr
-- On OR reduce production relational_expr -> relational_expr GT additive_expr
-- On NOTEQUAL reduce production relational_expr -> relational_expr GT additive_expr
-- On LTE reduce production relational_expr -> relational_expr GT additive_expr
-- On LT reduce production relational_expr -> relational_expr GT additive_expr
-- On GTE reduce production relational_expr -> relational_expr GT additive_expr
-- On GT reduce production relational_expr -> relational_expr GT additive_expr
-- On EQUAL reduce production relational_expr -> relational_expr GT additive_expr
-- On COMMA reduce production relational_expr -> relational_expr GT additive_expr
-- On AND reduce production relational_expr -> relational_expr GT additive_expr
-- On # reduce production relational_expr -> relational_expr GT additive_expr

State 64:
expr -> or_expr . [ RPAREN RBRACKET COMMA ]
or_expr -> or_expr . OR and_expr [ RPAREN RBRACKET OR COMMA ]
-- On OR shift to state 65
-- On RPAREN reduce production expr -> or_expr
-- On RBRACKET reduce production expr -> or_expr
-- On COMMA reduce production expr -> or_expr

State 65:
or_expr -> or_expr OR . and_expr [ RPAREN RBRACKET OR COMMA # ]
-- On VAR shift to state 1
-- On SLASH shift to state 2
-- On NUMBER shift to state 14
-- On NODE_TYPE shift to state 3
-- On NAME_TEST shift to state 7
-- On MINUS shift to state 15
-- On LPAREN shift to state 16
-- On LITERAL shift to state 17
-- On FUNCTION_NAME shift to state 18
-- On DOUBLESLASH shift to state 20
-- On DOUBLEDOT shift to state 8
-- On DOT shift to state 9
-- On AXIS shift to state 10
-- On AT shift to state 11
-- On union_expr shift to state 30
-- On unary_expr shift to state 41
-- On step2 shift to state 12
-- On step shift to state 21
-- On relative_location_path shift to state 32
-- On relational_expr shift to state 42
-- On primary_expr shift to state 33
-- On path_expr shift to state 44
-- On node_test shift to state 25
-- On multiplicative_expr shift to state 45
-- On location_path shift to state 35
-- On function_call shift to state 36
-- On filter_expr shift to state 37
-- On equality_expr shift to state 66
-- On axis_specifier shift to state 26
-- On and_expr shift to state 72
-- On additive_expr shift to state 69
-- On absolute_location_path shift to state 48

State 66:
and_expr -> equality_expr . [ RPAREN RBRACKET OR COMMA AND # ]
equality_expr -> equality_expr . EQUAL relational_expr [ RPAREN RBRACKET OR NOTEQUAL EQUAL COMMA AND # ]
equality_expr -> equality_expr . NOTEQUAL relational_expr [ RPAREN RBRACKET OR NOTEQUAL EQUAL COMMA AND # ]
-- On NOTEQUAL shift to state 67
-- On EQUAL shift to state 70
-- On RPAREN reduce production and_expr -> equality_expr
-- On RBRACKET reduce production and_expr -> equality_expr
-- On OR reduce production and_expr -> equality_expr
-- On COMMA reduce production and_expr -> equality_expr
-- On AND reduce production and_expr -> equality_expr
-- On # reduce production and_expr -> equality_expr

State 67:
equality_expr -> equality_expr NOTEQUAL . relational_expr [ RPAREN RBRACKET OR NOTEQUAL EQUAL COMMA AND # ]
-- On VAR shift to state 1
-- On SLASH shift to state 2
-- On NUMBER shift to state 14
-- On NODE_TYPE shift to state 3
-- On NAME_TEST shift to state 7
-- On MINUS shift to state 15
-- On LPAREN shift to state 16
-- On LITERAL shift to state 17
-- On FUNCTION_NAME shift to state 18
-- On DOUBLESLASH shift to state 20
-- On DOUBLEDOT shift to state 8
-- On DOT shift to state 9
-- On AXIS shift to state 10
-- On AT shift to state 11
-- On union_expr shift to state 30
-- On unary_expr shift to state 41
-- On step2 shift to state 12
-- On step shift to state 21
-- On relative_location_path shift to state 32
-- On relational_expr shift to state 68
-- On primary_expr shift to state 33
-- On path_expr shift to state 44
-- On node_test shift to state 25
-- On multiplicative_expr shift to state 45
-- On location_path shift to state 35
-- On function_call shift to state 36
-- On filter_expr shift to state 37
-- On axis_specifier shift to state 26
-- On additive_expr shift to state 69
-- On absolute_location_path shift to state 48

State 68:
equality_expr -> equality_expr NOTEQUAL relational_expr . [ RPAREN RBRACKET OR NOTEQUAL EQUAL COMMA AND # ]
relational_expr -> relational_expr . LT additive_expr [ RPAREN RBRACKET OR NOTEQUAL LTE LT GTE GT EQUAL COMMA AND # ]
relational_expr -> relational_expr . GT additive_expr [ RPAREN RBRACKET OR NOTEQUAL LTE LT GTE GT EQUAL COMMA AND # ]
relational_expr -> relational_expr . LTE additive_expr [ RPAREN RBRACKET OR NOTEQUAL LTE LT GTE GT EQUAL COMMA AND # ]
relational_expr -> relational_expr . GTE additive_expr [ RPAREN RBRACKET OR NOTEQUAL LTE LT GTE GT EQUAL COMMA AND # ]
-- On LTE shift to state 43
-- On LT shift to state 58
-- On GTE shift to state 60
-- On GT shift to state 62
-- On RPAREN reduce production equality_expr -> equality_expr NOTEQUAL relational_expr
-- On RBRACKET reduce production equality_expr -> equality_expr NOTEQUAL relational_expr
-- On OR reduce production equality_expr -> equality_expr NOTEQUAL relational_expr
-- On NOTEQUAL reduce production equality_expr -> equality_expr NOTEQUAL relational_expr
-- On EQUAL reduce production equality_expr -> equality_expr NOTEQUAL relational_expr
-- On COMMA reduce production equality_expr -> equality_expr NOTEQUAL relational_expr
-- On AND reduce production equality_expr -> equality_expr NOTEQUAL relational_expr
-- On # reduce production equality_expr -> equality_expr NOTEQUAL relational_expr

State 69:
additive_expr -> additive_expr . PLUS multiplicative_expr [ RPAREN RBRACKET PLUS OR NOTEQUAL MINUS LTE LT GTE GT EQUAL COMMA AND # ]
additive_expr -> additive_expr . MINUS multiplicative_expr [ RPAREN RBRACKET PLUS OR NOTEQUAL MINUS LTE LT GTE GT EQUAL COMMA AND # ]
relational_expr -> additive_expr . [ RPAREN RBRACKET OR NOTEQUAL LTE LT GTE GT EQUAL COMMA AND # ]
-- On PLUS shift to state 54
-- On MINUS shift to state 56
-- On RPAREN reduce production relational_expr -> additive_expr
-- On RBRACKET reduce production relational_expr -> additive_expr
-- On OR reduce production relational_expr -> additive_expr
-- On NOTEQUAL reduce production relational_expr -> additive_expr
-- On LTE reduce production relational_expr -> additive_expr
-- On LT reduce production relational_expr -> additive_expr
-- On GTE reduce production relational_expr -> additive_expr
-- On GT reduce production relational_expr -> additive_expr
-- On EQUAL reduce production relational_expr -> additive_expr
-- On COMMA reduce production relational_expr -> additive_expr
-- On AND reduce production relational_expr -> additive_expr
-- On # reduce production relational_expr -> additive_expr

State 70:
equality_expr -> equality_expr EQUAL . relational_expr [ RPAREN RBRACKET OR NOTEQUAL EQUAL COMMA AND # ]
-- On VAR shift to state 1
-- On SLASH shift to state 2
-- On NUMBER shift to state 14
-- On NODE_TYPE shift to state 3
-- On NAME_TEST shift to state 7
-- On MINUS shift to state 15
-- On LPAREN shift to state 16
-- On LITERAL shift to state 17
-- On FUNCTION_NAME shift to state 18
-- On DOUBLESLASH shift to state 20
-- On DOUBLEDOT shift to state 8
-- On DOT shift to state 9
-- On AXIS shift to state 10
-- On AT shift to state 11
-- On union_expr shift to state 30
-- On unary_expr shift to state 41
-- On step2 shift to state 12
-- On step shift to state 21
-- On relative_location_path shift to state 32
-- On relational_expr shift to state 71
-- On primary_expr shift to state 33
-- On path_expr shift to state 44
-- On node_test shift to state 25
-- On multiplicative_expr shift to state 45
-- On location_path shift to state 35
-- On function_call shift to state 36
-- On filter_expr shift to state 37
-- On axis_specifier shift to state 26
-- On additive_expr shift to state 69
-- On absolute_location_path shift to state 48

State 71:
equality_expr -> equality_expr EQUAL relational_expr . [ RPAREN RBRACKET OR NOTEQUAL EQUAL COMMA AND # ]
relational_expr -> relational_expr . LT additive_expr [ RPAREN RBRACKET OR NOTEQUAL LTE LT GTE GT EQUAL COMMA AND # ]
relational_expr -> relational_expr . GT additive_expr [ RPAREN RBRACKET OR NOTEQUAL LTE LT GTE GT EQUAL COMMA AND # ]
relational_expr -> relational_expr . LTE additive_expr [ RPAREN RBRACKET OR NOTEQUAL LTE LT GTE GT EQUAL COMMA AND # ]
relational_expr -> relational_expr . GTE additive_expr [ RPAREN RBRACKET OR NOTEQUAL LTE LT GTE GT EQUAL COMMA AND # ]
-- On LTE shift to state 43
-- On LT shift to state 58
-- On GTE shift to state 60
-- On GT shift to state 62
-- On RPAREN reduce production equality_expr -> equality_expr EQUAL relational_expr
-- On RBRACKET reduce production equality_expr -> equality_expr EQUAL relational_expr
-- On OR reduce production equality_expr -> equality_expr EQUAL relational_expr
-- On NOTEQUAL reduce production equality_expr -> equality_expr EQUAL relational_expr
-- On EQUAL reduce production equality_expr -> equality_expr EQUAL relational_expr
-- On COMMA reduce production equality_expr -> equality_expr EQUAL relational_expr
-- On AND reduce production equality_expr -> equality_expr EQUAL relational_expr
-- On # reduce production equality_expr -> equality_expr EQUAL relational_expr

State 72:
and_expr -> and_expr . AND equality_expr [ RPAREN RBRACKET OR COMMA AND # ]
or_expr -> or_expr OR and_expr . [ RPAREN RBRACKET OR COMMA # ]
-- On AND shift to state 73
-- On RPAREN reduce production or_expr -> or_expr OR and_expr
-- On RBRACKET reduce production or_expr -> or_expr OR and_expr
-- On OR reduce production or_expr -> or_expr OR and_expr
-- On COMMA reduce production or_expr -> or_expr OR and_expr
-- On # reduce production or_expr -> or_expr OR and_expr

State 73:
and_expr -> and_expr AND . equality_expr [ RPAREN RBRACKET OR COMMA AND # ]
-- On VAR shift to state 1
-- On SLASH shift to state 2
-- On NUMBER shift to state 14
-- On NODE_TYPE shift to state 3
-- On NAME_TEST shift to state 7
-- On MINUS shift to state 15
-- On LPAREN shift to state 16
-- On LITERAL shift to state 17
-- On FUNCTION_NAME shift to state 18
-- On DOUBLESLASH shift to state 20
-- On DOUBLEDOT shift to state 8
-- On DOT shift to state 9
-- On AXIS shift to state 10
-- On AT shift to state 11
-- On union_expr shift to state 30
-- On unary_expr shift to state 41
-- On step2 shift to state 12
-- On step shift to state 21
-- On relative_location_path shift to state 32
-- On relational_expr shift to state 42
-- On primary_expr shift to state 33
-- On path_expr shift to state 44
-- On node_test shift to state 25
-- On multiplicative_expr shift to state 45
-- On location_path shift to state 35
-- On function_call shift to state 36
-- On filter_expr shift to state 37
-- On equality_expr shift to state 74
-- On axis_specifier shift to state 26
-- On additive_expr shift to state 69
-- On absolute_location_path shift to state 48

State 74:
and_expr -> and_expr AND equality_expr . [ RPAREN RBRACKET OR COMMA AND # ]
equality_expr -> equality_expr . EQUAL relational_expr [ RPAREN RBRACKET OR NOTEQUAL EQUAL COMMA AND # ]
equality_expr -> equality_expr . NOTEQUAL relational_expr [ RPAREN RBRACKET OR NOTEQUAL EQUAL COMMA AND # ]
-- On NOTEQUAL shift to state 67
-- On EQUAL shift to state 70
-- On RPAREN reduce production and_expr -> and_expr AND equality_expr
-- On RBRACKET reduce production and_expr -> and_expr AND equality_expr
-- On OR reduce production and_expr -> and_expr AND equality_expr
-- On COMMA reduce production and_expr -> and_expr AND equality_expr
-- On AND reduce production and_expr -> and_expr AND equality_expr
-- On # reduce production and_expr -> and_expr AND equality_expr

State 75:
filter_expr -> filter_expr LBRACKET expr . RBRACKET [ SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT LBRACKET GTE GT EQUAL DOUBLESLASH DIV COMMA AND # ]
-- On RBRACKET shift to state 76

State 76:
filter_expr -> filter_expr LBRACKET expr RBRACKET . [ SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT LBRACKET GTE GT EQUAL DOUBLESLASH DIV COMMA AND # ]
-- On SLASH reduce production filter_expr -> filter_expr LBRACKET expr RBRACKET
-- On RPAREN reduce production filter_expr -> filter_expr LBRACKET expr RBRACKET
-- On RBRACKET reduce production filter_expr -> filter_expr LBRACKET expr RBRACKET
-- On PLUS reduce production filter_expr -> filter_expr LBRACKET expr RBRACKET
-- On PIPE reduce production filter_expr -> filter_expr LBRACKET expr RBRACKET
-- On OR reduce production filter_expr -> filter_expr LBRACKET expr RBRACKET
-- On NOTEQUAL reduce production filter_expr -> filter_expr LBRACKET expr RBRACKET
-- On MUL reduce production filter_expr -> filter_expr LBRACKET expr RBRACKET
-- On MOD reduce production filter_expr -> filter_expr LBRACKET expr RBRACKET
-- On MINUS reduce production filter_expr -> filter_expr LBRACKET expr RBRACKET
-- On LTE reduce production filter_expr -> filter_expr LBRACKET expr RBRACKET
-- On LT reduce production filter_expr -> filter_expr LBRACKET expr RBRACKET
-- On LBRACKET reduce production filter_expr -> filter_expr LBRACKET expr RBRACKET
-- On GTE reduce production filter_expr -> filter_expr LBRACKET expr RBRACKET
-- On GT reduce production filter_expr -> filter_expr LBRACKET expr RBRACKET
-- On EQUAL reduce production filter_expr -> filter_expr LBRACKET expr RBRACKET
-- On DOUBLESLASH reduce production filter_expr -> filter_expr LBRACKET expr RBRACKET
-- On DIV reduce production filter_expr -> filter_expr LBRACKET expr RBRACKET
-- On COMMA reduce production filter_expr -> filter_expr LBRACKET expr RBRACKET
-- On AND reduce production filter_expr -> filter_expr LBRACKET expr RBRACKET
-- On # reduce production filter_expr -> filter_expr LBRACKET expr RBRACKET

State 77:
and_expr -> and_expr . AND equality_expr [ RPAREN RBRACKET OR COMMA AND # ]
or_expr -> and_expr . [ RPAREN RBRACKET OR COMMA # ]
-- On AND shift to state 73
-- On RPAREN reduce production or_expr -> and_expr
-- On RBRACKET reduce production or_expr -> and_expr
-- On OR reduce production or_expr -> and_expr
-- On COMMA reduce production or_expr -> and_expr
-- On # reduce production or_expr -> and_expr

State 78:
path_expr -> filter_expr DOUBLESLASH . relative_location_path [ RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND # ]
-- On NODE_TYPE shift to state 3
-- On NAME_TEST shift to state 7
-- On DOUBLEDOT shift to state 8
-- On DOT shift to state 9
-- On AXIS shift to state 10
-- On AT shift to state 11
-- On step2 shift to state 12
-- On step shift to state 21
-- On relative_location_path shift to state 79
-- On node_test shift to state 25
-- On axis_specifier shift to state 26

State 79:
path_expr -> filter_expr DOUBLESLASH relative_location_path . [ RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND # ]
relative_location_path -> relative_location_path . SLASH step [ SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DOUBLESLASH DIV COMMA AND # ]
relative_location_path -> relative_location_path . DOUBLESLASH step [ SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DOUBLESLASH DIV COMMA AND # ]
-- On SLASH shift to state 23
-- On DOUBLESLASH shift to state 28
-- On RPAREN reduce production path_expr -> filter_expr DOUBLESLASH relative_location_path
-- On RBRACKET reduce production path_expr -> filter_expr DOUBLESLASH relative_location_path
-- On PLUS reduce production path_expr -> filter_expr DOUBLESLASH relative_location_path
-- On PIPE reduce production path_expr -> filter_expr DOUBLESLASH relative_location_path
-- On OR reduce production path_expr -> filter_expr DOUBLESLASH relative_location_path
-- On NOTEQUAL reduce production path_expr -> filter_expr DOUBLESLASH relative_location_path
-- On MUL reduce production path_expr -> filter_expr DOUBLESLASH relative_location_path
-- On MOD reduce production path_expr -> filter_expr DOUBLESLASH relative_location_path
-- On MINUS reduce production path_expr -> filter_expr DOUBLESLASH relative_location_path
-- On LTE reduce production path_expr -> filter_expr DOUBLESLASH relative_location_path
-- On LT reduce production path_expr -> filter_expr DOUBLESLASH relative_location_path
-- On GTE reduce production path_expr -> filter_expr DOUBLESLASH relative_location_path
-- On GT reduce production path_expr -> filter_expr DOUBLESLASH relative_location_path
-- On EQUAL reduce production path_expr -> filter_expr DOUBLESLASH relative_location_path
-- On DIV reduce production path_expr -> filter_expr DOUBLESLASH relative_location_path
-- On COMMA reduce production path_expr -> filter_expr DOUBLESLASH relative_location_path
-- On AND reduce production path_expr -> filter_expr DOUBLESLASH relative_location_path
-- On # reduce production path_expr -> filter_expr DOUBLESLASH relative_location_path

State 80:
arguments -> expr . [ RPAREN COMMA ]
-- On RPAREN reduce production arguments -> expr
-- On COMMA reduce production arguments -> expr

State 81:
arguments -> arguments . COMMA expr [ RPAREN COMMA ]
function_call -> FUNCTION_NAME arguments . RPAREN [ SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT LBRACKET GTE GT EQUAL DOUBLESLASH DIV COMMA AND # ]
-- On RPAREN shift to state 82
-- On COMMA shift to state 83

State 82:
function_call -> FUNCTION_NAME arguments RPAREN . [ SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT LBRACKET GTE GT EQUAL DOUBLESLASH DIV COMMA AND # ]
-- On SLASH reduce production function_call -> FUNCTION_NAME arguments RPAREN
-- On RPAREN reduce production function_call -> FUNCTION_NAME arguments RPAREN
-- On RBRACKET reduce production function_call -> FUNCTION_NAME arguments RPAREN
-- On PLUS reduce production function_call -> FUNCTION_NAME arguments RPAREN
-- On PIPE reduce production function_call -> FUNCTION_NAME arguments RPAREN
-- On OR reduce production function_call -> FUNCTION_NAME arguments RPAREN
-- On NOTEQUAL reduce production function_call -> FUNCTION_NAME arguments RPAREN
-- On MUL reduce production function_call -> FUNCTION_NAME arguments RPAREN
-- On MOD reduce production function_call -> FUNCTION_NAME arguments RPAREN
-- On MINUS reduce production function_call -> FUNCTION_NAME arguments RPAREN
-- On LTE reduce production function_call -> FUNCTION_NAME arguments RPAREN
-- On LT reduce production function_call -> FUNCTION_NAME arguments RPAREN
-- On LBRACKET reduce production function_call -> FUNCTION_NAME arguments RPAREN
-- On GTE reduce production function_call -> FUNCTION_NAME arguments RPAREN
-- On GT reduce production function_call -> FUNCTION_NAME arguments RPAREN
-- On EQUAL reduce production function_call -> FUNCTION_NAME arguments RPAREN
-- On DOUBLESLASH reduce production function_call -> FUNCTION_NAME arguments RPAREN
-- On DIV reduce production function_call -> FUNCTION_NAME arguments RPAREN
-- On COMMA reduce production function_call -> FUNCTION_NAME arguments RPAREN
-- On AND reduce production function_call -> FUNCTION_NAME arguments RPAREN
-- On # reduce production function_call -> FUNCTION_NAME arguments RPAREN

State 83:
arguments -> arguments COMMA . expr [ RPAREN COMMA ]
-- On VAR shift to state 1
-- On SLASH shift to state 2
-- On NUMBER shift to state 14
-- On NODE_TYPE shift to state 3
-- On NAME_TEST shift to state 7
-- On MINUS shift to state 15
-- On LPAREN shift to state 16
-- On LITERAL shift to state 17
-- On FUNCTION_NAME shift to state 18
-- On DOUBLESLASH shift to state 20
-- On DOUBLEDOT shift to state 8
-- On DOT shift to state 9
-- On AXIS shift to state 10
-- On AT shift to state 11
-- On union_expr shift to state 30
-- On unary_expr shift to state 41
-- On step2 shift to state 12
-- On step shift to state 21
-- On relative_location_path shift to state 32
-- On relational_expr shift to state 42
-- On primary_expr shift to state 33
-- On path_expr shift to state 44
-- On or_expr shift to state 64
-- On node_test shift to state 25
-- On multiplicative_expr shift to state 45
-- On location_path shift to state 35
-- On function_call shift to state 36
-- On filter_expr shift to state 37
-- On expr shift to state 84
-- On equality_expr shift to state 66
-- On axis_specifier shift to state 26
-- On and_expr shift to state 77
-- On additive_expr shift to state 69
-- On absolute_location_path shift to state 48

State 84:
arguments -> arguments COMMA expr . [ RPAREN COMMA ]
-- On RPAREN reduce production arguments -> arguments COMMA expr
-- On COMMA reduce production arguments -> arguments COMMA expr

State 85:
primary_expr -> LPAREN expr . RPAREN [ SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT LBRACKET GTE GT EQUAL DOUBLESLASH DIV COMMA AND # ]
-- On RPAREN shift to state 86

State 86:
primary_expr -> LPAREN expr RPAREN . [ SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT LBRACKET GTE GT EQUAL DOUBLESLASH DIV COMMA AND # ]
-- On SLASH reduce production primary_expr -> LPAREN expr RPAREN
-- On RPAREN reduce production primary_expr -> LPAREN expr RPAREN
-- On RBRACKET reduce production primary_expr -> LPAREN expr RPAREN
-- On PLUS reduce production primary_expr -> LPAREN expr RPAREN
-- On PIPE reduce production primary_expr -> LPAREN expr RPAREN
-- On OR reduce production primary_expr -> LPAREN expr RPAREN
-- On NOTEQUAL reduce production primary_expr -> LPAREN expr RPAREN
-- On MUL reduce production primary_expr -> LPAREN expr RPAREN
-- On MOD reduce production primary_expr -> LPAREN expr RPAREN
-- On MINUS reduce production primary_expr -> LPAREN expr RPAREN
-- On LTE reduce production primary_expr -> LPAREN expr RPAREN
-- On LT reduce production primary_expr -> LPAREN expr RPAREN
-- On LBRACKET reduce production primary_expr -> LPAREN expr RPAREN
-- On GTE reduce production primary_expr -> LPAREN expr RPAREN
-- On GT reduce production primary_expr -> LPAREN expr RPAREN
-- On EQUAL reduce production primary_expr -> LPAREN expr RPAREN
-- On DOUBLESLASH reduce production primary_expr -> LPAREN expr RPAREN
-- On DIV reduce production primary_expr -> LPAREN expr RPAREN
-- On COMMA reduce production primary_expr -> LPAREN expr RPAREN
-- On AND reduce production primary_expr -> LPAREN expr RPAREN
-- On # reduce production primary_expr -> LPAREN expr RPAREN

State 87:
unary_expr -> MINUS unary_expr . [ RPAREN RBRACKET PLUS OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND # ]
-- On RPAREN reduce production unary_expr -> MINUS unary_expr
-- On RBRACKET reduce production unary_expr -> MINUS unary_expr
-- On PLUS reduce production unary_expr -> MINUS unary_expr
-- On OR reduce production unary_expr -> MINUS unary_expr
-- On NOTEQUAL reduce production unary_expr -> MINUS unary_expr
-- On MUL reduce production unary_expr -> MINUS unary_expr
-- On MOD reduce production unary_expr -> MINUS unary_expr
-- On MINUS reduce production unary_expr -> MINUS unary_expr
-- On LTE reduce production unary_expr -> MINUS unary_expr
-- On LT reduce production unary_expr -> MINUS unary_expr
-- On GTE reduce production unary_expr -> MINUS unary_expr
-- On GT reduce production unary_expr -> MINUS unary_expr
-- On EQUAL reduce production unary_expr -> MINUS unary_expr
-- On DIV reduce production unary_expr -> MINUS unary_expr
-- On COMMA reduce production unary_expr -> MINUS unary_expr
-- On AND reduce production unary_expr -> MINUS unary_expr
-- On # reduce production unary_expr -> MINUS unary_expr

State 88:
step2 -> step2 LBRACKET expr . RBRACKET [ SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT LBRACKET GTE GT EQUAL DOUBLESLASH DIV COMMA AND # ]
-- On RBRACKET shift to state 89

State 89:
step2 -> step2 LBRACKET expr RBRACKET . [ SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT LBRACKET GTE GT EQUAL DOUBLESLASH DIV COMMA AND # ]
-- On SLASH reduce production step2 -> step2 LBRACKET expr RBRACKET
-- On RPAREN reduce production step2 -> step2 LBRACKET expr RBRACKET
-- On RBRACKET reduce production step2 -> step2 LBRACKET expr RBRACKET
-- On PLUS reduce production step2 -> step2 LBRACKET expr RBRACKET
-- On PIPE reduce production step2 -> step2 LBRACKET expr RBRACKET
-- On OR reduce production step2 -> step2 LBRACKET expr RBRACKET
-- On NOTEQUAL reduce production step2 -> step2 LBRACKET expr RBRACKET
-- On MUL reduce production step2 -> step2 LBRACKET expr RBRACKET
-- On MOD reduce production step2 -> step2 LBRACKET expr RBRACKET
-- On MINUS reduce production step2 -> step2 LBRACKET expr RBRACKET
-- On LTE reduce production step2 -> step2 LBRACKET expr RBRACKET
-- On LT reduce production step2 -> step2 LBRACKET expr RBRACKET
-- On LBRACKET reduce production step2 -> step2 LBRACKET expr RBRACKET
-- On GTE reduce production step2 -> step2 LBRACKET expr RBRACKET
-- On GT reduce production step2 -> step2 LBRACKET expr RBRACKET
-- On EQUAL reduce production step2 -> step2 LBRACKET expr RBRACKET
-- On DOUBLESLASH reduce production step2 -> step2 LBRACKET expr RBRACKET
-- On DIV reduce production step2 -> step2 LBRACKET expr RBRACKET
-- On COMMA reduce production step2 -> step2 LBRACKET expr RBRACKET
-- On AND reduce production step2 -> step2 LBRACKET expr RBRACKET
-- On # reduce production step2 -> step2 LBRACKET expr RBRACKET

State 90:
absolute_location_path -> SLASH relative_location_path . [ RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND # ]
relative_location_path -> relative_location_path . SLASH step [ SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DOUBLESLASH DIV COMMA AND # ]
relative_location_path -> relative_location_path . DOUBLESLASH step [ SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DOUBLESLASH DIV COMMA AND # ]
-- On SLASH shift to state 23
-- On DOUBLESLASH shift to state 28
-- On RPAREN reduce production absolute_location_path -> SLASH relative_location_path
-- On RBRACKET reduce production absolute_location_path -> SLASH relative_location_path
-- On PLUS reduce production absolute_location_path -> SLASH relative_location_path
-- On PIPE reduce production absolute_location_path -> SLASH relative_location_path
-- On OR reduce production absolute_location_path -> SLASH relative_location_path
-- On NOTEQUAL reduce production absolute_location_path -> SLASH relative_location_path
-- On MUL reduce production absolute_location_path -> SLASH relative_location_path
-- On MOD reduce production absolute_location_path -> SLASH relative_location_path
-- On MINUS reduce production absolute_location_path -> SLASH relative_location_path
-- On LTE reduce production absolute_location_path -> SLASH relative_location_path
-- On LT reduce production absolute_location_path -> SLASH relative_location_path
-- On GTE reduce production absolute_location_path -> SLASH relative_location_path
-- On GT reduce production absolute_location_path -> SLASH relative_location_path
-- On EQUAL reduce production absolute_location_path -> SLASH relative_location_path
-- On DIV reduce production absolute_location_path -> SLASH relative_location_path
-- On COMMA reduce production absolute_location_path -> SLASH relative_location_path
-- On AND reduce production absolute_location_path -> SLASH relative_location_path
-- On # reduce production absolute_location_path -> SLASH relative_location_path

State 91:
expr -> or_expr . [ # ]
or_expr -> or_expr . OR and_expr [ OR # ]
-- On OR shift to state 65
-- On # reduce production expr -> or_expr

State 92:
expr' -> expr . [ # ]
-- On # accept expr

State 93:
location_path' -> . location_path [ # ]
-- On SLASH shift to state 2
-- On NODE_TYPE shift to state 3
-- On NAME_TEST shift to state 7
-- On DOUBLESLASH shift to state 20
-- On DOUBLEDOT shift to state 8
-- On DOT shift to state 9
-- On AXIS shift to state 10
-- On AT shift to state 11
-- On step2 shift to state 12
-- On step shift to state 21
-- On relative_location_path shift to state 32
-- On node_test shift to state 25
-- On location_path shift to state 94
-- On axis_specifier shift to state 26
-- On absolute_location_path shift to state 48

State 94:
location_path' -> location_path . [ # ]
-- On # accept location_path

State 1 has an end-of-stream conflict. There is a tension between
(1) reducing production primary_expr -> VAR
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT LBRACKET GTE GT EQUAL DOUBLESLASH DIV COMMA AND,
which would require some other action.

State 2 has an end-of-stream conflict. There is a tension between
(1) reducing production absolute_location_path -> SLASH
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of RPAREN RBRACKET PLUS PIPE OR NOTEQUAL NODE_TYPE NAME_TEST MUL MOD MINUS LTE LT GTE GT EQUAL DOUBLEDOT DOT DIV COMMA AXIS AT AND,
which would require some other action.

State 4 has an end-of-stream conflict. There is a tension between
(1) reducing production node_test -> NODE_TYPE RPAREN
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT LBRACKET GTE GT EQUAL DOUBLESLASH DIV COMMA AND,
which would require some other action.

State 6 has an end-of-stream conflict. There is a tension between
(1) reducing production node_test -> NODE_TYPE LITERAL RPAREN
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT LBRACKET GTE GT EQUAL DOUBLESLASH DIV COMMA AND,
which would require some other action.

State 7 has an end-of-stream conflict. There is a tension between
(1) reducing production node_test -> NAME_TEST
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT LBRACKET GTE GT EQUAL DOUBLESLASH DIV COMMA AND,
which would require some other action.

State 8 has an end-of-stream conflict. There is a tension between
(1) reducing production step -> DOUBLEDOT
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DOUBLESLASH DIV COMMA AND,
which would require some other action.

State 9 has an end-of-stream conflict. There is a tension between
(1) reducing production step -> DOT
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DOUBLESLASH DIV COMMA AND,
which would require some other action.

State 12 has an end-of-stream conflict. There is a tension between
(1) reducing production step -> step2
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT LBRACKET GTE GT EQUAL DOUBLESLASH DIV COMMA AND,
which would require some other action.

State 14 has an end-of-stream conflict. There is a tension between
(1) reducing production primary_expr -> NUMBER
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT LBRACKET GTE GT EQUAL DOUBLESLASH DIV COMMA AND,
which would require some other action.

State 17 has an end-of-stream conflict. There is a tension between
(1) reducing production primary_expr -> LITERAL
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT LBRACKET GTE GT EQUAL DOUBLESLASH DIV COMMA AND,
which would require some other action.

State 19 has an end-of-stream conflict. There is a tension between
(1) reducing production function_call -> FUNCTION_NAME RPAREN
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT LBRACKET GTE GT EQUAL DOUBLESLASH DIV COMMA AND,
which would require some other action.

State 21 has an end-of-stream conflict. There is a tension between
(1) reducing production relative_location_path -> step
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DOUBLESLASH DIV COMMA AND,
which would require some other action.

State 22 has an end-of-stream conflict. There is a tension between
(1) reducing production absolute_location_path -> DOUBLESLASH relative_location_path
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DOUBLESLASH DIV COMMA AND,
which would require some other action.

State 24 has an end-of-stream conflict. There is a tension between
(1) reducing production relative_location_path -> relative_location_path SLASH step
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DOUBLESLASH DIV COMMA AND,
which would require some other action.

State 25 has an end-of-stream conflict. There is a tension between
(1) reducing production step2 -> node_test
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT LBRACKET GTE GT EQUAL DOUBLESLASH DIV COMMA AND,
which would require some other action.

State 27 has an end-of-stream conflict. There is a tension between
(1) reducing production step -> axis_specifier step2
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT LBRACKET GTE GT EQUAL DOUBLESLASH DIV COMMA AND,
which would require some other action.

State 29 has an end-of-stream conflict. There is a tension between
(1) reducing production relative_location_path -> relative_location_path DOUBLESLASH step
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DOUBLESLASH DIV COMMA AND,
which would require some other action.

State 30 has an end-of-stream conflict. There is a tension between
(1) reducing production unary_expr -> union_expr
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND,
which would require some other action.

State 32 has an end-of-stream conflict. There is a tension between
(1) reducing production location_path -> relative_location_path
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DOUBLESLASH DIV COMMA AND,
which would require some other action.

State 33 has an end-of-stream conflict. There is a tension between
(1) reducing production filter_expr -> primary_expr
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT LBRACKET GTE GT EQUAL DOUBLESLASH DIV COMMA AND,
which would require some other action.

State 34 has an end-of-stream conflict. There is a tension between
(1) reducing production union_expr -> union_expr PIPE path_expr
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND,
which would require some other action.

State 35 has an end-of-stream conflict. There is a tension between
(1) reducing production path_expr -> location_path
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND,
which would require some other action.

State 36 has an end-of-stream conflict. There is a tension between
(1) reducing production primary_expr -> function_call
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT LBRACKET GTE GT EQUAL DOUBLESLASH DIV COMMA AND,
which would require some other action.

State 37 has an end-of-stream conflict. There is a tension between
(1) reducing production path_expr -> filter_expr
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT LBRACKET GTE GT EQUAL DOUBLESLASH DIV COMMA AND,
which would require some other action.

State 39 has an end-of-stream conflict. There is a tension between
(1) reducing production path_expr -> filter_expr SLASH relative_location_path
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DOUBLESLASH DIV COMMA AND,
which would require some other action.

State 41 has an end-of-stream conflict. There is a tension between
(1) reducing production multiplicative_expr -> unary_expr
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of RPAREN RBRACKET PLUS OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND,
which would require some other action.

State 42 has an end-of-stream conflict. There is a tension between
(1) reducing production equality_expr -> relational_expr
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of RPAREN RBRACKET OR NOTEQUAL LTE LT GTE GT EQUAL COMMA AND,
which would require some other action.

State 44 has an end-of-stream conflict. There is a tension between
(1) reducing production union_expr -> path_expr
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND,
which would require some other action.

State 45 has an end-of-stream conflict. There is a tension between
(1) reducing production additive_expr -> multiplicative_expr
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of RPAREN RBRACKET PLUS OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND,
which would require some other action.

State 47 has an end-of-stream conflict. There is a tension between
(1) reducing production multiplicative_expr -> multiplicative_expr MUL unary_expr
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of RPAREN RBRACKET PLUS OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND,
which would require some other action.

State 48 has an end-of-stream conflict. There is a tension between
(1) reducing production location_path -> absolute_location_path
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND,
which would require some other action.

State 50 has an end-of-stream conflict. There is a tension between
(1) reducing production multiplicative_expr -> multiplicative_expr MOD unary_expr
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of RPAREN RBRACKET PLUS OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND,
which would require some other action.

State 52 has an end-of-stream conflict. There is a tension between
(1) reducing production multiplicative_expr -> multiplicative_expr DIV unary_expr
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of RPAREN RBRACKET PLUS OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND,
which would require some other action.

State 53 has an end-of-stream conflict. There is a tension between
(1) reducing production relational_expr -> relational_expr LTE additive_expr
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of RPAREN RBRACKET PLUS OR NOTEQUAL MINUS LTE LT GTE GT EQUAL COMMA AND,
which would require some other action.

State 55 has an end-of-stream conflict. There is a tension between
(1) reducing production additive_expr -> additive_expr PLUS multiplicative_expr
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of RPAREN RBRACKET PLUS OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND,
which would require some other action.

State 57 has an end-of-stream conflict. There is a tension between
(1) reducing production additive_expr -> additive_expr MINUS multiplicative_expr
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of RPAREN RBRACKET PLUS OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND,
which would require some other action.

State 59 has an end-of-stream conflict. There is a tension between
(1) reducing production relational_expr -> relational_expr LT additive_expr
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of RPAREN RBRACKET PLUS OR NOTEQUAL MINUS LTE LT GTE GT EQUAL COMMA AND,
which would require some other action.

State 61 has an end-of-stream conflict. There is a tension between
(1) reducing production relational_expr -> relational_expr GTE additive_expr
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of RPAREN RBRACKET PLUS OR NOTEQUAL MINUS LTE LT GTE GT EQUAL COMMA AND,
which would require some other action.

State 63 has an end-of-stream conflict. There is a tension between
(1) reducing production relational_expr -> relational_expr GT additive_expr
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of RPAREN RBRACKET PLUS OR NOTEQUAL MINUS LTE LT GTE GT EQUAL COMMA AND,
which would require some other action.

State 66 has an end-of-stream conflict. There is a tension between
(1) reducing production and_expr -> equality_expr
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of RPAREN RBRACKET OR NOTEQUAL EQUAL COMMA AND,
which would require some other action.

State 68 has an end-of-stream conflict. There is a tension between
(1) reducing production equality_expr -> equality_expr NOTEQUAL relational_expr
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of RPAREN RBRACKET OR NOTEQUAL LTE LT GTE GT EQUAL COMMA AND,
which would require some other action.

State 69 has an end-of-stream conflict. There is a tension between
(1) reducing production relational_expr -> additive_expr
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of RPAREN RBRACKET PLUS OR NOTEQUAL MINUS LTE LT GTE GT EQUAL COMMA AND,
which would require some other action.

State 71 has an end-of-stream conflict. There is a tension between
(1) reducing production equality_expr -> equality_expr EQUAL relational_expr
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of RPAREN RBRACKET OR NOTEQUAL LTE LT GTE GT EQUAL COMMA AND,
which would require some other action.

State 72 has an end-of-stream conflict. There is a tension between
(1) reducing production or_expr -> or_expr OR and_expr
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of RPAREN RBRACKET OR COMMA AND,
which would require some other action.

State 74 has an end-of-stream conflict. There is a tension between
(1) reducing production and_expr -> and_expr AND equality_expr
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of RPAREN RBRACKET OR NOTEQUAL EQUAL COMMA AND,
which would require some other action.

State 76 has an end-of-stream conflict. There is a tension between
(1) reducing production filter_expr -> filter_expr LBRACKET expr RBRACKET
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT LBRACKET GTE GT EQUAL DOUBLESLASH DIV COMMA AND,
which would require some other action.

State 77 has an end-of-stream conflict. There is a tension between
(1) reducing production or_expr -> and_expr
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of RPAREN RBRACKET OR COMMA AND,
which would require some other action.

State 79 has an end-of-stream conflict. There is a tension between
(1) reducing production path_expr -> filter_expr DOUBLESLASH relative_location_path
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DOUBLESLASH DIV COMMA AND,
which would require some other action.

State 82 has an end-of-stream conflict. There is a tension between
(1) reducing production function_call -> FUNCTION_NAME arguments RPAREN
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT LBRACKET GTE GT EQUAL DOUBLESLASH DIV COMMA AND,
which would require some other action.

State 86 has an end-of-stream conflict. There is a tension between
(1) reducing production primary_expr -> LPAREN expr RPAREN
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT LBRACKET GTE GT EQUAL DOUBLESLASH DIV COMMA AND,
which would require some other action.

State 87 has an end-of-stream conflict. There is a tension between
(1) reducing production unary_expr -> MINUS unary_expr
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of RPAREN RBRACKET PLUS OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND,
which would require some other action.

State 89 has an end-of-stream conflict. There is a tension between
(1) reducing production step2 -> step2 LBRACKET expr RBRACKET
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT LBRACKET GTE GT EQUAL DOUBLESLASH DIV COMMA AND,
which would require some other action.

State 90 has an end-of-stream conflict. There is a tension between
(1) reducing production absolute_location_path -> SLASH relative_location_path
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DOUBLESLASH DIV COMMA AND,
which would require some other action.

State 91 has an end-of-stream conflict. There is a tension between
(1) reducing production expr -> or_expr
without even requesting a lookahead token, and
(2) checking whether the lookahead token is OR,
which would require some other action.

