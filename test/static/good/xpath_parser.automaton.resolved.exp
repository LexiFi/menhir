State 0:
## Known stack suffix:
##
## LR(1) items:
expr' -> . expr [ # ]
## Transitions:
-- On VAR shift to state 1
-- On SLASH shift to state 2
-- On NUMBER shift to state 14
-- On NODE_TYPE shift to state 3
-- On NAME_TEST shift to state 7
-- On MINUS shift to state 15
-- On LPAREN shift to state 16
-- On LITERAL shift to state 17
-- On FUNCTION_NAME shift to state 18
-- On DOUBLESLASH shift to state 20
-- On DOUBLEDOT shift to state 8
-- On DOT shift to state 9
-- On AXIS shift to state 10
-- On AT shift to state 11
-- On union_expr shift to state 30
-- On unary_expr shift to state 41
-- On step2 shift to state 12
-- On step shift to state 21
-- On relative_location_path shift to state 32
-- On relational_expr shift to state 42
-- On primary_expr shift to state 33
-- On path_expr shift to state 44
-- On or_expr shift to state 91
-- On node_test shift to state 25
-- On multiplicative_expr shift to state 45
-- On location_path shift to state 35
-- On function_call shift to state 36
-- On filter_expr shift to state 37
-- On expr shift to state 92
-- On equality_expr shift to state 66
-- On axis_specifier shift to state 26
-- On and_expr shift to state 77
-- On additive_expr shift to state 69
-- On absolute_location_path shift to state 48
## Reductions:

State 1:
## Known stack suffix:
## VAR
## LR(1) items:
primary_expr -> VAR . [ SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT LBRACKET GTE GT EQUAL DOUBLESLASH DIV COMMA AND # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_expr -> VAR

State 2:
## Known stack suffix:
## SLASH
## LR(1) items:
absolute_location_path -> SLASH . [ RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND # ]
absolute_location_path -> SLASH . relative_location_path [ RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND # ]
## Transitions:
-- On NODE_TYPE shift to state 3
-- On NAME_TEST shift to state 7
-- On DOUBLEDOT shift to state 8
-- On DOT shift to state 9
-- On AXIS shift to state 10
-- On AT shift to state 11
-- On step2 shift to state 12
-- On step shift to state 21
-- On relative_location_path shift to state 90
-- On node_test shift to state 25
-- On axis_specifier shift to state 26
## Reductions:
-- On RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND
--   reduce production absolute_location_path -> SLASH

State 3:
## Known stack suffix:
## NODE_TYPE
## LR(1) items:
node_test -> NODE_TYPE . RPAREN [ SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT LBRACKET GTE GT EQUAL DOUBLESLASH DIV COMMA AND # ]
node_test -> NODE_TYPE . LITERAL RPAREN [ SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT LBRACKET GTE GT EQUAL DOUBLESLASH DIV COMMA AND # ]
## Transitions:
-- On RPAREN shift to state 4
-- On LITERAL shift to state 5
## Reductions:

State 4:
## Known stack suffix:
## NODE_TYPE RPAREN
## LR(1) items:
node_test -> NODE_TYPE RPAREN . [ SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT LBRACKET GTE GT EQUAL DOUBLESLASH DIV COMMA AND # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production node_test -> NODE_TYPE RPAREN

State 5:
## Known stack suffix:
## NODE_TYPE LITERAL
## LR(1) items:
node_test -> NODE_TYPE LITERAL . RPAREN [ SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT LBRACKET GTE GT EQUAL DOUBLESLASH DIV COMMA AND # ]
## Transitions:
-- On RPAREN shift to state 6
## Reductions:

State 6:
## Known stack suffix:
## NODE_TYPE LITERAL RPAREN
## LR(1) items:
node_test -> NODE_TYPE LITERAL RPAREN . [ SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT LBRACKET GTE GT EQUAL DOUBLESLASH DIV COMMA AND # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production node_test -> NODE_TYPE LITERAL RPAREN

State 7:
## Known stack suffix:
## NAME_TEST
## LR(1) items:
node_test -> NAME_TEST . [ SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT LBRACKET GTE GT EQUAL DOUBLESLASH DIV COMMA AND # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production node_test -> NAME_TEST

State 8:
## Known stack suffix:
## DOUBLEDOT
## LR(1) items:
step -> DOUBLEDOT . [ SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DOUBLESLASH DIV COMMA AND # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production step -> DOUBLEDOT

State 9:
## Known stack suffix:
## DOT
## LR(1) items:
step -> DOT . [ SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DOUBLESLASH DIV COMMA AND # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production step -> DOT

State 10:
## Known stack suffix:
## AXIS
## LR(1) items:
axis_specifier -> AXIS . [ NODE_TYPE NAME_TEST ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production axis_specifier -> AXIS

State 11:
## Known stack suffix:
## AT
## LR(1) items:
axis_specifier -> AT . [ NODE_TYPE NAME_TEST ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production axis_specifier -> AT

State 12:
## Known stack suffix:
## step2
## LR(1) items:
step -> step2 . [ SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DOUBLESLASH DIV COMMA AND # ]
step2 -> step2 . LBRACKET expr RBRACKET [ SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT LBRACKET GTE GT EQUAL DOUBLESLASH DIV COMMA AND # ]
## Transitions:
-- On LBRACKET shift to state 13
## Reductions:
-- On SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DOUBLESLASH DIV COMMA AND
--   reduce production step -> step2

State 13:
## Known stack suffix:
## step2 LBRACKET
## LR(1) items:
step2 -> step2 LBRACKET . expr RBRACKET [ SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT LBRACKET GTE GT EQUAL DOUBLESLASH DIV COMMA AND # ]
## Transitions:
-- On VAR shift to state 1
-- On SLASH shift to state 2
-- On NUMBER shift to state 14
-- On NODE_TYPE shift to state 3
-- On NAME_TEST shift to state 7
-- On MINUS shift to state 15
-- On LPAREN shift to state 16
-- On LITERAL shift to state 17
-- On FUNCTION_NAME shift to state 18
-- On DOUBLESLASH shift to state 20
-- On DOUBLEDOT shift to state 8
-- On DOT shift to state 9
-- On AXIS shift to state 10
-- On AT shift to state 11
-- On union_expr shift to state 30
-- On unary_expr shift to state 41
-- On step2 shift to state 12
-- On step shift to state 21
-- On relative_location_path shift to state 32
-- On relational_expr shift to state 42
-- On primary_expr shift to state 33
-- On path_expr shift to state 44
-- On or_expr shift to state 64
-- On node_test shift to state 25
-- On multiplicative_expr shift to state 45
-- On location_path shift to state 35
-- On function_call shift to state 36
-- On filter_expr shift to state 37
-- On expr shift to state 88
-- On equality_expr shift to state 66
-- On axis_specifier shift to state 26
-- On and_expr shift to state 77
-- On additive_expr shift to state 69
-- On absolute_location_path shift to state 48
## Reductions:

State 14:
## Known stack suffix:
## NUMBER
## LR(1) items:
primary_expr -> NUMBER . [ SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT LBRACKET GTE GT EQUAL DOUBLESLASH DIV COMMA AND # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_expr -> NUMBER

State 15:
## Known stack suffix:
## MINUS
## LR(1) items:
unary_expr -> MINUS . unary_expr [ RPAREN RBRACKET PLUS OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND # ]
## Transitions:
-- On VAR shift to state 1
-- On SLASH shift to state 2
-- On NUMBER shift to state 14
-- On NODE_TYPE shift to state 3
-- On NAME_TEST shift to state 7
-- On MINUS shift to state 15
-- On LPAREN shift to state 16
-- On LITERAL shift to state 17
-- On FUNCTION_NAME shift to state 18
-- On DOUBLESLASH shift to state 20
-- On DOUBLEDOT shift to state 8
-- On DOT shift to state 9
-- On AXIS shift to state 10
-- On AT shift to state 11
-- On union_expr shift to state 30
-- On unary_expr shift to state 87
-- On step2 shift to state 12
-- On step shift to state 21
-- On relative_location_path shift to state 32
-- On primary_expr shift to state 33
-- On path_expr shift to state 44
-- On node_test shift to state 25
-- On location_path shift to state 35
-- On function_call shift to state 36
-- On filter_expr shift to state 37
-- On axis_specifier shift to state 26
-- On absolute_location_path shift to state 48
## Reductions:

State 16:
## Known stack suffix:
## LPAREN
## LR(1) items:
primary_expr -> LPAREN . expr RPAREN [ SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT LBRACKET GTE GT EQUAL DOUBLESLASH DIV COMMA AND # ]
## Transitions:
-- On VAR shift to state 1
-- On SLASH shift to state 2
-- On NUMBER shift to state 14
-- On NODE_TYPE shift to state 3
-- On NAME_TEST shift to state 7
-- On MINUS shift to state 15
-- On LPAREN shift to state 16
-- On LITERAL shift to state 17
-- On FUNCTION_NAME shift to state 18
-- On DOUBLESLASH shift to state 20
-- On DOUBLEDOT shift to state 8
-- On DOT shift to state 9
-- On AXIS shift to state 10
-- On AT shift to state 11
-- On union_expr shift to state 30
-- On unary_expr shift to state 41
-- On step2 shift to state 12
-- On step shift to state 21
-- On relative_location_path shift to state 32
-- On relational_expr shift to state 42
-- On primary_expr shift to state 33
-- On path_expr shift to state 44
-- On or_expr shift to state 64
-- On node_test shift to state 25
-- On multiplicative_expr shift to state 45
-- On location_path shift to state 35
-- On function_call shift to state 36
-- On filter_expr shift to state 37
-- On expr shift to state 85
-- On equality_expr shift to state 66
-- On axis_specifier shift to state 26
-- On and_expr shift to state 77
-- On additive_expr shift to state 69
-- On absolute_location_path shift to state 48
## Reductions:

State 17:
## Known stack suffix:
## LITERAL
## LR(1) items:
primary_expr -> LITERAL . [ SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT LBRACKET GTE GT EQUAL DOUBLESLASH DIV COMMA AND # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_expr -> LITERAL

State 18:
## Known stack suffix:
## FUNCTION_NAME
## LR(1) items:
function_call -> FUNCTION_NAME . RPAREN [ SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT LBRACKET GTE GT EQUAL DOUBLESLASH DIV COMMA AND # ]
function_call -> FUNCTION_NAME . arguments RPAREN [ SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT LBRACKET GTE GT EQUAL DOUBLESLASH DIV COMMA AND # ]
## Transitions:
-- On VAR shift to state 1
-- On SLASH shift to state 2
-- On RPAREN shift to state 19
-- On NUMBER shift to state 14
-- On NODE_TYPE shift to state 3
-- On NAME_TEST shift to state 7
-- On MINUS shift to state 15
-- On LPAREN shift to state 16
-- On LITERAL shift to state 17
-- On FUNCTION_NAME shift to state 18
-- On DOUBLESLASH shift to state 20
-- On DOUBLEDOT shift to state 8
-- On DOT shift to state 9
-- On AXIS shift to state 10
-- On AT shift to state 11
-- On union_expr shift to state 30
-- On unary_expr shift to state 41
-- On step2 shift to state 12
-- On step shift to state 21
-- On relative_location_path shift to state 32
-- On relational_expr shift to state 42
-- On primary_expr shift to state 33
-- On path_expr shift to state 44
-- On or_expr shift to state 64
-- On node_test shift to state 25
-- On multiplicative_expr shift to state 45
-- On location_path shift to state 35
-- On function_call shift to state 36
-- On filter_expr shift to state 37
-- On expr shift to state 80
-- On equality_expr shift to state 66
-- On axis_specifier shift to state 26
-- On arguments shift to state 81
-- On and_expr shift to state 77
-- On additive_expr shift to state 69
-- On absolute_location_path shift to state 48
## Reductions:

State 19:
## Known stack suffix:
## FUNCTION_NAME RPAREN
## LR(1) items:
function_call -> FUNCTION_NAME RPAREN . [ SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT LBRACKET GTE GT EQUAL DOUBLESLASH DIV COMMA AND # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production function_call -> FUNCTION_NAME RPAREN

State 20:
## Known stack suffix:
## DOUBLESLASH
## LR(1) items:
absolute_location_path -> DOUBLESLASH . relative_location_path [ RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND # ]
## Transitions:
-- On NODE_TYPE shift to state 3
-- On NAME_TEST shift to state 7
-- On DOUBLEDOT shift to state 8
-- On DOT shift to state 9
-- On AXIS shift to state 10
-- On AT shift to state 11
-- On step2 shift to state 12
-- On step shift to state 21
-- On relative_location_path shift to state 22
-- On node_test shift to state 25
-- On axis_specifier shift to state 26
## Reductions:

State 21:
## Known stack suffix:
## step
## LR(1) items:
relative_location_path -> step . [ SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DOUBLESLASH DIV COMMA AND # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production relative_location_path -> step

State 22:
## Known stack suffix:
## DOUBLESLASH relative_location_path
## LR(1) items:
absolute_location_path -> DOUBLESLASH relative_location_path . [ RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND # ]
relative_location_path -> relative_location_path . SLASH step [ SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DOUBLESLASH DIV COMMA AND # ]
relative_location_path -> relative_location_path . DOUBLESLASH step [ SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DOUBLESLASH DIV COMMA AND # ]
## Transitions:
-- On SLASH shift to state 23
-- On DOUBLESLASH shift to state 28
## Reductions:
-- On RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND
--   reduce production absolute_location_path -> DOUBLESLASH relative_location_path

State 23:
## Known stack suffix:
## relative_location_path SLASH
## LR(1) items:
relative_location_path -> relative_location_path SLASH . step [ SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DOUBLESLASH DIV COMMA AND # ]
## Transitions:
-- On NODE_TYPE shift to state 3
-- On NAME_TEST shift to state 7
-- On DOUBLEDOT shift to state 8
-- On DOT shift to state 9
-- On AXIS shift to state 10
-- On AT shift to state 11
-- On step2 shift to state 12
-- On step shift to state 24
-- On node_test shift to state 25
-- On axis_specifier shift to state 26
## Reductions:

State 24:
## Known stack suffix:
## relative_location_path SLASH step
## LR(1) items:
relative_location_path -> relative_location_path SLASH step . [ SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DOUBLESLASH DIV COMMA AND # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production relative_location_path -> relative_location_path SLASH step

State 25:
## Known stack suffix:
## node_test
## LR(1) items:
step2 -> node_test . [ SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT LBRACKET GTE GT EQUAL DOUBLESLASH DIV COMMA AND # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production step2 -> node_test

State 26:
## Known stack suffix:
## axis_specifier
## LR(1) items:
step -> axis_specifier . step2 [ SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DOUBLESLASH DIV COMMA AND # ]
## Transitions:
-- On NODE_TYPE shift to state 3
-- On NAME_TEST shift to state 7
-- On step2 shift to state 27
-- On node_test shift to state 25
## Reductions:

State 27:
## Known stack suffix:
## axis_specifier step2
## LR(1) items:
step -> axis_specifier step2 . [ SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DOUBLESLASH DIV COMMA AND # ]
step2 -> step2 . LBRACKET expr RBRACKET [ SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT LBRACKET GTE GT EQUAL DOUBLESLASH DIV COMMA AND # ]
## Transitions:
-- On LBRACKET shift to state 13
## Reductions:
-- On SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DOUBLESLASH DIV COMMA AND
--   reduce production step -> axis_specifier step2

State 28:
## Known stack suffix:
## relative_location_path DOUBLESLASH
## LR(1) items:
relative_location_path -> relative_location_path DOUBLESLASH . step [ SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DOUBLESLASH DIV COMMA AND # ]
## Transitions:
-- On NODE_TYPE shift to state 3
-- On NAME_TEST shift to state 7
-- On DOUBLEDOT shift to state 8
-- On DOT shift to state 9
-- On AXIS shift to state 10
-- On AT shift to state 11
-- On step2 shift to state 12
-- On step shift to state 29
-- On node_test shift to state 25
-- On axis_specifier shift to state 26
## Reductions:

State 29:
## Known stack suffix:
## relative_location_path DOUBLESLASH step
## LR(1) items:
relative_location_path -> relative_location_path DOUBLESLASH step . [ SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DOUBLESLASH DIV COMMA AND # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production relative_location_path -> relative_location_path DOUBLESLASH step

State 30:
## Known stack suffix:
## union_expr
## LR(1) items:
unary_expr -> union_expr . [ RPAREN RBRACKET PLUS OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND # ]
union_expr -> union_expr . PIPE path_expr [ RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND # ]
## Transitions:
-- On PIPE shift to state 31
## Reductions:
-- On RPAREN RBRACKET PLUS OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND
--   reduce production unary_expr -> union_expr

State 31:
## Known stack suffix:
## union_expr PIPE
## LR(1) items:
union_expr -> union_expr PIPE . path_expr [ RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND # ]
## Transitions:
-- On VAR shift to state 1
-- On SLASH shift to state 2
-- On NUMBER shift to state 14
-- On NODE_TYPE shift to state 3
-- On NAME_TEST shift to state 7
-- On LPAREN shift to state 16
-- On LITERAL shift to state 17
-- On FUNCTION_NAME shift to state 18
-- On DOUBLESLASH shift to state 20
-- On DOUBLEDOT shift to state 8
-- On DOT shift to state 9
-- On AXIS shift to state 10
-- On AT shift to state 11
-- On step2 shift to state 12
-- On step shift to state 21
-- On relative_location_path shift to state 32
-- On primary_expr shift to state 33
-- On path_expr shift to state 34
-- On node_test shift to state 25
-- On location_path shift to state 35
-- On function_call shift to state 36
-- On filter_expr shift to state 37
-- On axis_specifier shift to state 26
-- On absolute_location_path shift to state 48
## Reductions:

State 32:
## Known stack suffix:
## relative_location_path
## LR(1) items:
location_path -> relative_location_path . [ RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND # ]
relative_location_path -> relative_location_path . SLASH step [ SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DOUBLESLASH DIV COMMA AND # ]
relative_location_path -> relative_location_path . DOUBLESLASH step [ SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DOUBLESLASH DIV COMMA AND # ]
## Transitions:
-- On SLASH shift to state 23
-- On DOUBLESLASH shift to state 28
## Reductions:
-- On RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND
--   reduce production location_path -> relative_location_path

State 33:
## Known stack suffix:
## primary_expr
## LR(1) items:
filter_expr -> primary_expr . [ SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT LBRACKET GTE GT EQUAL DOUBLESLASH DIV COMMA AND # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production filter_expr -> primary_expr

State 34:
## Known stack suffix:
## union_expr PIPE path_expr
## LR(1) items:
union_expr -> union_expr PIPE path_expr . [ RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production union_expr -> union_expr PIPE path_expr

State 35:
## Known stack suffix:
## location_path
## LR(1) items:
path_expr -> location_path . [ RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production path_expr -> location_path

State 36:
## Known stack suffix:
## function_call
## LR(1) items:
primary_expr -> function_call . [ SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT LBRACKET GTE GT EQUAL DOUBLESLASH DIV COMMA AND # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_expr -> function_call

State 37:
## Known stack suffix:
## filter_expr
## LR(1) items:
filter_expr -> filter_expr . LBRACKET expr RBRACKET [ SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT LBRACKET GTE GT EQUAL DOUBLESLASH DIV COMMA AND # ]
path_expr -> filter_expr . [ RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND # ]
path_expr -> filter_expr . SLASH relative_location_path [ RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND # ]
path_expr -> filter_expr . DOUBLESLASH relative_location_path [ RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND # ]
## Transitions:
-- On SLASH shift to state 38
-- On LBRACKET shift to state 40
-- On DOUBLESLASH shift to state 78
## Reductions:
-- On RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND
--   reduce production path_expr -> filter_expr

State 38:
## Known stack suffix:
## filter_expr SLASH
## LR(1) items:
path_expr -> filter_expr SLASH . relative_location_path [ RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND # ]
## Transitions:
-- On NODE_TYPE shift to state 3
-- On NAME_TEST shift to state 7
-- On DOUBLEDOT shift to state 8
-- On DOT shift to state 9
-- On AXIS shift to state 10
-- On AT shift to state 11
-- On step2 shift to state 12
-- On step shift to state 21
-- On relative_location_path shift to state 39
-- On node_test shift to state 25
-- On axis_specifier shift to state 26
## Reductions:

State 39:
## Known stack suffix:
## filter_expr SLASH relative_location_path
## LR(1) items:
path_expr -> filter_expr SLASH relative_location_path . [ RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND # ]
relative_location_path -> relative_location_path . SLASH step [ SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DOUBLESLASH DIV COMMA AND # ]
relative_location_path -> relative_location_path . DOUBLESLASH step [ SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DOUBLESLASH DIV COMMA AND # ]
## Transitions:
-- On SLASH shift to state 23
-- On DOUBLESLASH shift to state 28
## Reductions:
-- On RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND
--   reduce production path_expr -> filter_expr SLASH relative_location_path

State 40:
## Known stack suffix:
## filter_expr LBRACKET
## LR(1) items:
filter_expr -> filter_expr LBRACKET . expr RBRACKET [ SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT LBRACKET GTE GT EQUAL DOUBLESLASH DIV COMMA AND # ]
## Transitions:
-- On VAR shift to state 1
-- On SLASH shift to state 2
-- On NUMBER shift to state 14
-- On NODE_TYPE shift to state 3
-- On NAME_TEST shift to state 7
-- On MINUS shift to state 15
-- On LPAREN shift to state 16
-- On LITERAL shift to state 17
-- On FUNCTION_NAME shift to state 18
-- On DOUBLESLASH shift to state 20
-- On DOUBLEDOT shift to state 8
-- On DOT shift to state 9
-- On AXIS shift to state 10
-- On AT shift to state 11
-- On union_expr shift to state 30
-- On unary_expr shift to state 41
-- On step2 shift to state 12
-- On step shift to state 21
-- On relative_location_path shift to state 32
-- On relational_expr shift to state 42
-- On primary_expr shift to state 33
-- On path_expr shift to state 44
-- On or_expr shift to state 64
-- On node_test shift to state 25
-- On multiplicative_expr shift to state 45
-- On location_path shift to state 35
-- On function_call shift to state 36
-- On filter_expr shift to state 37
-- On expr shift to state 75
-- On equality_expr shift to state 66
-- On axis_specifier shift to state 26
-- On and_expr shift to state 77
-- On additive_expr shift to state 69
-- On absolute_location_path shift to state 48
## Reductions:

State 41:
## Known stack suffix:
## unary_expr
## LR(1) items:
multiplicative_expr -> unary_expr . [ RPAREN RBRACKET PLUS OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production multiplicative_expr -> unary_expr

State 42:
## Known stack suffix:
## relational_expr
## LR(1) items:
equality_expr -> relational_expr . [ RPAREN RBRACKET OR NOTEQUAL EQUAL COMMA AND # ]
relational_expr -> relational_expr . LT additive_expr [ RPAREN RBRACKET OR NOTEQUAL LTE LT GTE GT EQUAL COMMA AND # ]
relational_expr -> relational_expr . GT additive_expr [ RPAREN RBRACKET OR NOTEQUAL LTE LT GTE GT EQUAL COMMA AND # ]
relational_expr -> relational_expr . LTE additive_expr [ RPAREN RBRACKET OR NOTEQUAL LTE LT GTE GT EQUAL COMMA AND # ]
relational_expr -> relational_expr . GTE additive_expr [ RPAREN RBRACKET OR NOTEQUAL LTE LT GTE GT EQUAL COMMA AND # ]
## Transitions:
-- On LTE shift to state 43
-- On LT shift to state 58
-- On GTE shift to state 60
-- On GT shift to state 62
## Reductions:
-- On RPAREN RBRACKET OR NOTEQUAL EQUAL COMMA AND
--   reduce production equality_expr -> relational_expr

State 43:
## Known stack suffix:
## relational_expr LTE
## LR(1) items:
relational_expr -> relational_expr LTE . additive_expr [ RPAREN RBRACKET OR NOTEQUAL LTE LT GTE GT EQUAL COMMA AND # ]
## Transitions:
-- On VAR shift to state 1
-- On SLASH shift to state 2
-- On NUMBER shift to state 14
-- On NODE_TYPE shift to state 3
-- On NAME_TEST shift to state 7
-- On MINUS shift to state 15
-- On LPAREN shift to state 16
-- On LITERAL shift to state 17
-- On FUNCTION_NAME shift to state 18
-- On DOUBLESLASH shift to state 20
-- On DOUBLEDOT shift to state 8
-- On DOT shift to state 9
-- On AXIS shift to state 10
-- On AT shift to state 11
-- On union_expr shift to state 30
-- On unary_expr shift to state 41
-- On step2 shift to state 12
-- On step shift to state 21
-- On relative_location_path shift to state 32
-- On primary_expr shift to state 33
-- On path_expr shift to state 44
-- On node_test shift to state 25
-- On multiplicative_expr shift to state 45
-- On location_path shift to state 35
-- On function_call shift to state 36
-- On filter_expr shift to state 37
-- On axis_specifier shift to state 26
-- On additive_expr shift to state 53
-- On absolute_location_path shift to state 48
## Reductions:

State 44:
## Known stack suffix:
## path_expr
## LR(1) items:
union_expr -> path_expr . [ RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production union_expr -> path_expr

State 45:
## Known stack suffix:
## multiplicative_expr
## LR(1) items:
additive_expr -> multiplicative_expr . [ RPAREN RBRACKET PLUS OR NOTEQUAL MINUS LTE LT GTE GT EQUAL COMMA AND # ]
multiplicative_expr -> multiplicative_expr . MUL unary_expr [ RPAREN RBRACKET PLUS OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND # ]
multiplicative_expr -> multiplicative_expr . DIV unary_expr [ RPAREN RBRACKET PLUS OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND # ]
multiplicative_expr -> multiplicative_expr . MOD unary_expr [ RPAREN RBRACKET PLUS OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND # ]
## Transitions:
-- On MUL shift to state 46
-- On MOD shift to state 49
-- On DIV shift to state 51
## Reductions:
-- On RPAREN RBRACKET PLUS OR NOTEQUAL MINUS LTE LT GTE GT EQUAL COMMA AND
--   reduce production additive_expr -> multiplicative_expr

State 46:
## Known stack suffix:
## multiplicative_expr MUL
## LR(1) items:
multiplicative_expr -> multiplicative_expr MUL . unary_expr [ RPAREN RBRACKET PLUS OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND # ]
## Transitions:
-- On VAR shift to state 1
-- On SLASH shift to state 2
-- On NUMBER shift to state 14
-- On NODE_TYPE shift to state 3
-- On NAME_TEST shift to state 7
-- On MINUS shift to state 15
-- On LPAREN shift to state 16
-- On LITERAL shift to state 17
-- On FUNCTION_NAME shift to state 18
-- On DOUBLESLASH shift to state 20
-- On DOUBLEDOT shift to state 8
-- On DOT shift to state 9
-- On AXIS shift to state 10
-- On AT shift to state 11
-- On union_expr shift to state 30
-- On unary_expr shift to state 47
-- On step2 shift to state 12
-- On step shift to state 21
-- On relative_location_path shift to state 32
-- On primary_expr shift to state 33
-- On path_expr shift to state 44
-- On node_test shift to state 25
-- On location_path shift to state 35
-- On function_call shift to state 36
-- On filter_expr shift to state 37
-- On axis_specifier shift to state 26
-- On absolute_location_path shift to state 48
## Reductions:

State 47:
## Known stack suffix:
## multiplicative_expr MUL unary_expr
## LR(1) items:
multiplicative_expr -> multiplicative_expr MUL unary_expr . [ RPAREN RBRACKET PLUS OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production multiplicative_expr -> multiplicative_expr MUL unary_expr

State 48:
## Known stack suffix:
## absolute_location_path
## LR(1) items:
location_path -> absolute_location_path . [ RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production location_path -> absolute_location_path

State 49:
## Known stack suffix:
## multiplicative_expr MOD
## LR(1) items:
multiplicative_expr -> multiplicative_expr MOD . unary_expr [ RPAREN RBRACKET PLUS OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND # ]
## Transitions:
-- On VAR shift to state 1
-- On SLASH shift to state 2
-- On NUMBER shift to state 14
-- On NODE_TYPE shift to state 3
-- On NAME_TEST shift to state 7
-- On MINUS shift to state 15
-- On LPAREN shift to state 16
-- On LITERAL shift to state 17
-- On FUNCTION_NAME shift to state 18
-- On DOUBLESLASH shift to state 20
-- On DOUBLEDOT shift to state 8
-- On DOT shift to state 9
-- On AXIS shift to state 10
-- On AT shift to state 11
-- On union_expr shift to state 30
-- On unary_expr shift to state 50
-- On step2 shift to state 12
-- On step shift to state 21
-- On relative_location_path shift to state 32
-- On primary_expr shift to state 33
-- On path_expr shift to state 44
-- On node_test shift to state 25
-- On location_path shift to state 35
-- On function_call shift to state 36
-- On filter_expr shift to state 37
-- On axis_specifier shift to state 26
-- On absolute_location_path shift to state 48
## Reductions:

State 50:
## Known stack suffix:
## multiplicative_expr MOD unary_expr
## LR(1) items:
multiplicative_expr -> multiplicative_expr MOD unary_expr . [ RPAREN RBRACKET PLUS OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production multiplicative_expr -> multiplicative_expr MOD unary_expr

State 51:
## Known stack suffix:
## multiplicative_expr DIV
## LR(1) items:
multiplicative_expr -> multiplicative_expr DIV . unary_expr [ RPAREN RBRACKET PLUS OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND # ]
## Transitions:
-- On VAR shift to state 1
-- On SLASH shift to state 2
-- On NUMBER shift to state 14
-- On NODE_TYPE shift to state 3
-- On NAME_TEST shift to state 7
-- On MINUS shift to state 15
-- On LPAREN shift to state 16
-- On LITERAL shift to state 17
-- On FUNCTION_NAME shift to state 18
-- On DOUBLESLASH shift to state 20
-- On DOUBLEDOT shift to state 8
-- On DOT shift to state 9
-- On AXIS shift to state 10
-- On AT shift to state 11
-- On union_expr shift to state 30
-- On unary_expr shift to state 52
-- On step2 shift to state 12
-- On step shift to state 21
-- On relative_location_path shift to state 32
-- On primary_expr shift to state 33
-- On path_expr shift to state 44
-- On node_test shift to state 25
-- On location_path shift to state 35
-- On function_call shift to state 36
-- On filter_expr shift to state 37
-- On axis_specifier shift to state 26
-- On absolute_location_path shift to state 48
## Reductions:

State 52:
## Known stack suffix:
## multiplicative_expr DIV unary_expr
## LR(1) items:
multiplicative_expr -> multiplicative_expr DIV unary_expr . [ RPAREN RBRACKET PLUS OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production multiplicative_expr -> multiplicative_expr DIV unary_expr

State 53:
## Known stack suffix:
## relational_expr LTE additive_expr
## LR(1) items:
additive_expr -> additive_expr . PLUS multiplicative_expr [ RPAREN RBRACKET PLUS OR NOTEQUAL MINUS LTE LT GTE GT EQUAL COMMA AND # ]
additive_expr -> additive_expr . MINUS multiplicative_expr [ RPAREN RBRACKET PLUS OR NOTEQUAL MINUS LTE LT GTE GT EQUAL COMMA AND # ]
relational_expr -> relational_expr LTE additive_expr . [ RPAREN RBRACKET OR NOTEQUAL LTE LT GTE GT EQUAL COMMA AND # ]
## Transitions:
-- On PLUS shift to state 54
-- On MINUS shift to state 56
## Reductions:
-- On RPAREN RBRACKET OR NOTEQUAL LTE LT GTE GT EQUAL COMMA AND
--   reduce production relational_expr -> relational_expr LTE additive_expr

State 54:
## Known stack suffix:
## additive_expr PLUS
## LR(1) items:
additive_expr -> additive_expr PLUS . multiplicative_expr [ RPAREN RBRACKET PLUS OR NOTEQUAL MINUS LTE LT GTE GT EQUAL COMMA AND # ]
## Transitions:
-- On VAR shift to state 1
-- On SLASH shift to state 2
-- On NUMBER shift to state 14
-- On NODE_TYPE shift to state 3
-- On NAME_TEST shift to state 7
-- On MINUS shift to state 15
-- On LPAREN shift to state 16
-- On LITERAL shift to state 17
-- On FUNCTION_NAME shift to state 18
-- On DOUBLESLASH shift to state 20
-- On DOUBLEDOT shift to state 8
-- On DOT shift to state 9
-- On AXIS shift to state 10
-- On AT shift to state 11
-- On union_expr shift to state 30
-- On unary_expr shift to state 41
-- On step2 shift to state 12
-- On step shift to state 21
-- On relative_location_path shift to state 32
-- On primary_expr shift to state 33
-- On path_expr shift to state 44
-- On node_test shift to state 25
-- On multiplicative_expr shift to state 55
-- On location_path shift to state 35
-- On function_call shift to state 36
-- On filter_expr shift to state 37
-- On axis_specifier shift to state 26
-- On absolute_location_path shift to state 48
## Reductions:

State 55:
## Known stack suffix:
## additive_expr PLUS multiplicative_expr
## LR(1) items:
additive_expr -> additive_expr PLUS multiplicative_expr . [ RPAREN RBRACKET PLUS OR NOTEQUAL MINUS LTE LT GTE GT EQUAL COMMA AND # ]
multiplicative_expr -> multiplicative_expr . MUL unary_expr [ RPAREN RBRACKET PLUS OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND # ]
multiplicative_expr -> multiplicative_expr . DIV unary_expr [ RPAREN RBRACKET PLUS OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND # ]
multiplicative_expr -> multiplicative_expr . MOD unary_expr [ RPAREN RBRACKET PLUS OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND # ]
## Transitions:
-- On MUL shift to state 46
-- On MOD shift to state 49
-- On DIV shift to state 51
## Reductions:
-- On RPAREN RBRACKET PLUS OR NOTEQUAL MINUS LTE LT GTE GT EQUAL COMMA AND
--   reduce production additive_expr -> additive_expr PLUS multiplicative_expr

State 56:
## Known stack suffix:
## additive_expr MINUS
## LR(1) items:
additive_expr -> additive_expr MINUS . multiplicative_expr [ RPAREN RBRACKET PLUS OR NOTEQUAL MINUS LTE LT GTE GT EQUAL COMMA AND # ]
## Transitions:
-- On VAR shift to state 1
-- On SLASH shift to state 2
-- On NUMBER shift to state 14
-- On NODE_TYPE shift to state 3
-- On NAME_TEST shift to state 7
-- On MINUS shift to state 15
-- On LPAREN shift to state 16
-- On LITERAL shift to state 17
-- On FUNCTION_NAME shift to state 18
-- On DOUBLESLASH shift to state 20
-- On DOUBLEDOT shift to state 8
-- On DOT shift to state 9
-- On AXIS shift to state 10
-- On AT shift to state 11
-- On union_expr shift to state 30
-- On unary_expr shift to state 41
-- On step2 shift to state 12
-- On step shift to state 21
-- On relative_location_path shift to state 32
-- On primary_expr shift to state 33
-- On path_expr shift to state 44
-- On node_test shift to state 25
-- On multiplicative_expr shift to state 57
-- On location_path shift to state 35
-- On function_call shift to state 36
-- On filter_expr shift to state 37
-- On axis_specifier shift to state 26
-- On absolute_location_path shift to state 48
## Reductions:

State 57:
## Known stack suffix:
## additive_expr MINUS multiplicative_expr
## LR(1) items:
additive_expr -> additive_expr MINUS multiplicative_expr . [ RPAREN RBRACKET PLUS OR NOTEQUAL MINUS LTE LT GTE GT EQUAL COMMA AND # ]
multiplicative_expr -> multiplicative_expr . MUL unary_expr [ RPAREN RBRACKET PLUS OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND # ]
multiplicative_expr -> multiplicative_expr . DIV unary_expr [ RPAREN RBRACKET PLUS OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND # ]
multiplicative_expr -> multiplicative_expr . MOD unary_expr [ RPAREN RBRACKET PLUS OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND # ]
## Transitions:
-- On MUL shift to state 46
-- On MOD shift to state 49
-- On DIV shift to state 51
## Reductions:
-- On RPAREN RBRACKET PLUS OR NOTEQUAL MINUS LTE LT GTE GT EQUAL COMMA AND
--   reduce production additive_expr -> additive_expr MINUS multiplicative_expr

State 58:
## Known stack suffix:
## relational_expr LT
## LR(1) items:
relational_expr -> relational_expr LT . additive_expr [ RPAREN RBRACKET OR NOTEQUAL LTE LT GTE GT EQUAL COMMA AND # ]
## Transitions:
-- On VAR shift to state 1
-- On SLASH shift to state 2
-- On NUMBER shift to state 14
-- On NODE_TYPE shift to state 3
-- On NAME_TEST shift to state 7
-- On MINUS shift to state 15
-- On LPAREN shift to state 16
-- On LITERAL shift to state 17
-- On FUNCTION_NAME shift to state 18
-- On DOUBLESLASH shift to state 20
-- On DOUBLEDOT shift to state 8
-- On DOT shift to state 9
-- On AXIS shift to state 10
-- On AT shift to state 11
-- On union_expr shift to state 30
-- On unary_expr shift to state 41
-- On step2 shift to state 12
-- On step shift to state 21
-- On relative_location_path shift to state 32
-- On primary_expr shift to state 33
-- On path_expr shift to state 44
-- On node_test shift to state 25
-- On multiplicative_expr shift to state 45
-- On location_path shift to state 35
-- On function_call shift to state 36
-- On filter_expr shift to state 37
-- On axis_specifier shift to state 26
-- On additive_expr shift to state 59
-- On absolute_location_path shift to state 48
## Reductions:

State 59:
## Known stack suffix:
## relational_expr LT additive_expr
## LR(1) items:
additive_expr -> additive_expr . PLUS multiplicative_expr [ RPAREN RBRACKET PLUS OR NOTEQUAL MINUS LTE LT GTE GT EQUAL COMMA AND # ]
additive_expr -> additive_expr . MINUS multiplicative_expr [ RPAREN RBRACKET PLUS OR NOTEQUAL MINUS LTE LT GTE GT EQUAL COMMA AND # ]
relational_expr -> relational_expr LT additive_expr . [ RPAREN RBRACKET OR NOTEQUAL LTE LT GTE GT EQUAL COMMA AND # ]
## Transitions:
-- On PLUS shift to state 54
-- On MINUS shift to state 56
## Reductions:
-- On RPAREN RBRACKET OR NOTEQUAL LTE LT GTE GT EQUAL COMMA AND
--   reduce production relational_expr -> relational_expr LT additive_expr

State 60:
## Known stack suffix:
## relational_expr GTE
## LR(1) items:
relational_expr -> relational_expr GTE . additive_expr [ RPAREN RBRACKET OR NOTEQUAL LTE LT GTE GT EQUAL COMMA AND # ]
## Transitions:
-- On VAR shift to state 1
-- On SLASH shift to state 2
-- On NUMBER shift to state 14
-- On NODE_TYPE shift to state 3
-- On NAME_TEST shift to state 7
-- On MINUS shift to state 15
-- On LPAREN shift to state 16
-- On LITERAL shift to state 17
-- On FUNCTION_NAME shift to state 18
-- On DOUBLESLASH shift to state 20
-- On DOUBLEDOT shift to state 8
-- On DOT shift to state 9
-- On AXIS shift to state 10
-- On AT shift to state 11
-- On union_expr shift to state 30
-- On unary_expr shift to state 41
-- On step2 shift to state 12
-- On step shift to state 21
-- On relative_location_path shift to state 32
-- On primary_expr shift to state 33
-- On path_expr shift to state 44
-- On node_test shift to state 25
-- On multiplicative_expr shift to state 45
-- On location_path shift to state 35
-- On function_call shift to state 36
-- On filter_expr shift to state 37
-- On axis_specifier shift to state 26
-- On additive_expr shift to state 61
-- On absolute_location_path shift to state 48
## Reductions:

State 61:
## Known stack suffix:
## relational_expr GTE additive_expr
## LR(1) items:
additive_expr -> additive_expr . PLUS multiplicative_expr [ RPAREN RBRACKET PLUS OR NOTEQUAL MINUS LTE LT GTE GT EQUAL COMMA AND # ]
additive_expr -> additive_expr . MINUS multiplicative_expr [ RPAREN RBRACKET PLUS OR NOTEQUAL MINUS LTE LT GTE GT EQUAL COMMA AND # ]
relational_expr -> relational_expr GTE additive_expr . [ RPAREN RBRACKET OR NOTEQUAL LTE LT GTE GT EQUAL COMMA AND # ]
## Transitions:
-- On PLUS shift to state 54
-- On MINUS shift to state 56
## Reductions:
-- On RPAREN RBRACKET OR NOTEQUAL LTE LT GTE GT EQUAL COMMA AND
--   reduce production relational_expr -> relational_expr GTE additive_expr

State 62:
## Known stack suffix:
## relational_expr GT
## LR(1) items:
relational_expr -> relational_expr GT . additive_expr [ RPAREN RBRACKET OR NOTEQUAL LTE LT GTE GT EQUAL COMMA AND # ]
## Transitions:
-- On VAR shift to state 1
-- On SLASH shift to state 2
-- On NUMBER shift to state 14
-- On NODE_TYPE shift to state 3
-- On NAME_TEST shift to state 7
-- On MINUS shift to state 15
-- On LPAREN shift to state 16
-- On LITERAL shift to state 17
-- On FUNCTION_NAME shift to state 18
-- On DOUBLESLASH shift to state 20
-- On DOUBLEDOT shift to state 8
-- On DOT shift to state 9
-- On AXIS shift to state 10
-- On AT shift to state 11
-- On union_expr shift to state 30
-- On unary_expr shift to state 41
-- On step2 shift to state 12
-- On step shift to state 21
-- On relative_location_path shift to state 32
-- On primary_expr shift to state 33
-- On path_expr shift to state 44
-- On node_test shift to state 25
-- On multiplicative_expr shift to state 45
-- On location_path shift to state 35
-- On function_call shift to state 36
-- On filter_expr shift to state 37
-- On axis_specifier shift to state 26
-- On additive_expr shift to state 63
-- On absolute_location_path shift to state 48
## Reductions:

State 63:
## Known stack suffix:
## relational_expr GT additive_expr
## LR(1) items:
additive_expr -> additive_expr . PLUS multiplicative_expr [ RPAREN RBRACKET PLUS OR NOTEQUAL MINUS LTE LT GTE GT EQUAL COMMA AND # ]
additive_expr -> additive_expr . MINUS multiplicative_expr [ RPAREN RBRACKET PLUS OR NOTEQUAL MINUS LTE LT GTE GT EQUAL COMMA AND # ]
relational_expr -> relational_expr GT additive_expr . [ RPAREN RBRACKET OR NOTEQUAL LTE LT GTE GT EQUAL COMMA AND # ]
## Transitions:
-- On PLUS shift to state 54
-- On MINUS shift to state 56
## Reductions:
-- On RPAREN RBRACKET OR NOTEQUAL LTE LT GTE GT EQUAL COMMA AND
--   reduce production relational_expr -> relational_expr GT additive_expr

State 64:
## Known stack suffix:
## or_expr
## LR(1) items:
expr -> or_expr . [ RPAREN RBRACKET COMMA ]
or_expr -> or_expr . OR and_expr [ RPAREN RBRACKET OR COMMA ]
## Transitions:
-- On OR shift to state 65
## Reductions:
-- On RPAREN RBRACKET COMMA
--   reduce production expr -> or_expr

State 65:
## Known stack suffix:
## or_expr OR
## LR(1) items:
or_expr -> or_expr OR . and_expr [ RPAREN RBRACKET OR COMMA # ]
## Transitions:
-- On VAR shift to state 1
-- On SLASH shift to state 2
-- On NUMBER shift to state 14
-- On NODE_TYPE shift to state 3
-- On NAME_TEST shift to state 7
-- On MINUS shift to state 15
-- On LPAREN shift to state 16
-- On LITERAL shift to state 17
-- On FUNCTION_NAME shift to state 18
-- On DOUBLESLASH shift to state 20
-- On DOUBLEDOT shift to state 8
-- On DOT shift to state 9
-- On AXIS shift to state 10
-- On AT shift to state 11
-- On union_expr shift to state 30
-- On unary_expr shift to state 41
-- On step2 shift to state 12
-- On step shift to state 21
-- On relative_location_path shift to state 32
-- On relational_expr shift to state 42
-- On primary_expr shift to state 33
-- On path_expr shift to state 44
-- On node_test shift to state 25
-- On multiplicative_expr shift to state 45
-- On location_path shift to state 35
-- On function_call shift to state 36
-- On filter_expr shift to state 37
-- On equality_expr shift to state 66
-- On axis_specifier shift to state 26
-- On and_expr shift to state 72
-- On additive_expr shift to state 69
-- On absolute_location_path shift to state 48
## Reductions:

State 66:
## Known stack suffix:
## equality_expr
## LR(1) items:
and_expr -> equality_expr . [ RPAREN RBRACKET OR COMMA AND # ]
equality_expr -> equality_expr . EQUAL relational_expr [ RPAREN RBRACKET OR NOTEQUAL EQUAL COMMA AND # ]
equality_expr -> equality_expr . NOTEQUAL relational_expr [ RPAREN RBRACKET OR NOTEQUAL EQUAL COMMA AND # ]
## Transitions:
-- On NOTEQUAL shift to state 67
-- On EQUAL shift to state 70
## Reductions:
-- On RPAREN RBRACKET OR COMMA AND
--   reduce production and_expr -> equality_expr

State 67:
## Known stack suffix:
## equality_expr NOTEQUAL
## LR(1) items:
equality_expr -> equality_expr NOTEQUAL . relational_expr [ RPAREN RBRACKET OR NOTEQUAL EQUAL COMMA AND # ]
## Transitions:
-- On VAR shift to state 1
-- On SLASH shift to state 2
-- On NUMBER shift to state 14
-- On NODE_TYPE shift to state 3
-- On NAME_TEST shift to state 7
-- On MINUS shift to state 15
-- On LPAREN shift to state 16
-- On LITERAL shift to state 17
-- On FUNCTION_NAME shift to state 18
-- On DOUBLESLASH shift to state 20
-- On DOUBLEDOT shift to state 8
-- On DOT shift to state 9
-- On AXIS shift to state 10
-- On AT shift to state 11
-- On union_expr shift to state 30
-- On unary_expr shift to state 41
-- On step2 shift to state 12
-- On step shift to state 21
-- On relative_location_path shift to state 32
-- On relational_expr shift to state 68
-- On primary_expr shift to state 33
-- On path_expr shift to state 44
-- On node_test shift to state 25
-- On multiplicative_expr shift to state 45
-- On location_path shift to state 35
-- On function_call shift to state 36
-- On filter_expr shift to state 37
-- On axis_specifier shift to state 26
-- On additive_expr shift to state 69
-- On absolute_location_path shift to state 48
## Reductions:

State 68:
## Known stack suffix:
## equality_expr NOTEQUAL relational_expr
## LR(1) items:
equality_expr -> equality_expr NOTEQUAL relational_expr . [ RPAREN RBRACKET OR NOTEQUAL EQUAL COMMA AND # ]
relational_expr -> relational_expr . LT additive_expr [ RPAREN RBRACKET OR NOTEQUAL LTE LT GTE GT EQUAL COMMA AND # ]
relational_expr -> relational_expr . GT additive_expr [ RPAREN RBRACKET OR NOTEQUAL LTE LT GTE GT EQUAL COMMA AND # ]
relational_expr -> relational_expr . LTE additive_expr [ RPAREN RBRACKET OR NOTEQUAL LTE LT GTE GT EQUAL COMMA AND # ]
relational_expr -> relational_expr . GTE additive_expr [ RPAREN RBRACKET OR NOTEQUAL LTE LT GTE GT EQUAL COMMA AND # ]
## Transitions:
-- On LTE shift to state 43
-- On LT shift to state 58
-- On GTE shift to state 60
-- On GT shift to state 62
## Reductions:
-- On RPAREN RBRACKET OR NOTEQUAL EQUAL COMMA AND
--   reduce production equality_expr -> equality_expr NOTEQUAL relational_expr

State 69:
## Known stack suffix:
## additive_expr
## LR(1) items:
additive_expr -> additive_expr . PLUS multiplicative_expr [ RPAREN RBRACKET PLUS OR NOTEQUAL MINUS LTE LT GTE GT EQUAL COMMA AND # ]
additive_expr -> additive_expr . MINUS multiplicative_expr [ RPAREN RBRACKET PLUS OR NOTEQUAL MINUS LTE LT GTE GT EQUAL COMMA AND # ]
relational_expr -> additive_expr . [ RPAREN RBRACKET OR NOTEQUAL LTE LT GTE GT EQUAL COMMA AND # ]
## Transitions:
-- On PLUS shift to state 54
-- On MINUS shift to state 56
## Reductions:
-- On RPAREN RBRACKET OR NOTEQUAL LTE LT GTE GT EQUAL COMMA AND
--   reduce production relational_expr -> additive_expr

State 70:
## Known stack suffix:
## equality_expr EQUAL
## LR(1) items:
equality_expr -> equality_expr EQUAL . relational_expr [ RPAREN RBRACKET OR NOTEQUAL EQUAL COMMA AND # ]
## Transitions:
-- On VAR shift to state 1
-- On SLASH shift to state 2
-- On NUMBER shift to state 14
-- On NODE_TYPE shift to state 3
-- On NAME_TEST shift to state 7
-- On MINUS shift to state 15
-- On LPAREN shift to state 16
-- On LITERAL shift to state 17
-- On FUNCTION_NAME shift to state 18
-- On DOUBLESLASH shift to state 20
-- On DOUBLEDOT shift to state 8
-- On DOT shift to state 9
-- On AXIS shift to state 10
-- On AT shift to state 11
-- On union_expr shift to state 30
-- On unary_expr shift to state 41
-- On step2 shift to state 12
-- On step shift to state 21
-- On relative_location_path shift to state 32
-- On relational_expr shift to state 71
-- On primary_expr shift to state 33
-- On path_expr shift to state 44
-- On node_test shift to state 25
-- On multiplicative_expr shift to state 45
-- On location_path shift to state 35
-- On function_call shift to state 36
-- On filter_expr shift to state 37
-- On axis_specifier shift to state 26
-- On additive_expr shift to state 69
-- On absolute_location_path shift to state 48
## Reductions:

State 71:
## Known stack suffix:
## equality_expr EQUAL relational_expr
## LR(1) items:
equality_expr -> equality_expr EQUAL relational_expr . [ RPAREN RBRACKET OR NOTEQUAL EQUAL COMMA AND # ]
relational_expr -> relational_expr . LT additive_expr [ RPAREN RBRACKET OR NOTEQUAL LTE LT GTE GT EQUAL COMMA AND # ]
relational_expr -> relational_expr . GT additive_expr [ RPAREN RBRACKET OR NOTEQUAL LTE LT GTE GT EQUAL COMMA AND # ]
relational_expr -> relational_expr . LTE additive_expr [ RPAREN RBRACKET OR NOTEQUAL LTE LT GTE GT EQUAL COMMA AND # ]
relational_expr -> relational_expr . GTE additive_expr [ RPAREN RBRACKET OR NOTEQUAL LTE LT GTE GT EQUAL COMMA AND # ]
## Transitions:
-- On LTE shift to state 43
-- On LT shift to state 58
-- On GTE shift to state 60
-- On GT shift to state 62
## Reductions:
-- On RPAREN RBRACKET OR NOTEQUAL EQUAL COMMA AND
--   reduce production equality_expr -> equality_expr EQUAL relational_expr

State 72:
## Known stack suffix:
## or_expr OR and_expr
## LR(1) items:
and_expr -> and_expr . AND equality_expr [ RPAREN RBRACKET OR COMMA AND # ]
or_expr -> or_expr OR and_expr . [ RPAREN RBRACKET OR COMMA # ]
## Transitions:
-- On AND shift to state 73
## Reductions:
-- On RPAREN RBRACKET OR COMMA
--   reduce production or_expr -> or_expr OR and_expr

State 73:
## Known stack suffix:
## and_expr AND
## LR(1) items:
and_expr -> and_expr AND . equality_expr [ RPAREN RBRACKET OR COMMA AND # ]
## Transitions:
-- On VAR shift to state 1
-- On SLASH shift to state 2
-- On NUMBER shift to state 14
-- On NODE_TYPE shift to state 3
-- On NAME_TEST shift to state 7
-- On MINUS shift to state 15
-- On LPAREN shift to state 16
-- On LITERAL shift to state 17
-- On FUNCTION_NAME shift to state 18
-- On DOUBLESLASH shift to state 20
-- On DOUBLEDOT shift to state 8
-- On DOT shift to state 9
-- On AXIS shift to state 10
-- On AT shift to state 11
-- On union_expr shift to state 30
-- On unary_expr shift to state 41
-- On step2 shift to state 12
-- On step shift to state 21
-- On relative_location_path shift to state 32
-- On relational_expr shift to state 42
-- On primary_expr shift to state 33
-- On path_expr shift to state 44
-- On node_test shift to state 25
-- On multiplicative_expr shift to state 45
-- On location_path shift to state 35
-- On function_call shift to state 36
-- On filter_expr shift to state 37
-- On equality_expr shift to state 74
-- On axis_specifier shift to state 26
-- On additive_expr shift to state 69
-- On absolute_location_path shift to state 48
## Reductions:

State 74:
## Known stack suffix:
## and_expr AND equality_expr
## LR(1) items:
and_expr -> and_expr AND equality_expr . [ RPAREN RBRACKET OR COMMA AND # ]
equality_expr -> equality_expr . EQUAL relational_expr [ RPAREN RBRACKET OR NOTEQUAL EQUAL COMMA AND # ]
equality_expr -> equality_expr . NOTEQUAL relational_expr [ RPAREN RBRACKET OR NOTEQUAL EQUAL COMMA AND # ]
## Transitions:
-- On NOTEQUAL shift to state 67
-- On EQUAL shift to state 70
## Reductions:
-- On RPAREN RBRACKET OR COMMA AND
--   reduce production and_expr -> and_expr AND equality_expr

State 75:
## Known stack suffix:
## filter_expr LBRACKET expr
## LR(1) items:
filter_expr -> filter_expr LBRACKET expr . RBRACKET [ SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT LBRACKET GTE GT EQUAL DOUBLESLASH DIV COMMA AND # ]
## Transitions:
-- On RBRACKET shift to state 76
## Reductions:

State 76:
## Known stack suffix:
## filter_expr LBRACKET expr RBRACKET
## LR(1) items:
filter_expr -> filter_expr LBRACKET expr RBRACKET . [ SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT LBRACKET GTE GT EQUAL DOUBLESLASH DIV COMMA AND # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production filter_expr -> filter_expr LBRACKET expr RBRACKET

State 77:
## Known stack suffix:
## and_expr
## LR(1) items:
and_expr -> and_expr . AND equality_expr [ RPAREN RBRACKET OR COMMA AND # ]
or_expr -> and_expr . [ RPAREN RBRACKET OR COMMA # ]
## Transitions:
-- On AND shift to state 73
## Reductions:
-- On RPAREN RBRACKET OR COMMA
--   reduce production or_expr -> and_expr

State 78:
## Known stack suffix:
## filter_expr DOUBLESLASH
## LR(1) items:
path_expr -> filter_expr DOUBLESLASH . relative_location_path [ RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND # ]
## Transitions:
-- On NODE_TYPE shift to state 3
-- On NAME_TEST shift to state 7
-- On DOUBLEDOT shift to state 8
-- On DOT shift to state 9
-- On AXIS shift to state 10
-- On AT shift to state 11
-- On step2 shift to state 12
-- On step shift to state 21
-- On relative_location_path shift to state 79
-- On node_test shift to state 25
-- On axis_specifier shift to state 26
## Reductions:

State 79:
## Known stack suffix:
## filter_expr DOUBLESLASH relative_location_path
## LR(1) items:
path_expr -> filter_expr DOUBLESLASH relative_location_path . [ RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND # ]
relative_location_path -> relative_location_path . SLASH step [ SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DOUBLESLASH DIV COMMA AND # ]
relative_location_path -> relative_location_path . DOUBLESLASH step [ SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DOUBLESLASH DIV COMMA AND # ]
## Transitions:
-- On SLASH shift to state 23
-- On DOUBLESLASH shift to state 28
## Reductions:
-- On RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND
--   reduce production path_expr -> filter_expr DOUBLESLASH relative_location_path

State 80:
## Known stack suffix:
## expr
## LR(1) items:
arguments -> expr . [ RPAREN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production arguments -> expr

State 81:
## Known stack suffix:
## FUNCTION_NAME arguments
## LR(1) items:
arguments -> arguments . COMMA expr [ RPAREN COMMA ]
function_call -> FUNCTION_NAME arguments . RPAREN [ SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT LBRACKET GTE GT EQUAL DOUBLESLASH DIV COMMA AND # ]
## Transitions:
-- On RPAREN shift to state 82
-- On COMMA shift to state 83
## Reductions:

State 82:
## Known stack suffix:
## FUNCTION_NAME arguments RPAREN
## LR(1) items:
function_call -> FUNCTION_NAME arguments RPAREN . [ SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT LBRACKET GTE GT EQUAL DOUBLESLASH DIV COMMA AND # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production function_call -> FUNCTION_NAME arguments RPAREN

State 83:
## Known stack suffix:
## arguments COMMA
## LR(1) items:
arguments -> arguments COMMA . expr [ RPAREN COMMA ]
## Transitions:
-- On VAR shift to state 1
-- On SLASH shift to state 2
-- On NUMBER shift to state 14
-- On NODE_TYPE shift to state 3
-- On NAME_TEST shift to state 7
-- On MINUS shift to state 15
-- On LPAREN shift to state 16
-- On LITERAL shift to state 17
-- On FUNCTION_NAME shift to state 18
-- On DOUBLESLASH shift to state 20
-- On DOUBLEDOT shift to state 8
-- On DOT shift to state 9
-- On AXIS shift to state 10
-- On AT shift to state 11
-- On union_expr shift to state 30
-- On unary_expr shift to state 41
-- On step2 shift to state 12
-- On step shift to state 21
-- On relative_location_path shift to state 32
-- On relational_expr shift to state 42
-- On primary_expr shift to state 33
-- On path_expr shift to state 44
-- On or_expr shift to state 64
-- On node_test shift to state 25
-- On multiplicative_expr shift to state 45
-- On location_path shift to state 35
-- On function_call shift to state 36
-- On filter_expr shift to state 37
-- On expr shift to state 84
-- On equality_expr shift to state 66
-- On axis_specifier shift to state 26
-- On and_expr shift to state 77
-- On additive_expr shift to state 69
-- On absolute_location_path shift to state 48
## Reductions:

State 84:
## Known stack suffix:
## arguments COMMA expr
## LR(1) items:
arguments -> arguments COMMA expr . [ RPAREN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production arguments -> arguments COMMA expr

State 85:
## Known stack suffix:
## LPAREN expr
## LR(1) items:
primary_expr -> LPAREN expr . RPAREN [ SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT LBRACKET GTE GT EQUAL DOUBLESLASH DIV COMMA AND # ]
## Transitions:
-- On RPAREN shift to state 86
## Reductions:

State 86:
## Known stack suffix:
## LPAREN expr RPAREN
## LR(1) items:
primary_expr -> LPAREN expr RPAREN . [ SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT LBRACKET GTE GT EQUAL DOUBLESLASH DIV COMMA AND # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_expr -> LPAREN expr RPAREN

State 87:
## Known stack suffix:
## MINUS unary_expr
## LR(1) items:
unary_expr -> MINUS unary_expr . [ RPAREN RBRACKET PLUS OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production unary_expr -> MINUS unary_expr

State 88:
## Known stack suffix:
## step2 LBRACKET expr
## LR(1) items:
step2 -> step2 LBRACKET expr . RBRACKET [ SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT LBRACKET GTE GT EQUAL DOUBLESLASH DIV COMMA AND # ]
## Transitions:
-- On RBRACKET shift to state 89
## Reductions:

State 89:
## Known stack suffix:
## step2 LBRACKET expr RBRACKET
## LR(1) items:
step2 -> step2 LBRACKET expr RBRACKET . [ SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT LBRACKET GTE GT EQUAL DOUBLESLASH DIV COMMA AND # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production step2 -> step2 LBRACKET expr RBRACKET

State 90:
## Known stack suffix:
## SLASH relative_location_path
## LR(1) items:
absolute_location_path -> SLASH relative_location_path . [ RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND # ]
relative_location_path -> relative_location_path . SLASH step [ SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DOUBLESLASH DIV COMMA AND # ]
relative_location_path -> relative_location_path . DOUBLESLASH step [ SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DOUBLESLASH DIV COMMA AND # ]
## Transitions:
-- On SLASH shift to state 23
-- On DOUBLESLASH shift to state 28
## Reductions:
-- On RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND
--   reduce production absolute_location_path -> SLASH relative_location_path

State 91:
## Known stack suffix:
## or_expr
## LR(1) items:
expr -> or_expr . [ # ]
or_expr -> or_expr . OR and_expr [ OR # ]
## Transitions:
-- On OR shift to state 65
## Reductions:

State 92:
## Known stack suffix:
## expr
## LR(1) items:
expr' -> expr . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept expr

State 93:
## Known stack suffix:
##
## LR(1) items:
location_path' -> . location_path [ # ]
## Transitions:
-- On SLASH shift to state 2
-- On NODE_TYPE shift to state 3
-- On NAME_TEST shift to state 7
-- On DOUBLESLASH shift to state 20
-- On DOUBLEDOT shift to state 8
-- On DOT shift to state 9
-- On AXIS shift to state 10
-- On AT shift to state 11
-- On step2 shift to state 12
-- On step shift to state 21
-- On relative_location_path shift to state 32
-- On node_test shift to state 25
-- On location_path shift to state 94
-- On axis_specifier shift to state 26
-- On absolute_location_path shift to state 48
## Reductions:

State 94:
## Known stack suffix:
## location_path
## LR(1) items:
location_path' -> location_path . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept location_path

