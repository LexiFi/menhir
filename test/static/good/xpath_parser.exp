File "xpath_parser.mly", line 15, characters 7-10:
Warning: the token EOF is unused.
Grammar has 21 nonterminal symbols, among which 2 start symbols.
Grammar has 32 terminal symbols.
Grammar has 58 productions.
nullable(union_expr) = false
nullable(unary_expr) = false
nullable(step2) = false
nullable(step) = false
nullable(relative_location_path) = false
nullable(relational_expr) = false
nullable(primary_expr) = false
nullable(path_expr) = false
nullable(or_expr) = false
nullable(node_test) = false
nullable(multiplicative_expr) = false
nullable(location_path) = false
nullable(function_call) = false
nullable(filter_expr) = false
nullable(expr) = false
nullable(equality_expr) = false
nullable(axis_specifier) = false
nullable(arguments) = false
nullable(and_expr) = false
nullable(additive_expr) = false
nullable(absolute_location_path) = false
first(union_expr) = VAR SLASH NUMBER NODE_TYPE NAME_TEST LPAREN LITERAL FUNCTION_NAME DOUBLESLASH DOUBLEDOT DOT AXIS AT
first(unary_expr) = VAR SLASH NUMBER NODE_TYPE NAME_TEST MINUS LPAREN LITERAL FUNCTION_NAME DOUBLESLASH DOUBLEDOT DOT AXIS AT
first(step2) = NODE_TYPE NAME_TEST
first(step) = NODE_TYPE NAME_TEST DOUBLEDOT DOT AXIS AT
first(relative_location_path) = NODE_TYPE NAME_TEST DOUBLEDOT DOT AXIS AT
first(relational_expr) = VAR SLASH NUMBER NODE_TYPE NAME_TEST MINUS LPAREN LITERAL FUNCTION_NAME DOUBLESLASH DOUBLEDOT DOT AXIS AT
first(primary_expr) = VAR NUMBER LPAREN LITERAL FUNCTION_NAME
first(path_expr) = VAR SLASH NUMBER NODE_TYPE NAME_TEST LPAREN LITERAL FUNCTION_NAME DOUBLESLASH DOUBLEDOT DOT AXIS AT
first(or_expr) = VAR SLASH NUMBER NODE_TYPE NAME_TEST MINUS LPAREN LITERAL FUNCTION_NAME DOUBLESLASH DOUBLEDOT DOT AXIS AT
first(node_test) = NODE_TYPE NAME_TEST
first(multiplicative_expr) = VAR SLASH NUMBER NODE_TYPE NAME_TEST MINUS LPAREN LITERAL FUNCTION_NAME DOUBLESLASH DOUBLEDOT DOT AXIS AT
first(location_path) = SLASH NODE_TYPE NAME_TEST DOUBLESLASH DOUBLEDOT DOT AXIS AT
first(function_call) = FUNCTION_NAME
first(filter_expr) = VAR NUMBER LPAREN LITERAL FUNCTION_NAME
first(expr) = VAR SLASH NUMBER NODE_TYPE NAME_TEST MINUS LPAREN LITERAL FUNCTION_NAME DOUBLESLASH DOUBLEDOT DOT AXIS AT
first(equality_expr) = VAR SLASH NUMBER NODE_TYPE NAME_TEST MINUS LPAREN LITERAL FUNCTION_NAME DOUBLESLASH DOUBLEDOT DOT AXIS AT
first(axis_specifier) = AXIS AT
first(arguments) = VAR SLASH NUMBER NODE_TYPE NAME_TEST MINUS LPAREN LITERAL FUNCTION_NAME DOUBLESLASH DOUBLEDOT DOT AXIS AT
first(and_expr) = VAR SLASH NUMBER NODE_TYPE NAME_TEST MINUS LPAREN LITERAL FUNCTION_NAME DOUBLESLASH DOUBLEDOT DOT AXIS AT
first(additive_expr) = VAR SLASH NUMBER NODE_TYPE NAME_TEST MINUS LPAREN LITERAL FUNCTION_NAME DOUBLESLASH DOUBLEDOT DOT AXIS AT
first(absolute_location_path) = SLASH DOUBLESLASH
minimal(union_expr) = (* 1 *) NAME_TEST
minimal(unary_expr) = (* 1 *) NAME_TEST
minimal(step2) = (* 1 *) NAME_TEST
minimal(step) = (* 1 *) NAME_TEST
minimal(relative_location_path) = (* 1 *) NAME_TEST
minimal(relational_expr) = (* 1 *) NAME_TEST
minimal(primary_expr) = (* 1 *) VAR
minimal(path_expr) = (* 1 *) NAME_TEST
minimal(or_expr) = (* 1 *) NAME_TEST
minimal(node_test) = (* 1 *) NAME_TEST
minimal(multiplicative_expr) = (* 1 *) NAME_TEST
minimal(location_path) = (* 1 *) NAME_TEST
minimal(function_call) = (* 2 *) FUNCTION_NAME RPAREN
minimal(filter_expr) = (* 1 *) VAR
minimal(expr) = (* 1 *) NAME_TEST
minimal(equality_expr) = (* 1 *) NAME_TEST
minimal(axis_specifier) = (* 1 *) AXIS
minimal(arguments) = (* 1 *) NAME_TEST
minimal(and_expr) = (* 1 *) NAME_TEST
minimal(additive_expr) = (* 1 *) NAME_TEST
minimal(absolute_location_path) = (* 1 *) SLASH
follow(union_expr) = RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND #
follow(unary_expr) = RPAREN RBRACKET PLUS OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND #
follow(step2) = SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT LBRACKET GTE GT EQUAL DOUBLESLASH DIV COMMA AND #
follow(step) = SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DOUBLESLASH DIV COMMA AND #
follow(relative_location_path) = SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DOUBLESLASH DIV COMMA AND #
follow(relational_expr) = RPAREN RBRACKET OR NOTEQUAL LTE LT GTE GT EQUAL COMMA AND #
follow(primary_expr) = SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT LBRACKET GTE GT EQUAL DOUBLESLASH DIV COMMA AND #
follow(path_expr) = RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND #
follow(or_expr) = RPAREN RBRACKET OR COMMA #
follow(node_test) = SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT LBRACKET GTE GT EQUAL DOUBLESLASH DIV COMMA AND #
follow(multiplicative_expr) = RPAREN RBRACKET PLUS OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND #
follow(location_path) = RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND #
follow(function_call) = SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT LBRACKET GTE GT EQUAL DOUBLESLASH DIV COMMA AND #
follow(filter_expr) = SLASH RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT LBRACKET GTE GT EQUAL DOUBLESLASH DIV COMMA AND #
follow(expr) = RPAREN RBRACKET COMMA #
follow(equality_expr) = RPAREN RBRACKET OR NOTEQUAL EQUAL COMMA AND #
follow(axis_specifier) = NODE_TYPE NAME_TEST
follow(arguments) = RPAREN COMMA
follow(and_expr) = RPAREN RBRACKET OR COMMA AND #
follow(additive_expr) = RPAREN RBRACKET PLUS OR NOTEQUAL MINUS LTE LT GTE GT EQUAL COMMA AND #
follow(absolute_location_path) = RPAREN RBRACKET PLUS PIPE OR NOTEQUAL MUL MOD MINUS LTE LT GTE GT EQUAL DIV COMMA AND #
Built an LR(0) automaton with 94 states.
The grammar is SLR(1).
The construction mode is pager.
Built an LR(1) automaton with 95 states.
Warning: 54 end-of-stream conflicts were arbitrarily resolved.
34 out of 95 states have a default reduction.
29 out of 95 states are represented.
0 out of 57 symbols keep track of their start position.
0 out of 57 symbols keep track of their end position.
31 out of 60 productions exploit shiftreduce optimization.
0 out of 95 states can peek at an error.
278 functions before inlining, 56 functions after inlining.
