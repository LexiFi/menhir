File "xpath_parser.mly", line 15, characters 7-10:
Warning: the token EOF is unused.
%{
  open Xpath_syntax
  open Xpath_tree
  open Axis
%}
%start expr
%start location_path
%token AND
%token AT
%token <string> AXIS
%token COMMA
%token DIV
%token DOT
%token DOUBLEDOT
%token DOUBLESLASH
%token EOF
%token EQUAL
%token <string> FUNCTION_NAME
%token GT
%token GTE
%token LBRACKET
%token <string> LITERAL
%token LPAREN
%token LT
%token LTE
%token MINUS
%token MOD
%token MUL
%token <string> NAME_TEST
%token <string> NODE_TYPE
%token NOTEQUAL
%token <float> NUMBER
%token OR
%token PIPE
%token PLUS
%token RBRACKET
%token RPAREN
%token SLASH
%token <string> VAR
%type <Xpath_syntax.expr> expr
%type <Xpath_syntax.path_expr> location_path
%%

location_path:
  _1 = relative_location_path
    {                               ( _1 )}
| _1 = absolute_location_path
    {                               ( _1 )}

absolute_location_path:
  _1 = SLASH
    {           ( Root )}
| _1 = SLASH _2 = relative_location_path
    {                                 ( Slash (Root,_2) )}
| _1 = DOUBLESLASH _2 = relative_location_path
    {                                      ( double_slash Root _2 )}

relative_location_path:
  _1 = step
    {           ( _1 )}
| _1 = relative_location_path _2 = SLASH _3 = step
    {                                     ( Slash (_1,_3) )}
| _1 = relative_location_path _2 = DOUBLESLASH _3 = step
    {                                           ( double_slash _1 _3 )}

step:
  _1 = axis_specifier _2 = step2
    {                        ( Axis (_1,_2) )}
| _1 = step2
    {         ( _1 )}
| _1 = DOT
    {         ( dot  )}
| _1 = DOUBLEDOT
    {              ( dotdot )}

step2:
  _1 = step2 _2 = LBRACKET _3 = expr _4 = RBRACKET
    {                                ( Condition (_1,_3) )}
| _1 = node_test
    {             ( _1 )}

axis_specifier:
  _1 = AXIS
    {        (
     try Axis.of_string _1
     with Not_found -> failwith ("Unknown axis :"^_1)
   )}
| _1 = AT
    {      ( Attribute )}

node_test:
  _1 = NAME_TEST
    {              ( Name _1 )}
| _1 = NODE_TYPE _2 = RPAREN
    {                    (
     try TypeTest (Type_test.of_string _1)
     with Not_found -> failwith ("Unknown node type :"^_1)
   )}
| _1 = NODE_TYPE _2 = LITERAL _3 = RPAREN
    {                            (
     match _1 with
       | "processing-instruction" ->
	   TypeTest (Type_test.Pi_test (Some _2))
       | _ -> failwith "Only processing-instruction tests accept argument"
   )}

primary_expr:
  _1 = function_call
    {                   ( _1 )}
| _1 = VAR
    {                   ( Var _1 )}
| _1 = LPAREN _2 = expr _3 = RPAREN
    {                       ( _2 )}
| _1 = LITERAL
    {                   ( String_literal _1 )}
| _1 = NUMBER
    {                   ( Number_literal _1 )}

function_call:
  _1 = FUNCTION_NAME _2 = RPAREN
    {                         ( Function (_1,[]) )}
| _1 = FUNCTION_NAME _2 = arguments _3 = RPAREN
    {                                   ( Function (_1,_2) )}

arguments:
  _1 = arguments _2 = COMMA _3 = expr
    {                          ( _1@[_3] )}
| _1 = expr
    {        ( [_1] )}

union_expr:
  _1 = path_expr
    {                    ( _1 )}
| _1 = union_expr _2 = PIPE _3 = path_expr
    {                              ( path_expr (Pipe(expr _1, expr _3)) )}

path_expr:
  _1 = location_path
    {                    ( path_expr _1 )}
| _1 = filter_expr
    {                    ( _1 )}
| _1 = filter_expr _2 = SLASH _3 = relative_location_path
    {     (  path_expr (Slash (expr _1,_3)) )}
| _1 = filter_expr _2 = DOUBLESLASH _3 = relative_location_path
    {     (  path_expr (double_slash (expr _1) _3) )}

filter_expr:
  _1 = primary_expr
    {                ( _1 )}
| _1 = filter_expr _2 = LBRACKET _3 = expr _4 = RBRACKET
    {                                      ( path_expr (Condition (expr _1,_3)) )}

expr:
  _1 = or_expr
    {                   ( _1 )}

or_expr:
  _1 = and_expr
    {                   ( _1 )}
| _1 = or_expr _2 = OR _3 = and_expr
    {                       ( Or(_1,_3) )}

and_expr:
  _1 = equality_expr
    {                   ( _1 )}
| _1 = and_expr _2 = AND _3 = equality_expr
    {                              ( And(_1,_3) )}

equality_expr:
  _1 = relational_expr
    {                    ( _1 )}
| _1 = equality_expr _2 = EQUAL _3 = relational_expr
    {                                       ( Equal(_1,_3) )}
| _1 = equality_expr _2 = NOTEQUAL _3 = relational_expr
    {                                          ( NotEqual(_1,_3) )}

relational_expr:
  _1 = additive_expr
    {                    ( _1 )}
| _1 = relational_expr _2 = LT _3 = additive_expr
    {                                    ( Lower(_1,_3) )}
| _1 = relational_expr _2 = GT _3 = additive_expr
    {                                    ( Greater(_1,_3) )}
| _1 = relational_expr _2 = LTE _3 = additive_expr
    {                                     ( LowerEqual(_1,_3) )}
| _1 = relational_expr _2 = GTE _3 = additive_expr
    {                                     ( GreaterEqual(_1,_3) )}

additive_expr:
  _1 = multiplicative_expr
    {                        ( _1 )}
| _1 = additive_expr _2 = PLUS _3 = multiplicative_expr
    {                                           ( Plus(_1,_3) )}
| _1 = additive_expr _2 = MINUS _3 = multiplicative_expr
    {                                            ( Minus(_1,_3) )}

multiplicative_expr:
  _1 = unary_expr
    {               ( _1 )}
| _1 = multiplicative_expr _2 = MUL _3 = unary_expr
    {                                       ( Mul (_1,_3) )}
| _1 = multiplicative_expr _2 = DIV _3 = unary_expr
    {                                       ( Div (_1,_3) )}
| _1 = multiplicative_expr _2 = MOD _3 = unary_expr
    {                                       ( Mod (_1,_3) )}

unary_expr:
  _1 = union_expr
    {               ( _1 )}
| _1 = MINUS _2 = unary_expr
    {                    ( UnaryMinus _2 )}

%%
