Note: the nonterminal symbol option (from yaparser.mly) is renamed yaparser_option.
File "yaparser.mly", line 85, characters 7-10:
Warning: the token EOF is unused.
File "yaparser.mly", line 96, characters 7-16:
Warning: the token SEMICOLON is unused.
File "yaparser.mly", line 87, characters 10-17:
Warning: the token highest is unused.
%{
open Logic_ptree
open Promelaast
open Bool3

let to_seq c =
  [{ condition = Some c;
     nested = [];
     min_rep = Some Data_for_aorai.cst_one;
     max_rep = Some Data_for_aorai.cst_one;
   }]

let is_no_repet (min,max) =
  let is_one c = Extlib.may_map Data_for_aorai.is_cst_one ~dft:false c in
  is_one min && is_one max

let observed_states      = Hashtbl.create 1
let prefetched_states    = Hashtbl.create 1

let fetch_and_create_state name =
  Hashtbl.remove prefetched_states name ;
  try
    Hashtbl.find observed_states name
  with
    Not_found ->
      let s = Data_for_aorai.new_state name in
      Hashtbl.add observed_states name s; s
;;

let prefetch_and_create_state name =
    if (Hashtbl.mem prefetched_states name) ||
      not (Hashtbl.mem observed_states name)
    then
      begin
	let s= fetch_and_create_state name in
	Hashtbl.add prefetched_states name name;
	s
      end
    else
      (fetch_and_create_state name)
;;

type pre_cond = Behavior of string | Pre of Promelaast.condition

%}
%start main
%token AMP
%token AND
%token CALLORRETURN_OF
%token CALL_OF
%token CARET
%token COLON
%token COLUMNCOLUMN
%token COMMA
%token DOT
%token EOF
%token EQ
%token FALSE
%token GE
%token GT
%token <string> IDENTIFIER
%token <string> INT
%token LBRACELBRACE
%token LCURLY
%token LE
%token LPAREN
%token LSQUARE
%token LT
%token MINUS
%token NEQ
%token NOT
%token OR
%token OTHERWISE
%token PERCENT
%token PIPE
%token PLUS
%token QUESTION
%token RARROW
%token RBRACERBRACE
%token RCURLY
%token RETURN_OF
%token RPAREN
%token RSQUARE
%token SEMI_COLON
%token SLASH
%token STAR
%token TRUE
%nonassoc highest
%left LPAREN RPAREN
%left LCURLY
%right AND EQ GE GT LE LT MINUS NEQ OR PERCENT PLUS SLASH STAR
%left LSQUARE RSQUARE
%left DOT
%nonassoc FALSE NOT TRUE
%nonassoc QUESTION
%right SEMICOLON
%nonassoc lowest
%type <Promelaast.parsed_automaton> main
%%

main:
  _1 = options _2 = states
    {                   (
  List.iter
    (fun(key, ids) ->
       match key with
           "init"   ->
             List.iter
               (fun id ->
                 try
	           (Hashtbl.find observed_states id).init <- True
                 with
	             Not_found ->
                       Aorai_option.abort "Error: no state '%s'\n" id)
               ids
         | "accept" ->
             List.iter
               (fun id -> try
	          (Hashtbl.find observed_states id).acceptation <- True
                with Not_found ->
                  Aorai_option.abort "no state '%s'\n" id) ids
         | "deterministic" -> Aorai_option.Deterministic.set true;
         | oth      -> Aorai_option.abort "unknown option '%s'\n" oth
    ) _1;
    let states=
      Hashtbl.fold
        (fun _ st l ->
	   if st.acceptation=Undefined || st.init=Undefined then
	     begin
	       Aorai_option.abort
                 "Error: the state '%s' is used but never defined.\n" st.name
	     end;
	   st::l)
        observed_states []
    in
    (try
       Hashtbl.iter
         (fun _ st -> if st.init=True then raise Exit) observed_states;
       Aorai_option.abort "Automaton does not declare an initial state"
     with Exit -> ());
    if Hashtbl.length prefetched_states >0 then
      begin
	let r = Hashtbl.fold
	  (fun s n _ ->
            s^"Error: the state '"^n^"' is used but never defined.\n")
	  prefetched_states
	  ""
	in
	Aorai_option.abort "%s" r
      end;
    (states, _2)
  )}

options:
  _1 = options _2 = yaparser_option
    {                   ( _1@[_2] )}
| _1 = yaparser_option
    {                   ( [_1] )}

yaparser_option:
  _1 = PERCENT _2 = IDENTIFIER _3 = opt_identifiers _4 = SEMI_COLON
    {                                                  ( (_2, _3) )}

opt_identifiers:
  
    {                ( [] )}
| _1 = COLON _2 = id_list
    {                  ( _2 )}

id_list:
  _1 = id_list _2 = COMMA _3 = IDENTIFIER
    {                             ( _1@[_3] )}
| _1 = IDENTIFIER
    {                             ( [_1] )}

states:
  _1 = states _2 = state
    {                 ( _1@_2 )}
| _1 = state
    {          ( _1 )}

state:
  _1 = IDENTIFIER _2 = COLON _3 = transitions _4 = SEMI_COLON
    {                                            (
      let start_state = fetch_and_create_state _1 in
      let (_, transitions) =
        List.fold_left
          (fun (otherwise, transitions) (cross,stop_state) ->
            if otherwise then
              Aorai_option.abort
                "'other' directive in definition of %s \
                transitions is not the last one" start_state.name
            else begin
              let trans =
                { start=start_state; stop=stop_state;
	          cross=cross;       numt=(-1) }::transitions
              in
              let otherwise =
                match cross with
                  | Otherwise -> true
                  | Seq _ -> false
              in otherwise, trans
            end)
          (false,[]) _3
      in
      List.rev transitions
  )}

transitions:
  _1 = transitions _2 = PIPE _3 = transition
    {                                ( _1@[_3] )}
| _1 = transition
    {               ( [_1] )}

transition:
  _1 = LCURLY _2 = seq_elt _3 = RCURLY _4 = RARROW _5 = IDENTIFIER
    {      ( (Seq _2, prefetch_and_create_state _5) )}
| _1 = OTHERWISE _2 = RARROW _3 = IDENTIFIER
    {                                ((Otherwise, prefetch_and_create_state _3) )}
| _1 = RARROW _2 = IDENTIFIER
    {                      ( (Seq (to_seq PTrue), prefetch_and_create_state _2) )}

non_empty_seq:
  _1 = seq_elt
    {            ( _1 )}
| _1 = seq_elt _2 = SEMI_COLON _3 = seq
    {                           ( _1 @ _3 )}

seq:
  
    {                  ( [] )}
| _1 = non_empty_seq
    {                  ( _1 )}

guard:
  _1 = single_cond
    {                ( to_seq _1 )}
| _1 = LSQUARE _2 = non_empty_seq _3 = RSQUARE
    {                                  ( _2 )}
| _1 = IDENTIFIER _2 = pre_cond _3 = LPAREN _4 = seq _5 = RPAREN _6 = post_cond
    {      ( let pre_cond =
          match _2 with
            | Behavior b -> PCall(_1,Some b)
            | Pre c -> PAnd (PCall(_1,None), c)
        in
        let post_cond =
          match _6 with
            | None -> PReturn _1
            | Some c -> PAnd (PReturn _1,c)
        in
        (to_seq pre_cond) @ _4 @ to_seq post_cond
      )}
| _1 = IDENTIFIER _2 = LPAREN _3 = non_empty_seq _4 = RPAREN _5 = post_cond
    {      ( let post_cond =
          match _5 with
            | None -> PReturn _1
            | Some c -> PAnd (PReturn _1,c)
        in
        (to_seq (PCall (_1, None))) @ _3 @ to_seq post_cond
      )}
| _1 = IDENTIFIER _2 = LPAREN _3 = RPAREN _4 = post_cond
    {      ( let post_cond =
          match _4 with
            | None -> PReturn _1
            | Some c -> PAnd (PReturn _1,c)
        in
        (to_seq (PCall (_1, None))) @ to_seq post_cond
      )}

pre_cond:
  _1 = COLUMNCOLUMN _2 = IDENTIFIER
    {                            ( Behavior _2 )}
| _1 = LBRACELBRACE _2 = single_cond _3 = RBRACERBRACE
    {                                          ( Pre _2 )}

post_cond:
  
    {                  ( None )}
| _1 = LBRACELBRACE _2 = single_cond _3 = RBRACERBRACE
    {                                          ( Some _2 )}

seq_elt:
  _1 = guard _2 = repetition
    {                     (
    let min, max = _2 in
    match _1 with
      | [ s ] when Data_for_aorai.is_single s ->
        [ { s with min_rep = min; max_rep = max } ]
      | l ->
        if is_no_repet (min,max) then
          l (* [ a; [b;c]; d] is equivalent to [a;b;c;d] *)
        else [ { condition = None; nested = l; min_rep = min; max_rep = max } ]
  )}

repetition:
   %prec lowest
    {      ( Some Data_for_aorai.cst_one, Some Data_for_aorai.cst_one )}
| _1 = PLUS
    {         ( Some Data_for_aorai.cst_one, None)}
| _1 = STAR
    {         ( None, None )}
| _1 = QUESTION
    {             ( None, Some Data_for_aorai.cst_one )}
| _1 = LCURLY _2 = arith_relation _3 = COMMA _4 = arith_relation _5 = RCURLY
    {                                                      ( Some _2, Some _4 )}
| _1 = LCURLY _2 = arith_relation _3 = RCURLY
    {                                 ( Some _2, Some _2 )}
| _1 = LCURLY _2 = arith_relation _3 = COMMA _4 = RCURLY
    {                                       ( Some _2, None )}
| _1 = LCURLY _2 = COMMA _3 = arith_relation _4 = RCURLY
    {                                       ( None, Some _3 )}

single_cond:
  _1 = CALLORRETURN_OF _2 = LPAREN _3 = IDENTIFIER _4 = RPAREN
    {      ( POr (PCall (_3,None), PReturn _3) )}
| _1 = CALL_OF _2 = LPAREN _3 = IDENTIFIER _4 = RPAREN
    {                                      ( PCall (_3,None) )}
| _1 = RETURN_OF _2 = LPAREN _3 = IDENTIFIER _4 = RPAREN
    {                                        ( PReturn _3 )}
| _1 = TRUE
    {         ( PTrue )}
| _1 = FALSE
    {          ( PFalse )}
| _1 = NOT _2 = single_cond
    {                    ( PNot _2 )}
| _1 = single_cond _2 = AND _3 = single_cond
    {                                ( PAnd (_1,_3) )}
| _1 = single_cond _2 = OR _3 = single_cond
    {                               ( POr (_1,_3) )}
| _1 = LPAREN _2 = single_cond _3 = RPAREN
    {                              ( _2 )}
| _1 = logic_relation
    {                   ( _1 )}

logic_relation:
  _1 = arith_relation _2 = EQ _3 = arith_relation
    {                                     ( PRel(Eq, _1, _3) )}
| _1 = arith_relation _2 = LT _3 = arith_relation
    {                                     ( PRel(Lt, _1, _3) )}
| _1 = arith_relation _2 = GT _3 = arith_relation
    {                                     ( PRel(Gt, _1, _3) )}
| _1 = arith_relation _2 = LE _3 = arith_relation
    {                                     ( PRel(Le, _1, _3) )}
| _1 = arith_relation _2 = GE _3 = arith_relation
    {                                     ( PRel(Ge, _1, _3) )}
| _1 = arith_relation _2 = NEQ _3 = arith_relation
    {                                      ( PRel(Neq, _1, _3) )}
| _1 = arith_relation %prec TRUE
    {                              ( PRel (Neq, _1, PCst(IntConstant "0")) )}

arith_relation:
  _1 = arith_relation_mul _2 = PLUS _3 = arith_relation
    {                                           ( PBinop(Badd,_1,_3) )}
| _1 = arith_relation_mul _2 = MINUS _3 = arith_relation
    {                                            ( PBinop(Bsub,_1,_3) )}
| _1 = arith_relation_mul %prec lowest
    {                                    ( _1 )}

arith_relation_mul:
  _1 = arith_relation_mul _2 = SLASH _3 = access_or_const
    {                                             ( PBinop(Bdiv,_1,_3) )}
| _1 = arith_relation_mul _2 = STAR _3 = access_or_const
    {                                            ( PBinop(Bmul, _1, _3) )}
| _1 = arith_relation_mul _2 = PERCENT _3 = access_or_const
    {                                               ( PBinop(Bmod, _1, _3) )}
| _1 = arith_relation_bw %prec lowest
    {                                   ( _1 )}

arith_relation_bw:
  _1 = access_or_const %prec lowest
    {                                 ( _1 )}
| _1 = arith_relation_bw _2 = AMP _3 = access_or_const
    {                                          ( PBinop(Bbw_and,_1,_3) )}
| _1 = arith_relation_bw _2 = PIPE _3 = access_or_const
    {                                           ( PBinop(Bbw_or,_1,_3) )}
| _1 = arith_relation_bw _2 = CARET _3 = access_or_const
    {                                            ( PBinop(Bbw_xor,_1,_3) )}

access_or_const:
  _1 = INT
    {        ( PCst (IntConstant _1) )}
| _1 = MINUS _2 = INT
    {              ( PUnop (Uminus, PCst (IntConstant _2)) )}
| _1 = access %prec TRUE
    {                      ( _1 )}
| _1 = LPAREN _2 = arith_relation _3 = RPAREN
    {                                 ( _2 )}

access:
  _1 = access _2 = DOT _3 = IDENTIFIER
    {                          ( PField(_1,_3) )}
| _1 = access _2 = LSQUARE _3 = access_or_const _4 = RSQUARE
    {                                           ( PArrget(_1,_3) )}
| _1 = access_leaf
    {                    (_1)}

access_leaf:
  _1 = STAR _2 = access
    {                ( PUnop (Ustar,_2) )}
| _1 = IDENTIFIER _2 = LPAREN _3 = RPAREN _4 = DOT _5 = IDENTIFIER
    {                                            ( PPrm(_1,_5) )}
| _1 = IDENTIFIER
    {               ( PVar _1 )}
| _1 = LPAREN _2 = access _3 = RPAREN
    {                         ( _2 )}

%%
