State 0:
## Known stack suffix:
##
## LR(1) items:
file' -> . file [ # ]
## Transitions:
-- On TRUE shift to state 1
-- On TILDE_ shift to state 2
-- On STRING shift to state 3
-- On PARAMETER shift to state 150
-- On NUM shift to state 4
-- On MUSTUSE shift to state 157
-- On MATCH shift to state 5
-- On LPAREN_ shift to state 6
-- On LET shift to state 7
-- On INDUCTIVE shift to state 158
-- On IF shift to state 36
-- On IDENT shift to state 37
-- On FUNCTION shift to state 184
-- On FUN shift to state 38
-- On FORALL shift to state 49
-- On FIXPOINT shift to state 201
-- On FALSE shift to state 54
-- On EXISTS shift to state 55
-- On DEPENDS shift to state 226
-- On DEFINITION shift to state 213
-- On BEGINPROOF shift to state 229
-- On AROBAS_ shift to state 58
-- On proof_head shift to state 235
-- On hyp_def_list shift to state 251
-- On hyp_def shift to state 244
-- On file shift to state 258
-- On expr1 shift to state 63
-- On expr shift to state 259
-- On dep_hyp_def shift to state 249
## Reductions:
-- On THEOREM reduce production hyp_def_list ->

State 1:
## Known stack suffix:
## TRUE
## LR(1) items:
expr1 -> TRUE . [ WITH TRUE THEN STRING STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER NUM MUSTUSE LT_GT_ LT_DASH_GT_ LPAREN_ LBRACE_ INDUCTIVE IN IDENT FUNCTION FIXPOINT FALSE EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
## Transitions:
## Reductions:
-- On WITH reduce production expr1 -> TRUE
-- On TRUE reduce production expr1 -> TRUE
-- On THEN reduce production expr1 -> TRUE
-- On STRING reduce production expr1 -> TRUE
-- On STAR_ reduce production expr1 -> TRUE
-- On SLASH_BACKSL_ reduce production expr1 -> TRUE
-- On RPAREN_ reduce production expr1 -> TRUE
-- On RBRACE_ reduce production expr1 -> TRUE
-- On PERIOD_ reduce production expr1 -> TRUE
-- On PERCENT_ reduce production expr1 -> TRUE
-- On PARAMETER reduce production expr1 -> TRUE
-- On NUM reduce production expr1 -> TRUE
-- On MUSTUSE reduce production expr1 -> TRUE
-- On LT_GT_ reduce production expr1 -> TRUE
-- On LT_DASH_GT_ reduce production expr1 -> TRUE
-- On LPAREN_ reduce production expr1 -> TRUE
-- On LBRACE_ reduce production expr1 -> TRUE
-- On INDUCTIVE reduce production expr1 -> TRUE
-- On IN reduce production expr1 -> TRUE
-- On IDENT reduce production expr1 -> TRUE
-- On FUNCTION reduce production expr1 -> TRUE
-- On FIXPOINT reduce production expr1 -> TRUE
-- On FALSE reduce production expr1 -> TRUE
-- On EQ_GT_ reduce production expr1 -> TRUE
-- On EQ_ reduce production expr1 -> TRUE
-- On EOF reduce production expr1 -> TRUE
-- On ENDPROOF reduce production expr1 -> TRUE
-- On END reduce production expr1 -> TRUE
-- On ELSE reduce production expr1 -> TRUE
-- On DEPENDS reduce production expr1 -> TRUE
-- On DEFINITION reduce production expr1 -> TRUE
-- On DASH_GT_ reduce production expr1 -> TRUE
-- On COMMA_ reduce production expr1 -> TRUE
-- On COLON_EQ_ reduce production expr1 -> TRUE
-- On BAR_ reduce production expr1 -> TRUE
-- On BACKSL_SLASH_ reduce production expr1 -> TRUE

State 2:
## Known stack suffix:
## TILDE_
## LR(1) items:
expr -> TILDE_ . expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
## Transitions:
-- On TRUE shift to state 1
-- On TILDE_ shift to state 2
-- On STRING shift to state 3
-- On NUM shift to state 4
-- On MATCH shift to state 5
-- On LPAREN_ shift to state 6
-- On LET shift to state 7
-- On IF shift to state 36
-- On IDENT shift to state 37
-- On FUN shift to state 38
-- On FORALL shift to state 49
-- On FALSE shift to state 54
-- On EXISTS shift to state 55
-- On AROBAS_ shift to state 58
-- On expr1 shift to state 63
-- On expr shift to state 149
## Reductions:

State 3:
## Known stack suffix:
## STRING
## LR(1) items:
expr1 -> STRING . [ WITH TRUE THEN STRING STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER NUM MUSTUSE LT_GT_ LT_DASH_GT_ LPAREN_ LBRACE_ INDUCTIVE IN IDENT FUNCTION FIXPOINT FALSE EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
## Transitions:
## Reductions:
-- On WITH reduce production expr1 -> STRING
-- On TRUE reduce production expr1 -> STRING
-- On THEN reduce production expr1 -> STRING
-- On STRING reduce production expr1 -> STRING
-- On STAR_ reduce production expr1 -> STRING
-- On SLASH_BACKSL_ reduce production expr1 -> STRING
-- On RPAREN_ reduce production expr1 -> STRING
-- On RBRACE_ reduce production expr1 -> STRING
-- On PERIOD_ reduce production expr1 -> STRING
-- On PERCENT_ reduce production expr1 -> STRING
-- On PARAMETER reduce production expr1 -> STRING
-- On NUM reduce production expr1 -> STRING
-- On MUSTUSE reduce production expr1 -> STRING
-- On LT_GT_ reduce production expr1 -> STRING
-- On LT_DASH_GT_ reduce production expr1 -> STRING
-- On LPAREN_ reduce production expr1 -> STRING
-- On LBRACE_ reduce production expr1 -> STRING
-- On INDUCTIVE reduce production expr1 -> STRING
-- On IN reduce production expr1 -> STRING
-- On IDENT reduce production expr1 -> STRING
-- On FUNCTION reduce production expr1 -> STRING
-- On FIXPOINT reduce production expr1 -> STRING
-- On FALSE reduce production expr1 -> STRING
-- On EQ_GT_ reduce production expr1 -> STRING
-- On EQ_ reduce production expr1 -> STRING
-- On EOF reduce production expr1 -> STRING
-- On ENDPROOF reduce production expr1 -> STRING
-- On END reduce production expr1 -> STRING
-- On ELSE reduce production expr1 -> STRING
-- On DEPENDS reduce production expr1 -> STRING
-- On DEFINITION reduce production expr1 -> STRING
-- On DASH_GT_ reduce production expr1 -> STRING
-- On COMMA_ reduce production expr1 -> STRING
-- On COLON_EQ_ reduce production expr1 -> STRING
-- On BAR_ reduce production expr1 -> STRING
-- On BACKSL_SLASH_ reduce production expr1 -> STRING

State 4:
## Known stack suffix:
## NUM
## LR(1) items:
expr1 -> NUM . [ WITH TRUE THEN STRING STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER NUM MUSTUSE LT_GT_ LT_DASH_GT_ LPAREN_ LBRACE_ INDUCTIVE IN IDENT FUNCTION FIXPOINT FALSE EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
## Transitions:
## Reductions:
-- On WITH reduce production expr1 -> NUM
-- On TRUE reduce production expr1 -> NUM
-- On THEN reduce production expr1 -> NUM
-- On STRING reduce production expr1 -> NUM
-- On STAR_ reduce production expr1 -> NUM
-- On SLASH_BACKSL_ reduce production expr1 -> NUM
-- On RPAREN_ reduce production expr1 -> NUM
-- On RBRACE_ reduce production expr1 -> NUM
-- On PERIOD_ reduce production expr1 -> NUM
-- On PERCENT_ reduce production expr1 -> NUM
-- On PARAMETER reduce production expr1 -> NUM
-- On NUM reduce production expr1 -> NUM
-- On MUSTUSE reduce production expr1 -> NUM
-- On LT_GT_ reduce production expr1 -> NUM
-- On LT_DASH_GT_ reduce production expr1 -> NUM
-- On LPAREN_ reduce production expr1 -> NUM
-- On LBRACE_ reduce production expr1 -> NUM
-- On INDUCTIVE reduce production expr1 -> NUM
-- On IN reduce production expr1 -> NUM
-- On IDENT reduce production expr1 -> NUM
-- On FUNCTION reduce production expr1 -> NUM
-- On FIXPOINT reduce production expr1 -> NUM
-- On FALSE reduce production expr1 -> NUM
-- On EQ_GT_ reduce production expr1 -> NUM
-- On EQ_ reduce production expr1 -> NUM
-- On EOF reduce production expr1 -> NUM
-- On ENDPROOF reduce production expr1 -> NUM
-- On END reduce production expr1 -> NUM
-- On ELSE reduce production expr1 -> NUM
-- On DEPENDS reduce production expr1 -> NUM
-- On DEFINITION reduce production expr1 -> NUM
-- On DASH_GT_ reduce production expr1 -> NUM
-- On COMMA_ reduce production expr1 -> NUM
-- On COLON_EQ_ reduce production expr1 -> NUM
-- On BAR_ reduce production expr1 -> NUM
-- On BACKSL_SLASH_ reduce production expr1 -> NUM

State 5:
## Known stack suffix:
## MATCH
## LR(1) items:
expr -> MATCH . expr WITH pat_expr_list END [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
## Transitions:
-- On TRUE shift to state 1
-- On TILDE_ shift to state 2
-- On STRING shift to state 3
-- On NUM shift to state 4
-- On MATCH shift to state 5
-- On LPAREN_ shift to state 6
-- On LET shift to state 7
-- On IF shift to state 36
-- On IDENT shift to state 37
-- On FUN shift to state 38
-- On FORALL shift to state 49
-- On FALSE shift to state 54
-- On EXISTS shift to state 55
-- On AROBAS_ shift to state 58
-- On expr1 shift to state 63
-- On expr shift to state 131
## Reductions:

State 6:
## Known stack suffix:
## LPAREN_
## LR(1) items:
expr1 -> LPAREN_ . expr comma_expr_list RPAREN_ [ WITH TRUE THEN STRING STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER NUM MUSTUSE LT_GT_ LT_DASH_GT_ LPAREN_ LBRACE_ INDUCTIVE IN IDENT FUNCTION FIXPOINT FALSE EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr1 -> LPAREN_ . expr STAR_ expr RPAREN_ [ WITH TRUE THEN STRING STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER NUM MUSTUSE LT_GT_ LT_DASH_GT_ LPAREN_ LBRACE_ INDUCTIVE IN IDENT FUNCTION FIXPOINT FALSE EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr1 -> LPAREN_ . expr PERCENT_ IDENT RPAREN_ [ WITH TRUE THEN STRING STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER NUM MUSTUSE LT_GT_ LT_DASH_GT_ LPAREN_ LBRACE_ INDUCTIVE IN IDENT FUNCTION FIXPOINT FALSE EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr1 -> LPAREN_ . expr RPAREN_ [ WITH TRUE THEN STRING STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER NUM MUSTUSE LT_GT_ LT_DASH_GT_ LPAREN_ LBRACE_ INDUCTIVE IN IDENT FUNCTION FIXPOINT FALSE EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
## Transitions:
-- On TRUE shift to state 1
-- On TILDE_ shift to state 2
-- On STRING shift to state 3
-- On NUM shift to state 4
-- On MATCH shift to state 5
-- On LPAREN_ shift to state 6
-- On LET shift to state 7
-- On IF shift to state 36
-- On IDENT shift to state 37
-- On FUN shift to state 38
-- On FORALL shift to state 49
-- On FALSE shift to state 54
-- On EXISTS shift to state 55
-- On AROBAS_ shift to state 58
-- On expr1 shift to state 63
-- On expr shift to state 118
## Reductions:

State 7:
## Known stack suffix:
## LET
## LR(1) items:
expr -> LET . fix IN expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> LET . IDENT COLON_EQ_ expr IN expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> LET . LPAREN_ IDENT COLON_ junk RPAREN_ COLON_EQ_ expr IN expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> LET . IDENT COLON_ junk COLON_EQ_ expr IN expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
## Transitions:
-- On LPAREN_ shift to state 8
-- On IDENT shift to state 93
-- On FIX shift to state 104
-- On fix shift to state 115
## Reductions:

State 8:
## Known stack suffix:
## LET LPAREN_
## LR(1) items:
expr -> LET LPAREN_ . IDENT COLON_ junk RPAREN_ COLON_EQ_ expr IN expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
## Transitions:
-- On IDENT shift to state 9
## Reductions:

State 9:
## Known stack suffix:
## LET LPAREN_ IDENT
## LR(1) items:
expr -> LET LPAREN_ IDENT . COLON_ junk RPAREN_ COLON_EQ_ expr IN expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
## Transitions:
-- On COLON_ shift to state 10
## Reductions:

State 10:
## Known stack suffix:
## LET LPAREN_ IDENT COLON_
## LR(1) items:
expr -> LET LPAREN_ IDENT COLON_ . junk RPAREN_ COLON_EQ_ expr IN expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
## Transitions:
-- On STAR_ shift to state 11
-- On PERIOD_LPAREN_ shift to state 12
-- On PERIOD_ shift to state 13
-- On PERCENT_ shift to state 14
-- On NUM shift to state 15
-- On LPAREN_RPAREN_ shift to state 16
-- On LPAREN_ shift to state 17
-- On IDENT shift to state 18
-- On COLON_ shift to state 19
-- On junk shift to state 33
## Reductions:
-- On RPAREN_ reduce production junk ->

State 11:
## Known stack suffix:
## STAR_
## LR(1) items:
junk -> STAR_ . junk [ RPAREN_ COLON_EQ_ ]
## Transitions:
-- On STAR_ shift to state 11
-- On PERIOD_LPAREN_ shift to state 12
-- On PERIOD_ shift to state 13
-- On PERCENT_ shift to state 14
-- On NUM shift to state 15
-- On LPAREN_RPAREN_ shift to state 16
-- On LPAREN_ shift to state 17
-- On IDENT shift to state 18
-- On COLON_ shift to state 19
-- On junk shift to state 32
## Reductions:
-- On RPAREN_ reduce production junk ->
-- On COLON_EQ_ reduce production junk ->

State 12:
## Known stack suffix:
## PERIOD_LPAREN_
## LR(1) items:
junk -> PERIOD_LPAREN_ . junk RPAREN_ junk [ RPAREN_ COLON_EQ_ ]
## Transitions:
-- On STAR_ shift to state 11
-- On PERIOD_LPAREN_ shift to state 12
-- On PERIOD_ shift to state 13
-- On PERCENT_ shift to state 14
-- On NUM shift to state 15
-- On LPAREN_RPAREN_ shift to state 16
-- On LPAREN_ shift to state 17
-- On IDENT shift to state 18
-- On COLON_ shift to state 19
-- On junk shift to state 29
## Reductions:
-- On RPAREN_ reduce production junk ->

State 13:
## Known stack suffix:
## PERIOD_
## LR(1) items:
junk -> PERIOD_ . junk [ RPAREN_ COLON_EQ_ ]
## Transitions:
-- On STAR_ shift to state 11
-- On PERIOD_LPAREN_ shift to state 12
-- On PERIOD_ shift to state 13
-- On PERCENT_ shift to state 14
-- On NUM shift to state 15
-- On LPAREN_RPAREN_ shift to state 16
-- On LPAREN_ shift to state 17
-- On IDENT shift to state 18
-- On COLON_ shift to state 19
-- On junk shift to state 28
## Reductions:
-- On RPAREN_ reduce production junk ->
-- On COLON_EQ_ reduce production junk ->

State 14:
## Known stack suffix:
## PERCENT_
## LR(1) items:
junk -> PERCENT_ . junk [ RPAREN_ COLON_EQ_ ]
## Transitions:
-- On STAR_ shift to state 11
-- On PERIOD_LPAREN_ shift to state 12
-- On PERIOD_ shift to state 13
-- On PERCENT_ shift to state 14
-- On NUM shift to state 15
-- On LPAREN_RPAREN_ shift to state 16
-- On LPAREN_ shift to state 17
-- On IDENT shift to state 18
-- On COLON_ shift to state 19
-- On junk shift to state 27
## Reductions:
-- On RPAREN_ reduce production junk ->
-- On COLON_EQ_ reduce production junk ->

State 15:
## Known stack suffix:
## NUM
## LR(1) items:
junk -> NUM . junk [ RPAREN_ COLON_EQ_ ]
## Transitions:
-- On STAR_ shift to state 11
-- On PERIOD_LPAREN_ shift to state 12
-- On PERIOD_ shift to state 13
-- On PERCENT_ shift to state 14
-- On NUM shift to state 15
-- On LPAREN_RPAREN_ shift to state 16
-- On LPAREN_ shift to state 17
-- On IDENT shift to state 18
-- On COLON_ shift to state 19
-- On junk shift to state 26
## Reductions:
-- On RPAREN_ reduce production junk ->
-- On COLON_EQ_ reduce production junk ->

State 16:
## Known stack suffix:
## LPAREN_RPAREN_
## LR(1) items:
junk -> LPAREN_RPAREN_ . junk [ RPAREN_ COLON_EQ_ ]
## Transitions:
-- On STAR_ shift to state 11
-- On PERIOD_LPAREN_ shift to state 12
-- On PERIOD_ shift to state 13
-- On PERCENT_ shift to state 14
-- On NUM shift to state 15
-- On LPAREN_RPAREN_ shift to state 16
-- On LPAREN_ shift to state 17
-- On IDENT shift to state 18
-- On COLON_ shift to state 19
-- On junk shift to state 25
## Reductions:
-- On RPAREN_ reduce production junk ->
-- On COLON_EQ_ reduce production junk ->

State 17:
## Known stack suffix:
## LPAREN_
## LR(1) items:
junk -> LPAREN_ . junk RPAREN_ junk [ RPAREN_ COLON_EQ_ ]
## Transitions:
-- On STAR_ shift to state 11
-- On PERIOD_LPAREN_ shift to state 12
-- On PERIOD_ shift to state 13
-- On PERCENT_ shift to state 14
-- On NUM shift to state 15
-- On LPAREN_RPAREN_ shift to state 16
-- On LPAREN_ shift to state 17
-- On IDENT shift to state 18
-- On COLON_ shift to state 19
-- On junk shift to state 22
## Reductions:
-- On RPAREN_ reduce production junk ->

State 18:
## Known stack suffix:
## IDENT
## LR(1) items:
junk -> IDENT . junk [ RPAREN_ COLON_EQ_ ]
## Transitions:
-- On STAR_ shift to state 11
-- On PERIOD_LPAREN_ shift to state 12
-- On PERIOD_ shift to state 13
-- On PERCENT_ shift to state 14
-- On NUM shift to state 15
-- On LPAREN_RPAREN_ shift to state 16
-- On LPAREN_ shift to state 17
-- On IDENT shift to state 18
-- On COLON_ shift to state 19
-- On junk shift to state 21
## Reductions:
-- On RPAREN_ reduce production junk ->
-- On COLON_EQ_ reduce production junk ->

State 19:
## Known stack suffix:
## COLON_
## LR(1) items:
junk -> COLON_ . junk [ RPAREN_ COLON_EQ_ ]
## Transitions:
-- On STAR_ shift to state 11
-- On PERIOD_LPAREN_ shift to state 12
-- On PERIOD_ shift to state 13
-- On PERCENT_ shift to state 14
-- On NUM shift to state 15
-- On LPAREN_RPAREN_ shift to state 16
-- On LPAREN_ shift to state 17
-- On IDENT shift to state 18
-- On COLON_ shift to state 19
-- On junk shift to state 20
## Reductions:
-- On RPAREN_ reduce production junk ->
-- On COLON_EQ_ reduce production junk ->

State 20:
## Known stack suffix:
## COLON_ junk
## LR(1) items:
junk -> COLON_ junk . [ RPAREN_ COLON_EQ_ ]
## Transitions:
## Reductions:
-- On RPAREN_ reduce production junk -> COLON_ junk
-- On COLON_EQ_ reduce production junk -> COLON_ junk

State 21:
## Known stack suffix:
## IDENT junk
## LR(1) items:
junk -> IDENT junk . [ RPAREN_ COLON_EQ_ ]
## Transitions:
## Reductions:
-- On RPAREN_ reduce production junk -> IDENT junk
-- On COLON_EQ_ reduce production junk -> IDENT junk

State 22:
## Known stack suffix:
## LPAREN_ junk
## LR(1) items:
junk -> LPAREN_ junk . RPAREN_ junk [ RPAREN_ COLON_EQ_ ]
## Transitions:
-- On RPAREN_ shift to state 23
## Reductions:

State 23:
## Known stack suffix:
## LPAREN_ junk RPAREN_
## LR(1) items:
junk -> LPAREN_ junk RPAREN_ . junk [ RPAREN_ COLON_EQ_ ]
## Transitions:
-- On STAR_ shift to state 11
-- On PERIOD_LPAREN_ shift to state 12
-- On PERIOD_ shift to state 13
-- On PERCENT_ shift to state 14
-- On NUM shift to state 15
-- On LPAREN_RPAREN_ shift to state 16
-- On LPAREN_ shift to state 17
-- On IDENT shift to state 18
-- On COLON_ shift to state 19
-- On junk shift to state 24
## Reductions:
-- On RPAREN_ reduce production junk ->
-- On COLON_EQ_ reduce production junk ->

State 24:
## Known stack suffix:
## LPAREN_ junk RPAREN_ junk
## LR(1) items:
junk -> LPAREN_ junk RPAREN_ junk . [ RPAREN_ COLON_EQ_ ]
## Transitions:
## Reductions:
-- On RPAREN_ reduce production junk -> LPAREN_ junk RPAREN_ junk
-- On COLON_EQ_ reduce production junk -> LPAREN_ junk RPAREN_ junk

State 25:
## Known stack suffix:
## LPAREN_RPAREN_ junk
## LR(1) items:
junk -> LPAREN_RPAREN_ junk . [ RPAREN_ COLON_EQ_ ]
## Transitions:
## Reductions:
-- On RPAREN_ reduce production junk -> LPAREN_RPAREN_ junk
-- On COLON_EQ_ reduce production junk -> LPAREN_RPAREN_ junk

State 26:
## Known stack suffix:
## NUM junk
## LR(1) items:
junk -> NUM junk . [ RPAREN_ COLON_EQ_ ]
## Transitions:
## Reductions:
-- On RPAREN_ reduce production junk -> NUM junk
-- On COLON_EQ_ reduce production junk -> NUM junk

State 27:
## Known stack suffix:
## PERCENT_ junk
## LR(1) items:
junk -> PERCENT_ junk . [ RPAREN_ COLON_EQ_ ]
## Transitions:
## Reductions:
-- On RPAREN_ reduce production junk -> PERCENT_ junk
-- On COLON_EQ_ reduce production junk -> PERCENT_ junk

State 28:
## Known stack suffix:
## PERIOD_ junk
## LR(1) items:
junk -> PERIOD_ junk . [ RPAREN_ COLON_EQ_ ]
## Transitions:
## Reductions:
-- On RPAREN_ reduce production junk -> PERIOD_ junk
-- On COLON_EQ_ reduce production junk -> PERIOD_ junk

State 29:
## Known stack suffix:
## PERIOD_LPAREN_ junk
## LR(1) items:
junk -> PERIOD_LPAREN_ junk . RPAREN_ junk [ RPAREN_ COLON_EQ_ ]
## Transitions:
-- On RPAREN_ shift to state 30
## Reductions:

State 30:
## Known stack suffix:
## PERIOD_LPAREN_ junk RPAREN_
## LR(1) items:
junk -> PERIOD_LPAREN_ junk RPAREN_ . junk [ RPAREN_ COLON_EQ_ ]
## Transitions:
-- On STAR_ shift to state 11
-- On PERIOD_LPAREN_ shift to state 12
-- On PERIOD_ shift to state 13
-- On PERCENT_ shift to state 14
-- On NUM shift to state 15
-- On LPAREN_RPAREN_ shift to state 16
-- On LPAREN_ shift to state 17
-- On IDENT shift to state 18
-- On COLON_ shift to state 19
-- On junk shift to state 31
## Reductions:
-- On RPAREN_ reduce production junk ->
-- On COLON_EQ_ reduce production junk ->

State 31:
## Known stack suffix:
## PERIOD_LPAREN_ junk RPAREN_ junk
## LR(1) items:
junk -> PERIOD_LPAREN_ junk RPAREN_ junk . [ RPAREN_ COLON_EQ_ ]
## Transitions:
## Reductions:
-- On RPAREN_ reduce production junk -> PERIOD_LPAREN_ junk RPAREN_ junk
-- On COLON_EQ_ reduce production junk -> PERIOD_LPAREN_ junk RPAREN_ junk

State 32:
## Known stack suffix:
## STAR_ junk
## LR(1) items:
junk -> STAR_ junk . [ RPAREN_ COLON_EQ_ ]
## Transitions:
## Reductions:
-- On RPAREN_ reduce production junk -> STAR_ junk
-- On COLON_EQ_ reduce production junk -> STAR_ junk

State 33:
## Known stack suffix:
## LET LPAREN_ IDENT COLON_ junk
## LR(1) items:
expr -> LET LPAREN_ IDENT COLON_ junk . RPAREN_ COLON_EQ_ expr IN expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
## Transitions:
-- On RPAREN_ shift to state 34
## Reductions:

State 34:
## Known stack suffix:
## LET LPAREN_ IDENT COLON_ junk RPAREN_
## LR(1) items:
expr -> LET LPAREN_ IDENT COLON_ junk RPAREN_ . COLON_EQ_ expr IN expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
## Transitions:
-- On COLON_EQ_ shift to state 35
## Reductions:

State 35:
## Known stack suffix:
## LET LPAREN_ IDENT COLON_ junk RPAREN_ COLON_EQ_
## LR(1) items:
expr -> LET LPAREN_ IDENT COLON_ junk RPAREN_ COLON_EQ_ . expr IN expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
## Transitions:
-- On TRUE shift to state 1
-- On TILDE_ shift to state 2
-- On STRING shift to state 3
-- On NUM shift to state 4
-- On MATCH shift to state 5
-- On LPAREN_ shift to state 6
-- On LET shift to state 7
-- On IF shift to state 36
-- On IDENT shift to state 37
-- On FUN shift to state 38
-- On FORALL shift to state 49
-- On FALSE shift to state 54
-- On EXISTS shift to state 55
-- On AROBAS_ shift to state 58
-- On expr1 shift to state 63
-- On expr shift to state 90
## Reductions:

State 36:
## Known stack suffix:
## IF
## LR(1) items:
expr -> IF . expr THEN expr ELSE expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
## Transitions:
-- On TRUE shift to state 1
-- On TILDE_ shift to state 2
-- On STRING shift to state 3
-- On NUM shift to state 4
-- On MATCH shift to state 5
-- On LPAREN_ shift to state 6
-- On LET shift to state 7
-- On IF shift to state 36
-- On IDENT shift to state 37
-- On FUN shift to state 38
-- On FORALL shift to state 49
-- On FALSE shift to state 54
-- On EXISTS shift to state 55
-- On AROBAS_ shift to state 58
-- On expr1 shift to state 63
-- On expr shift to state 85
## Reductions:

State 37:
## Known stack suffix:
## IDENT
## LR(1) items:
expr1 -> IDENT . [ WITH TRUE THEN STRING STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER NUM MUSTUSE LT_GT_ LT_DASH_GT_ LPAREN_ LBRACE_ INDUCTIVE IN IDENT FUNCTION FIXPOINT FALSE EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
## Transitions:
## Reductions:
-- On WITH reduce production expr1 -> IDENT
-- On TRUE reduce production expr1 -> IDENT
-- On THEN reduce production expr1 -> IDENT
-- On STRING reduce production expr1 -> IDENT
-- On STAR_ reduce production expr1 -> IDENT
-- On SLASH_BACKSL_ reduce production expr1 -> IDENT
-- On RPAREN_ reduce production expr1 -> IDENT
-- On RBRACE_ reduce production expr1 -> IDENT
-- On PERIOD_ reduce production expr1 -> IDENT
-- On PERCENT_ reduce production expr1 -> IDENT
-- On PARAMETER reduce production expr1 -> IDENT
-- On NUM reduce production expr1 -> IDENT
-- On MUSTUSE reduce production expr1 -> IDENT
-- On LT_GT_ reduce production expr1 -> IDENT
-- On LT_DASH_GT_ reduce production expr1 -> IDENT
-- On LPAREN_ reduce production expr1 -> IDENT
-- On LBRACE_ reduce production expr1 -> IDENT
-- On INDUCTIVE reduce production expr1 -> IDENT
-- On IN reduce production expr1 -> IDENT
-- On IDENT reduce production expr1 -> IDENT
-- On FUNCTION reduce production expr1 -> IDENT
-- On FIXPOINT reduce production expr1 -> IDENT
-- On FALSE reduce production expr1 -> IDENT
-- On EQ_GT_ reduce production expr1 -> IDENT
-- On EQ_ reduce production expr1 -> IDENT
-- On EOF reduce production expr1 -> IDENT
-- On ENDPROOF reduce production expr1 -> IDENT
-- On END reduce production expr1 -> IDENT
-- On ELSE reduce production expr1 -> IDENT
-- On DEPENDS reduce production expr1 -> IDENT
-- On DEFINITION reduce production expr1 -> IDENT
-- On DASH_GT_ reduce production expr1 -> IDENT
-- On COMMA_ reduce production expr1 -> IDENT
-- On COLON_EQ_ reduce production expr1 -> IDENT
-- On BAR_ reduce production expr1 -> IDENT
-- On BACKSL_SLASH_ reduce production expr1 -> IDENT

State 38:
## Known stack suffix:
## FUN
## LR(1) items:
expr -> FUN . bindings EQ_GT_ expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
## Transitions:
-- On LPAREN_ shift to state 39
-- On IDENT shift to state 50
-- On simplebinding shift to state 51
-- On idlist shift to state 47
-- On bindings shift to state 82
-- On binding_list shift to state 78
## Reductions:
-- On EQ_GT_ reduce production binding_list ->
-- On COLON_ reduce production idlist ->

State 39:
## Known stack suffix:
## LPAREN_
## LR(1) items:
binding_list -> LPAREN_ . simplebinding RPAREN_ binding_list [ LBRACE_ EQ_GT_ COMMA_ COLON_ ]
## Transitions:
-- On IDENT shift to state 40
-- On simplebinding shift to state 42
-- On idlist shift to state 47
## Reductions:
-- On COLON_ reduce production idlist ->

State 40:
## Known stack suffix:
## IDENT
## LR(1) items:
idlist -> IDENT . idlist [ RPAREN_ PERIOD_ EQ_GT_ DASH_GT_ COLON_ BAR_ ]
## Transitions:
-- On IDENT shift to state 40
-- On idlist shift to state 41
## Reductions:
-- On RPAREN_ reduce production idlist ->
-- On PERIOD_ reduce production idlist ->
-- On EQ_GT_ reduce production idlist ->
-- On DASH_GT_ reduce production idlist ->
-- On COLON_ reduce production idlist ->
-- On BAR_ reduce production idlist ->

State 41:
## Known stack suffix:
## IDENT idlist
## LR(1) items:
idlist -> IDENT idlist . [ RPAREN_ PERIOD_ EQ_GT_ DASH_GT_ COLON_ BAR_ ]
## Transitions:
## Reductions:
-- On RPAREN_ reduce production idlist -> IDENT idlist
-- On PERIOD_ reduce production idlist -> IDENT idlist
-- On EQ_GT_ reduce production idlist -> IDENT idlist
-- On DASH_GT_ reduce production idlist -> IDENT idlist
-- On COLON_ reduce production idlist -> IDENT idlist
-- On BAR_ reduce production idlist -> IDENT idlist

State 42:
## Known stack suffix:
## LPAREN_ simplebinding
## LR(1) items:
binding_list -> LPAREN_ simplebinding . RPAREN_ binding_list [ LBRACE_ EQ_GT_ COMMA_ COLON_ ]
## Transitions:
-- On RPAREN_ shift to state 43
## Reductions:

State 43:
## Known stack suffix:
## LPAREN_ simplebinding RPAREN_
## LR(1) items:
binding_list -> LPAREN_ simplebinding RPAREN_ . binding_list [ LBRACE_ EQ_GT_ COMMA_ COLON_ ]
## Transitions:
-- On LPAREN_ shift to state 39
-- On IDENT shift to state 44
-- On binding_list shift to state 46
## Reductions:
-- On LBRACE_ reduce production binding_list ->
-- On EQ_GT_ reduce production binding_list ->
-- On COMMA_ reduce production binding_list ->
-- On COLON_ reduce production binding_list ->

State 44:
## Known stack suffix:
## IDENT
## LR(1) items:
binding_list -> IDENT . binding_list [ LBRACE_ EQ_GT_ COMMA_ COLON_ ]
## Transitions:
-- On LPAREN_ shift to state 39
-- On IDENT shift to state 44
-- On binding_list shift to state 45
## Reductions:
-- On LBRACE_ reduce production binding_list ->
-- On EQ_GT_ reduce production binding_list ->
-- On COMMA_ reduce production binding_list ->
-- On COLON_ reduce production binding_list ->

State 45:
## Known stack suffix:
## IDENT binding_list
## LR(1) items:
binding_list -> IDENT binding_list . [ LBRACE_ EQ_GT_ COMMA_ COLON_ ]
## Transitions:
## Reductions:
-- On LBRACE_ reduce production binding_list -> IDENT binding_list
-- On EQ_GT_ reduce production binding_list -> IDENT binding_list
-- On COMMA_ reduce production binding_list -> IDENT binding_list
-- On COLON_ reduce production binding_list -> IDENT binding_list

State 46:
## Known stack suffix:
## LPAREN_ simplebinding RPAREN_ binding_list
## LR(1) items:
binding_list -> LPAREN_ simplebinding RPAREN_ binding_list . [ LBRACE_ EQ_GT_ COMMA_ COLON_ ]
## Transitions:
## Reductions:
-- On LBRACE_ reduce production binding_list -> LPAREN_ simplebinding RPAREN_ binding_list
-- On EQ_GT_ reduce production binding_list -> LPAREN_ simplebinding RPAREN_ binding_list
-- On COMMA_ reduce production binding_list -> LPAREN_ simplebinding RPAREN_ binding_list
-- On COLON_ reduce production binding_list -> LPAREN_ simplebinding RPAREN_ binding_list

State 47:
## Known stack suffix:
## idlist
## LR(1) items:
simplebinding -> idlist . COLON_ typ [ RPAREN_ LBRACE_ EQ_GT_ COMMA_ ]
## Transitions:
-- On COLON_ shift to state 48
## Reductions:

State 48:
## Known stack suffix:
## idlist COLON_
## LR(1) items:
simplebinding -> idlist COLON_ . typ [ RPAREN_ LBRACE_ EQ_GT_ COMMA_ ]
## Transitions:
-- On TRUE shift to state 1
-- On TILDE_ shift to state 2
-- On STRING shift to state 3
-- On NUM shift to state 4
-- On MATCH shift to state 5
-- On LPAREN_ shift to state 6
-- On LET shift to state 7
-- On IF shift to state 36
-- On IDENT shift to state 37
-- On FUN shift to state 38
-- On FORALL shift to state 49
-- On FALSE shift to state 54
-- On EXISTS shift to state 55
-- On AROBAS_ shift to state 58
-- On typ shift to state 80
-- On expr1 shift to state 63
-- On expr shift to state 81
## Reductions:

State 49:
## Known stack suffix:
## FORALL
## LR(1) items:
expr -> FORALL . bindings COMMA_ expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
## Transitions:
-- On LPAREN_ shift to state 39
-- On IDENT shift to state 50
-- On simplebinding shift to state 51
-- On idlist shift to state 47
-- On bindings shift to state 52
-- On binding_list shift to state 78
## Reductions:
-- On COMMA_ reduce production binding_list ->
-- On COLON_ reduce production idlist ->

State 50:
## Known stack suffix:
## IDENT
## LR(1) items:
binding_list -> IDENT . binding_list [ LBRACE_ EQ_GT_ COMMA_ ]
idlist -> IDENT . idlist [ COLON_ ]
## Transitions:
-- On LPAREN_ shift to state 39
-- On IDENT shift to state 50
-- On idlist shift to state 41
-- On binding_list shift to state 45
## Reductions:
-- On LBRACE_ reduce production binding_list ->
-- On EQ_GT_ reduce production binding_list ->
-- On COMMA_ reduce production binding_list ->
-- On COLON_ reduce production idlist ->

State 51:
## Known stack suffix:
## simplebinding
## LR(1) items:
bindings -> simplebinding . [ LBRACE_ EQ_GT_ COMMA_ ]
## Transitions:
## Reductions:
-- On LBRACE_ reduce production bindings -> simplebinding
-- On EQ_GT_ reduce production bindings -> simplebinding
-- On COMMA_ reduce production bindings -> simplebinding

State 52:
## Known stack suffix:
## FORALL bindings
## LR(1) items:
expr -> FORALL bindings . COMMA_ expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
## Transitions:
-- On COMMA_ shift to state 53
## Reductions:

State 53:
## Known stack suffix:
## FORALL bindings COMMA_
## LR(1) items:
expr -> FORALL bindings COMMA_ . expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
## Transitions:
-- On TRUE shift to state 1
-- On TILDE_ shift to state 2
-- On STRING shift to state 3
-- On NUM shift to state 4
-- On MATCH shift to state 5
-- On LPAREN_ shift to state 6
-- On LET shift to state 7
-- On IF shift to state 36
-- On IDENT shift to state 37
-- On FUN shift to state 38
-- On FORALL shift to state 49
-- On FALSE shift to state 54
-- On EXISTS shift to state 55
-- On AROBAS_ shift to state 58
-- On expr1 shift to state 63
-- On expr shift to state 79
## Reductions:

State 54:
## Known stack suffix:
## FALSE
## LR(1) items:
expr1 -> FALSE . [ WITH TRUE THEN STRING STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER NUM MUSTUSE LT_GT_ LT_DASH_GT_ LPAREN_ LBRACE_ INDUCTIVE IN IDENT FUNCTION FIXPOINT FALSE EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
## Transitions:
## Reductions:
-- On WITH reduce production expr1 -> FALSE
-- On TRUE reduce production expr1 -> FALSE
-- On THEN reduce production expr1 -> FALSE
-- On STRING reduce production expr1 -> FALSE
-- On STAR_ reduce production expr1 -> FALSE
-- On SLASH_BACKSL_ reduce production expr1 -> FALSE
-- On RPAREN_ reduce production expr1 -> FALSE
-- On RBRACE_ reduce production expr1 -> FALSE
-- On PERIOD_ reduce production expr1 -> FALSE
-- On PERCENT_ reduce production expr1 -> FALSE
-- On PARAMETER reduce production expr1 -> FALSE
-- On NUM reduce production expr1 -> FALSE
-- On MUSTUSE reduce production expr1 -> FALSE
-- On LT_GT_ reduce production expr1 -> FALSE
-- On LT_DASH_GT_ reduce production expr1 -> FALSE
-- On LPAREN_ reduce production expr1 -> FALSE
-- On LBRACE_ reduce production expr1 -> FALSE
-- On INDUCTIVE reduce production expr1 -> FALSE
-- On IN reduce production expr1 -> FALSE
-- On IDENT reduce production expr1 -> FALSE
-- On FUNCTION reduce production expr1 -> FALSE
-- On FIXPOINT reduce production expr1 -> FALSE
-- On FALSE reduce production expr1 -> FALSE
-- On EQ_GT_ reduce production expr1 -> FALSE
-- On EQ_ reduce production expr1 -> FALSE
-- On EOF reduce production expr1 -> FALSE
-- On ENDPROOF reduce production expr1 -> FALSE
-- On END reduce production expr1 -> FALSE
-- On ELSE reduce production expr1 -> FALSE
-- On DEPENDS reduce production expr1 -> FALSE
-- On DEFINITION reduce production expr1 -> FALSE
-- On DASH_GT_ reduce production expr1 -> FALSE
-- On COMMA_ reduce production expr1 -> FALSE
-- On COLON_EQ_ reduce production expr1 -> FALSE
-- On BAR_ reduce production expr1 -> FALSE
-- On BACKSL_SLASH_ reduce production expr1 -> FALSE

State 55:
## Known stack suffix:
## EXISTS
## LR(1) items:
expr -> EXISTS . bindings COMMA_ expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
## Transitions:
-- On LPAREN_ shift to state 39
-- On IDENT shift to state 50
-- On simplebinding shift to state 51
-- On idlist shift to state 47
-- On bindings shift to state 56
-- On binding_list shift to state 78
## Reductions:
-- On COMMA_ reduce production binding_list ->
-- On COLON_ reduce production idlist ->

State 56:
## Known stack suffix:
## EXISTS bindings
## LR(1) items:
expr -> EXISTS bindings . COMMA_ expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
## Transitions:
-- On COMMA_ shift to state 57
## Reductions:

State 57:
## Known stack suffix:
## EXISTS bindings COMMA_
## LR(1) items:
expr -> EXISTS bindings COMMA_ . expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
## Transitions:
-- On TRUE shift to state 1
-- On TILDE_ shift to state 2
-- On STRING shift to state 3
-- On NUM shift to state 4
-- On MATCH shift to state 5
-- On LPAREN_ shift to state 6
-- On LET shift to state 7
-- On IF shift to state 36
-- On IDENT shift to state 37
-- On FUN shift to state 38
-- On FORALL shift to state 49
-- On FALSE shift to state 54
-- On EXISTS shift to state 55
-- On AROBAS_ shift to state 58
-- On expr1 shift to state 63
-- On expr shift to state 65
## Reductions:

State 58:
## Known stack suffix:
## AROBAS_
## LR(1) items:
expr -> AROBAS_ . IDENT expr1_list [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> AROBAS_ . IDENT [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
## Transitions:
-- On IDENT shift to state 59
## Reductions:

State 59:
## Known stack suffix:
## AROBAS_ IDENT
## LR(1) items:
expr -> AROBAS_ IDENT . expr1_list [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> AROBAS_ IDENT . [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
## Transitions:
-- On TRUE shift to state 1
-- On STRING shift to state 3
-- On NUM shift to state 4
-- On LPAREN_ shift to state 6
-- On IDENT shift to state 37
-- On FALSE shift to state 54
-- On expr1_list shift to state 60
-- On expr1 shift to state 61
## Reductions:
-- On WITH reduce production expr -> AROBAS_ IDENT
-- On THEN reduce production expr -> AROBAS_ IDENT
-- On STAR_ reduce production expr -> AROBAS_ IDENT
-- On SLASH_BACKSL_ reduce production expr -> AROBAS_ IDENT
-- On RPAREN_ reduce production expr -> AROBAS_ IDENT
-- On RBRACE_ reduce production expr -> AROBAS_ IDENT
-- On PERIOD_ reduce production expr -> AROBAS_ IDENT
-- On PERCENT_ reduce production expr -> AROBAS_ IDENT
-- On PARAMETER reduce production expr -> AROBAS_ IDENT
-- On MUSTUSE reduce production expr -> AROBAS_ IDENT
-- On LT_GT_ reduce production expr -> AROBAS_ IDENT
-- On LT_DASH_GT_ reduce production expr -> AROBAS_ IDENT
-- On LBRACE_ reduce production expr -> AROBAS_ IDENT
-- On INDUCTIVE reduce production expr -> AROBAS_ IDENT
-- On IN reduce production expr -> AROBAS_ IDENT
-- On FUNCTION reduce production expr -> AROBAS_ IDENT
-- On FIXPOINT reduce production expr -> AROBAS_ IDENT
-- On EQ_GT_ reduce production expr -> AROBAS_ IDENT
-- On EQ_ reduce production expr -> AROBAS_ IDENT
-- On EOF reduce production expr -> AROBAS_ IDENT
-- On ENDPROOF reduce production expr -> AROBAS_ IDENT
-- On END reduce production expr -> AROBAS_ IDENT
-- On ELSE reduce production expr -> AROBAS_ IDENT
-- On DEPENDS reduce production expr -> AROBAS_ IDENT
-- On DEFINITION reduce production expr -> AROBAS_ IDENT
-- On DASH_GT_ reduce production expr -> AROBAS_ IDENT
-- On COMMA_ reduce production expr -> AROBAS_ IDENT
-- On COLON_EQ_ reduce production expr -> AROBAS_ IDENT
-- On BAR_ reduce production expr -> AROBAS_ IDENT
-- On BACKSL_SLASH_ reduce production expr -> AROBAS_ IDENT

State 60:
## Known stack suffix:
## AROBAS_ IDENT expr1_list
## LR(1) items:
expr -> AROBAS_ IDENT expr1_list . [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
## Transitions:
## Reductions:
-- On WITH reduce production expr -> AROBAS_ IDENT expr1_list
-- On THEN reduce production expr -> AROBAS_ IDENT expr1_list
-- On STAR_ reduce production expr -> AROBAS_ IDENT expr1_list
-- On SLASH_BACKSL_ reduce production expr -> AROBAS_ IDENT expr1_list
-- On RPAREN_ reduce production expr -> AROBAS_ IDENT expr1_list
-- On RBRACE_ reduce production expr -> AROBAS_ IDENT expr1_list
-- On PERIOD_ reduce production expr -> AROBAS_ IDENT expr1_list
-- On PERCENT_ reduce production expr -> AROBAS_ IDENT expr1_list
-- On PARAMETER reduce production expr -> AROBAS_ IDENT expr1_list
-- On MUSTUSE reduce production expr -> AROBAS_ IDENT expr1_list
-- On LT_GT_ reduce production expr -> AROBAS_ IDENT expr1_list
-- On LT_DASH_GT_ reduce production expr -> AROBAS_ IDENT expr1_list
-- On LBRACE_ reduce production expr -> AROBAS_ IDENT expr1_list
-- On INDUCTIVE reduce production expr -> AROBAS_ IDENT expr1_list
-- On IN reduce production expr -> AROBAS_ IDENT expr1_list
-- On FUNCTION reduce production expr -> AROBAS_ IDENT expr1_list
-- On FIXPOINT reduce production expr -> AROBAS_ IDENT expr1_list
-- On EQ_GT_ reduce production expr -> AROBAS_ IDENT expr1_list
-- On EQ_ reduce production expr -> AROBAS_ IDENT expr1_list
-- On EOF reduce production expr -> AROBAS_ IDENT expr1_list
-- On ENDPROOF reduce production expr -> AROBAS_ IDENT expr1_list
-- On END reduce production expr -> AROBAS_ IDENT expr1_list
-- On ELSE reduce production expr -> AROBAS_ IDENT expr1_list
-- On DEPENDS reduce production expr -> AROBAS_ IDENT expr1_list
-- On DEFINITION reduce production expr -> AROBAS_ IDENT expr1_list
-- On DASH_GT_ reduce production expr -> AROBAS_ IDENT expr1_list
-- On COMMA_ reduce production expr -> AROBAS_ IDENT expr1_list
-- On COLON_EQ_ reduce production expr -> AROBAS_ IDENT expr1_list
-- On BAR_ reduce production expr -> AROBAS_ IDENT expr1_list
-- On BACKSL_SLASH_ reduce production expr -> AROBAS_ IDENT expr1_list

State 61:
## Known stack suffix:
## expr1
## LR(1) items:
expr1_list -> expr1 . [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr1_list -> expr1 . expr1_list [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
## Transitions:
-- On TRUE shift to state 1
-- On STRING shift to state 3
-- On NUM shift to state 4
-- On LPAREN_ shift to state 6
-- On IDENT shift to state 37
-- On FALSE shift to state 54
-- On expr1_list shift to state 62
-- On expr1 shift to state 61
## Reductions:
-- On WITH reduce production expr1_list -> expr1
-- On THEN reduce production expr1_list -> expr1
-- On STAR_ reduce production expr1_list -> expr1
-- On SLASH_BACKSL_ reduce production expr1_list -> expr1
-- On RPAREN_ reduce production expr1_list -> expr1
-- On RBRACE_ reduce production expr1_list -> expr1
-- On PERIOD_ reduce production expr1_list -> expr1
-- On PERCENT_ reduce production expr1_list -> expr1
-- On PARAMETER reduce production expr1_list -> expr1
-- On MUSTUSE reduce production expr1_list -> expr1
-- On LT_GT_ reduce production expr1_list -> expr1
-- On LT_DASH_GT_ reduce production expr1_list -> expr1
-- On LBRACE_ reduce production expr1_list -> expr1
-- On INDUCTIVE reduce production expr1_list -> expr1
-- On IN reduce production expr1_list -> expr1
-- On FUNCTION reduce production expr1_list -> expr1
-- On FIXPOINT reduce production expr1_list -> expr1
-- On EQ_GT_ reduce production expr1_list -> expr1
-- On EQ_ reduce production expr1_list -> expr1
-- On EOF reduce production expr1_list -> expr1
-- On ENDPROOF reduce production expr1_list -> expr1
-- On END reduce production expr1_list -> expr1
-- On ELSE reduce production expr1_list -> expr1
-- On DEPENDS reduce production expr1_list -> expr1
-- On DEFINITION reduce production expr1_list -> expr1
-- On DASH_GT_ reduce production expr1_list -> expr1
-- On COMMA_ reduce production expr1_list -> expr1
-- On COLON_EQ_ reduce production expr1_list -> expr1
-- On BAR_ reduce production expr1_list -> expr1
-- On BACKSL_SLASH_ reduce production expr1_list -> expr1

State 62:
## Known stack suffix:
## expr1 expr1_list
## LR(1) items:
expr1_list -> expr1 expr1_list . [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
## Transitions:
## Reductions:
-- On WITH reduce production expr1_list -> expr1 expr1_list
-- On THEN reduce production expr1_list -> expr1 expr1_list
-- On STAR_ reduce production expr1_list -> expr1 expr1_list
-- On SLASH_BACKSL_ reduce production expr1_list -> expr1 expr1_list
-- On RPAREN_ reduce production expr1_list -> expr1 expr1_list
-- On RBRACE_ reduce production expr1_list -> expr1 expr1_list
-- On PERIOD_ reduce production expr1_list -> expr1 expr1_list
-- On PERCENT_ reduce production expr1_list -> expr1 expr1_list
-- On PARAMETER reduce production expr1_list -> expr1 expr1_list
-- On MUSTUSE reduce production expr1_list -> expr1 expr1_list
-- On LT_GT_ reduce production expr1_list -> expr1 expr1_list
-- On LT_DASH_GT_ reduce production expr1_list -> expr1 expr1_list
-- On LBRACE_ reduce production expr1_list -> expr1 expr1_list
-- On INDUCTIVE reduce production expr1_list -> expr1 expr1_list
-- On IN reduce production expr1_list -> expr1 expr1_list
-- On FUNCTION reduce production expr1_list -> expr1 expr1_list
-- On FIXPOINT reduce production expr1_list -> expr1 expr1_list
-- On EQ_GT_ reduce production expr1_list -> expr1 expr1_list
-- On EQ_ reduce production expr1_list -> expr1 expr1_list
-- On EOF reduce production expr1_list -> expr1 expr1_list
-- On ENDPROOF reduce production expr1_list -> expr1 expr1_list
-- On END reduce production expr1_list -> expr1 expr1_list
-- On ELSE reduce production expr1_list -> expr1 expr1_list
-- On DEPENDS reduce production expr1_list -> expr1 expr1_list
-- On DEFINITION reduce production expr1_list -> expr1 expr1_list
-- On DASH_GT_ reduce production expr1_list -> expr1 expr1_list
-- On COMMA_ reduce production expr1_list -> expr1 expr1_list
-- On COLON_EQ_ reduce production expr1_list -> expr1 expr1_list
-- On BAR_ reduce production expr1_list -> expr1 expr1_list
-- On BACKSL_SLASH_ reduce production expr1_list -> expr1 expr1_list

State 63:
## Known stack suffix:
## expr1
## LR(1) items:
expr -> expr1 . expr1_list [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> expr1 . [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
## Transitions:
-- On TRUE shift to state 1
-- On STRING shift to state 3
-- On NUM shift to state 4
-- On LPAREN_ shift to state 6
-- On IDENT shift to state 37
-- On FALSE shift to state 54
-- On expr1_list shift to state 64
-- On expr1 shift to state 61
## Reductions:
-- On WITH reduce production expr -> expr1
-- On THEN reduce production expr -> expr1
-- On STAR_ reduce production expr -> expr1
-- On SLASH_BACKSL_ reduce production expr -> expr1
-- On RPAREN_ reduce production expr -> expr1
-- On RBRACE_ reduce production expr -> expr1
-- On PERIOD_ reduce production expr -> expr1
-- On PERCENT_ reduce production expr -> expr1
-- On PARAMETER reduce production expr -> expr1
-- On MUSTUSE reduce production expr -> expr1
-- On LT_GT_ reduce production expr -> expr1
-- On LT_DASH_GT_ reduce production expr -> expr1
-- On LBRACE_ reduce production expr -> expr1
-- On INDUCTIVE reduce production expr -> expr1
-- On IN reduce production expr -> expr1
-- On FUNCTION reduce production expr -> expr1
-- On FIXPOINT reduce production expr -> expr1
-- On EQ_GT_ reduce production expr -> expr1
-- On EQ_ reduce production expr -> expr1
-- On EOF reduce production expr -> expr1
-- On ENDPROOF reduce production expr -> expr1
-- On END reduce production expr -> expr1
-- On ELSE reduce production expr -> expr1
-- On DEPENDS reduce production expr -> expr1
-- On DEFINITION reduce production expr -> expr1
-- On DASH_GT_ reduce production expr -> expr1
-- On COMMA_ reduce production expr -> expr1
-- On COLON_EQ_ reduce production expr -> expr1
-- On BAR_ reduce production expr -> expr1
-- On BACKSL_SLASH_ reduce production expr -> expr1

State 64:
## Known stack suffix:
## expr1 expr1_list
## LR(1) items:
expr -> expr1 expr1_list . [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
## Transitions:
## Reductions:
-- On WITH reduce production expr -> expr1 expr1_list
-- On THEN reduce production expr -> expr1 expr1_list
-- On STAR_ reduce production expr -> expr1 expr1_list
-- On SLASH_BACKSL_ reduce production expr -> expr1 expr1_list
-- On RPAREN_ reduce production expr -> expr1 expr1_list
-- On RBRACE_ reduce production expr -> expr1 expr1_list
-- On PERIOD_ reduce production expr -> expr1 expr1_list
-- On PERCENT_ reduce production expr -> expr1 expr1_list
-- On PARAMETER reduce production expr -> expr1 expr1_list
-- On MUSTUSE reduce production expr -> expr1 expr1_list
-- On LT_GT_ reduce production expr -> expr1 expr1_list
-- On LT_DASH_GT_ reduce production expr -> expr1 expr1_list
-- On LBRACE_ reduce production expr -> expr1 expr1_list
-- On INDUCTIVE reduce production expr -> expr1 expr1_list
-- On IN reduce production expr -> expr1 expr1_list
-- On FUNCTION reduce production expr -> expr1 expr1_list
-- On FIXPOINT reduce production expr -> expr1 expr1_list
-- On EQ_GT_ reduce production expr -> expr1 expr1_list
-- On EQ_ reduce production expr -> expr1 expr1_list
-- On EOF reduce production expr -> expr1 expr1_list
-- On ENDPROOF reduce production expr -> expr1 expr1_list
-- On END reduce production expr -> expr1 expr1_list
-- On ELSE reduce production expr -> expr1 expr1_list
-- On DEPENDS reduce production expr -> expr1 expr1_list
-- On DEFINITION reduce production expr -> expr1 expr1_list
-- On DASH_GT_ reduce production expr -> expr1 expr1_list
-- On COMMA_ reduce production expr -> expr1 expr1_list
-- On COLON_EQ_ reduce production expr -> expr1 expr1_list
-- On BAR_ reduce production expr -> expr1 expr1_list
-- On BACKSL_SLASH_ reduce production expr -> expr1 expr1_list

State 65:
## Known stack suffix:
## EXISTS bindings COMMA_ expr
## LR(1) items:
expr -> EXISTS bindings COMMA_ expr . [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> expr . DASH_GT_ expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> expr . LT_DASH_GT_ expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> expr . BACKSL_SLASH_ expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> expr . SLASH_BACKSL_ expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> expr . EQ_ expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> expr . LT_GT_ expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
## Transitions:
-- On SLASH_BACKSL_ shift to state 66
-- On LT_GT_ shift to state 68
-- On LT_DASH_GT_ shift to state 72
-- On EQ_ shift to state 70
-- On DASH_GT_ shift to state 74
-- On BACKSL_SLASH_ shift to state 76
## Reductions:
-- On WITH reduce production expr -> EXISTS bindings COMMA_ expr
-- On THEN reduce production expr -> EXISTS bindings COMMA_ expr
-- On STAR_ reduce production expr -> EXISTS bindings COMMA_ expr
-- On RPAREN_ reduce production expr -> EXISTS bindings COMMA_ expr
-- On RBRACE_ reduce production expr -> EXISTS bindings COMMA_ expr
-- On PERIOD_ reduce production expr -> EXISTS bindings COMMA_ expr
-- On PERCENT_ reduce production expr -> EXISTS bindings COMMA_ expr
-- On PARAMETER reduce production expr -> EXISTS bindings COMMA_ expr
-- On MUSTUSE reduce production expr -> EXISTS bindings COMMA_ expr
-- On LBRACE_ reduce production expr -> EXISTS bindings COMMA_ expr
-- On INDUCTIVE reduce production expr -> EXISTS bindings COMMA_ expr
-- On IN reduce production expr -> EXISTS bindings COMMA_ expr
-- On FUNCTION reduce production expr -> EXISTS bindings COMMA_ expr
-- On FIXPOINT reduce production expr -> EXISTS bindings COMMA_ expr
-- On EQ_GT_ reduce production expr -> EXISTS bindings COMMA_ expr
-- On EOF reduce production expr -> EXISTS bindings COMMA_ expr
-- On ENDPROOF reduce production expr -> EXISTS bindings COMMA_ expr
-- On END reduce production expr -> EXISTS bindings COMMA_ expr
-- On ELSE reduce production expr -> EXISTS bindings COMMA_ expr
-- On DEPENDS reduce production expr -> EXISTS bindings COMMA_ expr
-- On DEFINITION reduce production expr -> EXISTS bindings COMMA_ expr
-- On COMMA_ reduce production expr -> EXISTS bindings COMMA_ expr
-- On COLON_EQ_ reduce production expr -> EXISTS bindings COMMA_ expr
-- On BAR_ reduce production expr -> EXISTS bindings COMMA_ expr

State 66:
## Known stack suffix:
## expr SLASH_BACKSL_
## LR(1) items:
expr -> expr SLASH_BACKSL_ . expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
## Transitions:
-- On TRUE shift to state 1
-- On TILDE_ shift to state 2
-- On STRING shift to state 3
-- On NUM shift to state 4
-- On MATCH shift to state 5
-- On LPAREN_ shift to state 6
-- On LET shift to state 7
-- On IF shift to state 36
-- On IDENT shift to state 37
-- On FUN shift to state 38
-- On FORALL shift to state 49
-- On FALSE shift to state 54
-- On EXISTS shift to state 55
-- On AROBAS_ shift to state 58
-- On expr1 shift to state 63
-- On expr shift to state 67
## Reductions:

State 67:
## Known stack suffix:
## expr SLASH_BACKSL_ expr
## LR(1) items:
expr -> expr . DASH_GT_ expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> expr . LT_DASH_GT_ expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> expr . BACKSL_SLASH_ expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> expr . SLASH_BACKSL_ expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> expr SLASH_BACKSL_ expr . [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> expr . EQ_ expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> expr . LT_GT_ expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
## Transitions:
-- On SLASH_BACKSL_ shift to state 66
-- On LT_GT_ shift to state 68
-- On EQ_ shift to state 70
## Reductions:
-- On WITH reduce production expr -> expr SLASH_BACKSL_ expr
-- On THEN reduce production expr -> expr SLASH_BACKSL_ expr
-- On STAR_ reduce production expr -> expr SLASH_BACKSL_ expr
-- On RPAREN_ reduce production expr -> expr SLASH_BACKSL_ expr
-- On RBRACE_ reduce production expr -> expr SLASH_BACKSL_ expr
-- On PERIOD_ reduce production expr -> expr SLASH_BACKSL_ expr
-- On PERCENT_ reduce production expr -> expr SLASH_BACKSL_ expr
-- On PARAMETER reduce production expr -> expr SLASH_BACKSL_ expr
-- On MUSTUSE reduce production expr -> expr SLASH_BACKSL_ expr
-- On LT_DASH_GT_ reduce production expr -> expr SLASH_BACKSL_ expr
-- On LBRACE_ reduce production expr -> expr SLASH_BACKSL_ expr
-- On INDUCTIVE reduce production expr -> expr SLASH_BACKSL_ expr
-- On IN reduce production expr -> expr SLASH_BACKSL_ expr
-- On FUNCTION reduce production expr -> expr SLASH_BACKSL_ expr
-- On FIXPOINT reduce production expr -> expr SLASH_BACKSL_ expr
-- On EQ_GT_ reduce production expr -> expr SLASH_BACKSL_ expr
-- On EOF reduce production expr -> expr SLASH_BACKSL_ expr
-- On ENDPROOF reduce production expr -> expr SLASH_BACKSL_ expr
-- On END reduce production expr -> expr SLASH_BACKSL_ expr
-- On ELSE reduce production expr -> expr SLASH_BACKSL_ expr
-- On DEPENDS reduce production expr -> expr SLASH_BACKSL_ expr
-- On DEFINITION reduce production expr -> expr SLASH_BACKSL_ expr
-- On DASH_GT_ reduce production expr -> expr SLASH_BACKSL_ expr
-- On COMMA_ reduce production expr -> expr SLASH_BACKSL_ expr
-- On COLON_EQ_ reduce production expr -> expr SLASH_BACKSL_ expr
-- On BAR_ reduce production expr -> expr SLASH_BACKSL_ expr
-- On BACKSL_SLASH_ reduce production expr -> expr SLASH_BACKSL_ expr

State 68:
## Known stack suffix:
## expr LT_GT_
## LR(1) items:
expr -> expr LT_GT_ . expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
## Transitions:
-- On TRUE shift to state 1
-- On TILDE_ shift to state 2
-- On STRING shift to state 3
-- On NUM shift to state 4
-- On MATCH shift to state 5
-- On LPAREN_ shift to state 6
-- On LET shift to state 7
-- On IF shift to state 36
-- On IDENT shift to state 37
-- On FUN shift to state 38
-- On FORALL shift to state 49
-- On FALSE shift to state 54
-- On EXISTS shift to state 55
-- On AROBAS_ shift to state 58
-- On expr1 shift to state 63
-- On expr shift to state 69
## Reductions:

State 69:
## Known stack suffix:
## expr LT_GT_ expr
## LR(1) items:
expr -> expr . DASH_GT_ expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> expr . LT_DASH_GT_ expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> expr . BACKSL_SLASH_ expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> expr . SLASH_BACKSL_ expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> expr . EQ_ expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> expr . LT_GT_ expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> expr LT_GT_ expr . [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
## Transitions:
## Reductions:
-- On WITH reduce production expr -> expr LT_GT_ expr
-- On THEN reduce production expr -> expr LT_GT_ expr
-- On STAR_ reduce production expr -> expr LT_GT_ expr
-- On SLASH_BACKSL_ reduce production expr -> expr LT_GT_ expr
-- On RPAREN_ reduce production expr -> expr LT_GT_ expr
-- On RBRACE_ reduce production expr -> expr LT_GT_ expr
-- On PERIOD_ reduce production expr -> expr LT_GT_ expr
-- On PERCENT_ reduce production expr -> expr LT_GT_ expr
-- On PARAMETER reduce production expr -> expr LT_GT_ expr
-- On MUSTUSE reduce production expr -> expr LT_GT_ expr
-- On LT_DASH_GT_ reduce production expr -> expr LT_GT_ expr
-- On LBRACE_ reduce production expr -> expr LT_GT_ expr
-- On INDUCTIVE reduce production expr -> expr LT_GT_ expr
-- On IN reduce production expr -> expr LT_GT_ expr
-- On FUNCTION reduce production expr -> expr LT_GT_ expr
-- On FIXPOINT reduce production expr -> expr LT_GT_ expr
-- On EQ_GT_ reduce production expr -> expr LT_GT_ expr
-- On EOF reduce production expr -> expr LT_GT_ expr
-- On ENDPROOF reduce production expr -> expr LT_GT_ expr
-- On END reduce production expr -> expr LT_GT_ expr
-- On ELSE reduce production expr -> expr LT_GT_ expr
-- On DEPENDS reduce production expr -> expr LT_GT_ expr
-- On DEFINITION reduce production expr -> expr LT_GT_ expr
-- On DASH_GT_ reduce production expr -> expr LT_GT_ expr
-- On COMMA_ reduce production expr -> expr LT_GT_ expr
-- On COLON_EQ_ reduce production expr -> expr LT_GT_ expr
-- On BAR_ reduce production expr -> expr LT_GT_ expr
-- On BACKSL_SLASH_ reduce production expr -> expr LT_GT_ expr

State 70:
## Known stack suffix:
## expr EQ_
## LR(1) items:
expr -> expr EQ_ . expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
## Transitions:
-- On TRUE shift to state 1
-- On TILDE_ shift to state 2
-- On STRING shift to state 3
-- On NUM shift to state 4
-- On MATCH shift to state 5
-- On LPAREN_ shift to state 6
-- On LET shift to state 7
-- On IF shift to state 36
-- On IDENT shift to state 37
-- On FUN shift to state 38
-- On FORALL shift to state 49
-- On FALSE shift to state 54
-- On EXISTS shift to state 55
-- On AROBAS_ shift to state 58
-- On expr1 shift to state 63
-- On expr shift to state 71
## Reductions:

State 71:
## Known stack suffix:
## expr EQ_ expr
## LR(1) items:
expr -> expr . DASH_GT_ expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> expr . LT_DASH_GT_ expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> expr . BACKSL_SLASH_ expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> expr . SLASH_BACKSL_ expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> expr . EQ_ expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> expr EQ_ expr . [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> expr . LT_GT_ expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
## Transitions:
## Reductions:
-- On WITH reduce production expr -> expr EQ_ expr
-- On THEN reduce production expr -> expr EQ_ expr
-- On STAR_ reduce production expr -> expr EQ_ expr
-- On SLASH_BACKSL_ reduce production expr -> expr EQ_ expr
-- On RPAREN_ reduce production expr -> expr EQ_ expr
-- On RBRACE_ reduce production expr -> expr EQ_ expr
-- On PERIOD_ reduce production expr -> expr EQ_ expr
-- On PERCENT_ reduce production expr -> expr EQ_ expr
-- On PARAMETER reduce production expr -> expr EQ_ expr
-- On MUSTUSE reduce production expr -> expr EQ_ expr
-- On LT_DASH_GT_ reduce production expr -> expr EQ_ expr
-- On LBRACE_ reduce production expr -> expr EQ_ expr
-- On INDUCTIVE reduce production expr -> expr EQ_ expr
-- On IN reduce production expr -> expr EQ_ expr
-- On FUNCTION reduce production expr -> expr EQ_ expr
-- On FIXPOINT reduce production expr -> expr EQ_ expr
-- On EQ_GT_ reduce production expr -> expr EQ_ expr
-- On EOF reduce production expr -> expr EQ_ expr
-- On ENDPROOF reduce production expr -> expr EQ_ expr
-- On END reduce production expr -> expr EQ_ expr
-- On ELSE reduce production expr -> expr EQ_ expr
-- On DEPENDS reduce production expr -> expr EQ_ expr
-- On DEFINITION reduce production expr -> expr EQ_ expr
-- On DASH_GT_ reduce production expr -> expr EQ_ expr
-- On COMMA_ reduce production expr -> expr EQ_ expr
-- On COLON_EQ_ reduce production expr -> expr EQ_ expr
-- On BAR_ reduce production expr -> expr EQ_ expr
-- On BACKSL_SLASH_ reduce production expr -> expr EQ_ expr

State 72:
## Known stack suffix:
## expr LT_DASH_GT_
## LR(1) items:
expr -> expr LT_DASH_GT_ . expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
## Transitions:
-- On TRUE shift to state 1
-- On TILDE_ shift to state 2
-- On STRING shift to state 3
-- On NUM shift to state 4
-- On MATCH shift to state 5
-- On LPAREN_ shift to state 6
-- On LET shift to state 7
-- On IF shift to state 36
-- On IDENT shift to state 37
-- On FUN shift to state 38
-- On FORALL shift to state 49
-- On FALSE shift to state 54
-- On EXISTS shift to state 55
-- On AROBAS_ shift to state 58
-- On expr1 shift to state 63
-- On expr shift to state 73
## Reductions:

State 73:
## Known stack suffix:
## expr LT_DASH_GT_ expr
## LR(1) items:
expr -> expr . DASH_GT_ expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> expr . LT_DASH_GT_ expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> expr LT_DASH_GT_ expr . [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> expr . BACKSL_SLASH_ expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> expr . SLASH_BACKSL_ expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> expr . EQ_ expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> expr . LT_GT_ expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
## Transitions:
-- On SLASH_BACKSL_ shift to state 66
-- On LT_GT_ shift to state 68
-- On EQ_ shift to state 70
-- On DASH_GT_ shift to state 74
-- On BACKSL_SLASH_ shift to state 76
## Reductions:
-- On WITH reduce production expr -> expr LT_DASH_GT_ expr
-- On THEN reduce production expr -> expr LT_DASH_GT_ expr
-- On STAR_ reduce production expr -> expr LT_DASH_GT_ expr
-- On RPAREN_ reduce production expr -> expr LT_DASH_GT_ expr
-- On RBRACE_ reduce production expr -> expr LT_DASH_GT_ expr
-- On PERIOD_ reduce production expr -> expr LT_DASH_GT_ expr
-- On PERCENT_ reduce production expr -> expr LT_DASH_GT_ expr
-- On PARAMETER reduce production expr -> expr LT_DASH_GT_ expr
-- On MUSTUSE reduce production expr -> expr LT_DASH_GT_ expr
-- On LT_DASH_GT_ reduce production expr -> expr LT_DASH_GT_ expr
-- On LBRACE_ reduce production expr -> expr LT_DASH_GT_ expr
-- On INDUCTIVE reduce production expr -> expr LT_DASH_GT_ expr
-- On IN reduce production expr -> expr LT_DASH_GT_ expr
-- On FUNCTION reduce production expr -> expr LT_DASH_GT_ expr
-- On FIXPOINT reduce production expr -> expr LT_DASH_GT_ expr
-- On EQ_GT_ reduce production expr -> expr LT_DASH_GT_ expr
-- On EOF reduce production expr -> expr LT_DASH_GT_ expr
-- On ENDPROOF reduce production expr -> expr LT_DASH_GT_ expr
-- On END reduce production expr -> expr LT_DASH_GT_ expr
-- On ELSE reduce production expr -> expr LT_DASH_GT_ expr
-- On DEPENDS reduce production expr -> expr LT_DASH_GT_ expr
-- On DEFINITION reduce production expr -> expr LT_DASH_GT_ expr
-- On COMMA_ reduce production expr -> expr LT_DASH_GT_ expr
-- On COLON_EQ_ reduce production expr -> expr LT_DASH_GT_ expr
-- On BAR_ reduce production expr -> expr LT_DASH_GT_ expr

State 74:
## Known stack suffix:
## expr DASH_GT_
## LR(1) items:
expr -> expr DASH_GT_ . expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
## Transitions:
-- On TRUE shift to state 1
-- On TILDE_ shift to state 2
-- On STRING shift to state 3
-- On NUM shift to state 4
-- On MATCH shift to state 5
-- On LPAREN_ shift to state 6
-- On LET shift to state 7
-- On IF shift to state 36
-- On IDENT shift to state 37
-- On FUN shift to state 38
-- On FORALL shift to state 49
-- On FALSE shift to state 54
-- On EXISTS shift to state 55
-- On AROBAS_ shift to state 58
-- On expr1 shift to state 63
-- On expr shift to state 75
## Reductions:

State 75:
## Known stack suffix:
## expr DASH_GT_ expr
## LR(1) items:
expr -> expr . DASH_GT_ expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> expr DASH_GT_ expr . [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> expr . LT_DASH_GT_ expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> expr . BACKSL_SLASH_ expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> expr . SLASH_BACKSL_ expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> expr . EQ_ expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> expr . LT_GT_ expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
## Transitions:
-- On SLASH_BACKSL_ shift to state 66
-- On LT_GT_ shift to state 68
-- On EQ_ shift to state 70
-- On DASH_GT_ shift to state 74
-- On BACKSL_SLASH_ shift to state 76
## Reductions:
-- On WITH reduce production expr -> expr DASH_GT_ expr
-- On THEN reduce production expr -> expr DASH_GT_ expr
-- On STAR_ reduce production expr -> expr DASH_GT_ expr
-- On RPAREN_ reduce production expr -> expr DASH_GT_ expr
-- On RBRACE_ reduce production expr -> expr DASH_GT_ expr
-- On PERIOD_ reduce production expr -> expr DASH_GT_ expr
-- On PERCENT_ reduce production expr -> expr DASH_GT_ expr
-- On PARAMETER reduce production expr -> expr DASH_GT_ expr
-- On MUSTUSE reduce production expr -> expr DASH_GT_ expr
-- On LT_DASH_GT_ reduce production expr -> expr DASH_GT_ expr
-- On LBRACE_ reduce production expr -> expr DASH_GT_ expr
-- On INDUCTIVE reduce production expr -> expr DASH_GT_ expr
-- On IN reduce production expr -> expr DASH_GT_ expr
-- On FUNCTION reduce production expr -> expr DASH_GT_ expr
-- On FIXPOINT reduce production expr -> expr DASH_GT_ expr
-- On EQ_GT_ reduce production expr -> expr DASH_GT_ expr
-- On EOF reduce production expr -> expr DASH_GT_ expr
-- On ENDPROOF reduce production expr -> expr DASH_GT_ expr
-- On END reduce production expr -> expr DASH_GT_ expr
-- On ELSE reduce production expr -> expr DASH_GT_ expr
-- On DEPENDS reduce production expr -> expr DASH_GT_ expr
-- On DEFINITION reduce production expr -> expr DASH_GT_ expr
-- On COMMA_ reduce production expr -> expr DASH_GT_ expr
-- On COLON_EQ_ reduce production expr -> expr DASH_GT_ expr
-- On BAR_ reduce production expr -> expr DASH_GT_ expr

State 76:
## Known stack suffix:
## expr BACKSL_SLASH_
## LR(1) items:
expr -> expr BACKSL_SLASH_ . expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
## Transitions:
-- On TRUE shift to state 1
-- On TILDE_ shift to state 2
-- On STRING shift to state 3
-- On NUM shift to state 4
-- On MATCH shift to state 5
-- On LPAREN_ shift to state 6
-- On LET shift to state 7
-- On IF shift to state 36
-- On IDENT shift to state 37
-- On FUN shift to state 38
-- On FORALL shift to state 49
-- On FALSE shift to state 54
-- On EXISTS shift to state 55
-- On AROBAS_ shift to state 58
-- On expr1 shift to state 63
-- On expr shift to state 77
## Reductions:

State 77:
## Known stack suffix:
## expr BACKSL_SLASH_ expr
## LR(1) items:
expr -> expr . DASH_GT_ expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> expr . LT_DASH_GT_ expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> expr . BACKSL_SLASH_ expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> expr BACKSL_SLASH_ expr . [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> expr . SLASH_BACKSL_ expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> expr . EQ_ expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> expr . LT_GT_ expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
## Transitions:
-- On SLASH_BACKSL_ shift to state 66
-- On LT_GT_ shift to state 68
-- On EQ_ shift to state 70
-- On BACKSL_SLASH_ shift to state 76
## Reductions:
-- On WITH reduce production expr -> expr BACKSL_SLASH_ expr
-- On THEN reduce production expr -> expr BACKSL_SLASH_ expr
-- On STAR_ reduce production expr -> expr BACKSL_SLASH_ expr
-- On RPAREN_ reduce production expr -> expr BACKSL_SLASH_ expr
-- On RBRACE_ reduce production expr -> expr BACKSL_SLASH_ expr
-- On PERIOD_ reduce production expr -> expr BACKSL_SLASH_ expr
-- On PERCENT_ reduce production expr -> expr BACKSL_SLASH_ expr
-- On PARAMETER reduce production expr -> expr BACKSL_SLASH_ expr
-- On MUSTUSE reduce production expr -> expr BACKSL_SLASH_ expr
-- On LT_DASH_GT_ reduce production expr -> expr BACKSL_SLASH_ expr
-- On LBRACE_ reduce production expr -> expr BACKSL_SLASH_ expr
-- On INDUCTIVE reduce production expr -> expr BACKSL_SLASH_ expr
-- On IN reduce production expr -> expr BACKSL_SLASH_ expr
-- On FUNCTION reduce production expr -> expr BACKSL_SLASH_ expr
-- On FIXPOINT reduce production expr -> expr BACKSL_SLASH_ expr
-- On EQ_GT_ reduce production expr -> expr BACKSL_SLASH_ expr
-- On EOF reduce production expr -> expr BACKSL_SLASH_ expr
-- On ENDPROOF reduce production expr -> expr BACKSL_SLASH_ expr
-- On END reduce production expr -> expr BACKSL_SLASH_ expr
-- On ELSE reduce production expr -> expr BACKSL_SLASH_ expr
-- On DEPENDS reduce production expr -> expr BACKSL_SLASH_ expr
-- On DEFINITION reduce production expr -> expr BACKSL_SLASH_ expr
-- On DASH_GT_ reduce production expr -> expr BACKSL_SLASH_ expr
-- On COMMA_ reduce production expr -> expr BACKSL_SLASH_ expr
-- On COLON_EQ_ reduce production expr -> expr BACKSL_SLASH_ expr
-- On BAR_ reduce production expr -> expr BACKSL_SLASH_ expr

State 78:
## Known stack suffix:
## binding_list
## LR(1) items:
bindings -> binding_list . [ LBRACE_ EQ_GT_ COMMA_ ]
## Transitions:
## Reductions:
-- On LBRACE_ reduce production bindings -> binding_list
-- On EQ_GT_ reduce production bindings -> binding_list
-- On COMMA_ reduce production bindings -> binding_list

State 79:
## Known stack suffix:
## FORALL bindings COMMA_ expr
## LR(1) items:
expr -> FORALL bindings COMMA_ expr . [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> expr . DASH_GT_ expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> expr . LT_DASH_GT_ expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> expr . BACKSL_SLASH_ expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> expr . SLASH_BACKSL_ expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> expr . EQ_ expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> expr . LT_GT_ expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
## Transitions:
-- On SLASH_BACKSL_ shift to state 66
-- On LT_GT_ shift to state 68
-- On LT_DASH_GT_ shift to state 72
-- On EQ_ shift to state 70
-- On DASH_GT_ shift to state 74
-- On BACKSL_SLASH_ shift to state 76
## Reductions:
-- On WITH reduce production expr -> FORALL bindings COMMA_ expr
-- On THEN reduce production expr -> FORALL bindings COMMA_ expr
-- On STAR_ reduce production expr -> FORALL bindings COMMA_ expr
-- On RPAREN_ reduce production expr -> FORALL bindings COMMA_ expr
-- On RBRACE_ reduce production expr -> FORALL bindings COMMA_ expr
-- On PERIOD_ reduce production expr -> FORALL bindings COMMA_ expr
-- On PERCENT_ reduce production expr -> FORALL bindings COMMA_ expr
-- On PARAMETER reduce production expr -> FORALL bindings COMMA_ expr
-- On MUSTUSE reduce production expr -> FORALL bindings COMMA_ expr
-- On LBRACE_ reduce production expr -> FORALL bindings COMMA_ expr
-- On INDUCTIVE reduce production expr -> FORALL bindings COMMA_ expr
-- On IN reduce production expr -> FORALL bindings COMMA_ expr
-- On FUNCTION reduce production expr -> FORALL bindings COMMA_ expr
-- On FIXPOINT reduce production expr -> FORALL bindings COMMA_ expr
-- On EQ_GT_ reduce production expr -> FORALL bindings COMMA_ expr
-- On EOF reduce production expr -> FORALL bindings COMMA_ expr
-- On ENDPROOF reduce production expr -> FORALL bindings COMMA_ expr
-- On END reduce production expr -> FORALL bindings COMMA_ expr
-- On ELSE reduce production expr -> FORALL bindings COMMA_ expr
-- On DEPENDS reduce production expr -> FORALL bindings COMMA_ expr
-- On DEFINITION reduce production expr -> FORALL bindings COMMA_ expr
-- On COMMA_ reduce production expr -> FORALL bindings COMMA_ expr
-- On COLON_EQ_ reduce production expr -> FORALL bindings COMMA_ expr
-- On BAR_ reduce production expr -> FORALL bindings COMMA_ expr

State 80:
## Known stack suffix:
## idlist COLON_ typ
## LR(1) items:
simplebinding -> idlist COLON_ typ . [ RPAREN_ LBRACE_ EQ_GT_ COMMA_ ]
## Transitions:
## Reductions:
-- On RPAREN_ reduce production simplebinding -> idlist COLON_ typ
-- On LBRACE_ reduce production simplebinding -> idlist COLON_ typ
-- On EQ_GT_ reduce production simplebinding -> idlist COLON_ typ
-- On COMMA_ reduce production simplebinding -> idlist COLON_ typ

State 81:
## Known stack suffix:
## expr
## LR(1) items:
expr -> expr . DASH_GT_ expr [ SLASH_BACKSL_ RPAREN_ LT_GT_ LT_DASH_GT_ LBRACE_ EQ_GT_ EQ_ DASH_GT_ COMMA_ COLON_EQ_ BACKSL_SLASH_ ]
expr -> expr . LT_DASH_GT_ expr [ SLASH_BACKSL_ RPAREN_ LT_GT_ LT_DASH_GT_ LBRACE_ EQ_GT_ EQ_ DASH_GT_ COMMA_ COLON_EQ_ BACKSL_SLASH_ ]
expr -> expr . BACKSL_SLASH_ expr [ SLASH_BACKSL_ RPAREN_ LT_GT_ LT_DASH_GT_ LBRACE_ EQ_GT_ EQ_ DASH_GT_ COMMA_ COLON_EQ_ BACKSL_SLASH_ ]
expr -> expr . SLASH_BACKSL_ expr [ SLASH_BACKSL_ RPAREN_ LT_GT_ LT_DASH_GT_ LBRACE_ EQ_GT_ EQ_ DASH_GT_ COMMA_ COLON_EQ_ BACKSL_SLASH_ ]
expr -> expr . EQ_ expr [ SLASH_BACKSL_ RPAREN_ LT_GT_ LT_DASH_GT_ LBRACE_ EQ_GT_ EQ_ DASH_GT_ COMMA_ COLON_EQ_ BACKSL_SLASH_ ]
expr -> expr . LT_GT_ expr [ SLASH_BACKSL_ RPAREN_ LT_GT_ LT_DASH_GT_ LBRACE_ EQ_GT_ EQ_ DASH_GT_ COMMA_ COLON_EQ_ BACKSL_SLASH_ ]
typ -> expr . [ RPAREN_ LBRACE_ EQ_GT_ COMMA_ COLON_EQ_ ]
## Transitions:
-- On SLASH_BACKSL_ shift to state 66
-- On LT_GT_ shift to state 68
-- On LT_DASH_GT_ shift to state 72
-- On EQ_ shift to state 70
-- On DASH_GT_ shift to state 74
-- On BACKSL_SLASH_ shift to state 76
## Reductions:
-- On RPAREN_ reduce production typ -> expr
-- On LBRACE_ reduce production typ -> expr
-- On EQ_GT_ reduce production typ -> expr
-- On COMMA_ reduce production typ -> expr
-- On COLON_EQ_ reduce production typ -> expr

State 82:
## Known stack suffix:
## FUN bindings
## LR(1) items:
expr -> FUN bindings . EQ_GT_ expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
## Transitions:
-- On EQ_GT_ shift to state 83
## Reductions:

State 83:
## Known stack suffix:
## FUN bindings EQ_GT_
## LR(1) items:
expr -> FUN bindings EQ_GT_ . expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
## Transitions:
-- On TRUE shift to state 1
-- On TILDE_ shift to state 2
-- On STRING shift to state 3
-- On NUM shift to state 4
-- On MATCH shift to state 5
-- On LPAREN_ shift to state 6
-- On LET shift to state 7
-- On IF shift to state 36
-- On IDENT shift to state 37
-- On FUN shift to state 38
-- On FORALL shift to state 49
-- On FALSE shift to state 54
-- On EXISTS shift to state 55
-- On AROBAS_ shift to state 58
-- On expr1 shift to state 63
-- On expr shift to state 84
## Reductions:

State 84:
## Known stack suffix:
## FUN bindings EQ_GT_ expr
## LR(1) items:
expr -> FUN bindings EQ_GT_ expr . [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> expr . DASH_GT_ expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> expr . LT_DASH_GT_ expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> expr . BACKSL_SLASH_ expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> expr . SLASH_BACKSL_ expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> expr . EQ_ expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> expr . LT_GT_ expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
## Transitions:
-- On SLASH_BACKSL_ shift to state 66
-- On LT_GT_ shift to state 68
-- On LT_DASH_GT_ shift to state 72
-- On EQ_ shift to state 70
-- On DASH_GT_ shift to state 74
-- On BACKSL_SLASH_ shift to state 76
## Reductions:
-- On WITH reduce production expr -> FUN bindings EQ_GT_ expr
-- On THEN reduce production expr -> FUN bindings EQ_GT_ expr
-- On STAR_ reduce production expr -> FUN bindings EQ_GT_ expr
-- On RPAREN_ reduce production expr -> FUN bindings EQ_GT_ expr
-- On RBRACE_ reduce production expr -> FUN bindings EQ_GT_ expr
-- On PERIOD_ reduce production expr -> FUN bindings EQ_GT_ expr
-- On PERCENT_ reduce production expr -> FUN bindings EQ_GT_ expr
-- On PARAMETER reduce production expr -> FUN bindings EQ_GT_ expr
-- On MUSTUSE reduce production expr -> FUN bindings EQ_GT_ expr
-- On LBRACE_ reduce production expr -> FUN bindings EQ_GT_ expr
-- On INDUCTIVE reduce production expr -> FUN bindings EQ_GT_ expr
-- On IN reduce production expr -> FUN bindings EQ_GT_ expr
-- On FUNCTION reduce production expr -> FUN bindings EQ_GT_ expr
-- On FIXPOINT reduce production expr -> FUN bindings EQ_GT_ expr
-- On EQ_GT_ reduce production expr -> FUN bindings EQ_GT_ expr
-- On EOF reduce production expr -> FUN bindings EQ_GT_ expr
-- On ENDPROOF reduce production expr -> FUN bindings EQ_GT_ expr
-- On END reduce production expr -> FUN bindings EQ_GT_ expr
-- On ELSE reduce production expr -> FUN bindings EQ_GT_ expr
-- On DEPENDS reduce production expr -> FUN bindings EQ_GT_ expr
-- On DEFINITION reduce production expr -> FUN bindings EQ_GT_ expr
-- On COMMA_ reduce production expr -> FUN bindings EQ_GT_ expr
-- On COLON_EQ_ reduce production expr -> FUN bindings EQ_GT_ expr
-- On BAR_ reduce production expr -> FUN bindings EQ_GT_ expr

State 85:
## Known stack suffix:
## IF expr
## LR(1) items:
expr -> IF expr . THEN expr ELSE expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> expr . DASH_GT_ expr [ THEN SLASH_BACKSL_ LT_GT_ LT_DASH_GT_ EQ_ DASH_GT_ BACKSL_SLASH_ ]
expr -> expr . LT_DASH_GT_ expr [ THEN SLASH_BACKSL_ LT_GT_ LT_DASH_GT_ EQ_ DASH_GT_ BACKSL_SLASH_ ]
expr -> expr . BACKSL_SLASH_ expr [ THEN SLASH_BACKSL_ LT_GT_ LT_DASH_GT_ EQ_ DASH_GT_ BACKSL_SLASH_ ]
expr -> expr . SLASH_BACKSL_ expr [ THEN SLASH_BACKSL_ LT_GT_ LT_DASH_GT_ EQ_ DASH_GT_ BACKSL_SLASH_ ]
expr -> expr . EQ_ expr [ THEN SLASH_BACKSL_ LT_GT_ LT_DASH_GT_ EQ_ DASH_GT_ BACKSL_SLASH_ ]
expr -> expr . LT_GT_ expr [ THEN SLASH_BACKSL_ LT_GT_ LT_DASH_GT_ EQ_ DASH_GT_ BACKSL_SLASH_ ]
## Transitions:
-- On THEN shift to state 86
-- On SLASH_BACKSL_ shift to state 66
-- On LT_GT_ shift to state 68
-- On LT_DASH_GT_ shift to state 72
-- On EQ_ shift to state 70
-- On DASH_GT_ shift to state 74
-- On BACKSL_SLASH_ shift to state 76
## Reductions:

State 86:
## Known stack suffix:
## IF expr THEN
## LR(1) items:
expr -> IF expr THEN . expr ELSE expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
## Transitions:
-- On TRUE shift to state 1
-- On TILDE_ shift to state 2
-- On STRING shift to state 3
-- On NUM shift to state 4
-- On MATCH shift to state 5
-- On LPAREN_ shift to state 6
-- On LET shift to state 7
-- On IF shift to state 36
-- On IDENT shift to state 37
-- On FUN shift to state 38
-- On FORALL shift to state 49
-- On FALSE shift to state 54
-- On EXISTS shift to state 55
-- On AROBAS_ shift to state 58
-- On expr1 shift to state 63
-- On expr shift to state 87
## Reductions:

State 87:
## Known stack suffix:
## IF expr THEN expr
## LR(1) items:
expr -> IF expr THEN expr . ELSE expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> expr . DASH_GT_ expr [ SLASH_BACKSL_ LT_GT_ LT_DASH_GT_ EQ_ ELSE DASH_GT_ BACKSL_SLASH_ ]
expr -> expr . LT_DASH_GT_ expr [ SLASH_BACKSL_ LT_GT_ LT_DASH_GT_ EQ_ ELSE DASH_GT_ BACKSL_SLASH_ ]
expr -> expr . BACKSL_SLASH_ expr [ SLASH_BACKSL_ LT_GT_ LT_DASH_GT_ EQ_ ELSE DASH_GT_ BACKSL_SLASH_ ]
expr -> expr . SLASH_BACKSL_ expr [ SLASH_BACKSL_ LT_GT_ LT_DASH_GT_ EQ_ ELSE DASH_GT_ BACKSL_SLASH_ ]
expr -> expr . EQ_ expr [ SLASH_BACKSL_ LT_GT_ LT_DASH_GT_ EQ_ ELSE DASH_GT_ BACKSL_SLASH_ ]
expr -> expr . LT_GT_ expr [ SLASH_BACKSL_ LT_GT_ LT_DASH_GT_ EQ_ ELSE DASH_GT_ BACKSL_SLASH_ ]
## Transitions:
-- On SLASH_BACKSL_ shift to state 66
-- On LT_GT_ shift to state 68
-- On LT_DASH_GT_ shift to state 72
-- On EQ_ shift to state 70
-- On ELSE shift to state 88
-- On DASH_GT_ shift to state 74
-- On BACKSL_SLASH_ shift to state 76
## Reductions:

State 88:
## Known stack suffix:
## IF expr THEN expr ELSE
## LR(1) items:
expr -> IF expr THEN expr ELSE . expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
## Transitions:
-- On TRUE shift to state 1
-- On TILDE_ shift to state 2
-- On STRING shift to state 3
-- On NUM shift to state 4
-- On MATCH shift to state 5
-- On LPAREN_ shift to state 6
-- On LET shift to state 7
-- On IF shift to state 36
-- On IDENT shift to state 37
-- On FUN shift to state 38
-- On FORALL shift to state 49
-- On FALSE shift to state 54
-- On EXISTS shift to state 55
-- On AROBAS_ shift to state 58
-- On expr1 shift to state 63
-- On expr shift to state 89
## Reductions:

State 89:
## Known stack suffix:
## IF expr THEN expr ELSE expr
## LR(1) items:
expr -> IF expr THEN expr ELSE expr . [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> expr . DASH_GT_ expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> expr . LT_DASH_GT_ expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> expr . BACKSL_SLASH_ expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> expr . SLASH_BACKSL_ expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> expr . EQ_ expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> expr . LT_GT_ expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
## Transitions:
-- On SLASH_BACKSL_ shift to state 66
-- On LT_GT_ shift to state 68
-- On LT_DASH_GT_ shift to state 72
-- On EQ_ shift to state 70
-- On DASH_GT_ shift to state 74
-- On BACKSL_SLASH_ shift to state 76
## Reductions:
-- On WITH reduce production expr -> IF expr THEN expr ELSE expr
-- On THEN reduce production expr -> IF expr THEN expr ELSE expr
-- On STAR_ reduce production expr -> IF expr THEN expr ELSE expr
-- On RPAREN_ reduce production expr -> IF expr THEN expr ELSE expr
-- On RBRACE_ reduce production expr -> IF expr THEN expr ELSE expr
-- On PERIOD_ reduce production expr -> IF expr THEN expr ELSE expr
-- On PERCENT_ reduce production expr -> IF expr THEN expr ELSE expr
-- On PARAMETER reduce production expr -> IF expr THEN expr ELSE expr
-- On MUSTUSE reduce production expr -> IF expr THEN expr ELSE expr
-- On LBRACE_ reduce production expr -> IF expr THEN expr ELSE expr
-- On INDUCTIVE reduce production expr -> IF expr THEN expr ELSE expr
-- On IN reduce production expr -> IF expr THEN expr ELSE expr
-- On FUNCTION reduce production expr -> IF expr THEN expr ELSE expr
-- On FIXPOINT reduce production expr -> IF expr THEN expr ELSE expr
-- On EQ_GT_ reduce production expr -> IF expr THEN expr ELSE expr
-- On EOF reduce production expr -> IF expr THEN expr ELSE expr
-- On ENDPROOF reduce production expr -> IF expr THEN expr ELSE expr
-- On END reduce production expr -> IF expr THEN expr ELSE expr
-- On ELSE reduce production expr -> IF expr THEN expr ELSE expr
-- On DEPENDS reduce production expr -> IF expr THEN expr ELSE expr
-- On DEFINITION reduce production expr -> IF expr THEN expr ELSE expr
-- On COMMA_ reduce production expr -> IF expr THEN expr ELSE expr
-- On COLON_EQ_ reduce production expr -> IF expr THEN expr ELSE expr
-- On BAR_ reduce production expr -> IF expr THEN expr ELSE expr

State 90:
## Known stack suffix:
## LET LPAREN_ IDENT COLON_ junk RPAREN_ COLON_EQ_ expr
## LR(1) items:
expr -> LET LPAREN_ IDENT COLON_ junk RPAREN_ COLON_EQ_ expr . IN expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> expr . DASH_GT_ expr [ SLASH_BACKSL_ LT_GT_ LT_DASH_GT_ IN EQ_ DASH_GT_ BACKSL_SLASH_ ]
expr -> expr . LT_DASH_GT_ expr [ SLASH_BACKSL_ LT_GT_ LT_DASH_GT_ IN EQ_ DASH_GT_ BACKSL_SLASH_ ]
expr -> expr . BACKSL_SLASH_ expr [ SLASH_BACKSL_ LT_GT_ LT_DASH_GT_ IN EQ_ DASH_GT_ BACKSL_SLASH_ ]
expr -> expr . SLASH_BACKSL_ expr [ SLASH_BACKSL_ LT_GT_ LT_DASH_GT_ IN EQ_ DASH_GT_ BACKSL_SLASH_ ]
expr -> expr . EQ_ expr [ SLASH_BACKSL_ LT_GT_ LT_DASH_GT_ IN EQ_ DASH_GT_ BACKSL_SLASH_ ]
expr -> expr . LT_GT_ expr [ SLASH_BACKSL_ LT_GT_ LT_DASH_GT_ IN EQ_ DASH_GT_ BACKSL_SLASH_ ]
## Transitions:
-- On SLASH_BACKSL_ shift to state 66
-- On LT_GT_ shift to state 68
-- On LT_DASH_GT_ shift to state 72
-- On IN shift to state 91
-- On EQ_ shift to state 70
-- On DASH_GT_ shift to state 74
-- On BACKSL_SLASH_ shift to state 76
## Reductions:

State 91:
## Known stack suffix:
## LET LPAREN_ IDENT COLON_ junk RPAREN_ COLON_EQ_ expr IN
## LR(1) items:
expr -> LET LPAREN_ IDENT COLON_ junk RPAREN_ COLON_EQ_ expr IN . expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
## Transitions:
-- On TRUE shift to state 1
-- On TILDE_ shift to state 2
-- On STRING shift to state 3
-- On NUM shift to state 4
-- On MATCH shift to state 5
-- On LPAREN_ shift to state 6
-- On LET shift to state 7
-- On IF shift to state 36
-- On IDENT shift to state 37
-- On FUN shift to state 38
-- On FORALL shift to state 49
-- On FALSE shift to state 54
-- On EXISTS shift to state 55
-- On AROBAS_ shift to state 58
-- On expr1 shift to state 63
-- On expr shift to state 92
## Reductions:

State 92:
## Known stack suffix:
## LET LPAREN_ IDENT COLON_ junk RPAREN_ COLON_EQ_ expr IN expr
## LR(1) items:
expr -> LET LPAREN_ IDENT COLON_ junk RPAREN_ COLON_EQ_ expr IN expr . [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> expr . DASH_GT_ expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> expr . LT_DASH_GT_ expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> expr . BACKSL_SLASH_ expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> expr . SLASH_BACKSL_ expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> expr . EQ_ expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> expr . LT_GT_ expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
## Transitions:
-- On SLASH_BACKSL_ shift to state 66
-- On LT_GT_ shift to state 68
-- On LT_DASH_GT_ shift to state 72
-- On EQ_ shift to state 70
-- On DASH_GT_ shift to state 74
-- On BACKSL_SLASH_ shift to state 76
## Reductions:
-- On WITH reduce production expr -> LET LPAREN_ IDENT COLON_ junk RPAREN_ COLON_EQ_ expr IN expr
-- On THEN reduce production expr -> LET LPAREN_ IDENT COLON_ junk RPAREN_ COLON_EQ_ expr IN expr
-- On STAR_ reduce production expr -> LET LPAREN_ IDENT COLON_ junk RPAREN_ COLON_EQ_ expr IN expr
-- On RPAREN_ reduce production expr -> LET LPAREN_ IDENT COLON_ junk RPAREN_ COLON_EQ_ expr IN expr
-- On RBRACE_ reduce production expr -> LET LPAREN_ IDENT COLON_ junk RPAREN_ COLON_EQ_ expr IN expr
-- On PERIOD_ reduce production expr -> LET LPAREN_ IDENT COLON_ junk RPAREN_ COLON_EQ_ expr IN expr
-- On PERCENT_ reduce production expr -> LET LPAREN_ IDENT COLON_ junk RPAREN_ COLON_EQ_ expr IN expr
-- On PARAMETER reduce production expr -> LET LPAREN_ IDENT COLON_ junk RPAREN_ COLON_EQ_ expr IN expr
-- On MUSTUSE reduce production expr -> LET LPAREN_ IDENT COLON_ junk RPAREN_ COLON_EQ_ expr IN expr
-- On LBRACE_ reduce production expr -> LET LPAREN_ IDENT COLON_ junk RPAREN_ COLON_EQ_ expr IN expr
-- On INDUCTIVE reduce production expr -> LET LPAREN_ IDENT COLON_ junk RPAREN_ COLON_EQ_ expr IN expr
-- On IN reduce production expr -> LET LPAREN_ IDENT COLON_ junk RPAREN_ COLON_EQ_ expr IN expr
-- On FUNCTION reduce production expr -> LET LPAREN_ IDENT COLON_ junk RPAREN_ COLON_EQ_ expr IN expr
-- On FIXPOINT reduce production expr -> LET LPAREN_ IDENT COLON_ junk RPAREN_ COLON_EQ_ expr IN expr
-- On EQ_GT_ reduce production expr -> LET LPAREN_ IDENT COLON_ junk RPAREN_ COLON_EQ_ expr IN expr
-- On EOF reduce production expr -> LET LPAREN_ IDENT COLON_ junk RPAREN_ COLON_EQ_ expr IN expr
-- On ENDPROOF reduce production expr -> LET LPAREN_ IDENT COLON_ junk RPAREN_ COLON_EQ_ expr IN expr
-- On END reduce production expr -> LET LPAREN_ IDENT COLON_ junk RPAREN_ COLON_EQ_ expr IN expr
-- On ELSE reduce production expr -> LET LPAREN_ IDENT COLON_ junk RPAREN_ COLON_EQ_ expr IN expr
-- On DEPENDS reduce production expr -> LET LPAREN_ IDENT COLON_ junk RPAREN_ COLON_EQ_ expr IN expr
-- On DEFINITION reduce production expr -> LET LPAREN_ IDENT COLON_ junk RPAREN_ COLON_EQ_ expr IN expr
-- On COMMA_ reduce production expr -> LET LPAREN_ IDENT COLON_ junk RPAREN_ COLON_EQ_ expr IN expr
-- On COLON_EQ_ reduce production expr -> LET LPAREN_ IDENT COLON_ junk RPAREN_ COLON_EQ_ expr IN expr
-- On BAR_ reduce production expr -> LET LPAREN_ IDENT COLON_ junk RPAREN_ COLON_EQ_ expr IN expr

State 93:
## Known stack suffix:
## LET IDENT
## LR(1) items:
expr -> LET IDENT . COLON_EQ_ expr IN expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> LET IDENT . COLON_ junk COLON_EQ_ expr IN expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
## Transitions:
-- On COLON_EQ_ shift to state 94
-- On COLON_ shift to state 98
## Reductions:

State 94:
## Known stack suffix:
## LET IDENT COLON_EQ_
## LR(1) items:
expr -> LET IDENT COLON_EQ_ . expr IN expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
## Transitions:
-- On TRUE shift to state 1
-- On TILDE_ shift to state 2
-- On STRING shift to state 3
-- On NUM shift to state 4
-- On MATCH shift to state 5
-- On LPAREN_ shift to state 6
-- On LET shift to state 7
-- On IF shift to state 36
-- On IDENT shift to state 37
-- On FUN shift to state 38
-- On FORALL shift to state 49
-- On FALSE shift to state 54
-- On EXISTS shift to state 55
-- On AROBAS_ shift to state 58
-- On expr1 shift to state 63
-- On expr shift to state 95
## Reductions:

State 95:
## Known stack suffix:
## LET IDENT COLON_EQ_ expr
## LR(1) items:
expr -> LET IDENT COLON_EQ_ expr . IN expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> expr . DASH_GT_ expr [ SLASH_BACKSL_ LT_GT_ LT_DASH_GT_ IN EQ_ DASH_GT_ BACKSL_SLASH_ ]
expr -> expr . LT_DASH_GT_ expr [ SLASH_BACKSL_ LT_GT_ LT_DASH_GT_ IN EQ_ DASH_GT_ BACKSL_SLASH_ ]
expr -> expr . BACKSL_SLASH_ expr [ SLASH_BACKSL_ LT_GT_ LT_DASH_GT_ IN EQ_ DASH_GT_ BACKSL_SLASH_ ]
expr -> expr . SLASH_BACKSL_ expr [ SLASH_BACKSL_ LT_GT_ LT_DASH_GT_ IN EQ_ DASH_GT_ BACKSL_SLASH_ ]
expr -> expr . EQ_ expr [ SLASH_BACKSL_ LT_GT_ LT_DASH_GT_ IN EQ_ DASH_GT_ BACKSL_SLASH_ ]
expr -> expr . LT_GT_ expr [ SLASH_BACKSL_ LT_GT_ LT_DASH_GT_ IN EQ_ DASH_GT_ BACKSL_SLASH_ ]
## Transitions:
-- On SLASH_BACKSL_ shift to state 66
-- On LT_GT_ shift to state 68
-- On LT_DASH_GT_ shift to state 72
-- On IN shift to state 96
-- On EQ_ shift to state 70
-- On DASH_GT_ shift to state 74
-- On BACKSL_SLASH_ shift to state 76
## Reductions:

State 96:
## Known stack suffix:
## LET IDENT COLON_EQ_ expr IN
## LR(1) items:
expr -> LET IDENT COLON_EQ_ expr IN . expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
## Transitions:
-- On TRUE shift to state 1
-- On TILDE_ shift to state 2
-- On STRING shift to state 3
-- On NUM shift to state 4
-- On MATCH shift to state 5
-- On LPAREN_ shift to state 6
-- On LET shift to state 7
-- On IF shift to state 36
-- On IDENT shift to state 37
-- On FUN shift to state 38
-- On FORALL shift to state 49
-- On FALSE shift to state 54
-- On EXISTS shift to state 55
-- On AROBAS_ shift to state 58
-- On expr1 shift to state 63
-- On expr shift to state 97
## Reductions:

State 97:
## Known stack suffix:
## LET IDENT COLON_EQ_ expr IN expr
## LR(1) items:
expr -> LET IDENT COLON_EQ_ expr IN expr . [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> expr . DASH_GT_ expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> expr . LT_DASH_GT_ expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> expr . BACKSL_SLASH_ expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> expr . SLASH_BACKSL_ expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> expr . EQ_ expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> expr . LT_GT_ expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
## Transitions:
-- On SLASH_BACKSL_ shift to state 66
-- On LT_GT_ shift to state 68
-- On LT_DASH_GT_ shift to state 72
-- On EQ_ shift to state 70
-- On DASH_GT_ shift to state 74
-- On BACKSL_SLASH_ shift to state 76
## Reductions:
-- On WITH reduce production expr -> LET IDENT COLON_EQ_ expr IN expr
-- On THEN reduce production expr -> LET IDENT COLON_EQ_ expr IN expr
-- On STAR_ reduce production expr -> LET IDENT COLON_EQ_ expr IN expr
-- On RPAREN_ reduce production expr -> LET IDENT COLON_EQ_ expr IN expr
-- On RBRACE_ reduce production expr -> LET IDENT COLON_EQ_ expr IN expr
-- On PERIOD_ reduce production expr -> LET IDENT COLON_EQ_ expr IN expr
-- On PERCENT_ reduce production expr -> LET IDENT COLON_EQ_ expr IN expr
-- On PARAMETER reduce production expr -> LET IDENT COLON_EQ_ expr IN expr
-- On MUSTUSE reduce production expr -> LET IDENT COLON_EQ_ expr IN expr
-- On LBRACE_ reduce production expr -> LET IDENT COLON_EQ_ expr IN expr
-- On INDUCTIVE reduce production expr -> LET IDENT COLON_EQ_ expr IN expr
-- On IN reduce production expr -> LET IDENT COLON_EQ_ expr IN expr
-- On FUNCTION reduce production expr -> LET IDENT COLON_EQ_ expr IN expr
-- On FIXPOINT reduce production expr -> LET IDENT COLON_EQ_ expr IN expr
-- On EQ_GT_ reduce production expr -> LET IDENT COLON_EQ_ expr IN expr
-- On EOF reduce production expr -> LET IDENT COLON_EQ_ expr IN expr
-- On ENDPROOF reduce production expr -> LET IDENT COLON_EQ_ expr IN expr
-- On END reduce production expr -> LET IDENT COLON_EQ_ expr IN expr
-- On ELSE reduce production expr -> LET IDENT COLON_EQ_ expr IN expr
-- On DEPENDS reduce production expr -> LET IDENT COLON_EQ_ expr IN expr
-- On DEFINITION reduce production expr -> LET IDENT COLON_EQ_ expr IN expr
-- On COMMA_ reduce production expr -> LET IDENT COLON_EQ_ expr IN expr
-- On COLON_EQ_ reduce production expr -> LET IDENT COLON_EQ_ expr IN expr
-- On BAR_ reduce production expr -> LET IDENT COLON_EQ_ expr IN expr

State 98:
## Known stack suffix:
## LET IDENT COLON_
## LR(1) items:
expr -> LET IDENT COLON_ . junk COLON_EQ_ expr IN expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
## Transitions:
-- On STAR_ shift to state 11
-- On PERIOD_LPAREN_ shift to state 12
-- On PERIOD_ shift to state 13
-- On PERCENT_ shift to state 14
-- On NUM shift to state 15
-- On LPAREN_RPAREN_ shift to state 16
-- On LPAREN_ shift to state 17
-- On IDENT shift to state 18
-- On COLON_ shift to state 19
-- On junk shift to state 99
## Reductions:
-- On COLON_EQ_ reduce production junk ->

State 99:
## Known stack suffix:
## LET IDENT COLON_ junk
## LR(1) items:
expr -> LET IDENT COLON_ junk . COLON_EQ_ expr IN expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
## Transitions:
-- On COLON_EQ_ shift to state 100
## Reductions:

State 100:
## Known stack suffix:
## LET IDENT COLON_ junk COLON_EQ_
## LR(1) items:
expr -> LET IDENT COLON_ junk COLON_EQ_ . expr IN expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
## Transitions:
-- On TRUE shift to state 1
-- On TILDE_ shift to state 2
-- On STRING shift to state 3
-- On NUM shift to state 4
-- On MATCH shift to state 5
-- On LPAREN_ shift to state 6
-- On LET shift to state 7
-- On IF shift to state 36
-- On IDENT shift to state 37
-- On FUN shift to state 38
-- On FORALL shift to state 49
-- On FALSE shift to state 54
-- On EXISTS shift to state 55
-- On AROBAS_ shift to state 58
-- On expr1 shift to state 63
-- On expr shift to state 101
## Reductions:

State 101:
## Known stack suffix:
## LET IDENT COLON_ junk COLON_EQ_ expr
## LR(1) items:
expr -> LET IDENT COLON_ junk COLON_EQ_ expr . IN expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> expr . DASH_GT_ expr [ SLASH_BACKSL_ LT_GT_ LT_DASH_GT_ IN EQ_ DASH_GT_ BACKSL_SLASH_ ]
expr -> expr . LT_DASH_GT_ expr [ SLASH_BACKSL_ LT_GT_ LT_DASH_GT_ IN EQ_ DASH_GT_ BACKSL_SLASH_ ]
expr -> expr . BACKSL_SLASH_ expr [ SLASH_BACKSL_ LT_GT_ LT_DASH_GT_ IN EQ_ DASH_GT_ BACKSL_SLASH_ ]
expr -> expr . SLASH_BACKSL_ expr [ SLASH_BACKSL_ LT_GT_ LT_DASH_GT_ IN EQ_ DASH_GT_ BACKSL_SLASH_ ]
expr -> expr . EQ_ expr [ SLASH_BACKSL_ LT_GT_ LT_DASH_GT_ IN EQ_ DASH_GT_ BACKSL_SLASH_ ]
expr -> expr . LT_GT_ expr [ SLASH_BACKSL_ LT_GT_ LT_DASH_GT_ IN EQ_ DASH_GT_ BACKSL_SLASH_ ]
## Transitions:
-- On SLASH_BACKSL_ shift to state 66
-- On LT_GT_ shift to state 68
-- On LT_DASH_GT_ shift to state 72
-- On IN shift to state 102
-- On EQ_ shift to state 70
-- On DASH_GT_ shift to state 74
-- On BACKSL_SLASH_ shift to state 76
## Reductions:

State 102:
## Known stack suffix:
## LET IDENT COLON_ junk COLON_EQ_ expr IN
## LR(1) items:
expr -> LET IDENT COLON_ junk COLON_EQ_ expr IN . expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
## Transitions:
-- On TRUE shift to state 1
-- On TILDE_ shift to state 2
-- On STRING shift to state 3
-- On NUM shift to state 4
-- On MATCH shift to state 5
-- On LPAREN_ shift to state 6
-- On LET shift to state 7
-- On IF shift to state 36
-- On IDENT shift to state 37
-- On FUN shift to state 38
-- On FORALL shift to state 49
-- On FALSE shift to state 54
-- On EXISTS shift to state 55
-- On AROBAS_ shift to state 58
-- On expr1 shift to state 63
-- On expr shift to state 103
## Reductions:

State 103:
## Known stack suffix:
## LET IDENT COLON_ junk COLON_EQ_ expr IN expr
## LR(1) items:
expr -> LET IDENT COLON_ junk COLON_EQ_ expr IN expr . [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> expr . DASH_GT_ expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> expr . LT_DASH_GT_ expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> expr . BACKSL_SLASH_ expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> expr . SLASH_BACKSL_ expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> expr . EQ_ expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> expr . LT_GT_ expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
## Transitions:
-- On SLASH_BACKSL_ shift to state 66
-- On LT_GT_ shift to state 68
-- On LT_DASH_GT_ shift to state 72
-- On EQ_ shift to state 70
-- On DASH_GT_ shift to state 74
-- On BACKSL_SLASH_ shift to state 76
## Reductions:
-- On WITH reduce production expr -> LET IDENT COLON_ junk COLON_EQ_ expr IN expr
-- On THEN reduce production expr -> LET IDENT COLON_ junk COLON_EQ_ expr IN expr
-- On STAR_ reduce production expr -> LET IDENT COLON_ junk COLON_EQ_ expr IN expr
-- On RPAREN_ reduce production expr -> LET IDENT COLON_ junk COLON_EQ_ expr IN expr
-- On RBRACE_ reduce production expr -> LET IDENT COLON_ junk COLON_EQ_ expr IN expr
-- On PERIOD_ reduce production expr -> LET IDENT COLON_ junk COLON_EQ_ expr IN expr
-- On PERCENT_ reduce production expr -> LET IDENT COLON_ junk COLON_EQ_ expr IN expr
-- On PARAMETER reduce production expr -> LET IDENT COLON_ junk COLON_EQ_ expr IN expr
-- On MUSTUSE reduce production expr -> LET IDENT COLON_ junk COLON_EQ_ expr IN expr
-- On LBRACE_ reduce production expr -> LET IDENT COLON_ junk COLON_EQ_ expr IN expr
-- On INDUCTIVE reduce production expr -> LET IDENT COLON_ junk COLON_EQ_ expr IN expr
-- On IN reduce production expr -> LET IDENT COLON_ junk COLON_EQ_ expr IN expr
-- On FUNCTION reduce production expr -> LET IDENT COLON_ junk COLON_EQ_ expr IN expr
-- On FIXPOINT reduce production expr -> LET IDENT COLON_ junk COLON_EQ_ expr IN expr
-- On EQ_GT_ reduce production expr -> LET IDENT COLON_ junk COLON_EQ_ expr IN expr
-- On EOF reduce production expr -> LET IDENT COLON_ junk COLON_EQ_ expr IN expr
-- On ENDPROOF reduce production expr -> LET IDENT COLON_ junk COLON_EQ_ expr IN expr
-- On END reduce production expr -> LET IDENT COLON_ junk COLON_EQ_ expr IN expr
-- On ELSE reduce production expr -> LET IDENT COLON_ junk COLON_EQ_ expr IN expr
-- On DEPENDS reduce production expr -> LET IDENT COLON_ junk COLON_EQ_ expr IN expr
-- On DEFINITION reduce production expr -> LET IDENT COLON_ junk COLON_EQ_ expr IN expr
-- On COMMA_ reduce production expr -> LET IDENT COLON_ junk COLON_EQ_ expr IN expr
-- On COLON_EQ_ reduce production expr -> LET IDENT COLON_ junk COLON_EQ_ expr IN expr
-- On BAR_ reduce production expr -> LET IDENT COLON_ junk COLON_EQ_ expr IN expr

State 104:
## Known stack suffix:
## FIX
## LR(1) items:
fix -> FIX . IDENT bindings LBRACE_ STRUCT IDENT RBRACE_ COLON_ typ COLON_EQ_ expr [ IN ]
## Transitions:
-- On IDENT shift to state 105
## Reductions:

State 105:
## Known stack suffix:
## FIX IDENT
## LR(1) items:
fix -> FIX IDENT . bindings LBRACE_ STRUCT IDENT RBRACE_ COLON_ typ COLON_EQ_ expr [ IN ]
## Transitions:
-- On LPAREN_ shift to state 39
-- On IDENT shift to state 50
-- On simplebinding shift to state 51
-- On idlist shift to state 47
-- On bindings shift to state 106
-- On binding_list shift to state 78
## Reductions:
-- On LBRACE_ reduce production binding_list ->
-- On COLON_ reduce production idlist ->

State 106:
## Known stack suffix:
## FIX IDENT bindings
## LR(1) items:
fix -> FIX IDENT bindings . LBRACE_ STRUCT IDENT RBRACE_ COLON_ typ COLON_EQ_ expr [ IN ]
## Transitions:
-- On LBRACE_ shift to state 107
## Reductions:

State 107:
## Known stack suffix:
## FIX IDENT bindings LBRACE_
## LR(1) items:
fix -> FIX IDENT bindings LBRACE_ . STRUCT IDENT RBRACE_ COLON_ typ COLON_EQ_ expr [ IN ]
## Transitions:
-- On STRUCT shift to state 108
## Reductions:

State 108:
## Known stack suffix:
## FIX IDENT bindings LBRACE_ STRUCT
## LR(1) items:
fix -> FIX IDENT bindings LBRACE_ STRUCT . IDENT RBRACE_ COLON_ typ COLON_EQ_ expr [ IN ]
## Transitions:
-- On IDENT shift to state 109
## Reductions:

State 109:
## Known stack suffix:
## FIX IDENT bindings LBRACE_ STRUCT IDENT
## LR(1) items:
fix -> FIX IDENT bindings LBRACE_ STRUCT IDENT . RBRACE_ COLON_ typ COLON_EQ_ expr [ IN ]
## Transitions:
-- On RBRACE_ shift to state 110
## Reductions:

State 110:
## Known stack suffix:
## FIX IDENT bindings LBRACE_ STRUCT IDENT RBRACE_
## LR(1) items:
fix -> FIX IDENT bindings LBRACE_ STRUCT IDENT RBRACE_ . COLON_ typ COLON_EQ_ expr [ IN ]
## Transitions:
-- On COLON_ shift to state 111
## Reductions:

State 111:
## Known stack suffix:
## FIX IDENT bindings LBRACE_ STRUCT IDENT RBRACE_ COLON_
## LR(1) items:
fix -> FIX IDENT bindings LBRACE_ STRUCT IDENT RBRACE_ COLON_ . typ COLON_EQ_ expr [ IN ]
## Transitions:
-- On TRUE shift to state 1
-- On TILDE_ shift to state 2
-- On STRING shift to state 3
-- On NUM shift to state 4
-- On MATCH shift to state 5
-- On LPAREN_ shift to state 6
-- On LET shift to state 7
-- On IF shift to state 36
-- On IDENT shift to state 37
-- On FUN shift to state 38
-- On FORALL shift to state 49
-- On FALSE shift to state 54
-- On EXISTS shift to state 55
-- On AROBAS_ shift to state 58
-- On typ shift to state 112
-- On expr1 shift to state 63
-- On expr shift to state 81
## Reductions:

State 112:
## Known stack suffix:
## FIX IDENT bindings LBRACE_ STRUCT IDENT RBRACE_ COLON_ typ
## LR(1) items:
fix -> FIX IDENT bindings LBRACE_ STRUCT IDENT RBRACE_ COLON_ typ . COLON_EQ_ expr [ IN ]
## Transitions:
-- On COLON_EQ_ shift to state 113
## Reductions:

State 113:
## Known stack suffix:
## FIX IDENT bindings LBRACE_ STRUCT IDENT RBRACE_ COLON_ typ COLON_EQ_
## LR(1) items:
fix -> FIX IDENT bindings LBRACE_ STRUCT IDENT RBRACE_ COLON_ typ COLON_EQ_ . expr [ IN ]
## Transitions:
-- On TRUE shift to state 1
-- On TILDE_ shift to state 2
-- On STRING shift to state 3
-- On NUM shift to state 4
-- On MATCH shift to state 5
-- On LPAREN_ shift to state 6
-- On LET shift to state 7
-- On IF shift to state 36
-- On IDENT shift to state 37
-- On FUN shift to state 38
-- On FORALL shift to state 49
-- On FALSE shift to state 54
-- On EXISTS shift to state 55
-- On AROBAS_ shift to state 58
-- On expr1 shift to state 63
-- On expr shift to state 114
## Reductions:

State 114:
## Known stack suffix:
## FIX IDENT bindings LBRACE_ STRUCT IDENT RBRACE_ COLON_ typ COLON_EQ_ expr
## LR(1) items:
expr -> expr . DASH_GT_ expr [ SLASH_BACKSL_ LT_GT_ LT_DASH_GT_ IN EQ_ DASH_GT_ BACKSL_SLASH_ ]
expr -> expr . LT_DASH_GT_ expr [ SLASH_BACKSL_ LT_GT_ LT_DASH_GT_ IN EQ_ DASH_GT_ BACKSL_SLASH_ ]
expr -> expr . BACKSL_SLASH_ expr [ SLASH_BACKSL_ LT_GT_ LT_DASH_GT_ IN EQ_ DASH_GT_ BACKSL_SLASH_ ]
expr -> expr . SLASH_BACKSL_ expr [ SLASH_BACKSL_ LT_GT_ LT_DASH_GT_ IN EQ_ DASH_GT_ BACKSL_SLASH_ ]
expr -> expr . EQ_ expr [ SLASH_BACKSL_ LT_GT_ LT_DASH_GT_ IN EQ_ DASH_GT_ BACKSL_SLASH_ ]
expr -> expr . LT_GT_ expr [ SLASH_BACKSL_ LT_GT_ LT_DASH_GT_ IN EQ_ DASH_GT_ BACKSL_SLASH_ ]
fix -> FIX IDENT bindings LBRACE_ STRUCT IDENT RBRACE_ COLON_ typ COLON_EQ_ expr . [ IN ]
## Transitions:
-- On SLASH_BACKSL_ shift to state 66
-- On LT_GT_ shift to state 68
-- On LT_DASH_GT_ shift to state 72
-- On EQ_ shift to state 70
-- On DASH_GT_ shift to state 74
-- On BACKSL_SLASH_ shift to state 76
## Reductions:
-- On IN reduce production fix -> FIX IDENT bindings LBRACE_ STRUCT IDENT RBRACE_ COLON_ typ COLON_EQ_ expr

State 115:
## Known stack suffix:
## LET fix
## LR(1) items:
expr -> LET fix . IN expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
## Transitions:
-- On IN shift to state 116
## Reductions:

State 116:
## Known stack suffix:
## LET fix IN
## LR(1) items:
expr -> LET fix IN . expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
## Transitions:
-- On TRUE shift to state 1
-- On TILDE_ shift to state 2
-- On STRING shift to state 3
-- On NUM shift to state 4
-- On MATCH shift to state 5
-- On LPAREN_ shift to state 6
-- On LET shift to state 7
-- On IF shift to state 36
-- On IDENT shift to state 37
-- On FUN shift to state 38
-- On FORALL shift to state 49
-- On FALSE shift to state 54
-- On EXISTS shift to state 55
-- On AROBAS_ shift to state 58
-- On expr1 shift to state 63
-- On expr shift to state 117
## Reductions:

State 117:
## Known stack suffix:
## LET fix IN expr
## LR(1) items:
expr -> LET fix IN expr . [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> expr . DASH_GT_ expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> expr . LT_DASH_GT_ expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> expr . BACKSL_SLASH_ expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> expr . SLASH_BACKSL_ expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> expr . EQ_ expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> expr . LT_GT_ expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
## Transitions:
-- On SLASH_BACKSL_ shift to state 66
-- On LT_GT_ shift to state 68
-- On LT_DASH_GT_ shift to state 72
-- On EQ_ shift to state 70
-- On DASH_GT_ shift to state 74
-- On BACKSL_SLASH_ shift to state 76
## Reductions:
-- On WITH reduce production expr -> LET fix IN expr
-- On THEN reduce production expr -> LET fix IN expr
-- On STAR_ reduce production expr -> LET fix IN expr
-- On RPAREN_ reduce production expr -> LET fix IN expr
-- On RBRACE_ reduce production expr -> LET fix IN expr
-- On PERIOD_ reduce production expr -> LET fix IN expr
-- On PERCENT_ reduce production expr -> LET fix IN expr
-- On PARAMETER reduce production expr -> LET fix IN expr
-- On MUSTUSE reduce production expr -> LET fix IN expr
-- On LBRACE_ reduce production expr -> LET fix IN expr
-- On INDUCTIVE reduce production expr -> LET fix IN expr
-- On IN reduce production expr -> LET fix IN expr
-- On FUNCTION reduce production expr -> LET fix IN expr
-- On FIXPOINT reduce production expr -> LET fix IN expr
-- On EQ_GT_ reduce production expr -> LET fix IN expr
-- On EOF reduce production expr -> LET fix IN expr
-- On ENDPROOF reduce production expr -> LET fix IN expr
-- On END reduce production expr -> LET fix IN expr
-- On ELSE reduce production expr -> LET fix IN expr
-- On DEPENDS reduce production expr -> LET fix IN expr
-- On DEFINITION reduce production expr -> LET fix IN expr
-- On COMMA_ reduce production expr -> LET fix IN expr
-- On COLON_EQ_ reduce production expr -> LET fix IN expr
-- On BAR_ reduce production expr -> LET fix IN expr

State 118:
## Known stack suffix:
## LPAREN_ expr
## LR(1) items:
expr -> expr . DASH_GT_ expr [ STAR_ SLASH_BACKSL_ RPAREN_ PERCENT_ LT_GT_ LT_DASH_GT_ EQ_ DASH_GT_ COMMA_ BACKSL_SLASH_ ]
expr -> expr . LT_DASH_GT_ expr [ STAR_ SLASH_BACKSL_ RPAREN_ PERCENT_ LT_GT_ LT_DASH_GT_ EQ_ DASH_GT_ COMMA_ BACKSL_SLASH_ ]
expr -> expr . BACKSL_SLASH_ expr [ STAR_ SLASH_BACKSL_ RPAREN_ PERCENT_ LT_GT_ LT_DASH_GT_ EQ_ DASH_GT_ COMMA_ BACKSL_SLASH_ ]
expr -> expr . SLASH_BACKSL_ expr [ STAR_ SLASH_BACKSL_ RPAREN_ PERCENT_ LT_GT_ LT_DASH_GT_ EQ_ DASH_GT_ COMMA_ BACKSL_SLASH_ ]
expr -> expr . EQ_ expr [ STAR_ SLASH_BACKSL_ RPAREN_ PERCENT_ LT_GT_ LT_DASH_GT_ EQ_ DASH_GT_ COMMA_ BACKSL_SLASH_ ]
expr -> expr . LT_GT_ expr [ STAR_ SLASH_BACKSL_ RPAREN_ PERCENT_ LT_GT_ LT_DASH_GT_ EQ_ DASH_GT_ COMMA_ BACKSL_SLASH_ ]
expr1 -> LPAREN_ expr . comma_expr_list RPAREN_ [ WITH TRUE THEN STRING STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER NUM MUSTUSE LT_GT_ LT_DASH_GT_ LPAREN_ LBRACE_ INDUCTIVE IN IDENT FUNCTION FIXPOINT FALSE EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr1 -> LPAREN_ expr . STAR_ expr RPAREN_ [ WITH TRUE THEN STRING STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER NUM MUSTUSE LT_GT_ LT_DASH_GT_ LPAREN_ LBRACE_ INDUCTIVE IN IDENT FUNCTION FIXPOINT FALSE EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr1 -> LPAREN_ expr . PERCENT_ IDENT RPAREN_ [ WITH TRUE THEN STRING STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER NUM MUSTUSE LT_GT_ LT_DASH_GT_ LPAREN_ LBRACE_ INDUCTIVE IN IDENT FUNCTION FIXPOINT FALSE EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr1 -> LPAREN_ expr . RPAREN_ [ WITH TRUE THEN STRING STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER NUM MUSTUSE LT_GT_ LT_DASH_GT_ LPAREN_ LBRACE_ INDUCTIVE IN IDENT FUNCTION FIXPOINT FALSE EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
## Transitions:
-- On STAR_ shift to state 119
-- On SLASH_BACKSL_ shift to state 66
-- On RPAREN_ shift to state 122
-- On PERCENT_ shift to state 123
-- On LT_GT_ shift to state 68
-- On LT_DASH_GT_ shift to state 72
-- On EQ_ shift to state 70
-- On DASH_GT_ shift to state 74
-- On COMMA_ shift to state 126
-- On BACKSL_SLASH_ shift to state 76
-- On comma_expr_list shift to state 129
## Reductions:

State 119:
## Known stack suffix:
## LPAREN_ expr STAR_
## LR(1) items:
expr1 -> LPAREN_ expr STAR_ . expr RPAREN_ [ WITH TRUE THEN STRING STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER NUM MUSTUSE LT_GT_ LT_DASH_GT_ LPAREN_ LBRACE_ INDUCTIVE IN IDENT FUNCTION FIXPOINT FALSE EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
## Transitions:
-- On TRUE shift to state 1
-- On TILDE_ shift to state 2
-- On STRING shift to state 3
-- On NUM shift to state 4
-- On MATCH shift to state 5
-- On LPAREN_ shift to state 6
-- On LET shift to state 7
-- On IF shift to state 36
-- On IDENT shift to state 37
-- On FUN shift to state 38
-- On FORALL shift to state 49
-- On FALSE shift to state 54
-- On EXISTS shift to state 55
-- On AROBAS_ shift to state 58
-- On expr1 shift to state 63
-- On expr shift to state 120
## Reductions:

State 120:
## Known stack suffix:
## LPAREN_ expr STAR_ expr
## LR(1) items:
expr -> expr . DASH_GT_ expr [ SLASH_BACKSL_ RPAREN_ LT_GT_ LT_DASH_GT_ EQ_ DASH_GT_ BACKSL_SLASH_ ]
expr -> expr . LT_DASH_GT_ expr [ SLASH_BACKSL_ RPAREN_ LT_GT_ LT_DASH_GT_ EQ_ DASH_GT_ BACKSL_SLASH_ ]
expr -> expr . BACKSL_SLASH_ expr [ SLASH_BACKSL_ RPAREN_ LT_GT_ LT_DASH_GT_ EQ_ DASH_GT_ BACKSL_SLASH_ ]
expr -> expr . SLASH_BACKSL_ expr [ SLASH_BACKSL_ RPAREN_ LT_GT_ LT_DASH_GT_ EQ_ DASH_GT_ BACKSL_SLASH_ ]
expr -> expr . EQ_ expr [ SLASH_BACKSL_ RPAREN_ LT_GT_ LT_DASH_GT_ EQ_ DASH_GT_ BACKSL_SLASH_ ]
expr -> expr . LT_GT_ expr [ SLASH_BACKSL_ RPAREN_ LT_GT_ LT_DASH_GT_ EQ_ DASH_GT_ BACKSL_SLASH_ ]
expr1 -> LPAREN_ expr STAR_ expr . RPAREN_ [ WITH TRUE THEN STRING STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER NUM MUSTUSE LT_GT_ LT_DASH_GT_ LPAREN_ LBRACE_ INDUCTIVE IN IDENT FUNCTION FIXPOINT FALSE EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
## Transitions:
-- On SLASH_BACKSL_ shift to state 66
-- On RPAREN_ shift to state 121
-- On LT_GT_ shift to state 68
-- On LT_DASH_GT_ shift to state 72
-- On EQ_ shift to state 70
-- On DASH_GT_ shift to state 74
-- On BACKSL_SLASH_ shift to state 76
## Reductions:

State 121:
## Known stack suffix:
## LPAREN_ expr STAR_ expr RPAREN_
## LR(1) items:
expr1 -> LPAREN_ expr STAR_ expr RPAREN_ . [ WITH TRUE THEN STRING STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER NUM MUSTUSE LT_GT_ LT_DASH_GT_ LPAREN_ LBRACE_ INDUCTIVE IN IDENT FUNCTION FIXPOINT FALSE EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
## Transitions:
## Reductions:
-- On WITH reduce production expr1 -> LPAREN_ expr STAR_ expr RPAREN_
-- On TRUE reduce production expr1 -> LPAREN_ expr STAR_ expr RPAREN_
-- On THEN reduce production expr1 -> LPAREN_ expr STAR_ expr RPAREN_
-- On STRING reduce production expr1 -> LPAREN_ expr STAR_ expr RPAREN_
-- On STAR_ reduce production expr1 -> LPAREN_ expr STAR_ expr RPAREN_
-- On SLASH_BACKSL_ reduce production expr1 -> LPAREN_ expr STAR_ expr RPAREN_
-- On RPAREN_ reduce production expr1 -> LPAREN_ expr STAR_ expr RPAREN_
-- On RBRACE_ reduce production expr1 -> LPAREN_ expr STAR_ expr RPAREN_
-- On PERIOD_ reduce production expr1 -> LPAREN_ expr STAR_ expr RPAREN_
-- On PERCENT_ reduce production expr1 -> LPAREN_ expr STAR_ expr RPAREN_
-- On PARAMETER reduce production expr1 -> LPAREN_ expr STAR_ expr RPAREN_
-- On NUM reduce production expr1 -> LPAREN_ expr STAR_ expr RPAREN_
-- On MUSTUSE reduce production expr1 -> LPAREN_ expr STAR_ expr RPAREN_
-- On LT_GT_ reduce production expr1 -> LPAREN_ expr STAR_ expr RPAREN_
-- On LT_DASH_GT_ reduce production expr1 -> LPAREN_ expr STAR_ expr RPAREN_
-- On LPAREN_ reduce production expr1 -> LPAREN_ expr STAR_ expr RPAREN_
-- On LBRACE_ reduce production expr1 -> LPAREN_ expr STAR_ expr RPAREN_
-- On INDUCTIVE reduce production expr1 -> LPAREN_ expr STAR_ expr RPAREN_
-- On IN reduce production expr1 -> LPAREN_ expr STAR_ expr RPAREN_
-- On IDENT reduce production expr1 -> LPAREN_ expr STAR_ expr RPAREN_
-- On FUNCTION reduce production expr1 -> LPAREN_ expr STAR_ expr RPAREN_
-- On FIXPOINT reduce production expr1 -> LPAREN_ expr STAR_ expr RPAREN_
-- On FALSE reduce production expr1 -> LPAREN_ expr STAR_ expr RPAREN_
-- On EQ_GT_ reduce production expr1 -> LPAREN_ expr STAR_ expr RPAREN_
-- On EQ_ reduce production expr1 -> LPAREN_ expr STAR_ expr RPAREN_
-- On EOF reduce production expr1 -> LPAREN_ expr STAR_ expr RPAREN_
-- On ENDPROOF reduce production expr1 -> LPAREN_ expr STAR_ expr RPAREN_
-- On END reduce production expr1 -> LPAREN_ expr STAR_ expr RPAREN_
-- On ELSE reduce production expr1 -> LPAREN_ expr STAR_ expr RPAREN_
-- On DEPENDS reduce production expr1 -> LPAREN_ expr STAR_ expr RPAREN_
-- On DEFINITION reduce production expr1 -> LPAREN_ expr STAR_ expr RPAREN_
-- On DASH_GT_ reduce production expr1 -> LPAREN_ expr STAR_ expr RPAREN_
-- On COMMA_ reduce production expr1 -> LPAREN_ expr STAR_ expr RPAREN_
-- On COLON_EQ_ reduce production expr1 -> LPAREN_ expr STAR_ expr RPAREN_
-- On BAR_ reduce production expr1 -> LPAREN_ expr STAR_ expr RPAREN_
-- On BACKSL_SLASH_ reduce production expr1 -> LPAREN_ expr STAR_ expr RPAREN_

State 122:
## Known stack suffix:
## LPAREN_ expr RPAREN_
## LR(1) items:
expr1 -> LPAREN_ expr RPAREN_ . [ WITH TRUE THEN STRING STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER NUM MUSTUSE LT_GT_ LT_DASH_GT_ LPAREN_ LBRACE_ INDUCTIVE IN IDENT FUNCTION FIXPOINT FALSE EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
## Transitions:
## Reductions:
-- On WITH reduce production expr1 -> LPAREN_ expr RPAREN_
-- On TRUE reduce production expr1 -> LPAREN_ expr RPAREN_
-- On THEN reduce production expr1 -> LPAREN_ expr RPAREN_
-- On STRING reduce production expr1 -> LPAREN_ expr RPAREN_
-- On STAR_ reduce production expr1 -> LPAREN_ expr RPAREN_
-- On SLASH_BACKSL_ reduce production expr1 -> LPAREN_ expr RPAREN_
-- On RPAREN_ reduce production expr1 -> LPAREN_ expr RPAREN_
-- On RBRACE_ reduce production expr1 -> LPAREN_ expr RPAREN_
-- On PERIOD_ reduce production expr1 -> LPAREN_ expr RPAREN_
-- On PERCENT_ reduce production expr1 -> LPAREN_ expr RPAREN_
-- On PARAMETER reduce production expr1 -> LPAREN_ expr RPAREN_
-- On NUM reduce production expr1 -> LPAREN_ expr RPAREN_
-- On MUSTUSE reduce production expr1 -> LPAREN_ expr RPAREN_
-- On LT_GT_ reduce production expr1 -> LPAREN_ expr RPAREN_
-- On LT_DASH_GT_ reduce production expr1 -> LPAREN_ expr RPAREN_
-- On LPAREN_ reduce production expr1 -> LPAREN_ expr RPAREN_
-- On LBRACE_ reduce production expr1 -> LPAREN_ expr RPAREN_
-- On INDUCTIVE reduce production expr1 -> LPAREN_ expr RPAREN_
-- On IN reduce production expr1 -> LPAREN_ expr RPAREN_
-- On IDENT reduce production expr1 -> LPAREN_ expr RPAREN_
-- On FUNCTION reduce production expr1 -> LPAREN_ expr RPAREN_
-- On FIXPOINT reduce production expr1 -> LPAREN_ expr RPAREN_
-- On FALSE reduce production expr1 -> LPAREN_ expr RPAREN_
-- On EQ_GT_ reduce production expr1 -> LPAREN_ expr RPAREN_
-- On EQ_ reduce production expr1 -> LPAREN_ expr RPAREN_
-- On EOF reduce production expr1 -> LPAREN_ expr RPAREN_
-- On ENDPROOF reduce production expr1 -> LPAREN_ expr RPAREN_
-- On END reduce production expr1 -> LPAREN_ expr RPAREN_
-- On ELSE reduce production expr1 -> LPAREN_ expr RPAREN_
-- On DEPENDS reduce production expr1 -> LPAREN_ expr RPAREN_
-- On DEFINITION reduce production expr1 -> LPAREN_ expr RPAREN_
-- On DASH_GT_ reduce production expr1 -> LPAREN_ expr RPAREN_
-- On COMMA_ reduce production expr1 -> LPAREN_ expr RPAREN_
-- On COLON_EQ_ reduce production expr1 -> LPAREN_ expr RPAREN_
-- On BAR_ reduce production expr1 -> LPAREN_ expr RPAREN_
-- On BACKSL_SLASH_ reduce production expr1 -> LPAREN_ expr RPAREN_

State 123:
## Known stack suffix:
## LPAREN_ expr PERCENT_
## LR(1) items:
expr1 -> LPAREN_ expr PERCENT_ . IDENT RPAREN_ [ WITH TRUE THEN STRING STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER NUM MUSTUSE LT_GT_ LT_DASH_GT_ LPAREN_ LBRACE_ INDUCTIVE IN IDENT FUNCTION FIXPOINT FALSE EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
## Transitions:
-- On IDENT shift to state 124
## Reductions:

State 124:
## Known stack suffix:
## LPAREN_ expr PERCENT_ IDENT
## LR(1) items:
expr1 -> LPAREN_ expr PERCENT_ IDENT . RPAREN_ [ WITH TRUE THEN STRING STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER NUM MUSTUSE LT_GT_ LT_DASH_GT_ LPAREN_ LBRACE_ INDUCTIVE IN IDENT FUNCTION FIXPOINT FALSE EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
## Transitions:
-- On RPAREN_ shift to state 125
## Reductions:

State 125:
## Known stack suffix:
## LPAREN_ expr PERCENT_ IDENT RPAREN_
## LR(1) items:
expr1 -> LPAREN_ expr PERCENT_ IDENT RPAREN_ . [ WITH TRUE THEN STRING STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER NUM MUSTUSE LT_GT_ LT_DASH_GT_ LPAREN_ LBRACE_ INDUCTIVE IN IDENT FUNCTION FIXPOINT FALSE EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
## Transitions:
## Reductions:
-- On WITH reduce production expr1 -> LPAREN_ expr PERCENT_ IDENT RPAREN_
-- On TRUE reduce production expr1 -> LPAREN_ expr PERCENT_ IDENT RPAREN_
-- On THEN reduce production expr1 -> LPAREN_ expr PERCENT_ IDENT RPAREN_
-- On STRING reduce production expr1 -> LPAREN_ expr PERCENT_ IDENT RPAREN_
-- On STAR_ reduce production expr1 -> LPAREN_ expr PERCENT_ IDENT RPAREN_
-- On SLASH_BACKSL_ reduce production expr1 -> LPAREN_ expr PERCENT_ IDENT RPAREN_
-- On RPAREN_ reduce production expr1 -> LPAREN_ expr PERCENT_ IDENT RPAREN_
-- On RBRACE_ reduce production expr1 -> LPAREN_ expr PERCENT_ IDENT RPAREN_
-- On PERIOD_ reduce production expr1 -> LPAREN_ expr PERCENT_ IDENT RPAREN_
-- On PERCENT_ reduce production expr1 -> LPAREN_ expr PERCENT_ IDENT RPAREN_
-- On PARAMETER reduce production expr1 -> LPAREN_ expr PERCENT_ IDENT RPAREN_
-- On NUM reduce production expr1 -> LPAREN_ expr PERCENT_ IDENT RPAREN_
-- On MUSTUSE reduce production expr1 -> LPAREN_ expr PERCENT_ IDENT RPAREN_
-- On LT_GT_ reduce production expr1 -> LPAREN_ expr PERCENT_ IDENT RPAREN_
-- On LT_DASH_GT_ reduce production expr1 -> LPAREN_ expr PERCENT_ IDENT RPAREN_
-- On LPAREN_ reduce production expr1 -> LPAREN_ expr PERCENT_ IDENT RPAREN_
-- On LBRACE_ reduce production expr1 -> LPAREN_ expr PERCENT_ IDENT RPAREN_
-- On INDUCTIVE reduce production expr1 -> LPAREN_ expr PERCENT_ IDENT RPAREN_
-- On IN reduce production expr1 -> LPAREN_ expr PERCENT_ IDENT RPAREN_
-- On IDENT reduce production expr1 -> LPAREN_ expr PERCENT_ IDENT RPAREN_
-- On FUNCTION reduce production expr1 -> LPAREN_ expr PERCENT_ IDENT RPAREN_
-- On FIXPOINT reduce production expr1 -> LPAREN_ expr PERCENT_ IDENT RPAREN_
-- On FALSE reduce production expr1 -> LPAREN_ expr PERCENT_ IDENT RPAREN_
-- On EQ_GT_ reduce production expr1 -> LPAREN_ expr PERCENT_ IDENT RPAREN_
-- On EQ_ reduce production expr1 -> LPAREN_ expr PERCENT_ IDENT RPAREN_
-- On EOF reduce production expr1 -> LPAREN_ expr PERCENT_ IDENT RPAREN_
-- On ENDPROOF reduce production expr1 -> LPAREN_ expr PERCENT_ IDENT RPAREN_
-- On END reduce production expr1 -> LPAREN_ expr PERCENT_ IDENT RPAREN_
-- On ELSE reduce production expr1 -> LPAREN_ expr PERCENT_ IDENT RPAREN_
-- On DEPENDS reduce production expr1 -> LPAREN_ expr PERCENT_ IDENT RPAREN_
-- On DEFINITION reduce production expr1 -> LPAREN_ expr PERCENT_ IDENT RPAREN_
-- On DASH_GT_ reduce production expr1 -> LPAREN_ expr PERCENT_ IDENT RPAREN_
-- On COMMA_ reduce production expr1 -> LPAREN_ expr PERCENT_ IDENT RPAREN_
-- On COLON_EQ_ reduce production expr1 -> LPAREN_ expr PERCENT_ IDENT RPAREN_
-- On BAR_ reduce production expr1 -> LPAREN_ expr PERCENT_ IDENT RPAREN_
-- On BACKSL_SLASH_ reduce production expr1 -> LPAREN_ expr PERCENT_ IDENT RPAREN_

State 126:
## Known stack suffix:
## COMMA_
## LR(1) items:
comma_expr_list -> COMMA_ . expr [ RPAREN_ ]
comma_expr_list -> COMMA_ . expr comma_expr_list [ RPAREN_ ]
## Transitions:
-- On TRUE shift to state 1
-- On TILDE_ shift to state 2
-- On STRING shift to state 3
-- On NUM shift to state 4
-- On MATCH shift to state 5
-- On LPAREN_ shift to state 6
-- On LET shift to state 7
-- On IF shift to state 36
-- On IDENT shift to state 37
-- On FUN shift to state 38
-- On FORALL shift to state 49
-- On FALSE shift to state 54
-- On EXISTS shift to state 55
-- On AROBAS_ shift to state 58
-- On expr1 shift to state 63
-- On expr shift to state 127
## Reductions:

State 127:
## Known stack suffix:
## COMMA_ expr
## LR(1) items:
comma_expr_list -> COMMA_ expr . [ RPAREN_ ]
comma_expr_list -> COMMA_ expr . comma_expr_list [ RPAREN_ ]
expr -> expr . DASH_GT_ expr [ SLASH_BACKSL_ RPAREN_ LT_GT_ LT_DASH_GT_ EQ_ DASH_GT_ COMMA_ BACKSL_SLASH_ ]
expr -> expr . LT_DASH_GT_ expr [ SLASH_BACKSL_ RPAREN_ LT_GT_ LT_DASH_GT_ EQ_ DASH_GT_ COMMA_ BACKSL_SLASH_ ]
expr -> expr . BACKSL_SLASH_ expr [ SLASH_BACKSL_ RPAREN_ LT_GT_ LT_DASH_GT_ EQ_ DASH_GT_ COMMA_ BACKSL_SLASH_ ]
expr -> expr . SLASH_BACKSL_ expr [ SLASH_BACKSL_ RPAREN_ LT_GT_ LT_DASH_GT_ EQ_ DASH_GT_ COMMA_ BACKSL_SLASH_ ]
expr -> expr . EQ_ expr [ SLASH_BACKSL_ RPAREN_ LT_GT_ LT_DASH_GT_ EQ_ DASH_GT_ COMMA_ BACKSL_SLASH_ ]
expr -> expr . LT_GT_ expr [ SLASH_BACKSL_ RPAREN_ LT_GT_ LT_DASH_GT_ EQ_ DASH_GT_ COMMA_ BACKSL_SLASH_ ]
## Transitions:
-- On SLASH_BACKSL_ shift to state 66
-- On LT_GT_ shift to state 68
-- On LT_DASH_GT_ shift to state 72
-- On EQ_ shift to state 70
-- On DASH_GT_ shift to state 74
-- On COMMA_ shift to state 126
-- On BACKSL_SLASH_ shift to state 76
-- On comma_expr_list shift to state 128
## Reductions:
-- On RPAREN_ reduce production comma_expr_list -> COMMA_ expr

State 128:
## Known stack suffix:
## COMMA_ expr comma_expr_list
## LR(1) items:
comma_expr_list -> COMMA_ expr comma_expr_list . [ RPAREN_ ]
## Transitions:
## Reductions:
-- On RPAREN_ reduce production comma_expr_list -> COMMA_ expr comma_expr_list

State 129:
## Known stack suffix:
## LPAREN_ expr comma_expr_list
## LR(1) items:
expr1 -> LPAREN_ expr comma_expr_list . RPAREN_ [ WITH TRUE THEN STRING STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER NUM MUSTUSE LT_GT_ LT_DASH_GT_ LPAREN_ LBRACE_ INDUCTIVE IN IDENT FUNCTION FIXPOINT FALSE EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
## Transitions:
-- On RPAREN_ shift to state 130
## Reductions:

State 130:
## Known stack suffix:
## LPAREN_ expr comma_expr_list RPAREN_
## LR(1) items:
expr1 -> LPAREN_ expr comma_expr_list RPAREN_ . [ WITH TRUE THEN STRING STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER NUM MUSTUSE LT_GT_ LT_DASH_GT_ LPAREN_ LBRACE_ INDUCTIVE IN IDENT FUNCTION FIXPOINT FALSE EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
## Transitions:
## Reductions:
-- On WITH reduce production expr1 -> LPAREN_ expr comma_expr_list RPAREN_
-- On TRUE reduce production expr1 -> LPAREN_ expr comma_expr_list RPAREN_
-- On THEN reduce production expr1 -> LPAREN_ expr comma_expr_list RPAREN_
-- On STRING reduce production expr1 -> LPAREN_ expr comma_expr_list RPAREN_
-- On STAR_ reduce production expr1 -> LPAREN_ expr comma_expr_list RPAREN_
-- On SLASH_BACKSL_ reduce production expr1 -> LPAREN_ expr comma_expr_list RPAREN_
-- On RPAREN_ reduce production expr1 -> LPAREN_ expr comma_expr_list RPAREN_
-- On RBRACE_ reduce production expr1 -> LPAREN_ expr comma_expr_list RPAREN_
-- On PERIOD_ reduce production expr1 -> LPAREN_ expr comma_expr_list RPAREN_
-- On PERCENT_ reduce production expr1 -> LPAREN_ expr comma_expr_list RPAREN_
-- On PARAMETER reduce production expr1 -> LPAREN_ expr comma_expr_list RPAREN_
-- On NUM reduce production expr1 -> LPAREN_ expr comma_expr_list RPAREN_
-- On MUSTUSE reduce production expr1 -> LPAREN_ expr comma_expr_list RPAREN_
-- On LT_GT_ reduce production expr1 -> LPAREN_ expr comma_expr_list RPAREN_
-- On LT_DASH_GT_ reduce production expr1 -> LPAREN_ expr comma_expr_list RPAREN_
-- On LPAREN_ reduce production expr1 -> LPAREN_ expr comma_expr_list RPAREN_
-- On LBRACE_ reduce production expr1 -> LPAREN_ expr comma_expr_list RPAREN_
-- On INDUCTIVE reduce production expr1 -> LPAREN_ expr comma_expr_list RPAREN_
-- On IN reduce production expr1 -> LPAREN_ expr comma_expr_list RPAREN_
-- On IDENT reduce production expr1 -> LPAREN_ expr comma_expr_list RPAREN_
-- On FUNCTION reduce production expr1 -> LPAREN_ expr comma_expr_list RPAREN_
-- On FIXPOINT reduce production expr1 -> LPAREN_ expr comma_expr_list RPAREN_
-- On FALSE reduce production expr1 -> LPAREN_ expr comma_expr_list RPAREN_
-- On EQ_GT_ reduce production expr1 -> LPAREN_ expr comma_expr_list RPAREN_
-- On EQ_ reduce production expr1 -> LPAREN_ expr comma_expr_list RPAREN_
-- On EOF reduce production expr1 -> LPAREN_ expr comma_expr_list RPAREN_
-- On ENDPROOF reduce production expr1 -> LPAREN_ expr comma_expr_list RPAREN_
-- On END reduce production expr1 -> LPAREN_ expr comma_expr_list RPAREN_
-- On ELSE reduce production expr1 -> LPAREN_ expr comma_expr_list RPAREN_
-- On DEPENDS reduce production expr1 -> LPAREN_ expr comma_expr_list RPAREN_
-- On DEFINITION reduce production expr1 -> LPAREN_ expr comma_expr_list RPAREN_
-- On DASH_GT_ reduce production expr1 -> LPAREN_ expr comma_expr_list RPAREN_
-- On COMMA_ reduce production expr1 -> LPAREN_ expr comma_expr_list RPAREN_
-- On COLON_EQ_ reduce production expr1 -> LPAREN_ expr comma_expr_list RPAREN_
-- On BAR_ reduce production expr1 -> LPAREN_ expr comma_expr_list RPAREN_
-- On BACKSL_SLASH_ reduce production expr1 -> LPAREN_ expr comma_expr_list RPAREN_

State 131:
## Known stack suffix:
## MATCH expr
## LR(1) items:
expr -> MATCH expr . WITH pat_expr_list END [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> expr . DASH_GT_ expr [ WITH SLASH_BACKSL_ LT_GT_ LT_DASH_GT_ EQ_ DASH_GT_ BACKSL_SLASH_ ]
expr -> expr . LT_DASH_GT_ expr [ WITH SLASH_BACKSL_ LT_GT_ LT_DASH_GT_ EQ_ DASH_GT_ BACKSL_SLASH_ ]
expr -> expr . BACKSL_SLASH_ expr [ WITH SLASH_BACKSL_ LT_GT_ LT_DASH_GT_ EQ_ DASH_GT_ BACKSL_SLASH_ ]
expr -> expr . SLASH_BACKSL_ expr [ WITH SLASH_BACKSL_ LT_GT_ LT_DASH_GT_ EQ_ DASH_GT_ BACKSL_SLASH_ ]
expr -> expr . EQ_ expr [ WITH SLASH_BACKSL_ LT_GT_ LT_DASH_GT_ EQ_ DASH_GT_ BACKSL_SLASH_ ]
expr -> expr . LT_GT_ expr [ WITH SLASH_BACKSL_ LT_GT_ LT_DASH_GT_ EQ_ DASH_GT_ BACKSL_SLASH_ ]
## Transitions:
-- On WITH shift to state 132
-- On SLASH_BACKSL_ shift to state 66
-- On LT_GT_ shift to state 68
-- On LT_DASH_GT_ shift to state 72
-- On EQ_ shift to state 70
-- On DASH_GT_ shift to state 74
-- On BACKSL_SLASH_ shift to state 76
## Reductions:

State 132:
## Known stack suffix:
## MATCH expr WITH
## LR(1) items:
expr -> MATCH expr WITH . pat_expr_list END [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
## Transitions:
-- On BAR_ shift to state 133
-- On pat_expr_list shift to state 147
## Reductions:
-- On END reduce production pat_expr_list ->

State 133:
## Known stack suffix:
## BAR_
## LR(1) items:
pat_expr_list -> BAR_ . pattern EQ_GT_ expr pat_expr_list [ END ]
## Transitions:
-- On LPAREN_ shift to state 134
-- On IDENT shift to state 142
-- On pattern shift to state 143
## Reductions:

State 134:
## Known stack suffix:
## LPAREN_
## LR(1) items:
pattern -> LPAREN_ . pattern RPAREN_ [ RPAREN_ EQ_GT_ ]
pattern -> LPAREN_ . IDENT COMMA_ IDENT RPAREN_ [ RPAREN_ EQ_GT_ ]
## Transitions:
-- On LPAREN_ shift to state 134
-- On IDENT shift to state 135
-- On pattern shift to state 140
## Reductions:

State 135:
## Known stack suffix:
## LPAREN_ IDENT
## LR(1) items:
pattern -> IDENT . idlist [ RPAREN_ ]
pattern -> LPAREN_ IDENT . COMMA_ IDENT RPAREN_ [ RPAREN_ EQ_GT_ ]
## Transitions:
-- On IDENT shift to state 40
-- On COMMA_ shift to state 136
-- On idlist shift to state 139
## Reductions:
-- On RPAREN_ reduce production idlist ->

State 136:
## Known stack suffix:
## LPAREN_ IDENT COMMA_
## LR(1) items:
pattern -> LPAREN_ IDENT COMMA_ . IDENT RPAREN_ [ RPAREN_ EQ_GT_ ]
## Transitions:
-- On IDENT shift to state 137
## Reductions:

State 137:
## Known stack suffix:
## LPAREN_ IDENT COMMA_ IDENT
## LR(1) items:
pattern -> LPAREN_ IDENT COMMA_ IDENT . RPAREN_ [ RPAREN_ EQ_GT_ ]
## Transitions:
-- On RPAREN_ shift to state 138
## Reductions:

State 138:
## Known stack suffix:
## LPAREN_ IDENT COMMA_ IDENT RPAREN_
## LR(1) items:
pattern -> LPAREN_ IDENT COMMA_ IDENT RPAREN_ . [ RPAREN_ EQ_GT_ ]
## Transitions:
## Reductions:
-- On RPAREN_ reduce production pattern -> LPAREN_ IDENT COMMA_ IDENT RPAREN_
-- On EQ_GT_ reduce production pattern -> LPAREN_ IDENT COMMA_ IDENT RPAREN_

State 139:
## Known stack suffix:
## IDENT idlist
## LR(1) items:
pattern -> IDENT idlist . [ RPAREN_ EQ_GT_ ]
## Transitions:
## Reductions:
-- On RPAREN_ reduce production pattern -> IDENT idlist
-- On EQ_GT_ reduce production pattern -> IDENT idlist

State 140:
## Known stack suffix:
## LPAREN_ pattern
## LR(1) items:
pattern -> LPAREN_ pattern . RPAREN_ [ RPAREN_ EQ_GT_ ]
## Transitions:
-- On RPAREN_ shift to state 141
## Reductions:

State 141:
## Known stack suffix:
## LPAREN_ pattern RPAREN_
## LR(1) items:
pattern -> LPAREN_ pattern RPAREN_ . [ RPAREN_ EQ_GT_ ]
## Transitions:
## Reductions:
-- On RPAREN_ reduce production pattern -> LPAREN_ pattern RPAREN_
-- On EQ_GT_ reduce production pattern -> LPAREN_ pattern RPAREN_

State 142:
## Known stack suffix:
## IDENT
## LR(1) items:
pattern -> IDENT . idlist [ EQ_GT_ ]
## Transitions:
-- On IDENT shift to state 40
-- On idlist shift to state 139
## Reductions:
-- On EQ_GT_ reduce production idlist ->

State 143:
## Known stack suffix:
## BAR_ pattern
## LR(1) items:
pat_expr_list -> BAR_ pattern . EQ_GT_ expr pat_expr_list [ END ]
## Transitions:
-- On EQ_GT_ shift to state 144
## Reductions:

State 144:
## Known stack suffix:
## BAR_ pattern EQ_GT_
## LR(1) items:
pat_expr_list -> BAR_ pattern EQ_GT_ . expr pat_expr_list [ END ]
## Transitions:
-- On TRUE shift to state 1
-- On TILDE_ shift to state 2
-- On STRING shift to state 3
-- On NUM shift to state 4
-- On MATCH shift to state 5
-- On LPAREN_ shift to state 6
-- On LET shift to state 7
-- On IF shift to state 36
-- On IDENT shift to state 37
-- On FUN shift to state 38
-- On FORALL shift to state 49
-- On FALSE shift to state 54
-- On EXISTS shift to state 55
-- On AROBAS_ shift to state 58
-- On expr1 shift to state 63
-- On expr shift to state 145
## Reductions:

State 145:
## Known stack suffix:
## BAR_ pattern EQ_GT_ expr
## LR(1) items:
expr -> expr . DASH_GT_ expr [ SLASH_BACKSL_ LT_GT_ LT_DASH_GT_ EQ_ END DASH_GT_ BAR_ BACKSL_SLASH_ ]
expr -> expr . LT_DASH_GT_ expr [ SLASH_BACKSL_ LT_GT_ LT_DASH_GT_ EQ_ END DASH_GT_ BAR_ BACKSL_SLASH_ ]
expr -> expr . BACKSL_SLASH_ expr [ SLASH_BACKSL_ LT_GT_ LT_DASH_GT_ EQ_ END DASH_GT_ BAR_ BACKSL_SLASH_ ]
expr -> expr . SLASH_BACKSL_ expr [ SLASH_BACKSL_ LT_GT_ LT_DASH_GT_ EQ_ END DASH_GT_ BAR_ BACKSL_SLASH_ ]
expr -> expr . EQ_ expr [ SLASH_BACKSL_ LT_GT_ LT_DASH_GT_ EQ_ END DASH_GT_ BAR_ BACKSL_SLASH_ ]
expr -> expr . LT_GT_ expr [ SLASH_BACKSL_ LT_GT_ LT_DASH_GT_ EQ_ END DASH_GT_ BAR_ BACKSL_SLASH_ ]
pat_expr_list -> BAR_ pattern EQ_GT_ expr . pat_expr_list [ END ]
## Transitions:
-- On SLASH_BACKSL_ shift to state 66
-- On LT_GT_ shift to state 68
-- On LT_DASH_GT_ shift to state 72
-- On EQ_ shift to state 70
-- On DASH_GT_ shift to state 74
-- On BAR_ shift to state 133
-- On BACKSL_SLASH_ shift to state 76
-- On pat_expr_list shift to state 146
## Reductions:
-- On END reduce production pat_expr_list ->

State 146:
## Known stack suffix:
## BAR_ pattern EQ_GT_ expr pat_expr_list
## LR(1) items:
pat_expr_list -> BAR_ pattern EQ_GT_ expr pat_expr_list . [ END ]
## Transitions:
## Reductions:
-- On END reduce production pat_expr_list -> BAR_ pattern EQ_GT_ expr pat_expr_list

State 147:
## Known stack suffix:
## MATCH expr WITH pat_expr_list
## LR(1) items:
expr -> MATCH expr WITH pat_expr_list . END [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
## Transitions:
-- On END shift to state 148
## Reductions:

State 148:
## Known stack suffix:
## MATCH expr WITH pat_expr_list END
## LR(1) items:
expr -> MATCH expr WITH pat_expr_list END . [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
## Transitions:
## Reductions:
-- On WITH reduce production expr -> MATCH expr WITH pat_expr_list END
-- On THEN reduce production expr -> MATCH expr WITH pat_expr_list END
-- On STAR_ reduce production expr -> MATCH expr WITH pat_expr_list END
-- On SLASH_BACKSL_ reduce production expr -> MATCH expr WITH pat_expr_list END
-- On RPAREN_ reduce production expr -> MATCH expr WITH pat_expr_list END
-- On RBRACE_ reduce production expr -> MATCH expr WITH pat_expr_list END
-- On PERIOD_ reduce production expr -> MATCH expr WITH pat_expr_list END
-- On PERCENT_ reduce production expr -> MATCH expr WITH pat_expr_list END
-- On PARAMETER reduce production expr -> MATCH expr WITH pat_expr_list END
-- On MUSTUSE reduce production expr -> MATCH expr WITH pat_expr_list END
-- On LT_GT_ reduce production expr -> MATCH expr WITH pat_expr_list END
-- On LT_DASH_GT_ reduce production expr -> MATCH expr WITH pat_expr_list END
-- On LBRACE_ reduce production expr -> MATCH expr WITH pat_expr_list END
-- On INDUCTIVE reduce production expr -> MATCH expr WITH pat_expr_list END
-- On IN reduce production expr -> MATCH expr WITH pat_expr_list END
-- On FUNCTION reduce production expr -> MATCH expr WITH pat_expr_list END
-- On FIXPOINT reduce production expr -> MATCH expr WITH pat_expr_list END
-- On EQ_GT_ reduce production expr -> MATCH expr WITH pat_expr_list END
-- On EQ_ reduce production expr -> MATCH expr WITH pat_expr_list END
-- On EOF reduce production expr -> MATCH expr WITH pat_expr_list END
-- On ENDPROOF reduce production expr -> MATCH expr WITH pat_expr_list END
-- On END reduce production expr -> MATCH expr WITH pat_expr_list END
-- On ELSE reduce production expr -> MATCH expr WITH pat_expr_list END
-- On DEPENDS reduce production expr -> MATCH expr WITH pat_expr_list END
-- On DEFINITION reduce production expr -> MATCH expr WITH pat_expr_list END
-- On DASH_GT_ reduce production expr -> MATCH expr WITH pat_expr_list END
-- On COMMA_ reduce production expr -> MATCH expr WITH pat_expr_list END
-- On COLON_EQ_ reduce production expr -> MATCH expr WITH pat_expr_list END
-- On BAR_ reduce production expr -> MATCH expr WITH pat_expr_list END
-- On BACKSL_SLASH_ reduce production expr -> MATCH expr WITH pat_expr_list END

State 149:
## Known stack suffix:
## TILDE_ expr
## LR(1) items:
expr -> expr . DASH_GT_ expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> expr . LT_DASH_GT_ expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> expr . BACKSL_SLASH_ expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> expr . SLASH_BACKSL_ expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> expr . EQ_ expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> expr . LT_GT_ expr [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
expr -> TILDE_ expr . [ WITH THEN STAR_ SLASH_BACKSL_ RPAREN_ RBRACE_ PERIOD_ PERCENT_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ LBRACE_ INDUCTIVE IN FUNCTION FIXPOINT EQ_GT_ EQ_ EOF ENDPROOF END ELSE DEPENDS DEFINITION DASH_GT_ COMMA_ COLON_EQ_ BAR_ BACKSL_SLASH_ ]
## Transitions:
## Reductions:
-- On WITH reduce production expr -> TILDE_ expr
-- On THEN reduce production expr -> TILDE_ expr
-- On STAR_ reduce production expr -> TILDE_ expr
-- On SLASH_BACKSL_ reduce production expr -> TILDE_ expr
-- On RPAREN_ reduce production expr -> TILDE_ expr
-- On RBRACE_ reduce production expr -> TILDE_ expr
-- On PERIOD_ reduce production expr -> TILDE_ expr
-- On PERCENT_ reduce production expr -> TILDE_ expr
-- On PARAMETER reduce production expr -> TILDE_ expr
-- On MUSTUSE reduce production expr -> TILDE_ expr
-- On LT_GT_ reduce production expr -> TILDE_ expr
-- On LT_DASH_GT_ reduce production expr -> TILDE_ expr
-- On LBRACE_ reduce production expr -> TILDE_ expr
-- On INDUCTIVE reduce production expr -> TILDE_ expr
-- On IN reduce production expr -> TILDE_ expr
-- On FUNCTION reduce production expr -> TILDE_ expr
-- On FIXPOINT reduce production expr -> TILDE_ expr
-- On EQ_GT_ reduce production expr -> TILDE_ expr
-- On EQ_ reduce production expr -> TILDE_ expr
-- On EOF reduce production expr -> TILDE_ expr
-- On ENDPROOF reduce production expr -> TILDE_ expr
-- On END reduce production expr -> TILDE_ expr
-- On ELSE reduce production expr -> TILDE_ expr
-- On DEPENDS reduce production expr -> TILDE_ expr
-- On DEFINITION reduce production expr -> TILDE_ expr
-- On DASH_GT_ reduce production expr -> TILDE_ expr
-- On COMMA_ reduce production expr -> TILDE_ expr
-- On COLON_EQ_ reduce production expr -> TILDE_ expr
-- On BAR_ reduce production expr -> TILDE_ expr
-- On BACKSL_SLASH_ reduce production expr -> TILDE_ expr

State 150:
## Known stack suffix:
## PARAMETER
## LR(1) items:
hyp_def -> PARAMETER . id_or_expr COLON_ expr PERIOD_ [ THEOREM PARAMETER MUSTUSE INDUCTIVE FUNCTION FIXPOINT EOF ENDPROOF DEPENDS DEFINITION ]
## Transitions:
-- On STRING shift to state 151
-- On IDENT shift to state 152
-- On id_or_expr shift to state 153
## Reductions:

State 151:
## Known stack suffix:
## STRING
## LR(1) items:
id_or_expr -> STRING . [ COLON_EQ_ COLON_ ]
## Transitions:
## Reductions:
-- On COLON_EQ_ reduce production id_or_expr -> STRING
-- On COLON_ reduce production id_or_expr -> STRING

State 152:
## Known stack suffix:
## IDENT
## LR(1) items:
id_or_expr -> IDENT . [ COLON_ ]
## Transitions:
## Reductions:
-- On COLON_ reduce production id_or_expr -> IDENT

State 153:
## Known stack suffix:
## PARAMETER id_or_expr
## LR(1) items:
hyp_def -> PARAMETER id_or_expr . COLON_ expr PERIOD_ [ THEOREM PARAMETER MUSTUSE INDUCTIVE FUNCTION FIXPOINT EOF ENDPROOF DEPENDS DEFINITION ]
## Transitions:
-- On COLON_ shift to state 154
## Reductions:

State 154:
## Known stack suffix:
## PARAMETER id_or_expr COLON_
## LR(1) items:
hyp_def -> PARAMETER id_or_expr COLON_ . expr PERIOD_ [ THEOREM PARAMETER MUSTUSE INDUCTIVE FUNCTION FIXPOINT EOF ENDPROOF DEPENDS DEFINITION ]
## Transitions:
-- On TRUE shift to state 1
-- On TILDE_ shift to state 2
-- On STRING shift to state 3
-- On NUM shift to state 4
-- On MATCH shift to state 5
-- On LPAREN_ shift to state 6
-- On LET shift to state 7
-- On IF shift to state 36
-- On IDENT shift to state 37
-- On FUN shift to state 38
-- On FORALL shift to state 49
-- On FALSE shift to state 54
-- On EXISTS shift to state 55
-- On AROBAS_ shift to state 58
-- On expr1 shift to state 63
-- On expr shift to state 155
## Reductions:

State 155:
## Known stack suffix:
## PARAMETER id_or_expr COLON_ expr
## LR(1) items:
expr -> expr . DASH_GT_ expr [ SLASH_BACKSL_ PERIOD_ LT_GT_ LT_DASH_GT_ EQ_ DASH_GT_ BACKSL_SLASH_ ]
expr -> expr . LT_DASH_GT_ expr [ SLASH_BACKSL_ PERIOD_ LT_GT_ LT_DASH_GT_ EQ_ DASH_GT_ BACKSL_SLASH_ ]
expr -> expr . BACKSL_SLASH_ expr [ SLASH_BACKSL_ PERIOD_ LT_GT_ LT_DASH_GT_ EQ_ DASH_GT_ BACKSL_SLASH_ ]
expr -> expr . SLASH_BACKSL_ expr [ SLASH_BACKSL_ PERIOD_ LT_GT_ LT_DASH_GT_ EQ_ DASH_GT_ BACKSL_SLASH_ ]
expr -> expr . EQ_ expr [ SLASH_BACKSL_ PERIOD_ LT_GT_ LT_DASH_GT_ EQ_ DASH_GT_ BACKSL_SLASH_ ]
expr -> expr . LT_GT_ expr [ SLASH_BACKSL_ PERIOD_ LT_GT_ LT_DASH_GT_ EQ_ DASH_GT_ BACKSL_SLASH_ ]
hyp_def -> PARAMETER id_or_expr COLON_ expr . PERIOD_ [ THEOREM PARAMETER MUSTUSE INDUCTIVE FUNCTION FIXPOINT EOF ENDPROOF DEPENDS DEFINITION ]
## Transitions:
-- On SLASH_BACKSL_ shift to state 66
-- On PERIOD_ shift to state 156
-- On LT_GT_ shift to state 68
-- On LT_DASH_GT_ shift to state 72
-- On EQ_ shift to state 70
-- On DASH_GT_ shift to state 74
-- On BACKSL_SLASH_ shift to state 76
## Reductions:

State 156:
## Known stack suffix:
## PARAMETER id_or_expr COLON_ expr PERIOD_
## LR(1) items:
hyp_def -> PARAMETER id_or_expr COLON_ expr PERIOD_ . [ THEOREM PARAMETER MUSTUSE INDUCTIVE FUNCTION FIXPOINT EOF ENDPROOF DEPENDS DEFINITION ]
## Transitions:
## Reductions:
-- On THEOREM reduce production hyp_def -> PARAMETER id_or_expr COLON_ expr PERIOD_
-- On PARAMETER reduce production hyp_def -> PARAMETER id_or_expr COLON_ expr PERIOD_
-- On MUSTUSE reduce production hyp_def -> PARAMETER id_or_expr COLON_ expr PERIOD_
-- On INDUCTIVE reduce production hyp_def -> PARAMETER id_or_expr COLON_ expr PERIOD_
-- On FUNCTION reduce production hyp_def -> PARAMETER id_or_expr COLON_ expr PERIOD_
-- On FIXPOINT reduce production hyp_def -> PARAMETER id_or_expr COLON_ expr PERIOD_
-- On EOF reduce production hyp_def -> PARAMETER id_or_expr COLON_ expr PERIOD_
-- On ENDPROOF reduce production hyp_def -> PARAMETER id_or_expr COLON_ expr PERIOD_
-- On DEPENDS reduce production hyp_def -> PARAMETER id_or_expr COLON_ expr PERIOD_
-- On DEFINITION reduce production hyp_def -> PARAMETER id_or_expr COLON_ expr PERIOD_

State 157:
## Known stack suffix:
## MUSTUSE
## LR(1) items:
dep_hyp_def -> MUSTUSE . hyp_def [ THEOREM PARAMETER MUSTUSE INDUCTIVE FUNCTION FIXPOINT EOF ENDPROOF DEPENDS DEFINITION ]
## Transitions:
-- On PARAMETER shift to state 150
-- On INDUCTIVE shift to state 158
-- On FUNCTION shift to state 184
-- On FIXPOINT shift to state 201
-- On DEFINITION shift to state 213
-- On hyp_def shift to state 225
## Reductions:

State 158:
## Known stack suffix:
## INDUCTIVE
## LR(1) items:
hyp_def -> INDUCTIVE . IDENT binding_list COLON_ IDENT COLON_EQ_ constr_list PERIOD_ [ THEOREM PARAMETER MUSTUSE INDUCTIVE FUNCTION FIXPOINT EOF ENDPROOF DEPENDS DEFINITION ]
## Transitions:
-- On IDENT shift to state 159
## Reductions:

State 159:
## Known stack suffix:
## INDUCTIVE IDENT
## LR(1) items:
hyp_def -> INDUCTIVE IDENT . binding_list COLON_ IDENT COLON_EQ_ constr_list PERIOD_ [ THEOREM PARAMETER MUSTUSE INDUCTIVE FUNCTION FIXPOINT EOF ENDPROOF DEPENDS DEFINITION ]
## Transitions:
-- On LPAREN_ shift to state 39
-- On IDENT shift to state 44
-- On binding_list shift to state 160
## Reductions:
-- On COLON_ reduce production binding_list ->

State 160:
## Known stack suffix:
## INDUCTIVE IDENT binding_list
## LR(1) items:
hyp_def -> INDUCTIVE IDENT binding_list . COLON_ IDENT COLON_EQ_ constr_list PERIOD_ [ THEOREM PARAMETER MUSTUSE INDUCTIVE FUNCTION FIXPOINT EOF ENDPROOF DEPENDS DEFINITION ]
## Transitions:
-- On COLON_ shift to state 161
## Reductions:

State 161:
## Known stack suffix:
## INDUCTIVE IDENT binding_list COLON_
## LR(1) items:
hyp_def -> INDUCTIVE IDENT binding_list COLON_ . IDENT COLON_EQ_ constr_list PERIOD_ [ THEOREM PARAMETER MUSTUSE INDUCTIVE FUNCTION FIXPOINT EOF ENDPROOF DEPENDS DEFINITION ]
## Transitions:
-- On IDENT shift to state 162
## Reductions:

State 162:
## Known stack suffix:
## INDUCTIVE IDENT binding_list COLON_ IDENT
## LR(1) items:
hyp_def -> INDUCTIVE IDENT binding_list COLON_ IDENT . COLON_EQ_ constr_list PERIOD_ [ THEOREM PARAMETER MUSTUSE INDUCTIVE FUNCTION FIXPOINT EOF ENDPROOF DEPENDS DEFINITION ]
## Transitions:
-- On COLON_EQ_ shift to state 163
## Reductions:

State 163:
## Known stack suffix:
## INDUCTIVE IDENT binding_list COLON_ IDENT COLON_EQ_
## LR(1) items:
hyp_def -> INDUCTIVE IDENT binding_list COLON_ IDENT COLON_EQ_ . constr_list PERIOD_ [ THEOREM PARAMETER MUSTUSE INDUCTIVE FUNCTION FIXPOINT EOF ENDPROOF DEPENDS DEFINITION ]
## Transitions:
-- On BAR_ shift to state 164
-- On constr_list shift to state 182
## Reductions:
-- On PERIOD_ reduce production constr_list ->

State 164:
## Known stack suffix:
## BAR_
## LR(1) items:
constr_list -> BAR_ . IDENT COLON_ constr_type constr_list [ PERIOD_ ]
## Transitions:
-- On IDENT shift to state 165
## Reductions:

State 165:
## Known stack suffix:
## BAR_ IDENT
## LR(1) items:
constr_list -> BAR_ IDENT . COLON_ constr_type constr_list [ PERIOD_ ]
## Transitions:
-- On COLON_ shift to state 166
## Reductions:

State 166:
## Known stack suffix:
## BAR_ IDENT COLON_
## LR(1) items:
constr_list -> BAR_ IDENT COLON_ . constr_type constr_list [ PERIOD_ ]
## Transitions:
-- On LPAREN_ shift to state 167
-- On IDENT shift to state 169
-- On constr_type shift to state 180
-- On arg_type shift to state 177
## Reductions:

State 167:
## Known stack suffix:
## LPAREN_
## LR(1) items:
arg_type -> LPAREN_ . arg_type RPAREN_ [ RPAREN_ PERIOD_ DASH_GT_ BAR_ ]
constr_type -> LPAREN_ . arg_type DASH_GT_ constr_type RPAREN_ [ RPAREN_ PERIOD_ BAR_ ]
## Transitions:
-- On LPAREN_ shift to state 168
-- On IDENT shift to state 169
-- On arg_type shift to state 173
## Reductions:

State 168:
## Known stack suffix:
## LPAREN_
## LR(1) items:
arg_type -> LPAREN_ . arg_type RPAREN_ [ RPAREN_ DASH_GT_ ]
## Transitions:
-- On LPAREN_ shift to state 168
-- On IDENT shift to state 169
-- On arg_type shift to state 171
## Reductions:

State 169:
## Known stack suffix:
## IDENT
## LR(1) items:
arg_type -> IDENT . idlist [ RPAREN_ PERIOD_ DASH_GT_ BAR_ ]
## Transitions:
-- On IDENT shift to state 40
-- On idlist shift to state 170
## Reductions:
-- On RPAREN_ reduce production idlist ->
-- On PERIOD_ reduce production idlist ->
-- On DASH_GT_ reduce production idlist ->
-- On BAR_ reduce production idlist ->

State 170:
## Known stack suffix:
## IDENT idlist
## LR(1) items:
arg_type -> IDENT idlist . [ RPAREN_ PERIOD_ DASH_GT_ BAR_ ]
## Transitions:
## Reductions:
-- On RPAREN_ reduce production arg_type -> IDENT idlist
-- On PERIOD_ reduce production arg_type -> IDENT idlist
-- On DASH_GT_ reduce production arg_type -> IDENT idlist
-- On BAR_ reduce production arg_type -> IDENT idlist

State 171:
## Known stack suffix:
## LPAREN_ arg_type
## LR(1) items:
arg_type -> LPAREN_ arg_type . RPAREN_ [ RPAREN_ DASH_GT_ ]
## Transitions:
-- On RPAREN_ shift to state 172
## Reductions:

State 172:
## Known stack suffix:
## LPAREN_ arg_type RPAREN_
## LR(1) items:
arg_type -> LPAREN_ arg_type RPAREN_ . [ RPAREN_ PERIOD_ DASH_GT_ BAR_ ]
## Transitions:
## Reductions:
-- On RPAREN_ reduce production arg_type -> LPAREN_ arg_type RPAREN_
-- On PERIOD_ reduce production arg_type -> LPAREN_ arg_type RPAREN_
-- On DASH_GT_ reduce production arg_type -> LPAREN_ arg_type RPAREN_
-- On BAR_ reduce production arg_type -> LPAREN_ arg_type RPAREN_

State 173:
## Known stack suffix:
## LPAREN_ arg_type
## LR(1) items:
arg_type -> LPAREN_ arg_type . RPAREN_ [ RPAREN_ PERIOD_ DASH_GT_ BAR_ ]
constr_type -> LPAREN_ arg_type . DASH_GT_ constr_type RPAREN_ [ RPAREN_ PERIOD_ BAR_ ]
## Transitions:
-- On RPAREN_ shift to state 172
-- On DASH_GT_ shift to state 174
## Reductions:

State 174:
## Known stack suffix:
## LPAREN_ arg_type DASH_GT_
## LR(1) items:
constr_type -> LPAREN_ arg_type DASH_GT_ . constr_type RPAREN_ [ RPAREN_ PERIOD_ BAR_ ]
## Transitions:
-- On LPAREN_ shift to state 167
-- On IDENT shift to state 169
-- On constr_type shift to state 175
-- On arg_type shift to state 177
## Reductions:

State 175:
## Known stack suffix:
## LPAREN_ arg_type DASH_GT_ constr_type
## LR(1) items:
constr_type -> LPAREN_ arg_type DASH_GT_ constr_type . RPAREN_ [ RPAREN_ PERIOD_ BAR_ ]
## Transitions:
-- On RPAREN_ shift to state 176
## Reductions:

State 176:
## Known stack suffix:
## LPAREN_ arg_type DASH_GT_ constr_type RPAREN_
## LR(1) items:
constr_type -> LPAREN_ arg_type DASH_GT_ constr_type RPAREN_ . [ RPAREN_ PERIOD_ BAR_ ]
## Transitions:
## Reductions:
-- On RPAREN_ reduce production constr_type -> LPAREN_ arg_type DASH_GT_ constr_type RPAREN_
-- On PERIOD_ reduce production constr_type -> LPAREN_ arg_type DASH_GT_ constr_type RPAREN_
-- On BAR_ reduce production constr_type -> LPAREN_ arg_type DASH_GT_ constr_type RPAREN_

State 177:
## Known stack suffix:
## arg_type
## LR(1) items:
constr_type -> arg_type . [ RPAREN_ PERIOD_ BAR_ ]
constr_type -> arg_type . DASH_GT_ constr_type [ RPAREN_ PERIOD_ BAR_ ]
## Transitions:
-- On DASH_GT_ shift to state 178
## Reductions:
-- On RPAREN_ reduce production constr_type -> arg_type
-- On PERIOD_ reduce production constr_type -> arg_type
-- On BAR_ reduce production constr_type -> arg_type

State 178:
## Known stack suffix:
## arg_type DASH_GT_
## LR(1) items:
constr_type -> arg_type DASH_GT_ . constr_type [ RPAREN_ PERIOD_ BAR_ ]
## Transitions:
-- On LPAREN_ shift to state 167
-- On IDENT shift to state 169
-- On constr_type shift to state 179
-- On arg_type shift to state 177
## Reductions:

State 179:
## Known stack suffix:
## arg_type DASH_GT_ constr_type
## LR(1) items:
constr_type -> arg_type DASH_GT_ constr_type . [ RPAREN_ PERIOD_ BAR_ ]
## Transitions:
## Reductions:
-- On RPAREN_ reduce production constr_type -> arg_type DASH_GT_ constr_type
-- On PERIOD_ reduce production constr_type -> arg_type DASH_GT_ constr_type
-- On BAR_ reduce production constr_type -> arg_type DASH_GT_ constr_type

State 180:
## Known stack suffix:
## BAR_ IDENT COLON_ constr_type
## LR(1) items:
constr_list -> BAR_ IDENT COLON_ constr_type . constr_list [ PERIOD_ ]
## Transitions:
-- On BAR_ shift to state 164
-- On constr_list shift to state 181
## Reductions:
-- On PERIOD_ reduce production constr_list ->

State 181:
## Known stack suffix:
## BAR_ IDENT COLON_ constr_type constr_list
## LR(1) items:
constr_list -> BAR_ IDENT COLON_ constr_type constr_list . [ PERIOD_ ]
## Transitions:
## Reductions:
-- On PERIOD_ reduce production constr_list -> BAR_ IDENT COLON_ constr_type constr_list

State 182:
## Known stack suffix:
## INDUCTIVE IDENT binding_list COLON_ IDENT COLON_EQ_ constr_list
## LR(1) items:
hyp_def -> INDUCTIVE IDENT binding_list COLON_ IDENT COLON_EQ_ constr_list . PERIOD_ [ THEOREM PARAMETER MUSTUSE INDUCTIVE FUNCTION FIXPOINT EOF ENDPROOF DEPENDS DEFINITION ]
## Transitions:
-- On PERIOD_ shift to state 183
## Reductions:

State 183:
## Known stack suffix:
## INDUCTIVE IDENT binding_list COLON_ IDENT COLON_EQ_ constr_list PERIOD_
## LR(1) items:
hyp_def -> INDUCTIVE IDENT binding_list COLON_ IDENT COLON_EQ_ constr_list PERIOD_ . [ THEOREM PARAMETER MUSTUSE INDUCTIVE FUNCTION FIXPOINT EOF ENDPROOF DEPENDS DEFINITION ]
## Transitions:
## Reductions:
-- On THEOREM reduce production hyp_def -> INDUCTIVE IDENT binding_list COLON_ IDENT COLON_EQ_ constr_list PERIOD_
-- On PARAMETER reduce production hyp_def -> INDUCTIVE IDENT binding_list COLON_ IDENT COLON_EQ_ constr_list PERIOD_
-- On MUSTUSE reduce production hyp_def -> INDUCTIVE IDENT binding_list COLON_ IDENT COLON_EQ_ constr_list PERIOD_
-- On INDUCTIVE reduce production hyp_def -> INDUCTIVE IDENT binding_list COLON_ IDENT COLON_EQ_ constr_list PERIOD_
-- On FUNCTION reduce production hyp_def -> INDUCTIVE IDENT binding_list COLON_ IDENT COLON_EQ_ constr_list PERIOD_
-- On FIXPOINT reduce production hyp_def -> INDUCTIVE IDENT binding_list COLON_ IDENT COLON_EQ_ constr_list PERIOD_
-- On EOF reduce production hyp_def -> INDUCTIVE IDENT binding_list COLON_ IDENT COLON_EQ_ constr_list PERIOD_
-- On ENDPROOF reduce production hyp_def -> INDUCTIVE IDENT binding_list COLON_ IDENT COLON_EQ_ constr_list PERIOD_
-- On DEPENDS reduce production hyp_def -> INDUCTIVE IDENT binding_list COLON_ IDENT COLON_EQ_ constr_list PERIOD_
-- On DEFINITION reduce production hyp_def -> INDUCTIVE IDENT binding_list COLON_ IDENT COLON_EQ_ constr_list PERIOD_

State 184:
## Known stack suffix:
## FUNCTION
## LR(1) items:
hyp_def -> FUNCTION . IDENT compact_args COLON_ typ LBRACE_ expr RBRACE_ COLON_EQ_ expr PERIOD_ [ THEOREM PARAMETER MUSTUSE INDUCTIVE FUNCTION FIXPOINT EOF ENDPROOF DEPENDS DEFINITION ]
## Transitions:
-- On IDENT shift to state 185
## Reductions:

State 185:
## Known stack suffix:
## FUNCTION IDENT
## LR(1) items:
hyp_def -> FUNCTION IDENT . compact_args COLON_ typ LBRACE_ expr RBRACE_ COLON_EQ_ expr PERIOD_ [ THEOREM PARAMETER MUSTUSE INDUCTIVE FUNCTION FIXPOINT EOF ENDPROOF DEPENDS DEFINITION ]
## Transitions:
-- On LPAREN_ shift to state 186
-- On compact_args shift to state 192
## Reductions:
-- On COLON_ reduce production compact_args ->

State 186:
## Known stack suffix:
## LPAREN_
## LR(1) items:
compact_args -> LPAREN_ . IDENT COLON_ typ RPAREN_ compact_args [ LBRACE_ COLON_ ]
## Transitions:
-- On IDENT shift to state 187
## Reductions:

State 187:
## Known stack suffix:
## LPAREN_ IDENT
## LR(1) items:
compact_args -> LPAREN_ IDENT . COLON_ typ RPAREN_ compact_args [ LBRACE_ COLON_ ]
## Transitions:
-- On COLON_ shift to state 188
## Reductions:

State 188:
## Known stack suffix:
## LPAREN_ IDENT COLON_
## LR(1) items:
compact_args -> LPAREN_ IDENT COLON_ . typ RPAREN_ compact_args [ LBRACE_ COLON_ ]
## Transitions:
-- On TRUE shift to state 1
-- On TILDE_ shift to state 2
-- On STRING shift to state 3
-- On NUM shift to state 4
-- On MATCH shift to state 5
-- On LPAREN_ shift to state 6
-- On LET shift to state 7
-- On IF shift to state 36
-- On IDENT shift to state 37
-- On FUN shift to state 38
-- On FORALL shift to state 49
-- On FALSE shift to state 54
-- On EXISTS shift to state 55
-- On AROBAS_ shift to state 58
-- On typ shift to state 189
-- On expr1 shift to state 63
-- On expr shift to state 81
## Reductions:

State 189:
## Known stack suffix:
## LPAREN_ IDENT COLON_ typ
## LR(1) items:
compact_args -> LPAREN_ IDENT COLON_ typ . RPAREN_ compact_args [ LBRACE_ COLON_ ]
## Transitions:
-- On RPAREN_ shift to state 190
## Reductions:

State 190:
## Known stack suffix:
## LPAREN_ IDENT COLON_ typ RPAREN_
## LR(1) items:
compact_args -> LPAREN_ IDENT COLON_ typ RPAREN_ . compact_args [ LBRACE_ COLON_ ]
## Transitions:
-- On LPAREN_ shift to state 186
-- On compact_args shift to state 191
## Reductions:
-- On LBRACE_ reduce production compact_args ->
-- On COLON_ reduce production compact_args ->

State 191:
## Known stack suffix:
## LPAREN_ IDENT COLON_ typ RPAREN_ compact_args
## LR(1) items:
compact_args -> LPAREN_ IDENT COLON_ typ RPAREN_ compact_args . [ LBRACE_ COLON_ ]
## Transitions:
## Reductions:
-- On LBRACE_ reduce production compact_args -> LPAREN_ IDENT COLON_ typ RPAREN_ compact_args
-- On COLON_ reduce production compact_args -> LPAREN_ IDENT COLON_ typ RPAREN_ compact_args

State 192:
## Known stack suffix:
## FUNCTION IDENT compact_args
## LR(1) items:
hyp_def -> FUNCTION IDENT compact_args . COLON_ typ LBRACE_ expr RBRACE_ COLON_EQ_ expr PERIOD_ [ THEOREM PARAMETER MUSTUSE INDUCTIVE FUNCTION FIXPOINT EOF ENDPROOF DEPENDS DEFINITION ]
## Transitions:
-- On COLON_ shift to state 193
## Reductions:

State 193:
## Known stack suffix:
## FUNCTION IDENT compact_args COLON_
## LR(1) items:
hyp_def -> FUNCTION IDENT compact_args COLON_ . typ LBRACE_ expr RBRACE_ COLON_EQ_ expr PERIOD_ [ THEOREM PARAMETER MUSTUSE INDUCTIVE FUNCTION FIXPOINT EOF ENDPROOF DEPENDS DEFINITION ]
## Transitions:
-- On TRUE shift to state 1
-- On TILDE_ shift to state 2
-- On STRING shift to state 3
-- On NUM shift to state 4
-- On MATCH shift to state 5
-- On LPAREN_ shift to state 6
-- On LET shift to state 7
-- On IF shift to state 36
-- On IDENT shift to state 37
-- On FUN shift to state 38
-- On FORALL shift to state 49
-- On FALSE shift to state 54
-- On EXISTS shift to state 55
-- On AROBAS_ shift to state 58
-- On typ shift to state 194
-- On expr1 shift to state 63
-- On expr shift to state 81
## Reductions:

State 194:
## Known stack suffix:
## FUNCTION IDENT compact_args COLON_ typ
## LR(1) items:
hyp_def -> FUNCTION IDENT compact_args COLON_ typ . LBRACE_ expr RBRACE_ COLON_EQ_ expr PERIOD_ [ THEOREM PARAMETER MUSTUSE INDUCTIVE FUNCTION FIXPOINT EOF ENDPROOF DEPENDS DEFINITION ]
## Transitions:
-- On LBRACE_ shift to state 195
## Reductions:

State 195:
## Known stack suffix:
## FUNCTION IDENT compact_args COLON_ typ LBRACE_
## LR(1) items:
hyp_def -> FUNCTION IDENT compact_args COLON_ typ LBRACE_ . expr RBRACE_ COLON_EQ_ expr PERIOD_ [ THEOREM PARAMETER MUSTUSE INDUCTIVE FUNCTION FIXPOINT EOF ENDPROOF DEPENDS DEFINITION ]
## Transitions:
-- On TRUE shift to state 1
-- On TILDE_ shift to state 2
-- On STRING shift to state 3
-- On NUM shift to state 4
-- On MATCH shift to state 5
-- On LPAREN_ shift to state 6
-- On LET shift to state 7
-- On IF shift to state 36
-- On IDENT shift to state 37
-- On FUN shift to state 38
-- On FORALL shift to state 49
-- On FALSE shift to state 54
-- On EXISTS shift to state 55
-- On AROBAS_ shift to state 58
-- On expr1 shift to state 63
-- On expr shift to state 196
## Reductions:

State 196:
## Known stack suffix:
## FUNCTION IDENT compact_args COLON_ typ LBRACE_ expr
## LR(1) items:
expr -> expr . DASH_GT_ expr [ SLASH_BACKSL_ RBRACE_ LT_GT_ LT_DASH_GT_ EQ_ DASH_GT_ BACKSL_SLASH_ ]
expr -> expr . LT_DASH_GT_ expr [ SLASH_BACKSL_ RBRACE_ LT_GT_ LT_DASH_GT_ EQ_ DASH_GT_ BACKSL_SLASH_ ]
expr -> expr . BACKSL_SLASH_ expr [ SLASH_BACKSL_ RBRACE_ LT_GT_ LT_DASH_GT_ EQ_ DASH_GT_ BACKSL_SLASH_ ]
expr -> expr . SLASH_BACKSL_ expr [ SLASH_BACKSL_ RBRACE_ LT_GT_ LT_DASH_GT_ EQ_ DASH_GT_ BACKSL_SLASH_ ]
expr -> expr . EQ_ expr [ SLASH_BACKSL_ RBRACE_ LT_GT_ LT_DASH_GT_ EQ_ DASH_GT_ BACKSL_SLASH_ ]
expr -> expr . LT_GT_ expr [ SLASH_BACKSL_ RBRACE_ LT_GT_ LT_DASH_GT_ EQ_ DASH_GT_ BACKSL_SLASH_ ]
hyp_def -> FUNCTION IDENT compact_args COLON_ typ LBRACE_ expr . RBRACE_ COLON_EQ_ expr PERIOD_ [ THEOREM PARAMETER MUSTUSE INDUCTIVE FUNCTION FIXPOINT EOF ENDPROOF DEPENDS DEFINITION ]
## Transitions:
-- On SLASH_BACKSL_ shift to state 66
-- On RBRACE_ shift to state 197
-- On LT_GT_ shift to state 68
-- On LT_DASH_GT_ shift to state 72
-- On EQ_ shift to state 70
-- On DASH_GT_ shift to state 74
-- On BACKSL_SLASH_ shift to state 76
## Reductions:

State 197:
## Known stack suffix:
## FUNCTION IDENT compact_args COLON_ typ LBRACE_ expr RBRACE_
## LR(1) items:
hyp_def -> FUNCTION IDENT compact_args COLON_ typ LBRACE_ expr RBRACE_ . COLON_EQ_ expr PERIOD_ [ THEOREM PARAMETER MUSTUSE INDUCTIVE FUNCTION FIXPOINT EOF ENDPROOF DEPENDS DEFINITION ]
## Transitions:
-- On COLON_EQ_ shift to state 198
## Reductions:

State 198:
## Known stack suffix:
## FUNCTION IDENT compact_args COLON_ typ LBRACE_ expr RBRACE_ COLON_EQ_
## LR(1) items:
hyp_def -> FUNCTION IDENT compact_args COLON_ typ LBRACE_ expr RBRACE_ COLON_EQ_ . expr PERIOD_ [ THEOREM PARAMETER MUSTUSE INDUCTIVE FUNCTION FIXPOINT EOF ENDPROOF DEPENDS DEFINITION ]
## Transitions:
-- On TRUE shift to state 1
-- On TILDE_ shift to state 2
-- On STRING shift to state 3
-- On NUM shift to state 4
-- On MATCH shift to state 5
-- On LPAREN_ shift to state 6
-- On LET shift to state 7
-- On IF shift to state 36
-- On IDENT shift to state 37
-- On FUN shift to state 38
-- On FORALL shift to state 49
-- On FALSE shift to state 54
-- On EXISTS shift to state 55
-- On AROBAS_ shift to state 58
-- On expr1 shift to state 63
-- On expr shift to state 199
## Reductions:

State 199:
## Known stack suffix:
## FUNCTION IDENT compact_args COLON_ typ LBRACE_ expr RBRACE_ COLON_EQ_ expr
## LR(1) items:
expr -> expr . DASH_GT_ expr [ SLASH_BACKSL_ PERIOD_ LT_GT_ LT_DASH_GT_ EQ_ DASH_GT_ BACKSL_SLASH_ ]
expr -> expr . LT_DASH_GT_ expr [ SLASH_BACKSL_ PERIOD_ LT_GT_ LT_DASH_GT_ EQ_ DASH_GT_ BACKSL_SLASH_ ]
expr -> expr . BACKSL_SLASH_ expr [ SLASH_BACKSL_ PERIOD_ LT_GT_ LT_DASH_GT_ EQ_ DASH_GT_ BACKSL_SLASH_ ]
expr -> expr . SLASH_BACKSL_ expr [ SLASH_BACKSL_ PERIOD_ LT_GT_ LT_DASH_GT_ EQ_ DASH_GT_ BACKSL_SLASH_ ]
expr -> expr . EQ_ expr [ SLASH_BACKSL_ PERIOD_ LT_GT_ LT_DASH_GT_ EQ_ DASH_GT_ BACKSL_SLASH_ ]
expr -> expr . LT_GT_ expr [ SLASH_BACKSL_ PERIOD_ LT_GT_ LT_DASH_GT_ EQ_ DASH_GT_ BACKSL_SLASH_ ]
hyp_def -> FUNCTION IDENT compact_args COLON_ typ LBRACE_ expr RBRACE_ COLON_EQ_ expr . PERIOD_ [ THEOREM PARAMETER MUSTUSE INDUCTIVE FUNCTION FIXPOINT EOF ENDPROOF DEPENDS DEFINITION ]
## Transitions:
-- On SLASH_BACKSL_ shift to state 66
-- On PERIOD_ shift to state 200
-- On LT_GT_ shift to state 68
-- On LT_DASH_GT_ shift to state 72
-- On EQ_ shift to state 70
-- On DASH_GT_ shift to state 74
-- On BACKSL_SLASH_ shift to state 76
## Reductions:

State 200:
## Known stack suffix:
## FUNCTION IDENT compact_args COLON_ typ LBRACE_ expr RBRACE_ COLON_EQ_ expr PERIOD_
## LR(1) items:
hyp_def -> FUNCTION IDENT compact_args COLON_ typ LBRACE_ expr RBRACE_ COLON_EQ_ expr PERIOD_ . [ THEOREM PARAMETER MUSTUSE INDUCTIVE FUNCTION FIXPOINT EOF ENDPROOF DEPENDS DEFINITION ]
## Transitions:
## Reductions:
-- On THEOREM reduce production hyp_def -> FUNCTION IDENT compact_args COLON_ typ LBRACE_ expr RBRACE_ COLON_EQ_ expr PERIOD_
-- On PARAMETER reduce production hyp_def -> FUNCTION IDENT compact_args COLON_ typ LBRACE_ expr RBRACE_ COLON_EQ_ expr PERIOD_
-- On MUSTUSE reduce production hyp_def -> FUNCTION IDENT compact_args COLON_ typ LBRACE_ expr RBRACE_ COLON_EQ_ expr PERIOD_
-- On INDUCTIVE reduce production hyp_def -> FUNCTION IDENT compact_args COLON_ typ LBRACE_ expr RBRACE_ COLON_EQ_ expr PERIOD_
-- On FUNCTION reduce production hyp_def -> FUNCTION IDENT compact_args COLON_ typ LBRACE_ expr RBRACE_ COLON_EQ_ expr PERIOD_
-- On FIXPOINT reduce production hyp_def -> FUNCTION IDENT compact_args COLON_ typ LBRACE_ expr RBRACE_ COLON_EQ_ expr PERIOD_
-- On EOF reduce production hyp_def -> FUNCTION IDENT compact_args COLON_ typ LBRACE_ expr RBRACE_ COLON_EQ_ expr PERIOD_
-- On ENDPROOF reduce production hyp_def -> FUNCTION IDENT compact_args COLON_ typ LBRACE_ expr RBRACE_ COLON_EQ_ expr PERIOD_
-- On DEPENDS reduce production hyp_def -> FUNCTION IDENT compact_args COLON_ typ LBRACE_ expr RBRACE_ COLON_EQ_ expr PERIOD_
-- On DEFINITION reduce production hyp_def -> FUNCTION IDENT compact_args COLON_ typ LBRACE_ expr RBRACE_ COLON_EQ_ expr PERIOD_

State 201:
## Known stack suffix:
## FIXPOINT
## LR(1) items:
hyp_def -> FIXPOINT . IDENT compact_args LBRACE_ STRUCT IDENT RBRACE_ COLON_ typ COLON_EQ_ expr PERIOD_ [ THEOREM PARAMETER MUSTUSE INDUCTIVE FUNCTION FIXPOINT EOF ENDPROOF DEPENDS DEFINITION ]
## Transitions:
-- On IDENT shift to state 202
## Reductions:

State 202:
## Known stack suffix:
## FIXPOINT IDENT
## LR(1) items:
hyp_def -> FIXPOINT IDENT . compact_args LBRACE_ STRUCT IDENT RBRACE_ COLON_ typ COLON_EQ_ expr PERIOD_ [ THEOREM PARAMETER MUSTUSE INDUCTIVE FUNCTION FIXPOINT EOF ENDPROOF DEPENDS DEFINITION ]
## Transitions:
-- On LPAREN_ shift to state 186
-- On compact_args shift to state 203
## Reductions:
-- On LBRACE_ reduce production compact_args ->

State 203:
## Known stack suffix:
## FIXPOINT IDENT compact_args
## LR(1) items:
hyp_def -> FIXPOINT IDENT compact_args . LBRACE_ STRUCT IDENT RBRACE_ COLON_ typ COLON_EQ_ expr PERIOD_ [ THEOREM PARAMETER MUSTUSE INDUCTIVE FUNCTION FIXPOINT EOF ENDPROOF DEPENDS DEFINITION ]
## Transitions:
-- On LBRACE_ shift to state 204
## Reductions:

State 204:
## Known stack suffix:
## FIXPOINT IDENT compact_args LBRACE_
## LR(1) items:
hyp_def -> FIXPOINT IDENT compact_args LBRACE_ . STRUCT IDENT RBRACE_ COLON_ typ COLON_EQ_ expr PERIOD_ [ THEOREM PARAMETER MUSTUSE INDUCTIVE FUNCTION FIXPOINT EOF ENDPROOF DEPENDS DEFINITION ]
## Transitions:
-- On STRUCT shift to state 205
## Reductions:

State 205:
## Known stack suffix:
## FIXPOINT IDENT compact_args LBRACE_ STRUCT
## LR(1) items:
hyp_def -> FIXPOINT IDENT compact_args LBRACE_ STRUCT . IDENT RBRACE_ COLON_ typ COLON_EQ_ expr PERIOD_ [ THEOREM PARAMETER MUSTUSE INDUCTIVE FUNCTION FIXPOINT EOF ENDPROOF DEPENDS DEFINITION ]
## Transitions:
-- On IDENT shift to state 206
## Reductions:

State 206:
## Known stack suffix:
## FIXPOINT IDENT compact_args LBRACE_ STRUCT IDENT
## LR(1) items:
hyp_def -> FIXPOINT IDENT compact_args LBRACE_ STRUCT IDENT . RBRACE_ COLON_ typ COLON_EQ_ expr PERIOD_ [ THEOREM PARAMETER MUSTUSE INDUCTIVE FUNCTION FIXPOINT EOF ENDPROOF DEPENDS DEFINITION ]
## Transitions:
-- On RBRACE_ shift to state 207
## Reductions:

State 207:
## Known stack suffix:
## FIXPOINT IDENT compact_args LBRACE_ STRUCT IDENT RBRACE_
## LR(1) items:
hyp_def -> FIXPOINT IDENT compact_args LBRACE_ STRUCT IDENT RBRACE_ . COLON_ typ COLON_EQ_ expr PERIOD_ [ THEOREM PARAMETER MUSTUSE INDUCTIVE FUNCTION FIXPOINT EOF ENDPROOF DEPENDS DEFINITION ]
## Transitions:
-- On COLON_ shift to state 208
## Reductions:

State 208:
## Known stack suffix:
## FIXPOINT IDENT compact_args LBRACE_ STRUCT IDENT RBRACE_ COLON_
## LR(1) items:
hyp_def -> FIXPOINT IDENT compact_args LBRACE_ STRUCT IDENT RBRACE_ COLON_ . typ COLON_EQ_ expr PERIOD_ [ THEOREM PARAMETER MUSTUSE INDUCTIVE FUNCTION FIXPOINT EOF ENDPROOF DEPENDS DEFINITION ]
## Transitions:
-- On TRUE shift to state 1
-- On TILDE_ shift to state 2
-- On STRING shift to state 3
-- On NUM shift to state 4
-- On MATCH shift to state 5
-- On LPAREN_ shift to state 6
-- On LET shift to state 7
-- On IF shift to state 36
-- On IDENT shift to state 37
-- On FUN shift to state 38
-- On FORALL shift to state 49
-- On FALSE shift to state 54
-- On EXISTS shift to state 55
-- On AROBAS_ shift to state 58
-- On typ shift to state 209
-- On expr1 shift to state 63
-- On expr shift to state 81
## Reductions:

State 209:
## Known stack suffix:
## FIXPOINT IDENT compact_args LBRACE_ STRUCT IDENT RBRACE_ COLON_ typ
## LR(1) items:
hyp_def -> FIXPOINT IDENT compact_args LBRACE_ STRUCT IDENT RBRACE_ COLON_ typ . COLON_EQ_ expr PERIOD_ [ THEOREM PARAMETER MUSTUSE INDUCTIVE FUNCTION FIXPOINT EOF ENDPROOF DEPENDS DEFINITION ]
## Transitions:
-- On COLON_EQ_ shift to state 210
## Reductions:

State 210:
## Known stack suffix:
## FIXPOINT IDENT compact_args LBRACE_ STRUCT IDENT RBRACE_ COLON_ typ COLON_EQ_
## LR(1) items:
hyp_def -> FIXPOINT IDENT compact_args LBRACE_ STRUCT IDENT RBRACE_ COLON_ typ COLON_EQ_ . expr PERIOD_ [ THEOREM PARAMETER MUSTUSE INDUCTIVE FUNCTION FIXPOINT EOF ENDPROOF DEPENDS DEFINITION ]
## Transitions:
-- On TRUE shift to state 1
-- On TILDE_ shift to state 2
-- On STRING shift to state 3
-- On NUM shift to state 4
-- On MATCH shift to state 5
-- On LPAREN_ shift to state 6
-- On LET shift to state 7
-- On IF shift to state 36
-- On IDENT shift to state 37
-- On FUN shift to state 38
-- On FORALL shift to state 49
-- On FALSE shift to state 54
-- On EXISTS shift to state 55
-- On AROBAS_ shift to state 58
-- On expr1 shift to state 63
-- On expr shift to state 211
## Reductions:

State 211:
## Known stack suffix:
## FIXPOINT IDENT compact_args LBRACE_ STRUCT IDENT RBRACE_ COLON_ typ COLON_EQ_ expr
## LR(1) items:
expr -> expr . DASH_GT_ expr [ SLASH_BACKSL_ PERIOD_ LT_GT_ LT_DASH_GT_ EQ_ DASH_GT_ BACKSL_SLASH_ ]
expr -> expr . LT_DASH_GT_ expr [ SLASH_BACKSL_ PERIOD_ LT_GT_ LT_DASH_GT_ EQ_ DASH_GT_ BACKSL_SLASH_ ]
expr -> expr . BACKSL_SLASH_ expr [ SLASH_BACKSL_ PERIOD_ LT_GT_ LT_DASH_GT_ EQ_ DASH_GT_ BACKSL_SLASH_ ]
expr -> expr . SLASH_BACKSL_ expr [ SLASH_BACKSL_ PERIOD_ LT_GT_ LT_DASH_GT_ EQ_ DASH_GT_ BACKSL_SLASH_ ]
expr -> expr . EQ_ expr [ SLASH_BACKSL_ PERIOD_ LT_GT_ LT_DASH_GT_ EQ_ DASH_GT_ BACKSL_SLASH_ ]
expr -> expr . LT_GT_ expr [ SLASH_BACKSL_ PERIOD_ LT_GT_ LT_DASH_GT_ EQ_ DASH_GT_ BACKSL_SLASH_ ]
hyp_def -> FIXPOINT IDENT compact_args LBRACE_ STRUCT IDENT RBRACE_ COLON_ typ COLON_EQ_ expr . PERIOD_ [ THEOREM PARAMETER MUSTUSE INDUCTIVE FUNCTION FIXPOINT EOF ENDPROOF DEPENDS DEFINITION ]
## Transitions:
-- On SLASH_BACKSL_ shift to state 66
-- On PERIOD_ shift to state 212
-- On LT_GT_ shift to state 68
-- On LT_DASH_GT_ shift to state 72
-- On EQ_ shift to state 70
-- On DASH_GT_ shift to state 74
-- On BACKSL_SLASH_ shift to state 76
## Reductions:

State 212:
## Known stack suffix:
## FIXPOINT IDENT compact_args LBRACE_ STRUCT IDENT RBRACE_ COLON_ typ COLON_EQ_ expr PERIOD_
## LR(1) items:
hyp_def -> FIXPOINT IDENT compact_args LBRACE_ STRUCT IDENT RBRACE_ COLON_ typ COLON_EQ_ expr PERIOD_ . [ THEOREM PARAMETER MUSTUSE INDUCTIVE FUNCTION FIXPOINT EOF ENDPROOF DEPENDS DEFINITION ]
## Transitions:
## Reductions:
-- On THEOREM reduce production hyp_def -> FIXPOINT IDENT compact_args LBRACE_ STRUCT IDENT RBRACE_ COLON_ typ COLON_EQ_ expr PERIOD_
-- On PARAMETER reduce production hyp_def -> FIXPOINT IDENT compact_args LBRACE_ STRUCT IDENT RBRACE_ COLON_ typ COLON_EQ_ expr PERIOD_
-- On MUSTUSE reduce production hyp_def -> FIXPOINT IDENT compact_args LBRACE_ STRUCT IDENT RBRACE_ COLON_ typ COLON_EQ_ expr PERIOD_
-- On INDUCTIVE reduce production hyp_def -> FIXPOINT IDENT compact_args LBRACE_ STRUCT IDENT RBRACE_ COLON_ typ COLON_EQ_ expr PERIOD_
-- On FUNCTION reduce production hyp_def -> FIXPOINT IDENT compact_args LBRACE_ STRUCT IDENT RBRACE_ COLON_ typ COLON_EQ_ expr PERIOD_
-- On FIXPOINT reduce production hyp_def -> FIXPOINT IDENT compact_args LBRACE_ STRUCT IDENT RBRACE_ COLON_ typ COLON_EQ_ expr PERIOD_
-- On EOF reduce production hyp_def -> FIXPOINT IDENT compact_args LBRACE_ STRUCT IDENT RBRACE_ COLON_ typ COLON_EQ_ expr PERIOD_
-- On ENDPROOF reduce production hyp_def -> FIXPOINT IDENT compact_args LBRACE_ STRUCT IDENT RBRACE_ COLON_ typ COLON_EQ_ expr PERIOD_
-- On DEPENDS reduce production hyp_def -> FIXPOINT IDENT compact_args LBRACE_ STRUCT IDENT RBRACE_ COLON_ typ COLON_EQ_ expr PERIOD_
-- On DEFINITION reduce production hyp_def -> FIXPOINT IDENT compact_args LBRACE_ STRUCT IDENT RBRACE_ COLON_ typ COLON_EQ_ expr PERIOD_

State 213:
## Known stack suffix:
## DEFINITION
## LR(1) items:
hyp_def -> DEFINITION . id_or_expr COLON_EQ_ expr PERIOD_ [ THEOREM PARAMETER MUSTUSE INDUCTIVE FUNCTION FIXPOINT EOF ENDPROOF DEPENDS DEFINITION ]
hyp_def -> DEFINITION . IDENT compact_args COLON_ typ COLON_EQ_ expr PERIOD_ [ THEOREM PARAMETER MUSTUSE INDUCTIVE FUNCTION FIXPOINT EOF ENDPROOF DEPENDS DEFINITION ]
## Transitions:
-- On STRING shift to state 151
-- On IDENT shift to state 214
-- On id_or_expr shift to state 221
## Reductions:

State 214:
## Known stack suffix:
## DEFINITION IDENT
## LR(1) items:
hyp_def -> DEFINITION IDENT . compact_args COLON_ typ COLON_EQ_ expr PERIOD_ [ THEOREM PARAMETER MUSTUSE INDUCTIVE FUNCTION FIXPOINT EOF ENDPROOF DEPENDS DEFINITION ]
id_or_expr -> IDENT . [ COLON_EQ_ ]
## Transitions:
-- On LPAREN_ shift to state 186
-- On compact_args shift to state 215
## Reductions:
-- On COLON_EQ_ reduce production id_or_expr -> IDENT
-- On COLON_ reduce production compact_args ->

State 215:
## Known stack suffix:
## DEFINITION IDENT compact_args
## LR(1) items:
hyp_def -> DEFINITION IDENT compact_args . COLON_ typ COLON_EQ_ expr PERIOD_ [ THEOREM PARAMETER MUSTUSE INDUCTIVE FUNCTION FIXPOINT EOF ENDPROOF DEPENDS DEFINITION ]
## Transitions:
-- On COLON_ shift to state 216
## Reductions:

State 216:
## Known stack suffix:
## DEFINITION IDENT compact_args COLON_
## LR(1) items:
hyp_def -> DEFINITION IDENT compact_args COLON_ . typ COLON_EQ_ expr PERIOD_ [ THEOREM PARAMETER MUSTUSE INDUCTIVE FUNCTION FIXPOINT EOF ENDPROOF DEPENDS DEFINITION ]
## Transitions:
-- On TRUE shift to state 1
-- On TILDE_ shift to state 2
-- On STRING shift to state 3
-- On NUM shift to state 4
-- On MATCH shift to state 5
-- On LPAREN_ shift to state 6
-- On LET shift to state 7
-- On IF shift to state 36
-- On IDENT shift to state 37
-- On FUN shift to state 38
-- On FORALL shift to state 49
-- On FALSE shift to state 54
-- On EXISTS shift to state 55
-- On AROBAS_ shift to state 58
-- On typ shift to state 217
-- On expr1 shift to state 63
-- On expr shift to state 81
## Reductions:

State 217:
## Known stack suffix:
## DEFINITION IDENT compact_args COLON_ typ
## LR(1) items:
hyp_def -> DEFINITION IDENT compact_args COLON_ typ . COLON_EQ_ expr PERIOD_ [ THEOREM PARAMETER MUSTUSE INDUCTIVE FUNCTION FIXPOINT EOF ENDPROOF DEPENDS DEFINITION ]
## Transitions:
-- On COLON_EQ_ shift to state 218
## Reductions:

State 218:
## Known stack suffix:
## DEFINITION IDENT compact_args COLON_ typ COLON_EQ_
## LR(1) items:
hyp_def -> DEFINITION IDENT compact_args COLON_ typ COLON_EQ_ . expr PERIOD_ [ THEOREM PARAMETER MUSTUSE INDUCTIVE FUNCTION FIXPOINT EOF ENDPROOF DEPENDS DEFINITION ]
## Transitions:
-- On TRUE shift to state 1
-- On TILDE_ shift to state 2
-- On STRING shift to state 3
-- On NUM shift to state 4
-- On MATCH shift to state 5
-- On LPAREN_ shift to state 6
-- On LET shift to state 7
-- On IF shift to state 36
-- On IDENT shift to state 37
-- On FUN shift to state 38
-- On FORALL shift to state 49
-- On FALSE shift to state 54
-- On EXISTS shift to state 55
-- On AROBAS_ shift to state 58
-- On expr1 shift to state 63
-- On expr shift to state 219
## Reductions:

State 219:
## Known stack suffix:
## DEFINITION IDENT compact_args COLON_ typ COLON_EQ_ expr
## LR(1) items:
expr -> expr . DASH_GT_ expr [ SLASH_BACKSL_ PERIOD_ LT_GT_ LT_DASH_GT_ EQ_ DASH_GT_ BACKSL_SLASH_ ]
expr -> expr . LT_DASH_GT_ expr [ SLASH_BACKSL_ PERIOD_ LT_GT_ LT_DASH_GT_ EQ_ DASH_GT_ BACKSL_SLASH_ ]
expr -> expr . BACKSL_SLASH_ expr [ SLASH_BACKSL_ PERIOD_ LT_GT_ LT_DASH_GT_ EQ_ DASH_GT_ BACKSL_SLASH_ ]
expr -> expr . SLASH_BACKSL_ expr [ SLASH_BACKSL_ PERIOD_ LT_GT_ LT_DASH_GT_ EQ_ DASH_GT_ BACKSL_SLASH_ ]
expr -> expr . EQ_ expr [ SLASH_BACKSL_ PERIOD_ LT_GT_ LT_DASH_GT_ EQ_ DASH_GT_ BACKSL_SLASH_ ]
expr -> expr . LT_GT_ expr [ SLASH_BACKSL_ PERIOD_ LT_GT_ LT_DASH_GT_ EQ_ DASH_GT_ BACKSL_SLASH_ ]
hyp_def -> DEFINITION IDENT compact_args COLON_ typ COLON_EQ_ expr . PERIOD_ [ THEOREM PARAMETER MUSTUSE INDUCTIVE FUNCTION FIXPOINT EOF ENDPROOF DEPENDS DEFINITION ]
## Transitions:
-- On SLASH_BACKSL_ shift to state 66
-- On PERIOD_ shift to state 220
-- On LT_GT_ shift to state 68
-- On LT_DASH_GT_ shift to state 72
-- On EQ_ shift to state 70
-- On DASH_GT_ shift to state 74
-- On BACKSL_SLASH_ shift to state 76
## Reductions:

State 220:
## Known stack suffix:
## DEFINITION IDENT compact_args COLON_ typ COLON_EQ_ expr PERIOD_
## LR(1) items:
hyp_def -> DEFINITION IDENT compact_args COLON_ typ COLON_EQ_ expr PERIOD_ . [ THEOREM PARAMETER MUSTUSE INDUCTIVE FUNCTION FIXPOINT EOF ENDPROOF DEPENDS DEFINITION ]
## Transitions:
## Reductions:
-- On THEOREM reduce production hyp_def -> DEFINITION IDENT compact_args COLON_ typ COLON_EQ_ expr PERIOD_
-- On PARAMETER reduce production hyp_def -> DEFINITION IDENT compact_args COLON_ typ COLON_EQ_ expr PERIOD_
-- On MUSTUSE reduce production hyp_def -> DEFINITION IDENT compact_args COLON_ typ COLON_EQ_ expr PERIOD_
-- On INDUCTIVE reduce production hyp_def -> DEFINITION IDENT compact_args COLON_ typ COLON_EQ_ expr PERIOD_
-- On FUNCTION reduce production hyp_def -> DEFINITION IDENT compact_args COLON_ typ COLON_EQ_ expr PERIOD_
-- On FIXPOINT reduce production hyp_def -> DEFINITION IDENT compact_args COLON_ typ COLON_EQ_ expr PERIOD_
-- On EOF reduce production hyp_def -> DEFINITION IDENT compact_args COLON_ typ COLON_EQ_ expr PERIOD_
-- On ENDPROOF reduce production hyp_def -> DEFINITION IDENT compact_args COLON_ typ COLON_EQ_ expr PERIOD_
-- On DEPENDS reduce production hyp_def -> DEFINITION IDENT compact_args COLON_ typ COLON_EQ_ expr PERIOD_
-- On DEFINITION reduce production hyp_def -> DEFINITION IDENT compact_args COLON_ typ COLON_EQ_ expr PERIOD_

State 221:
## Known stack suffix:
## DEFINITION id_or_expr
## LR(1) items:
hyp_def -> DEFINITION id_or_expr . COLON_EQ_ expr PERIOD_ [ THEOREM PARAMETER MUSTUSE INDUCTIVE FUNCTION FIXPOINT EOF ENDPROOF DEPENDS DEFINITION ]
## Transitions:
-- On COLON_EQ_ shift to state 222
## Reductions:

State 222:
## Known stack suffix:
## DEFINITION id_or_expr COLON_EQ_
## LR(1) items:
hyp_def -> DEFINITION id_or_expr COLON_EQ_ . expr PERIOD_ [ THEOREM PARAMETER MUSTUSE INDUCTIVE FUNCTION FIXPOINT EOF ENDPROOF DEPENDS DEFINITION ]
## Transitions:
-- On TRUE shift to state 1
-- On TILDE_ shift to state 2
-- On STRING shift to state 3
-- On NUM shift to state 4
-- On MATCH shift to state 5
-- On LPAREN_ shift to state 6
-- On LET shift to state 7
-- On IF shift to state 36
-- On IDENT shift to state 37
-- On FUN shift to state 38
-- On FORALL shift to state 49
-- On FALSE shift to state 54
-- On EXISTS shift to state 55
-- On AROBAS_ shift to state 58
-- On expr1 shift to state 63
-- On expr shift to state 223
## Reductions:

State 223:
## Known stack suffix:
## DEFINITION id_or_expr COLON_EQ_ expr
## LR(1) items:
expr -> expr . DASH_GT_ expr [ SLASH_BACKSL_ PERIOD_ LT_GT_ LT_DASH_GT_ EQ_ DASH_GT_ BACKSL_SLASH_ ]
expr -> expr . LT_DASH_GT_ expr [ SLASH_BACKSL_ PERIOD_ LT_GT_ LT_DASH_GT_ EQ_ DASH_GT_ BACKSL_SLASH_ ]
expr -> expr . BACKSL_SLASH_ expr [ SLASH_BACKSL_ PERIOD_ LT_GT_ LT_DASH_GT_ EQ_ DASH_GT_ BACKSL_SLASH_ ]
expr -> expr . SLASH_BACKSL_ expr [ SLASH_BACKSL_ PERIOD_ LT_GT_ LT_DASH_GT_ EQ_ DASH_GT_ BACKSL_SLASH_ ]
expr -> expr . EQ_ expr [ SLASH_BACKSL_ PERIOD_ LT_GT_ LT_DASH_GT_ EQ_ DASH_GT_ BACKSL_SLASH_ ]
expr -> expr . LT_GT_ expr [ SLASH_BACKSL_ PERIOD_ LT_GT_ LT_DASH_GT_ EQ_ DASH_GT_ BACKSL_SLASH_ ]
hyp_def -> DEFINITION id_or_expr COLON_EQ_ expr . PERIOD_ [ THEOREM PARAMETER MUSTUSE INDUCTIVE FUNCTION FIXPOINT EOF ENDPROOF DEPENDS DEFINITION ]
## Transitions:
-- On SLASH_BACKSL_ shift to state 66
-- On PERIOD_ shift to state 224
-- On LT_GT_ shift to state 68
-- On LT_DASH_GT_ shift to state 72
-- On EQ_ shift to state 70
-- On DASH_GT_ shift to state 74
-- On BACKSL_SLASH_ shift to state 76
## Reductions:

State 224:
## Known stack suffix:
## DEFINITION id_or_expr COLON_EQ_ expr PERIOD_
## LR(1) items:
hyp_def -> DEFINITION id_or_expr COLON_EQ_ expr PERIOD_ . [ THEOREM PARAMETER MUSTUSE INDUCTIVE FUNCTION FIXPOINT EOF ENDPROOF DEPENDS DEFINITION ]
## Transitions:
## Reductions:
-- On THEOREM reduce production hyp_def -> DEFINITION id_or_expr COLON_EQ_ expr PERIOD_
-- On PARAMETER reduce production hyp_def -> DEFINITION id_or_expr COLON_EQ_ expr PERIOD_
-- On MUSTUSE reduce production hyp_def -> DEFINITION id_or_expr COLON_EQ_ expr PERIOD_
-- On INDUCTIVE reduce production hyp_def -> DEFINITION id_or_expr COLON_EQ_ expr PERIOD_
-- On FUNCTION reduce production hyp_def -> DEFINITION id_or_expr COLON_EQ_ expr PERIOD_
-- On FIXPOINT reduce production hyp_def -> DEFINITION id_or_expr COLON_EQ_ expr PERIOD_
-- On EOF reduce production hyp_def -> DEFINITION id_or_expr COLON_EQ_ expr PERIOD_
-- On ENDPROOF reduce production hyp_def -> DEFINITION id_or_expr COLON_EQ_ expr PERIOD_
-- On DEPENDS reduce production hyp_def -> DEFINITION id_or_expr COLON_EQ_ expr PERIOD_
-- On DEFINITION reduce production hyp_def -> DEFINITION id_or_expr COLON_EQ_ expr PERIOD_

State 225:
## Known stack suffix:
## MUSTUSE hyp_def
## LR(1) items:
dep_hyp_def -> MUSTUSE hyp_def . [ THEOREM PARAMETER MUSTUSE INDUCTIVE FUNCTION FIXPOINT EOF ENDPROOF DEPENDS DEFINITION ]
## Transitions:
## Reductions:
-- On THEOREM reduce production dep_hyp_def -> MUSTUSE hyp_def
-- On PARAMETER reduce production dep_hyp_def -> MUSTUSE hyp_def
-- On MUSTUSE reduce production dep_hyp_def -> MUSTUSE hyp_def
-- On INDUCTIVE reduce production dep_hyp_def -> MUSTUSE hyp_def
-- On FUNCTION reduce production dep_hyp_def -> MUSTUSE hyp_def
-- On FIXPOINT reduce production dep_hyp_def -> MUSTUSE hyp_def
-- On EOF reduce production dep_hyp_def -> MUSTUSE hyp_def
-- On ENDPROOF reduce production dep_hyp_def -> MUSTUSE hyp_def
-- On DEPENDS reduce production dep_hyp_def -> MUSTUSE hyp_def
-- On DEFINITION reduce production dep_hyp_def -> MUSTUSE hyp_def

State 226:
## Known stack suffix:
## DEPENDS
## LR(1) items:
dep_hyp_def -> DEPENDS . ON hyp_def [ THEOREM PARAMETER MUSTUSE INDUCTIVE FUNCTION FIXPOINT EOF ENDPROOF DEPENDS DEFINITION ]
## Transitions:
-- On ON shift to state 227
## Reductions:

State 227:
## Known stack suffix:
## DEPENDS ON
## LR(1) items:
dep_hyp_def -> DEPENDS ON . hyp_def [ THEOREM PARAMETER MUSTUSE INDUCTIVE FUNCTION FIXPOINT EOF ENDPROOF DEPENDS DEFINITION ]
## Transitions:
-- On PARAMETER shift to state 150
-- On INDUCTIVE shift to state 158
-- On FUNCTION shift to state 184
-- On FIXPOINT shift to state 201
-- On DEFINITION shift to state 213
-- On hyp_def shift to state 228
## Reductions:

State 228:
## Known stack suffix:
## DEPENDS ON hyp_def
## LR(1) items:
dep_hyp_def -> DEPENDS ON hyp_def . [ THEOREM PARAMETER MUSTUSE INDUCTIVE FUNCTION FIXPOINT EOF ENDPROOF DEPENDS DEFINITION ]
## Transitions:
## Reductions:
-- On THEOREM reduce production dep_hyp_def -> DEPENDS ON hyp_def
-- On PARAMETER reduce production dep_hyp_def -> DEPENDS ON hyp_def
-- On MUSTUSE reduce production dep_hyp_def -> DEPENDS ON hyp_def
-- On INDUCTIVE reduce production dep_hyp_def -> DEPENDS ON hyp_def
-- On FUNCTION reduce production dep_hyp_def -> DEPENDS ON hyp_def
-- On FIXPOINT reduce production dep_hyp_def -> DEPENDS ON hyp_def
-- On EOF reduce production dep_hyp_def -> DEPENDS ON hyp_def
-- On ENDPROOF reduce production dep_hyp_def -> DEPENDS ON hyp_def
-- On DEPENDS reduce production dep_hyp_def -> DEPENDS ON hyp_def
-- On DEFINITION reduce production dep_hyp_def -> DEPENDS ON hyp_def

State 229:
## Known stack suffix:
## BEGINPROOF
## LR(1) items:
proof_head -> BEGINPROOF . proofheaders BEGINNAME proofheaders [ TRUE TILDE_ THEOREM STRING PARAMETER NUM MUSTUSE MATCH LPAREN_ LET INDUCTIVE IF IDENT FUNCTION FUN FORALL FIXPOINT FALSE EXISTS DEPENDS DEFINITION AROBAS_ ]
proof_head -> BEGINPROOF . proofheaders [ TRUE TILDE_ THEOREM STRING PARAMETER NUM MUSTUSE MATCH LPAREN_ LET INDUCTIVE IF IDENT FUNCTION FUN FORALL FIXPOINT FALSE EXISTS DEPENDS DEFINITION AROBAS_ ]
## Transitions:
-- On BEGINHEADER shift to state 230
-- On proofheaders shift to state 232
## Reductions:
-- On TRUE reduce production proofheaders ->
-- On TILDE_ reduce production proofheaders ->
-- On THEOREM reduce production proofheaders ->
-- On STRING reduce production proofheaders ->
-- On PARAMETER reduce production proofheaders ->
-- On NUM reduce production proofheaders ->
-- On MUSTUSE reduce production proofheaders ->
-- On MATCH reduce production proofheaders ->
-- On LPAREN_ reduce production proofheaders ->
-- On LET reduce production proofheaders ->
-- On INDUCTIVE reduce production proofheaders ->
-- On IF reduce production proofheaders ->
-- On IDENT reduce production proofheaders ->
-- On FUNCTION reduce production proofheaders ->
-- On FUN reduce production proofheaders ->
-- On FORALL reduce production proofheaders ->
-- On FIXPOINT reduce production proofheaders ->
-- On FALSE reduce production proofheaders ->
-- On EXISTS reduce production proofheaders ->
-- On DEPENDS reduce production proofheaders ->
-- On DEFINITION reduce production proofheaders ->
-- On BEGINNAME reduce production proofheaders ->
-- On AROBAS_ reduce production proofheaders ->

State 230:
## Known stack suffix:
## BEGINHEADER
## LR(1) items:
proofheaders -> BEGINHEADER . proofheaders [ TRUE TILDE_ THEOREM STRING PARAMETER NUM MUSTUSE MATCH LPAREN_ LET INDUCTIVE IF IDENT FUNCTION FUN FORALL FIXPOINT FALSE EXISTS DEPENDS DEFINITION BEGINNAME AROBAS_ ]
## Transitions:
-- On BEGINHEADER shift to state 230
-- On proofheaders shift to state 231
## Reductions:
-- On TRUE reduce production proofheaders ->
-- On TILDE_ reduce production proofheaders ->
-- On THEOREM reduce production proofheaders ->
-- On STRING reduce production proofheaders ->
-- On PARAMETER reduce production proofheaders ->
-- On NUM reduce production proofheaders ->
-- On MUSTUSE reduce production proofheaders ->
-- On MATCH reduce production proofheaders ->
-- On LPAREN_ reduce production proofheaders ->
-- On LET reduce production proofheaders ->
-- On INDUCTIVE reduce production proofheaders ->
-- On IF reduce production proofheaders ->
-- On IDENT reduce production proofheaders ->
-- On FUNCTION reduce production proofheaders ->
-- On FUN reduce production proofheaders ->
-- On FORALL reduce production proofheaders ->
-- On FIXPOINT reduce production proofheaders ->
-- On FALSE reduce production proofheaders ->
-- On EXISTS reduce production proofheaders ->
-- On DEPENDS reduce production proofheaders ->
-- On DEFINITION reduce production proofheaders ->
-- On BEGINNAME reduce production proofheaders ->
-- On AROBAS_ reduce production proofheaders ->

State 231:
## Known stack suffix:
## BEGINHEADER proofheaders
## LR(1) items:
proofheaders -> BEGINHEADER proofheaders . [ TRUE TILDE_ THEOREM STRING PARAMETER NUM MUSTUSE MATCH LPAREN_ LET INDUCTIVE IF IDENT FUNCTION FUN FORALL FIXPOINT FALSE EXISTS DEPENDS DEFINITION BEGINNAME AROBAS_ ]
## Transitions:
## Reductions:
-- On TRUE reduce production proofheaders -> BEGINHEADER proofheaders
-- On TILDE_ reduce production proofheaders -> BEGINHEADER proofheaders
-- On THEOREM reduce production proofheaders -> BEGINHEADER proofheaders
-- On STRING reduce production proofheaders -> BEGINHEADER proofheaders
-- On PARAMETER reduce production proofheaders -> BEGINHEADER proofheaders
-- On NUM reduce production proofheaders -> BEGINHEADER proofheaders
-- On MUSTUSE reduce production proofheaders -> BEGINHEADER proofheaders
-- On MATCH reduce production proofheaders -> BEGINHEADER proofheaders
-- On LPAREN_ reduce production proofheaders -> BEGINHEADER proofheaders
-- On LET reduce production proofheaders -> BEGINHEADER proofheaders
-- On INDUCTIVE reduce production proofheaders -> BEGINHEADER proofheaders
-- On IF reduce production proofheaders -> BEGINHEADER proofheaders
-- On IDENT reduce production proofheaders -> BEGINHEADER proofheaders
-- On FUNCTION reduce production proofheaders -> BEGINHEADER proofheaders
-- On FUN reduce production proofheaders -> BEGINHEADER proofheaders
-- On FORALL reduce production proofheaders -> BEGINHEADER proofheaders
-- On FIXPOINT reduce production proofheaders -> BEGINHEADER proofheaders
-- On FALSE reduce production proofheaders -> BEGINHEADER proofheaders
-- On EXISTS reduce production proofheaders -> BEGINHEADER proofheaders
-- On DEPENDS reduce production proofheaders -> BEGINHEADER proofheaders
-- On DEFINITION reduce production proofheaders -> BEGINHEADER proofheaders
-- On BEGINNAME reduce production proofheaders -> BEGINHEADER proofheaders
-- On AROBAS_ reduce production proofheaders -> BEGINHEADER proofheaders

State 232:
## Known stack suffix:
## BEGINPROOF proofheaders
## LR(1) items:
proof_head -> BEGINPROOF proofheaders . BEGINNAME proofheaders [ TRUE TILDE_ THEOREM STRING PARAMETER NUM MUSTUSE MATCH LPAREN_ LET INDUCTIVE IF IDENT FUNCTION FUN FORALL FIXPOINT FALSE EXISTS DEPENDS DEFINITION AROBAS_ ]
proof_head -> BEGINPROOF proofheaders . [ TRUE TILDE_ THEOREM STRING PARAMETER NUM MUSTUSE MATCH LPAREN_ LET INDUCTIVE IF IDENT FUNCTION FUN FORALL FIXPOINT FALSE EXISTS DEPENDS DEFINITION AROBAS_ ]
## Transitions:
-- On BEGINNAME shift to state 233
## Reductions:
-- On TRUE reduce production proof_head -> BEGINPROOF proofheaders
-- On TILDE_ reduce production proof_head -> BEGINPROOF proofheaders
-- On THEOREM reduce production proof_head -> BEGINPROOF proofheaders
-- On STRING reduce production proof_head -> BEGINPROOF proofheaders
-- On PARAMETER reduce production proof_head -> BEGINPROOF proofheaders
-- On NUM reduce production proof_head -> BEGINPROOF proofheaders
-- On MUSTUSE reduce production proof_head -> BEGINPROOF proofheaders
-- On MATCH reduce production proof_head -> BEGINPROOF proofheaders
-- On LPAREN_ reduce production proof_head -> BEGINPROOF proofheaders
-- On LET reduce production proof_head -> BEGINPROOF proofheaders
-- On INDUCTIVE reduce production proof_head -> BEGINPROOF proofheaders
-- On IF reduce production proof_head -> BEGINPROOF proofheaders
-- On IDENT reduce production proof_head -> BEGINPROOF proofheaders
-- On FUNCTION reduce production proof_head -> BEGINPROOF proofheaders
-- On FUN reduce production proof_head -> BEGINPROOF proofheaders
-- On FORALL reduce production proof_head -> BEGINPROOF proofheaders
-- On FIXPOINT reduce production proof_head -> BEGINPROOF proofheaders
-- On FALSE reduce production proof_head -> BEGINPROOF proofheaders
-- On EXISTS reduce production proof_head -> BEGINPROOF proofheaders
-- On DEPENDS reduce production proof_head -> BEGINPROOF proofheaders
-- On DEFINITION reduce production proof_head -> BEGINPROOF proofheaders
-- On AROBAS_ reduce production proof_head -> BEGINPROOF proofheaders

State 233:
## Known stack suffix:
## BEGINPROOF proofheaders BEGINNAME
## LR(1) items:
proof_head -> BEGINPROOF proofheaders BEGINNAME . proofheaders [ TRUE TILDE_ THEOREM STRING PARAMETER NUM MUSTUSE MATCH LPAREN_ LET INDUCTIVE IF IDENT FUNCTION FUN FORALL FIXPOINT FALSE EXISTS DEPENDS DEFINITION AROBAS_ ]
## Transitions:
-- On BEGINHEADER shift to state 230
-- On proofheaders shift to state 234
## Reductions:
-- On TRUE reduce production proofheaders ->
-- On TILDE_ reduce production proofheaders ->
-- On THEOREM reduce production proofheaders ->
-- On STRING reduce production proofheaders ->
-- On PARAMETER reduce production proofheaders ->
-- On NUM reduce production proofheaders ->
-- On MUSTUSE reduce production proofheaders ->
-- On MATCH reduce production proofheaders ->
-- On LPAREN_ reduce production proofheaders ->
-- On LET reduce production proofheaders ->
-- On INDUCTIVE reduce production proofheaders ->
-- On IF reduce production proofheaders ->
-- On IDENT reduce production proofheaders ->
-- On FUNCTION reduce production proofheaders ->
-- On FUN reduce production proofheaders ->
-- On FORALL reduce production proofheaders ->
-- On FIXPOINT reduce production proofheaders ->
-- On FALSE reduce production proofheaders ->
-- On EXISTS reduce production proofheaders ->
-- On DEPENDS reduce production proofheaders ->
-- On DEFINITION reduce production proofheaders ->
-- On AROBAS_ reduce production proofheaders ->

State 234:
## Known stack suffix:
## BEGINPROOF proofheaders BEGINNAME proofheaders
## LR(1) items:
proof_head -> BEGINPROOF proofheaders BEGINNAME proofheaders . [ TRUE TILDE_ THEOREM STRING PARAMETER NUM MUSTUSE MATCH LPAREN_ LET INDUCTIVE IF IDENT FUNCTION FUN FORALL FIXPOINT FALSE EXISTS DEPENDS DEFINITION AROBAS_ ]
## Transitions:
## Reductions:
-- On TRUE reduce production proof_head -> BEGINPROOF proofheaders BEGINNAME proofheaders
-- On TILDE_ reduce production proof_head -> BEGINPROOF proofheaders BEGINNAME proofheaders
-- On THEOREM reduce production proof_head -> BEGINPROOF proofheaders BEGINNAME proofheaders
-- On STRING reduce production proof_head -> BEGINPROOF proofheaders BEGINNAME proofheaders
-- On PARAMETER reduce production proof_head -> BEGINPROOF proofheaders BEGINNAME proofheaders
-- On NUM reduce production proof_head -> BEGINPROOF proofheaders BEGINNAME proofheaders
-- On MUSTUSE reduce production proof_head -> BEGINPROOF proofheaders BEGINNAME proofheaders
-- On MATCH reduce production proof_head -> BEGINPROOF proofheaders BEGINNAME proofheaders
-- On LPAREN_ reduce production proof_head -> BEGINPROOF proofheaders BEGINNAME proofheaders
-- On LET reduce production proof_head -> BEGINPROOF proofheaders BEGINNAME proofheaders
-- On INDUCTIVE reduce production proof_head -> BEGINPROOF proofheaders BEGINNAME proofheaders
-- On IF reduce production proof_head -> BEGINPROOF proofheaders BEGINNAME proofheaders
-- On IDENT reduce production proof_head -> BEGINPROOF proofheaders BEGINNAME proofheaders
-- On FUNCTION reduce production proof_head -> BEGINPROOF proofheaders BEGINNAME proofheaders
-- On FUN reduce production proof_head -> BEGINPROOF proofheaders BEGINNAME proofheaders
-- On FORALL reduce production proof_head -> BEGINPROOF proofheaders BEGINNAME proofheaders
-- On FIXPOINT reduce production proof_head -> BEGINPROOF proofheaders BEGINNAME proofheaders
-- On FALSE reduce production proof_head -> BEGINPROOF proofheaders BEGINNAME proofheaders
-- On EXISTS reduce production proof_head -> BEGINPROOF proofheaders BEGINNAME proofheaders
-- On DEPENDS reduce production proof_head -> BEGINPROOF proofheaders BEGINNAME proofheaders
-- On DEFINITION reduce production proof_head -> BEGINPROOF proofheaders BEGINNAME proofheaders
-- On AROBAS_ reduce production proof_head -> BEGINPROOF proofheaders BEGINNAME proofheaders

State 235:
## Known stack suffix:
## proof_head
## LR(1) items:
file -> proof_head . hyp_def_list THEOREM IDENT COLON_ expr PERIOD_ ENDPROOF EOF [ # ]
file -> proof_head . expr hyp_def_list ENDPROOF EOF [ # ]
## Transitions:
-- On TRUE shift to state 1
-- On TILDE_ shift to state 2
-- On STRING shift to state 3
-- On PARAMETER shift to state 150
-- On NUM shift to state 4
-- On MUSTUSE shift to state 157
-- On MATCH shift to state 5
-- On LPAREN_ shift to state 6
-- On LET shift to state 7
-- On INDUCTIVE shift to state 158
-- On IF shift to state 36
-- On IDENT shift to state 37
-- On FUNCTION shift to state 184
-- On FUN shift to state 38
-- On FORALL shift to state 49
-- On FIXPOINT shift to state 201
-- On FALSE shift to state 54
-- On EXISTS shift to state 55
-- On DEPENDS shift to state 226
-- On DEFINITION shift to state 213
-- On AROBAS_ shift to state 58
-- On hyp_def_list shift to state 236
-- On hyp_def shift to state 244
-- On expr1 shift to state 63
-- On expr shift to state 245
-- On dep_hyp_def shift to state 249
## Reductions:
-- On THEOREM reduce production hyp_def_list ->

State 236:
## Known stack suffix:
## proof_head hyp_def_list
## LR(1) items:
file -> proof_head hyp_def_list . THEOREM IDENT COLON_ expr PERIOD_ ENDPROOF EOF [ # ]
## Transitions:
-- On THEOREM shift to state 237
## Reductions:

State 237:
## Known stack suffix:
## proof_head hyp_def_list THEOREM
## LR(1) items:
file -> proof_head hyp_def_list THEOREM . IDENT COLON_ expr PERIOD_ ENDPROOF EOF [ # ]
## Transitions:
-- On IDENT shift to state 238
## Reductions:

State 238:
## Known stack suffix:
## proof_head hyp_def_list THEOREM IDENT
## LR(1) items:
file -> proof_head hyp_def_list THEOREM IDENT . COLON_ expr PERIOD_ ENDPROOF EOF [ # ]
## Transitions:
-- On COLON_ shift to state 239
## Reductions:

State 239:
## Known stack suffix:
## proof_head hyp_def_list THEOREM IDENT COLON_
## LR(1) items:
file -> proof_head hyp_def_list THEOREM IDENT COLON_ . expr PERIOD_ ENDPROOF EOF [ # ]
## Transitions:
-- On TRUE shift to state 1
-- On TILDE_ shift to state 2
-- On STRING shift to state 3
-- On NUM shift to state 4
-- On MATCH shift to state 5
-- On LPAREN_ shift to state 6
-- On LET shift to state 7
-- On IF shift to state 36
-- On IDENT shift to state 37
-- On FUN shift to state 38
-- On FORALL shift to state 49
-- On FALSE shift to state 54
-- On EXISTS shift to state 55
-- On AROBAS_ shift to state 58
-- On expr1 shift to state 63
-- On expr shift to state 240
## Reductions:

State 240:
## Known stack suffix:
## proof_head hyp_def_list THEOREM IDENT COLON_ expr
## LR(1) items:
expr -> expr . DASH_GT_ expr [ SLASH_BACKSL_ PERIOD_ LT_GT_ LT_DASH_GT_ EQ_ DASH_GT_ BACKSL_SLASH_ ]
expr -> expr . LT_DASH_GT_ expr [ SLASH_BACKSL_ PERIOD_ LT_GT_ LT_DASH_GT_ EQ_ DASH_GT_ BACKSL_SLASH_ ]
expr -> expr . BACKSL_SLASH_ expr [ SLASH_BACKSL_ PERIOD_ LT_GT_ LT_DASH_GT_ EQ_ DASH_GT_ BACKSL_SLASH_ ]
expr -> expr . SLASH_BACKSL_ expr [ SLASH_BACKSL_ PERIOD_ LT_GT_ LT_DASH_GT_ EQ_ DASH_GT_ BACKSL_SLASH_ ]
expr -> expr . EQ_ expr [ SLASH_BACKSL_ PERIOD_ LT_GT_ LT_DASH_GT_ EQ_ DASH_GT_ BACKSL_SLASH_ ]
expr -> expr . LT_GT_ expr [ SLASH_BACKSL_ PERIOD_ LT_GT_ LT_DASH_GT_ EQ_ DASH_GT_ BACKSL_SLASH_ ]
file -> proof_head hyp_def_list THEOREM IDENT COLON_ expr . PERIOD_ ENDPROOF EOF [ # ]
## Transitions:
-- On SLASH_BACKSL_ shift to state 66
-- On PERIOD_ shift to state 241
-- On LT_GT_ shift to state 68
-- On LT_DASH_GT_ shift to state 72
-- On EQ_ shift to state 70
-- On DASH_GT_ shift to state 74
-- On BACKSL_SLASH_ shift to state 76
## Reductions:

State 241:
## Known stack suffix:
## proof_head hyp_def_list THEOREM IDENT COLON_ expr PERIOD_
## LR(1) items:
file -> proof_head hyp_def_list THEOREM IDENT COLON_ expr PERIOD_ . ENDPROOF EOF [ # ]
## Transitions:
-- On ENDPROOF shift to state 242
## Reductions:

State 242:
## Known stack suffix:
## proof_head hyp_def_list THEOREM IDENT COLON_ expr PERIOD_ ENDPROOF
## LR(1) items:
file -> proof_head hyp_def_list THEOREM IDENT COLON_ expr PERIOD_ ENDPROOF . EOF [ # ]
## Transitions:
-- On EOF shift to state 243
## Reductions:

State 243:
## Known stack suffix:
## proof_head hyp_def_list THEOREM IDENT COLON_ expr PERIOD_ ENDPROOF EOF
## LR(1) items:
file -> proof_head hyp_def_list THEOREM IDENT COLON_ expr PERIOD_ ENDPROOF EOF . [ # ]
## Transitions:
## Reductions:
-- On # reduce production file -> proof_head hyp_def_list THEOREM IDENT COLON_ expr PERIOD_ ENDPROOF EOF

State 244:
## Known stack suffix:
## hyp_def
## LR(1) items:
dep_hyp_def -> hyp_def . [ THEOREM PARAMETER MUSTUSE INDUCTIVE FUNCTION FIXPOINT EOF ENDPROOF DEPENDS DEFINITION ]
## Transitions:
## Reductions:
-- On THEOREM reduce production dep_hyp_def -> hyp_def
-- On PARAMETER reduce production dep_hyp_def -> hyp_def
-- On MUSTUSE reduce production dep_hyp_def -> hyp_def
-- On INDUCTIVE reduce production dep_hyp_def -> hyp_def
-- On FUNCTION reduce production dep_hyp_def -> hyp_def
-- On FIXPOINT reduce production dep_hyp_def -> hyp_def
-- On EOF reduce production dep_hyp_def -> hyp_def
-- On ENDPROOF reduce production dep_hyp_def -> hyp_def
-- On DEPENDS reduce production dep_hyp_def -> hyp_def
-- On DEFINITION reduce production dep_hyp_def -> hyp_def

State 245:
## Known stack suffix:
## proof_head expr
## LR(1) items:
expr -> expr . DASH_GT_ expr [ SLASH_BACKSL_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ INDUCTIVE FUNCTION FIXPOINT EQ_ ENDPROOF DEPENDS DEFINITION DASH_GT_ BACKSL_SLASH_ ]
expr -> expr . LT_DASH_GT_ expr [ SLASH_BACKSL_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ INDUCTIVE FUNCTION FIXPOINT EQ_ ENDPROOF DEPENDS DEFINITION DASH_GT_ BACKSL_SLASH_ ]
expr -> expr . BACKSL_SLASH_ expr [ SLASH_BACKSL_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ INDUCTIVE FUNCTION FIXPOINT EQ_ ENDPROOF DEPENDS DEFINITION DASH_GT_ BACKSL_SLASH_ ]
expr -> expr . SLASH_BACKSL_ expr [ SLASH_BACKSL_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ INDUCTIVE FUNCTION FIXPOINT EQ_ ENDPROOF DEPENDS DEFINITION DASH_GT_ BACKSL_SLASH_ ]
expr -> expr . EQ_ expr [ SLASH_BACKSL_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ INDUCTIVE FUNCTION FIXPOINT EQ_ ENDPROOF DEPENDS DEFINITION DASH_GT_ BACKSL_SLASH_ ]
expr -> expr . LT_GT_ expr [ SLASH_BACKSL_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ INDUCTIVE FUNCTION FIXPOINT EQ_ ENDPROOF DEPENDS DEFINITION DASH_GT_ BACKSL_SLASH_ ]
file -> proof_head expr . hyp_def_list ENDPROOF EOF [ # ]
## Transitions:
-- On SLASH_BACKSL_ shift to state 66
-- On PARAMETER shift to state 150
-- On MUSTUSE shift to state 157
-- On LT_GT_ shift to state 68
-- On LT_DASH_GT_ shift to state 72
-- On INDUCTIVE shift to state 158
-- On FUNCTION shift to state 184
-- On FIXPOINT shift to state 201
-- On EQ_ shift to state 70
-- On DEPENDS shift to state 226
-- On DEFINITION shift to state 213
-- On DASH_GT_ shift to state 74
-- On BACKSL_SLASH_ shift to state 76
-- On hyp_def_list shift to state 246
-- On hyp_def shift to state 244
-- On dep_hyp_def shift to state 249
## Reductions:
-- On ENDPROOF reduce production hyp_def_list ->

State 246:
## Known stack suffix:
## proof_head expr hyp_def_list
## LR(1) items:
file -> proof_head expr hyp_def_list . ENDPROOF EOF [ # ]
## Transitions:
-- On ENDPROOF shift to state 247
## Reductions:

State 247:
## Known stack suffix:
## proof_head expr hyp_def_list ENDPROOF
## LR(1) items:
file -> proof_head expr hyp_def_list ENDPROOF . EOF [ # ]
## Transitions:
-- On EOF shift to state 248
## Reductions:

State 248:
## Known stack suffix:
## proof_head expr hyp_def_list ENDPROOF EOF
## LR(1) items:
file -> proof_head expr hyp_def_list ENDPROOF EOF . [ # ]
## Transitions:
## Reductions:
-- On # reduce production file -> proof_head expr hyp_def_list ENDPROOF EOF

State 249:
## Known stack suffix:
## dep_hyp_def
## LR(1) items:
hyp_def_list -> dep_hyp_def . hyp_def_list [ THEOREM EOF ENDPROOF ]
## Transitions:
-- On PARAMETER shift to state 150
-- On MUSTUSE shift to state 157
-- On INDUCTIVE shift to state 158
-- On FUNCTION shift to state 184
-- On FIXPOINT shift to state 201
-- On DEPENDS shift to state 226
-- On DEFINITION shift to state 213
-- On hyp_def_list shift to state 250
-- On hyp_def shift to state 244
-- On dep_hyp_def shift to state 249
## Reductions:
-- On THEOREM reduce production hyp_def_list ->
-- On EOF reduce production hyp_def_list ->
-- On ENDPROOF reduce production hyp_def_list ->

State 250:
## Known stack suffix:
## dep_hyp_def hyp_def_list
## LR(1) items:
hyp_def_list -> dep_hyp_def hyp_def_list . [ THEOREM EOF ENDPROOF ]
## Transitions:
## Reductions:
-- On THEOREM reduce production hyp_def_list -> dep_hyp_def hyp_def_list
-- On EOF reduce production hyp_def_list -> dep_hyp_def hyp_def_list
-- On ENDPROOF reduce production hyp_def_list -> dep_hyp_def hyp_def_list

State 251:
## Known stack suffix:
## hyp_def_list
## LR(1) items:
file -> hyp_def_list . THEOREM IDENT COLON_ expr PERIOD_ EOF [ # ]
## Transitions:
-- On THEOREM shift to state 252
## Reductions:

State 252:
## Known stack suffix:
## hyp_def_list THEOREM
## LR(1) items:
file -> hyp_def_list THEOREM . IDENT COLON_ expr PERIOD_ EOF [ # ]
## Transitions:
-- On IDENT shift to state 253
## Reductions:

State 253:
## Known stack suffix:
## hyp_def_list THEOREM IDENT
## LR(1) items:
file -> hyp_def_list THEOREM IDENT . COLON_ expr PERIOD_ EOF [ # ]
## Transitions:
-- On COLON_ shift to state 254
## Reductions:

State 254:
## Known stack suffix:
## hyp_def_list THEOREM IDENT COLON_
## LR(1) items:
file -> hyp_def_list THEOREM IDENT COLON_ . expr PERIOD_ EOF [ # ]
## Transitions:
-- On TRUE shift to state 1
-- On TILDE_ shift to state 2
-- On STRING shift to state 3
-- On NUM shift to state 4
-- On MATCH shift to state 5
-- On LPAREN_ shift to state 6
-- On LET shift to state 7
-- On IF shift to state 36
-- On IDENT shift to state 37
-- On FUN shift to state 38
-- On FORALL shift to state 49
-- On FALSE shift to state 54
-- On EXISTS shift to state 55
-- On AROBAS_ shift to state 58
-- On expr1 shift to state 63
-- On expr shift to state 255
## Reductions:

State 255:
## Known stack suffix:
## hyp_def_list THEOREM IDENT COLON_ expr
## LR(1) items:
expr -> expr . DASH_GT_ expr [ SLASH_BACKSL_ PERIOD_ LT_GT_ LT_DASH_GT_ EQ_ DASH_GT_ BACKSL_SLASH_ ]
expr -> expr . LT_DASH_GT_ expr [ SLASH_BACKSL_ PERIOD_ LT_GT_ LT_DASH_GT_ EQ_ DASH_GT_ BACKSL_SLASH_ ]
expr -> expr . BACKSL_SLASH_ expr [ SLASH_BACKSL_ PERIOD_ LT_GT_ LT_DASH_GT_ EQ_ DASH_GT_ BACKSL_SLASH_ ]
expr -> expr . SLASH_BACKSL_ expr [ SLASH_BACKSL_ PERIOD_ LT_GT_ LT_DASH_GT_ EQ_ DASH_GT_ BACKSL_SLASH_ ]
expr -> expr . EQ_ expr [ SLASH_BACKSL_ PERIOD_ LT_GT_ LT_DASH_GT_ EQ_ DASH_GT_ BACKSL_SLASH_ ]
expr -> expr . LT_GT_ expr [ SLASH_BACKSL_ PERIOD_ LT_GT_ LT_DASH_GT_ EQ_ DASH_GT_ BACKSL_SLASH_ ]
file -> hyp_def_list THEOREM IDENT COLON_ expr . PERIOD_ EOF [ # ]
## Transitions:
-- On SLASH_BACKSL_ shift to state 66
-- On PERIOD_ shift to state 256
-- On LT_GT_ shift to state 68
-- On LT_DASH_GT_ shift to state 72
-- On EQ_ shift to state 70
-- On DASH_GT_ shift to state 74
-- On BACKSL_SLASH_ shift to state 76
## Reductions:

State 256:
## Known stack suffix:
## hyp_def_list THEOREM IDENT COLON_ expr PERIOD_
## LR(1) items:
file -> hyp_def_list THEOREM IDENT COLON_ expr PERIOD_ . EOF [ # ]
## Transitions:
-- On EOF shift to state 257
## Reductions:

State 257:
## Known stack suffix:
## hyp_def_list THEOREM IDENT COLON_ expr PERIOD_ EOF
## LR(1) items:
file -> hyp_def_list THEOREM IDENT COLON_ expr PERIOD_ EOF . [ # ]
## Transitions:
## Reductions:
-- On # reduce production file -> hyp_def_list THEOREM IDENT COLON_ expr PERIOD_ EOF

State 258:
## Known stack suffix:
## file
## LR(1) items:
file' -> file . [ # ]
## Transitions:
## Reductions:
-- On # accept file

State 259:
## Known stack suffix:
## expr
## LR(1) items:
expr -> expr . DASH_GT_ expr [ SLASH_BACKSL_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ INDUCTIVE FUNCTION FIXPOINT EQ_ EOF DEPENDS DEFINITION DASH_GT_ BACKSL_SLASH_ ]
expr -> expr . LT_DASH_GT_ expr [ SLASH_BACKSL_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ INDUCTIVE FUNCTION FIXPOINT EQ_ EOF DEPENDS DEFINITION DASH_GT_ BACKSL_SLASH_ ]
expr -> expr . BACKSL_SLASH_ expr [ SLASH_BACKSL_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ INDUCTIVE FUNCTION FIXPOINT EQ_ EOF DEPENDS DEFINITION DASH_GT_ BACKSL_SLASH_ ]
expr -> expr . SLASH_BACKSL_ expr [ SLASH_BACKSL_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ INDUCTIVE FUNCTION FIXPOINT EQ_ EOF DEPENDS DEFINITION DASH_GT_ BACKSL_SLASH_ ]
expr -> expr . EQ_ expr [ SLASH_BACKSL_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ INDUCTIVE FUNCTION FIXPOINT EQ_ EOF DEPENDS DEFINITION DASH_GT_ BACKSL_SLASH_ ]
expr -> expr . LT_GT_ expr [ SLASH_BACKSL_ PARAMETER MUSTUSE LT_GT_ LT_DASH_GT_ INDUCTIVE FUNCTION FIXPOINT EQ_ EOF DEPENDS DEFINITION DASH_GT_ BACKSL_SLASH_ ]
file -> expr . hyp_def_list EOF [ # ]
## Transitions:
-- On SLASH_BACKSL_ shift to state 66
-- On PARAMETER shift to state 150
-- On MUSTUSE shift to state 157
-- On LT_GT_ shift to state 68
-- On LT_DASH_GT_ shift to state 72
-- On INDUCTIVE shift to state 158
-- On FUNCTION shift to state 184
-- On FIXPOINT shift to state 201
-- On EQ_ shift to state 70
-- On DEPENDS shift to state 226
-- On DEFINITION shift to state 213
-- On DASH_GT_ shift to state 74
-- On BACKSL_SLASH_ shift to state 76
-- On hyp_def_list shift to state 260
-- On hyp_def shift to state 244
-- On dep_hyp_def shift to state 249
## Reductions:
-- On EOF reduce production hyp_def_list ->

State 260:
## Known stack suffix:
## expr hyp_def_list
## LR(1) items:
file -> expr hyp_def_list . EOF [ # ]
## Transitions:
-- On EOF shift to state 261
## Reductions:

State 261:
## Known stack suffix:
## expr hyp_def_list EOF
## LR(1) items:
file -> expr hyp_def_list EOF . [ # ]
## Transitions:
## Reductions:
-- On # reduce production file -> expr hyp_def_list EOF

