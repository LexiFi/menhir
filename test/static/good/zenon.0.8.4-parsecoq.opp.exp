File "zenon.0.8.4-parsecoq.mly", line 115, characters 7-13:
Warning: the token AMPER_ is unused.
File "zenon.0.8.4-parsecoq.mly", line 116, characters 7-19:
Warning: the token AMPER_AMPER_ is unused.
File "zenon.0.8.4-parsecoq.mly", line 113, characters 7-12:
Warning: the token BANG_ is unused.
File "zenon.0.8.4-parsecoq.mly", line 159, characters 7-15:
Warning: the token BAR_BAR_ is unused.
File "zenon.0.8.4-parsecoq.mly", line 158, characters 7-16:
Warning: the token BAR_DASH_ is unused.
File "zenon.0.8.4-parsecoq.mly", line 132, characters 7-19:
Warning: the token COLON_COLON_ is unused.
File "zenon.0.8.4-parsecoq.mly", line 135, characters 7-16:
Warning: the token COLON_GT_ is unused.
File "zenon.0.8.4-parsecoq.mly", line 133, characters 7-16:
Warning: the token COLON_LT_ is unused.
File "zenon.0.8.4-parsecoq.mly", line 124, characters 7-12:
Warning: the token DASH_ is unused.
File "zenon.0.8.4-parsecoq.mly", line 145, characters 7-18:
Warning: the token EQ_UNDER_D_ is unused.
File "zenon.0.8.4-parsecoq.mly", line 197, characters 16-19:
Warning: the token FQN is unused.
File "zenon.0.8.4-parsecoq.mly", line 146, characters 7-10:
Warning: the token GT_ is unused.
File "zenon.0.8.4-parsecoq.mly", line 147, characters 7-18:
Warning: the token GT_DASH_GT_ is unused.
File "zenon.0.8.4-parsecoq.mly", line 148, characters 7-13:
Warning: the token GT_EQ_ is unused.
File "zenon.0.8.4-parsecoq.mly", line 155, characters 7-11:
Warning: the token HAT_ is unused.
File "zenon.0.8.4-parsecoq.mly", line 152, characters 7-14:
Warning: the token LBRACK_ is unused.
File "zenon.0.8.4-parsecoq.mly", line 137, characters 7-10:
Warning: the token LT_ is unused.
File "zenon.0.8.4-parsecoq.mly", line 140, characters 7-16:
Warning: the token LT_COLON_ is unused.
File "zenon.0.8.4-parsecoq.mly", line 138, characters 7-15:
Warning: the token LT_DASH_ is unused.
File "zenon.0.8.4-parsecoq.mly", line 141, characters 7-13:
Warning: the token LT_EQ_ is unused.
File "zenon.0.8.4-parsecoq.mly", line 128, characters 7-21:
Warning: the token PERIOD_PERIOD_ is unused.
File "zenon.0.8.4-parsecoq.mly", line 121, characters 7-12:
Warning: the token PLUS_ is unused.
File "zenon.0.8.4-parsecoq.mly", line 122, characters 7-17:
Warning: the token PLUS_PLUS_ is unused.
File "zenon.0.8.4-parsecoq.mly", line 149, characters 7-13:
Warning: the token QUEST_ is unused.
File "zenon.0.8.4-parsecoq.mly", line 150, characters 7-16:
Warning: the token QUEST_EQ_ is unused.
File "zenon.0.8.4-parsecoq.mly", line 154, characters 7-14:
Warning: the token RBRACK_ is unused.
File "zenon.0.8.4-parsecoq.mly", line 136, characters 7-12:
Warning: the token SEMI_ is unused.
File "zenon.0.8.4-parsecoq.mly", line 129, characters 7-13:
Warning: the token SLASH_ is unused.
%{

open Printf;;

open Expr;;
open Namespace;;
open Phrase;;

let rec mk_type_string e =
  match e with
  | Evar (s, _) -> s
  | Emeta _ -> assert false
  | Eapp ("*", [e1; e2], _) ->
     sprintf "(%s*%s)" (mk_type_string e1) (mk_type_string e2)
  | Eapp ("%", [e1; e2], _) ->
     sprintf "((%s)%%%s)" (mk_type_string e1) (mk_type_string e2)
  | Eapp (s, args, _) ->
     let inside =
       List.fold_left (fun s a -> sprintf "%s %s" s (mk_type_string a)) s args
     in
     sprintf "(%s)" inside
  | Eimply (e1, e2, _) ->
     sprintf "(%s -> %s)" (mk_type_string e1) (mk_type_string e2)
  | _ -> assert false (* FIXME TODO *)
;;

let mk_eapp (s, args) =
  match (s, args) with
  | "and", [e1; e2] -> eand (e1, e2)
  | "or", [e1; e2] -> eor (e1, e2)
  | "not", [e1] -> enot (e1)
  | _ -> eapp (s, args)
;;

let mk_apply (e, l) =
  match e with
  | Eapp (s, args, _) -> mk_eapp (s, args @ l)
  | Evar (s, _) -> mk_eapp (s, l)
  | _ -> raise Parse_error
;;

let rec mk_arobas_apply (id, l) =
  match l with
  | Evar ("_", _) :: t -> mk_arobas_apply (id, t)
  | [] -> evar (id)
  | _ -> eapp (id, l)
;;

let mk_all bindings body =
  let f (var, ty) e = eall (evar var, ty, e) in
  List.fold_right f bindings body
;;

let mk_ex bindings body =
  let f (var, ty) e = eex (evar var, ty, e) in
  List.fold_right f bindings body
;;

let mk_lam bindings body =
  let f (var, ty) e = elam (evar var, ty, e) in
  List.fold_right f bindings body
;;

let mk_fix ident ty bindings body =
  let f (var, ty) e = elam (evar var, ty, e) in
  (ident, eapp ("$fix", [ List.fold_right f ((ident, ty) :: bindings) body ]))
;;

let rec get_params e =
  match e with
  | Elam (v, _, body, _) ->
      let (p, e1) = get_params body in
      (v :: p, e1)
  | _ -> ([], e)
;;

let mk_let id expr body =
  substitute_2nd [(evar id, expr)] body
;;

let mk_let_fix (id, def) body = mk_let id def body;;

let mk_pattern (constr, args) body =
  let bindings = List.map (fun v -> (v, "")) args in
  mk_lam bindings (eapp ("$match-case", [evar (constr); body]))
;;

let mk_inductive name bindings constrs =
  let args = List.map fst bindings in
  let g (tcon, targs) =
    if tcon = name && targs = args then Self
    else Param (String.concat " " (tcon :: targs))
  in
  let f (cname, args) = (cname, List.map g args) in
  Inductive (name, args, List.map f constrs, name ^ "_ind")
;;

let mk_pairs e l =
  let f x y = eapp ("@", [evar "Datatypes.pair"; evar "_"; evar "_"; x; y]) in
  List.fold_left f e l
;;

let mk_string s = evar ("\"" ^ s ^ "\"") ;;
%}
%start file
%token AMPER_
%token AMPER_AMPER_
%token AROBAS_
%token BACKSL_SLASH_
%token BANG_
%token BAR_
%token BAR_BAR_
%token BAR_DASH_
%token BEGINHEADER
%token <string> BEGINNAME
%token BEGINPROOF
%token COLON_
%token COLON_COLON_
%token COLON_EQ_
%token COLON_GT_
%token COLON_LT_
%token COMMA_
%token DASH_
%token DASH_GT_
%token DEFINITION
%token DEPENDS
%token ELSE
%token END
%token ENDPROOF
%token EOF
%token EQ_
%token EQ_GT_
%token EQ_UNDER_D_
%token EXISTS
%token FALSE
%token FIX
%token FIXPOINT
%token FORALL
%token FUN
%token FUNCTION
%token GT_
%token GT_DASH_GT_
%token GT_EQ_
%token HAT_
%token <string> IDENT
%token IF
%token IN
%token INDUCTIVE
%token LBRACE_
%token LBRACK_
%token LET
%token LPAREN_
%token LPAREN_RPAREN_
%token LT_
%token LT_COLON_
%token LT_DASH_
%token LT_DASH_GT_
%token LT_EQ_
%token LT_GT_
%token MATCH
%token MUSTUSE
%token <string> NUM
%token ON
%token PARAMETER
%token PERCENT_
%token PERIOD_
%token PERIOD_LPAREN_
%token PERIOD_PERIOD_
%token PLUS_
%token PLUS_PLUS_
%token QUEST_
%token QUEST_EQ_
%token RBRACE_
%token RBRACK_
%token RPAREN_
%token SEMI_
%token SLASH_
%token SLASH_BACKSL_
%token STAR_
%token <string> STRING
%token STRUCT
%token THEN
%token THEOREM
%token TILDE_
%token TRUE
%token WITH
%nonassoc let_in
%nonassoc FQN IDENT
%right COMMA_
%nonassoc ELSE EQ_GT_ EXISTS FORALL FUN IF IN THEN
%left LT_DASH_GT_
%right DASH_GT_
%right BACKSL_SLASH_
%right SLASH_BACKSL_
%nonassoc EQ_ LT_GT_
%nonassoc TILDE_
%left apply
%type <string * (Phrase.phrase * bool) list> file
%%

file:
  _1 = hyp_def_list _2 = THEOREM _3 = IDENT _4 = COLON_ _5 = expr _6 = PERIOD_ _7 = EOF
    {      ( (_3, (Hyp (goal_name, enot _5, 0), false) :: _1) )}
| _1 = proof_head _2 = hyp_def_list _3 = THEOREM _4 = IDENT _5 = COLON_ _6 = expr _7 = PERIOD_ _8 = ENDPROOF _9 = EOF
    {      ( (_4, (Hyp (goal_name, enot _6, 0), false) :: _2) )}
| _1 = expr _2 = hyp_def_list _3 = EOF
    {      ( (* Error.warn "deprecated input format"; *)
        (thm_default_name, (Hyp (goal_name, enot _1, 0), false) :: _2) )}
| _1 = proof_head _2 = expr _3 = hyp_def_list _4 = ENDPROOF _5 = EOF
    {      ( (* Error.warn "deprecated input format"; *)
        (_1, (Hyp (goal_name, enot _2, 0), false) :: _3) )}

proof_head:
  _1 = BEGINPROOF _2 = proofheaders _3 = BEGINNAME _4 = proofheaders
    {      ( _3 )}
| _1 = BEGINPROOF _2 = proofheaders
    {      ( "theorem" )}

proofheaders:
  
    {      ( () )}
| _1 = BEGINHEADER _2 = proofheaders
    {      ( () )}

expr:
  _1 = FORALL _2 = bindings _3 = COMMA_ _4 = expr
    {      ( mk_all _2 _4 )}
| _1 = EXISTS _2 = bindings _3 = COMMA_ _4 = expr
    {      ( mk_ex _2 _4 )}
| _1 = FUN _2 = bindings _3 = EQ_GT_ _4 = expr
    {      ( mk_lam _2 _4 )}
| _1 = LET _2 = fix _3 = IN _4 = expr %prec let_in
    {      ( mk_let_fix _2 _4 )}
| _1 = LET _2 = IDENT _3 = COLON_EQ_ _4 = expr _5 = IN _6 = expr %prec let_in
    {      ( mk_let _2 _4 _6 )}
| _1 = LET _2 = LPAREN_ _3 = IDENT _4 = COLON_ _5 = junk _6 = RPAREN_ _7 = COLON_EQ_ _8 = expr _9 = IN _10 = expr %prec let_in
    {      ( mk_let _3 _8 _10 )}
| _1 = LET _2 = IDENT _3 = COLON_ _4 = junk _5 = COLON_EQ_ _6 = expr _7 = IN _8 = expr %prec let_in
    {      ( mk_let _2 _6 _8 )}
| _1 = MATCH _2 = expr _3 = WITH _4 = pat_expr_list _5 = END
    {      ( eapp ("$match", _2 :: _4) )}
| _1 = IF _2 = expr _3 = THEN _4 = expr _5 = ELSE _6 = expr
    {      ( eapp ("FOCAL.ifthenelse", [_2; _4; _6]) )}
| _1 = expr _2 = DASH_GT_ _3 = expr
    {      ( eimply (_1, _3) )}
| _1 = expr _2 = LT_DASH_GT_ _3 = expr
    {      ( eequiv (_1, _3) )}
| _1 = expr _2 = BACKSL_SLASH_ _3 = expr
    {      ( eor (_1, _3) )}
| _1 = expr _2 = SLASH_BACKSL_ _3 = expr
    {      ( eand (_1, _3) )}
| _1 = expr _2 = EQ_ _3 = expr
    {      ( eapp ("=", [_1; _3]) )}
| _1 = expr _2 = LT_GT_ _3 = expr
    {      ( enot (eapp ("=", [_1; _3])) )}
| _1 = TILDE_ _2 = expr
    {      ( enot (_2) )}
| _1 = expr1 _2 = expr1_list %prec apply
    {      ( mk_apply (_1, _2) )}
| _1 = AROBAS_ _2 = IDENT _3 = expr1_list %prec apply
    {      ( mk_eapp ("@", evar (_2) :: _3) )}
| _1 = AROBAS_ _2 = IDENT %prec apply
    {      ( mk_eapp ("@", [evar (_2)]) )}
| _1 = expr1
    {      ( _1 )}

fix:
  _1 = FIX _2 = IDENT _3 = bindings _4 = LBRACE_ _5 = STRUCT _6 = IDENT _7 = RBRACE_ _8 = COLON_ _9 = typ _10 = COLON_EQ_ _11 = expr
    {      ( mk_fix _2 _9 _3 _11 )}

expr1:
  _1 = IDENT
    {      ( evar (_1) )}
| _1 = NUM
    {      ( eapp (_1, []) )}
| _1 = STRING
    {      ( eapp ("$string", [mk_string _1]) )}
| _1 = LPAREN_ _2 = expr _3 = comma_expr_list _4 = RPAREN_
    {      ( mk_pairs _2 _3 )}
| _1 = LPAREN_ _2 = expr _3 = STAR_ _4 = expr _5 = RPAREN_
    {      ( eapp ("*", [_2; _4]) )}
| _1 = LPAREN_ _2 = expr _3 = PERCENT_ _4 = IDENT _5 = RPAREN_
    {      ( eapp ("%", [_2; evar (_4)]) )}
| _1 = LPAREN_ _2 = expr _3 = RPAREN_
    {      ( _2 )}
| _1 = TRUE
    {      ( etrue )}
| _1 = FALSE
    {      ( efalse )}

expr1_list:
  _1 = expr1
    {                           ( [_1] )}
| _1 = expr1 _2 = expr1_list
    {                           ( _1 :: _2 )}

comma_expr_list:
  _1 = COMMA_ _2 = expr
    {      ( [_2] )}
| _1 = COMMA_ _2 = expr _3 = comma_expr_list
    {      ( _2 :: _3 )}

pat_expr_list:
  
    {      ( [] )}
| _1 = BAR_ _2 = pattern _3 = EQ_GT_ _4 = expr _5 = pat_expr_list
    {      ( mk_pattern _2 _4 :: _5 )}

pattern:
  _1 = LPAREN_ _2 = pattern _3 = RPAREN_
    {      ( _2 )}
| _1 = IDENT _2 = idlist
    {      ( (_1, _2) )}
| _1 = LPAREN_ _2 = IDENT _3 = COMMA_ _4 = IDENT _5 = RPAREN_
    {      ( ("Datatypes.pair", [_2; _4]) )}

bindings:
  _1 = simplebinding
    {                           ( _1 )}
| _1 = binding_list
    {                           ( _1 )}

simplebinding:
  _1 = idlist _2 = COLON_ _3 = typ
    {                       ( List.map (fun v -> (v, _3)) _1 )}

idlist:
  
    {                           ( [] )}
| _1 = IDENT _2 = idlist
    {                           ( _1 :: _2 )}

binding_list:
  
    {      ( [] )}
| _1 = IDENT _2 = binding_list
    {      ( (_1, "") :: _2 )}
| _1 = LPAREN_ _2 = simplebinding _3 = RPAREN_ _4 = binding_list
    {      ( _2 @ _4 )}

typ:
  _1 = expr
    {                           ( mk_type_string _1 )}

id_or_expr:
  _1 = IDENT
    {           ( _1 )}
| _1 = STRING
    {           ( _1 )}

hyp_def:
  _1 = PARAMETER _2 = id_or_expr _3 = COLON_ _4 = expr _5 = PERIOD_
    {      ( Hyp (_2, _4, 1) )}
| _1 = DEFINITION _2 = id_or_expr _3 = COLON_EQ_ _4 = expr _5 = PERIOD_
    {      ( let (params, expr) = get_params _4 in
        Def (DefReal (_2, _2, params, expr, None)) )}
| _1 = DEFINITION _2 = IDENT _3 = compact_args _4 = COLON_ _5 = typ _6 = COLON_EQ_ _7 = expr _8 = PERIOD_
    {      (
       let compact_params = _3 in
       let (other_params, expr) = get_params _7 in
       Def (DefReal (_2, _2, (compact_params @ other_params), expr, None))
      )}
| _1 = FIXPOINT _2 = IDENT _3 = compact_args _4 = LBRACE_ _5 = STRUCT _6 = IDENT _7 = RBRACE_ _8 = COLON_ _9 = typ _10 = COLON_EQ_ _11 = expr _12 = PERIOD_
    {      (
       let compact_params = _3 in
       let (other_params, expr) = get_params _11 in
       Def (DefReal (_2, _2, (compact_params @ other_params), expr, Some _6))
      )}
| _1 = FUNCTION _2 = IDENT _3 = compact_args _4 = COLON_ _5 = typ _6 = LBRACE_ _7 = expr _8 = RBRACE_ _9 = COLON_EQ_ _10 = expr _11 = PERIOD_
    {      ( Def (DefRec (_7, _2, _3, _10)) )}
| _1 = INDUCTIVE _2 = IDENT _3 = binding_list _4 = COLON_ _5 = IDENT _6 = COLON_EQ_ _7 = constr_list _8 = PERIOD_
    {      ( mk_inductive _2 _3 _7 )}

compact_args:
  
    {                                                         ( [] )}
| _1 = LPAREN_ _2 = IDENT _3 = COLON_ _4 = typ _5 = RPAREN_ _6 = compact_args
    {                                                     ( (evar _2) :: _6 )}

dep_hyp_def:
  _1 = DEPENDS _2 = ON _3 = hyp_def
    {                               (
      (* FIXME activate this warning at some point.
      Error.warn "use of obsolete \"Depends on\" syntax";
      *)
      (_3, true)
    )}
| _1 = MUSTUSE _2 = hyp_def
    {                               ( (_2, true) )}
| _1 = hyp_def
    {                               ( (_1, false) )}

hyp_def_list:
  _1 = dep_hyp_def _2 = hyp_def_list
    {                               ( _1 :: _2 )}
| 
    {                               ( [] )}

constr_list:
  _1 = BAR_ _2 = IDENT _3 = COLON_ _4 = constr_type _5 = constr_list
    {      ( (_2, _4) :: _5 )}
| 
    {      ( [] )}

constr_type:
  _1 = arg_type
    {                                      ( [] )}
| _1 = arg_type _2 = DASH_GT_ _3 = constr_type
    {                                      ( _1 :: _3 )}
| _1 = LPAREN_ _2 = arg_type _3 = DASH_GT_ _4 = constr_type _5 = RPAREN_
    {                                      ( _2 :: _4 )}

arg_type:
  _1 = LPAREN_ _2 = arg_type _3 = RPAREN_
    {                                      ( _2 )}
| _1 = IDENT _2 = idlist
    {                                      ( (_1, _2) )}

junk:
  
    {                                      ( () )}
| _1 = IDENT _2 = junk
    {                                      ( () )}
| _1 = STAR_ _2 = junk
    {                                      ( () )}
| _1 = PERCENT_ _2 = junk
    {                                      ( () )}
| _1 = NUM _2 = junk
    {                                      ( () )}
| _1 = LPAREN_RPAREN_ _2 = junk
    {                                      ( () )}
| _1 = PERIOD_ _2 = junk
    {                                      ( () )}
| _1 = COLON_ _2 = junk
    {                                      ( () )}
| _1 = PERIOD_LPAREN_ _2 = junk _3 = RPAREN_ _4 = junk
    {                                      ( () )}
| _1 = LPAREN_ _2 = junk _3 = RPAREN_ _4 = junk
    {                                      ( () )}

%%


