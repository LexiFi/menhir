State 0:
coqfile' -> . coqfile [ # ]
-- On LOCAL shift to state 1
-- On BEGINPROOF shift to state 106
-- On coqfile shift to state 111

State 1:
coqfile -> LOCAL . IDENT COLON coqexpr COLONEQUAL TOBE coqexpr coq_hyp_def_list QED EOF [ # ]
-- On IDENT shift to state 2

State 2:
coqfile -> LOCAL IDENT . COLON coqexpr COLONEQUAL TOBE coqexpr coq_hyp_def_list QED EOF [ # ]
-- On COLON shift to state 3

State 3:
coqfile -> LOCAL IDENT COLON . coqexpr COLONEQUAL TOBE coqexpr coq_hyp_def_list QED EOF [ # ]
-- On TILDE shift to state 4
-- On OPEN shift to state 5
-- On LET shift to state 7
-- On LBRACKET shift to state 10
-- On IF shift to state 13
-- On IDENT shift to state 14
-- On FORALL shift to state 15
-- On coqexpr shift to state 66
-- On coqapplication shift to state 23

State 4:
coqexpr -> TILDE . coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
-- On TILDE shift to state 4
-- On OPEN shift to state 5
-- On LET shift to state 7
-- On LBRACKET shift to state 10
-- On IF shift to state 13
-- On IDENT shift to state 14
-- On FORALL shift to state 15
-- On coqexpr shift to state 65
-- On coqapplication shift to state 23

State 5:
coqapplication -> OPEN . IDENT coqexpr_list1 CLOSE [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqapplication -> OPEN . coqapplication coqexpr_list1 CLOSE [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> OPEN . coqexpr CLOSE [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> OPEN . IDENT COLON IDENT CLOSE coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> OPEN . AND coqexpr coqexpr CLOSE [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> OPEN . OR coqexpr coqexpr CLOSE [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> OPEN . coqexpr EQUAL coqexpr CLOSE [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
-- On TILDE shift to state 4
-- On OR shift to state 6
-- On OPEN shift to state 5
-- On LET shift to state 7
-- On LBRACKET shift to state 10
-- On IF shift to state 13
-- On IDENT shift to state 44
-- On FORALL shift to state 15
-- On AND shift to state 53
-- On coqexpr shift to state 57
-- On coqapplication shift to state 62

State 6:
coqexpr -> OPEN OR . coqexpr coqexpr CLOSE [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
-- On TILDE shift to state 4
-- On OPEN shift to state 5
-- On LET shift to state 7
-- On LBRACKET shift to state 10
-- On IF shift to state 13
-- On IDENT shift to state 14
-- On FORALL shift to state 15
-- On coqexpr shift to state 41
-- On coqapplication shift to state 23

State 7:
coqexpr -> LET . IDENT COLONEQUAL coqexpr IN coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
-- On IDENT shift to state 8

State 8:
coqexpr -> LET IDENT . COLONEQUAL coqexpr IN coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
-- On COLONEQUAL shift to state 9

State 9:
coqexpr -> LET IDENT COLONEQUAL . coqexpr IN coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
-- On TILDE shift to state 4
-- On OPEN shift to state 5
-- On LET shift to state 7
-- On LBRACKET shift to state 10
-- On IF shift to state 13
-- On IDENT shift to state 14
-- On FORALL shift to state 15
-- On coqexpr shift to state 38
-- On coqapplication shift to state 23

State 10:
coqexpr -> LBRACKET . IDENT COLONEQUAL coqexpr RBRACKET coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
-- On IDENT shift to state 11

State 11:
coqexpr -> LBRACKET IDENT . COLONEQUAL coqexpr RBRACKET coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
-- On COLONEQUAL shift to state 12

State 12:
coqexpr -> LBRACKET IDENT COLONEQUAL . coqexpr RBRACKET coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
-- On TILDE shift to state 4
-- On OPEN shift to state 5
-- On LET shift to state 7
-- On LBRACKET shift to state 10
-- On IF shift to state 13
-- On IDENT shift to state 14
-- On FORALL shift to state 15
-- On coqexpr shift to state 35
-- On coqapplication shift to state 23

State 13:
coqexpr -> IF . coqexpr THEN coqexpr ELSE coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
-- On TILDE shift to state 4
-- On OPEN shift to state 5
-- On LET shift to state 7
-- On LBRACKET shift to state 10
-- On IF shift to state 13
-- On IDENT shift to state 14
-- On FORALL shift to state 15
-- On coqexpr shift to state 30
-- On coqapplication shift to state 23

State 14:
coqexpr -> IDENT . [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
-- On TILDE reduce production coqexpr -> IDENT 
-- On THEN reduce production coqexpr -> IDENT 
-- On STRING reduce production coqexpr -> IDENT 
-- On SLASHBACKSLASH reduce production coqexpr -> IDENT 
-- On RBRACKET reduce production coqexpr -> IDENT 
-- On QED reduce production coqexpr -> IDENT 
-- On OPEN reduce production coqexpr -> IDENT 
-- On LET reduce production coqexpr -> IDENT 
-- On LBRACKET reduce production coqexpr -> IDENT 
-- On IN reduce production coqexpr -> IDENT 
-- On IF reduce production coqexpr -> IDENT 
-- On IDENT reduce production coqexpr -> IDENT 
-- On FORALL reduce production coqexpr -> IDENT 
-- On EQUAL reduce production coqexpr -> IDENT 
-- On ENDPROOF reduce production coqexpr -> IDENT 
-- On ELSE reduce production coqexpr -> IDENT 
-- On DOUBLEARROW reduce production coqexpr -> IDENT 
-- On COLONEQUAL reduce production coqexpr -> IDENT 
-- On CLOSE reduce production coqexpr -> IDENT 
-- On BYDEF reduce production coqexpr -> IDENT 
-- On BY reduce production coqexpr -> IDENT 
-- On BACKSLASHSLASH reduce production coqexpr -> IDENT 
-- On ARROW reduce production coqexpr -> IDENT 

State 15:
coqexpr -> FORALL . IDENT COLON IDENT COMMA coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
-- On IDENT shift to state 16

State 16:
coqexpr -> FORALL IDENT . COLON IDENT COMMA coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
-- On COLON shift to state 17

State 17:
coqexpr -> FORALL IDENT COLON . IDENT COMMA coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
-- On IDENT shift to state 18

State 18:
coqexpr -> FORALL IDENT COLON IDENT . COMMA coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
-- On COMMA shift to state 19

State 19:
coqexpr -> FORALL IDENT COLON IDENT COMMA . coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
-- On TILDE shift to state 4
-- On OPEN shift to state 5
-- On LET shift to state 7
-- On LBRACKET shift to state 10
-- On IF shift to state 13
-- On IDENT shift to state 14
-- On FORALL shift to state 15
-- On coqexpr shift to state 20
-- On coqapplication shift to state 23

State 20:
coqexpr -> FORALL IDENT COLON IDENT COMMA coqexpr . [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . ARROW coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . DOUBLEARROW coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . SLASHBACKSLASH coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . BACKSLASHSLASH coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
-- On SLASHBACKSLASH shift to state 21
-- On DOUBLEARROW shift to state 24
-- On BACKSLASHSLASH shift to state 26
-- On ARROW shift to state 28
-- On TILDE reduce production coqexpr -> FORALL IDENT COLON IDENT COMMA coqexpr 
-- On THEN reduce production coqexpr -> FORALL IDENT COLON IDENT COMMA coqexpr 
-- On STRING reduce production coqexpr -> FORALL IDENT COLON IDENT COMMA coqexpr 
-- On RBRACKET reduce production coqexpr -> FORALL IDENT COLON IDENT COMMA coqexpr 
-- On QED reduce production coqexpr -> FORALL IDENT COLON IDENT COMMA coqexpr 
-- On OPEN reduce production coqexpr -> FORALL IDENT COLON IDENT COMMA coqexpr 
-- On LET reduce production coqexpr -> FORALL IDENT COLON IDENT COMMA coqexpr 
-- On LBRACKET reduce production coqexpr -> FORALL IDENT COLON IDENT COMMA coqexpr 
-- On IN reduce production coqexpr -> FORALL IDENT COLON IDENT COMMA coqexpr 
-- On IF reduce production coqexpr -> FORALL IDENT COLON IDENT COMMA coqexpr 
-- On IDENT reduce production coqexpr -> FORALL IDENT COLON IDENT COMMA coqexpr 
-- On FORALL reduce production coqexpr -> FORALL IDENT COLON IDENT COMMA coqexpr 
-- On EQUAL reduce production coqexpr -> FORALL IDENT COLON IDENT COMMA coqexpr 
-- On ENDPROOF reduce production coqexpr -> FORALL IDENT COLON IDENT COMMA coqexpr 
-- On ELSE reduce production coqexpr -> FORALL IDENT COLON IDENT COMMA coqexpr 
-- On COLONEQUAL reduce production coqexpr -> FORALL IDENT COLON IDENT COMMA coqexpr 
-- On CLOSE reduce production coqexpr -> FORALL IDENT COLON IDENT COMMA coqexpr 
-- On BYDEF reduce production coqexpr -> FORALL IDENT COLON IDENT COMMA coqexpr 
-- On BY reduce production coqexpr -> FORALL IDENT COLON IDENT COMMA coqexpr 

State 21:
coqexpr -> coqexpr SLASHBACKSLASH . coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
-- On TILDE shift to state 4
-- On OPEN shift to state 5
-- On LET shift to state 7
-- On LBRACKET shift to state 10
-- On IF shift to state 13
-- On IDENT shift to state 14
-- On FORALL shift to state 15
-- On coqexpr shift to state 22
-- On coqapplication shift to state 23

State 22:
coqexpr -> coqexpr . ARROW coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . DOUBLEARROW coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . SLASHBACKSLASH coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr SLASHBACKSLASH coqexpr . [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . BACKSLASHSLASH coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
-- On SLASHBACKSLASH shift to state 21
-- On TILDE reduce production coqexpr -> coqexpr SLASHBACKSLASH coqexpr 
-- On THEN reduce production coqexpr -> coqexpr SLASHBACKSLASH coqexpr 
-- On STRING reduce production coqexpr -> coqexpr SLASHBACKSLASH coqexpr 
-- On RBRACKET reduce production coqexpr -> coqexpr SLASHBACKSLASH coqexpr 
-- On QED reduce production coqexpr -> coqexpr SLASHBACKSLASH coqexpr 
-- On OPEN reduce production coqexpr -> coqexpr SLASHBACKSLASH coqexpr 
-- On LET reduce production coqexpr -> coqexpr SLASHBACKSLASH coqexpr 
-- On LBRACKET reduce production coqexpr -> coqexpr SLASHBACKSLASH coqexpr 
-- On IN reduce production coqexpr -> coqexpr SLASHBACKSLASH coqexpr 
-- On IF reduce production coqexpr -> coqexpr SLASHBACKSLASH coqexpr 
-- On IDENT reduce production coqexpr -> coqexpr SLASHBACKSLASH coqexpr 
-- On FORALL reduce production coqexpr -> coqexpr SLASHBACKSLASH coqexpr 
-- On EQUAL reduce production coqexpr -> coqexpr SLASHBACKSLASH coqexpr 
-- On ENDPROOF reduce production coqexpr -> coqexpr SLASHBACKSLASH coqexpr 
-- On ELSE reduce production coqexpr -> coqexpr SLASHBACKSLASH coqexpr 
-- On DOUBLEARROW reduce production coqexpr -> coqexpr SLASHBACKSLASH coqexpr 
-- On COLONEQUAL reduce production coqexpr -> coqexpr SLASHBACKSLASH coqexpr 
-- On CLOSE reduce production coqexpr -> coqexpr SLASHBACKSLASH coqexpr 
-- On BYDEF reduce production coqexpr -> coqexpr SLASHBACKSLASH coqexpr 
-- On BY reduce production coqexpr -> coqexpr SLASHBACKSLASH coqexpr 
-- On BACKSLASHSLASH reduce production coqexpr -> coqexpr SLASHBACKSLASH coqexpr 
-- On ARROW reduce production coqexpr -> coqexpr SLASHBACKSLASH coqexpr 

State 23:
coqexpr -> coqapplication . [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
-- On TILDE reduce production coqexpr -> coqapplication 
-- On THEN reduce production coqexpr -> coqapplication 
-- On STRING reduce production coqexpr -> coqapplication 
-- On SLASHBACKSLASH reduce production coqexpr -> coqapplication 
-- On RBRACKET reduce production coqexpr -> coqapplication 
-- On QED reduce production coqexpr -> coqapplication 
-- On OPEN reduce production coqexpr -> coqapplication 
-- On LET reduce production coqexpr -> coqapplication 
-- On LBRACKET reduce production coqexpr -> coqapplication 
-- On IN reduce production coqexpr -> coqapplication 
-- On IF reduce production coqexpr -> coqapplication 
-- On IDENT reduce production coqexpr -> coqapplication 
-- On FORALL reduce production coqexpr -> coqapplication 
-- On EQUAL reduce production coqexpr -> coqapplication 
-- On ENDPROOF reduce production coqexpr -> coqapplication 
-- On ELSE reduce production coqexpr -> coqapplication 
-- On DOUBLEARROW reduce production coqexpr -> coqapplication 
-- On COLONEQUAL reduce production coqexpr -> coqapplication 
-- On CLOSE reduce production coqexpr -> coqapplication 
-- On BYDEF reduce production coqexpr -> coqapplication 
-- On BY reduce production coqexpr -> coqapplication 
-- On BACKSLASHSLASH reduce production coqexpr -> coqapplication 
-- On ARROW reduce production coqexpr -> coqapplication 

State 24:
coqexpr -> coqexpr DOUBLEARROW . coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
-- On TILDE shift to state 4
-- On OPEN shift to state 5
-- On LET shift to state 7
-- On LBRACKET shift to state 10
-- On IF shift to state 13
-- On IDENT shift to state 14
-- On FORALL shift to state 15
-- On coqexpr shift to state 25
-- On coqapplication shift to state 23

State 25:
coqexpr -> coqexpr . ARROW coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . DOUBLEARROW coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr DOUBLEARROW coqexpr . [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . SLASHBACKSLASH coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . BACKSLASHSLASH coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
-- On SLASHBACKSLASH shift to state 21
-- On BACKSLASHSLASH shift to state 26
-- On TILDE reduce production coqexpr -> coqexpr DOUBLEARROW coqexpr 
-- On THEN reduce production coqexpr -> coqexpr DOUBLEARROW coqexpr 
-- On STRING reduce production coqexpr -> coqexpr DOUBLEARROW coqexpr 
-- On RBRACKET reduce production coqexpr -> coqexpr DOUBLEARROW coqexpr 
-- On QED reduce production coqexpr -> coqexpr DOUBLEARROW coqexpr 
-- On OPEN reduce production coqexpr -> coqexpr DOUBLEARROW coqexpr 
-- On LET reduce production coqexpr -> coqexpr DOUBLEARROW coqexpr 
-- On LBRACKET reduce production coqexpr -> coqexpr DOUBLEARROW coqexpr 
-- On IN reduce production coqexpr -> coqexpr DOUBLEARROW coqexpr 
-- On IF reduce production coqexpr -> coqexpr DOUBLEARROW coqexpr 
-- On IDENT reduce production coqexpr -> coqexpr DOUBLEARROW coqexpr 
-- On FORALL reduce production coqexpr -> coqexpr DOUBLEARROW coqexpr 
-- On EQUAL reduce production coqexpr -> coqexpr DOUBLEARROW coqexpr 
-- On ENDPROOF reduce production coqexpr -> coqexpr DOUBLEARROW coqexpr 
-- On ELSE reduce production coqexpr -> coqexpr DOUBLEARROW coqexpr 
-- On COLONEQUAL reduce production coqexpr -> coqexpr DOUBLEARROW coqexpr 
-- On CLOSE reduce production coqexpr -> coqexpr DOUBLEARROW coqexpr 
-- On BYDEF reduce production coqexpr -> coqexpr DOUBLEARROW coqexpr 
-- On BY reduce production coqexpr -> coqexpr DOUBLEARROW coqexpr 
-- On ARROW reduce production coqexpr -> coqexpr DOUBLEARROW coqexpr 

State 26:
coqexpr -> coqexpr BACKSLASHSLASH . coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
-- On TILDE shift to state 4
-- On OPEN shift to state 5
-- On LET shift to state 7
-- On LBRACKET shift to state 10
-- On IF shift to state 13
-- On IDENT shift to state 14
-- On FORALL shift to state 15
-- On coqexpr shift to state 27
-- On coqapplication shift to state 23

State 27:
coqexpr -> coqexpr . ARROW coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . DOUBLEARROW coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . SLASHBACKSLASH coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . BACKSLASHSLASH coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr BACKSLASHSLASH coqexpr . [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
-- On SLASHBACKSLASH shift to state 21
-- On BACKSLASHSLASH shift to state 26
-- On TILDE reduce production coqexpr -> coqexpr BACKSLASHSLASH coqexpr 
-- On THEN reduce production coqexpr -> coqexpr BACKSLASHSLASH coqexpr 
-- On STRING reduce production coqexpr -> coqexpr BACKSLASHSLASH coqexpr 
-- On RBRACKET reduce production coqexpr -> coqexpr BACKSLASHSLASH coqexpr 
-- On QED reduce production coqexpr -> coqexpr BACKSLASHSLASH coqexpr 
-- On OPEN reduce production coqexpr -> coqexpr BACKSLASHSLASH coqexpr 
-- On LET reduce production coqexpr -> coqexpr BACKSLASHSLASH coqexpr 
-- On LBRACKET reduce production coqexpr -> coqexpr BACKSLASHSLASH coqexpr 
-- On IN reduce production coqexpr -> coqexpr BACKSLASHSLASH coqexpr 
-- On IF reduce production coqexpr -> coqexpr BACKSLASHSLASH coqexpr 
-- On IDENT reduce production coqexpr -> coqexpr BACKSLASHSLASH coqexpr 
-- On FORALL reduce production coqexpr -> coqexpr BACKSLASHSLASH coqexpr 
-- On EQUAL reduce production coqexpr -> coqexpr BACKSLASHSLASH coqexpr 
-- On ENDPROOF reduce production coqexpr -> coqexpr BACKSLASHSLASH coqexpr 
-- On ELSE reduce production coqexpr -> coqexpr BACKSLASHSLASH coqexpr 
-- On DOUBLEARROW reduce production coqexpr -> coqexpr BACKSLASHSLASH coqexpr 
-- On COLONEQUAL reduce production coqexpr -> coqexpr BACKSLASHSLASH coqexpr 
-- On CLOSE reduce production coqexpr -> coqexpr BACKSLASHSLASH coqexpr 
-- On BYDEF reduce production coqexpr -> coqexpr BACKSLASHSLASH coqexpr 
-- On BY reduce production coqexpr -> coqexpr BACKSLASHSLASH coqexpr 
-- On ARROW reduce production coqexpr -> coqexpr BACKSLASHSLASH coqexpr 

State 28:
coqexpr -> coqexpr ARROW . coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
-- On TILDE shift to state 4
-- On OPEN shift to state 5
-- On LET shift to state 7
-- On LBRACKET shift to state 10
-- On IF shift to state 13
-- On IDENT shift to state 14
-- On FORALL shift to state 15
-- On coqexpr shift to state 29
-- On coqapplication shift to state 23

State 29:
coqexpr -> coqexpr . ARROW coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr ARROW coqexpr . [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . DOUBLEARROW coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . SLASHBACKSLASH coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . BACKSLASHSLASH coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
-- On SLASHBACKSLASH shift to state 21
-- On DOUBLEARROW shift to state 24
-- On BACKSLASHSLASH shift to state 26
-- On ARROW shift to state 28
-- On TILDE reduce production coqexpr -> coqexpr ARROW coqexpr 
-- On THEN reduce production coqexpr -> coqexpr ARROW coqexpr 
-- On STRING reduce production coqexpr -> coqexpr ARROW coqexpr 
-- On RBRACKET reduce production coqexpr -> coqexpr ARROW coqexpr 
-- On QED reduce production coqexpr -> coqexpr ARROW coqexpr 
-- On OPEN reduce production coqexpr -> coqexpr ARROW coqexpr 
-- On LET reduce production coqexpr -> coqexpr ARROW coqexpr 
-- On LBRACKET reduce production coqexpr -> coqexpr ARROW coqexpr 
-- On IN reduce production coqexpr -> coqexpr ARROW coqexpr 
-- On IF reduce production coqexpr -> coqexpr ARROW coqexpr 
-- On IDENT reduce production coqexpr -> coqexpr ARROW coqexpr 
-- On FORALL reduce production coqexpr -> coqexpr ARROW coqexpr 
-- On EQUAL reduce production coqexpr -> coqexpr ARROW coqexpr 
-- On ENDPROOF reduce production coqexpr -> coqexpr ARROW coqexpr 
-- On ELSE reduce production coqexpr -> coqexpr ARROW coqexpr 
-- On COLONEQUAL reduce production coqexpr -> coqexpr ARROW coqexpr 
-- On CLOSE reduce production coqexpr -> coqexpr ARROW coqexpr 
-- On BYDEF reduce production coqexpr -> coqexpr ARROW coqexpr 
-- On BY reduce production coqexpr -> coqexpr ARROW coqexpr 

State 30:
coqexpr -> IF coqexpr . THEN coqexpr ELSE coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . ARROW coqexpr [ THEN SLASHBACKSLASH DOUBLEARROW BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . DOUBLEARROW coqexpr [ THEN SLASHBACKSLASH DOUBLEARROW BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . SLASHBACKSLASH coqexpr [ THEN SLASHBACKSLASH DOUBLEARROW BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . BACKSLASHSLASH coqexpr [ THEN SLASHBACKSLASH DOUBLEARROW BACKSLASHSLASH ARROW ]
-- On THEN shift to state 31
-- On SLASHBACKSLASH shift to state 21
-- On DOUBLEARROW shift to state 24
-- On BACKSLASHSLASH shift to state 26
-- On ARROW shift to state 28

State 31:
coqexpr -> IF coqexpr THEN . coqexpr ELSE coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
-- On TILDE shift to state 4
-- On OPEN shift to state 5
-- On LET shift to state 7
-- On LBRACKET shift to state 10
-- On IF shift to state 13
-- On IDENT shift to state 14
-- On FORALL shift to state 15
-- On coqexpr shift to state 32
-- On coqapplication shift to state 23

State 32:
coqexpr -> IF coqexpr THEN coqexpr . ELSE coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . ARROW coqexpr [ SLASHBACKSLASH ELSE DOUBLEARROW BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . DOUBLEARROW coqexpr [ SLASHBACKSLASH ELSE DOUBLEARROW BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . SLASHBACKSLASH coqexpr [ SLASHBACKSLASH ELSE DOUBLEARROW BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . BACKSLASHSLASH coqexpr [ SLASHBACKSLASH ELSE DOUBLEARROW BACKSLASHSLASH ARROW ]
-- On SLASHBACKSLASH shift to state 21
-- On ELSE shift to state 33
-- On DOUBLEARROW shift to state 24
-- On BACKSLASHSLASH shift to state 26
-- On ARROW shift to state 28

State 33:
coqexpr -> IF coqexpr THEN coqexpr ELSE . coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
-- On TILDE shift to state 4
-- On OPEN shift to state 5
-- On LET shift to state 7
-- On LBRACKET shift to state 10
-- On IF shift to state 13
-- On IDENT shift to state 14
-- On FORALL shift to state 15
-- On coqexpr shift to state 34
-- On coqapplication shift to state 23

State 34:
coqexpr -> IF coqexpr THEN coqexpr ELSE coqexpr . [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . ARROW coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . DOUBLEARROW coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . SLASHBACKSLASH coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . BACKSLASHSLASH coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
-- On SLASHBACKSLASH shift to state 21
-- On DOUBLEARROW shift to state 24
-- On BACKSLASHSLASH shift to state 26
-- On ARROW shift to state 28
-- On TILDE reduce production coqexpr -> IF coqexpr THEN coqexpr ELSE coqexpr 
-- On THEN reduce production coqexpr -> IF coqexpr THEN coqexpr ELSE coqexpr 
-- On STRING reduce production coqexpr -> IF coqexpr THEN coqexpr ELSE coqexpr 
-- On RBRACKET reduce production coqexpr -> IF coqexpr THEN coqexpr ELSE coqexpr 
-- On QED reduce production coqexpr -> IF coqexpr THEN coqexpr ELSE coqexpr 
-- On OPEN reduce production coqexpr -> IF coqexpr THEN coqexpr ELSE coqexpr 
-- On LET reduce production coqexpr -> IF coqexpr THEN coqexpr ELSE coqexpr 
-- On LBRACKET reduce production coqexpr -> IF coqexpr THEN coqexpr ELSE coqexpr 
-- On IN reduce production coqexpr -> IF coqexpr THEN coqexpr ELSE coqexpr 
-- On IF reduce production coqexpr -> IF coqexpr THEN coqexpr ELSE coqexpr 
-- On IDENT reduce production coqexpr -> IF coqexpr THEN coqexpr ELSE coqexpr 
-- On FORALL reduce production coqexpr -> IF coqexpr THEN coqexpr ELSE coqexpr 
-- On EQUAL reduce production coqexpr -> IF coqexpr THEN coqexpr ELSE coqexpr 
-- On ENDPROOF reduce production coqexpr -> IF coqexpr THEN coqexpr ELSE coqexpr 
-- On ELSE reduce production coqexpr -> IF coqexpr THEN coqexpr ELSE coqexpr 
-- On COLONEQUAL reduce production coqexpr -> IF coqexpr THEN coqexpr ELSE coqexpr 
-- On CLOSE reduce production coqexpr -> IF coqexpr THEN coqexpr ELSE coqexpr 
-- On BYDEF reduce production coqexpr -> IF coqexpr THEN coqexpr ELSE coqexpr 
-- On BY reduce production coqexpr -> IF coqexpr THEN coqexpr ELSE coqexpr 

State 35:
coqexpr -> coqexpr . ARROW coqexpr [ SLASHBACKSLASH RBRACKET DOUBLEARROW BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . DOUBLEARROW coqexpr [ SLASHBACKSLASH RBRACKET DOUBLEARROW BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . SLASHBACKSLASH coqexpr [ SLASHBACKSLASH RBRACKET DOUBLEARROW BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . BACKSLASHSLASH coqexpr [ SLASHBACKSLASH RBRACKET DOUBLEARROW BACKSLASHSLASH ARROW ]
coqexpr -> LBRACKET IDENT COLONEQUAL coqexpr . RBRACKET coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
-- On SLASHBACKSLASH shift to state 21
-- On RBRACKET shift to state 36
-- On DOUBLEARROW shift to state 24
-- On BACKSLASHSLASH shift to state 26
-- On ARROW shift to state 28

State 36:
coqexpr -> LBRACKET IDENT COLONEQUAL coqexpr RBRACKET . coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
-- On TILDE shift to state 4
-- On OPEN shift to state 5
-- On LET shift to state 7
-- On LBRACKET shift to state 10
-- On IF shift to state 13
-- On IDENT shift to state 14
-- On FORALL shift to state 15
-- On coqexpr shift to state 37
-- On coqapplication shift to state 23

State 37:
coqexpr -> coqexpr . ARROW coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . DOUBLEARROW coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . SLASHBACKSLASH coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . BACKSLASHSLASH coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> LBRACKET IDENT COLONEQUAL coqexpr RBRACKET coqexpr . [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
-- On SLASHBACKSLASH shift to state 21
-- On DOUBLEARROW shift to state 24
-- On BACKSLASHSLASH shift to state 26
-- On ARROW shift to state 28
-- On TILDE reduce production coqexpr -> LBRACKET IDENT COLONEQUAL coqexpr RBRACKET coqexpr 
-- On THEN reduce production coqexpr -> LBRACKET IDENT COLONEQUAL coqexpr RBRACKET coqexpr 
-- On STRING reduce production coqexpr -> LBRACKET IDENT COLONEQUAL coqexpr RBRACKET coqexpr 
-- On RBRACKET reduce production coqexpr -> LBRACKET IDENT COLONEQUAL coqexpr RBRACKET coqexpr 
-- On QED reduce production coqexpr -> LBRACKET IDENT COLONEQUAL coqexpr RBRACKET coqexpr 
-- On OPEN reduce production coqexpr -> LBRACKET IDENT COLONEQUAL coqexpr RBRACKET coqexpr 
-- On LET reduce production coqexpr -> LBRACKET IDENT COLONEQUAL coqexpr RBRACKET coqexpr 
-- On LBRACKET reduce production coqexpr -> LBRACKET IDENT COLONEQUAL coqexpr RBRACKET coqexpr 
-- On IN reduce production coqexpr -> LBRACKET IDENT COLONEQUAL coqexpr RBRACKET coqexpr 
-- On IF reduce production coqexpr -> LBRACKET IDENT COLONEQUAL coqexpr RBRACKET coqexpr 
-- On IDENT reduce production coqexpr -> LBRACKET IDENT COLONEQUAL coqexpr RBRACKET coqexpr 
-- On FORALL reduce production coqexpr -> LBRACKET IDENT COLONEQUAL coqexpr RBRACKET coqexpr 
-- On EQUAL reduce production coqexpr -> LBRACKET IDENT COLONEQUAL coqexpr RBRACKET coqexpr 
-- On ENDPROOF reduce production coqexpr -> LBRACKET IDENT COLONEQUAL coqexpr RBRACKET coqexpr 
-- On ELSE reduce production coqexpr -> LBRACKET IDENT COLONEQUAL coqexpr RBRACKET coqexpr 
-- On COLONEQUAL reduce production coqexpr -> LBRACKET IDENT COLONEQUAL coqexpr RBRACKET coqexpr 
-- On CLOSE reduce production coqexpr -> LBRACKET IDENT COLONEQUAL coqexpr RBRACKET coqexpr 
-- On BYDEF reduce production coqexpr -> LBRACKET IDENT COLONEQUAL coqexpr RBRACKET coqexpr 
-- On BY reduce production coqexpr -> LBRACKET IDENT COLONEQUAL coqexpr RBRACKET coqexpr 

State 38:
coqexpr -> coqexpr . ARROW coqexpr [ SLASHBACKSLASH IN DOUBLEARROW BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . DOUBLEARROW coqexpr [ SLASHBACKSLASH IN DOUBLEARROW BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . SLASHBACKSLASH coqexpr [ SLASHBACKSLASH IN DOUBLEARROW BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . BACKSLASHSLASH coqexpr [ SLASHBACKSLASH IN DOUBLEARROW BACKSLASHSLASH ARROW ]
coqexpr -> LET IDENT COLONEQUAL coqexpr . IN coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
-- On SLASHBACKSLASH shift to state 21
-- On IN shift to state 39
-- On DOUBLEARROW shift to state 24
-- On BACKSLASHSLASH shift to state 26
-- On ARROW shift to state 28

State 39:
coqexpr -> LET IDENT COLONEQUAL coqexpr IN . coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
-- On TILDE shift to state 4
-- On OPEN shift to state 5
-- On LET shift to state 7
-- On LBRACKET shift to state 10
-- On IF shift to state 13
-- On IDENT shift to state 14
-- On FORALL shift to state 15
-- On coqexpr shift to state 40
-- On coqapplication shift to state 23

State 40:
coqexpr -> coqexpr . ARROW coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . DOUBLEARROW coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . SLASHBACKSLASH coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . BACKSLASHSLASH coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> LET IDENT COLONEQUAL coqexpr IN coqexpr . [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
-- On SLASHBACKSLASH shift to state 21
-- On DOUBLEARROW shift to state 24
-- On BACKSLASHSLASH shift to state 26
-- On ARROW shift to state 28
-- On TILDE reduce production coqexpr -> LET IDENT COLONEQUAL coqexpr IN coqexpr 
-- On THEN reduce production coqexpr -> LET IDENT COLONEQUAL coqexpr IN coqexpr 
-- On STRING reduce production coqexpr -> LET IDENT COLONEQUAL coqexpr IN coqexpr 
-- On RBRACKET reduce production coqexpr -> LET IDENT COLONEQUAL coqexpr IN coqexpr 
-- On QED reduce production coqexpr -> LET IDENT COLONEQUAL coqexpr IN coqexpr 
-- On OPEN reduce production coqexpr -> LET IDENT COLONEQUAL coqexpr IN coqexpr 
-- On LET reduce production coqexpr -> LET IDENT COLONEQUAL coqexpr IN coqexpr 
-- On LBRACKET reduce production coqexpr -> LET IDENT COLONEQUAL coqexpr IN coqexpr 
-- On IN reduce production coqexpr -> LET IDENT COLONEQUAL coqexpr IN coqexpr 
-- On IF reduce production coqexpr -> LET IDENT COLONEQUAL coqexpr IN coqexpr 
-- On IDENT reduce production coqexpr -> LET IDENT COLONEQUAL coqexpr IN coqexpr 
-- On FORALL reduce production coqexpr -> LET IDENT COLONEQUAL coqexpr IN coqexpr 
-- On EQUAL reduce production coqexpr -> LET IDENT COLONEQUAL coqexpr IN coqexpr 
-- On ENDPROOF reduce production coqexpr -> LET IDENT COLONEQUAL coqexpr IN coqexpr 
-- On ELSE reduce production coqexpr -> LET IDENT COLONEQUAL coqexpr IN coqexpr 
-- On COLONEQUAL reduce production coqexpr -> LET IDENT COLONEQUAL coqexpr IN coqexpr 
-- On CLOSE reduce production coqexpr -> LET IDENT COLONEQUAL coqexpr IN coqexpr 
-- On BYDEF reduce production coqexpr -> LET IDENT COLONEQUAL coqexpr IN coqexpr 
-- On BY reduce production coqexpr -> LET IDENT COLONEQUAL coqexpr IN coqexpr 

State 41:
coqexpr -> OPEN OR coqexpr . coqexpr CLOSE [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . ARROW coqexpr [ TILDE SLASHBACKSLASH OPEN LET LBRACKET IF IDENT FORALL DOUBLEARROW BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . DOUBLEARROW coqexpr [ TILDE SLASHBACKSLASH OPEN LET LBRACKET IF IDENT FORALL DOUBLEARROW BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . SLASHBACKSLASH coqexpr [ TILDE SLASHBACKSLASH OPEN LET LBRACKET IF IDENT FORALL DOUBLEARROW BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . BACKSLASHSLASH coqexpr [ TILDE SLASHBACKSLASH OPEN LET LBRACKET IF IDENT FORALL DOUBLEARROW BACKSLASHSLASH ARROW ]
-- On TILDE shift to state 4
-- On SLASHBACKSLASH shift to state 21
-- On OPEN shift to state 5
-- On LET shift to state 7
-- On LBRACKET shift to state 10
-- On IF shift to state 13
-- On IDENT shift to state 14
-- On FORALL shift to state 15
-- On DOUBLEARROW shift to state 24
-- On BACKSLASHSLASH shift to state 26
-- On ARROW shift to state 28
-- On coqexpr shift to state 42
-- On coqapplication shift to state 23

State 42:
coqexpr -> OPEN OR coqexpr coqexpr . CLOSE [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . ARROW coqexpr [ SLASHBACKSLASH DOUBLEARROW CLOSE BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . DOUBLEARROW coqexpr [ SLASHBACKSLASH DOUBLEARROW CLOSE BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . SLASHBACKSLASH coqexpr [ SLASHBACKSLASH DOUBLEARROW CLOSE BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . BACKSLASHSLASH coqexpr [ SLASHBACKSLASH DOUBLEARROW CLOSE BACKSLASHSLASH ARROW ]
-- On SLASHBACKSLASH shift to state 21
-- On DOUBLEARROW shift to state 24
-- On CLOSE shift to state 43
-- On BACKSLASHSLASH shift to state 26
-- On ARROW shift to state 28

State 43:
coqexpr -> OPEN OR coqexpr coqexpr CLOSE . [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
-- On TILDE reduce production coqexpr -> OPEN OR coqexpr coqexpr CLOSE 
-- On THEN reduce production coqexpr -> OPEN OR coqexpr coqexpr CLOSE 
-- On STRING reduce production coqexpr -> OPEN OR coqexpr coqexpr CLOSE 
-- On SLASHBACKSLASH reduce production coqexpr -> OPEN OR coqexpr coqexpr CLOSE 
-- On RBRACKET reduce production coqexpr -> OPEN OR coqexpr coqexpr CLOSE 
-- On QED reduce production coqexpr -> OPEN OR coqexpr coqexpr CLOSE 
-- On OPEN reduce production coqexpr -> OPEN OR coqexpr coqexpr CLOSE 
-- On LET reduce production coqexpr -> OPEN OR coqexpr coqexpr CLOSE 
-- On LBRACKET reduce production coqexpr -> OPEN OR coqexpr coqexpr CLOSE 
-- On IN reduce production coqexpr -> OPEN OR coqexpr coqexpr CLOSE 
-- On IF reduce production coqexpr -> OPEN OR coqexpr coqexpr CLOSE 
-- On IDENT reduce production coqexpr -> OPEN OR coqexpr coqexpr CLOSE 
-- On FORALL reduce production coqexpr -> OPEN OR coqexpr coqexpr CLOSE 
-- On EQUAL reduce production coqexpr -> OPEN OR coqexpr coqexpr CLOSE 
-- On ENDPROOF reduce production coqexpr -> OPEN OR coqexpr coqexpr CLOSE 
-- On ELSE reduce production coqexpr -> OPEN OR coqexpr coqexpr CLOSE 
-- On DOUBLEARROW reduce production coqexpr -> OPEN OR coqexpr coqexpr CLOSE 
-- On COLONEQUAL reduce production coqexpr -> OPEN OR coqexpr coqexpr CLOSE 
-- On CLOSE reduce production coqexpr -> OPEN OR coqexpr coqexpr CLOSE 
-- On BYDEF reduce production coqexpr -> OPEN OR coqexpr coqexpr CLOSE 
-- On BY reduce production coqexpr -> OPEN OR coqexpr coqexpr CLOSE 
-- On BACKSLASHSLASH reduce production coqexpr -> OPEN OR coqexpr coqexpr CLOSE 
-- On ARROW reduce production coqexpr -> OPEN OR coqexpr coqexpr CLOSE 

State 44:
coqapplication -> OPEN IDENT . coqexpr_list1 CLOSE [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> OPEN IDENT . COLON IDENT CLOSE coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> IDENT . [ SLASHBACKSLASH EQUAL DOUBLEARROW CLOSE BACKSLASHSLASH ARROW ]
-- On TILDE shift to state 4
-- On OPEN shift to state 5
-- On LET shift to state 7
-- On LBRACKET shift to state 10
-- On IF shift to state 13
-- On IDENT shift to state 14
-- On FORALL shift to state 15
-- On COLON shift to state 45
-- On coqexpr_list1 shift to state 49
-- On coqexpr shift to state 51
-- On coqapplication shift to state 23
-- On SLASHBACKSLASH reduce production coqexpr -> IDENT 
-- On EQUAL reduce production coqexpr -> IDENT 
-- On DOUBLEARROW reduce production coqexpr -> IDENT 
-- On CLOSE reduce production coqexpr -> IDENT 
-- On BACKSLASHSLASH reduce production coqexpr -> IDENT 
-- On ARROW reduce production coqexpr -> IDENT 

State 45:
coqexpr -> OPEN IDENT COLON . IDENT CLOSE coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
-- On IDENT shift to state 46

State 46:
coqexpr -> OPEN IDENT COLON IDENT . CLOSE coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
-- On CLOSE shift to state 47

State 47:
coqexpr -> OPEN IDENT COLON IDENT CLOSE . coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
-- On TILDE shift to state 4
-- On OPEN shift to state 5
-- On LET shift to state 7
-- On LBRACKET shift to state 10
-- On IF shift to state 13
-- On IDENT shift to state 14
-- On FORALL shift to state 15
-- On coqexpr shift to state 48
-- On coqapplication shift to state 23

State 48:
coqexpr -> OPEN IDENT COLON IDENT CLOSE coqexpr . [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . ARROW coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . DOUBLEARROW coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . SLASHBACKSLASH coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . BACKSLASHSLASH coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
-- On SLASHBACKSLASH shift to state 21
-- On DOUBLEARROW shift to state 24
-- On BACKSLASHSLASH shift to state 26
-- On ARROW shift to state 28
-- On TILDE reduce production coqexpr -> OPEN IDENT COLON IDENT CLOSE coqexpr 
-- On THEN reduce production coqexpr -> OPEN IDENT COLON IDENT CLOSE coqexpr 
-- On STRING reduce production coqexpr -> OPEN IDENT COLON IDENT CLOSE coqexpr 
-- On RBRACKET reduce production coqexpr -> OPEN IDENT COLON IDENT CLOSE coqexpr 
-- On QED reduce production coqexpr -> OPEN IDENT COLON IDENT CLOSE coqexpr 
-- On OPEN reduce production coqexpr -> OPEN IDENT COLON IDENT CLOSE coqexpr 
-- On LET reduce production coqexpr -> OPEN IDENT COLON IDENT CLOSE coqexpr 
-- On LBRACKET reduce production coqexpr -> OPEN IDENT COLON IDENT CLOSE coqexpr 
-- On IN reduce production coqexpr -> OPEN IDENT COLON IDENT CLOSE coqexpr 
-- On IF reduce production coqexpr -> OPEN IDENT COLON IDENT CLOSE coqexpr 
-- On IDENT reduce production coqexpr -> OPEN IDENT COLON IDENT CLOSE coqexpr 
-- On FORALL reduce production coqexpr -> OPEN IDENT COLON IDENT CLOSE coqexpr 
-- On EQUAL reduce production coqexpr -> OPEN IDENT COLON IDENT CLOSE coqexpr 
-- On ENDPROOF reduce production coqexpr -> OPEN IDENT COLON IDENT CLOSE coqexpr 
-- On ELSE reduce production coqexpr -> OPEN IDENT COLON IDENT CLOSE coqexpr 
-- On COLONEQUAL reduce production coqexpr -> OPEN IDENT COLON IDENT CLOSE coqexpr 
-- On CLOSE reduce production coqexpr -> OPEN IDENT COLON IDENT CLOSE coqexpr 
-- On BYDEF reduce production coqexpr -> OPEN IDENT COLON IDENT CLOSE coqexpr 
-- On BY reduce production coqexpr -> OPEN IDENT COLON IDENT CLOSE coqexpr 

State 49:
coqapplication -> OPEN IDENT coqexpr_list1 . CLOSE [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
-- On CLOSE shift to state 50

State 50:
coqapplication -> OPEN IDENT coqexpr_list1 CLOSE . [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
-- On TILDE reduce production coqapplication -> OPEN IDENT coqexpr_list1 CLOSE 
-- On THEN reduce production coqapplication -> OPEN IDENT coqexpr_list1 CLOSE 
-- On STRING reduce production coqapplication -> OPEN IDENT coqexpr_list1 CLOSE 
-- On SLASHBACKSLASH reduce production coqapplication -> OPEN IDENT coqexpr_list1 CLOSE 
-- On RBRACKET reduce production coqapplication -> OPEN IDENT coqexpr_list1 CLOSE 
-- On QED reduce production coqapplication -> OPEN IDENT coqexpr_list1 CLOSE 
-- On OPEN reduce production coqapplication -> OPEN IDENT coqexpr_list1 CLOSE 
-- On LET reduce production coqapplication -> OPEN IDENT coqexpr_list1 CLOSE 
-- On LBRACKET reduce production coqapplication -> OPEN IDENT coqexpr_list1 CLOSE 
-- On IN reduce production coqapplication -> OPEN IDENT coqexpr_list1 CLOSE 
-- On IF reduce production coqapplication -> OPEN IDENT coqexpr_list1 CLOSE 
-- On IDENT reduce production coqapplication -> OPEN IDENT coqexpr_list1 CLOSE 
-- On FORALL reduce production coqapplication -> OPEN IDENT coqexpr_list1 CLOSE 
-- On EQUAL reduce production coqapplication -> OPEN IDENT coqexpr_list1 CLOSE 
-- On ENDPROOF reduce production coqapplication -> OPEN IDENT coqexpr_list1 CLOSE 
-- On ELSE reduce production coqapplication -> OPEN IDENT coqexpr_list1 CLOSE 
-- On DOUBLEARROW reduce production coqapplication -> OPEN IDENT coqexpr_list1 CLOSE 
-- On COLONEQUAL reduce production coqapplication -> OPEN IDENT coqexpr_list1 CLOSE 
-- On CLOSE reduce production coqapplication -> OPEN IDENT coqexpr_list1 CLOSE 
-- On BYDEF reduce production coqapplication -> OPEN IDENT coqexpr_list1 CLOSE 
-- On BY reduce production coqapplication -> OPEN IDENT coqexpr_list1 CLOSE 
-- On BACKSLASHSLASH reduce production coqapplication -> OPEN IDENT coqexpr_list1 CLOSE 
-- On ARROW reduce production coqapplication -> OPEN IDENT coqexpr_list1 CLOSE 

State 51:
coqexpr -> coqexpr . ARROW coqexpr [ TILDE SLASHBACKSLASH OPEN LET LBRACKET IF IDENT FORALL DOUBLEARROW CLOSE BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . DOUBLEARROW coqexpr [ TILDE SLASHBACKSLASH OPEN LET LBRACKET IF IDENT FORALL DOUBLEARROW CLOSE BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . SLASHBACKSLASH coqexpr [ TILDE SLASHBACKSLASH OPEN LET LBRACKET IF IDENT FORALL DOUBLEARROW CLOSE BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . BACKSLASHSLASH coqexpr [ TILDE SLASHBACKSLASH OPEN LET LBRACKET IF IDENT FORALL DOUBLEARROW CLOSE BACKSLASHSLASH ARROW ]
coqexpr_list1 -> coqexpr . [ CLOSE ]
coqexpr_list1 -> coqexpr . coqexpr_list1 [ CLOSE ]
-- On TILDE shift to state 4
-- On SLASHBACKSLASH shift to state 21
-- On OPEN shift to state 5
-- On LET shift to state 7
-- On LBRACKET shift to state 10
-- On IF shift to state 13
-- On IDENT shift to state 14
-- On FORALL shift to state 15
-- On DOUBLEARROW shift to state 24
-- On BACKSLASHSLASH shift to state 26
-- On ARROW shift to state 28
-- On coqexpr_list1 shift to state 52
-- On coqexpr shift to state 51
-- On coqapplication shift to state 23
-- On CLOSE reduce production coqexpr_list1 -> coqexpr 

State 52:
coqexpr_list1 -> coqexpr coqexpr_list1 . [ CLOSE ]
-- On CLOSE reduce production coqexpr_list1 -> coqexpr coqexpr_list1 

State 53:
coqexpr -> OPEN AND . coqexpr coqexpr CLOSE [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
-- On TILDE shift to state 4
-- On OPEN shift to state 5
-- On LET shift to state 7
-- On LBRACKET shift to state 10
-- On IF shift to state 13
-- On IDENT shift to state 14
-- On FORALL shift to state 15
-- On coqexpr shift to state 54
-- On coqapplication shift to state 23

State 54:
coqexpr -> OPEN AND coqexpr . coqexpr CLOSE [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . ARROW coqexpr [ TILDE SLASHBACKSLASH OPEN LET LBRACKET IF IDENT FORALL DOUBLEARROW BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . DOUBLEARROW coqexpr [ TILDE SLASHBACKSLASH OPEN LET LBRACKET IF IDENT FORALL DOUBLEARROW BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . SLASHBACKSLASH coqexpr [ TILDE SLASHBACKSLASH OPEN LET LBRACKET IF IDENT FORALL DOUBLEARROW BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . BACKSLASHSLASH coqexpr [ TILDE SLASHBACKSLASH OPEN LET LBRACKET IF IDENT FORALL DOUBLEARROW BACKSLASHSLASH ARROW ]
-- On TILDE shift to state 4
-- On SLASHBACKSLASH shift to state 21
-- On OPEN shift to state 5
-- On LET shift to state 7
-- On LBRACKET shift to state 10
-- On IF shift to state 13
-- On IDENT shift to state 14
-- On FORALL shift to state 15
-- On DOUBLEARROW shift to state 24
-- On BACKSLASHSLASH shift to state 26
-- On ARROW shift to state 28
-- On coqexpr shift to state 55
-- On coqapplication shift to state 23

State 55:
coqexpr -> OPEN AND coqexpr coqexpr . CLOSE [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . ARROW coqexpr [ SLASHBACKSLASH DOUBLEARROW CLOSE BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . DOUBLEARROW coqexpr [ SLASHBACKSLASH DOUBLEARROW CLOSE BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . SLASHBACKSLASH coqexpr [ SLASHBACKSLASH DOUBLEARROW CLOSE BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . BACKSLASHSLASH coqexpr [ SLASHBACKSLASH DOUBLEARROW CLOSE BACKSLASHSLASH ARROW ]
-- On SLASHBACKSLASH shift to state 21
-- On DOUBLEARROW shift to state 24
-- On CLOSE shift to state 56
-- On BACKSLASHSLASH shift to state 26
-- On ARROW shift to state 28

State 56:
coqexpr -> OPEN AND coqexpr coqexpr CLOSE . [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
-- On TILDE reduce production coqexpr -> OPEN AND coqexpr coqexpr CLOSE 
-- On THEN reduce production coqexpr -> OPEN AND coqexpr coqexpr CLOSE 
-- On STRING reduce production coqexpr -> OPEN AND coqexpr coqexpr CLOSE 
-- On SLASHBACKSLASH reduce production coqexpr -> OPEN AND coqexpr coqexpr CLOSE 
-- On RBRACKET reduce production coqexpr -> OPEN AND coqexpr coqexpr CLOSE 
-- On QED reduce production coqexpr -> OPEN AND coqexpr coqexpr CLOSE 
-- On OPEN reduce production coqexpr -> OPEN AND coqexpr coqexpr CLOSE 
-- On LET reduce production coqexpr -> OPEN AND coqexpr coqexpr CLOSE 
-- On LBRACKET reduce production coqexpr -> OPEN AND coqexpr coqexpr CLOSE 
-- On IN reduce production coqexpr -> OPEN AND coqexpr coqexpr CLOSE 
-- On IF reduce production coqexpr -> OPEN AND coqexpr coqexpr CLOSE 
-- On IDENT reduce production coqexpr -> OPEN AND coqexpr coqexpr CLOSE 
-- On FORALL reduce production coqexpr -> OPEN AND coqexpr coqexpr CLOSE 
-- On EQUAL reduce production coqexpr -> OPEN AND coqexpr coqexpr CLOSE 
-- On ENDPROOF reduce production coqexpr -> OPEN AND coqexpr coqexpr CLOSE 
-- On ELSE reduce production coqexpr -> OPEN AND coqexpr coqexpr CLOSE 
-- On DOUBLEARROW reduce production coqexpr -> OPEN AND coqexpr coqexpr CLOSE 
-- On COLONEQUAL reduce production coqexpr -> OPEN AND coqexpr coqexpr CLOSE 
-- On CLOSE reduce production coqexpr -> OPEN AND coqexpr coqexpr CLOSE 
-- On BYDEF reduce production coqexpr -> OPEN AND coqexpr coqexpr CLOSE 
-- On BY reduce production coqexpr -> OPEN AND coqexpr coqexpr CLOSE 
-- On BACKSLASHSLASH reduce production coqexpr -> OPEN AND coqexpr coqexpr CLOSE 
-- On ARROW reduce production coqexpr -> OPEN AND coqexpr coqexpr CLOSE 

State 57:
coqexpr -> OPEN coqexpr . CLOSE [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> OPEN coqexpr . EQUAL coqexpr CLOSE [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . ARROW coqexpr [ SLASHBACKSLASH EQUAL DOUBLEARROW CLOSE BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . DOUBLEARROW coqexpr [ SLASHBACKSLASH EQUAL DOUBLEARROW CLOSE BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . SLASHBACKSLASH coqexpr [ SLASHBACKSLASH EQUAL DOUBLEARROW CLOSE BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . BACKSLASHSLASH coqexpr [ SLASHBACKSLASH EQUAL DOUBLEARROW CLOSE BACKSLASHSLASH ARROW ]
-- On SLASHBACKSLASH shift to state 21
-- On EQUAL shift to state 58
-- On DOUBLEARROW shift to state 24
-- On CLOSE shift to state 61
-- On BACKSLASHSLASH shift to state 26
-- On ARROW shift to state 28

State 58:
coqexpr -> OPEN coqexpr EQUAL . coqexpr CLOSE [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
-- On TILDE shift to state 4
-- On OPEN shift to state 5
-- On LET shift to state 7
-- On LBRACKET shift to state 10
-- On IF shift to state 13
-- On IDENT shift to state 14
-- On FORALL shift to state 15
-- On coqexpr shift to state 59
-- On coqapplication shift to state 23

State 59:
coqexpr -> OPEN coqexpr EQUAL coqexpr . CLOSE [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . ARROW coqexpr [ SLASHBACKSLASH DOUBLEARROW CLOSE BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . DOUBLEARROW coqexpr [ SLASHBACKSLASH DOUBLEARROW CLOSE BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . SLASHBACKSLASH coqexpr [ SLASHBACKSLASH DOUBLEARROW CLOSE BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . BACKSLASHSLASH coqexpr [ SLASHBACKSLASH DOUBLEARROW CLOSE BACKSLASHSLASH ARROW ]
-- On SLASHBACKSLASH shift to state 21
-- On DOUBLEARROW shift to state 24
-- On CLOSE shift to state 60
-- On BACKSLASHSLASH shift to state 26
-- On ARROW shift to state 28

State 60:
coqexpr -> OPEN coqexpr EQUAL coqexpr CLOSE . [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
-- On TILDE reduce production coqexpr -> OPEN coqexpr EQUAL coqexpr CLOSE 
-- On THEN reduce production coqexpr -> OPEN coqexpr EQUAL coqexpr CLOSE 
-- On STRING reduce production coqexpr -> OPEN coqexpr EQUAL coqexpr CLOSE 
-- On SLASHBACKSLASH reduce production coqexpr -> OPEN coqexpr EQUAL coqexpr CLOSE 
-- On RBRACKET reduce production coqexpr -> OPEN coqexpr EQUAL coqexpr CLOSE 
-- On QED reduce production coqexpr -> OPEN coqexpr EQUAL coqexpr CLOSE 
-- On OPEN reduce production coqexpr -> OPEN coqexpr EQUAL coqexpr CLOSE 
-- On LET reduce production coqexpr -> OPEN coqexpr EQUAL coqexpr CLOSE 
-- On LBRACKET reduce production coqexpr -> OPEN coqexpr EQUAL coqexpr CLOSE 
-- On IN reduce production coqexpr -> OPEN coqexpr EQUAL coqexpr CLOSE 
-- On IF reduce production coqexpr -> OPEN coqexpr EQUAL coqexpr CLOSE 
-- On IDENT reduce production coqexpr -> OPEN coqexpr EQUAL coqexpr CLOSE 
-- On FORALL reduce production coqexpr -> OPEN coqexpr EQUAL coqexpr CLOSE 
-- On EQUAL reduce production coqexpr -> OPEN coqexpr EQUAL coqexpr CLOSE 
-- On ENDPROOF reduce production coqexpr -> OPEN coqexpr EQUAL coqexpr CLOSE 
-- On ELSE reduce production coqexpr -> OPEN coqexpr EQUAL coqexpr CLOSE 
-- On DOUBLEARROW reduce production coqexpr -> OPEN coqexpr EQUAL coqexpr CLOSE 
-- On COLONEQUAL reduce production coqexpr -> OPEN coqexpr EQUAL coqexpr CLOSE 
-- On CLOSE reduce production coqexpr -> OPEN coqexpr EQUAL coqexpr CLOSE 
-- On BYDEF reduce production coqexpr -> OPEN coqexpr EQUAL coqexpr CLOSE 
-- On BY reduce production coqexpr -> OPEN coqexpr EQUAL coqexpr CLOSE 
-- On BACKSLASHSLASH reduce production coqexpr -> OPEN coqexpr EQUAL coqexpr CLOSE 
-- On ARROW reduce production coqexpr -> OPEN coqexpr EQUAL coqexpr CLOSE 

State 61:
coqexpr -> OPEN coqexpr CLOSE . [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
-- On TILDE reduce production coqexpr -> OPEN coqexpr CLOSE 
-- On THEN reduce production coqexpr -> OPEN coqexpr CLOSE 
-- On STRING reduce production coqexpr -> OPEN coqexpr CLOSE 
-- On SLASHBACKSLASH reduce production coqexpr -> OPEN coqexpr CLOSE 
-- On RBRACKET reduce production coqexpr -> OPEN coqexpr CLOSE 
-- On QED reduce production coqexpr -> OPEN coqexpr CLOSE 
-- On OPEN reduce production coqexpr -> OPEN coqexpr CLOSE 
-- On LET reduce production coqexpr -> OPEN coqexpr CLOSE 
-- On LBRACKET reduce production coqexpr -> OPEN coqexpr CLOSE 
-- On IN reduce production coqexpr -> OPEN coqexpr CLOSE 
-- On IF reduce production coqexpr -> OPEN coqexpr CLOSE 
-- On IDENT reduce production coqexpr -> OPEN coqexpr CLOSE 
-- On FORALL reduce production coqexpr -> OPEN coqexpr CLOSE 
-- On EQUAL reduce production coqexpr -> OPEN coqexpr CLOSE 
-- On ENDPROOF reduce production coqexpr -> OPEN coqexpr CLOSE 
-- On ELSE reduce production coqexpr -> OPEN coqexpr CLOSE 
-- On DOUBLEARROW reduce production coqexpr -> OPEN coqexpr CLOSE 
-- On COLONEQUAL reduce production coqexpr -> OPEN coqexpr CLOSE 
-- On CLOSE reduce production coqexpr -> OPEN coqexpr CLOSE 
-- On BYDEF reduce production coqexpr -> OPEN coqexpr CLOSE 
-- On BY reduce production coqexpr -> OPEN coqexpr CLOSE 
-- On BACKSLASHSLASH reduce production coqexpr -> OPEN coqexpr CLOSE 
-- On ARROW reduce production coqexpr -> OPEN coqexpr CLOSE 

State 62:
coqapplication -> OPEN coqapplication . coqexpr_list1 CLOSE [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqapplication . [ SLASHBACKSLASH EQUAL DOUBLEARROW CLOSE BACKSLASHSLASH ARROW ]
-- On TILDE shift to state 4
-- On OPEN shift to state 5
-- On LET shift to state 7
-- On LBRACKET shift to state 10
-- On IF shift to state 13
-- On IDENT shift to state 14
-- On FORALL shift to state 15
-- On coqexpr_list1 shift to state 63
-- On coqexpr shift to state 51
-- On coqapplication shift to state 23
-- On SLASHBACKSLASH reduce production coqexpr -> coqapplication 
-- On EQUAL reduce production coqexpr -> coqapplication 
-- On DOUBLEARROW reduce production coqexpr -> coqapplication 
-- On CLOSE reduce production coqexpr -> coqapplication 
-- On BACKSLASHSLASH reduce production coqexpr -> coqapplication 
-- On ARROW reduce production coqexpr -> coqapplication 

State 63:
coqapplication -> OPEN coqapplication coqexpr_list1 . CLOSE [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
-- On CLOSE shift to state 64

State 64:
coqapplication -> OPEN coqapplication coqexpr_list1 CLOSE . [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
-- On TILDE reduce production coqapplication -> OPEN coqapplication coqexpr_list1 CLOSE 
-- On THEN reduce production coqapplication -> OPEN coqapplication coqexpr_list1 CLOSE 
-- On STRING reduce production coqapplication -> OPEN coqapplication coqexpr_list1 CLOSE 
-- On SLASHBACKSLASH reduce production coqapplication -> OPEN coqapplication coqexpr_list1 CLOSE 
-- On RBRACKET reduce production coqapplication -> OPEN coqapplication coqexpr_list1 CLOSE 
-- On QED reduce production coqapplication -> OPEN coqapplication coqexpr_list1 CLOSE 
-- On OPEN reduce production coqapplication -> OPEN coqapplication coqexpr_list1 CLOSE 
-- On LET reduce production coqapplication -> OPEN coqapplication coqexpr_list1 CLOSE 
-- On LBRACKET reduce production coqapplication -> OPEN coqapplication coqexpr_list1 CLOSE 
-- On IN reduce production coqapplication -> OPEN coqapplication coqexpr_list1 CLOSE 
-- On IF reduce production coqapplication -> OPEN coqapplication coqexpr_list1 CLOSE 
-- On IDENT reduce production coqapplication -> OPEN coqapplication coqexpr_list1 CLOSE 
-- On FORALL reduce production coqapplication -> OPEN coqapplication coqexpr_list1 CLOSE 
-- On EQUAL reduce production coqapplication -> OPEN coqapplication coqexpr_list1 CLOSE 
-- On ENDPROOF reduce production coqapplication -> OPEN coqapplication coqexpr_list1 CLOSE 
-- On ELSE reduce production coqapplication -> OPEN coqapplication coqexpr_list1 CLOSE 
-- On DOUBLEARROW reduce production coqapplication -> OPEN coqapplication coqexpr_list1 CLOSE 
-- On COLONEQUAL reduce production coqapplication -> OPEN coqapplication coqexpr_list1 CLOSE 
-- On CLOSE reduce production coqapplication -> OPEN coqapplication coqexpr_list1 CLOSE 
-- On BYDEF reduce production coqapplication -> OPEN coqapplication coqexpr_list1 CLOSE 
-- On BY reduce production coqapplication -> OPEN coqapplication coqexpr_list1 CLOSE 
-- On BACKSLASHSLASH reduce production coqapplication -> OPEN coqapplication coqexpr_list1 CLOSE 
-- On ARROW reduce production coqapplication -> OPEN coqapplication coqexpr_list1 CLOSE 

State 65:
coqexpr -> TILDE coqexpr . [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . ARROW coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . DOUBLEARROW coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . SLASHBACKSLASH coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . BACKSLASHSLASH coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
-- On TILDE reduce production coqexpr -> TILDE coqexpr 
-- On THEN reduce production coqexpr -> TILDE coqexpr 
-- On STRING reduce production coqexpr -> TILDE coqexpr 
-- On SLASHBACKSLASH reduce production coqexpr -> TILDE coqexpr 
-- On RBRACKET reduce production coqexpr -> TILDE coqexpr 
-- On QED reduce production coqexpr -> TILDE coqexpr 
-- On OPEN reduce production coqexpr -> TILDE coqexpr 
-- On LET reduce production coqexpr -> TILDE coqexpr 
-- On LBRACKET reduce production coqexpr -> TILDE coqexpr 
-- On IN reduce production coqexpr -> TILDE coqexpr 
-- On IF reduce production coqexpr -> TILDE coqexpr 
-- On IDENT reduce production coqexpr -> TILDE coqexpr 
-- On FORALL reduce production coqexpr -> TILDE coqexpr 
-- On EQUAL reduce production coqexpr -> TILDE coqexpr 
-- On ENDPROOF reduce production coqexpr -> TILDE coqexpr 
-- On ELSE reduce production coqexpr -> TILDE coqexpr 
-- On DOUBLEARROW reduce production coqexpr -> TILDE coqexpr 
-- On COLONEQUAL reduce production coqexpr -> TILDE coqexpr 
-- On CLOSE reduce production coqexpr -> TILDE coqexpr 
-- On BYDEF reduce production coqexpr -> TILDE coqexpr 
-- On BY reduce production coqexpr -> TILDE coqexpr 
-- On BACKSLASHSLASH reduce production coqexpr -> TILDE coqexpr 
-- On ARROW reduce production coqexpr -> TILDE coqexpr 

State 66:
coqexpr -> coqexpr . ARROW coqexpr [ SLASHBACKSLASH DOUBLEARROW COLONEQUAL BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . DOUBLEARROW coqexpr [ SLASHBACKSLASH DOUBLEARROW COLONEQUAL BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . SLASHBACKSLASH coqexpr [ SLASHBACKSLASH DOUBLEARROW COLONEQUAL BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . BACKSLASHSLASH coqexpr [ SLASHBACKSLASH DOUBLEARROW COLONEQUAL BACKSLASHSLASH ARROW ]
coqfile -> LOCAL IDENT COLON coqexpr . COLONEQUAL TOBE coqexpr coq_hyp_def_list QED EOF [ # ]
-- On SLASHBACKSLASH shift to state 21
-- On DOUBLEARROW shift to state 24
-- On COLONEQUAL shift to state 67
-- On BACKSLASHSLASH shift to state 26
-- On ARROW shift to state 28

State 67:
coqfile -> LOCAL IDENT COLON coqexpr COLONEQUAL . TOBE coqexpr coq_hyp_def_list QED EOF [ # ]
-- On TOBE shift to state 68

State 68:
coqfile -> LOCAL IDENT COLON coqexpr COLONEQUAL TOBE . coqexpr coq_hyp_def_list QED EOF [ # ]
-- On TILDE shift to state 4
-- On OPEN shift to state 5
-- On LET shift to state 7
-- On LBRACKET shift to state 10
-- On IF shift to state 13
-- On IDENT shift to state 14
-- On FORALL shift to state 15
-- On coqexpr shift to state 69
-- On coqapplication shift to state 23

State 69:
coqexpr -> coqexpr . ARROW coqexpr [ SLASHBACKSLASH QED DOUBLEARROW BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . DOUBLEARROW coqexpr [ SLASHBACKSLASH QED DOUBLEARROW BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . SLASHBACKSLASH coqexpr [ SLASHBACKSLASH QED DOUBLEARROW BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . BACKSLASHSLASH coqexpr [ SLASHBACKSLASH QED DOUBLEARROW BYDEF BY BACKSLASHSLASH ARROW ]
coqfile -> LOCAL IDENT COLON coqexpr COLONEQUAL TOBE coqexpr . coq_hyp_def_list QED EOF [ # ]
-- On SLASHBACKSLASH shift to state 21
-- On DOUBLEARROW shift to state 24
-- On BYDEF shift to state 70
-- On BY shift to state 92
-- On BACKSLASHSLASH shift to state 26
-- On ARROW shift to state 28
-- On coq_hyp_def_list shift to state 103
-- On QED reduce production coq_hyp_def_list -> 

State 70:
coq_hyp_def_list -> BYDEF . coqdef_list coq_hyp_def_list [ QED ENDPROOF ]
-- On STRING shift to state 71
-- On IDENT shift to state 72
-- On id_or_coqexpr shift to state 73
-- On coqdef_list shift to state 91
-- On coqdef shift to state 101
-- On QED reduce production coqdef_list -> 
-- On ENDPROOF reduce production coqdef_list -> 
-- On BYDEF reduce production coqdef_list -> 
-- On BY reduce production coqdef_list -> 

State 71:
id_or_coqexpr -> STRING . [ COLONEQUAL COLON ]
-- On COLONEQUAL reduce production id_or_coqexpr -> STRING 
-- On COLON reduce production id_or_coqexpr -> STRING 

State 72:
id_or_coqexpr -> IDENT . [ COLONEQUAL COLON ]
-- On COLONEQUAL reduce production id_or_coqexpr -> IDENT 
-- On COLON reduce production id_or_coqexpr -> IDENT 

State 73:
coqdef -> id_or_coqexpr . COLONEQUAL coqparam_expr [ STRING QED IDENT ENDPROOF BYDEF BY ]
-- On COLONEQUAL shift to state 74

State 74:
coqdef -> id_or_coqexpr COLONEQUAL . coqparam_expr [ STRING QED IDENT ENDPROOF BYDEF BY ]
-- On TILDE shift to state 4
-- On OPEN shift to state 5
-- On LET shift to state 7
-- On LBRACKET shift to state 75
-- On IF shift to state 13
-- On IDENT shift to state 14
-- On FUN shift to state 80
-- On FORALL shift to state 15
-- On coqparam_expr shift to state 90
-- On coqexpr shift to state 88
-- On coqapplication shift to state 23

State 75:
coqexpr -> LBRACKET . IDENT COLONEQUAL coqexpr RBRACKET coqexpr [ STRING SLASHBACKSLASH QED IDENT ENDPROOF DOUBLEARROW BYDEF BY BACKSLASHSLASH ARROW ]
coqparam_expr -> LBRACKET . IDENT COLON IDENT RBRACKET coqparam_expr [ STRING QED IDENT ENDPROOF BYDEF BY ]
-- On IDENT shift to state 76

State 76:
coqexpr -> LBRACKET IDENT . COLONEQUAL coqexpr RBRACKET coqexpr [ STRING SLASHBACKSLASH QED IDENT ENDPROOF DOUBLEARROW BYDEF BY BACKSLASHSLASH ARROW ]
coqparam_expr -> LBRACKET IDENT . COLON IDENT RBRACKET coqparam_expr [ STRING QED IDENT ENDPROOF BYDEF BY ]
-- On COLONEQUAL shift to state 12
-- On COLON shift to state 77

State 77:
coqparam_expr -> LBRACKET IDENT COLON . IDENT RBRACKET coqparam_expr [ STRING QED IDENT ENDPROOF BYDEF BY ]
-- On IDENT shift to state 78

State 78:
coqparam_expr -> LBRACKET IDENT COLON IDENT . RBRACKET coqparam_expr [ STRING QED IDENT ENDPROOF BYDEF BY ]
-- On RBRACKET shift to state 79

State 79:
coqparam_expr -> LBRACKET IDENT COLON IDENT RBRACKET . coqparam_expr [ STRING QED IDENT ENDPROOF BYDEF BY ]
-- On TILDE shift to state 4
-- On OPEN shift to state 5
-- On LET shift to state 7
-- On LBRACKET shift to state 75
-- On IF shift to state 13
-- On IDENT shift to state 14
-- On FUN shift to state 80
-- On FORALL shift to state 15
-- On coqparam_expr shift to state 89
-- On coqexpr shift to state 88
-- On coqapplication shift to state 23

State 80:
coqparam_expr -> FUN . OPEN IDENT COLON IDENT CLOSE FUNARROW coqparam_expr [ STRING QED IDENT ENDPROOF BYDEF BY ]
-- On OPEN shift to state 81

State 81:
coqparam_expr -> FUN OPEN . IDENT COLON IDENT CLOSE FUNARROW coqparam_expr [ STRING QED IDENT ENDPROOF BYDEF BY ]
-- On IDENT shift to state 82

State 82:
coqparam_expr -> FUN OPEN IDENT . COLON IDENT CLOSE FUNARROW coqparam_expr [ STRING QED IDENT ENDPROOF BYDEF BY ]
-- On COLON shift to state 83

State 83:
coqparam_expr -> FUN OPEN IDENT COLON . IDENT CLOSE FUNARROW coqparam_expr [ STRING QED IDENT ENDPROOF BYDEF BY ]
-- On IDENT shift to state 84

State 84:
coqparam_expr -> FUN OPEN IDENT COLON IDENT . CLOSE FUNARROW coqparam_expr [ STRING QED IDENT ENDPROOF BYDEF BY ]
-- On CLOSE shift to state 85

State 85:
coqparam_expr -> FUN OPEN IDENT COLON IDENT CLOSE . FUNARROW coqparam_expr [ STRING QED IDENT ENDPROOF BYDEF BY ]
-- On FUNARROW shift to state 86

State 86:
coqparam_expr -> FUN OPEN IDENT COLON IDENT CLOSE FUNARROW . coqparam_expr [ STRING QED IDENT ENDPROOF BYDEF BY ]
-- On TILDE shift to state 4
-- On OPEN shift to state 5
-- On LET shift to state 7
-- On LBRACKET shift to state 75
-- On IF shift to state 13
-- On IDENT shift to state 14
-- On FUN shift to state 80
-- On FORALL shift to state 15
-- On coqparam_expr shift to state 87
-- On coqexpr shift to state 88
-- On coqapplication shift to state 23

State 87:
coqparam_expr -> FUN OPEN IDENT COLON IDENT CLOSE FUNARROW coqparam_expr . [ STRING QED IDENT ENDPROOF BYDEF BY ]
-- On STRING reduce production coqparam_expr -> FUN OPEN IDENT COLON IDENT CLOSE FUNARROW coqparam_expr 
-- On QED reduce production coqparam_expr -> FUN OPEN IDENT COLON IDENT CLOSE FUNARROW coqparam_expr 
-- On IDENT reduce production coqparam_expr -> FUN OPEN IDENT COLON IDENT CLOSE FUNARROW coqparam_expr 
-- On ENDPROOF reduce production coqparam_expr -> FUN OPEN IDENT COLON IDENT CLOSE FUNARROW coqparam_expr 
-- On BYDEF reduce production coqparam_expr -> FUN OPEN IDENT COLON IDENT CLOSE FUNARROW coqparam_expr 
-- On BY reduce production coqparam_expr -> FUN OPEN IDENT COLON IDENT CLOSE FUNARROW coqparam_expr 

State 88:
coqexpr -> coqexpr . ARROW coqexpr [ STRING SLASHBACKSLASH QED IDENT ENDPROOF DOUBLEARROW BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . DOUBLEARROW coqexpr [ STRING SLASHBACKSLASH QED IDENT ENDPROOF DOUBLEARROW BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . SLASHBACKSLASH coqexpr [ STRING SLASHBACKSLASH QED IDENT ENDPROOF DOUBLEARROW BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . BACKSLASHSLASH coqexpr [ STRING SLASHBACKSLASH QED IDENT ENDPROOF DOUBLEARROW BYDEF BY BACKSLASHSLASH ARROW ]
coqparam_expr -> coqexpr . [ STRING QED IDENT ENDPROOF BYDEF BY ]
-- On SLASHBACKSLASH shift to state 21
-- On DOUBLEARROW shift to state 24
-- On BACKSLASHSLASH shift to state 26
-- On ARROW shift to state 28
-- On STRING reduce production coqparam_expr -> coqexpr 
-- On QED reduce production coqparam_expr -> coqexpr 
-- On IDENT reduce production coqparam_expr -> coqexpr 
-- On ENDPROOF reduce production coqparam_expr -> coqexpr 
-- On BYDEF reduce production coqparam_expr -> coqexpr 
-- On BY reduce production coqparam_expr -> coqexpr 

State 89:
coqparam_expr -> LBRACKET IDENT COLON IDENT RBRACKET coqparam_expr . [ STRING QED IDENT ENDPROOF BYDEF BY ]
-- On STRING reduce production coqparam_expr -> LBRACKET IDENT COLON IDENT RBRACKET coqparam_expr 
-- On QED reduce production coqparam_expr -> LBRACKET IDENT COLON IDENT RBRACKET coqparam_expr 
-- On IDENT reduce production coqparam_expr -> LBRACKET IDENT COLON IDENT RBRACKET coqparam_expr 
-- On ENDPROOF reduce production coqparam_expr -> LBRACKET IDENT COLON IDENT RBRACKET coqparam_expr 
-- On BYDEF reduce production coqparam_expr -> LBRACKET IDENT COLON IDENT RBRACKET coqparam_expr 
-- On BY reduce production coqparam_expr -> LBRACKET IDENT COLON IDENT RBRACKET coqparam_expr 

State 90:
coqdef -> id_or_coqexpr COLONEQUAL coqparam_expr . [ STRING QED IDENT ENDPROOF BYDEF BY ]
-- On STRING reduce production coqdef -> id_or_coqexpr COLONEQUAL coqparam_expr 
-- On QED reduce production coqdef -> id_or_coqexpr COLONEQUAL coqparam_expr 
-- On IDENT reduce production coqdef -> id_or_coqexpr COLONEQUAL coqparam_expr 
-- On ENDPROOF reduce production coqdef -> id_or_coqexpr COLONEQUAL coqparam_expr 
-- On BYDEF reduce production coqdef -> id_or_coqexpr COLONEQUAL coqparam_expr 
-- On BY reduce production coqdef -> id_or_coqexpr COLONEQUAL coqparam_expr 

State 91:
coq_hyp_def_list -> BYDEF coqdef_list . coq_hyp_def_list [ QED ENDPROOF ]
-- On BYDEF shift to state 70
-- On BY shift to state 92
-- On coq_hyp_def_list shift to state 100
-- On QED reduce production coq_hyp_def_list -> 
-- On ENDPROOF reduce production coq_hyp_def_list -> 

State 92:
coq_hyp_def_list -> BY . coqhyp_list coq_hyp_def_list [ QED ENDPROOF ]
-- On STRING shift to state 71
-- On IDENT shift to state 72
-- On id_or_coqexpr shift to state 93
-- On coqhyp_list shift to state 96
-- On coqhyp shift to state 98
-- On QED reduce production coqhyp_list -> 
-- On ENDPROOF reduce production coqhyp_list -> 
-- On BYDEF reduce production coqhyp_list -> 
-- On BY reduce production coqhyp_list -> 

State 93:
coqhyp -> id_or_coqexpr . COLON coqexpr [ STRING QED IDENT ENDPROOF BYDEF BY ]
-- On COLON shift to state 94

State 94:
coqhyp -> id_or_coqexpr COLON . coqexpr [ STRING QED IDENT ENDPROOF BYDEF BY ]
-- On TILDE shift to state 4
-- On OPEN shift to state 5
-- On LET shift to state 7
-- On LBRACKET shift to state 10
-- On IF shift to state 13
-- On IDENT shift to state 14
-- On FORALL shift to state 15
-- On coqexpr shift to state 95
-- On coqapplication shift to state 23

State 95:
coqexpr -> coqexpr . ARROW coqexpr [ STRING SLASHBACKSLASH QED IDENT ENDPROOF DOUBLEARROW BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . DOUBLEARROW coqexpr [ STRING SLASHBACKSLASH QED IDENT ENDPROOF DOUBLEARROW BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . SLASHBACKSLASH coqexpr [ STRING SLASHBACKSLASH QED IDENT ENDPROOF DOUBLEARROW BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . BACKSLASHSLASH coqexpr [ STRING SLASHBACKSLASH QED IDENT ENDPROOF DOUBLEARROW BYDEF BY BACKSLASHSLASH ARROW ]
coqhyp -> id_or_coqexpr COLON coqexpr . [ STRING QED IDENT ENDPROOF BYDEF BY ]
-- On SLASHBACKSLASH shift to state 21
-- On DOUBLEARROW shift to state 24
-- On BACKSLASHSLASH shift to state 26
-- On ARROW shift to state 28
-- On STRING reduce production coqhyp -> id_or_coqexpr COLON coqexpr 
-- On QED reduce production coqhyp -> id_or_coqexpr COLON coqexpr 
-- On IDENT reduce production coqhyp -> id_or_coqexpr COLON coqexpr 
-- On ENDPROOF reduce production coqhyp -> id_or_coqexpr COLON coqexpr 
-- On BYDEF reduce production coqhyp -> id_or_coqexpr COLON coqexpr 
-- On BY reduce production coqhyp -> id_or_coqexpr COLON coqexpr 

State 96:
coq_hyp_def_list -> BY coqhyp_list . coq_hyp_def_list [ QED ENDPROOF ]
-- On BYDEF shift to state 70
-- On BY shift to state 92
-- On coq_hyp_def_list shift to state 97
-- On QED reduce production coq_hyp_def_list -> 
-- On ENDPROOF reduce production coq_hyp_def_list -> 

State 97:
coq_hyp_def_list -> BY coqhyp_list coq_hyp_def_list . [ QED ENDPROOF ]
-- On QED reduce production coq_hyp_def_list -> BY coqhyp_list coq_hyp_def_list 
-- On ENDPROOF reduce production coq_hyp_def_list -> BY coqhyp_list coq_hyp_def_list 

State 98:
coqhyp_list -> coqhyp . coqhyp_list [ QED ENDPROOF BYDEF BY ]
-- On STRING shift to state 71
-- On IDENT shift to state 72
-- On id_or_coqexpr shift to state 93
-- On coqhyp_list shift to state 99
-- On coqhyp shift to state 98
-- On QED reduce production coqhyp_list -> 
-- On ENDPROOF reduce production coqhyp_list -> 
-- On BYDEF reduce production coqhyp_list -> 
-- On BY reduce production coqhyp_list -> 

State 99:
coqhyp_list -> coqhyp coqhyp_list . [ QED ENDPROOF BYDEF BY ]
-- On QED reduce production coqhyp_list -> coqhyp coqhyp_list 
-- On ENDPROOF reduce production coqhyp_list -> coqhyp coqhyp_list 
-- On BYDEF reduce production coqhyp_list -> coqhyp coqhyp_list 
-- On BY reduce production coqhyp_list -> coqhyp coqhyp_list 

State 100:
coq_hyp_def_list -> BYDEF coqdef_list coq_hyp_def_list . [ QED ENDPROOF ]
-- On QED reduce production coq_hyp_def_list -> BYDEF coqdef_list coq_hyp_def_list 
-- On ENDPROOF reduce production coq_hyp_def_list -> BYDEF coqdef_list coq_hyp_def_list 

State 101:
coqdef_list -> coqdef . coqdef_list [ QED ENDPROOF BYDEF BY ]
-- On STRING shift to state 71
-- On IDENT shift to state 72
-- On id_or_coqexpr shift to state 73
-- On coqdef_list shift to state 102
-- On coqdef shift to state 101
-- On QED reduce production coqdef_list -> 
-- On ENDPROOF reduce production coqdef_list -> 
-- On BYDEF reduce production coqdef_list -> 
-- On BY reduce production coqdef_list -> 

State 102:
coqdef_list -> coqdef coqdef_list . [ QED ENDPROOF BYDEF BY ]
-- On QED reduce production coqdef_list -> coqdef coqdef_list 
-- On ENDPROOF reduce production coqdef_list -> coqdef coqdef_list 
-- On BYDEF reduce production coqdef_list -> coqdef coqdef_list 
-- On BY reduce production coqdef_list -> coqdef coqdef_list 

State 103:
coqfile -> LOCAL IDENT COLON coqexpr COLONEQUAL TOBE coqexpr coq_hyp_def_list . QED EOF [ # ]
-- On QED shift to state 104

State 104:
coqfile -> LOCAL IDENT COLON coqexpr COLONEQUAL TOBE coqexpr coq_hyp_def_list QED . EOF [ # ]
-- On EOF shift to state 105

State 105:
coqfile -> LOCAL IDENT COLON coqexpr COLONEQUAL TOBE coqexpr coq_hyp_def_list QED EOF . [ # ]
-- On # reduce production coqfile -> LOCAL IDENT COLON coqexpr COLONEQUAL TOBE coqexpr coq_hyp_def_list QED EOF 

State 106:
coqfile -> BEGINPROOF . coqexpr coq_hyp_def_list ENDPROOF EOF [ # ]
-- On TILDE shift to state 4
-- On OPEN shift to state 5
-- On LET shift to state 7
-- On LBRACKET shift to state 10
-- On IF shift to state 13
-- On IDENT shift to state 14
-- On FORALL shift to state 15
-- On coqexpr shift to state 107
-- On coqapplication shift to state 23

State 107:
coqexpr -> coqexpr . ARROW coqexpr [ SLASHBACKSLASH ENDPROOF DOUBLEARROW BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . DOUBLEARROW coqexpr [ SLASHBACKSLASH ENDPROOF DOUBLEARROW BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . SLASHBACKSLASH coqexpr [ SLASHBACKSLASH ENDPROOF DOUBLEARROW BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . BACKSLASHSLASH coqexpr [ SLASHBACKSLASH ENDPROOF DOUBLEARROW BYDEF BY BACKSLASHSLASH ARROW ]
coqfile -> BEGINPROOF coqexpr . coq_hyp_def_list ENDPROOF EOF [ # ]
-- On SLASHBACKSLASH shift to state 21
-- On DOUBLEARROW shift to state 24
-- On BYDEF shift to state 70
-- On BY shift to state 92
-- On BACKSLASHSLASH shift to state 26
-- On ARROW shift to state 28
-- On coq_hyp_def_list shift to state 108
-- On ENDPROOF reduce production coq_hyp_def_list -> 

State 108:
coqfile -> BEGINPROOF coqexpr coq_hyp_def_list . ENDPROOF EOF [ # ]
-- On ENDPROOF shift to state 109

State 109:
coqfile -> BEGINPROOF coqexpr coq_hyp_def_list ENDPROOF . EOF [ # ]
-- On EOF shift to state 110

State 110:
coqfile -> BEGINPROOF coqexpr coq_hyp_def_list ENDPROOF EOF . [ # ]
-- On # reduce production coqfile -> BEGINPROOF coqexpr coq_hyp_def_list ENDPROOF EOF 

State 111:
coqfile' -> coqfile . [ # ]
-- On # accept coqfile

State 112:
phrase' -> . phrase [ # ]
-- On INT shift to state 113
-- On GOAL shift to state 114
-- On DEF shift to state 214
-- On phrase shift to state 222
-- On int_opt shift to state 223
-- On TRUE reduce production int_opt -> 
-- On STRING reduce production int_opt -> 
-- On OPEN reduce production int_opt -> 
-- On IDENT reduce production int_opt -> 
-- On FALSE reduce production int_opt -> 

State 113:
int_opt -> INT . [ TRUE STRING OPEN IDENT FALSE ]
-- On TRUE reduce production int_opt -> INT 
-- On STRING reduce production int_opt -> INT 
-- On OPEN reduce production int_opt -> INT 
-- On IDENT reduce production int_opt -> INT 
-- On FALSE reduce production int_opt -> INT 

State 114:
phrase -> GOAL . expr [ # ]
-- On TRUE shift to state 115
-- On OPEN shift to state 116
-- On IDENT shift to state 211
-- On FALSE shift to state 212
-- On expr shift to state 213

State 115:
expr -> TRUE . [ # ]
-- On # reduce production expr -> TRUE 

State 116:
expr -> OPEN . IDENT expr_list CLOSE [ # ]
expr -> OPEN . NOT expr CLOSE [ # ]
expr -> OPEN . AND expr expr_list CLOSE [ # ]
expr -> OPEN . OR expr expr_list CLOSE [ # ]
expr -> OPEN . IMPLY expr expr_list CLOSE [ # ]
expr -> OPEN . EQUIV expr expr_list CLOSE [ # ]
expr -> OPEN . TRUE CLOSE [ # ]
expr -> OPEN . FALSE CLOSE [ # ]
expr -> OPEN . ALL lambda CLOSE [ # ]
expr -> OPEN . EX lambda CLOSE [ # ]
expr -> OPEN . TAU lambda CLOSE [ # ]
expr -> OPEN . EQUAL expr expr CLOSE [ # ]
-- On TRUE shift to state 117
-- On TAU shift to state 119
-- On OR shift to state 177
-- On NOT shift to state 181
-- On IMPLY shift to state 184
-- On IDENT shift to state 188
-- On FALSE shift to state 191
-- On EX shift to state 193
-- On EQUIV shift to state 196
-- On EQUAL shift to state 200
-- On AND shift to state 204
-- On ALL shift to state 208

State 117:
expr -> OPEN TRUE . CLOSE [ # ]
-- On CLOSE shift to state 118

State 118:
expr -> OPEN TRUE CLOSE . [ # ]
-- On # reduce production expr -> OPEN TRUE CLOSE 

State 119:
expr -> OPEN TAU . lambda CLOSE [ # ]
-- On OPEN shift to state 120
-- On lambda shift to state 175

State 120:
lambda -> OPEN . OPEN IDENT STRING CLOSE expr CLOSE [ CLOSE ]
lambda -> OPEN . OPEN IDENT CLOSE expr CLOSE [ CLOSE ]
-- On OPEN shift to state 121

State 121:
lambda -> OPEN OPEN . IDENT STRING CLOSE expr CLOSE [ CLOSE ]
lambda -> OPEN OPEN . IDENT CLOSE expr CLOSE [ CLOSE ]
-- On IDENT shift to state 122

State 122:
lambda -> OPEN OPEN IDENT . STRING CLOSE expr CLOSE [ CLOSE ]
lambda -> OPEN OPEN IDENT . CLOSE expr CLOSE [ CLOSE ]
-- On STRING shift to state 123
-- On CLOSE shift to state 172

State 123:
lambda -> OPEN OPEN IDENT STRING . CLOSE expr CLOSE [ CLOSE ]
-- On CLOSE shift to state 124

State 124:
lambda -> OPEN OPEN IDENT STRING CLOSE . expr CLOSE [ CLOSE ]
-- On TRUE shift to state 125
-- On OPEN shift to state 126
-- On IDENT shift to state 133
-- On FALSE shift to state 134
-- On expr shift to state 170

State 125:
expr -> TRUE . [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
-- On TRUE reduce production expr -> TRUE 
-- On STRING reduce production expr -> TRUE 
-- On OPEN reduce production expr -> TRUE 
-- On INT reduce production expr -> TRUE 
-- On IDENT reduce production expr -> TRUE 
-- On GOAL reduce production expr -> TRUE 
-- On FALSE reduce production expr -> TRUE 
-- On EOF reduce production expr -> TRUE 
-- On DEF reduce production expr -> TRUE 
-- On CLOSE reduce production expr -> TRUE 

State 126:
expr -> OPEN . IDENT expr_list CLOSE [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
expr -> OPEN . NOT expr CLOSE [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
expr -> OPEN . AND expr expr_list CLOSE [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
expr -> OPEN . OR expr expr_list CLOSE [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
expr -> OPEN . IMPLY expr expr_list CLOSE [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
expr -> OPEN . EQUIV expr expr_list CLOSE [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
expr -> OPEN . TRUE CLOSE [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
expr -> OPEN . FALSE CLOSE [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
expr -> OPEN . ALL lambda CLOSE [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
expr -> OPEN . EX lambda CLOSE [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
expr -> OPEN . TAU lambda CLOSE [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
expr -> OPEN . EQUAL expr expr CLOSE [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
-- On TRUE shift to state 127
-- On TAU shift to state 129
-- On OR shift to state 132
-- On NOT shift to state 140
-- On IMPLY shift to state 143
-- On IDENT shift to state 147
-- On FALSE shift to state 150
-- On EX shift to state 152
-- On EQUIV shift to state 155
-- On EQUAL shift to state 159
-- On AND shift to state 163
-- On ALL shift to state 167

State 127:
expr -> OPEN TRUE . CLOSE [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
-- On CLOSE shift to state 128

State 128:
expr -> OPEN TRUE CLOSE . [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
-- On TRUE reduce production expr -> OPEN TRUE CLOSE 
-- On STRING reduce production expr -> OPEN TRUE CLOSE 
-- On OPEN reduce production expr -> OPEN TRUE CLOSE 
-- On INT reduce production expr -> OPEN TRUE CLOSE 
-- On IDENT reduce production expr -> OPEN TRUE CLOSE 
-- On GOAL reduce production expr -> OPEN TRUE CLOSE 
-- On FALSE reduce production expr -> OPEN TRUE CLOSE 
-- On EOF reduce production expr -> OPEN TRUE CLOSE 
-- On DEF reduce production expr -> OPEN TRUE CLOSE 
-- On CLOSE reduce production expr -> OPEN TRUE CLOSE 

State 129:
expr -> OPEN TAU . lambda CLOSE [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
-- On OPEN shift to state 120
-- On lambda shift to state 130

State 130:
expr -> OPEN TAU lambda . CLOSE [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
-- On CLOSE shift to state 131

State 131:
expr -> OPEN TAU lambda CLOSE . [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
-- On TRUE reduce production expr -> OPEN TAU lambda CLOSE 
-- On STRING reduce production expr -> OPEN TAU lambda CLOSE 
-- On OPEN reduce production expr -> OPEN TAU lambda CLOSE 
-- On INT reduce production expr -> OPEN TAU lambda CLOSE 
-- On IDENT reduce production expr -> OPEN TAU lambda CLOSE 
-- On GOAL reduce production expr -> OPEN TAU lambda CLOSE 
-- On FALSE reduce production expr -> OPEN TAU lambda CLOSE 
-- On EOF reduce production expr -> OPEN TAU lambda CLOSE 
-- On DEF reduce production expr -> OPEN TAU lambda CLOSE 
-- On CLOSE reduce production expr -> OPEN TAU lambda CLOSE 

State 132:
expr -> OPEN OR . expr expr_list CLOSE [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
-- On TRUE shift to state 125
-- On OPEN shift to state 126
-- On IDENT shift to state 133
-- On FALSE shift to state 134
-- On expr shift to state 135

State 133:
expr -> IDENT . [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
-- On TRUE reduce production expr -> IDENT 
-- On STRING reduce production expr -> IDENT 
-- On OPEN reduce production expr -> IDENT 
-- On INT reduce production expr -> IDENT 
-- On IDENT reduce production expr -> IDENT 
-- On GOAL reduce production expr -> IDENT 
-- On FALSE reduce production expr -> IDENT 
-- On EOF reduce production expr -> IDENT 
-- On DEF reduce production expr -> IDENT 
-- On CLOSE reduce production expr -> IDENT 

State 134:
expr -> FALSE . [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
-- On TRUE reduce production expr -> FALSE 
-- On STRING reduce production expr -> FALSE 
-- On OPEN reduce production expr -> FALSE 
-- On INT reduce production expr -> FALSE 
-- On IDENT reduce production expr -> FALSE 
-- On GOAL reduce production expr -> FALSE 
-- On FALSE reduce production expr -> FALSE 
-- On EOF reduce production expr -> FALSE 
-- On DEF reduce production expr -> FALSE 
-- On CLOSE reduce production expr -> FALSE 

State 135:
expr -> OPEN OR expr . expr_list CLOSE [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
-- On TRUE shift to state 125
-- On OPEN shift to state 126
-- On IDENT shift to state 133
-- On FALSE shift to state 134
-- On expr_list shift to state 136
-- On expr shift to state 138
-- On CLOSE reduce production expr_list -> 

State 136:
expr -> OPEN OR expr expr_list . CLOSE [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
-- On CLOSE shift to state 137

State 137:
expr -> OPEN OR expr expr_list CLOSE . [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
-- On TRUE reduce production expr -> OPEN OR expr expr_list CLOSE 
-- On STRING reduce production expr -> OPEN OR expr expr_list CLOSE 
-- On OPEN reduce production expr -> OPEN OR expr expr_list CLOSE 
-- On INT reduce production expr -> OPEN OR expr expr_list CLOSE 
-- On IDENT reduce production expr -> OPEN OR expr expr_list CLOSE 
-- On GOAL reduce production expr -> OPEN OR expr expr_list CLOSE 
-- On FALSE reduce production expr -> OPEN OR expr expr_list CLOSE 
-- On EOF reduce production expr -> OPEN OR expr expr_list CLOSE 
-- On DEF reduce production expr -> OPEN OR expr expr_list CLOSE 
-- On CLOSE reduce production expr -> OPEN OR expr expr_list CLOSE 

State 138:
expr_list -> expr . expr_list [ CLOSE ]
-- On TRUE shift to state 125
-- On OPEN shift to state 126
-- On IDENT shift to state 133
-- On FALSE shift to state 134
-- On expr_list shift to state 139
-- On expr shift to state 138
-- On CLOSE reduce production expr_list -> 

State 139:
expr_list -> expr expr_list . [ CLOSE ]
-- On CLOSE reduce production expr_list -> expr expr_list 

State 140:
expr -> OPEN NOT . expr CLOSE [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
-- On TRUE shift to state 125
-- On OPEN shift to state 126
-- On IDENT shift to state 133
-- On FALSE shift to state 134
-- On expr shift to state 141

State 141:
expr -> OPEN NOT expr . CLOSE [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
-- On CLOSE shift to state 142

State 142:
expr -> OPEN NOT expr CLOSE . [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
-- On TRUE reduce production expr -> OPEN NOT expr CLOSE 
-- On STRING reduce production expr -> OPEN NOT expr CLOSE 
-- On OPEN reduce production expr -> OPEN NOT expr CLOSE 
-- On INT reduce production expr -> OPEN NOT expr CLOSE 
-- On IDENT reduce production expr -> OPEN NOT expr CLOSE 
-- On GOAL reduce production expr -> OPEN NOT expr CLOSE 
-- On FALSE reduce production expr -> OPEN NOT expr CLOSE 
-- On EOF reduce production expr -> OPEN NOT expr CLOSE 
-- On DEF reduce production expr -> OPEN NOT expr CLOSE 
-- On CLOSE reduce production expr -> OPEN NOT expr CLOSE 

State 143:
expr -> OPEN IMPLY . expr expr_list CLOSE [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
-- On TRUE shift to state 125
-- On OPEN shift to state 126
-- On IDENT shift to state 133
-- On FALSE shift to state 134
-- On expr shift to state 144

State 144:
expr -> OPEN IMPLY expr . expr_list CLOSE [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
-- On TRUE shift to state 125
-- On OPEN shift to state 126
-- On IDENT shift to state 133
-- On FALSE shift to state 134
-- On expr_list shift to state 145
-- On expr shift to state 138
-- On CLOSE reduce production expr_list -> 

State 145:
expr -> OPEN IMPLY expr expr_list . CLOSE [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
-- On CLOSE shift to state 146

State 146:
expr -> OPEN IMPLY expr expr_list CLOSE . [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
-- On TRUE reduce production expr -> OPEN IMPLY expr expr_list CLOSE 
-- On STRING reduce production expr -> OPEN IMPLY expr expr_list CLOSE 
-- On OPEN reduce production expr -> OPEN IMPLY expr expr_list CLOSE 
-- On INT reduce production expr -> OPEN IMPLY expr expr_list CLOSE 
-- On IDENT reduce production expr -> OPEN IMPLY expr expr_list CLOSE 
-- On GOAL reduce production expr -> OPEN IMPLY expr expr_list CLOSE 
-- On FALSE reduce production expr -> OPEN IMPLY expr expr_list CLOSE 
-- On EOF reduce production expr -> OPEN IMPLY expr expr_list CLOSE 
-- On DEF reduce production expr -> OPEN IMPLY expr expr_list CLOSE 
-- On CLOSE reduce production expr -> OPEN IMPLY expr expr_list CLOSE 

State 147:
expr -> OPEN IDENT . expr_list CLOSE [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
-- On TRUE shift to state 125
-- On OPEN shift to state 126
-- On IDENT shift to state 133
-- On FALSE shift to state 134
-- On expr_list shift to state 148
-- On expr shift to state 138
-- On CLOSE reduce production expr_list -> 

State 148:
expr -> OPEN IDENT expr_list . CLOSE [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
-- On CLOSE shift to state 149

State 149:
expr -> OPEN IDENT expr_list CLOSE . [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
-- On TRUE reduce production expr -> OPEN IDENT expr_list CLOSE 
-- On STRING reduce production expr -> OPEN IDENT expr_list CLOSE 
-- On OPEN reduce production expr -> OPEN IDENT expr_list CLOSE 
-- On INT reduce production expr -> OPEN IDENT expr_list CLOSE 
-- On IDENT reduce production expr -> OPEN IDENT expr_list CLOSE 
-- On GOAL reduce production expr -> OPEN IDENT expr_list CLOSE 
-- On FALSE reduce production expr -> OPEN IDENT expr_list CLOSE 
-- On EOF reduce production expr -> OPEN IDENT expr_list CLOSE 
-- On DEF reduce production expr -> OPEN IDENT expr_list CLOSE 
-- On CLOSE reduce production expr -> OPEN IDENT expr_list CLOSE 

State 150:
expr -> OPEN FALSE . CLOSE [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
-- On CLOSE shift to state 151

State 151:
expr -> OPEN FALSE CLOSE . [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
-- On TRUE reduce production expr -> OPEN FALSE CLOSE 
-- On STRING reduce production expr -> OPEN FALSE CLOSE 
-- On OPEN reduce production expr -> OPEN FALSE CLOSE 
-- On INT reduce production expr -> OPEN FALSE CLOSE 
-- On IDENT reduce production expr -> OPEN FALSE CLOSE 
-- On GOAL reduce production expr -> OPEN FALSE CLOSE 
-- On FALSE reduce production expr -> OPEN FALSE CLOSE 
-- On EOF reduce production expr -> OPEN FALSE CLOSE 
-- On DEF reduce production expr -> OPEN FALSE CLOSE 
-- On CLOSE reduce production expr -> OPEN FALSE CLOSE 

State 152:
expr -> OPEN EX . lambda CLOSE [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
-- On OPEN shift to state 120
-- On lambda shift to state 153

State 153:
expr -> OPEN EX lambda . CLOSE [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
-- On CLOSE shift to state 154

State 154:
expr -> OPEN EX lambda CLOSE . [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
-- On TRUE reduce production expr -> OPEN EX lambda CLOSE 
-- On STRING reduce production expr -> OPEN EX lambda CLOSE 
-- On OPEN reduce production expr -> OPEN EX lambda CLOSE 
-- On INT reduce production expr -> OPEN EX lambda CLOSE 
-- On IDENT reduce production expr -> OPEN EX lambda CLOSE 
-- On GOAL reduce production expr -> OPEN EX lambda CLOSE 
-- On FALSE reduce production expr -> OPEN EX lambda CLOSE 
-- On EOF reduce production expr -> OPEN EX lambda CLOSE 
-- On DEF reduce production expr -> OPEN EX lambda CLOSE 
-- On CLOSE reduce production expr -> OPEN EX lambda CLOSE 

State 155:
expr -> OPEN EQUIV . expr expr_list CLOSE [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
-- On TRUE shift to state 125
-- On OPEN shift to state 126
-- On IDENT shift to state 133
-- On FALSE shift to state 134
-- On expr shift to state 156

State 156:
expr -> OPEN EQUIV expr . expr_list CLOSE [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
-- On TRUE shift to state 125
-- On OPEN shift to state 126
-- On IDENT shift to state 133
-- On FALSE shift to state 134
-- On expr_list shift to state 157
-- On expr shift to state 138
-- On CLOSE reduce production expr_list -> 

State 157:
expr -> OPEN EQUIV expr expr_list . CLOSE [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
-- On CLOSE shift to state 158

State 158:
expr -> OPEN EQUIV expr expr_list CLOSE . [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
-- On TRUE reduce production expr -> OPEN EQUIV expr expr_list CLOSE 
-- On STRING reduce production expr -> OPEN EQUIV expr expr_list CLOSE 
-- On OPEN reduce production expr -> OPEN EQUIV expr expr_list CLOSE 
-- On INT reduce production expr -> OPEN EQUIV expr expr_list CLOSE 
-- On IDENT reduce production expr -> OPEN EQUIV expr expr_list CLOSE 
-- On GOAL reduce production expr -> OPEN EQUIV expr expr_list CLOSE 
-- On FALSE reduce production expr -> OPEN EQUIV expr expr_list CLOSE 
-- On EOF reduce production expr -> OPEN EQUIV expr expr_list CLOSE 
-- On DEF reduce production expr -> OPEN EQUIV expr expr_list CLOSE 
-- On CLOSE reduce production expr -> OPEN EQUIV expr expr_list CLOSE 

State 159:
expr -> OPEN EQUAL . expr expr CLOSE [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
-- On TRUE shift to state 125
-- On OPEN shift to state 126
-- On IDENT shift to state 133
-- On FALSE shift to state 134
-- On expr shift to state 160

State 160:
expr -> OPEN EQUAL expr . expr CLOSE [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
-- On TRUE shift to state 125
-- On OPEN shift to state 126
-- On IDENT shift to state 133
-- On FALSE shift to state 134
-- On expr shift to state 161

State 161:
expr -> OPEN EQUAL expr expr . CLOSE [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
-- On CLOSE shift to state 162

State 162:
expr -> OPEN EQUAL expr expr CLOSE . [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
-- On TRUE reduce production expr -> OPEN EQUAL expr expr CLOSE 
-- On STRING reduce production expr -> OPEN EQUAL expr expr CLOSE 
-- On OPEN reduce production expr -> OPEN EQUAL expr expr CLOSE 
-- On INT reduce production expr -> OPEN EQUAL expr expr CLOSE 
-- On IDENT reduce production expr -> OPEN EQUAL expr expr CLOSE 
-- On GOAL reduce production expr -> OPEN EQUAL expr expr CLOSE 
-- On FALSE reduce production expr -> OPEN EQUAL expr expr CLOSE 
-- On EOF reduce production expr -> OPEN EQUAL expr expr CLOSE 
-- On DEF reduce production expr -> OPEN EQUAL expr expr CLOSE 
-- On CLOSE reduce production expr -> OPEN EQUAL expr expr CLOSE 

State 163:
expr -> OPEN AND . expr expr_list CLOSE [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
-- On TRUE shift to state 125
-- On OPEN shift to state 126
-- On IDENT shift to state 133
-- On FALSE shift to state 134
-- On expr shift to state 164

State 164:
expr -> OPEN AND expr . expr_list CLOSE [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
-- On TRUE shift to state 125
-- On OPEN shift to state 126
-- On IDENT shift to state 133
-- On FALSE shift to state 134
-- On expr_list shift to state 165
-- On expr shift to state 138
-- On CLOSE reduce production expr_list -> 

State 165:
expr -> OPEN AND expr expr_list . CLOSE [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
-- On CLOSE shift to state 166

State 166:
expr -> OPEN AND expr expr_list CLOSE . [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
-- On TRUE reduce production expr -> OPEN AND expr expr_list CLOSE 
-- On STRING reduce production expr -> OPEN AND expr expr_list CLOSE 
-- On OPEN reduce production expr -> OPEN AND expr expr_list CLOSE 
-- On INT reduce production expr -> OPEN AND expr expr_list CLOSE 
-- On IDENT reduce production expr -> OPEN AND expr expr_list CLOSE 
-- On GOAL reduce production expr -> OPEN AND expr expr_list CLOSE 
-- On FALSE reduce production expr -> OPEN AND expr expr_list CLOSE 
-- On EOF reduce production expr -> OPEN AND expr expr_list CLOSE 
-- On DEF reduce production expr -> OPEN AND expr expr_list CLOSE 
-- On CLOSE reduce production expr -> OPEN AND expr expr_list CLOSE 

State 167:
expr -> OPEN ALL . lambda CLOSE [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
-- On OPEN shift to state 120
-- On lambda shift to state 168

State 168:
expr -> OPEN ALL lambda . CLOSE [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
-- On CLOSE shift to state 169

State 169:
expr -> OPEN ALL lambda CLOSE . [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
-- On TRUE reduce production expr -> OPEN ALL lambda CLOSE 
-- On STRING reduce production expr -> OPEN ALL lambda CLOSE 
-- On OPEN reduce production expr -> OPEN ALL lambda CLOSE 
-- On INT reduce production expr -> OPEN ALL lambda CLOSE 
-- On IDENT reduce production expr -> OPEN ALL lambda CLOSE 
-- On GOAL reduce production expr -> OPEN ALL lambda CLOSE 
-- On FALSE reduce production expr -> OPEN ALL lambda CLOSE 
-- On EOF reduce production expr -> OPEN ALL lambda CLOSE 
-- On DEF reduce production expr -> OPEN ALL lambda CLOSE 
-- On CLOSE reduce production expr -> OPEN ALL lambda CLOSE 

State 170:
lambda -> OPEN OPEN IDENT STRING CLOSE expr . CLOSE [ CLOSE ]
-- On CLOSE shift to state 171

State 171:
lambda -> OPEN OPEN IDENT STRING CLOSE expr CLOSE . [ CLOSE ]
-- On CLOSE reduce production lambda -> OPEN OPEN IDENT STRING CLOSE expr CLOSE 

State 172:
lambda -> OPEN OPEN IDENT CLOSE . expr CLOSE [ CLOSE ]
-- On TRUE shift to state 125
-- On OPEN shift to state 126
-- On IDENT shift to state 133
-- On FALSE shift to state 134
-- On expr shift to state 173

State 173:
lambda -> OPEN OPEN IDENT CLOSE expr . CLOSE [ CLOSE ]
-- On CLOSE shift to state 174

State 174:
lambda -> OPEN OPEN IDENT CLOSE expr CLOSE . [ CLOSE ]
-- On CLOSE reduce production lambda -> OPEN OPEN IDENT CLOSE expr CLOSE 

State 175:
expr -> OPEN TAU lambda . CLOSE [ # ]
-- On CLOSE shift to state 176

State 176:
expr -> OPEN TAU lambda CLOSE . [ # ]
-- On # reduce production expr -> OPEN TAU lambda CLOSE 

State 177:
expr -> OPEN OR . expr expr_list CLOSE [ # ]
-- On TRUE shift to state 125
-- On OPEN shift to state 126
-- On IDENT shift to state 133
-- On FALSE shift to state 134
-- On expr shift to state 178

State 178:
expr -> OPEN OR expr . expr_list CLOSE [ # ]
-- On TRUE shift to state 125
-- On OPEN shift to state 126
-- On IDENT shift to state 133
-- On FALSE shift to state 134
-- On expr_list shift to state 179
-- On expr shift to state 138
-- On CLOSE reduce production expr_list -> 

State 179:
expr -> OPEN OR expr expr_list . CLOSE [ # ]
-- On CLOSE shift to state 180

State 180:
expr -> OPEN OR expr expr_list CLOSE . [ # ]
-- On # reduce production expr -> OPEN OR expr expr_list CLOSE 

State 181:
expr -> OPEN NOT . expr CLOSE [ # ]
-- On TRUE shift to state 125
-- On OPEN shift to state 126
-- On IDENT shift to state 133
-- On FALSE shift to state 134
-- On expr shift to state 182

State 182:
expr -> OPEN NOT expr . CLOSE [ # ]
-- On CLOSE shift to state 183

State 183:
expr -> OPEN NOT expr CLOSE . [ # ]
-- On # reduce production expr -> OPEN NOT expr CLOSE 

State 184:
expr -> OPEN IMPLY . expr expr_list CLOSE [ # ]
-- On TRUE shift to state 125
-- On OPEN shift to state 126
-- On IDENT shift to state 133
-- On FALSE shift to state 134
-- On expr shift to state 185

State 185:
expr -> OPEN IMPLY expr . expr_list CLOSE [ # ]
-- On TRUE shift to state 125
-- On OPEN shift to state 126
-- On IDENT shift to state 133
-- On FALSE shift to state 134
-- On expr_list shift to state 186
-- On expr shift to state 138
-- On CLOSE reduce production expr_list -> 

State 186:
expr -> OPEN IMPLY expr expr_list . CLOSE [ # ]
-- On CLOSE shift to state 187

State 187:
expr -> OPEN IMPLY expr expr_list CLOSE . [ # ]
-- On # reduce production expr -> OPEN IMPLY expr expr_list CLOSE 

State 188:
expr -> OPEN IDENT . expr_list CLOSE [ # ]
-- On TRUE shift to state 125
-- On OPEN shift to state 126
-- On IDENT shift to state 133
-- On FALSE shift to state 134
-- On expr_list shift to state 189
-- On expr shift to state 138
-- On CLOSE reduce production expr_list -> 

State 189:
expr -> OPEN IDENT expr_list . CLOSE [ # ]
-- On CLOSE shift to state 190

State 190:
expr -> OPEN IDENT expr_list CLOSE . [ # ]
-- On # reduce production expr -> OPEN IDENT expr_list CLOSE 

State 191:
expr -> OPEN FALSE . CLOSE [ # ]
-- On CLOSE shift to state 192

State 192:
expr -> OPEN FALSE CLOSE . [ # ]
-- On # reduce production expr -> OPEN FALSE CLOSE 

State 193:
expr -> OPEN EX . lambda CLOSE [ # ]
-- On OPEN shift to state 120
-- On lambda shift to state 194

State 194:
expr -> OPEN EX lambda . CLOSE [ # ]
-- On CLOSE shift to state 195

State 195:
expr -> OPEN EX lambda CLOSE . [ # ]
-- On # reduce production expr -> OPEN EX lambda CLOSE 

State 196:
expr -> OPEN EQUIV . expr expr_list CLOSE [ # ]
-- On TRUE shift to state 125
-- On OPEN shift to state 126
-- On IDENT shift to state 133
-- On FALSE shift to state 134
-- On expr shift to state 197

State 197:
expr -> OPEN EQUIV expr . expr_list CLOSE [ # ]
-- On TRUE shift to state 125
-- On OPEN shift to state 126
-- On IDENT shift to state 133
-- On FALSE shift to state 134
-- On expr_list shift to state 198
-- On expr shift to state 138
-- On CLOSE reduce production expr_list -> 

State 198:
expr -> OPEN EQUIV expr expr_list . CLOSE [ # ]
-- On CLOSE shift to state 199

State 199:
expr -> OPEN EQUIV expr expr_list CLOSE . [ # ]
-- On # reduce production expr -> OPEN EQUIV expr expr_list CLOSE 

State 200:
expr -> OPEN EQUAL . expr expr CLOSE [ # ]
-- On TRUE shift to state 125
-- On OPEN shift to state 126
-- On IDENT shift to state 133
-- On FALSE shift to state 134
-- On expr shift to state 201

State 201:
expr -> OPEN EQUAL expr . expr CLOSE [ # ]
-- On TRUE shift to state 125
-- On OPEN shift to state 126
-- On IDENT shift to state 133
-- On FALSE shift to state 134
-- On expr shift to state 202

State 202:
expr -> OPEN EQUAL expr expr . CLOSE [ # ]
-- On CLOSE shift to state 203

State 203:
expr -> OPEN EQUAL expr expr CLOSE . [ # ]
-- On # reduce production expr -> OPEN EQUAL expr expr CLOSE 

State 204:
expr -> OPEN AND . expr expr_list CLOSE [ # ]
-- On TRUE shift to state 125
-- On OPEN shift to state 126
-- On IDENT shift to state 133
-- On FALSE shift to state 134
-- On expr shift to state 205

State 205:
expr -> OPEN AND expr . expr_list CLOSE [ # ]
-- On TRUE shift to state 125
-- On OPEN shift to state 126
-- On IDENT shift to state 133
-- On FALSE shift to state 134
-- On expr_list shift to state 206
-- On expr shift to state 138
-- On CLOSE reduce production expr_list -> 

State 206:
expr -> OPEN AND expr expr_list . CLOSE [ # ]
-- On CLOSE shift to state 207

State 207:
expr -> OPEN AND expr expr_list CLOSE . [ # ]
-- On # reduce production expr -> OPEN AND expr expr_list CLOSE 

State 208:
expr -> OPEN ALL . lambda CLOSE [ # ]
-- On OPEN shift to state 120
-- On lambda shift to state 209

State 209:
expr -> OPEN ALL lambda . CLOSE [ # ]
-- On CLOSE shift to state 210

State 210:
expr -> OPEN ALL lambda CLOSE . [ # ]
-- On # reduce production expr -> OPEN ALL lambda CLOSE 

State 211:
expr -> IDENT . [ # ]
-- On # reduce production expr -> IDENT 

State 212:
expr -> FALSE . [ # ]
-- On # reduce production expr -> FALSE 

State 213:
phrase -> GOAL expr . [ # ]
-- On # reduce production phrase -> GOAL expr 

State 214:
phrase -> DEF . IDENT OPEN ident_list CLOSE expr [ # ]
-- On IDENT shift to state 215

State 215:
phrase -> DEF IDENT . OPEN ident_list CLOSE expr [ # ]
-- On OPEN shift to state 216

State 216:
phrase -> DEF IDENT OPEN . ident_list CLOSE expr [ # ]
-- On IDENT shift to state 217
-- On ident_list shift to state 219
-- On CLOSE reduce production ident_list -> 

State 217:
ident_list -> IDENT . ident_list [ CLOSE ]
-- On IDENT shift to state 217
-- On ident_list shift to state 218
-- On CLOSE reduce production ident_list -> 

State 218:
ident_list -> IDENT ident_list . [ CLOSE ]
-- On CLOSE reduce production ident_list -> IDENT ident_list 

State 219:
phrase -> DEF IDENT OPEN ident_list . CLOSE expr [ # ]
-- On CLOSE shift to state 220

State 220:
phrase -> DEF IDENT OPEN ident_list CLOSE . expr [ # ]
-- On TRUE shift to state 115
-- On OPEN shift to state 116
-- On IDENT shift to state 211
-- On FALSE shift to state 212
-- On expr shift to state 221

State 221:
phrase -> DEF IDENT OPEN ident_list CLOSE expr . [ # ]
-- On # reduce production phrase -> DEF IDENT OPEN ident_list CLOSE expr 

State 222:
phrase' -> phrase . [ # ]
-- On # accept phrase

State 223:
phrase -> int_opt . hyp_name expr [ # ]
-- On STRING shift to state 224
-- On hyp_name shift to state 225
-- On TRUE reduce production hyp_name -> 
-- On OPEN reduce production hyp_name -> 
-- On IDENT reduce production hyp_name -> 
-- On FALSE reduce production hyp_name -> 

State 224:
hyp_name -> STRING . [ TRUE OPEN IDENT FALSE ]
-- On TRUE reduce production hyp_name -> STRING 
-- On OPEN reduce production hyp_name -> STRING 
-- On IDENT reduce production hyp_name -> STRING 
-- On FALSE reduce production hyp_name -> STRING 

State 225:
phrase -> int_opt hyp_name . expr [ # ]
-- On TRUE shift to state 115
-- On OPEN shift to state 116
-- On IDENT shift to state 211
-- On FALSE shift to state 212
-- On expr shift to state 226

State 226:
phrase -> int_opt hyp_name expr . [ # ]
-- On # reduce production phrase -> int_opt hyp_name expr 

State 227:
theory' -> . theory [ # ]
-- On INT shift to state 113
-- On GOAL shift to state 228
-- On EOF shift to state 230
-- On DEF shift to state 231
-- On theory shift to state 237
-- On phrase shift to state 238
-- On int_opt shift to state 240
-- On TRUE reduce production int_opt -> 
-- On STRING reduce production int_opt -> 
-- On OPEN reduce production int_opt -> 
-- On IDENT reduce production int_opt -> 
-- On FALSE reduce production int_opt -> 

State 228:
phrase -> GOAL . expr [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF ]
-- On TRUE shift to state 125
-- On OPEN shift to state 126
-- On IDENT shift to state 133
-- On FALSE shift to state 134
-- On expr shift to state 229

State 229:
phrase -> GOAL expr . [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF ]
-- On TRUE reduce production phrase -> GOAL expr 
-- On STRING reduce production phrase -> GOAL expr 
-- On OPEN reduce production phrase -> GOAL expr 
-- On INT reduce production phrase -> GOAL expr 
-- On IDENT reduce production phrase -> GOAL expr 
-- On GOAL reduce production phrase -> GOAL expr 
-- On FALSE reduce production phrase -> GOAL expr 
-- On EOF reduce production phrase -> GOAL expr 
-- On DEF reduce production phrase -> GOAL expr 

State 230:
theory -> EOF . [ # ]
-- On # reduce production theory -> EOF 

State 231:
phrase -> DEF . IDENT OPEN ident_list CLOSE expr [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF ]
-- On IDENT shift to state 232

State 232:
phrase -> DEF IDENT . OPEN ident_list CLOSE expr [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF ]
-- On OPEN shift to state 233

State 233:
phrase -> DEF IDENT OPEN . ident_list CLOSE expr [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF ]
-- On IDENT shift to state 217
-- On ident_list shift to state 234
-- On CLOSE reduce production ident_list -> 

State 234:
phrase -> DEF IDENT OPEN ident_list . CLOSE expr [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF ]
-- On CLOSE shift to state 235

State 235:
phrase -> DEF IDENT OPEN ident_list CLOSE . expr [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF ]
-- On TRUE shift to state 125
-- On OPEN shift to state 126
-- On IDENT shift to state 133
-- On FALSE shift to state 134
-- On expr shift to state 236

State 236:
phrase -> DEF IDENT OPEN ident_list CLOSE expr . [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF ]
-- On TRUE reduce production phrase -> DEF IDENT OPEN ident_list CLOSE expr 
-- On STRING reduce production phrase -> DEF IDENT OPEN ident_list CLOSE expr 
-- On OPEN reduce production phrase -> DEF IDENT OPEN ident_list CLOSE expr 
-- On INT reduce production phrase -> DEF IDENT OPEN ident_list CLOSE expr 
-- On IDENT reduce production phrase -> DEF IDENT OPEN ident_list CLOSE expr 
-- On GOAL reduce production phrase -> DEF IDENT OPEN ident_list CLOSE expr 
-- On FALSE reduce production phrase -> DEF IDENT OPEN ident_list CLOSE expr 
-- On EOF reduce production phrase -> DEF IDENT OPEN ident_list CLOSE expr 
-- On DEF reduce production phrase -> DEF IDENT OPEN ident_list CLOSE expr 

State 237:
theory' -> theory . [ # ]
-- On # accept theory

State 238:
theory -> phrase . theory [ # ]
-- On INT shift to state 113
-- On GOAL shift to state 228
-- On EOF shift to state 230
-- On DEF shift to state 231
-- On theory shift to state 239
-- On phrase shift to state 238
-- On int_opt shift to state 240
-- On TRUE reduce production int_opt -> 
-- On STRING reduce production int_opt -> 
-- On OPEN reduce production int_opt -> 
-- On IDENT reduce production int_opt -> 
-- On FALSE reduce production int_opt -> 

State 239:
theory -> phrase theory . [ # ]
-- On # reduce production theory -> phrase theory 

State 240:
phrase -> int_opt . hyp_name expr [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF ]
-- On STRING shift to state 224
-- On hyp_name shift to state 241
-- On TRUE reduce production hyp_name -> 
-- On OPEN reduce production hyp_name -> 
-- On IDENT reduce production hyp_name -> 
-- On FALSE reduce production hyp_name -> 

State 241:
phrase -> int_opt hyp_name . expr [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF ]
-- On TRUE shift to state 125
-- On OPEN shift to state 126
-- On IDENT shift to state 133
-- On FALSE shift to state 134
-- On expr shift to state 242

State 242:
phrase -> int_opt hyp_name expr . [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF ]
-- On TRUE reduce production phrase -> int_opt hyp_name expr 
-- On STRING reduce production phrase -> int_opt hyp_name expr 
-- On OPEN reduce production phrase -> int_opt hyp_name expr 
-- On INT reduce production phrase -> int_opt hyp_name expr 
-- On IDENT reduce production phrase -> int_opt hyp_name expr 
-- On GOAL reduce production phrase -> int_opt hyp_name expr 
-- On FALSE reduce production phrase -> int_opt hyp_name expr 
-- On EOF reduce production phrase -> int_opt hyp_name expr 
-- On DEF reduce production phrase -> int_opt hyp_name expr 

State 243:
tpfile' -> . tpfile [ # ]
-- On INPUT_FORMULA shift to state 244
-- On INCLUDE shift to state 306
-- On EOF shift to state 311
-- On tpphrase shift to state 312
-- On tpfile shift to state 314

State 244:
tpphrase -> INPUT_FORMULA . OPEN LIDENT COMMA LIDENT COMMA tpformula CLOSE DOT [ INPUT_FORMULA INCLUDE EOF ]
-- On OPEN shift to state 245

State 245:
tpphrase -> INPUT_FORMULA OPEN . LIDENT COMMA LIDENT COMMA tpformula CLOSE DOT [ INPUT_FORMULA INCLUDE EOF ]
-- On LIDENT shift to state 246

State 246:
tpphrase -> INPUT_FORMULA OPEN LIDENT . COMMA LIDENT COMMA tpformula CLOSE DOT [ INPUT_FORMULA INCLUDE EOF ]
-- On COMMA shift to state 247

State 247:
tpphrase -> INPUT_FORMULA OPEN LIDENT COMMA . LIDENT COMMA tpformula CLOSE DOT [ INPUT_FORMULA INCLUDE EOF ]
-- On LIDENT shift to state 248

State 248:
tpphrase -> INPUT_FORMULA OPEN LIDENT COMMA LIDENT . COMMA tpformula CLOSE DOT [ INPUT_FORMULA INCLUDE EOF ]
-- On COMMA shift to state 249

State 249:
tpphrase -> INPUT_FORMULA OPEN LIDENT COMMA LIDENT COMMA . tpformula CLOSE DOT [ INPUT_FORMULA INCLUDE EOF ]
-- On UIDENT shift to state 250
-- On OPEN shift to state 251
-- On NOT shift to state 252
-- On LIDENT shift to state 253
-- On EX shift to state 267
-- On EQUAL shift to state 255
-- On ALL shift to state 275
-- On tpformula shift to state 303
-- On tpexpr shift to state 280
-- On tpatom shift to state 286

State 250:
tpexpr -> UIDENT . [ XOR RIMPLY OR NOR NAND IMPLY EQUIV COMMA CLOSE AND ]
-- On XOR reduce production tpexpr -> UIDENT 
-- On RIMPLY reduce production tpexpr -> UIDENT 
-- On OR reduce production tpexpr -> UIDENT 
-- On NOR reduce production tpexpr -> UIDENT 
-- On NAND reduce production tpexpr -> UIDENT 
-- On IMPLY reduce production tpexpr -> UIDENT 
-- On EQUIV reduce production tpexpr -> UIDENT 
-- On COMMA reduce production tpexpr -> UIDENT 
-- On CLOSE reduce production tpexpr -> UIDENT 
-- On AND reduce production tpexpr -> UIDENT 

State 251:
tpatom -> OPEN . tpformula CLOSE [ XOR RIMPLY OR NOR NAND IMPLY EQUIV CLOSE AND ]
-- On UIDENT shift to state 250
-- On OPEN shift to state 251
-- On NOT shift to state 252
-- On LIDENT shift to state 253
-- On EX shift to state 267
-- On EQUAL shift to state 255
-- On ALL shift to state 275
-- On tpformula shift to state 284
-- On tpexpr shift to state 280
-- On tpatom shift to state 286

State 252:
tpatom -> NOT . tpatom [ XOR RIMPLY OR NOR NAND IMPLY EQUIV CLOSE AND ]
-- On UIDENT shift to state 250
-- On OPEN shift to state 251
-- On NOT shift to state 252
-- On LIDENT shift to state 253
-- On EX shift to state 267
-- On EQUAL shift to state 255
-- On ALL shift to state 275
-- On tpexpr shift to state 280
-- On tpatom shift to state 283

State 253:
tpexpr -> LIDENT . tparguments [ XOR RIMPLY OR NOR NAND IMPLY EQUIV COMMA CLOSE AND ]
-- On OPEN shift to state 254
-- On tparguments shift to state 266
-- On XOR reduce production tparguments -> 
-- On RIMPLY reduce production tparguments -> 
-- On OR reduce production tparguments -> 
-- On NOR reduce production tparguments -> 
-- On NAND reduce production tparguments -> 
-- On IMPLY reduce production tparguments -> 
-- On EQUIV reduce production tparguments -> 
-- On COMMA reduce production tparguments -> 
-- On CLOSE reduce production tparguments -> 
-- On AND reduce production tparguments -> 

State 254:
tparguments -> OPEN . tpexpr_list CLOSE [ XOR RIMPLY OR NOR NAND IMPLY EQUIV COMMA CLOSE AND ]
-- On UIDENT shift to state 250
-- On LIDENT shift to state 253
-- On EQUAL shift to state 255
-- On tpexpr_list shift to state 261
-- On tpexpr shift to state 263

State 255:
tpexpr -> EQUAL . OPEN tpexpr COMMA tpexpr CLOSE [ XOR RIMPLY OR NOR NAND IMPLY EQUIV COMMA CLOSE AND ]
-- On OPEN shift to state 256

State 256:
tpexpr -> EQUAL OPEN . tpexpr COMMA tpexpr CLOSE [ XOR RIMPLY OR NOR NAND IMPLY EQUIV COMMA CLOSE AND ]
-- On UIDENT shift to state 250
-- On LIDENT shift to state 253
-- On EQUAL shift to state 255
-- On tpexpr shift to state 257

State 257:
tpexpr -> EQUAL OPEN tpexpr . COMMA tpexpr CLOSE [ XOR RIMPLY OR NOR NAND IMPLY EQUIV COMMA CLOSE AND ]
-- On COMMA shift to state 258

State 258:
tpexpr -> EQUAL OPEN tpexpr COMMA . tpexpr CLOSE [ XOR RIMPLY OR NOR NAND IMPLY EQUIV COMMA CLOSE AND ]
-- On UIDENT shift to state 250
-- On LIDENT shift to state 253
-- On EQUAL shift to state 255
-- On tpexpr shift to state 259

State 259:
tpexpr -> EQUAL OPEN tpexpr COMMA tpexpr . CLOSE [ XOR RIMPLY OR NOR NAND IMPLY EQUIV COMMA CLOSE AND ]
-- On CLOSE shift to state 260

State 260:
tpexpr -> EQUAL OPEN tpexpr COMMA tpexpr CLOSE . [ XOR RIMPLY OR NOR NAND IMPLY EQUIV COMMA CLOSE AND ]
-- On XOR reduce production tpexpr -> EQUAL OPEN tpexpr COMMA tpexpr CLOSE 
-- On RIMPLY reduce production tpexpr -> EQUAL OPEN tpexpr COMMA tpexpr CLOSE 
-- On OR reduce production tpexpr -> EQUAL OPEN tpexpr COMMA tpexpr CLOSE 
-- On NOR reduce production tpexpr -> EQUAL OPEN tpexpr COMMA tpexpr CLOSE 
-- On NAND reduce production tpexpr -> EQUAL OPEN tpexpr COMMA tpexpr CLOSE 
-- On IMPLY reduce production tpexpr -> EQUAL OPEN tpexpr COMMA tpexpr CLOSE 
-- On EQUIV reduce production tpexpr -> EQUAL OPEN tpexpr COMMA tpexpr CLOSE 
-- On COMMA reduce production tpexpr -> EQUAL OPEN tpexpr COMMA tpexpr CLOSE 
-- On CLOSE reduce production tpexpr -> EQUAL OPEN tpexpr COMMA tpexpr CLOSE 
-- On AND reduce production tpexpr -> EQUAL OPEN tpexpr COMMA tpexpr CLOSE 

State 261:
tparguments -> OPEN tpexpr_list . CLOSE [ XOR RIMPLY OR NOR NAND IMPLY EQUIV COMMA CLOSE AND ]
-- On CLOSE shift to state 262

State 262:
tparguments -> OPEN tpexpr_list CLOSE . [ XOR RIMPLY OR NOR NAND IMPLY EQUIV COMMA CLOSE AND ]
-- On XOR reduce production tparguments -> OPEN tpexpr_list CLOSE 
-- On RIMPLY reduce production tparguments -> OPEN tpexpr_list CLOSE 
-- On OR reduce production tparguments -> OPEN tpexpr_list CLOSE 
-- On NOR reduce production tparguments -> OPEN tpexpr_list CLOSE 
-- On NAND reduce production tparguments -> OPEN tpexpr_list CLOSE 
-- On IMPLY reduce production tparguments -> OPEN tpexpr_list CLOSE 
-- On EQUIV reduce production tparguments -> OPEN tpexpr_list CLOSE 
-- On COMMA reduce production tparguments -> OPEN tpexpr_list CLOSE 
-- On CLOSE reduce production tparguments -> OPEN tpexpr_list CLOSE 
-- On AND reduce production tparguments -> OPEN tpexpr_list CLOSE 

State 263:
tpexpr_list -> tpexpr . COMMA tpexpr_list [ CLOSE ]
tpexpr_list -> tpexpr . [ CLOSE ]
-- On COMMA shift to state 264
-- On CLOSE reduce production tpexpr_list -> tpexpr 

State 264:
tpexpr_list -> tpexpr COMMA . tpexpr_list [ CLOSE ]
-- On UIDENT shift to state 250
-- On LIDENT shift to state 253
-- On EQUAL shift to state 255
-- On tpexpr_list shift to state 265
-- On tpexpr shift to state 263

State 265:
tpexpr_list -> tpexpr COMMA tpexpr_list . [ CLOSE ]
-- On CLOSE reduce production tpexpr_list -> tpexpr COMMA tpexpr_list 

State 266:
tpexpr -> LIDENT tparguments . [ XOR RIMPLY OR NOR NAND IMPLY EQUIV COMMA CLOSE AND ]
-- On XOR reduce production tpexpr -> LIDENT tparguments 
-- On RIMPLY reduce production tpexpr -> LIDENT tparguments 
-- On OR reduce production tpexpr -> LIDENT tparguments 
-- On NOR reduce production tpexpr -> LIDENT tparguments 
-- On NAND reduce production tpexpr -> LIDENT tparguments 
-- On IMPLY reduce production tpexpr -> LIDENT tparguments 
-- On EQUIV reduce production tpexpr -> LIDENT tparguments 
-- On COMMA reduce production tpexpr -> LIDENT tparguments 
-- On CLOSE reduce production tpexpr -> LIDENT tparguments 
-- On AND reduce production tpexpr -> LIDENT tparguments 

State 267:
tpatom -> EX . LBRACKET tpvar_list RBRACKET COLON tpatom [ XOR RIMPLY OR NOR NAND IMPLY EQUIV CLOSE AND ]
-- On LBRACKET shift to state 268

State 268:
tpatom -> EX LBRACKET . tpvar_list RBRACKET COLON tpatom [ XOR RIMPLY OR NOR NAND IMPLY EQUIV CLOSE AND ]
-- On UIDENT shift to state 269
-- On tpvar_list shift to state 272

State 269:
tpvar_list -> UIDENT . COMMA tpvar_list [ RBRACKET ]
tpvar_list -> UIDENT . [ RBRACKET ]
-- On COMMA shift to state 270
-- On RBRACKET reduce production tpvar_list -> UIDENT 

State 270:
tpvar_list -> UIDENT COMMA . tpvar_list [ RBRACKET ]
-- On UIDENT shift to state 269
-- On tpvar_list shift to state 271

State 271:
tpvar_list -> UIDENT COMMA tpvar_list . [ RBRACKET ]
-- On RBRACKET reduce production tpvar_list -> UIDENT COMMA tpvar_list 

State 272:
tpatom -> EX LBRACKET tpvar_list . RBRACKET COLON tpatom [ XOR RIMPLY OR NOR NAND IMPLY EQUIV CLOSE AND ]
-- On RBRACKET shift to state 273

State 273:
tpatom -> EX LBRACKET tpvar_list RBRACKET . COLON tpatom [ XOR RIMPLY OR NOR NAND IMPLY EQUIV CLOSE AND ]
-- On COLON shift to state 274

State 274:
tpatom -> EX LBRACKET tpvar_list RBRACKET COLON . tpatom [ XOR RIMPLY OR NOR NAND IMPLY EQUIV CLOSE AND ]
-- On UIDENT shift to state 250
-- On OPEN shift to state 251
-- On NOT shift to state 252
-- On LIDENT shift to state 253
-- On EX shift to state 267
-- On EQUAL shift to state 255
-- On ALL shift to state 275
-- On tpexpr shift to state 280
-- On tpatom shift to state 282

State 275:
tpatom -> ALL . LBRACKET tpvar_list RBRACKET COLON tpatom [ XOR RIMPLY OR NOR NAND IMPLY EQUIV CLOSE AND ]
-- On LBRACKET shift to state 276

State 276:
tpatom -> ALL LBRACKET . tpvar_list RBRACKET COLON tpatom [ XOR RIMPLY OR NOR NAND IMPLY EQUIV CLOSE AND ]
-- On UIDENT shift to state 269
-- On tpvar_list shift to state 277

State 277:
tpatom -> ALL LBRACKET tpvar_list . RBRACKET COLON tpatom [ XOR RIMPLY OR NOR NAND IMPLY EQUIV CLOSE AND ]
-- On RBRACKET shift to state 278

State 278:
tpatom -> ALL LBRACKET tpvar_list RBRACKET . COLON tpatom [ XOR RIMPLY OR NOR NAND IMPLY EQUIV CLOSE AND ]
-- On COLON shift to state 279

State 279:
tpatom -> ALL LBRACKET tpvar_list RBRACKET COLON . tpatom [ XOR RIMPLY OR NOR NAND IMPLY EQUIV CLOSE AND ]
-- On UIDENT shift to state 250
-- On OPEN shift to state 251
-- On NOT shift to state 252
-- On LIDENT shift to state 253
-- On EX shift to state 267
-- On EQUAL shift to state 255
-- On ALL shift to state 275
-- On tpexpr shift to state 280
-- On tpatom shift to state 281

State 280:
tpatom -> tpexpr . [ XOR RIMPLY OR NOR NAND IMPLY EQUIV CLOSE AND ]
-- On XOR reduce production tpatom -> tpexpr 
-- On RIMPLY reduce production tpatom -> tpexpr 
-- On OR reduce production tpatom -> tpexpr 
-- On NOR reduce production tpatom -> tpexpr 
-- On NAND reduce production tpatom -> tpexpr 
-- On IMPLY reduce production tpatom -> tpexpr 
-- On EQUIV reduce production tpatom -> tpexpr 
-- On CLOSE reduce production tpatom -> tpexpr 
-- On AND reduce production tpatom -> tpexpr 

State 281:
tpatom -> ALL LBRACKET tpvar_list RBRACKET COLON tpatom . [ XOR RIMPLY OR NOR NAND IMPLY EQUIV CLOSE AND ]
-- On XOR reduce production tpatom -> ALL LBRACKET tpvar_list RBRACKET COLON tpatom 
-- On RIMPLY reduce production tpatom -> ALL LBRACKET tpvar_list RBRACKET COLON tpatom 
-- On OR reduce production tpatom -> ALL LBRACKET tpvar_list RBRACKET COLON tpatom 
-- On NOR reduce production tpatom -> ALL LBRACKET tpvar_list RBRACKET COLON tpatom 
-- On NAND reduce production tpatom -> ALL LBRACKET tpvar_list RBRACKET COLON tpatom 
-- On IMPLY reduce production tpatom -> ALL LBRACKET tpvar_list RBRACKET COLON tpatom 
-- On EQUIV reduce production tpatom -> ALL LBRACKET tpvar_list RBRACKET COLON tpatom 
-- On CLOSE reduce production tpatom -> ALL LBRACKET tpvar_list RBRACKET COLON tpatom 
-- On AND reduce production tpatom -> ALL LBRACKET tpvar_list RBRACKET COLON tpatom 

State 282:
tpatom -> EX LBRACKET tpvar_list RBRACKET COLON tpatom . [ XOR RIMPLY OR NOR NAND IMPLY EQUIV CLOSE AND ]
-- On XOR reduce production tpatom -> EX LBRACKET tpvar_list RBRACKET COLON tpatom 
-- On RIMPLY reduce production tpatom -> EX LBRACKET tpvar_list RBRACKET COLON tpatom 
-- On OR reduce production tpatom -> EX LBRACKET tpvar_list RBRACKET COLON tpatom 
-- On NOR reduce production tpatom -> EX LBRACKET tpvar_list RBRACKET COLON tpatom 
-- On NAND reduce production tpatom -> EX LBRACKET tpvar_list RBRACKET COLON tpatom 
-- On IMPLY reduce production tpatom -> EX LBRACKET tpvar_list RBRACKET COLON tpatom 
-- On EQUIV reduce production tpatom -> EX LBRACKET tpvar_list RBRACKET COLON tpatom 
-- On CLOSE reduce production tpatom -> EX LBRACKET tpvar_list RBRACKET COLON tpatom 
-- On AND reduce production tpatom -> EX LBRACKET tpvar_list RBRACKET COLON tpatom 

State 283:
tpatom -> NOT tpatom . [ XOR RIMPLY OR NOR NAND IMPLY EQUIV CLOSE AND ]
-- On XOR reduce production tpatom -> NOT tpatom 
-- On RIMPLY reduce production tpatom -> NOT tpatom 
-- On OR reduce production tpatom -> NOT tpatom 
-- On NOR reduce production tpatom -> NOT tpatom 
-- On NAND reduce production tpatom -> NOT tpatom 
-- On IMPLY reduce production tpatom -> NOT tpatom 
-- On EQUIV reduce production tpatom -> NOT tpatom 
-- On CLOSE reduce production tpatom -> NOT tpatom 
-- On AND reduce production tpatom -> NOT tpatom 

State 284:
tpatom -> OPEN tpformula . CLOSE [ XOR RIMPLY OR NOR NAND IMPLY EQUIV CLOSE AND ]
-- On CLOSE shift to state 285

State 285:
tpatom -> OPEN tpformula CLOSE . [ XOR RIMPLY OR NOR NAND IMPLY EQUIV CLOSE AND ]
-- On XOR reduce production tpatom -> OPEN tpformula CLOSE 
-- On RIMPLY reduce production tpatom -> OPEN tpformula CLOSE 
-- On OR reduce production tpatom -> OPEN tpformula CLOSE 
-- On NOR reduce production tpatom -> OPEN tpformula CLOSE 
-- On NAND reduce production tpatom -> OPEN tpformula CLOSE 
-- On IMPLY reduce production tpatom -> OPEN tpformula CLOSE 
-- On EQUIV reduce production tpatom -> OPEN tpformula CLOSE 
-- On CLOSE reduce production tpatom -> OPEN tpformula CLOSE 
-- On AND reduce production tpatom -> OPEN tpformula CLOSE 

State 286:
tpformula -> tpatom . [ CLOSE ]
tpformula -> tpatom . AND tpformula [ CLOSE ]
tpformula -> tpatom . OR tpformula [ CLOSE ]
tpformula -> tpatom . IMPLY tpformula [ CLOSE ]
tpformula -> tpatom . EQUIV tpformula [ CLOSE ]
tpformula -> tpatom . RIMPLY tpformula [ CLOSE ]
tpformula -> tpatom . XOR tpformula [ CLOSE ]
tpformula -> tpatom . NOR tpformula [ CLOSE ]
tpformula -> tpatom . NAND tpformula [ CLOSE ]
-- On XOR shift to state 287
-- On RIMPLY shift to state 289
-- On OR shift to state 291
-- On NOR shift to state 293
-- On NAND shift to state 295
-- On IMPLY shift to state 297
-- On EQUIV shift to state 299
-- On AND shift to state 301
-- On CLOSE reduce production tpformula -> tpatom 

State 287:
tpformula -> tpatom XOR . tpformula [ CLOSE ]
-- On UIDENT shift to state 250
-- On OPEN shift to state 251
-- On NOT shift to state 252
-- On LIDENT shift to state 253
-- On EX shift to state 267
-- On EQUAL shift to state 255
-- On ALL shift to state 275
-- On tpformula shift to state 288
-- On tpexpr shift to state 280
-- On tpatom shift to state 286

State 288:
tpformula -> tpatom XOR tpformula . [ CLOSE ]
-- On CLOSE reduce production tpformula -> tpatom XOR tpformula 

State 289:
tpformula -> tpatom RIMPLY . tpformula [ CLOSE ]
-- On UIDENT shift to state 250
-- On OPEN shift to state 251
-- On NOT shift to state 252
-- On LIDENT shift to state 253
-- On EX shift to state 267
-- On EQUAL shift to state 255
-- On ALL shift to state 275
-- On tpformula shift to state 290
-- On tpexpr shift to state 280
-- On tpatom shift to state 286

State 290:
tpformula -> tpatom RIMPLY tpformula . [ CLOSE ]
-- On CLOSE reduce production tpformula -> tpatom RIMPLY tpformula 

State 291:
tpformula -> tpatom OR . tpformula [ CLOSE ]
-- On UIDENT shift to state 250
-- On OPEN shift to state 251
-- On NOT shift to state 252
-- On LIDENT shift to state 253
-- On EX shift to state 267
-- On EQUAL shift to state 255
-- On ALL shift to state 275
-- On tpformula shift to state 292
-- On tpexpr shift to state 280
-- On tpatom shift to state 286

State 292:
tpformula -> tpatom OR tpformula . [ CLOSE ]
-- On CLOSE reduce production tpformula -> tpatom OR tpformula 

State 293:
tpformula -> tpatom NOR . tpformula [ CLOSE ]
-- On UIDENT shift to state 250
-- On OPEN shift to state 251
-- On NOT shift to state 252
-- On LIDENT shift to state 253
-- On EX shift to state 267
-- On EQUAL shift to state 255
-- On ALL shift to state 275
-- On tpformula shift to state 294
-- On tpexpr shift to state 280
-- On tpatom shift to state 286

State 294:
tpformula -> tpatom NOR tpformula . [ CLOSE ]
-- On CLOSE reduce production tpformula -> tpatom NOR tpformula 

State 295:
tpformula -> tpatom NAND . tpformula [ CLOSE ]
-- On UIDENT shift to state 250
-- On OPEN shift to state 251
-- On NOT shift to state 252
-- On LIDENT shift to state 253
-- On EX shift to state 267
-- On EQUAL shift to state 255
-- On ALL shift to state 275
-- On tpformula shift to state 296
-- On tpexpr shift to state 280
-- On tpatom shift to state 286

State 296:
tpformula -> tpatom NAND tpformula . [ CLOSE ]
-- On CLOSE reduce production tpformula -> tpatom NAND tpformula 

State 297:
tpformula -> tpatom IMPLY . tpformula [ CLOSE ]
-- On UIDENT shift to state 250
-- On OPEN shift to state 251
-- On NOT shift to state 252
-- On LIDENT shift to state 253
-- On EX shift to state 267
-- On EQUAL shift to state 255
-- On ALL shift to state 275
-- On tpformula shift to state 298
-- On tpexpr shift to state 280
-- On tpatom shift to state 286

State 298:
tpformula -> tpatom IMPLY tpformula . [ CLOSE ]
-- On CLOSE reduce production tpformula -> tpatom IMPLY tpformula 

State 299:
tpformula -> tpatom EQUIV . tpformula [ CLOSE ]
-- On UIDENT shift to state 250
-- On OPEN shift to state 251
-- On NOT shift to state 252
-- On LIDENT shift to state 253
-- On EX shift to state 267
-- On EQUAL shift to state 255
-- On ALL shift to state 275
-- On tpformula shift to state 300
-- On tpexpr shift to state 280
-- On tpatom shift to state 286

State 300:
tpformula -> tpatom EQUIV tpformula . [ CLOSE ]
-- On CLOSE reduce production tpformula -> tpatom EQUIV tpformula 

State 301:
tpformula -> tpatom AND . tpformula [ CLOSE ]
-- On UIDENT shift to state 250
-- On OPEN shift to state 251
-- On NOT shift to state 252
-- On LIDENT shift to state 253
-- On EX shift to state 267
-- On EQUAL shift to state 255
-- On ALL shift to state 275
-- On tpformula shift to state 302
-- On tpexpr shift to state 280
-- On tpatom shift to state 286

State 302:
tpformula -> tpatom AND tpformula . [ CLOSE ]
-- On CLOSE reduce production tpformula -> tpatom AND tpformula 

State 303:
tpphrase -> INPUT_FORMULA OPEN LIDENT COMMA LIDENT COMMA tpformula . CLOSE DOT [ INPUT_FORMULA INCLUDE EOF ]
-- On CLOSE shift to state 304

State 304:
tpphrase -> INPUT_FORMULA OPEN LIDENT COMMA LIDENT COMMA tpformula CLOSE . DOT [ INPUT_FORMULA INCLUDE EOF ]
-- On DOT shift to state 305

State 305:
tpphrase -> INPUT_FORMULA OPEN LIDENT COMMA LIDENT COMMA tpformula CLOSE DOT . [ INPUT_FORMULA INCLUDE EOF ]
-- On INPUT_FORMULA reduce production tpphrase -> INPUT_FORMULA OPEN LIDENT COMMA LIDENT COMMA tpformula CLOSE DOT 
-- On INCLUDE reduce production tpphrase -> INPUT_FORMULA OPEN LIDENT COMMA LIDENT COMMA tpformula CLOSE DOT 
-- On EOF reduce production tpphrase -> INPUT_FORMULA OPEN LIDENT COMMA LIDENT COMMA tpformula CLOSE DOT 

State 306:
tpphrase -> INCLUDE . OPEN STRING CLOSE DOT [ INPUT_FORMULA INCLUDE EOF ]
-- On OPEN shift to state 307

State 307:
tpphrase -> INCLUDE OPEN . STRING CLOSE DOT [ INPUT_FORMULA INCLUDE EOF ]
-- On STRING shift to state 308

State 308:
tpphrase -> INCLUDE OPEN STRING . CLOSE DOT [ INPUT_FORMULA INCLUDE EOF ]
-- On CLOSE shift to state 309

State 309:
tpphrase -> INCLUDE OPEN STRING CLOSE . DOT [ INPUT_FORMULA INCLUDE EOF ]
-- On DOT shift to state 310

State 310:
tpphrase -> INCLUDE OPEN STRING CLOSE DOT . [ INPUT_FORMULA INCLUDE EOF ]
-- On INPUT_FORMULA reduce production tpphrase -> INCLUDE OPEN STRING CLOSE DOT 
-- On INCLUDE reduce production tpphrase -> INCLUDE OPEN STRING CLOSE DOT 
-- On EOF reduce production tpphrase -> INCLUDE OPEN STRING CLOSE DOT 

State 311:
tpfile -> EOF . [ # ]
-- On # reduce production tpfile -> EOF 

State 312:
tpfile -> tpphrase . tpfile [ # ]
-- On INPUT_FORMULA shift to state 244
-- On INCLUDE shift to state 306
-- On EOF shift to state 311
-- On tpphrase shift to state 312
-- On tpfile shift to state 313

State 313:
tpfile -> tpphrase tpfile . [ # ]
-- On # reduce production tpfile -> tpphrase tpfile 

State 314:
tpfile' -> tpfile . [ # ]
-- On # accept tpfile

