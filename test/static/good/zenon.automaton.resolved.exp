State 0:
## Known stack suffix:
##
## LR(1) items:
coqfile' -> . coqfile [ # ]
## Transitions:
-- On LOCAL shift to state 1
-- On BEGINPROOF shift to state 106
-- On coqfile shift to state 111
## Reductions:

State 1:
## Known stack suffix:
## LOCAL
## LR(1) items:
coqfile -> LOCAL . IDENT COLON coqexpr COLONEQUAL TOBE coqexpr coq_hyp_def_list QED EOF [ # ]
## Transitions:
-- On IDENT shift to state 2
## Reductions:

State 2:
## Known stack suffix:
## LOCAL IDENT
## LR(1) items:
coqfile -> LOCAL IDENT . COLON coqexpr COLONEQUAL TOBE coqexpr coq_hyp_def_list QED EOF [ # ]
## Transitions:
-- On COLON shift to state 3
## Reductions:

State 3:
## Known stack suffix:
## LOCAL IDENT COLON
## LR(1) items:
coqfile -> LOCAL IDENT COLON . coqexpr COLONEQUAL TOBE coqexpr coq_hyp_def_list QED EOF [ # ]
## Transitions:
-- On TILDE shift to state 4
-- On OPEN shift to state 5
-- On LET shift to state 7
-- On LBRACKET shift to state 10
-- On IF shift to state 13
-- On IDENT shift to state 14
-- On FORALL shift to state 15
-- On coqexpr shift to state 66
-- On coqapplication shift to state 23
## Reductions:

State 4:
## Known stack suffix:
## TILDE
## LR(1) items:
coqexpr -> TILDE . coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
## Transitions:
-- On TILDE shift to state 4
-- On OPEN shift to state 5
-- On LET shift to state 7
-- On LBRACKET shift to state 10
-- On IF shift to state 13
-- On IDENT shift to state 14
-- On FORALL shift to state 15
-- On coqexpr shift to state 65
-- On coqapplication shift to state 23
## Reductions:

State 5:
## Known stack suffix:
## OPEN
## LR(1) items:
coqapplication -> OPEN . IDENT coqexpr_list1 CLOSE [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqapplication -> OPEN . coqapplication coqexpr_list1 CLOSE [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> OPEN . coqexpr CLOSE [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> OPEN . IDENT COLON IDENT CLOSE coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> OPEN . AND coqexpr coqexpr CLOSE [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> OPEN . OR coqexpr coqexpr CLOSE [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> OPEN . coqexpr EQUAL coqexpr CLOSE [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
## Transitions:
-- On TILDE shift to state 4
-- On OR shift to state 6
-- On OPEN shift to state 5
-- On LET shift to state 7
-- On LBRACKET shift to state 10
-- On IF shift to state 13
-- On IDENT shift to state 44
-- On FORALL shift to state 15
-- On AND shift to state 53
-- On coqexpr shift to state 57
-- On coqapplication shift to state 62
## Reductions:

State 6:
## Known stack suffix:
## OPEN OR
## LR(1) items:
coqexpr -> OPEN OR . coqexpr coqexpr CLOSE [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
## Transitions:
-- On TILDE shift to state 4
-- On OPEN shift to state 5
-- On LET shift to state 7
-- On LBRACKET shift to state 10
-- On IF shift to state 13
-- On IDENT shift to state 14
-- On FORALL shift to state 15
-- On coqexpr shift to state 41
-- On coqapplication shift to state 23
## Reductions:

State 7:
## Known stack suffix:
## LET
## LR(1) items:
coqexpr -> LET . IDENT COLONEQUAL coqexpr IN coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
## Transitions:
-- On IDENT shift to state 8
## Reductions:

State 8:
## Known stack suffix:
## LET IDENT
## LR(1) items:
coqexpr -> LET IDENT . COLONEQUAL coqexpr IN coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
## Transitions:
-- On COLONEQUAL shift to state 9
## Reductions:

State 9:
## Known stack suffix:
## LET IDENT COLONEQUAL
## LR(1) items:
coqexpr -> LET IDENT COLONEQUAL . coqexpr IN coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
## Transitions:
-- On TILDE shift to state 4
-- On OPEN shift to state 5
-- On LET shift to state 7
-- On LBRACKET shift to state 10
-- On IF shift to state 13
-- On IDENT shift to state 14
-- On FORALL shift to state 15
-- On coqexpr shift to state 38
-- On coqapplication shift to state 23
## Reductions:

State 10:
## Known stack suffix:
## LBRACKET
## LR(1) items:
coqexpr -> LBRACKET . IDENT COLONEQUAL coqexpr RBRACKET coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
## Transitions:
-- On IDENT shift to state 11
## Reductions:

State 11:
## Known stack suffix:
## LBRACKET IDENT
## LR(1) items:
coqexpr -> LBRACKET IDENT . COLONEQUAL coqexpr RBRACKET coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
## Transitions:
-- On COLONEQUAL shift to state 12
## Reductions:

State 12:
## Known stack suffix:
## LBRACKET IDENT COLONEQUAL
## LR(1) items:
coqexpr -> LBRACKET IDENT COLONEQUAL . coqexpr RBRACKET coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
## Transitions:
-- On TILDE shift to state 4
-- On OPEN shift to state 5
-- On LET shift to state 7
-- On LBRACKET shift to state 10
-- On IF shift to state 13
-- On IDENT shift to state 14
-- On FORALL shift to state 15
-- On coqexpr shift to state 35
-- On coqapplication shift to state 23
## Reductions:

State 13:
## Known stack suffix:
## IF
## LR(1) items:
coqexpr -> IF . coqexpr THEN coqexpr ELSE coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
## Transitions:
-- On TILDE shift to state 4
-- On OPEN shift to state 5
-- On LET shift to state 7
-- On LBRACKET shift to state 10
-- On IF shift to state 13
-- On IDENT shift to state 14
-- On FORALL shift to state 15
-- On coqexpr shift to state 30
-- On coqapplication shift to state 23
## Reductions:

State 14:
## Known stack suffix:
## IDENT
## LR(1) items:
coqexpr -> IDENT . [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
## Transitions:
## Reductions:
-- On TILDE reduce production coqexpr -> IDENT
-- On THEN reduce production coqexpr -> IDENT
-- On STRING reduce production coqexpr -> IDENT
-- On SLASHBACKSLASH reduce production coqexpr -> IDENT
-- On RBRACKET reduce production coqexpr -> IDENT
-- On QED reduce production coqexpr -> IDENT
-- On OPEN reduce production coqexpr -> IDENT
-- On LET reduce production coqexpr -> IDENT
-- On LBRACKET reduce production coqexpr -> IDENT
-- On IN reduce production coqexpr -> IDENT
-- On IF reduce production coqexpr -> IDENT
-- On IDENT reduce production coqexpr -> IDENT
-- On FORALL reduce production coqexpr -> IDENT
-- On EQUAL reduce production coqexpr -> IDENT
-- On ENDPROOF reduce production coqexpr -> IDENT
-- On ELSE reduce production coqexpr -> IDENT
-- On DOUBLEARROW reduce production coqexpr -> IDENT
-- On COLONEQUAL reduce production coqexpr -> IDENT
-- On CLOSE reduce production coqexpr -> IDENT
-- On BYDEF reduce production coqexpr -> IDENT
-- On BY reduce production coqexpr -> IDENT
-- On BACKSLASHSLASH reduce production coqexpr -> IDENT
-- On ARROW reduce production coqexpr -> IDENT

State 15:
## Known stack suffix:
## FORALL
## LR(1) items:
coqexpr -> FORALL . IDENT COLON IDENT COMMA coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
## Transitions:
-- On IDENT shift to state 16
## Reductions:

State 16:
## Known stack suffix:
## FORALL IDENT
## LR(1) items:
coqexpr -> FORALL IDENT . COLON IDENT COMMA coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
## Transitions:
-- On COLON shift to state 17
## Reductions:

State 17:
## Known stack suffix:
## FORALL IDENT COLON
## LR(1) items:
coqexpr -> FORALL IDENT COLON . IDENT COMMA coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
## Transitions:
-- On IDENT shift to state 18
## Reductions:

State 18:
## Known stack suffix:
## FORALL IDENT COLON IDENT
## LR(1) items:
coqexpr -> FORALL IDENT COLON IDENT . COMMA coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
## Transitions:
-- On COMMA shift to state 19
## Reductions:

State 19:
## Known stack suffix:
## FORALL IDENT COLON IDENT COMMA
## LR(1) items:
coqexpr -> FORALL IDENT COLON IDENT COMMA . coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
## Transitions:
-- On TILDE shift to state 4
-- On OPEN shift to state 5
-- On LET shift to state 7
-- On LBRACKET shift to state 10
-- On IF shift to state 13
-- On IDENT shift to state 14
-- On FORALL shift to state 15
-- On coqexpr shift to state 20
-- On coqapplication shift to state 23
## Reductions:

State 20:
## Known stack suffix:
## FORALL IDENT COLON IDENT COMMA coqexpr
## LR(1) items:
coqexpr -> FORALL IDENT COLON IDENT COMMA coqexpr . [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . ARROW coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . DOUBLEARROW coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . SLASHBACKSLASH coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . BACKSLASHSLASH coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
## Transitions:
-- On SLASHBACKSLASH shift to state 21
-- On DOUBLEARROW shift to state 24
-- On BACKSLASHSLASH shift to state 26
-- On ARROW shift to state 28
## Reductions:
-- On TILDE reduce production coqexpr -> FORALL IDENT COLON IDENT COMMA coqexpr
-- On THEN reduce production coqexpr -> FORALL IDENT COLON IDENT COMMA coqexpr
-- On STRING reduce production coqexpr -> FORALL IDENT COLON IDENT COMMA coqexpr
-- On RBRACKET reduce production coqexpr -> FORALL IDENT COLON IDENT COMMA coqexpr
-- On QED reduce production coqexpr -> FORALL IDENT COLON IDENT COMMA coqexpr
-- On OPEN reduce production coqexpr -> FORALL IDENT COLON IDENT COMMA coqexpr
-- On LET reduce production coqexpr -> FORALL IDENT COLON IDENT COMMA coqexpr
-- On LBRACKET reduce production coqexpr -> FORALL IDENT COLON IDENT COMMA coqexpr
-- On IN reduce production coqexpr -> FORALL IDENT COLON IDENT COMMA coqexpr
-- On IF reduce production coqexpr -> FORALL IDENT COLON IDENT COMMA coqexpr
-- On IDENT reduce production coqexpr -> FORALL IDENT COLON IDENT COMMA coqexpr
-- On FORALL reduce production coqexpr -> FORALL IDENT COLON IDENT COMMA coqexpr
-- On EQUAL reduce production coqexpr -> FORALL IDENT COLON IDENT COMMA coqexpr
-- On ENDPROOF reduce production coqexpr -> FORALL IDENT COLON IDENT COMMA coqexpr
-- On ELSE reduce production coqexpr -> FORALL IDENT COLON IDENT COMMA coqexpr
-- On COLONEQUAL reduce production coqexpr -> FORALL IDENT COLON IDENT COMMA coqexpr
-- On CLOSE reduce production coqexpr -> FORALL IDENT COLON IDENT COMMA coqexpr
-- On BYDEF reduce production coqexpr -> FORALL IDENT COLON IDENT COMMA coqexpr
-- On BY reduce production coqexpr -> FORALL IDENT COLON IDENT COMMA coqexpr

State 21:
## Known stack suffix:
## coqexpr SLASHBACKSLASH
## LR(1) items:
coqexpr -> coqexpr SLASHBACKSLASH . coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
## Transitions:
-- On TILDE shift to state 4
-- On OPEN shift to state 5
-- On LET shift to state 7
-- On LBRACKET shift to state 10
-- On IF shift to state 13
-- On IDENT shift to state 14
-- On FORALL shift to state 15
-- On coqexpr shift to state 22
-- On coqapplication shift to state 23
## Reductions:

State 22:
## Known stack suffix:
## coqexpr SLASHBACKSLASH coqexpr
## LR(1) items:
coqexpr -> coqexpr . ARROW coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . DOUBLEARROW coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . SLASHBACKSLASH coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr SLASHBACKSLASH coqexpr . [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . BACKSLASHSLASH coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
## Transitions:
-- On SLASHBACKSLASH shift to state 21
## Reductions:
-- On TILDE reduce production coqexpr -> coqexpr SLASHBACKSLASH coqexpr
-- On THEN reduce production coqexpr -> coqexpr SLASHBACKSLASH coqexpr
-- On STRING reduce production coqexpr -> coqexpr SLASHBACKSLASH coqexpr
-- On RBRACKET reduce production coqexpr -> coqexpr SLASHBACKSLASH coqexpr
-- On QED reduce production coqexpr -> coqexpr SLASHBACKSLASH coqexpr
-- On OPEN reduce production coqexpr -> coqexpr SLASHBACKSLASH coqexpr
-- On LET reduce production coqexpr -> coqexpr SLASHBACKSLASH coqexpr
-- On LBRACKET reduce production coqexpr -> coqexpr SLASHBACKSLASH coqexpr
-- On IN reduce production coqexpr -> coqexpr SLASHBACKSLASH coqexpr
-- On IF reduce production coqexpr -> coqexpr SLASHBACKSLASH coqexpr
-- On IDENT reduce production coqexpr -> coqexpr SLASHBACKSLASH coqexpr
-- On FORALL reduce production coqexpr -> coqexpr SLASHBACKSLASH coqexpr
-- On EQUAL reduce production coqexpr -> coqexpr SLASHBACKSLASH coqexpr
-- On ENDPROOF reduce production coqexpr -> coqexpr SLASHBACKSLASH coqexpr
-- On ELSE reduce production coqexpr -> coqexpr SLASHBACKSLASH coqexpr
-- On DOUBLEARROW reduce production coqexpr -> coqexpr SLASHBACKSLASH coqexpr
-- On COLONEQUAL reduce production coqexpr -> coqexpr SLASHBACKSLASH coqexpr
-- On CLOSE reduce production coqexpr -> coqexpr SLASHBACKSLASH coqexpr
-- On BYDEF reduce production coqexpr -> coqexpr SLASHBACKSLASH coqexpr
-- On BY reduce production coqexpr -> coqexpr SLASHBACKSLASH coqexpr
-- On BACKSLASHSLASH reduce production coqexpr -> coqexpr SLASHBACKSLASH coqexpr
-- On ARROW reduce production coqexpr -> coqexpr SLASHBACKSLASH coqexpr

State 23:
## Known stack suffix:
## coqapplication
## LR(1) items:
coqexpr -> coqapplication . [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
## Transitions:
## Reductions:
-- On TILDE reduce production coqexpr -> coqapplication
-- On THEN reduce production coqexpr -> coqapplication
-- On STRING reduce production coqexpr -> coqapplication
-- On SLASHBACKSLASH reduce production coqexpr -> coqapplication
-- On RBRACKET reduce production coqexpr -> coqapplication
-- On QED reduce production coqexpr -> coqapplication
-- On OPEN reduce production coqexpr -> coqapplication
-- On LET reduce production coqexpr -> coqapplication
-- On LBRACKET reduce production coqexpr -> coqapplication
-- On IN reduce production coqexpr -> coqapplication
-- On IF reduce production coqexpr -> coqapplication
-- On IDENT reduce production coqexpr -> coqapplication
-- On FORALL reduce production coqexpr -> coqapplication
-- On EQUAL reduce production coqexpr -> coqapplication
-- On ENDPROOF reduce production coqexpr -> coqapplication
-- On ELSE reduce production coqexpr -> coqapplication
-- On DOUBLEARROW reduce production coqexpr -> coqapplication
-- On COLONEQUAL reduce production coqexpr -> coqapplication
-- On CLOSE reduce production coqexpr -> coqapplication
-- On BYDEF reduce production coqexpr -> coqapplication
-- On BY reduce production coqexpr -> coqapplication
-- On BACKSLASHSLASH reduce production coqexpr -> coqapplication
-- On ARROW reduce production coqexpr -> coqapplication

State 24:
## Known stack suffix:
## coqexpr DOUBLEARROW
## LR(1) items:
coqexpr -> coqexpr DOUBLEARROW . coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
## Transitions:
-- On TILDE shift to state 4
-- On OPEN shift to state 5
-- On LET shift to state 7
-- On LBRACKET shift to state 10
-- On IF shift to state 13
-- On IDENT shift to state 14
-- On FORALL shift to state 15
-- On coqexpr shift to state 25
-- On coqapplication shift to state 23
## Reductions:

State 25:
## Known stack suffix:
## coqexpr DOUBLEARROW coqexpr
## LR(1) items:
coqexpr -> coqexpr . ARROW coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . DOUBLEARROW coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr DOUBLEARROW coqexpr . [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . SLASHBACKSLASH coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . BACKSLASHSLASH coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
## Transitions:
-- On SLASHBACKSLASH shift to state 21
-- On BACKSLASHSLASH shift to state 26
## Reductions:
-- On TILDE reduce production coqexpr -> coqexpr DOUBLEARROW coqexpr
-- On THEN reduce production coqexpr -> coqexpr DOUBLEARROW coqexpr
-- On STRING reduce production coqexpr -> coqexpr DOUBLEARROW coqexpr
-- On RBRACKET reduce production coqexpr -> coqexpr DOUBLEARROW coqexpr
-- On QED reduce production coqexpr -> coqexpr DOUBLEARROW coqexpr
-- On OPEN reduce production coqexpr -> coqexpr DOUBLEARROW coqexpr
-- On LET reduce production coqexpr -> coqexpr DOUBLEARROW coqexpr
-- On LBRACKET reduce production coqexpr -> coqexpr DOUBLEARROW coqexpr
-- On IN reduce production coqexpr -> coqexpr DOUBLEARROW coqexpr
-- On IF reduce production coqexpr -> coqexpr DOUBLEARROW coqexpr
-- On IDENT reduce production coqexpr -> coqexpr DOUBLEARROW coqexpr
-- On FORALL reduce production coqexpr -> coqexpr DOUBLEARROW coqexpr
-- On EQUAL reduce production coqexpr -> coqexpr DOUBLEARROW coqexpr
-- On ENDPROOF reduce production coqexpr -> coqexpr DOUBLEARROW coqexpr
-- On ELSE reduce production coqexpr -> coqexpr DOUBLEARROW coqexpr
-- On COLONEQUAL reduce production coqexpr -> coqexpr DOUBLEARROW coqexpr
-- On CLOSE reduce production coqexpr -> coqexpr DOUBLEARROW coqexpr
-- On BYDEF reduce production coqexpr -> coqexpr DOUBLEARROW coqexpr
-- On BY reduce production coqexpr -> coqexpr DOUBLEARROW coqexpr
-- On ARROW reduce production coqexpr -> coqexpr DOUBLEARROW coqexpr

State 26:
## Known stack suffix:
## coqexpr BACKSLASHSLASH
## LR(1) items:
coqexpr -> coqexpr BACKSLASHSLASH . coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
## Transitions:
-- On TILDE shift to state 4
-- On OPEN shift to state 5
-- On LET shift to state 7
-- On LBRACKET shift to state 10
-- On IF shift to state 13
-- On IDENT shift to state 14
-- On FORALL shift to state 15
-- On coqexpr shift to state 27
-- On coqapplication shift to state 23
## Reductions:

State 27:
## Known stack suffix:
## coqexpr BACKSLASHSLASH coqexpr
## LR(1) items:
coqexpr -> coqexpr . ARROW coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . DOUBLEARROW coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . SLASHBACKSLASH coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . BACKSLASHSLASH coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr BACKSLASHSLASH coqexpr . [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
## Transitions:
-- On SLASHBACKSLASH shift to state 21
-- On BACKSLASHSLASH shift to state 26
## Reductions:
-- On TILDE reduce production coqexpr -> coqexpr BACKSLASHSLASH coqexpr
-- On THEN reduce production coqexpr -> coqexpr BACKSLASHSLASH coqexpr
-- On STRING reduce production coqexpr -> coqexpr BACKSLASHSLASH coqexpr
-- On RBRACKET reduce production coqexpr -> coqexpr BACKSLASHSLASH coqexpr
-- On QED reduce production coqexpr -> coqexpr BACKSLASHSLASH coqexpr
-- On OPEN reduce production coqexpr -> coqexpr BACKSLASHSLASH coqexpr
-- On LET reduce production coqexpr -> coqexpr BACKSLASHSLASH coqexpr
-- On LBRACKET reduce production coqexpr -> coqexpr BACKSLASHSLASH coqexpr
-- On IN reduce production coqexpr -> coqexpr BACKSLASHSLASH coqexpr
-- On IF reduce production coqexpr -> coqexpr BACKSLASHSLASH coqexpr
-- On IDENT reduce production coqexpr -> coqexpr BACKSLASHSLASH coqexpr
-- On FORALL reduce production coqexpr -> coqexpr BACKSLASHSLASH coqexpr
-- On EQUAL reduce production coqexpr -> coqexpr BACKSLASHSLASH coqexpr
-- On ENDPROOF reduce production coqexpr -> coqexpr BACKSLASHSLASH coqexpr
-- On ELSE reduce production coqexpr -> coqexpr BACKSLASHSLASH coqexpr
-- On DOUBLEARROW reduce production coqexpr -> coqexpr BACKSLASHSLASH coqexpr
-- On COLONEQUAL reduce production coqexpr -> coqexpr BACKSLASHSLASH coqexpr
-- On CLOSE reduce production coqexpr -> coqexpr BACKSLASHSLASH coqexpr
-- On BYDEF reduce production coqexpr -> coqexpr BACKSLASHSLASH coqexpr
-- On BY reduce production coqexpr -> coqexpr BACKSLASHSLASH coqexpr
-- On ARROW reduce production coqexpr -> coqexpr BACKSLASHSLASH coqexpr

State 28:
## Known stack suffix:
## coqexpr ARROW
## LR(1) items:
coqexpr -> coqexpr ARROW . coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
## Transitions:
-- On TILDE shift to state 4
-- On OPEN shift to state 5
-- On LET shift to state 7
-- On LBRACKET shift to state 10
-- On IF shift to state 13
-- On IDENT shift to state 14
-- On FORALL shift to state 15
-- On coqexpr shift to state 29
-- On coqapplication shift to state 23
## Reductions:

State 29:
## Known stack suffix:
## coqexpr ARROW coqexpr
## LR(1) items:
coqexpr -> coqexpr . ARROW coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr ARROW coqexpr . [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . DOUBLEARROW coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . SLASHBACKSLASH coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . BACKSLASHSLASH coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
## Transitions:
-- On SLASHBACKSLASH shift to state 21
-- On DOUBLEARROW shift to state 24
-- On BACKSLASHSLASH shift to state 26
-- On ARROW shift to state 28
## Reductions:
-- On TILDE reduce production coqexpr -> coqexpr ARROW coqexpr
-- On THEN reduce production coqexpr -> coqexpr ARROW coqexpr
-- On STRING reduce production coqexpr -> coqexpr ARROW coqexpr
-- On RBRACKET reduce production coqexpr -> coqexpr ARROW coqexpr
-- On QED reduce production coqexpr -> coqexpr ARROW coqexpr
-- On OPEN reduce production coqexpr -> coqexpr ARROW coqexpr
-- On LET reduce production coqexpr -> coqexpr ARROW coqexpr
-- On LBRACKET reduce production coqexpr -> coqexpr ARROW coqexpr
-- On IN reduce production coqexpr -> coqexpr ARROW coqexpr
-- On IF reduce production coqexpr -> coqexpr ARROW coqexpr
-- On IDENT reduce production coqexpr -> coqexpr ARROW coqexpr
-- On FORALL reduce production coqexpr -> coqexpr ARROW coqexpr
-- On EQUAL reduce production coqexpr -> coqexpr ARROW coqexpr
-- On ENDPROOF reduce production coqexpr -> coqexpr ARROW coqexpr
-- On ELSE reduce production coqexpr -> coqexpr ARROW coqexpr
-- On COLONEQUAL reduce production coqexpr -> coqexpr ARROW coqexpr
-- On CLOSE reduce production coqexpr -> coqexpr ARROW coqexpr
-- On BYDEF reduce production coqexpr -> coqexpr ARROW coqexpr
-- On BY reduce production coqexpr -> coqexpr ARROW coqexpr

State 30:
## Known stack suffix:
## IF coqexpr
## LR(1) items:
coqexpr -> IF coqexpr . THEN coqexpr ELSE coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . ARROW coqexpr [ THEN SLASHBACKSLASH DOUBLEARROW BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . DOUBLEARROW coqexpr [ THEN SLASHBACKSLASH DOUBLEARROW BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . SLASHBACKSLASH coqexpr [ THEN SLASHBACKSLASH DOUBLEARROW BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . BACKSLASHSLASH coqexpr [ THEN SLASHBACKSLASH DOUBLEARROW BACKSLASHSLASH ARROW ]
## Transitions:
-- On THEN shift to state 31
-- On SLASHBACKSLASH shift to state 21
-- On DOUBLEARROW shift to state 24
-- On BACKSLASHSLASH shift to state 26
-- On ARROW shift to state 28
## Reductions:

State 31:
## Known stack suffix:
## IF coqexpr THEN
## LR(1) items:
coqexpr -> IF coqexpr THEN . coqexpr ELSE coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
## Transitions:
-- On TILDE shift to state 4
-- On OPEN shift to state 5
-- On LET shift to state 7
-- On LBRACKET shift to state 10
-- On IF shift to state 13
-- On IDENT shift to state 14
-- On FORALL shift to state 15
-- On coqexpr shift to state 32
-- On coqapplication shift to state 23
## Reductions:

State 32:
## Known stack suffix:
## IF coqexpr THEN coqexpr
## LR(1) items:
coqexpr -> IF coqexpr THEN coqexpr . ELSE coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . ARROW coqexpr [ SLASHBACKSLASH ELSE DOUBLEARROW BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . DOUBLEARROW coqexpr [ SLASHBACKSLASH ELSE DOUBLEARROW BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . SLASHBACKSLASH coqexpr [ SLASHBACKSLASH ELSE DOUBLEARROW BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . BACKSLASHSLASH coqexpr [ SLASHBACKSLASH ELSE DOUBLEARROW BACKSLASHSLASH ARROW ]
## Transitions:
-- On SLASHBACKSLASH shift to state 21
-- On ELSE shift to state 33
-- On DOUBLEARROW shift to state 24
-- On BACKSLASHSLASH shift to state 26
-- On ARROW shift to state 28
## Reductions:

State 33:
## Known stack suffix:
## IF coqexpr THEN coqexpr ELSE
## LR(1) items:
coqexpr -> IF coqexpr THEN coqexpr ELSE . coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
## Transitions:
-- On TILDE shift to state 4
-- On OPEN shift to state 5
-- On LET shift to state 7
-- On LBRACKET shift to state 10
-- On IF shift to state 13
-- On IDENT shift to state 14
-- On FORALL shift to state 15
-- On coqexpr shift to state 34
-- On coqapplication shift to state 23
## Reductions:

State 34:
## Known stack suffix:
## IF coqexpr THEN coqexpr ELSE coqexpr
## LR(1) items:
coqexpr -> IF coqexpr THEN coqexpr ELSE coqexpr . [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . ARROW coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . DOUBLEARROW coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . SLASHBACKSLASH coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . BACKSLASHSLASH coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
## Transitions:
-- On SLASHBACKSLASH shift to state 21
-- On DOUBLEARROW shift to state 24
-- On BACKSLASHSLASH shift to state 26
-- On ARROW shift to state 28
## Reductions:
-- On TILDE reduce production coqexpr -> IF coqexpr THEN coqexpr ELSE coqexpr
-- On THEN reduce production coqexpr -> IF coqexpr THEN coqexpr ELSE coqexpr
-- On STRING reduce production coqexpr -> IF coqexpr THEN coqexpr ELSE coqexpr
-- On RBRACKET reduce production coqexpr -> IF coqexpr THEN coqexpr ELSE coqexpr
-- On QED reduce production coqexpr -> IF coqexpr THEN coqexpr ELSE coqexpr
-- On OPEN reduce production coqexpr -> IF coqexpr THEN coqexpr ELSE coqexpr
-- On LET reduce production coqexpr -> IF coqexpr THEN coqexpr ELSE coqexpr
-- On LBRACKET reduce production coqexpr -> IF coqexpr THEN coqexpr ELSE coqexpr
-- On IN reduce production coqexpr -> IF coqexpr THEN coqexpr ELSE coqexpr
-- On IF reduce production coqexpr -> IF coqexpr THEN coqexpr ELSE coqexpr
-- On IDENT reduce production coqexpr -> IF coqexpr THEN coqexpr ELSE coqexpr
-- On FORALL reduce production coqexpr -> IF coqexpr THEN coqexpr ELSE coqexpr
-- On EQUAL reduce production coqexpr -> IF coqexpr THEN coqexpr ELSE coqexpr
-- On ENDPROOF reduce production coqexpr -> IF coqexpr THEN coqexpr ELSE coqexpr
-- On ELSE reduce production coqexpr -> IF coqexpr THEN coqexpr ELSE coqexpr
-- On COLONEQUAL reduce production coqexpr -> IF coqexpr THEN coqexpr ELSE coqexpr
-- On CLOSE reduce production coqexpr -> IF coqexpr THEN coqexpr ELSE coqexpr
-- On BYDEF reduce production coqexpr -> IF coqexpr THEN coqexpr ELSE coqexpr
-- On BY reduce production coqexpr -> IF coqexpr THEN coqexpr ELSE coqexpr

State 35:
## Known stack suffix:
## LBRACKET IDENT COLONEQUAL coqexpr
## LR(1) items:
coqexpr -> coqexpr . ARROW coqexpr [ SLASHBACKSLASH RBRACKET DOUBLEARROW BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . DOUBLEARROW coqexpr [ SLASHBACKSLASH RBRACKET DOUBLEARROW BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . SLASHBACKSLASH coqexpr [ SLASHBACKSLASH RBRACKET DOUBLEARROW BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . BACKSLASHSLASH coqexpr [ SLASHBACKSLASH RBRACKET DOUBLEARROW BACKSLASHSLASH ARROW ]
coqexpr -> LBRACKET IDENT COLONEQUAL coqexpr . RBRACKET coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
## Transitions:
-- On SLASHBACKSLASH shift to state 21
-- On RBRACKET shift to state 36
-- On DOUBLEARROW shift to state 24
-- On BACKSLASHSLASH shift to state 26
-- On ARROW shift to state 28
## Reductions:

State 36:
## Known stack suffix:
## LBRACKET IDENT COLONEQUAL coqexpr RBRACKET
## LR(1) items:
coqexpr -> LBRACKET IDENT COLONEQUAL coqexpr RBRACKET . coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
## Transitions:
-- On TILDE shift to state 4
-- On OPEN shift to state 5
-- On LET shift to state 7
-- On LBRACKET shift to state 10
-- On IF shift to state 13
-- On IDENT shift to state 14
-- On FORALL shift to state 15
-- On coqexpr shift to state 37
-- On coqapplication shift to state 23
## Reductions:

State 37:
## Known stack suffix:
## LBRACKET IDENT COLONEQUAL coqexpr RBRACKET coqexpr
## LR(1) items:
coqexpr -> coqexpr . ARROW coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . DOUBLEARROW coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . SLASHBACKSLASH coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . BACKSLASHSLASH coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> LBRACKET IDENT COLONEQUAL coqexpr RBRACKET coqexpr . [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
## Transitions:
-- On SLASHBACKSLASH shift to state 21
-- On DOUBLEARROW shift to state 24
-- On BACKSLASHSLASH shift to state 26
-- On ARROW shift to state 28
## Reductions:
-- On TILDE reduce production coqexpr -> LBRACKET IDENT COLONEQUAL coqexpr RBRACKET coqexpr
-- On THEN reduce production coqexpr -> LBRACKET IDENT COLONEQUAL coqexpr RBRACKET coqexpr
-- On STRING reduce production coqexpr -> LBRACKET IDENT COLONEQUAL coqexpr RBRACKET coqexpr
-- On RBRACKET reduce production coqexpr -> LBRACKET IDENT COLONEQUAL coqexpr RBRACKET coqexpr
-- On QED reduce production coqexpr -> LBRACKET IDENT COLONEQUAL coqexpr RBRACKET coqexpr
-- On OPEN reduce production coqexpr -> LBRACKET IDENT COLONEQUAL coqexpr RBRACKET coqexpr
-- On LET reduce production coqexpr -> LBRACKET IDENT COLONEQUAL coqexpr RBRACKET coqexpr
-- On LBRACKET reduce production coqexpr -> LBRACKET IDENT COLONEQUAL coqexpr RBRACKET coqexpr
-- On IN reduce production coqexpr -> LBRACKET IDENT COLONEQUAL coqexpr RBRACKET coqexpr
-- On IF reduce production coqexpr -> LBRACKET IDENT COLONEQUAL coqexpr RBRACKET coqexpr
-- On IDENT reduce production coqexpr -> LBRACKET IDENT COLONEQUAL coqexpr RBRACKET coqexpr
-- On FORALL reduce production coqexpr -> LBRACKET IDENT COLONEQUAL coqexpr RBRACKET coqexpr
-- On EQUAL reduce production coqexpr -> LBRACKET IDENT COLONEQUAL coqexpr RBRACKET coqexpr
-- On ENDPROOF reduce production coqexpr -> LBRACKET IDENT COLONEQUAL coqexpr RBRACKET coqexpr
-- On ELSE reduce production coqexpr -> LBRACKET IDENT COLONEQUAL coqexpr RBRACKET coqexpr
-- On COLONEQUAL reduce production coqexpr -> LBRACKET IDENT COLONEQUAL coqexpr RBRACKET coqexpr
-- On CLOSE reduce production coqexpr -> LBRACKET IDENT COLONEQUAL coqexpr RBRACKET coqexpr
-- On BYDEF reduce production coqexpr -> LBRACKET IDENT COLONEQUAL coqexpr RBRACKET coqexpr
-- On BY reduce production coqexpr -> LBRACKET IDENT COLONEQUAL coqexpr RBRACKET coqexpr

State 38:
## Known stack suffix:
## LET IDENT COLONEQUAL coqexpr
## LR(1) items:
coqexpr -> coqexpr . ARROW coqexpr [ SLASHBACKSLASH IN DOUBLEARROW BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . DOUBLEARROW coqexpr [ SLASHBACKSLASH IN DOUBLEARROW BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . SLASHBACKSLASH coqexpr [ SLASHBACKSLASH IN DOUBLEARROW BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . BACKSLASHSLASH coqexpr [ SLASHBACKSLASH IN DOUBLEARROW BACKSLASHSLASH ARROW ]
coqexpr -> LET IDENT COLONEQUAL coqexpr . IN coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
## Transitions:
-- On SLASHBACKSLASH shift to state 21
-- On IN shift to state 39
-- On DOUBLEARROW shift to state 24
-- On BACKSLASHSLASH shift to state 26
-- On ARROW shift to state 28
## Reductions:

State 39:
## Known stack suffix:
## LET IDENT COLONEQUAL coqexpr IN
## LR(1) items:
coqexpr -> LET IDENT COLONEQUAL coqexpr IN . coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
## Transitions:
-- On TILDE shift to state 4
-- On OPEN shift to state 5
-- On LET shift to state 7
-- On LBRACKET shift to state 10
-- On IF shift to state 13
-- On IDENT shift to state 14
-- On FORALL shift to state 15
-- On coqexpr shift to state 40
-- On coqapplication shift to state 23
## Reductions:

State 40:
## Known stack suffix:
## LET IDENT COLONEQUAL coqexpr IN coqexpr
## LR(1) items:
coqexpr -> coqexpr . ARROW coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . DOUBLEARROW coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . SLASHBACKSLASH coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . BACKSLASHSLASH coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> LET IDENT COLONEQUAL coqexpr IN coqexpr . [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
## Transitions:
-- On SLASHBACKSLASH shift to state 21
-- On DOUBLEARROW shift to state 24
-- On BACKSLASHSLASH shift to state 26
-- On ARROW shift to state 28
## Reductions:
-- On TILDE reduce production coqexpr -> LET IDENT COLONEQUAL coqexpr IN coqexpr
-- On THEN reduce production coqexpr -> LET IDENT COLONEQUAL coqexpr IN coqexpr
-- On STRING reduce production coqexpr -> LET IDENT COLONEQUAL coqexpr IN coqexpr
-- On RBRACKET reduce production coqexpr -> LET IDENT COLONEQUAL coqexpr IN coqexpr
-- On QED reduce production coqexpr -> LET IDENT COLONEQUAL coqexpr IN coqexpr
-- On OPEN reduce production coqexpr -> LET IDENT COLONEQUAL coqexpr IN coqexpr
-- On LET reduce production coqexpr -> LET IDENT COLONEQUAL coqexpr IN coqexpr
-- On LBRACKET reduce production coqexpr -> LET IDENT COLONEQUAL coqexpr IN coqexpr
-- On IN reduce production coqexpr -> LET IDENT COLONEQUAL coqexpr IN coqexpr
-- On IF reduce production coqexpr -> LET IDENT COLONEQUAL coqexpr IN coqexpr
-- On IDENT reduce production coqexpr -> LET IDENT COLONEQUAL coqexpr IN coqexpr
-- On FORALL reduce production coqexpr -> LET IDENT COLONEQUAL coqexpr IN coqexpr
-- On EQUAL reduce production coqexpr -> LET IDENT COLONEQUAL coqexpr IN coqexpr
-- On ENDPROOF reduce production coqexpr -> LET IDENT COLONEQUAL coqexpr IN coqexpr
-- On ELSE reduce production coqexpr -> LET IDENT COLONEQUAL coqexpr IN coqexpr
-- On COLONEQUAL reduce production coqexpr -> LET IDENT COLONEQUAL coqexpr IN coqexpr
-- On CLOSE reduce production coqexpr -> LET IDENT COLONEQUAL coqexpr IN coqexpr
-- On BYDEF reduce production coqexpr -> LET IDENT COLONEQUAL coqexpr IN coqexpr
-- On BY reduce production coqexpr -> LET IDENT COLONEQUAL coqexpr IN coqexpr

State 41:
## Known stack suffix:
## OPEN OR coqexpr
## LR(1) items:
coqexpr -> OPEN OR coqexpr . coqexpr CLOSE [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . ARROW coqexpr [ TILDE SLASHBACKSLASH OPEN LET LBRACKET IF IDENT FORALL DOUBLEARROW BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . DOUBLEARROW coqexpr [ TILDE SLASHBACKSLASH OPEN LET LBRACKET IF IDENT FORALL DOUBLEARROW BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . SLASHBACKSLASH coqexpr [ TILDE SLASHBACKSLASH OPEN LET LBRACKET IF IDENT FORALL DOUBLEARROW BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . BACKSLASHSLASH coqexpr [ TILDE SLASHBACKSLASH OPEN LET LBRACKET IF IDENT FORALL DOUBLEARROW BACKSLASHSLASH ARROW ]
## Transitions:
-- On TILDE shift to state 4
-- On SLASHBACKSLASH shift to state 21
-- On OPEN shift to state 5
-- On LET shift to state 7
-- On LBRACKET shift to state 10
-- On IF shift to state 13
-- On IDENT shift to state 14
-- On FORALL shift to state 15
-- On DOUBLEARROW shift to state 24
-- On BACKSLASHSLASH shift to state 26
-- On ARROW shift to state 28
-- On coqexpr shift to state 42
-- On coqapplication shift to state 23
## Reductions:

State 42:
## Known stack suffix:
## OPEN OR coqexpr coqexpr
## LR(1) items:
coqexpr -> OPEN OR coqexpr coqexpr . CLOSE [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . ARROW coqexpr [ SLASHBACKSLASH DOUBLEARROW CLOSE BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . DOUBLEARROW coqexpr [ SLASHBACKSLASH DOUBLEARROW CLOSE BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . SLASHBACKSLASH coqexpr [ SLASHBACKSLASH DOUBLEARROW CLOSE BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . BACKSLASHSLASH coqexpr [ SLASHBACKSLASH DOUBLEARROW CLOSE BACKSLASHSLASH ARROW ]
## Transitions:
-- On SLASHBACKSLASH shift to state 21
-- On DOUBLEARROW shift to state 24
-- On CLOSE shift to state 43
-- On BACKSLASHSLASH shift to state 26
-- On ARROW shift to state 28
## Reductions:

State 43:
## Known stack suffix:
## OPEN OR coqexpr coqexpr CLOSE
## LR(1) items:
coqexpr -> OPEN OR coqexpr coqexpr CLOSE . [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
## Transitions:
## Reductions:
-- On TILDE reduce production coqexpr -> OPEN OR coqexpr coqexpr CLOSE
-- On THEN reduce production coqexpr -> OPEN OR coqexpr coqexpr CLOSE
-- On STRING reduce production coqexpr -> OPEN OR coqexpr coqexpr CLOSE
-- On SLASHBACKSLASH reduce production coqexpr -> OPEN OR coqexpr coqexpr CLOSE
-- On RBRACKET reduce production coqexpr -> OPEN OR coqexpr coqexpr CLOSE
-- On QED reduce production coqexpr -> OPEN OR coqexpr coqexpr CLOSE
-- On OPEN reduce production coqexpr -> OPEN OR coqexpr coqexpr CLOSE
-- On LET reduce production coqexpr -> OPEN OR coqexpr coqexpr CLOSE
-- On LBRACKET reduce production coqexpr -> OPEN OR coqexpr coqexpr CLOSE
-- On IN reduce production coqexpr -> OPEN OR coqexpr coqexpr CLOSE
-- On IF reduce production coqexpr -> OPEN OR coqexpr coqexpr CLOSE
-- On IDENT reduce production coqexpr -> OPEN OR coqexpr coqexpr CLOSE
-- On FORALL reduce production coqexpr -> OPEN OR coqexpr coqexpr CLOSE
-- On EQUAL reduce production coqexpr -> OPEN OR coqexpr coqexpr CLOSE
-- On ENDPROOF reduce production coqexpr -> OPEN OR coqexpr coqexpr CLOSE
-- On ELSE reduce production coqexpr -> OPEN OR coqexpr coqexpr CLOSE
-- On DOUBLEARROW reduce production coqexpr -> OPEN OR coqexpr coqexpr CLOSE
-- On COLONEQUAL reduce production coqexpr -> OPEN OR coqexpr coqexpr CLOSE
-- On CLOSE reduce production coqexpr -> OPEN OR coqexpr coqexpr CLOSE
-- On BYDEF reduce production coqexpr -> OPEN OR coqexpr coqexpr CLOSE
-- On BY reduce production coqexpr -> OPEN OR coqexpr coqexpr CLOSE
-- On BACKSLASHSLASH reduce production coqexpr -> OPEN OR coqexpr coqexpr CLOSE
-- On ARROW reduce production coqexpr -> OPEN OR coqexpr coqexpr CLOSE

State 44:
## Known stack suffix:
## OPEN IDENT
## LR(1) items:
coqapplication -> OPEN IDENT . coqexpr_list1 CLOSE [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> OPEN IDENT . COLON IDENT CLOSE coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> IDENT . [ SLASHBACKSLASH EQUAL DOUBLEARROW CLOSE BACKSLASHSLASH ARROW ]
## Transitions:
-- On TILDE shift to state 4
-- On OPEN shift to state 5
-- On LET shift to state 7
-- On LBRACKET shift to state 10
-- On IF shift to state 13
-- On IDENT shift to state 14
-- On FORALL shift to state 15
-- On COLON shift to state 45
-- On coqexpr_list1 shift to state 49
-- On coqexpr shift to state 51
-- On coqapplication shift to state 23
## Reductions:
-- On SLASHBACKSLASH reduce production coqexpr -> IDENT
-- On EQUAL reduce production coqexpr -> IDENT
-- On DOUBLEARROW reduce production coqexpr -> IDENT
-- On CLOSE reduce production coqexpr -> IDENT
-- On BACKSLASHSLASH reduce production coqexpr -> IDENT
-- On ARROW reduce production coqexpr -> IDENT

State 45:
## Known stack suffix:
## OPEN IDENT COLON
## LR(1) items:
coqexpr -> OPEN IDENT COLON . IDENT CLOSE coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
## Transitions:
-- On IDENT shift to state 46
## Reductions:

State 46:
## Known stack suffix:
## OPEN IDENT COLON IDENT
## LR(1) items:
coqexpr -> OPEN IDENT COLON IDENT . CLOSE coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
## Transitions:
-- On CLOSE shift to state 47
## Reductions:

State 47:
## Known stack suffix:
## OPEN IDENT COLON IDENT CLOSE
## LR(1) items:
coqexpr -> OPEN IDENT COLON IDENT CLOSE . coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
## Transitions:
-- On TILDE shift to state 4
-- On OPEN shift to state 5
-- On LET shift to state 7
-- On LBRACKET shift to state 10
-- On IF shift to state 13
-- On IDENT shift to state 14
-- On FORALL shift to state 15
-- On coqexpr shift to state 48
-- On coqapplication shift to state 23
## Reductions:

State 48:
## Known stack suffix:
## OPEN IDENT COLON IDENT CLOSE coqexpr
## LR(1) items:
coqexpr -> OPEN IDENT COLON IDENT CLOSE coqexpr . [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . ARROW coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . DOUBLEARROW coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . SLASHBACKSLASH coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . BACKSLASHSLASH coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
## Transitions:
-- On SLASHBACKSLASH shift to state 21
-- On DOUBLEARROW shift to state 24
-- On BACKSLASHSLASH shift to state 26
-- On ARROW shift to state 28
## Reductions:
-- On TILDE reduce production coqexpr -> OPEN IDENT COLON IDENT CLOSE coqexpr
-- On THEN reduce production coqexpr -> OPEN IDENT COLON IDENT CLOSE coqexpr
-- On STRING reduce production coqexpr -> OPEN IDENT COLON IDENT CLOSE coqexpr
-- On RBRACKET reduce production coqexpr -> OPEN IDENT COLON IDENT CLOSE coqexpr
-- On QED reduce production coqexpr -> OPEN IDENT COLON IDENT CLOSE coqexpr
-- On OPEN reduce production coqexpr -> OPEN IDENT COLON IDENT CLOSE coqexpr
-- On LET reduce production coqexpr -> OPEN IDENT COLON IDENT CLOSE coqexpr
-- On LBRACKET reduce production coqexpr -> OPEN IDENT COLON IDENT CLOSE coqexpr
-- On IN reduce production coqexpr -> OPEN IDENT COLON IDENT CLOSE coqexpr
-- On IF reduce production coqexpr -> OPEN IDENT COLON IDENT CLOSE coqexpr
-- On IDENT reduce production coqexpr -> OPEN IDENT COLON IDENT CLOSE coqexpr
-- On FORALL reduce production coqexpr -> OPEN IDENT COLON IDENT CLOSE coqexpr
-- On EQUAL reduce production coqexpr -> OPEN IDENT COLON IDENT CLOSE coqexpr
-- On ENDPROOF reduce production coqexpr -> OPEN IDENT COLON IDENT CLOSE coqexpr
-- On ELSE reduce production coqexpr -> OPEN IDENT COLON IDENT CLOSE coqexpr
-- On COLONEQUAL reduce production coqexpr -> OPEN IDENT COLON IDENT CLOSE coqexpr
-- On CLOSE reduce production coqexpr -> OPEN IDENT COLON IDENT CLOSE coqexpr
-- On BYDEF reduce production coqexpr -> OPEN IDENT COLON IDENT CLOSE coqexpr
-- On BY reduce production coqexpr -> OPEN IDENT COLON IDENT CLOSE coqexpr

State 49:
## Known stack suffix:
## OPEN IDENT coqexpr_list1
## LR(1) items:
coqapplication -> OPEN IDENT coqexpr_list1 . CLOSE [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
## Transitions:
-- On CLOSE shift to state 50
## Reductions:

State 50:
## Known stack suffix:
## OPEN IDENT coqexpr_list1 CLOSE
## LR(1) items:
coqapplication -> OPEN IDENT coqexpr_list1 CLOSE . [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
## Transitions:
## Reductions:
-- On TILDE reduce production coqapplication -> OPEN IDENT coqexpr_list1 CLOSE
-- On THEN reduce production coqapplication -> OPEN IDENT coqexpr_list1 CLOSE
-- On STRING reduce production coqapplication -> OPEN IDENT coqexpr_list1 CLOSE
-- On SLASHBACKSLASH reduce production coqapplication -> OPEN IDENT coqexpr_list1 CLOSE
-- On RBRACKET reduce production coqapplication -> OPEN IDENT coqexpr_list1 CLOSE
-- On QED reduce production coqapplication -> OPEN IDENT coqexpr_list1 CLOSE
-- On OPEN reduce production coqapplication -> OPEN IDENT coqexpr_list1 CLOSE
-- On LET reduce production coqapplication -> OPEN IDENT coqexpr_list1 CLOSE
-- On LBRACKET reduce production coqapplication -> OPEN IDENT coqexpr_list1 CLOSE
-- On IN reduce production coqapplication -> OPEN IDENT coqexpr_list1 CLOSE
-- On IF reduce production coqapplication -> OPEN IDENT coqexpr_list1 CLOSE
-- On IDENT reduce production coqapplication -> OPEN IDENT coqexpr_list1 CLOSE
-- On FORALL reduce production coqapplication -> OPEN IDENT coqexpr_list1 CLOSE
-- On EQUAL reduce production coqapplication -> OPEN IDENT coqexpr_list1 CLOSE
-- On ENDPROOF reduce production coqapplication -> OPEN IDENT coqexpr_list1 CLOSE
-- On ELSE reduce production coqapplication -> OPEN IDENT coqexpr_list1 CLOSE
-- On DOUBLEARROW reduce production coqapplication -> OPEN IDENT coqexpr_list1 CLOSE
-- On COLONEQUAL reduce production coqapplication -> OPEN IDENT coqexpr_list1 CLOSE
-- On CLOSE reduce production coqapplication -> OPEN IDENT coqexpr_list1 CLOSE
-- On BYDEF reduce production coqapplication -> OPEN IDENT coqexpr_list1 CLOSE
-- On BY reduce production coqapplication -> OPEN IDENT coqexpr_list1 CLOSE
-- On BACKSLASHSLASH reduce production coqapplication -> OPEN IDENT coqexpr_list1 CLOSE
-- On ARROW reduce production coqapplication -> OPEN IDENT coqexpr_list1 CLOSE

State 51:
## Known stack suffix:
## coqexpr
## LR(1) items:
coqexpr -> coqexpr . ARROW coqexpr [ TILDE SLASHBACKSLASH OPEN LET LBRACKET IF IDENT FORALL DOUBLEARROW CLOSE BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . DOUBLEARROW coqexpr [ TILDE SLASHBACKSLASH OPEN LET LBRACKET IF IDENT FORALL DOUBLEARROW CLOSE BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . SLASHBACKSLASH coqexpr [ TILDE SLASHBACKSLASH OPEN LET LBRACKET IF IDENT FORALL DOUBLEARROW CLOSE BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . BACKSLASHSLASH coqexpr [ TILDE SLASHBACKSLASH OPEN LET LBRACKET IF IDENT FORALL DOUBLEARROW CLOSE BACKSLASHSLASH ARROW ]
coqexpr_list1 -> coqexpr . [ CLOSE ]
coqexpr_list1 -> coqexpr . coqexpr_list1 [ CLOSE ]
## Transitions:
-- On TILDE shift to state 4
-- On SLASHBACKSLASH shift to state 21
-- On OPEN shift to state 5
-- On LET shift to state 7
-- On LBRACKET shift to state 10
-- On IF shift to state 13
-- On IDENT shift to state 14
-- On FORALL shift to state 15
-- On DOUBLEARROW shift to state 24
-- On BACKSLASHSLASH shift to state 26
-- On ARROW shift to state 28
-- On coqexpr_list1 shift to state 52
-- On coqexpr shift to state 51
-- On coqapplication shift to state 23
## Reductions:
-- On CLOSE reduce production coqexpr_list1 -> coqexpr

State 52:
## Known stack suffix:
## coqexpr coqexpr_list1
## LR(1) items:
coqexpr_list1 -> coqexpr coqexpr_list1 . [ CLOSE ]
## Transitions:
## Reductions:
-- On CLOSE reduce production coqexpr_list1 -> coqexpr coqexpr_list1

State 53:
## Known stack suffix:
## OPEN AND
## LR(1) items:
coqexpr -> OPEN AND . coqexpr coqexpr CLOSE [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
## Transitions:
-- On TILDE shift to state 4
-- On OPEN shift to state 5
-- On LET shift to state 7
-- On LBRACKET shift to state 10
-- On IF shift to state 13
-- On IDENT shift to state 14
-- On FORALL shift to state 15
-- On coqexpr shift to state 54
-- On coqapplication shift to state 23
## Reductions:

State 54:
## Known stack suffix:
## OPEN AND coqexpr
## LR(1) items:
coqexpr -> OPEN AND coqexpr . coqexpr CLOSE [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . ARROW coqexpr [ TILDE SLASHBACKSLASH OPEN LET LBRACKET IF IDENT FORALL DOUBLEARROW BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . DOUBLEARROW coqexpr [ TILDE SLASHBACKSLASH OPEN LET LBRACKET IF IDENT FORALL DOUBLEARROW BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . SLASHBACKSLASH coqexpr [ TILDE SLASHBACKSLASH OPEN LET LBRACKET IF IDENT FORALL DOUBLEARROW BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . BACKSLASHSLASH coqexpr [ TILDE SLASHBACKSLASH OPEN LET LBRACKET IF IDENT FORALL DOUBLEARROW BACKSLASHSLASH ARROW ]
## Transitions:
-- On TILDE shift to state 4
-- On SLASHBACKSLASH shift to state 21
-- On OPEN shift to state 5
-- On LET shift to state 7
-- On LBRACKET shift to state 10
-- On IF shift to state 13
-- On IDENT shift to state 14
-- On FORALL shift to state 15
-- On DOUBLEARROW shift to state 24
-- On BACKSLASHSLASH shift to state 26
-- On ARROW shift to state 28
-- On coqexpr shift to state 55
-- On coqapplication shift to state 23
## Reductions:

State 55:
## Known stack suffix:
## OPEN AND coqexpr coqexpr
## LR(1) items:
coqexpr -> OPEN AND coqexpr coqexpr . CLOSE [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . ARROW coqexpr [ SLASHBACKSLASH DOUBLEARROW CLOSE BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . DOUBLEARROW coqexpr [ SLASHBACKSLASH DOUBLEARROW CLOSE BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . SLASHBACKSLASH coqexpr [ SLASHBACKSLASH DOUBLEARROW CLOSE BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . BACKSLASHSLASH coqexpr [ SLASHBACKSLASH DOUBLEARROW CLOSE BACKSLASHSLASH ARROW ]
## Transitions:
-- On SLASHBACKSLASH shift to state 21
-- On DOUBLEARROW shift to state 24
-- On CLOSE shift to state 56
-- On BACKSLASHSLASH shift to state 26
-- On ARROW shift to state 28
## Reductions:

State 56:
## Known stack suffix:
## OPEN AND coqexpr coqexpr CLOSE
## LR(1) items:
coqexpr -> OPEN AND coqexpr coqexpr CLOSE . [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
## Transitions:
## Reductions:
-- On TILDE reduce production coqexpr -> OPEN AND coqexpr coqexpr CLOSE
-- On THEN reduce production coqexpr -> OPEN AND coqexpr coqexpr CLOSE
-- On STRING reduce production coqexpr -> OPEN AND coqexpr coqexpr CLOSE
-- On SLASHBACKSLASH reduce production coqexpr -> OPEN AND coqexpr coqexpr CLOSE
-- On RBRACKET reduce production coqexpr -> OPEN AND coqexpr coqexpr CLOSE
-- On QED reduce production coqexpr -> OPEN AND coqexpr coqexpr CLOSE
-- On OPEN reduce production coqexpr -> OPEN AND coqexpr coqexpr CLOSE
-- On LET reduce production coqexpr -> OPEN AND coqexpr coqexpr CLOSE
-- On LBRACKET reduce production coqexpr -> OPEN AND coqexpr coqexpr CLOSE
-- On IN reduce production coqexpr -> OPEN AND coqexpr coqexpr CLOSE
-- On IF reduce production coqexpr -> OPEN AND coqexpr coqexpr CLOSE
-- On IDENT reduce production coqexpr -> OPEN AND coqexpr coqexpr CLOSE
-- On FORALL reduce production coqexpr -> OPEN AND coqexpr coqexpr CLOSE
-- On EQUAL reduce production coqexpr -> OPEN AND coqexpr coqexpr CLOSE
-- On ENDPROOF reduce production coqexpr -> OPEN AND coqexpr coqexpr CLOSE
-- On ELSE reduce production coqexpr -> OPEN AND coqexpr coqexpr CLOSE
-- On DOUBLEARROW reduce production coqexpr -> OPEN AND coqexpr coqexpr CLOSE
-- On COLONEQUAL reduce production coqexpr -> OPEN AND coqexpr coqexpr CLOSE
-- On CLOSE reduce production coqexpr -> OPEN AND coqexpr coqexpr CLOSE
-- On BYDEF reduce production coqexpr -> OPEN AND coqexpr coqexpr CLOSE
-- On BY reduce production coqexpr -> OPEN AND coqexpr coqexpr CLOSE
-- On BACKSLASHSLASH reduce production coqexpr -> OPEN AND coqexpr coqexpr CLOSE
-- On ARROW reduce production coqexpr -> OPEN AND coqexpr coqexpr CLOSE

State 57:
## Known stack suffix:
## OPEN coqexpr
## LR(1) items:
coqexpr -> OPEN coqexpr . CLOSE [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> OPEN coqexpr . EQUAL coqexpr CLOSE [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . ARROW coqexpr [ SLASHBACKSLASH EQUAL DOUBLEARROW CLOSE BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . DOUBLEARROW coqexpr [ SLASHBACKSLASH EQUAL DOUBLEARROW CLOSE BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . SLASHBACKSLASH coqexpr [ SLASHBACKSLASH EQUAL DOUBLEARROW CLOSE BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . BACKSLASHSLASH coqexpr [ SLASHBACKSLASH EQUAL DOUBLEARROW CLOSE BACKSLASHSLASH ARROW ]
## Transitions:
-- On SLASHBACKSLASH shift to state 21
-- On EQUAL shift to state 58
-- On DOUBLEARROW shift to state 24
-- On CLOSE shift to state 61
-- On BACKSLASHSLASH shift to state 26
-- On ARROW shift to state 28
## Reductions:

State 58:
## Known stack suffix:
## OPEN coqexpr EQUAL
## LR(1) items:
coqexpr -> OPEN coqexpr EQUAL . coqexpr CLOSE [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
## Transitions:
-- On TILDE shift to state 4
-- On OPEN shift to state 5
-- On LET shift to state 7
-- On LBRACKET shift to state 10
-- On IF shift to state 13
-- On IDENT shift to state 14
-- On FORALL shift to state 15
-- On coqexpr shift to state 59
-- On coqapplication shift to state 23
## Reductions:

State 59:
## Known stack suffix:
## OPEN coqexpr EQUAL coqexpr
## LR(1) items:
coqexpr -> OPEN coqexpr EQUAL coqexpr . CLOSE [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . ARROW coqexpr [ SLASHBACKSLASH DOUBLEARROW CLOSE BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . DOUBLEARROW coqexpr [ SLASHBACKSLASH DOUBLEARROW CLOSE BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . SLASHBACKSLASH coqexpr [ SLASHBACKSLASH DOUBLEARROW CLOSE BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . BACKSLASHSLASH coqexpr [ SLASHBACKSLASH DOUBLEARROW CLOSE BACKSLASHSLASH ARROW ]
## Transitions:
-- On SLASHBACKSLASH shift to state 21
-- On DOUBLEARROW shift to state 24
-- On CLOSE shift to state 60
-- On BACKSLASHSLASH shift to state 26
-- On ARROW shift to state 28
## Reductions:

State 60:
## Known stack suffix:
## OPEN coqexpr EQUAL coqexpr CLOSE
## LR(1) items:
coqexpr -> OPEN coqexpr EQUAL coqexpr CLOSE . [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
## Transitions:
## Reductions:
-- On TILDE reduce production coqexpr -> OPEN coqexpr EQUAL coqexpr CLOSE
-- On THEN reduce production coqexpr -> OPEN coqexpr EQUAL coqexpr CLOSE
-- On STRING reduce production coqexpr -> OPEN coqexpr EQUAL coqexpr CLOSE
-- On SLASHBACKSLASH reduce production coqexpr -> OPEN coqexpr EQUAL coqexpr CLOSE
-- On RBRACKET reduce production coqexpr -> OPEN coqexpr EQUAL coqexpr CLOSE
-- On QED reduce production coqexpr -> OPEN coqexpr EQUAL coqexpr CLOSE
-- On OPEN reduce production coqexpr -> OPEN coqexpr EQUAL coqexpr CLOSE
-- On LET reduce production coqexpr -> OPEN coqexpr EQUAL coqexpr CLOSE
-- On LBRACKET reduce production coqexpr -> OPEN coqexpr EQUAL coqexpr CLOSE
-- On IN reduce production coqexpr -> OPEN coqexpr EQUAL coqexpr CLOSE
-- On IF reduce production coqexpr -> OPEN coqexpr EQUAL coqexpr CLOSE
-- On IDENT reduce production coqexpr -> OPEN coqexpr EQUAL coqexpr CLOSE
-- On FORALL reduce production coqexpr -> OPEN coqexpr EQUAL coqexpr CLOSE
-- On EQUAL reduce production coqexpr -> OPEN coqexpr EQUAL coqexpr CLOSE
-- On ENDPROOF reduce production coqexpr -> OPEN coqexpr EQUAL coqexpr CLOSE
-- On ELSE reduce production coqexpr -> OPEN coqexpr EQUAL coqexpr CLOSE
-- On DOUBLEARROW reduce production coqexpr -> OPEN coqexpr EQUAL coqexpr CLOSE
-- On COLONEQUAL reduce production coqexpr -> OPEN coqexpr EQUAL coqexpr CLOSE
-- On CLOSE reduce production coqexpr -> OPEN coqexpr EQUAL coqexpr CLOSE
-- On BYDEF reduce production coqexpr -> OPEN coqexpr EQUAL coqexpr CLOSE
-- On BY reduce production coqexpr -> OPEN coqexpr EQUAL coqexpr CLOSE
-- On BACKSLASHSLASH reduce production coqexpr -> OPEN coqexpr EQUAL coqexpr CLOSE
-- On ARROW reduce production coqexpr -> OPEN coqexpr EQUAL coqexpr CLOSE

State 61:
## Known stack suffix:
## OPEN coqexpr CLOSE
## LR(1) items:
coqexpr -> OPEN coqexpr CLOSE . [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
## Transitions:
## Reductions:
-- On TILDE reduce production coqexpr -> OPEN coqexpr CLOSE
-- On THEN reduce production coqexpr -> OPEN coqexpr CLOSE
-- On STRING reduce production coqexpr -> OPEN coqexpr CLOSE
-- On SLASHBACKSLASH reduce production coqexpr -> OPEN coqexpr CLOSE
-- On RBRACKET reduce production coqexpr -> OPEN coqexpr CLOSE
-- On QED reduce production coqexpr -> OPEN coqexpr CLOSE
-- On OPEN reduce production coqexpr -> OPEN coqexpr CLOSE
-- On LET reduce production coqexpr -> OPEN coqexpr CLOSE
-- On LBRACKET reduce production coqexpr -> OPEN coqexpr CLOSE
-- On IN reduce production coqexpr -> OPEN coqexpr CLOSE
-- On IF reduce production coqexpr -> OPEN coqexpr CLOSE
-- On IDENT reduce production coqexpr -> OPEN coqexpr CLOSE
-- On FORALL reduce production coqexpr -> OPEN coqexpr CLOSE
-- On EQUAL reduce production coqexpr -> OPEN coqexpr CLOSE
-- On ENDPROOF reduce production coqexpr -> OPEN coqexpr CLOSE
-- On ELSE reduce production coqexpr -> OPEN coqexpr CLOSE
-- On DOUBLEARROW reduce production coqexpr -> OPEN coqexpr CLOSE
-- On COLONEQUAL reduce production coqexpr -> OPEN coqexpr CLOSE
-- On CLOSE reduce production coqexpr -> OPEN coqexpr CLOSE
-- On BYDEF reduce production coqexpr -> OPEN coqexpr CLOSE
-- On BY reduce production coqexpr -> OPEN coqexpr CLOSE
-- On BACKSLASHSLASH reduce production coqexpr -> OPEN coqexpr CLOSE
-- On ARROW reduce production coqexpr -> OPEN coqexpr CLOSE

State 62:
## Known stack suffix:
## OPEN coqapplication
## LR(1) items:
coqapplication -> OPEN coqapplication . coqexpr_list1 CLOSE [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqapplication . [ SLASHBACKSLASH EQUAL DOUBLEARROW CLOSE BACKSLASHSLASH ARROW ]
## Transitions:
-- On TILDE shift to state 4
-- On OPEN shift to state 5
-- On LET shift to state 7
-- On LBRACKET shift to state 10
-- On IF shift to state 13
-- On IDENT shift to state 14
-- On FORALL shift to state 15
-- On coqexpr_list1 shift to state 63
-- On coqexpr shift to state 51
-- On coqapplication shift to state 23
## Reductions:
-- On SLASHBACKSLASH reduce production coqexpr -> coqapplication
-- On EQUAL reduce production coqexpr -> coqapplication
-- On DOUBLEARROW reduce production coqexpr -> coqapplication
-- On CLOSE reduce production coqexpr -> coqapplication
-- On BACKSLASHSLASH reduce production coqexpr -> coqapplication
-- On ARROW reduce production coqexpr -> coqapplication

State 63:
## Known stack suffix:
## OPEN coqapplication coqexpr_list1
## LR(1) items:
coqapplication -> OPEN coqapplication coqexpr_list1 . CLOSE [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
## Transitions:
-- On CLOSE shift to state 64
## Reductions:

State 64:
## Known stack suffix:
## OPEN coqapplication coqexpr_list1 CLOSE
## LR(1) items:
coqapplication -> OPEN coqapplication coqexpr_list1 CLOSE . [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
## Transitions:
## Reductions:
-- On TILDE reduce production coqapplication -> OPEN coqapplication coqexpr_list1 CLOSE
-- On THEN reduce production coqapplication -> OPEN coqapplication coqexpr_list1 CLOSE
-- On STRING reduce production coqapplication -> OPEN coqapplication coqexpr_list1 CLOSE
-- On SLASHBACKSLASH reduce production coqapplication -> OPEN coqapplication coqexpr_list1 CLOSE
-- On RBRACKET reduce production coqapplication -> OPEN coqapplication coqexpr_list1 CLOSE
-- On QED reduce production coqapplication -> OPEN coqapplication coqexpr_list1 CLOSE
-- On OPEN reduce production coqapplication -> OPEN coqapplication coqexpr_list1 CLOSE
-- On LET reduce production coqapplication -> OPEN coqapplication coqexpr_list1 CLOSE
-- On LBRACKET reduce production coqapplication -> OPEN coqapplication coqexpr_list1 CLOSE
-- On IN reduce production coqapplication -> OPEN coqapplication coqexpr_list1 CLOSE
-- On IF reduce production coqapplication -> OPEN coqapplication coqexpr_list1 CLOSE
-- On IDENT reduce production coqapplication -> OPEN coqapplication coqexpr_list1 CLOSE
-- On FORALL reduce production coqapplication -> OPEN coqapplication coqexpr_list1 CLOSE
-- On EQUAL reduce production coqapplication -> OPEN coqapplication coqexpr_list1 CLOSE
-- On ENDPROOF reduce production coqapplication -> OPEN coqapplication coqexpr_list1 CLOSE
-- On ELSE reduce production coqapplication -> OPEN coqapplication coqexpr_list1 CLOSE
-- On DOUBLEARROW reduce production coqapplication -> OPEN coqapplication coqexpr_list1 CLOSE
-- On COLONEQUAL reduce production coqapplication -> OPEN coqapplication coqexpr_list1 CLOSE
-- On CLOSE reduce production coqapplication -> OPEN coqapplication coqexpr_list1 CLOSE
-- On BYDEF reduce production coqapplication -> OPEN coqapplication coqexpr_list1 CLOSE
-- On BY reduce production coqapplication -> OPEN coqapplication coqexpr_list1 CLOSE
-- On BACKSLASHSLASH reduce production coqapplication -> OPEN coqapplication coqexpr_list1 CLOSE
-- On ARROW reduce production coqapplication -> OPEN coqapplication coqexpr_list1 CLOSE

State 65:
## Known stack suffix:
## TILDE coqexpr
## LR(1) items:
coqexpr -> TILDE coqexpr . [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . ARROW coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . DOUBLEARROW coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . SLASHBACKSLASH coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . BACKSLASHSLASH coqexpr [ TILDE THEN STRING SLASHBACKSLASH RBRACKET QED OPEN LET LBRACKET IN IF IDENT FORALL EQUAL ENDPROOF ELSE DOUBLEARROW COLONEQUAL CLOSE BYDEF BY BACKSLASHSLASH ARROW ]
## Transitions:
## Reductions:
-- On TILDE reduce production coqexpr -> TILDE coqexpr
-- On THEN reduce production coqexpr -> TILDE coqexpr
-- On STRING reduce production coqexpr -> TILDE coqexpr
-- On SLASHBACKSLASH reduce production coqexpr -> TILDE coqexpr
-- On RBRACKET reduce production coqexpr -> TILDE coqexpr
-- On QED reduce production coqexpr -> TILDE coqexpr
-- On OPEN reduce production coqexpr -> TILDE coqexpr
-- On LET reduce production coqexpr -> TILDE coqexpr
-- On LBRACKET reduce production coqexpr -> TILDE coqexpr
-- On IN reduce production coqexpr -> TILDE coqexpr
-- On IF reduce production coqexpr -> TILDE coqexpr
-- On IDENT reduce production coqexpr -> TILDE coqexpr
-- On FORALL reduce production coqexpr -> TILDE coqexpr
-- On EQUAL reduce production coqexpr -> TILDE coqexpr
-- On ENDPROOF reduce production coqexpr -> TILDE coqexpr
-- On ELSE reduce production coqexpr -> TILDE coqexpr
-- On DOUBLEARROW reduce production coqexpr -> TILDE coqexpr
-- On COLONEQUAL reduce production coqexpr -> TILDE coqexpr
-- On CLOSE reduce production coqexpr -> TILDE coqexpr
-- On BYDEF reduce production coqexpr -> TILDE coqexpr
-- On BY reduce production coqexpr -> TILDE coqexpr
-- On BACKSLASHSLASH reduce production coqexpr -> TILDE coqexpr
-- On ARROW reduce production coqexpr -> TILDE coqexpr

State 66:
## Known stack suffix:
## LOCAL IDENT COLON coqexpr
## LR(1) items:
coqexpr -> coqexpr . ARROW coqexpr [ SLASHBACKSLASH DOUBLEARROW COLONEQUAL BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . DOUBLEARROW coqexpr [ SLASHBACKSLASH DOUBLEARROW COLONEQUAL BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . SLASHBACKSLASH coqexpr [ SLASHBACKSLASH DOUBLEARROW COLONEQUAL BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . BACKSLASHSLASH coqexpr [ SLASHBACKSLASH DOUBLEARROW COLONEQUAL BACKSLASHSLASH ARROW ]
coqfile -> LOCAL IDENT COLON coqexpr . COLONEQUAL TOBE coqexpr coq_hyp_def_list QED EOF [ # ]
## Transitions:
-- On SLASHBACKSLASH shift to state 21
-- On DOUBLEARROW shift to state 24
-- On COLONEQUAL shift to state 67
-- On BACKSLASHSLASH shift to state 26
-- On ARROW shift to state 28
## Reductions:

State 67:
## Known stack suffix:
## LOCAL IDENT COLON coqexpr COLONEQUAL
## LR(1) items:
coqfile -> LOCAL IDENT COLON coqexpr COLONEQUAL . TOBE coqexpr coq_hyp_def_list QED EOF [ # ]
## Transitions:
-- On TOBE shift to state 68
## Reductions:

State 68:
## Known stack suffix:
## LOCAL IDENT COLON coqexpr COLONEQUAL TOBE
## LR(1) items:
coqfile -> LOCAL IDENT COLON coqexpr COLONEQUAL TOBE . coqexpr coq_hyp_def_list QED EOF [ # ]
## Transitions:
-- On TILDE shift to state 4
-- On OPEN shift to state 5
-- On LET shift to state 7
-- On LBRACKET shift to state 10
-- On IF shift to state 13
-- On IDENT shift to state 14
-- On FORALL shift to state 15
-- On coqexpr shift to state 69
-- On coqapplication shift to state 23
## Reductions:

State 69:
## Known stack suffix:
## LOCAL IDENT COLON coqexpr COLONEQUAL TOBE coqexpr
## LR(1) items:
coqexpr -> coqexpr . ARROW coqexpr [ SLASHBACKSLASH QED DOUBLEARROW BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . DOUBLEARROW coqexpr [ SLASHBACKSLASH QED DOUBLEARROW BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . SLASHBACKSLASH coqexpr [ SLASHBACKSLASH QED DOUBLEARROW BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . BACKSLASHSLASH coqexpr [ SLASHBACKSLASH QED DOUBLEARROW BYDEF BY BACKSLASHSLASH ARROW ]
coqfile -> LOCAL IDENT COLON coqexpr COLONEQUAL TOBE coqexpr . coq_hyp_def_list QED EOF [ # ]
## Transitions:
-- On SLASHBACKSLASH shift to state 21
-- On DOUBLEARROW shift to state 24
-- On BYDEF shift to state 70
-- On BY shift to state 92
-- On BACKSLASHSLASH shift to state 26
-- On ARROW shift to state 28
-- On coq_hyp_def_list shift to state 103
## Reductions:
-- On QED reduce production coq_hyp_def_list ->

State 70:
## Known stack suffix:
## BYDEF
## LR(1) items:
coq_hyp_def_list -> BYDEF . coqdef_list coq_hyp_def_list [ QED ENDPROOF ]
## Transitions:
-- On STRING shift to state 71
-- On IDENT shift to state 72
-- On id_or_coqexpr shift to state 73
-- On coqdef_list shift to state 91
-- On coqdef shift to state 101
## Reductions:
-- On QED reduce production coqdef_list ->
-- On ENDPROOF reduce production coqdef_list ->
-- On BYDEF reduce production coqdef_list ->
-- On BY reduce production coqdef_list ->

State 71:
## Known stack suffix:
## STRING
## LR(1) items:
id_or_coqexpr -> STRING . [ COLONEQUAL COLON ]
## Transitions:
## Reductions:
-- On COLONEQUAL reduce production id_or_coqexpr -> STRING
-- On COLON reduce production id_or_coqexpr -> STRING

State 72:
## Known stack suffix:
## IDENT
## LR(1) items:
id_or_coqexpr -> IDENT . [ COLONEQUAL COLON ]
## Transitions:
## Reductions:
-- On COLONEQUAL reduce production id_or_coqexpr -> IDENT
-- On COLON reduce production id_or_coqexpr -> IDENT

State 73:
## Known stack suffix:
## id_or_coqexpr
## LR(1) items:
coqdef -> id_or_coqexpr . COLONEQUAL coqparam_expr [ STRING QED IDENT ENDPROOF BYDEF BY ]
## Transitions:
-- On COLONEQUAL shift to state 74
## Reductions:

State 74:
## Known stack suffix:
## id_or_coqexpr COLONEQUAL
## LR(1) items:
coqdef -> id_or_coqexpr COLONEQUAL . coqparam_expr [ STRING QED IDENT ENDPROOF BYDEF BY ]
## Transitions:
-- On TILDE shift to state 4
-- On OPEN shift to state 5
-- On LET shift to state 7
-- On LBRACKET shift to state 75
-- On IF shift to state 13
-- On IDENT shift to state 14
-- On FUN shift to state 80
-- On FORALL shift to state 15
-- On coqparam_expr shift to state 90
-- On coqexpr shift to state 88
-- On coqapplication shift to state 23
## Reductions:

State 75:
## Known stack suffix:
## LBRACKET
## LR(1) items:
coqexpr -> LBRACKET . IDENT COLONEQUAL coqexpr RBRACKET coqexpr [ STRING SLASHBACKSLASH QED IDENT ENDPROOF DOUBLEARROW BYDEF BY BACKSLASHSLASH ARROW ]
coqparam_expr -> LBRACKET . IDENT COLON IDENT RBRACKET coqparam_expr [ STRING QED IDENT ENDPROOF BYDEF BY ]
## Transitions:
-- On IDENT shift to state 76
## Reductions:

State 76:
## Known stack suffix:
## LBRACKET IDENT
## LR(1) items:
coqexpr -> LBRACKET IDENT . COLONEQUAL coqexpr RBRACKET coqexpr [ STRING SLASHBACKSLASH QED IDENT ENDPROOF DOUBLEARROW BYDEF BY BACKSLASHSLASH ARROW ]
coqparam_expr -> LBRACKET IDENT . COLON IDENT RBRACKET coqparam_expr [ STRING QED IDENT ENDPROOF BYDEF BY ]
## Transitions:
-- On COLONEQUAL shift to state 12
-- On COLON shift to state 77
## Reductions:

State 77:
## Known stack suffix:
## LBRACKET IDENT COLON
## LR(1) items:
coqparam_expr -> LBRACKET IDENT COLON . IDENT RBRACKET coqparam_expr [ STRING QED IDENT ENDPROOF BYDEF BY ]
## Transitions:
-- On IDENT shift to state 78
## Reductions:

State 78:
## Known stack suffix:
## LBRACKET IDENT COLON IDENT
## LR(1) items:
coqparam_expr -> LBRACKET IDENT COLON IDENT . RBRACKET coqparam_expr [ STRING QED IDENT ENDPROOF BYDEF BY ]
## Transitions:
-- On RBRACKET shift to state 79
## Reductions:

State 79:
## Known stack suffix:
## LBRACKET IDENT COLON IDENT RBRACKET
## LR(1) items:
coqparam_expr -> LBRACKET IDENT COLON IDENT RBRACKET . coqparam_expr [ STRING QED IDENT ENDPROOF BYDEF BY ]
## Transitions:
-- On TILDE shift to state 4
-- On OPEN shift to state 5
-- On LET shift to state 7
-- On LBRACKET shift to state 75
-- On IF shift to state 13
-- On IDENT shift to state 14
-- On FUN shift to state 80
-- On FORALL shift to state 15
-- On coqparam_expr shift to state 89
-- On coqexpr shift to state 88
-- On coqapplication shift to state 23
## Reductions:

State 80:
## Known stack suffix:
## FUN
## LR(1) items:
coqparam_expr -> FUN . OPEN IDENT COLON IDENT CLOSE FUNARROW coqparam_expr [ STRING QED IDENT ENDPROOF BYDEF BY ]
## Transitions:
-- On OPEN shift to state 81
## Reductions:

State 81:
## Known stack suffix:
## FUN OPEN
## LR(1) items:
coqparam_expr -> FUN OPEN . IDENT COLON IDENT CLOSE FUNARROW coqparam_expr [ STRING QED IDENT ENDPROOF BYDEF BY ]
## Transitions:
-- On IDENT shift to state 82
## Reductions:

State 82:
## Known stack suffix:
## FUN OPEN IDENT
## LR(1) items:
coqparam_expr -> FUN OPEN IDENT . COLON IDENT CLOSE FUNARROW coqparam_expr [ STRING QED IDENT ENDPROOF BYDEF BY ]
## Transitions:
-- On COLON shift to state 83
## Reductions:

State 83:
## Known stack suffix:
## FUN OPEN IDENT COLON
## LR(1) items:
coqparam_expr -> FUN OPEN IDENT COLON . IDENT CLOSE FUNARROW coqparam_expr [ STRING QED IDENT ENDPROOF BYDEF BY ]
## Transitions:
-- On IDENT shift to state 84
## Reductions:

State 84:
## Known stack suffix:
## FUN OPEN IDENT COLON IDENT
## LR(1) items:
coqparam_expr -> FUN OPEN IDENT COLON IDENT . CLOSE FUNARROW coqparam_expr [ STRING QED IDENT ENDPROOF BYDEF BY ]
## Transitions:
-- On CLOSE shift to state 85
## Reductions:

State 85:
## Known stack suffix:
## FUN OPEN IDENT COLON IDENT CLOSE
## LR(1) items:
coqparam_expr -> FUN OPEN IDENT COLON IDENT CLOSE . FUNARROW coqparam_expr [ STRING QED IDENT ENDPROOF BYDEF BY ]
## Transitions:
-- On FUNARROW shift to state 86
## Reductions:

State 86:
## Known stack suffix:
## FUN OPEN IDENT COLON IDENT CLOSE FUNARROW
## LR(1) items:
coqparam_expr -> FUN OPEN IDENT COLON IDENT CLOSE FUNARROW . coqparam_expr [ STRING QED IDENT ENDPROOF BYDEF BY ]
## Transitions:
-- On TILDE shift to state 4
-- On OPEN shift to state 5
-- On LET shift to state 7
-- On LBRACKET shift to state 75
-- On IF shift to state 13
-- On IDENT shift to state 14
-- On FUN shift to state 80
-- On FORALL shift to state 15
-- On coqparam_expr shift to state 87
-- On coqexpr shift to state 88
-- On coqapplication shift to state 23
## Reductions:

State 87:
## Known stack suffix:
## FUN OPEN IDENT COLON IDENT CLOSE FUNARROW coqparam_expr
## LR(1) items:
coqparam_expr -> FUN OPEN IDENT COLON IDENT CLOSE FUNARROW coqparam_expr . [ STRING QED IDENT ENDPROOF BYDEF BY ]
## Transitions:
## Reductions:
-- On STRING reduce production coqparam_expr -> FUN OPEN IDENT COLON IDENT CLOSE FUNARROW coqparam_expr
-- On QED reduce production coqparam_expr -> FUN OPEN IDENT COLON IDENT CLOSE FUNARROW coqparam_expr
-- On IDENT reduce production coqparam_expr -> FUN OPEN IDENT COLON IDENT CLOSE FUNARROW coqparam_expr
-- On ENDPROOF reduce production coqparam_expr -> FUN OPEN IDENT COLON IDENT CLOSE FUNARROW coqparam_expr
-- On BYDEF reduce production coqparam_expr -> FUN OPEN IDENT COLON IDENT CLOSE FUNARROW coqparam_expr
-- On BY reduce production coqparam_expr -> FUN OPEN IDENT COLON IDENT CLOSE FUNARROW coqparam_expr

State 88:
## Known stack suffix:
## coqexpr
## LR(1) items:
coqexpr -> coqexpr . ARROW coqexpr [ STRING SLASHBACKSLASH QED IDENT ENDPROOF DOUBLEARROW BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . DOUBLEARROW coqexpr [ STRING SLASHBACKSLASH QED IDENT ENDPROOF DOUBLEARROW BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . SLASHBACKSLASH coqexpr [ STRING SLASHBACKSLASH QED IDENT ENDPROOF DOUBLEARROW BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . BACKSLASHSLASH coqexpr [ STRING SLASHBACKSLASH QED IDENT ENDPROOF DOUBLEARROW BYDEF BY BACKSLASHSLASH ARROW ]
coqparam_expr -> coqexpr . [ STRING QED IDENT ENDPROOF BYDEF BY ]
## Transitions:
-- On SLASHBACKSLASH shift to state 21
-- On DOUBLEARROW shift to state 24
-- On BACKSLASHSLASH shift to state 26
-- On ARROW shift to state 28
## Reductions:
-- On STRING reduce production coqparam_expr -> coqexpr
-- On QED reduce production coqparam_expr -> coqexpr
-- On IDENT reduce production coqparam_expr -> coqexpr
-- On ENDPROOF reduce production coqparam_expr -> coqexpr
-- On BYDEF reduce production coqparam_expr -> coqexpr
-- On BY reduce production coqparam_expr -> coqexpr

State 89:
## Known stack suffix:
## LBRACKET IDENT COLON IDENT RBRACKET coqparam_expr
## LR(1) items:
coqparam_expr -> LBRACKET IDENT COLON IDENT RBRACKET coqparam_expr . [ STRING QED IDENT ENDPROOF BYDEF BY ]
## Transitions:
## Reductions:
-- On STRING reduce production coqparam_expr -> LBRACKET IDENT COLON IDENT RBRACKET coqparam_expr
-- On QED reduce production coqparam_expr -> LBRACKET IDENT COLON IDENT RBRACKET coqparam_expr
-- On IDENT reduce production coqparam_expr -> LBRACKET IDENT COLON IDENT RBRACKET coqparam_expr
-- On ENDPROOF reduce production coqparam_expr -> LBRACKET IDENT COLON IDENT RBRACKET coqparam_expr
-- On BYDEF reduce production coqparam_expr -> LBRACKET IDENT COLON IDENT RBRACKET coqparam_expr
-- On BY reduce production coqparam_expr -> LBRACKET IDENT COLON IDENT RBRACKET coqparam_expr

State 90:
## Known stack suffix:
## id_or_coqexpr COLONEQUAL coqparam_expr
## LR(1) items:
coqdef -> id_or_coqexpr COLONEQUAL coqparam_expr . [ STRING QED IDENT ENDPROOF BYDEF BY ]
## Transitions:
## Reductions:
-- On STRING reduce production coqdef -> id_or_coqexpr COLONEQUAL coqparam_expr
-- On QED reduce production coqdef -> id_or_coqexpr COLONEQUAL coqparam_expr
-- On IDENT reduce production coqdef -> id_or_coqexpr COLONEQUAL coqparam_expr
-- On ENDPROOF reduce production coqdef -> id_or_coqexpr COLONEQUAL coqparam_expr
-- On BYDEF reduce production coqdef -> id_or_coqexpr COLONEQUAL coqparam_expr
-- On BY reduce production coqdef -> id_or_coqexpr COLONEQUAL coqparam_expr

State 91:
## Known stack suffix:
## BYDEF coqdef_list
## LR(1) items:
coq_hyp_def_list -> BYDEF coqdef_list . coq_hyp_def_list [ QED ENDPROOF ]
## Transitions:
-- On BYDEF shift to state 70
-- On BY shift to state 92
-- On coq_hyp_def_list shift to state 100
## Reductions:
-- On QED reduce production coq_hyp_def_list ->
-- On ENDPROOF reduce production coq_hyp_def_list ->

State 92:
## Known stack suffix:
## BY
## LR(1) items:
coq_hyp_def_list -> BY . coqhyp_list coq_hyp_def_list [ QED ENDPROOF ]
## Transitions:
-- On STRING shift to state 71
-- On IDENT shift to state 72
-- On id_or_coqexpr shift to state 93
-- On coqhyp_list shift to state 96
-- On coqhyp shift to state 98
## Reductions:
-- On QED reduce production coqhyp_list ->
-- On ENDPROOF reduce production coqhyp_list ->
-- On BYDEF reduce production coqhyp_list ->
-- On BY reduce production coqhyp_list ->

State 93:
## Known stack suffix:
## id_or_coqexpr
## LR(1) items:
coqhyp -> id_or_coqexpr . COLON coqexpr [ STRING QED IDENT ENDPROOF BYDEF BY ]
## Transitions:
-- On COLON shift to state 94
## Reductions:

State 94:
## Known stack suffix:
## id_or_coqexpr COLON
## LR(1) items:
coqhyp -> id_or_coqexpr COLON . coqexpr [ STRING QED IDENT ENDPROOF BYDEF BY ]
## Transitions:
-- On TILDE shift to state 4
-- On OPEN shift to state 5
-- On LET shift to state 7
-- On LBRACKET shift to state 10
-- On IF shift to state 13
-- On IDENT shift to state 14
-- On FORALL shift to state 15
-- On coqexpr shift to state 95
-- On coqapplication shift to state 23
## Reductions:

State 95:
## Known stack suffix:
## id_or_coqexpr COLON coqexpr
## LR(1) items:
coqexpr -> coqexpr . ARROW coqexpr [ STRING SLASHBACKSLASH QED IDENT ENDPROOF DOUBLEARROW BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . DOUBLEARROW coqexpr [ STRING SLASHBACKSLASH QED IDENT ENDPROOF DOUBLEARROW BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . SLASHBACKSLASH coqexpr [ STRING SLASHBACKSLASH QED IDENT ENDPROOF DOUBLEARROW BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . BACKSLASHSLASH coqexpr [ STRING SLASHBACKSLASH QED IDENT ENDPROOF DOUBLEARROW BYDEF BY BACKSLASHSLASH ARROW ]
coqhyp -> id_or_coqexpr COLON coqexpr . [ STRING QED IDENT ENDPROOF BYDEF BY ]
## Transitions:
-- On SLASHBACKSLASH shift to state 21
-- On DOUBLEARROW shift to state 24
-- On BACKSLASHSLASH shift to state 26
-- On ARROW shift to state 28
## Reductions:
-- On STRING reduce production coqhyp -> id_or_coqexpr COLON coqexpr
-- On QED reduce production coqhyp -> id_or_coqexpr COLON coqexpr
-- On IDENT reduce production coqhyp -> id_or_coqexpr COLON coqexpr
-- On ENDPROOF reduce production coqhyp -> id_or_coqexpr COLON coqexpr
-- On BYDEF reduce production coqhyp -> id_or_coqexpr COLON coqexpr
-- On BY reduce production coqhyp -> id_or_coqexpr COLON coqexpr

State 96:
## Known stack suffix:
## BY coqhyp_list
## LR(1) items:
coq_hyp_def_list -> BY coqhyp_list . coq_hyp_def_list [ QED ENDPROOF ]
## Transitions:
-- On BYDEF shift to state 70
-- On BY shift to state 92
-- On coq_hyp_def_list shift to state 97
## Reductions:
-- On QED reduce production coq_hyp_def_list ->
-- On ENDPROOF reduce production coq_hyp_def_list ->

State 97:
## Known stack suffix:
## BY coqhyp_list coq_hyp_def_list
## LR(1) items:
coq_hyp_def_list -> BY coqhyp_list coq_hyp_def_list . [ QED ENDPROOF ]
## Transitions:
## Reductions:
-- On QED reduce production coq_hyp_def_list -> BY coqhyp_list coq_hyp_def_list
-- On ENDPROOF reduce production coq_hyp_def_list -> BY coqhyp_list coq_hyp_def_list

State 98:
## Known stack suffix:
## coqhyp
## LR(1) items:
coqhyp_list -> coqhyp . coqhyp_list [ QED ENDPROOF BYDEF BY ]
## Transitions:
-- On STRING shift to state 71
-- On IDENT shift to state 72
-- On id_or_coqexpr shift to state 93
-- On coqhyp_list shift to state 99
-- On coqhyp shift to state 98
## Reductions:
-- On QED reduce production coqhyp_list ->
-- On ENDPROOF reduce production coqhyp_list ->
-- On BYDEF reduce production coqhyp_list ->
-- On BY reduce production coqhyp_list ->

State 99:
## Known stack suffix:
## coqhyp coqhyp_list
## LR(1) items:
coqhyp_list -> coqhyp coqhyp_list . [ QED ENDPROOF BYDEF BY ]
## Transitions:
## Reductions:
-- On QED reduce production coqhyp_list -> coqhyp coqhyp_list
-- On ENDPROOF reduce production coqhyp_list -> coqhyp coqhyp_list
-- On BYDEF reduce production coqhyp_list -> coqhyp coqhyp_list
-- On BY reduce production coqhyp_list -> coqhyp coqhyp_list

State 100:
## Known stack suffix:
## BYDEF coqdef_list coq_hyp_def_list
## LR(1) items:
coq_hyp_def_list -> BYDEF coqdef_list coq_hyp_def_list . [ QED ENDPROOF ]
## Transitions:
## Reductions:
-- On QED reduce production coq_hyp_def_list -> BYDEF coqdef_list coq_hyp_def_list
-- On ENDPROOF reduce production coq_hyp_def_list -> BYDEF coqdef_list coq_hyp_def_list

State 101:
## Known stack suffix:
## coqdef
## LR(1) items:
coqdef_list -> coqdef . coqdef_list [ QED ENDPROOF BYDEF BY ]
## Transitions:
-- On STRING shift to state 71
-- On IDENT shift to state 72
-- On id_or_coqexpr shift to state 73
-- On coqdef_list shift to state 102
-- On coqdef shift to state 101
## Reductions:
-- On QED reduce production coqdef_list ->
-- On ENDPROOF reduce production coqdef_list ->
-- On BYDEF reduce production coqdef_list ->
-- On BY reduce production coqdef_list ->

State 102:
## Known stack suffix:
## coqdef coqdef_list
## LR(1) items:
coqdef_list -> coqdef coqdef_list . [ QED ENDPROOF BYDEF BY ]
## Transitions:
## Reductions:
-- On QED reduce production coqdef_list -> coqdef coqdef_list
-- On ENDPROOF reduce production coqdef_list -> coqdef coqdef_list
-- On BYDEF reduce production coqdef_list -> coqdef coqdef_list
-- On BY reduce production coqdef_list -> coqdef coqdef_list

State 103:
## Known stack suffix:
## LOCAL IDENT COLON coqexpr COLONEQUAL TOBE coqexpr coq_hyp_def_list
## LR(1) items:
coqfile -> LOCAL IDENT COLON coqexpr COLONEQUAL TOBE coqexpr coq_hyp_def_list . QED EOF [ # ]
## Transitions:
-- On QED shift to state 104
## Reductions:

State 104:
## Known stack suffix:
## LOCAL IDENT COLON coqexpr COLONEQUAL TOBE coqexpr coq_hyp_def_list QED
## LR(1) items:
coqfile -> LOCAL IDENT COLON coqexpr COLONEQUAL TOBE coqexpr coq_hyp_def_list QED . EOF [ # ]
## Transitions:
-- On EOF shift to state 105
## Reductions:

State 105:
## Known stack suffix:
## LOCAL IDENT COLON coqexpr COLONEQUAL TOBE coqexpr coq_hyp_def_list QED EOF
## LR(1) items:
coqfile -> LOCAL IDENT COLON coqexpr COLONEQUAL TOBE coqexpr coq_hyp_def_list QED EOF . [ # ]
## Transitions:
## Reductions:
-- On # reduce production coqfile -> LOCAL IDENT COLON coqexpr COLONEQUAL TOBE coqexpr coq_hyp_def_list QED EOF

State 106:
## Known stack suffix:
## BEGINPROOF
## LR(1) items:
coqfile -> BEGINPROOF . coqexpr coq_hyp_def_list ENDPROOF EOF [ # ]
## Transitions:
-- On TILDE shift to state 4
-- On OPEN shift to state 5
-- On LET shift to state 7
-- On LBRACKET shift to state 10
-- On IF shift to state 13
-- On IDENT shift to state 14
-- On FORALL shift to state 15
-- On coqexpr shift to state 107
-- On coqapplication shift to state 23
## Reductions:

State 107:
## Known stack suffix:
## BEGINPROOF coqexpr
## LR(1) items:
coqexpr -> coqexpr . ARROW coqexpr [ SLASHBACKSLASH ENDPROOF DOUBLEARROW BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . DOUBLEARROW coqexpr [ SLASHBACKSLASH ENDPROOF DOUBLEARROW BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . SLASHBACKSLASH coqexpr [ SLASHBACKSLASH ENDPROOF DOUBLEARROW BYDEF BY BACKSLASHSLASH ARROW ]
coqexpr -> coqexpr . BACKSLASHSLASH coqexpr [ SLASHBACKSLASH ENDPROOF DOUBLEARROW BYDEF BY BACKSLASHSLASH ARROW ]
coqfile -> BEGINPROOF coqexpr . coq_hyp_def_list ENDPROOF EOF [ # ]
## Transitions:
-- On SLASHBACKSLASH shift to state 21
-- On DOUBLEARROW shift to state 24
-- On BYDEF shift to state 70
-- On BY shift to state 92
-- On BACKSLASHSLASH shift to state 26
-- On ARROW shift to state 28
-- On coq_hyp_def_list shift to state 108
## Reductions:
-- On ENDPROOF reduce production coq_hyp_def_list ->

State 108:
## Known stack suffix:
## BEGINPROOF coqexpr coq_hyp_def_list
## LR(1) items:
coqfile -> BEGINPROOF coqexpr coq_hyp_def_list . ENDPROOF EOF [ # ]
## Transitions:
-- On ENDPROOF shift to state 109
## Reductions:

State 109:
## Known stack suffix:
## BEGINPROOF coqexpr coq_hyp_def_list ENDPROOF
## LR(1) items:
coqfile -> BEGINPROOF coqexpr coq_hyp_def_list ENDPROOF . EOF [ # ]
## Transitions:
-- On EOF shift to state 110
## Reductions:

State 110:
## Known stack suffix:
## BEGINPROOF coqexpr coq_hyp_def_list ENDPROOF EOF
## LR(1) items:
coqfile -> BEGINPROOF coqexpr coq_hyp_def_list ENDPROOF EOF . [ # ]
## Transitions:
## Reductions:
-- On # reduce production coqfile -> BEGINPROOF coqexpr coq_hyp_def_list ENDPROOF EOF

State 111:
## Known stack suffix:
## coqfile
## LR(1) items:
coqfile' -> coqfile . [ # ]
## Transitions:
## Reductions:
-- On # accept coqfile

State 112:
## Known stack suffix:
##
## LR(1) items:
phrase' -> . phrase [ # ]
## Transitions:
-- On INT shift to state 113
-- On GOAL shift to state 114
-- On DEF shift to state 214
-- On phrase shift to state 222
-- On int_opt shift to state 223
## Reductions:
-- On TRUE reduce production int_opt ->
-- On STRING reduce production int_opt ->
-- On OPEN reduce production int_opt ->
-- On IDENT reduce production int_opt ->
-- On FALSE reduce production int_opt ->

State 113:
## Known stack suffix:
## INT
## LR(1) items:
int_opt -> INT . [ TRUE STRING OPEN IDENT FALSE ]
## Transitions:
## Reductions:
-- On TRUE reduce production int_opt -> INT
-- On STRING reduce production int_opt -> INT
-- On OPEN reduce production int_opt -> INT
-- On IDENT reduce production int_opt -> INT
-- On FALSE reduce production int_opt -> INT

State 114:
## Known stack suffix:
## GOAL
## LR(1) items:
phrase -> GOAL . expr [ # ]
## Transitions:
-- On TRUE shift to state 115
-- On OPEN shift to state 116
-- On IDENT shift to state 211
-- On FALSE shift to state 212
-- On expr shift to state 213
## Reductions:

State 115:
## Known stack suffix:
## TRUE
## LR(1) items:
expr -> TRUE . [ # ]
## Transitions:
## Reductions:
-- On # reduce production expr -> TRUE

State 116:
## Known stack suffix:
## OPEN
## LR(1) items:
expr -> OPEN . IDENT expr_list CLOSE [ # ]
expr -> OPEN . NOT expr CLOSE [ # ]
expr -> OPEN . AND expr expr_list CLOSE [ # ]
expr -> OPEN . OR expr expr_list CLOSE [ # ]
expr -> OPEN . IMPLY expr expr_list CLOSE [ # ]
expr -> OPEN . EQUIV expr expr_list CLOSE [ # ]
expr -> OPEN . TRUE CLOSE [ # ]
expr -> OPEN . FALSE CLOSE [ # ]
expr -> OPEN . ALL lambda CLOSE [ # ]
expr -> OPEN . EX lambda CLOSE [ # ]
expr -> OPEN . TAU lambda CLOSE [ # ]
expr -> OPEN . EQUAL expr expr CLOSE [ # ]
## Transitions:
-- On TRUE shift to state 117
-- On TAU shift to state 119
-- On OR shift to state 177
-- On NOT shift to state 181
-- On IMPLY shift to state 184
-- On IDENT shift to state 188
-- On FALSE shift to state 191
-- On EX shift to state 193
-- On EQUIV shift to state 196
-- On EQUAL shift to state 200
-- On AND shift to state 204
-- On ALL shift to state 208
## Reductions:

State 117:
## Known stack suffix:
## OPEN TRUE
## LR(1) items:
expr -> OPEN TRUE . CLOSE [ # ]
## Transitions:
-- On CLOSE shift to state 118
## Reductions:

State 118:
## Known stack suffix:
## OPEN TRUE CLOSE
## LR(1) items:
expr -> OPEN TRUE CLOSE . [ # ]
## Transitions:
## Reductions:
-- On # reduce production expr -> OPEN TRUE CLOSE

State 119:
## Known stack suffix:
## OPEN TAU
## LR(1) items:
expr -> OPEN TAU . lambda CLOSE [ # ]
## Transitions:
-- On OPEN shift to state 120
-- On lambda shift to state 175
## Reductions:

State 120:
## Known stack suffix:
## OPEN
## LR(1) items:
lambda -> OPEN . OPEN IDENT STRING CLOSE expr CLOSE [ CLOSE ]
lambda -> OPEN . OPEN IDENT CLOSE expr CLOSE [ CLOSE ]
## Transitions:
-- On OPEN shift to state 121
## Reductions:

State 121:
## Known stack suffix:
## OPEN OPEN
## LR(1) items:
lambda -> OPEN OPEN . IDENT STRING CLOSE expr CLOSE [ CLOSE ]
lambda -> OPEN OPEN . IDENT CLOSE expr CLOSE [ CLOSE ]
## Transitions:
-- On IDENT shift to state 122
## Reductions:

State 122:
## Known stack suffix:
## OPEN OPEN IDENT
## LR(1) items:
lambda -> OPEN OPEN IDENT . STRING CLOSE expr CLOSE [ CLOSE ]
lambda -> OPEN OPEN IDENT . CLOSE expr CLOSE [ CLOSE ]
## Transitions:
-- On STRING shift to state 123
-- On CLOSE shift to state 172
## Reductions:

State 123:
## Known stack suffix:
## OPEN OPEN IDENT STRING
## LR(1) items:
lambda -> OPEN OPEN IDENT STRING . CLOSE expr CLOSE [ CLOSE ]
## Transitions:
-- On CLOSE shift to state 124
## Reductions:

State 124:
## Known stack suffix:
## OPEN OPEN IDENT STRING CLOSE
## LR(1) items:
lambda -> OPEN OPEN IDENT STRING CLOSE . expr CLOSE [ CLOSE ]
## Transitions:
-- On TRUE shift to state 125
-- On OPEN shift to state 126
-- On IDENT shift to state 133
-- On FALSE shift to state 134
-- On expr shift to state 170
## Reductions:

State 125:
## Known stack suffix:
## TRUE
## LR(1) items:
expr -> TRUE . [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
## Transitions:
## Reductions:
-- On TRUE reduce production expr -> TRUE
-- On STRING reduce production expr -> TRUE
-- On OPEN reduce production expr -> TRUE
-- On INT reduce production expr -> TRUE
-- On IDENT reduce production expr -> TRUE
-- On GOAL reduce production expr -> TRUE
-- On FALSE reduce production expr -> TRUE
-- On EOF reduce production expr -> TRUE
-- On DEF reduce production expr -> TRUE
-- On CLOSE reduce production expr -> TRUE

State 126:
## Known stack suffix:
## OPEN
## LR(1) items:
expr -> OPEN . IDENT expr_list CLOSE [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
expr -> OPEN . NOT expr CLOSE [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
expr -> OPEN . AND expr expr_list CLOSE [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
expr -> OPEN . OR expr expr_list CLOSE [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
expr -> OPEN . IMPLY expr expr_list CLOSE [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
expr -> OPEN . EQUIV expr expr_list CLOSE [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
expr -> OPEN . TRUE CLOSE [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
expr -> OPEN . FALSE CLOSE [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
expr -> OPEN . ALL lambda CLOSE [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
expr -> OPEN . EX lambda CLOSE [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
expr -> OPEN . TAU lambda CLOSE [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
expr -> OPEN . EQUAL expr expr CLOSE [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
## Transitions:
-- On TRUE shift to state 127
-- On TAU shift to state 129
-- On OR shift to state 132
-- On NOT shift to state 140
-- On IMPLY shift to state 143
-- On IDENT shift to state 147
-- On FALSE shift to state 150
-- On EX shift to state 152
-- On EQUIV shift to state 155
-- On EQUAL shift to state 159
-- On AND shift to state 163
-- On ALL shift to state 167
## Reductions:

State 127:
## Known stack suffix:
## OPEN TRUE
## LR(1) items:
expr -> OPEN TRUE . CLOSE [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
## Transitions:
-- On CLOSE shift to state 128
## Reductions:

State 128:
## Known stack suffix:
## OPEN TRUE CLOSE
## LR(1) items:
expr -> OPEN TRUE CLOSE . [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
## Transitions:
## Reductions:
-- On TRUE reduce production expr -> OPEN TRUE CLOSE
-- On STRING reduce production expr -> OPEN TRUE CLOSE
-- On OPEN reduce production expr -> OPEN TRUE CLOSE
-- On INT reduce production expr -> OPEN TRUE CLOSE
-- On IDENT reduce production expr -> OPEN TRUE CLOSE
-- On GOAL reduce production expr -> OPEN TRUE CLOSE
-- On FALSE reduce production expr -> OPEN TRUE CLOSE
-- On EOF reduce production expr -> OPEN TRUE CLOSE
-- On DEF reduce production expr -> OPEN TRUE CLOSE
-- On CLOSE reduce production expr -> OPEN TRUE CLOSE

State 129:
## Known stack suffix:
## OPEN TAU
## LR(1) items:
expr -> OPEN TAU . lambda CLOSE [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
## Transitions:
-- On OPEN shift to state 120
-- On lambda shift to state 130
## Reductions:

State 130:
## Known stack suffix:
## OPEN TAU lambda
## LR(1) items:
expr -> OPEN TAU lambda . CLOSE [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
## Transitions:
-- On CLOSE shift to state 131
## Reductions:

State 131:
## Known stack suffix:
## OPEN TAU lambda CLOSE
## LR(1) items:
expr -> OPEN TAU lambda CLOSE . [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
## Transitions:
## Reductions:
-- On TRUE reduce production expr -> OPEN TAU lambda CLOSE
-- On STRING reduce production expr -> OPEN TAU lambda CLOSE
-- On OPEN reduce production expr -> OPEN TAU lambda CLOSE
-- On INT reduce production expr -> OPEN TAU lambda CLOSE
-- On IDENT reduce production expr -> OPEN TAU lambda CLOSE
-- On GOAL reduce production expr -> OPEN TAU lambda CLOSE
-- On FALSE reduce production expr -> OPEN TAU lambda CLOSE
-- On EOF reduce production expr -> OPEN TAU lambda CLOSE
-- On DEF reduce production expr -> OPEN TAU lambda CLOSE
-- On CLOSE reduce production expr -> OPEN TAU lambda CLOSE

State 132:
## Known stack suffix:
## OPEN OR
## LR(1) items:
expr -> OPEN OR . expr expr_list CLOSE [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
## Transitions:
-- On TRUE shift to state 125
-- On OPEN shift to state 126
-- On IDENT shift to state 133
-- On FALSE shift to state 134
-- On expr shift to state 135
## Reductions:

State 133:
## Known stack suffix:
## IDENT
## LR(1) items:
expr -> IDENT . [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
## Transitions:
## Reductions:
-- On TRUE reduce production expr -> IDENT
-- On STRING reduce production expr -> IDENT
-- On OPEN reduce production expr -> IDENT
-- On INT reduce production expr -> IDENT
-- On IDENT reduce production expr -> IDENT
-- On GOAL reduce production expr -> IDENT
-- On FALSE reduce production expr -> IDENT
-- On EOF reduce production expr -> IDENT
-- On DEF reduce production expr -> IDENT
-- On CLOSE reduce production expr -> IDENT

State 134:
## Known stack suffix:
## FALSE
## LR(1) items:
expr -> FALSE . [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
## Transitions:
## Reductions:
-- On TRUE reduce production expr -> FALSE
-- On STRING reduce production expr -> FALSE
-- On OPEN reduce production expr -> FALSE
-- On INT reduce production expr -> FALSE
-- On IDENT reduce production expr -> FALSE
-- On GOAL reduce production expr -> FALSE
-- On FALSE reduce production expr -> FALSE
-- On EOF reduce production expr -> FALSE
-- On DEF reduce production expr -> FALSE
-- On CLOSE reduce production expr -> FALSE

State 135:
## Known stack suffix:
## OPEN OR expr
## LR(1) items:
expr -> OPEN OR expr . expr_list CLOSE [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
## Transitions:
-- On TRUE shift to state 125
-- On OPEN shift to state 126
-- On IDENT shift to state 133
-- On FALSE shift to state 134
-- On expr_list shift to state 136
-- On expr shift to state 138
## Reductions:
-- On CLOSE reduce production expr_list ->

State 136:
## Known stack suffix:
## OPEN OR expr expr_list
## LR(1) items:
expr -> OPEN OR expr expr_list . CLOSE [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
## Transitions:
-- On CLOSE shift to state 137
## Reductions:

State 137:
## Known stack suffix:
## OPEN OR expr expr_list CLOSE
## LR(1) items:
expr -> OPEN OR expr expr_list CLOSE . [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
## Transitions:
## Reductions:
-- On TRUE reduce production expr -> OPEN OR expr expr_list CLOSE
-- On STRING reduce production expr -> OPEN OR expr expr_list CLOSE
-- On OPEN reduce production expr -> OPEN OR expr expr_list CLOSE
-- On INT reduce production expr -> OPEN OR expr expr_list CLOSE
-- On IDENT reduce production expr -> OPEN OR expr expr_list CLOSE
-- On GOAL reduce production expr -> OPEN OR expr expr_list CLOSE
-- On FALSE reduce production expr -> OPEN OR expr expr_list CLOSE
-- On EOF reduce production expr -> OPEN OR expr expr_list CLOSE
-- On DEF reduce production expr -> OPEN OR expr expr_list CLOSE
-- On CLOSE reduce production expr -> OPEN OR expr expr_list CLOSE

State 138:
## Known stack suffix:
## expr
## LR(1) items:
expr_list -> expr . expr_list [ CLOSE ]
## Transitions:
-- On TRUE shift to state 125
-- On OPEN shift to state 126
-- On IDENT shift to state 133
-- On FALSE shift to state 134
-- On expr_list shift to state 139
-- On expr shift to state 138
## Reductions:
-- On CLOSE reduce production expr_list ->

State 139:
## Known stack suffix:
## expr expr_list
## LR(1) items:
expr_list -> expr expr_list . [ CLOSE ]
## Transitions:
## Reductions:
-- On CLOSE reduce production expr_list -> expr expr_list

State 140:
## Known stack suffix:
## OPEN NOT
## LR(1) items:
expr -> OPEN NOT . expr CLOSE [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
## Transitions:
-- On TRUE shift to state 125
-- On OPEN shift to state 126
-- On IDENT shift to state 133
-- On FALSE shift to state 134
-- On expr shift to state 141
## Reductions:

State 141:
## Known stack suffix:
## OPEN NOT expr
## LR(1) items:
expr -> OPEN NOT expr . CLOSE [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
## Transitions:
-- On CLOSE shift to state 142
## Reductions:

State 142:
## Known stack suffix:
## OPEN NOT expr CLOSE
## LR(1) items:
expr -> OPEN NOT expr CLOSE . [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
## Transitions:
## Reductions:
-- On TRUE reduce production expr -> OPEN NOT expr CLOSE
-- On STRING reduce production expr -> OPEN NOT expr CLOSE
-- On OPEN reduce production expr -> OPEN NOT expr CLOSE
-- On INT reduce production expr -> OPEN NOT expr CLOSE
-- On IDENT reduce production expr -> OPEN NOT expr CLOSE
-- On GOAL reduce production expr -> OPEN NOT expr CLOSE
-- On FALSE reduce production expr -> OPEN NOT expr CLOSE
-- On EOF reduce production expr -> OPEN NOT expr CLOSE
-- On DEF reduce production expr -> OPEN NOT expr CLOSE
-- On CLOSE reduce production expr -> OPEN NOT expr CLOSE

State 143:
## Known stack suffix:
## OPEN IMPLY
## LR(1) items:
expr -> OPEN IMPLY . expr expr_list CLOSE [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
## Transitions:
-- On TRUE shift to state 125
-- On OPEN shift to state 126
-- On IDENT shift to state 133
-- On FALSE shift to state 134
-- On expr shift to state 144
## Reductions:

State 144:
## Known stack suffix:
## OPEN IMPLY expr
## LR(1) items:
expr -> OPEN IMPLY expr . expr_list CLOSE [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
## Transitions:
-- On TRUE shift to state 125
-- On OPEN shift to state 126
-- On IDENT shift to state 133
-- On FALSE shift to state 134
-- On expr_list shift to state 145
-- On expr shift to state 138
## Reductions:
-- On CLOSE reduce production expr_list ->

State 145:
## Known stack suffix:
## OPEN IMPLY expr expr_list
## LR(1) items:
expr -> OPEN IMPLY expr expr_list . CLOSE [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
## Transitions:
-- On CLOSE shift to state 146
## Reductions:

State 146:
## Known stack suffix:
## OPEN IMPLY expr expr_list CLOSE
## LR(1) items:
expr -> OPEN IMPLY expr expr_list CLOSE . [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
## Transitions:
## Reductions:
-- On TRUE reduce production expr -> OPEN IMPLY expr expr_list CLOSE
-- On STRING reduce production expr -> OPEN IMPLY expr expr_list CLOSE
-- On OPEN reduce production expr -> OPEN IMPLY expr expr_list CLOSE
-- On INT reduce production expr -> OPEN IMPLY expr expr_list CLOSE
-- On IDENT reduce production expr -> OPEN IMPLY expr expr_list CLOSE
-- On GOAL reduce production expr -> OPEN IMPLY expr expr_list CLOSE
-- On FALSE reduce production expr -> OPEN IMPLY expr expr_list CLOSE
-- On EOF reduce production expr -> OPEN IMPLY expr expr_list CLOSE
-- On DEF reduce production expr -> OPEN IMPLY expr expr_list CLOSE
-- On CLOSE reduce production expr -> OPEN IMPLY expr expr_list CLOSE

State 147:
## Known stack suffix:
## OPEN IDENT
## LR(1) items:
expr -> OPEN IDENT . expr_list CLOSE [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
## Transitions:
-- On TRUE shift to state 125
-- On OPEN shift to state 126
-- On IDENT shift to state 133
-- On FALSE shift to state 134
-- On expr_list shift to state 148
-- On expr shift to state 138
## Reductions:
-- On CLOSE reduce production expr_list ->

State 148:
## Known stack suffix:
## OPEN IDENT expr_list
## LR(1) items:
expr -> OPEN IDENT expr_list . CLOSE [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
## Transitions:
-- On CLOSE shift to state 149
## Reductions:

State 149:
## Known stack suffix:
## OPEN IDENT expr_list CLOSE
## LR(1) items:
expr -> OPEN IDENT expr_list CLOSE . [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
## Transitions:
## Reductions:
-- On TRUE reduce production expr -> OPEN IDENT expr_list CLOSE
-- On STRING reduce production expr -> OPEN IDENT expr_list CLOSE
-- On OPEN reduce production expr -> OPEN IDENT expr_list CLOSE
-- On INT reduce production expr -> OPEN IDENT expr_list CLOSE
-- On IDENT reduce production expr -> OPEN IDENT expr_list CLOSE
-- On GOAL reduce production expr -> OPEN IDENT expr_list CLOSE
-- On FALSE reduce production expr -> OPEN IDENT expr_list CLOSE
-- On EOF reduce production expr -> OPEN IDENT expr_list CLOSE
-- On DEF reduce production expr -> OPEN IDENT expr_list CLOSE
-- On CLOSE reduce production expr -> OPEN IDENT expr_list CLOSE

State 150:
## Known stack suffix:
## OPEN FALSE
## LR(1) items:
expr -> OPEN FALSE . CLOSE [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
## Transitions:
-- On CLOSE shift to state 151
## Reductions:

State 151:
## Known stack suffix:
## OPEN FALSE CLOSE
## LR(1) items:
expr -> OPEN FALSE CLOSE . [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
## Transitions:
## Reductions:
-- On TRUE reduce production expr -> OPEN FALSE CLOSE
-- On STRING reduce production expr -> OPEN FALSE CLOSE
-- On OPEN reduce production expr -> OPEN FALSE CLOSE
-- On INT reduce production expr -> OPEN FALSE CLOSE
-- On IDENT reduce production expr -> OPEN FALSE CLOSE
-- On GOAL reduce production expr -> OPEN FALSE CLOSE
-- On FALSE reduce production expr -> OPEN FALSE CLOSE
-- On EOF reduce production expr -> OPEN FALSE CLOSE
-- On DEF reduce production expr -> OPEN FALSE CLOSE
-- On CLOSE reduce production expr -> OPEN FALSE CLOSE

State 152:
## Known stack suffix:
## OPEN EX
## LR(1) items:
expr -> OPEN EX . lambda CLOSE [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
## Transitions:
-- On OPEN shift to state 120
-- On lambda shift to state 153
## Reductions:

State 153:
## Known stack suffix:
## OPEN EX lambda
## LR(1) items:
expr -> OPEN EX lambda . CLOSE [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
## Transitions:
-- On CLOSE shift to state 154
## Reductions:

State 154:
## Known stack suffix:
## OPEN EX lambda CLOSE
## LR(1) items:
expr -> OPEN EX lambda CLOSE . [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
## Transitions:
## Reductions:
-- On TRUE reduce production expr -> OPEN EX lambda CLOSE
-- On STRING reduce production expr -> OPEN EX lambda CLOSE
-- On OPEN reduce production expr -> OPEN EX lambda CLOSE
-- On INT reduce production expr -> OPEN EX lambda CLOSE
-- On IDENT reduce production expr -> OPEN EX lambda CLOSE
-- On GOAL reduce production expr -> OPEN EX lambda CLOSE
-- On FALSE reduce production expr -> OPEN EX lambda CLOSE
-- On EOF reduce production expr -> OPEN EX lambda CLOSE
-- On DEF reduce production expr -> OPEN EX lambda CLOSE
-- On CLOSE reduce production expr -> OPEN EX lambda CLOSE

State 155:
## Known stack suffix:
## OPEN EQUIV
## LR(1) items:
expr -> OPEN EQUIV . expr expr_list CLOSE [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
## Transitions:
-- On TRUE shift to state 125
-- On OPEN shift to state 126
-- On IDENT shift to state 133
-- On FALSE shift to state 134
-- On expr shift to state 156
## Reductions:

State 156:
## Known stack suffix:
## OPEN EQUIV expr
## LR(1) items:
expr -> OPEN EQUIV expr . expr_list CLOSE [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
## Transitions:
-- On TRUE shift to state 125
-- On OPEN shift to state 126
-- On IDENT shift to state 133
-- On FALSE shift to state 134
-- On expr_list shift to state 157
-- On expr shift to state 138
## Reductions:
-- On CLOSE reduce production expr_list ->

State 157:
## Known stack suffix:
## OPEN EQUIV expr expr_list
## LR(1) items:
expr -> OPEN EQUIV expr expr_list . CLOSE [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
## Transitions:
-- On CLOSE shift to state 158
## Reductions:

State 158:
## Known stack suffix:
## OPEN EQUIV expr expr_list CLOSE
## LR(1) items:
expr -> OPEN EQUIV expr expr_list CLOSE . [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
## Transitions:
## Reductions:
-- On TRUE reduce production expr -> OPEN EQUIV expr expr_list CLOSE
-- On STRING reduce production expr -> OPEN EQUIV expr expr_list CLOSE
-- On OPEN reduce production expr -> OPEN EQUIV expr expr_list CLOSE
-- On INT reduce production expr -> OPEN EQUIV expr expr_list CLOSE
-- On IDENT reduce production expr -> OPEN EQUIV expr expr_list CLOSE
-- On GOAL reduce production expr -> OPEN EQUIV expr expr_list CLOSE
-- On FALSE reduce production expr -> OPEN EQUIV expr expr_list CLOSE
-- On EOF reduce production expr -> OPEN EQUIV expr expr_list CLOSE
-- On DEF reduce production expr -> OPEN EQUIV expr expr_list CLOSE
-- On CLOSE reduce production expr -> OPEN EQUIV expr expr_list CLOSE

State 159:
## Known stack suffix:
## OPEN EQUAL
## LR(1) items:
expr -> OPEN EQUAL . expr expr CLOSE [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
## Transitions:
-- On TRUE shift to state 125
-- On OPEN shift to state 126
-- On IDENT shift to state 133
-- On FALSE shift to state 134
-- On expr shift to state 160
## Reductions:

State 160:
## Known stack suffix:
## OPEN EQUAL expr
## LR(1) items:
expr -> OPEN EQUAL expr . expr CLOSE [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
## Transitions:
-- On TRUE shift to state 125
-- On OPEN shift to state 126
-- On IDENT shift to state 133
-- On FALSE shift to state 134
-- On expr shift to state 161
## Reductions:

State 161:
## Known stack suffix:
## OPEN EQUAL expr expr
## LR(1) items:
expr -> OPEN EQUAL expr expr . CLOSE [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
## Transitions:
-- On CLOSE shift to state 162
## Reductions:

State 162:
## Known stack suffix:
## OPEN EQUAL expr expr CLOSE
## LR(1) items:
expr -> OPEN EQUAL expr expr CLOSE . [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
## Transitions:
## Reductions:
-- On TRUE reduce production expr -> OPEN EQUAL expr expr CLOSE
-- On STRING reduce production expr -> OPEN EQUAL expr expr CLOSE
-- On OPEN reduce production expr -> OPEN EQUAL expr expr CLOSE
-- On INT reduce production expr -> OPEN EQUAL expr expr CLOSE
-- On IDENT reduce production expr -> OPEN EQUAL expr expr CLOSE
-- On GOAL reduce production expr -> OPEN EQUAL expr expr CLOSE
-- On FALSE reduce production expr -> OPEN EQUAL expr expr CLOSE
-- On EOF reduce production expr -> OPEN EQUAL expr expr CLOSE
-- On DEF reduce production expr -> OPEN EQUAL expr expr CLOSE
-- On CLOSE reduce production expr -> OPEN EQUAL expr expr CLOSE

State 163:
## Known stack suffix:
## OPEN AND
## LR(1) items:
expr -> OPEN AND . expr expr_list CLOSE [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
## Transitions:
-- On TRUE shift to state 125
-- On OPEN shift to state 126
-- On IDENT shift to state 133
-- On FALSE shift to state 134
-- On expr shift to state 164
## Reductions:

State 164:
## Known stack suffix:
## OPEN AND expr
## LR(1) items:
expr -> OPEN AND expr . expr_list CLOSE [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
## Transitions:
-- On TRUE shift to state 125
-- On OPEN shift to state 126
-- On IDENT shift to state 133
-- On FALSE shift to state 134
-- On expr_list shift to state 165
-- On expr shift to state 138
## Reductions:
-- On CLOSE reduce production expr_list ->

State 165:
## Known stack suffix:
## OPEN AND expr expr_list
## LR(1) items:
expr -> OPEN AND expr expr_list . CLOSE [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
## Transitions:
-- On CLOSE shift to state 166
## Reductions:

State 166:
## Known stack suffix:
## OPEN AND expr expr_list CLOSE
## LR(1) items:
expr -> OPEN AND expr expr_list CLOSE . [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
## Transitions:
## Reductions:
-- On TRUE reduce production expr -> OPEN AND expr expr_list CLOSE
-- On STRING reduce production expr -> OPEN AND expr expr_list CLOSE
-- On OPEN reduce production expr -> OPEN AND expr expr_list CLOSE
-- On INT reduce production expr -> OPEN AND expr expr_list CLOSE
-- On IDENT reduce production expr -> OPEN AND expr expr_list CLOSE
-- On GOAL reduce production expr -> OPEN AND expr expr_list CLOSE
-- On FALSE reduce production expr -> OPEN AND expr expr_list CLOSE
-- On EOF reduce production expr -> OPEN AND expr expr_list CLOSE
-- On DEF reduce production expr -> OPEN AND expr expr_list CLOSE
-- On CLOSE reduce production expr -> OPEN AND expr expr_list CLOSE

State 167:
## Known stack suffix:
## OPEN ALL
## LR(1) items:
expr -> OPEN ALL . lambda CLOSE [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
## Transitions:
-- On OPEN shift to state 120
-- On lambda shift to state 168
## Reductions:

State 168:
## Known stack suffix:
## OPEN ALL lambda
## LR(1) items:
expr -> OPEN ALL lambda . CLOSE [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
## Transitions:
-- On CLOSE shift to state 169
## Reductions:

State 169:
## Known stack suffix:
## OPEN ALL lambda CLOSE
## LR(1) items:
expr -> OPEN ALL lambda CLOSE . [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF CLOSE ]
## Transitions:
## Reductions:
-- On TRUE reduce production expr -> OPEN ALL lambda CLOSE
-- On STRING reduce production expr -> OPEN ALL lambda CLOSE
-- On OPEN reduce production expr -> OPEN ALL lambda CLOSE
-- On INT reduce production expr -> OPEN ALL lambda CLOSE
-- On IDENT reduce production expr -> OPEN ALL lambda CLOSE
-- On GOAL reduce production expr -> OPEN ALL lambda CLOSE
-- On FALSE reduce production expr -> OPEN ALL lambda CLOSE
-- On EOF reduce production expr -> OPEN ALL lambda CLOSE
-- On DEF reduce production expr -> OPEN ALL lambda CLOSE
-- On CLOSE reduce production expr -> OPEN ALL lambda CLOSE

State 170:
## Known stack suffix:
## OPEN OPEN IDENT STRING CLOSE expr
## LR(1) items:
lambda -> OPEN OPEN IDENT STRING CLOSE expr . CLOSE [ CLOSE ]
## Transitions:
-- On CLOSE shift to state 171
## Reductions:

State 171:
## Known stack suffix:
## OPEN OPEN IDENT STRING CLOSE expr CLOSE
## LR(1) items:
lambda -> OPEN OPEN IDENT STRING CLOSE expr CLOSE . [ CLOSE ]
## Transitions:
## Reductions:
-- On CLOSE reduce production lambda -> OPEN OPEN IDENT STRING CLOSE expr CLOSE

State 172:
## Known stack suffix:
## OPEN OPEN IDENT CLOSE
## LR(1) items:
lambda -> OPEN OPEN IDENT CLOSE . expr CLOSE [ CLOSE ]
## Transitions:
-- On TRUE shift to state 125
-- On OPEN shift to state 126
-- On IDENT shift to state 133
-- On FALSE shift to state 134
-- On expr shift to state 173
## Reductions:

State 173:
## Known stack suffix:
## OPEN OPEN IDENT CLOSE expr
## LR(1) items:
lambda -> OPEN OPEN IDENT CLOSE expr . CLOSE [ CLOSE ]
## Transitions:
-- On CLOSE shift to state 174
## Reductions:

State 174:
## Known stack suffix:
## OPEN OPEN IDENT CLOSE expr CLOSE
## LR(1) items:
lambda -> OPEN OPEN IDENT CLOSE expr CLOSE . [ CLOSE ]
## Transitions:
## Reductions:
-- On CLOSE reduce production lambda -> OPEN OPEN IDENT CLOSE expr CLOSE

State 175:
## Known stack suffix:
## OPEN TAU lambda
## LR(1) items:
expr -> OPEN TAU lambda . CLOSE [ # ]
## Transitions:
-- On CLOSE shift to state 176
## Reductions:

State 176:
## Known stack suffix:
## OPEN TAU lambda CLOSE
## LR(1) items:
expr -> OPEN TAU lambda CLOSE . [ # ]
## Transitions:
## Reductions:
-- On # reduce production expr -> OPEN TAU lambda CLOSE

State 177:
## Known stack suffix:
## OPEN OR
## LR(1) items:
expr -> OPEN OR . expr expr_list CLOSE [ # ]
## Transitions:
-- On TRUE shift to state 125
-- On OPEN shift to state 126
-- On IDENT shift to state 133
-- On FALSE shift to state 134
-- On expr shift to state 178
## Reductions:

State 178:
## Known stack suffix:
## OPEN OR expr
## LR(1) items:
expr -> OPEN OR expr . expr_list CLOSE [ # ]
## Transitions:
-- On TRUE shift to state 125
-- On OPEN shift to state 126
-- On IDENT shift to state 133
-- On FALSE shift to state 134
-- On expr_list shift to state 179
-- On expr shift to state 138
## Reductions:
-- On CLOSE reduce production expr_list ->

State 179:
## Known stack suffix:
## OPEN OR expr expr_list
## LR(1) items:
expr -> OPEN OR expr expr_list . CLOSE [ # ]
## Transitions:
-- On CLOSE shift to state 180
## Reductions:

State 180:
## Known stack suffix:
## OPEN OR expr expr_list CLOSE
## LR(1) items:
expr -> OPEN OR expr expr_list CLOSE . [ # ]
## Transitions:
## Reductions:
-- On # reduce production expr -> OPEN OR expr expr_list CLOSE

State 181:
## Known stack suffix:
## OPEN NOT
## LR(1) items:
expr -> OPEN NOT . expr CLOSE [ # ]
## Transitions:
-- On TRUE shift to state 125
-- On OPEN shift to state 126
-- On IDENT shift to state 133
-- On FALSE shift to state 134
-- On expr shift to state 182
## Reductions:

State 182:
## Known stack suffix:
## OPEN NOT expr
## LR(1) items:
expr -> OPEN NOT expr . CLOSE [ # ]
## Transitions:
-- On CLOSE shift to state 183
## Reductions:

State 183:
## Known stack suffix:
## OPEN NOT expr CLOSE
## LR(1) items:
expr -> OPEN NOT expr CLOSE . [ # ]
## Transitions:
## Reductions:
-- On # reduce production expr -> OPEN NOT expr CLOSE

State 184:
## Known stack suffix:
## OPEN IMPLY
## LR(1) items:
expr -> OPEN IMPLY . expr expr_list CLOSE [ # ]
## Transitions:
-- On TRUE shift to state 125
-- On OPEN shift to state 126
-- On IDENT shift to state 133
-- On FALSE shift to state 134
-- On expr shift to state 185
## Reductions:

State 185:
## Known stack suffix:
## OPEN IMPLY expr
## LR(1) items:
expr -> OPEN IMPLY expr . expr_list CLOSE [ # ]
## Transitions:
-- On TRUE shift to state 125
-- On OPEN shift to state 126
-- On IDENT shift to state 133
-- On FALSE shift to state 134
-- On expr_list shift to state 186
-- On expr shift to state 138
## Reductions:
-- On CLOSE reduce production expr_list ->

State 186:
## Known stack suffix:
## OPEN IMPLY expr expr_list
## LR(1) items:
expr -> OPEN IMPLY expr expr_list . CLOSE [ # ]
## Transitions:
-- On CLOSE shift to state 187
## Reductions:

State 187:
## Known stack suffix:
## OPEN IMPLY expr expr_list CLOSE
## LR(1) items:
expr -> OPEN IMPLY expr expr_list CLOSE . [ # ]
## Transitions:
## Reductions:
-- On # reduce production expr -> OPEN IMPLY expr expr_list CLOSE

State 188:
## Known stack suffix:
## OPEN IDENT
## LR(1) items:
expr -> OPEN IDENT . expr_list CLOSE [ # ]
## Transitions:
-- On TRUE shift to state 125
-- On OPEN shift to state 126
-- On IDENT shift to state 133
-- On FALSE shift to state 134
-- On expr_list shift to state 189
-- On expr shift to state 138
## Reductions:
-- On CLOSE reduce production expr_list ->

State 189:
## Known stack suffix:
## OPEN IDENT expr_list
## LR(1) items:
expr -> OPEN IDENT expr_list . CLOSE [ # ]
## Transitions:
-- On CLOSE shift to state 190
## Reductions:

State 190:
## Known stack suffix:
## OPEN IDENT expr_list CLOSE
## LR(1) items:
expr -> OPEN IDENT expr_list CLOSE . [ # ]
## Transitions:
## Reductions:
-- On # reduce production expr -> OPEN IDENT expr_list CLOSE

State 191:
## Known stack suffix:
## OPEN FALSE
## LR(1) items:
expr -> OPEN FALSE . CLOSE [ # ]
## Transitions:
-- On CLOSE shift to state 192
## Reductions:

State 192:
## Known stack suffix:
## OPEN FALSE CLOSE
## LR(1) items:
expr -> OPEN FALSE CLOSE . [ # ]
## Transitions:
## Reductions:
-- On # reduce production expr -> OPEN FALSE CLOSE

State 193:
## Known stack suffix:
## OPEN EX
## LR(1) items:
expr -> OPEN EX . lambda CLOSE [ # ]
## Transitions:
-- On OPEN shift to state 120
-- On lambda shift to state 194
## Reductions:

State 194:
## Known stack suffix:
## OPEN EX lambda
## LR(1) items:
expr -> OPEN EX lambda . CLOSE [ # ]
## Transitions:
-- On CLOSE shift to state 195
## Reductions:

State 195:
## Known stack suffix:
## OPEN EX lambda CLOSE
## LR(1) items:
expr -> OPEN EX lambda CLOSE . [ # ]
## Transitions:
## Reductions:
-- On # reduce production expr -> OPEN EX lambda CLOSE

State 196:
## Known stack suffix:
## OPEN EQUIV
## LR(1) items:
expr -> OPEN EQUIV . expr expr_list CLOSE [ # ]
## Transitions:
-- On TRUE shift to state 125
-- On OPEN shift to state 126
-- On IDENT shift to state 133
-- On FALSE shift to state 134
-- On expr shift to state 197
## Reductions:

State 197:
## Known stack suffix:
## OPEN EQUIV expr
## LR(1) items:
expr -> OPEN EQUIV expr . expr_list CLOSE [ # ]
## Transitions:
-- On TRUE shift to state 125
-- On OPEN shift to state 126
-- On IDENT shift to state 133
-- On FALSE shift to state 134
-- On expr_list shift to state 198
-- On expr shift to state 138
## Reductions:
-- On CLOSE reduce production expr_list ->

State 198:
## Known stack suffix:
## OPEN EQUIV expr expr_list
## LR(1) items:
expr -> OPEN EQUIV expr expr_list . CLOSE [ # ]
## Transitions:
-- On CLOSE shift to state 199
## Reductions:

State 199:
## Known stack suffix:
## OPEN EQUIV expr expr_list CLOSE
## LR(1) items:
expr -> OPEN EQUIV expr expr_list CLOSE . [ # ]
## Transitions:
## Reductions:
-- On # reduce production expr -> OPEN EQUIV expr expr_list CLOSE

State 200:
## Known stack suffix:
## OPEN EQUAL
## LR(1) items:
expr -> OPEN EQUAL . expr expr CLOSE [ # ]
## Transitions:
-- On TRUE shift to state 125
-- On OPEN shift to state 126
-- On IDENT shift to state 133
-- On FALSE shift to state 134
-- On expr shift to state 201
## Reductions:

State 201:
## Known stack suffix:
## OPEN EQUAL expr
## LR(1) items:
expr -> OPEN EQUAL expr . expr CLOSE [ # ]
## Transitions:
-- On TRUE shift to state 125
-- On OPEN shift to state 126
-- On IDENT shift to state 133
-- On FALSE shift to state 134
-- On expr shift to state 202
## Reductions:

State 202:
## Known stack suffix:
## OPEN EQUAL expr expr
## LR(1) items:
expr -> OPEN EQUAL expr expr . CLOSE [ # ]
## Transitions:
-- On CLOSE shift to state 203
## Reductions:

State 203:
## Known stack suffix:
## OPEN EQUAL expr expr CLOSE
## LR(1) items:
expr -> OPEN EQUAL expr expr CLOSE . [ # ]
## Transitions:
## Reductions:
-- On # reduce production expr -> OPEN EQUAL expr expr CLOSE

State 204:
## Known stack suffix:
## OPEN AND
## LR(1) items:
expr -> OPEN AND . expr expr_list CLOSE [ # ]
## Transitions:
-- On TRUE shift to state 125
-- On OPEN shift to state 126
-- On IDENT shift to state 133
-- On FALSE shift to state 134
-- On expr shift to state 205
## Reductions:

State 205:
## Known stack suffix:
## OPEN AND expr
## LR(1) items:
expr -> OPEN AND expr . expr_list CLOSE [ # ]
## Transitions:
-- On TRUE shift to state 125
-- On OPEN shift to state 126
-- On IDENT shift to state 133
-- On FALSE shift to state 134
-- On expr_list shift to state 206
-- On expr shift to state 138
## Reductions:
-- On CLOSE reduce production expr_list ->

State 206:
## Known stack suffix:
## OPEN AND expr expr_list
## LR(1) items:
expr -> OPEN AND expr expr_list . CLOSE [ # ]
## Transitions:
-- On CLOSE shift to state 207
## Reductions:

State 207:
## Known stack suffix:
## OPEN AND expr expr_list CLOSE
## LR(1) items:
expr -> OPEN AND expr expr_list CLOSE . [ # ]
## Transitions:
## Reductions:
-- On # reduce production expr -> OPEN AND expr expr_list CLOSE

State 208:
## Known stack suffix:
## OPEN ALL
## LR(1) items:
expr -> OPEN ALL . lambda CLOSE [ # ]
## Transitions:
-- On OPEN shift to state 120
-- On lambda shift to state 209
## Reductions:

State 209:
## Known stack suffix:
## OPEN ALL lambda
## LR(1) items:
expr -> OPEN ALL lambda . CLOSE [ # ]
## Transitions:
-- On CLOSE shift to state 210
## Reductions:

State 210:
## Known stack suffix:
## OPEN ALL lambda CLOSE
## LR(1) items:
expr -> OPEN ALL lambda CLOSE . [ # ]
## Transitions:
## Reductions:
-- On # reduce production expr -> OPEN ALL lambda CLOSE

State 211:
## Known stack suffix:
## IDENT
## LR(1) items:
expr -> IDENT . [ # ]
## Transitions:
## Reductions:
-- On # reduce production expr -> IDENT

State 212:
## Known stack suffix:
## FALSE
## LR(1) items:
expr -> FALSE . [ # ]
## Transitions:
## Reductions:
-- On # reduce production expr -> FALSE

State 213:
## Known stack suffix:
## GOAL expr
## LR(1) items:
phrase -> GOAL expr . [ # ]
## Transitions:
## Reductions:
-- On # reduce production phrase -> GOAL expr

State 214:
## Known stack suffix:
## DEF
## LR(1) items:
phrase -> DEF . IDENT OPEN ident_list CLOSE expr [ # ]
## Transitions:
-- On IDENT shift to state 215
## Reductions:

State 215:
## Known stack suffix:
## DEF IDENT
## LR(1) items:
phrase -> DEF IDENT . OPEN ident_list CLOSE expr [ # ]
## Transitions:
-- On OPEN shift to state 216
## Reductions:

State 216:
## Known stack suffix:
## DEF IDENT OPEN
## LR(1) items:
phrase -> DEF IDENT OPEN . ident_list CLOSE expr [ # ]
## Transitions:
-- On IDENT shift to state 217
-- On ident_list shift to state 219
## Reductions:
-- On CLOSE reduce production ident_list ->

State 217:
## Known stack suffix:
## IDENT
## LR(1) items:
ident_list -> IDENT . ident_list [ CLOSE ]
## Transitions:
-- On IDENT shift to state 217
-- On ident_list shift to state 218
## Reductions:
-- On CLOSE reduce production ident_list ->

State 218:
## Known stack suffix:
## IDENT ident_list
## LR(1) items:
ident_list -> IDENT ident_list . [ CLOSE ]
## Transitions:
## Reductions:
-- On CLOSE reduce production ident_list -> IDENT ident_list

State 219:
## Known stack suffix:
## DEF IDENT OPEN ident_list
## LR(1) items:
phrase -> DEF IDENT OPEN ident_list . CLOSE expr [ # ]
## Transitions:
-- On CLOSE shift to state 220
## Reductions:

State 220:
## Known stack suffix:
## DEF IDENT OPEN ident_list CLOSE
## LR(1) items:
phrase -> DEF IDENT OPEN ident_list CLOSE . expr [ # ]
## Transitions:
-- On TRUE shift to state 115
-- On OPEN shift to state 116
-- On IDENT shift to state 211
-- On FALSE shift to state 212
-- On expr shift to state 221
## Reductions:

State 221:
## Known stack suffix:
## DEF IDENT OPEN ident_list CLOSE expr
## LR(1) items:
phrase -> DEF IDENT OPEN ident_list CLOSE expr . [ # ]
## Transitions:
## Reductions:
-- On # reduce production phrase -> DEF IDENT OPEN ident_list CLOSE expr

State 222:
## Known stack suffix:
## phrase
## LR(1) items:
phrase' -> phrase . [ # ]
## Transitions:
## Reductions:
-- On # accept phrase

State 223:
## Known stack suffix:
## int_opt
## LR(1) items:
phrase -> int_opt . hyp_name expr [ # ]
## Transitions:
-- On STRING shift to state 224
-- On hyp_name shift to state 225
## Reductions:
-- On TRUE reduce production hyp_name ->
-- On OPEN reduce production hyp_name ->
-- On IDENT reduce production hyp_name ->
-- On FALSE reduce production hyp_name ->

State 224:
## Known stack suffix:
## STRING
## LR(1) items:
hyp_name -> STRING . [ TRUE OPEN IDENT FALSE ]
## Transitions:
## Reductions:
-- On TRUE reduce production hyp_name -> STRING
-- On OPEN reduce production hyp_name -> STRING
-- On IDENT reduce production hyp_name -> STRING
-- On FALSE reduce production hyp_name -> STRING

State 225:
## Known stack suffix:
## int_opt hyp_name
## LR(1) items:
phrase -> int_opt hyp_name . expr [ # ]
## Transitions:
-- On TRUE shift to state 115
-- On OPEN shift to state 116
-- On IDENT shift to state 211
-- On FALSE shift to state 212
-- On expr shift to state 226
## Reductions:

State 226:
## Known stack suffix:
## int_opt hyp_name expr
## LR(1) items:
phrase -> int_opt hyp_name expr . [ # ]
## Transitions:
## Reductions:
-- On # reduce production phrase -> int_opt hyp_name expr

State 227:
## Known stack suffix:
##
## LR(1) items:
theory' -> . theory [ # ]
## Transitions:
-- On INT shift to state 113
-- On GOAL shift to state 228
-- On EOF shift to state 230
-- On DEF shift to state 231
-- On theory shift to state 237
-- On phrase shift to state 238
-- On int_opt shift to state 240
## Reductions:
-- On TRUE reduce production int_opt ->
-- On STRING reduce production int_opt ->
-- On OPEN reduce production int_opt ->
-- On IDENT reduce production int_opt ->
-- On FALSE reduce production int_opt ->

State 228:
## Known stack suffix:
## GOAL
## LR(1) items:
phrase -> GOAL . expr [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF ]
## Transitions:
-- On TRUE shift to state 125
-- On OPEN shift to state 126
-- On IDENT shift to state 133
-- On FALSE shift to state 134
-- On expr shift to state 229
## Reductions:

State 229:
## Known stack suffix:
## GOAL expr
## LR(1) items:
phrase -> GOAL expr . [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF ]
## Transitions:
## Reductions:
-- On TRUE reduce production phrase -> GOAL expr
-- On STRING reduce production phrase -> GOAL expr
-- On OPEN reduce production phrase -> GOAL expr
-- On INT reduce production phrase -> GOAL expr
-- On IDENT reduce production phrase -> GOAL expr
-- On GOAL reduce production phrase -> GOAL expr
-- On FALSE reduce production phrase -> GOAL expr
-- On EOF reduce production phrase -> GOAL expr
-- On DEF reduce production phrase -> GOAL expr

State 230:
## Known stack suffix:
## EOF
## LR(1) items:
theory -> EOF . [ # ]
## Transitions:
## Reductions:
-- On # reduce production theory -> EOF

State 231:
## Known stack suffix:
## DEF
## LR(1) items:
phrase -> DEF . IDENT OPEN ident_list CLOSE expr [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF ]
## Transitions:
-- On IDENT shift to state 232
## Reductions:

State 232:
## Known stack suffix:
## DEF IDENT
## LR(1) items:
phrase -> DEF IDENT . OPEN ident_list CLOSE expr [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF ]
## Transitions:
-- On OPEN shift to state 233
## Reductions:

State 233:
## Known stack suffix:
## DEF IDENT OPEN
## LR(1) items:
phrase -> DEF IDENT OPEN . ident_list CLOSE expr [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF ]
## Transitions:
-- On IDENT shift to state 217
-- On ident_list shift to state 234
## Reductions:
-- On CLOSE reduce production ident_list ->

State 234:
## Known stack suffix:
## DEF IDENT OPEN ident_list
## LR(1) items:
phrase -> DEF IDENT OPEN ident_list . CLOSE expr [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF ]
## Transitions:
-- On CLOSE shift to state 235
## Reductions:

State 235:
## Known stack suffix:
## DEF IDENT OPEN ident_list CLOSE
## LR(1) items:
phrase -> DEF IDENT OPEN ident_list CLOSE . expr [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF ]
## Transitions:
-- On TRUE shift to state 125
-- On OPEN shift to state 126
-- On IDENT shift to state 133
-- On FALSE shift to state 134
-- On expr shift to state 236
## Reductions:

State 236:
## Known stack suffix:
## DEF IDENT OPEN ident_list CLOSE expr
## LR(1) items:
phrase -> DEF IDENT OPEN ident_list CLOSE expr . [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF ]
## Transitions:
## Reductions:
-- On TRUE reduce production phrase -> DEF IDENT OPEN ident_list CLOSE expr
-- On STRING reduce production phrase -> DEF IDENT OPEN ident_list CLOSE expr
-- On OPEN reduce production phrase -> DEF IDENT OPEN ident_list CLOSE expr
-- On INT reduce production phrase -> DEF IDENT OPEN ident_list CLOSE expr
-- On IDENT reduce production phrase -> DEF IDENT OPEN ident_list CLOSE expr
-- On GOAL reduce production phrase -> DEF IDENT OPEN ident_list CLOSE expr
-- On FALSE reduce production phrase -> DEF IDENT OPEN ident_list CLOSE expr
-- On EOF reduce production phrase -> DEF IDENT OPEN ident_list CLOSE expr
-- On DEF reduce production phrase -> DEF IDENT OPEN ident_list CLOSE expr

State 237:
## Known stack suffix:
## theory
## LR(1) items:
theory' -> theory . [ # ]
## Transitions:
## Reductions:
-- On # accept theory

State 238:
## Known stack suffix:
## phrase
## LR(1) items:
theory -> phrase . theory [ # ]
## Transitions:
-- On INT shift to state 113
-- On GOAL shift to state 228
-- On EOF shift to state 230
-- On DEF shift to state 231
-- On theory shift to state 239
-- On phrase shift to state 238
-- On int_opt shift to state 240
## Reductions:
-- On TRUE reduce production int_opt ->
-- On STRING reduce production int_opt ->
-- On OPEN reduce production int_opt ->
-- On IDENT reduce production int_opt ->
-- On FALSE reduce production int_opt ->

State 239:
## Known stack suffix:
## phrase theory
## LR(1) items:
theory -> phrase theory . [ # ]
## Transitions:
## Reductions:
-- On # reduce production theory -> phrase theory

State 240:
## Known stack suffix:
## int_opt
## LR(1) items:
phrase -> int_opt . hyp_name expr [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF ]
## Transitions:
-- On STRING shift to state 224
-- On hyp_name shift to state 241
## Reductions:
-- On TRUE reduce production hyp_name ->
-- On OPEN reduce production hyp_name ->
-- On IDENT reduce production hyp_name ->
-- On FALSE reduce production hyp_name ->

State 241:
## Known stack suffix:
## int_opt hyp_name
## LR(1) items:
phrase -> int_opt hyp_name . expr [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF ]
## Transitions:
-- On TRUE shift to state 125
-- On OPEN shift to state 126
-- On IDENT shift to state 133
-- On FALSE shift to state 134
-- On expr shift to state 242
## Reductions:

State 242:
## Known stack suffix:
## int_opt hyp_name expr
## LR(1) items:
phrase -> int_opt hyp_name expr . [ TRUE STRING OPEN INT IDENT GOAL FALSE EOF DEF ]
## Transitions:
## Reductions:
-- On TRUE reduce production phrase -> int_opt hyp_name expr
-- On STRING reduce production phrase -> int_opt hyp_name expr
-- On OPEN reduce production phrase -> int_opt hyp_name expr
-- On INT reduce production phrase -> int_opt hyp_name expr
-- On IDENT reduce production phrase -> int_opt hyp_name expr
-- On GOAL reduce production phrase -> int_opt hyp_name expr
-- On FALSE reduce production phrase -> int_opt hyp_name expr
-- On EOF reduce production phrase -> int_opt hyp_name expr
-- On DEF reduce production phrase -> int_opt hyp_name expr

State 243:
## Known stack suffix:
##
## LR(1) items:
tpfile' -> . tpfile [ # ]
## Transitions:
-- On INPUT_FORMULA shift to state 244
-- On INCLUDE shift to state 306
-- On EOF shift to state 311
-- On tpphrase shift to state 312
-- On tpfile shift to state 314
## Reductions:

State 244:
## Known stack suffix:
## INPUT_FORMULA
## LR(1) items:
tpphrase -> INPUT_FORMULA . OPEN LIDENT COMMA LIDENT COMMA tpformula CLOSE DOT [ INPUT_FORMULA INCLUDE EOF ]
## Transitions:
-- On OPEN shift to state 245
## Reductions:

State 245:
## Known stack suffix:
## INPUT_FORMULA OPEN
## LR(1) items:
tpphrase -> INPUT_FORMULA OPEN . LIDENT COMMA LIDENT COMMA tpformula CLOSE DOT [ INPUT_FORMULA INCLUDE EOF ]
## Transitions:
-- On LIDENT shift to state 246
## Reductions:

State 246:
## Known stack suffix:
## INPUT_FORMULA OPEN LIDENT
## LR(1) items:
tpphrase -> INPUT_FORMULA OPEN LIDENT . COMMA LIDENT COMMA tpformula CLOSE DOT [ INPUT_FORMULA INCLUDE EOF ]
## Transitions:
-- On COMMA shift to state 247
## Reductions:

State 247:
## Known stack suffix:
## INPUT_FORMULA OPEN LIDENT COMMA
## LR(1) items:
tpphrase -> INPUT_FORMULA OPEN LIDENT COMMA . LIDENT COMMA tpformula CLOSE DOT [ INPUT_FORMULA INCLUDE EOF ]
## Transitions:
-- On LIDENT shift to state 248
## Reductions:

State 248:
## Known stack suffix:
## INPUT_FORMULA OPEN LIDENT COMMA LIDENT
## LR(1) items:
tpphrase -> INPUT_FORMULA OPEN LIDENT COMMA LIDENT . COMMA tpformula CLOSE DOT [ INPUT_FORMULA INCLUDE EOF ]
## Transitions:
-- On COMMA shift to state 249
## Reductions:

State 249:
## Known stack suffix:
## INPUT_FORMULA OPEN LIDENT COMMA LIDENT COMMA
## LR(1) items:
tpphrase -> INPUT_FORMULA OPEN LIDENT COMMA LIDENT COMMA . tpformula CLOSE DOT [ INPUT_FORMULA INCLUDE EOF ]
## Transitions:
-- On UIDENT shift to state 250
-- On OPEN shift to state 251
-- On NOT shift to state 252
-- On LIDENT shift to state 253
-- On EX shift to state 267
-- On EQUAL shift to state 255
-- On ALL shift to state 275
-- On tpformula shift to state 303
-- On tpexpr shift to state 280
-- On tpatom shift to state 286
## Reductions:

State 250:
## Known stack suffix:
## UIDENT
## LR(1) items:
tpexpr -> UIDENT . [ XOR RIMPLY OR NOR NAND IMPLY EQUIV COMMA CLOSE AND ]
## Transitions:
## Reductions:
-- On XOR reduce production tpexpr -> UIDENT
-- On RIMPLY reduce production tpexpr -> UIDENT
-- On OR reduce production tpexpr -> UIDENT
-- On NOR reduce production tpexpr -> UIDENT
-- On NAND reduce production tpexpr -> UIDENT
-- On IMPLY reduce production tpexpr -> UIDENT
-- On EQUIV reduce production tpexpr -> UIDENT
-- On COMMA reduce production tpexpr -> UIDENT
-- On CLOSE reduce production tpexpr -> UIDENT
-- On AND reduce production tpexpr -> UIDENT

State 251:
## Known stack suffix:
## OPEN
## LR(1) items:
tpatom -> OPEN . tpformula CLOSE [ XOR RIMPLY OR NOR NAND IMPLY EQUIV CLOSE AND ]
## Transitions:
-- On UIDENT shift to state 250
-- On OPEN shift to state 251
-- On NOT shift to state 252
-- On LIDENT shift to state 253
-- On EX shift to state 267
-- On EQUAL shift to state 255
-- On ALL shift to state 275
-- On tpformula shift to state 284
-- On tpexpr shift to state 280
-- On tpatom shift to state 286
## Reductions:

State 252:
## Known stack suffix:
## NOT
## LR(1) items:
tpatom -> NOT . tpatom [ XOR RIMPLY OR NOR NAND IMPLY EQUIV CLOSE AND ]
## Transitions:
-- On UIDENT shift to state 250
-- On OPEN shift to state 251
-- On NOT shift to state 252
-- On LIDENT shift to state 253
-- On EX shift to state 267
-- On EQUAL shift to state 255
-- On ALL shift to state 275
-- On tpexpr shift to state 280
-- On tpatom shift to state 283
## Reductions:

State 253:
## Known stack suffix:
## LIDENT
## LR(1) items:
tpexpr -> LIDENT . tparguments [ XOR RIMPLY OR NOR NAND IMPLY EQUIV COMMA CLOSE AND ]
## Transitions:
-- On OPEN shift to state 254
-- On tparguments shift to state 266
## Reductions:
-- On XOR reduce production tparguments ->
-- On RIMPLY reduce production tparguments ->
-- On OR reduce production tparguments ->
-- On NOR reduce production tparguments ->
-- On NAND reduce production tparguments ->
-- On IMPLY reduce production tparguments ->
-- On EQUIV reduce production tparguments ->
-- On COMMA reduce production tparguments ->
-- On CLOSE reduce production tparguments ->
-- On AND reduce production tparguments ->

State 254:
## Known stack suffix:
## OPEN
## LR(1) items:
tparguments -> OPEN . tpexpr_list CLOSE [ XOR RIMPLY OR NOR NAND IMPLY EQUIV COMMA CLOSE AND ]
## Transitions:
-- On UIDENT shift to state 250
-- On LIDENT shift to state 253
-- On EQUAL shift to state 255
-- On tpexpr_list shift to state 261
-- On tpexpr shift to state 263
## Reductions:

State 255:
## Known stack suffix:
## EQUAL
## LR(1) items:
tpexpr -> EQUAL . OPEN tpexpr COMMA tpexpr CLOSE [ XOR RIMPLY OR NOR NAND IMPLY EQUIV COMMA CLOSE AND ]
## Transitions:
-- On OPEN shift to state 256
## Reductions:

State 256:
## Known stack suffix:
## EQUAL OPEN
## LR(1) items:
tpexpr -> EQUAL OPEN . tpexpr COMMA tpexpr CLOSE [ XOR RIMPLY OR NOR NAND IMPLY EQUIV COMMA CLOSE AND ]
## Transitions:
-- On UIDENT shift to state 250
-- On LIDENT shift to state 253
-- On EQUAL shift to state 255
-- On tpexpr shift to state 257
## Reductions:

State 257:
## Known stack suffix:
## EQUAL OPEN tpexpr
## LR(1) items:
tpexpr -> EQUAL OPEN tpexpr . COMMA tpexpr CLOSE [ XOR RIMPLY OR NOR NAND IMPLY EQUIV COMMA CLOSE AND ]
## Transitions:
-- On COMMA shift to state 258
## Reductions:

State 258:
## Known stack suffix:
## EQUAL OPEN tpexpr COMMA
## LR(1) items:
tpexpr -> EQUAL OPEN tpexpr COMMA . tpexpr CLOSE [ XOR RIMPLY OR NOR NAND IMPLY EQUIV COMMA CLOSE AND ]
## Transitions:
-- On UIDENT shift to state 250
-- On LIDENT shift to state 253
-- On EQUAL shift to state 255
-- On tpexpr shift to state 259
## Reductions:

State 259:
## Known stack suffix:
## EQUAL OPEN tpexpr COMMA tpexpr
## LR(1) items:
tpexpr -> EQUAL OPEN tpexpr COMMA tpexpr . CLOSE [ XOR RIMPLY OR NOR NAND IMPLY EQUIV COMMA CLOSE AND ]
## Transitions:
-- On CLOSE shift to state 260
## Reductions:

State 260:
## Known stack suffix:
## EQUAL OPEN tpexpr COMMA tpexpr CLOSE
## LR(1) items:
tpexpr -> EQUAL OPEN tpexpr COMMA tpexpr CLOSE . [ XOR RIMPLY OR NOR NAND IMPLY EQUIV COMMA CLOSE AND ]
## Transitions:
## Reductions:
-- On XOR reduce production tpexpr -> EQUAL OPEN tpexpr COMMA tpexpr CLOSE
-- On RIMPLY reduce production tpexpr -> EQUAL OPEN tpexpr COMMA tpexpr CLOSE
-- On OR reduce production tpexpr -> EQUAL OPEN tpexpr COMMA tpexpr CLOSE
-- On NOR reduce production tpexpr -> EQUAL OPEN tpexpr COMMA tpexpr CLOSE
-- On NAND reduce production tpexpr -> EQUAL OPEN tpexpr COMMA tpexpr CLOSE
-- On IMPLY reduce production tpexpr -> EQUAL OPEN tpexpr COMMA tpexpr CLOSE
-- On EQUIV reduce production tpexpr -> EQUAL OPEN tpexpr COMMA tpexpr CLOSE
-- On COMMA reduce production tpexpr -> EQUAL OPEN tpexpr COMMA tpexpr CLOSE
-- On CLOSE reduce production tpexpr -> EQUAL OPEN tpexpr COMMA tpexpr CLOSE
-- On AND reduce production tpexpr -> EQUAL OPEN tpexpr COMMA tpexpr CLOSE

State 261:
## Known stack suffix:
## OPEN tpexpr_list
## LR(1) items:
tparguments -> OPEN tpexpr_list . CLOSE [ XOR RIMPLY OR NOR NAND IMPLY EQUIV COMMA CLOSE AND ]
## Transitions:
-- On CLOSE shift to state 262
## Reductions:

State 262:
## Known stack suffix:
## OPEN tpexpr_list CLOSE
## LR(1) items:
tparguments -> OPEN tpexpr_list CLOSE . [ XOR RIMPLY OR NOR NAND IMPLY EQUIV COMMA CLOSE AND ]
## Transitions:
## Reductions:
-- On XOR reduce production tparguments -> OPEN tpexpr_list CLOSE
-- On RIMPLY reduce production tparguments -> OPEN tpexpr_list CLOSE
-- On OR reduce production tparguments -> OPEN tpexpr_list CLOSE
-- On NOR reduce production tparguments -> OPEN tpexpr_list CLOSE
-- On NAND reduce production tparguments -> OPEN tpexpr_list CLOSE
-- On IMPLY reduce production tparguments -> OPEN tpexpr_list CLOSE
-- On EQUIV reduce production tparguments -> OPEN tpexpr_list CLOSE
-- On COMMA reduce production tparguments -> OPEN tpexpr_list CLOSE
-- On CLOSE reduce production tparguments -> OPEN tpexpr_list CLOSE
-- On AND reduce production tparguments -> OPEN tpexpr_list CLOSE

State 263:
## Known stack suffix:
## tpexpr
## LR(1) items:
tpexpr_list -> tpexpr . COMMA tpexpr_list [ CLOSE ]
tpexpr_list -> tpexpr . [ CLOSE ]
## Transitions:
-- On COMMA shift to state 264
## Reductions:
-- On CLOSE reduce production tpexpr_list -> tpexpr

State 264:
## Known stack suffix:
## tpexpr COMMA
## LR(1) items:
tpexpr_list -> tpexpr COMMA . tpexpr_list [ CLOSE ]
## Transitions:
-- On UIDENT shift to state 250
-- On LIDENT shift to state 253
-- On EQUAL shift to state 255
-- On tpexpr_list shift to state 265
-- On tpexpr shift to state 263
## Reductions:

State 265:
## Known stack suffix:
## tpexpr COMMA tpexpr_list
## LR(1) items:
tpexpr_list -> tpexpr COMMA tpexpr_list . [ CLOSE ]
## Transitions:
## Reductions:
-- On CLOSE reduce production tpexpr_list -> tpexpr COMMA tpexpr_list

State 266:
## Known stack suffix:
## LIDENT tparguments
## LR(1) items:
tpexpr -> LIDENT tparguments . [ XOR RIMPLY OR NOR NAND IMPLY EQUIV COMMA CLOSE AND ]
## Transitions:
## Reductions:
-- On XOR reduce production tpexpr -> LIDENT tparguments
-- On RIMPLY reduce production tpexpr -> LIDENT tparguments
-- On OR reduce production tpexpr -> LIDENT tparguments
-- On NOR reduce production tpexpr -> LIDENT tparguments
-- On NAND reduce production tpexpr -> LIDENT tparguments
-- On IMPLY reduce production tpexpr -> LIDENT tparguments
-- On EQUIV reduce production tpexpr -> LIDENT tparguments
-- On COMMA reduce production tpexpr -> LIDENT tparguments
-- On CLOSE reduce production tpexpr -> LIDENT tparguments
-- On AND reduce production tpexpr -> LIDENT tparguments

State 267:
## Known stack suffix:
## EX
## LR(1) items:
tpatom -> EX . LBRACKET tpvar_list RBRACKET COLON tpatom [ XOR RIMPLY OR NOR NAND IMPLY EQUIV CLOSE AND ]
## Transitions:
-- On LBRACKET shift to state 268
## Reductions:

State 268:
## Known stack suffix:
## EX LBRACKET
## LR(1) items:
tpatom -> EX LBRACKET . tpvar_list RBRACKET COLON tpatom [ XOR RIMPLY OR NOR NAND IMPLY EQUIV CLOSE AND ]
## Transitions:
-- On UIDENT shift to state 269
-- On tpvar_list shift to state 272
## Reductions:

State 269:
## Known stack suffix:
## UIDENT
## LR(1) items:
tpvar_list -> UIDENT . COMMA tpvar_list [ RBRACKET ]
tpvar_list -> UIDENT . [ RBRACKET ]
## Transitions:
-- On COMMA shift to state 270
## Reductions:
-- On RBRACKET reduce production tpvar_list -> UIDENT

State 270:
## Known stack suffix:
## UIDENT COMMA
## LR(1) items:
tpvar_list -> UIDENT COMMA . tpvar_list [ RBRACKET ]
## Transitions:
-- On UIDENT shift to state 269
-- On tpvar_list shift to state 271
## Reductions:

State 271:
## Known stack suffix:
## UIDENT COMMA tpvar_list
## LR(1) items:
tpvar_list -> UIDENT COMMA tpvar_list . [ RBRACKET ]
## Transitions:
## Reductions:
-- On RBRACKET reduce production tpvar_list -> UIDENT COMMA tpvar_list

State 272:
## Known stack suffix:
## EX LBRACKET tpvar_list
## LR(1) items:
tpatom -> EX LBRACKET tpvar_list . RBRACKET COLON tpatom [ XOR RIMPLY OR NOR NAND IMPLY EQUIV CLOSE AND ]
## Transitions:
-- On RBRACKET shift to state 273
## Reductions:

State 273:
## Known stack suffix:
## EX LBRACKET tpvar_list RBRACKET
## LR(1) items:
tpatom -> EX LBRACKET tpvar_list RBRACKET . COLON tpatom [ XOR RIMPLY OR NOR NAND IMPLY EQUIV CLOSE AND ]
## Transitions:
-- On COLON shift to state 274
## Reductions:

State 274:
## Known stack suffix:
## EX LBRACKET tpvar_list RBRACKET COLON
## LR(1) items:
tpatom -> EX LBRACKET tpvar_list RBRACKET COLON . tpatom [ XOR RIMPLY OR NOR NAND IMPLY EQUIV CLOSE AND ]
## Transitions:
-- On UIDENT shift to state 250
-- On OPEN shift to state 251
-- On NOT shift to state 252
-- On LIDENT shift to state 253
-- On EX shift to state 267
-- On EQUAL shift to state 255
-- On ALL shift to state 275
-- On tpexpr shift to state 280
-- On tpatom shift to state 282
## Reductions:

State 275:
## Known stack suffix:
## ALL
## LR(1) items:
tpatom -> ALL . LBRACKET tpvar_list RBRACKET COLON tpatom [ XOR RIMPLY OR NOR NAND IMPLY EQUIV CLOSE AND ]
## Transitions:
-- On LBRACKET shift to state 276
## Reductions:

State 276:
## Known stack suffix:
## ALL LBRACKET
## LR(1) items:
tpatom -> ALL LBRACKET . tpvar_list RBRACKET COLON tpatom [ XOR RIMPLY OR NOR NAND IMPLY EQUIV CLOSE AND ]
## Transitions:
-- On UIDENT shift to state 269
-- On tpvar_list shift to state 277
## Reductions:

State 277:
## Known stack suffix:
## ALL LBRACKET tpvar_list
## LR(1) items:
tpatom -> ALL LBRACKET tpvar_list . RBRACKET COLON tpatom [ XOR RIMPLY OR NOR NAND IMPLY EQUIV CLOSE AND ]
## Transitions:
-- On RBRACKET shift to state 278
## Reductions:

State 278:
## Known stack suffix:
## ALL LBRACKET tpvar_list RBRACKET
## LR(1) items:
tpatom -> ALL LBRACKET tpvar_list RBRACKET . COLON tpatom [ XOR RIMPLY OR NOR NAND IMPLY EQUIV CLOSE AND ]
## Transitions:
-- On COLON shift to state 279
## Reductions:

State 279:
## Known stack suffix:
## ALL LBRACKET tpvar_list RBRACKET COLON
## LR(1) items:
tpatom -> ALL LBRACKET tpvar_list RBRACKET COLON . tpatom [ XOR RIMPLY OR NOR NAND IMPLY EQUIV CLOSE AND ]
## Transitions:
-- On UIDENT shift to state 250
-- On OPEN shift to state 251
-- On NOT shift to state 252
-- On LIDENT shift to state 253
-- On EX shift to state 267
-- On EQUAL shift to state 255
-- On ALL shift to state 275
-- On tpexpr shift to state 280
-- On tpatom shift to state 281
## Reductions:

State 280:
## Known stack suffix:
## tpexpr
## LR(1) items:
tpatom -> tpexpr . [ XOR RIMPLY OR NOR NAND IMPLY EQUIV CLOSE AND ]
## Transitions:
## Reductions:
-- On XOR reduce production tpatom -> tpexpr
-- On RIMPLY reduce production tpatom -> tpexpr
-- On OR reduce production tpatom -> tpexpr
-- On NOR reduce production tpatom -> tpexpr
-- On NAND reduce production tpatom -> tpexpr
-- On IMPLY reduce production tpatom -> tpexpr
-- On EQUIV reduce production tpatom -> tpexpr
-- On CLOSE reduce production tpatom -> tpexpr
-- On AND reduce production tpatom -> tpexpr

State 281:
## Known stack suffix:
## ALL LBRACKET tpvar_list RBRACKET COLON tpatom
## LR(1) items:
tpatom -> ALL LBRACKET tpvar_list RBRACKET COLON tpatom . [ XOR RIMPLY OR NOR NAND IMPLY EQUIV CLOSE AND ]
## Transitions:
## Reductions:
-- On XOR reduce production tpatom -> ALL LBRACKET tpvar_list RBRACKET COLON tpatom
-- On RIMPLY reduce production tpatom -> ALL LBRACKET tpvar_list RBRACKET COLON tpatom
-- On OR reduce production tpatom -> ALL LBRACKET tpvar_list RBRACKET COLON tpatom
-- On NOR reduce production tpatom -> ALL LBRACKET tpvar_list RBRACKET COLON tpatom
-- On NAND reduce production tpatom -> ALL LBRACKET tpvar_list RBRACKET COLON tpatom
-- On IMPLY reduce production tpatom -> ALL LBRACKET tpvar_list RBRACKET COLON tpatom
-- On EQUIV reduce production tpatom -> ALL LBRACKET tpvar_list RBRACKET COLON tpatom
-- On CLOSE reduce production tpatom -> ALL LBRACKET tpvar_list RBRACKET COLON tpatom
-- On AND reduce production tpatom -> ALL LBRACKET tpvar_list RBRACKET COLON tpatom

State 282:
## Known stack suffix:
## EX LBRACKET tpvar_list RBRACKET COLON tpatom
## LR(1) items:
tpatom -> EX LBRACKET tpvar_list RBRACKET COLON tpatom . [ XOR RIMPLY OR NOR NAND IMPLY EQUIV CLOSE AND ]
## Transitions:
## Reductions:
-- On XOR reduce production tpatom -> EX LBRACKET tpvar_list RBRACKET COLON tpatom
-- On RIMPLY reduce production tpatom -> EX LBRACKET tpvar_list RBRACKET COLON tpatom
-- On OR reduce production tpatom -> EX LBRACKET tpvar_list RBRACKET COLON tpatom
-- On NOR reduce production tpatom -> EX LBRACKET tpvar_list RBRACKET COLON tpatom
-- On NAND reduce production tpatom -> EX LBRACKET tpvar_list RBRACKET COLON tpatom
-- On IMPLY reduce production tpatom -> EX LBRACKET tpvar_list RBRACKET COLON tpatom
-- On EQUIV reduce production tpatom -> EX LBRACKET tpvar_list RBRACKET COLON tpatom
-- On CLOSE reduce production tpatom -> EX LBRACKET tpvar_list RBRACKET COLON tpatom
-- On AND reduce production tpatom -> EX LBRACKET tpvar_list RBRACKET COLON tpatom

State 283:
## Known stack suffix:
## NOT tpatom
## LR(1) items:
tpatom -> NOT tpatom . [ XOR RIMPLY OR NOR NAND IMPLY EQUIV CLOSE AND ]
## Transitions:
## Reductions:
-- On XOR reduce production tpatom -> NOT tpatom
-- On RIMPLY reduce production tpatom -> NOT tpatom
-- On OR reduce production tpatom -> NOT tpatom
-- On NOR reduce production tpatom -> NOT tpatom
-- On NAND reduce production tpatom -> NOT tpatom
-- On IMPLY reduce production tpatom -> NOT tpatom
-- On EQUIV reduce production tpatom -> NOT tpatom
-- On CLOSE reduce production tpatom -> NOT tpatom
-- On AND reduce production tpatom -> NOT tpatom

State 284:
## Known stack suffix:
## OPEN tpformula
## LR(1) items:
tpatom -> OPEN tpformula . CLOSE [ XOR RIMPLY OR NOR NAND IMPLY EQUIV CLOSE AND ]
## Transitions:
-- On CLOSE shift to state 285
## Reductions:

State 285:
## Known stack suffix:
## OPEN tpformula CLOSE
## LR(1) items:
tpatom -> OPEN tpformula CLOSE . [ XOR RIMPLY OR NOR NAND IMPLY EQUIV CLOSE AND ]
## Transitions:
## Reductions:
-- On XOR reduce production tpatom -> OPEN tpformula CLOSE
-- On RIMPLY reduce production tpatom -> OPEN tpformula CLOSE
-- On OR reduce production tpatom -> OPEN tpformula CLOSE
-- On NOR reduce production tpatom -> OPEN tpformula CLOSE
-- On NAND reduce production tpatom -> OPEN tpformula CLOSE
-- On IMPLY reduce production tpatom -> OPEN tpformula CLOSE
-- On EQUIV reduce production tpatom -> OPEN tpformula CLOSE
-- On CLOSE reduce production tpatom -> OPEN tpformula CLOSE
-- On AND reduce production tpatom -> OPEN tpformula CLOSE

State 286:
## Known stack suffix:
## tpatom
## LR(1) items:
tpformula -> tpatom . [ CLOSE ]
tpformula -> tpatom . AND tpformula [ CLOSE ]
tpformula -> tpatom . OR tpformula [ CLOSE ]
tpformula -> tpatom . IMPLY tpformula [ CLOSE ]
tpformula -> tpatom . EQUIV tpformula [ CLOSE ]
tpformula -> tpatom . RIMPLY tpformula [ CLOSE ]
tpformula -> tpatom . XOR tpformula [ CLOSE ]
tpformula -> tpatom . NOR tpformula [ CLOSE ]
tpformula -> tpatom . NAND tpformula [ CLOSE ]
## Transitions:
-- On XOR shift to state 287
-- On RIMPLY shift to state 289
-- On OR shift to state 291
-- On NOR shift to state 293
-- On NAND shift to state 295
-- On IMPLY shift to state 297
-- On EQUIV shift to state 299
-- On AND shift to state 301
## Reductions:
-- On CLOSE reduce production tpformula -> tpatom

State 287:
## Known stack suffix:
## tpatom XOR
## LR(1) items:
tpformula -> tpatom XOR . tpformula [ CLOSE ]
## Transitions:
-- On UIDENT shift to state 250
-- On OPEN shift to state 251
-- On NOT shift to state 252
-- On LIDENT shift to state 253
-- On EX shift to state 267
-- On EQUAL shift to state 255
-- On ALL shift to state 275
-- On tpformula shift to state 288
-- On tpexpr shift to state 280
-- On tpatom shift to state 286
## Reductions:

State 288:
## Known stack suffix:
## tpatom XOR tpformula
## LR(1) items:
tpformula -> tpatom XOR tpformula . [ CLOSE ]
## Transitions:
## Reductions:
-- On CLOSE reduce production tpformula -> tpatom XOR tpformula

State 289:
## Known stack suffix:
## tpatom RIMPLY
## LR(1) items:
tpformula -> tpatom RIMPLY . tpformula [ CLOSE ]
## Transitions:
-- On UIDENT shift to state 250
-- On OPEN shift to state 251
-- On NOT shift to state 252
-- On LIDENT shift to state 253
-- On EX shift to state 267
-- On EQUAL shift to state 255
-- On ALL shift to state 275
-- On tpformula shift to state 290
-- On tpexpr shift to state 280
-- On tpatom shift to state 286
## Reductions:

State 290:
## Known stack suffix:
## tpatom RIMPLY tpformula
## LR(1) items:
tpformula -> tpatom RIMPLY tpformula . [ CLOSE ]
## Transitions:
## Reductions:
-- On CLOSE reduce production tpformula -> tpatom RIMPLY tpformula

State 291:
## Known stack suffix:
## tpatom OR
## LR(1) items:
tpformula -> tpatom OR . tpformula [ CLOSE ]
## Transitions:
-- On UIDENT shift to state 250
-- On OPEN shift to state 251
-- On NOT shift to state 252
-- On LIDENT shift to state 253
-- On EX shift to state 267
-- On EQUAL shift to state 255
-- On ALL shift to state 275
-- On tpformula shift to state 292
-- On tpexpr shift to state 280
-- On tpatom shift to state 286
## Reductions:

State 292:
## Known stack suffix:
## tpatom OR tpformula
## LR(1) items:
tpformula -> tpatom OR tpformula . [ CLOSE ]
## Transitions:
## Reductions:
-- On CLOSE reduce production tpformula -> tpatom OR tpformula

State 293:
## Known stack suffix:
## tpatom NOR
## LR(1) items:
tpformula -> tpatom NOR . tpformula [ CLOSE ]
## Transitions:
-- On UIDENT shift to state 250
-- On OPEN shift to state 251
-- On NOT shift to state 252
-- On LIDENT shift to state 253
-- On EX shift to state 267
-- On EQUAL shift to state 255
-- On ALL shift to state 275
-- On tpformula shift to state 294
-- On tpexpr shift to state 280
-- On tpatom shift to state 286
## Reductions:

State 294:
## Known stack suffix:
## tpatom NOR tpformula
## LR(1) items:
tpformula -> tpatom NOR tpformula . [ CLOSE ]
## Transitions:
## Reductions:
-- On CLOSE reduce production tpformula -> tpatom NOR tpformula

State 295:
## Known stack suffix:
## tpatom NAND
## LR(1) items:
tpformula -> tpatom NAND . tpformula [ CLOSE ]
## Transitions:
-- On UIDENT shift to state 250
-- On OPEN shift to state 251
-- On NOT shift to state 252
-- On LIDENT shift to state 253
-- On EX shift to state 267
-- On EQUAL shift to state 255
-- On ALL shift to state 275
-- On tpformula shift to state 296
-- On tpexpr shift to state 280
-- On tpatom shift to state 286
## Reductions:

State 296:
## Known stack suffix:
## tpatom NAND tpformula
## LR(1) items:
tpformula -> tpatom NAND tpformula . [ CLOSE ]
## Transitions:
## Reductions:
-- On CLOSE reduce production tpformula -> tpatom NAND tpformula

State 297:
## Known stack suffix:
## tpatom IMPLY
## LR(1) items:
tpformula -> tpatom IMPLY . tpformula [ CLOSE ]
## Transitions:
-- On UIDENT shift to state 250
-- On OPEN shift to state 251
-- On NOT shift to state 252
-- On LIDENT shift to state 253
-- On EX shift to state 267
-- On EQUAL shift to state 255
-- On ALL shift to state 275
-- On tpformula shift to state 298
-- On tpexpr shift to state 280
-- On tpatom shift to state 286
## Reductions:

State 298:
## Known stack suffix:
## tpatom IMPLY tpformula
## LR(1) items:
tpformula -> tpatom IMPLY tpformula . [ CLOSE ]
## Transitions:
## Reductions:
-- On CLOSE reduce production tpformula -> tpatom IMPLY tpformula

State 299:
## Known stack suffix:
## tpatom EQUIV
## LR(1) items:
tpformula -> tpatom EQUIV . tpformula [ CLOSE ]
## Transitions:
-- On UIDENT shift to state 250
-- On OPEN shift to state 251
-- On NOT shift to state 252
-- On LIDENT shift to state 253
-- On EX shift to state 267
-- On EQUAL shift to state 255
-- On ALL shift to state 275
-- On tpformula shift to state 300
-- On tpexpr shift to state 280
-- On tpatom shift to state 286
## Reductions:

State 300:
## Known stack suffix:
## tpatom EQUIV tpformula
## LR(1) items:
tpformula -> tpatom EQUIV tpformula . [ CLOSE ]
## Transitions:
## Reductions:
-- On CLOSE reduce production tpformula -> tpatom EQUIV tpformula

State 301:
## Known stack suffix:
## tpatom AND
## LR(1) items:
tpformula -> tpatom AND . tpformula [ CLOSE ]
## Transitions:
-- On UIDENT shift to state 250
-- On OPEN shift to state 251
-- On NOT shift to state 252
-- On LIDENT shift to state 253
-- On EX shift to state 267
-- On EQUAL shift to state 255
-- On ALL shift to state 275
-- On tpformula shift to state 302
-- On tpexpr shift to state 280
-- On tpatom shift to state 286
## Reductions:

State 302:
## Known stack suffix:
## tpatom AND tpformula
## LR(1) items:
tpformula -> tpatom AND tpformula . [ CLOSE ]
## Transitions:
## Reductions:
-- On CLOSE reduce production tpformula -> tpatom AND tpformula

State 303:
## Known stack suffix:
## INPUT_FORMULA OPEN LIDENT COMMA LIDENT COMMA tpformula
## LR(1) items:
tpphrase -> INPUT_FORMULA OPEN LIDENT COMMA LIDENT COMMA tpformula . CLOSE DOT [ INPUT_FORMULA INCLUDE EOF ]
## Transitions:
-- On CLOSE shift to state 304
## Reductions:

State 304:
## Known stack suffix:
## INPUT_FORMULA OPEN LIDENT COMMA LIDENT COMMA tpformula CLOSE
## LR(1) items:
tpphrase -> INPUT_FORMULA OPEN LIDENT COMMA LIDENT COMMA tpformula CLOSE . DOT [ INPUT_FORMULA INCLUDE EOF ]
## Transitions:
-- On DOT shift to state 305
## Reductions:

State 305:
## Known stack suffix:
## INPUT_FORMULA OPEN LIDENT COMMA LIDENT COMMA tpformula CLOSE DOT
## LR(1) items:
tpphrase -> INPUT_FORMULA OPEN LIDENT COMMA LIDENT COMMA tpformula CLOSE DOT . [ INPUT_FORMULA INCLUDE EOF ]
## Transitions:
## Reductions:
-- On INPUT_FORMULA reduce production tpphrase -> INPUT_FORMULA OPEN LIDENT COMMA LIDENT COMMA tpformula CLOSE DOT
-- On INCLUDE reduce production tpphrase -> INPUT_FORMULA OPEN LIDENT COMMA LIDENT COMMA tpformula CLOSE DOT
-- On EOF reduce production tpphrase -> INPUT_FORMULA OPEN LIDENT COMMA LIDENT COMMA tpformula CLOSE DOT

State 306:
## Known stack suffix:
## INCLUDE
## LR(1) items:
tpphrase -> INCLUDE . OPEN STRING CLOSE DOT [ INPUT_FORMULA INCLUDE EOF ]
## Transitions:
-- On OPEN shift to state 307
## Reductions:

State 307:
## Known stack suffix:
## INCLUDE OPEN
## LR(1) items:
tpphrase -> INCLUDE OPEN . STRING CLOSE DOT [ INPUT_FORMULA INCLUDE EOF ]
## Transitions:
-- On STRING shift to state 308
## Reductions:

State 308:
## Known stack suffix:
## INCLUDE OPEN STRING
## LR(1) items:
tpphrase -> INCLUDE OPEN STRING . CLOSE DOT [ INPUT_FORMULA INCLUDE EOF ]
## Transitions:
-- On CLOSE shift to state 309
## Reductions:

State 309:
## Known stack suffix:
## INCLUDE OPEN STRING CLOSE
## LR(1) items:
tpphrase -> INCLUDE OPEN STRING CLOSE . DOT [ INPUT_FORMULA INCLUDE EOF ]
## Transitions:
-- On DOT shift to state 310
## Reductions:

State 310:
## Known stack suffix:
## INCLUDE OPEN STRING CLOSE DOT
## LR(1) items:
tpphrase -> INCLUDE OPEN STRING CLOSE DOT . [ INPUT_FORMULA INCLUDE EOF ]
## Transitions:
## Reductions:
-- On INPUT_FORMULA reduce production tpphrase -> INCLUDE OPEN STRING CLOSE DOT
-- On INCLUDE reduce production tpphrase -> INCLUDE OPEN STRING CLOSE DOT
-- On EOF reduce production tpphrase -> INCLUDE OPEN STRING CLOSE DOT

State 311:
## Known stack suffix:
## EOF
## LR(1) items:
tpfile -> EOF . [ # ]
## Transitions:
## Reductions:
-- On # reduce production tpfile -> EOF

State 312:
## Known stack suffix:
## tpphrase
## LR(1) items:
tpfile -> tpphrase . tpfile [ # ]
## Transitions:
-- On INPUT_FORMULA shift to state 244
-- On INCLUDE shift to state 306
-- On EOF shift to state 311
-- On tpphrase shift to state 312
-- On tpfile shift to state 313
## Reductions:

State 313:
## Known stack suffix:
## tpphrase tpfile
## LR(1) items:
tpfile -> tpphrase tpfile . [ # ]
## Transitions:
## Reductions:
-- On # reduce production tpfile -> tpphrase tpfile

State 314:
## Known stack suffix:
## tpfile
## LR(1) items:
tpfile' -> tpfile . [ # ]
## Transitions:
## Reductions:
-- On # accept tpfile

