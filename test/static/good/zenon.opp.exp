File "zenon.mly", line 52, characters 7-19:
Warning: the token INPUT_CLAUSE is unused.
File "zenon.mly", line 59, characters 7-15:
Warning: the token NEGATIVE is unused.
File "zenon.mly", line 58, characters 7-15:
Warning: the token POSITIVE is unused.
%{
Version.add "$Id: parser.mly,v 1.14 2004/09/28 13:12:58 doligez Exp $";;

open Expr;;
open Phrase;;

let rec mk_quant q vs body =
  match vs with
  | [] -> body
  | h::t -> q (h, "", mk_quant q t body)
;;

let rec myfold f e el =
  match el with
  | [] -> e
  | h::t -> f (e, myfold f h t)
;;

let mkand e el = myfold eand e el;;
let mkor e el = myfold eor e el;;
let mkimply e el = myfold eimply e el;;
let mkequiv e el = myfold eequiv e el;;

let hyp_counter = ref 0;;

%}
%start coqfile
%start phrase
%start theory
%start tpfile
%token ALL
%token AND
%token ARROW
%token BACKSLASHSLASH
%token <string> BEGINPROOF
%token BY
%token BYDEF
%token CLOSE
%token COLON
%token COLONEQUAL
%token COMMA
%token DEF
%token DOT
%token DOUBLEARROW
%token ELSE
%token ENDPROOF
%token EOF
%token EQUAL
%token EQUIV
%token EX
%token FALSE
%token FORALL
%token FUN
%token FUNARROW
%token GOAL
%token <string> IDENT
%token IF
%token IMPLY
%token IN
%token INCLUDE
%token INPUT_CLAUSE
%token INPUT_FORMULA
%token <int> INT
%token LBRACKET
%token LET
%token <string> LIDENT
%token LOCAL
%token NAND
%token NEGATIVE
%token NOR
%token NOT
%token OPEN
%token OR
%token POSITIVE
%token QED
%token RBRACKET
%token RIMPLY
%token SLASHBACKSLASH
%token <string> STRING
%token TAU
%token THEN
%token TILDE
%token TOBE
%token TRUE
%token <string> UIDENT
%token XOR
%nonassoc ELSE
%nonassoc forall
%right ARROW
%nonassoc DOUBLEARROW
%right BACKSLASHSLASH
%right SLASHBACKSLASH
%nonassoc TILDE
%nonassoc EQUAL
%type <string * Phrase.phrase list> coqfile
%type <Phrase.phrase> phrase
%type <Phrase.phrase list> theory
%type <Phrase.tpphrase list> tpfile
%%

theory:
  _1 = EOF
    {                      ( [] )}
| _1 = phrase _2 = theory
    {                      ( _1 :: _2 )}

phrase:
  _1 = DEF _2 = IDENT _3 = OPEN _4 = ident_list _5 = CLOSE _6 = expr
    {                                         ( Def (DefReal (_2, _4, _6)) )}
| _1 = int_opt _2 = hyp_name _3 = expr
    {                                         ( Hyp (_2, _3, _1) )}
| _1 = GOAL _2 = expr
    {                                         ( Globals.goal_found := true;
                                           Hyp ("_Zgoal", enot _2, 0) )}

expr:
  _1 = IDENT
    {                                         ( evar _1 )}
| _1 = OPEN _2 = IDENT _3 = expr_list _4 = CLOSE
    {                                         ( eapp (_2, _3) )}
| _1 = OPEN _2 = NOT _3 = expr _4 = CLOSE
    {                                         ( enot (_3) )}
| _1 = OPEN _2 = AND _3 = expr _4 = expr_list _5 = CLOSE
    {                                         ( mkand _3 _4 )}
| _1 = OPEN _2 = OR _3 = expr _4 = expr_list _5 = CLOSE
    {                                         ( mkor _3 _4 )}
| _1 = OPEN _2 = IMPLY _3 = expr _4 = expr_list _5 = CLOSE
    {                                         ( mkimply _3 _4 )}
| _1 = OPEN _2 = EQUIV _3 = expr _4 = expr_list _5 = CLOSE
    {                                         ( mkequiv _3 _4 )}
| _1 = OPEN _2 = TRUE _3 = CLOSE
    {                                         ( etrue )}
| _1 = TRUE
    {                                         ( etrue )}
| _1 = OPEN _2 = FALSE _3 = CLOSE
    {                                         ( efalse )}
| _1 = FALSE
    {                                         ( efalse )}
| _1 = OPEN _2 = ALL _3 = lambda _4 = CLOSE
    {                                         ( eall _3 )}
| _1 = OPEN _2 = EX _3 = lambda _4 = CLOSE
    {                                         ( eex _3 )}
| _1 = OPEN _2 = TAU _3 = lambda _4 = CLOSE
    {                                         ( etau _3 )}
| _1 = OPEN _2 = EQUAL _3 = expr _4 = expr _5 = CLOSE
    {                                         ( eapp ("=", [_3; _4]) )}

expr_list:
  _1 = expr _2 = expr_list
    {                       ( _1 :: _2 )}
| 
    {                       ( [] )}

lambda:
  _1 = OPEN _2 = OPEN _3 = IDENT _4 = STRING _5 = CLOSE _6 = expr _7 = CLOSE
    {                                                 ( (evar _3, _4, _6) )}
| _1 = OPEN _2 = OPEN _3 = IDENT _4 = CLOSE _5 = expr _6 = CLOSE
    {                                                 ( (evar _3, "", _5) )}

ident_list:
  
    {                      ( [] )}
| _1 = IDENT _2 = ident_list
    {                      ( evar _1 :: _2 )}

int_opt:
  
    {                      ( 1 )}
| _1 = INT
    {                      ( _1 )}

hyp_name:
  
    {                      ( incr hyp_counter; Printf.sprintf "_hyp%d" !hyp_counter )}
| _1 = STRING
    {                      ( incr hyp_counter; _1 )}

tpfile:
  _1 = EOF
    {                      ( [] )}
| _1 = tpphrase _2 = tpfile
    {                      ( _1 :: _2 )}

tpphrase:
  _1 = INCLUDE _2 = OPEN _3 = STRING _4 = CLOSE _5 = DOT
    {                                   ( Phrase.Include _3 )}
| _1 = INPUT_FORMULA _2 = OPEN _3 = LIDENT _4 = COMMA _5 = LIDENT _6 = COMMA _7 = tpformula _8 = CLOSE _9 = DOT
    {                                   ( Phrase.Formula (_3, _5, _7) )}

tpexpr:
  _1 = UIDENT
    {                                           ( evar (_1) )}
| _1 = LIDENT _2 = tparguments
    {                                           ( eapp (_1, _2) )}
| _1 = EQUAL _2 = OPEN _3 = tpexpr _4 = COMMA _5 = tpexpr _6 = CLOSE
    {                                           ( eapp ("=", [_3; _5]) )}

tparguments:
  _1 = OPEN _2 = tpexpr_list _3 = CLOSE
    {                                   ( _2 )}
| 
    {                                   ( [] )}

tpexpr_list:
  _1 = tpexpr _2 = COMMA _3 = tpexpr_list
    {                                   ( _1 :: _3 )}
| _1 = tpexpr
    {                                   ( [_1] )}

tpformula:
  _1 = tpatom
    {                                   ( _1 )}
| _1 = tpatom _2 = AND _3 = tpformula
    {                                   ( eand (_1, _3) )}
| _1 = tpatom _2 = OR _3 = tpformula
    {                                   ( eor (_1, _3) )}
| _1 = tpatom _2 = IMPLY _3 = tpformula
    {                                   ( eimply (_1, _3) )}
| _1 = tpatom _2 = EQUIV _3 = tpformula
    {                                   ( eequiv (_1, _3) )}
| _1 = tpatom _2 = RIMPLY _3 = tpformula
    {                                   ( eimply (_3, _1) )}
| _1 = tpatom _2 = XOR _3 = tpformula
    {                                   ( enot (eequiv (_1, _3)) )}
| _1 = tpatom _2 = NOR _3 = tpformula
    {                                   ( enot (eor (_1, _3)) )}
| _1 = tpatom _2 = NAND _3 = tpformula
    {                                   ( enot (eand (_1, _3)) )}

tpatom:
  _1 = ALL _2 = LBRACKET _3 = tpvar_list _4 = RBRACKET _5 = COLON _6 = tpatom
    {                                   ( mk_quant eall _3 _6 )}
| _1 = EX _2 = LBRACKET _3 = tpvar_list _4 = RBRACKET _5 = COLON _6 = tpatom
    {                                   ( mk_quant eex _3 _6 )}
| _1 = NOT _2 = tpatom
    {                                   ( enot (_2) )}
| _1 = OPEN _2 = tpformula _3 = CLOSE
    {                                   ( _2 )}
| _1 = tpexpr
    {                                   ( _1 )}

tpvar_list:
  _1 = UIDENT _2 = COMMA _3 = tpvar_list
    {                                   ( evar _1 :: _3 )}
| _1 = UIDENT
    {                                   ( [evar _1] )}

coqfile:
  _1 = LOCAL _2 = IDENT _3 = COLON _4 = coqexpr _5 = COLONEQUAL _6 = TOBE _7 = coqexpr _8 = coq_hyp_def_list _9 = QED _10 = EOF
    {      ( (_2, Hyp ("_Zgoal", enot _4, 0) :: _8) )}
| _1 = BEGINPROOF _2 = coqexpr _3 = coq_hyp_def_list _4 = ENDPROOF _5 = EOF
    {      ( (_1, Hyp ("_Zgoal", enot _2, 0) :: _3) )}

coqexpr:
  _1 = OPEN _2 = coqexpr _3 = CLOSE
    {      ( _2 )}
| _1 = OPEN _2 = IDENT _3 = COLON _4 = IDENT _5 = CLOSE _6 = coqexpr %prec forall
    {      ( eall (evar _2, _4, _6) )}
| _1 = FORALL _2 = IDENT _3 = COLON _4 = IDENT _5 = COMMA _6 = coqexpr %prec forall
    {      ( eall (evar _2, _4, _6) )}
| _1 = coqapplication
    {      ( eapp _1 )}
| _1 = TILDE _2 = coqexpr
    {      ( enot (_2) )}
| _1 = OPEN _2 = AND _3 = coqexpr _4 = coqexpr _5 = CLOSE
    {      ( eand (_3, _4) )}
| _1 = OPEN _2 = OR _3 = coqexpr _4 = coqexpr _5 = CLOSE
    {      ( eor (_3, _4) )}
| _1 = IF _2 = coqexpr _3 = THEN _4 = coqexpr _5 = ELSE _6 = coqexpr
    {      ( eapp ("_if_then_else", [_2; _4; _6]) )}
| _1 = OPEN _2 = coqexpr _3 = EQUAL _4 = coqexpr _5 = CLOSE
    {      ( eapp ("=", [_2; _4]) )}
| _1 = IDENT
    {      ( evar (_1) )}
| _1 = coqexpr _2 = ARROW _3 = coqexpr
    {      ( eimply (_1, _3) )}
| _1 = coqexpr _2 = DOUBLEARROW _3 = coqexpr
    {      ( eequiv (_1, _3) )}
| _1 = coqexpr _2 = SLASHBACKSLASH _3 = coqexpr
    {      ( eand (_1, _3) )}
| _1 = coqexpr _2 = BACKSLASHSLASH _3 = coqexpr
    {      ( eor (_1, _3) )}
| _1 = LBRACKET _2 = IDENT _3 = COLONEQUAL _4 = coqexpr _5 = RBRACKET _6 = coqexpr %prec forall
    {      ( Expr.substitute [(evar _2, _4)] _6 )}
| _1 = LET _2 = IDENT _3 = COLONEQUAL _4 = coqexpr _5 = IN _6 = coqexpr %prec forall
    {      ( Expr.substitute [(evar _2, _4)] _6 )}

coqapplication:
  _1 = OPEN _2 = IDENT _3 = coqexpr_list1 _4 = CLOSE
    {      ( (_2, _3) )}
| _1 = OPEN _2 = coqapplication _3 = coqexpr_list1 _4 = CLOSE
    {      ( let (sym, args1) = _2 in (sym, args1 @ _3) )}

coqexpr_list1:
  _1 = coqexpr
    {                         ( [_1] )}
| _1 = coqexpr _2 = coqexpr_list1
    {                          ( _1 :: _2 )}

id_or_coqexpr:
  _1 = IDENT
    {           ( _1 )}
| _1 = STRING
    {           ( _1 )}

coqhyp:
  _1 = id_or_coqexpr _2 = COLON _3 = coqexpr
    {                                 ( Hyp (_1, _3, 1) )}

coqhyp_list:
  
    {                         ( [] )}
| _1 = coqhyp _2 = coqhyp_list
    {                         ( _1 :: _2 )}

coqdef:
  _1 = id_or_coqexpr _2 = COLONEQUAL _3 = coqparam_expr
    {      ( let (params, expr) = _3 in Def (DefReal (_1, params, expr)) )}

coqparam_expr:
  _1 = coqexpr
    {      ( ([], _1) )}
| _1 = LBRACKET _2 = IDENT _3 = COLON _4 = IDENT _5 = RBRACKET _6 = coqparam_expr
    {      ( let (params, expr) = _6 in ((evar _2) :: params, expr) )}
| _1 = FUN _2 = OPEN _3 = IDENT _4 = COLON _5 = IDENT _6 = CLOSE _7 = FUNARROW _8 = coqparam_expr
    {      ( let (params, expr) = _8 in ((evar _3) :: params, expr) )}

coqdef_list:
  
    {                          ( [] )}
| _1 = coqdef _2 = coqdef_list
    {                          ( _1 :: _2 )}

coq_hyp_def_list:
  _1 = BY _2 = coqhyp_list _3 = coq_hyp_def_list
    {      ( _2 @ _3 )}
| _1 = BYDEF _2 = coqdef_list _3 = coq_hyp_def_list
    {      ( _2 @ _3 )}
| 
    {      ( [] )}

%%


