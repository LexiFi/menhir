State 0:
## Known stack suffix:
##
## LR(1) items:
file' -> . file [ # ]
## Transitions:
-- On error shift to state 1
-- On QID shift to state 2
-- On LBRACK shift to state 114
-- On ID shift to state 125
-- On DEFKW shift to state 130
-- On BEGINPROOF shift to state 192
-- On goal shift to state 137
-- On file shift to state 224
-- On env shift to state 138
-- On body shift to state 225
## Reductions:

State 1:
## Known stack suffix:
## error
## LR(1) items:
file -> error . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production file -> error

State 2:
## Known stack suffix:
## QID
## LR(1) items:
body -> QID . COLON kind DOT body [ EOF ENDPROOF ]
body -> QID . COLON PROOF term DOT body [ EOF ENDPROOF ]
body -> QID . COLON arrow_type DOT body [ EOF ENDPROOF ]
## Transitions:
-- On COLON shift to state 3
## Reductions:

State 3:
## Known stack suffix:
## QID COLON
## LR(1) items:
body -> QID COLON . kind DOT body [ EOF ENDPROOF ]
body -> QID COLON . PROOF term DOT body [ EOF ENDPROOF ]
body -> QID COLON . arrow_type DOT body [ EOF ENDPROOF ]
## Transitions:
-- On TYPE shift to state 4
-- On TERM shift to state 5
-- On PROP shift to state 20
-- On PROOF shift to state 21
-- On LPAREN shift to state 44
-- On ID shift to state 174
-- On typ shift to state 49
-- On kind shift to state 186
-- On complex_type shift to state 50
-- On arrow_type shift to state 189
## Reductions:

State 4:
## Known stack suffix:
## TYPE
## LR(1) items:
kind -> TYPE . [ DOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production kind -> TYPE

State 5:
## Known stack suffix:
## TERM
## LR(1) items:
typ -> TERM . type_simple [ RPAREN RBRACK END_VAR DOUBLE_ARROW DOT DEF COMMA ARROW ]
## Transitions:
-- On QID shift to state 6
-- On LPAREN shift to state 7
-- On ID shift to state 8
-- On type_simple shift to state 19
-- On type_qid shift to state 12
## Reductions:

State 6:
## Known stack suffix:
## QID
## LR(1) items:
type_qid -> QID . [ TRUE RPAREN REW RBRACK QID OR NUMBER NOT LPAREN IMP ID FALSE EX_TYPE EX EQV EQUAL END_VAR END_TYPEALIAS END_HYP DOUBLE_ARROW DOT DEF COMMA CCARR ARROW AND ALL_TYPE ALL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_qid -> QID

State 7:
## Known stack suffix:
## LPAREN
## LR(1) items:
type_simple -> LPAREN . pre_typ RPAREN [ TRUE RPAREN REW RBRACK QID OR NUMBER NOT LPAREN IMP ID FALSE EX_TYPE EX EQV EQUAL END_VAR END_TYPEALIAS END_HYP DOUBLE_ARROW DOT DEF COMMA CCARR ARROW AND ALL_TYPE ALL ]
## Transitions:
-- On QID shift to state 6
-- On LPAREN shift to state 7
-- On ID shift to state 8
-- On CCARR shift to state 9
-- On type_simple shift to state 13
-- On type_qid shift to state 12
-- On pre_typ shift to state 17
## Reductions:

State 8:
## Known stack suffix:
## ID
## LR(1) items:
type_qid -> ID . [ TRUE RPAREN REW RBRACK QID OR NUMBER NOT LPAREN IMP ID FALSE EX_TYPE EX EQV EQUAL END_VAR END_TYPEALIAS END_HYP DOUBLE_ARROW DOT DEF COMMA CCARR ARROW AND ALL_TYPE ALL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_qid -> ID

State 9:
## Known stack suffix:
## CCARR
## LR(1) items:
pre_typ -> CCARR . type_simple type_simple [ RPAREN ]
## Transitions:
-- On QID shift to state 6
-- On LPAREN shift to state 7
-- On ID shift to state 8
-- On type_simple shift to state 10
-- On type_qid shift to state 12
## Reductions:

State 10:
## Known stack suffix:
## CCARR type_simple
## LR(1) items:
pre_typ -> CCARR type_simple . type_simple [ RPAREN ]
## Transitions:
-- On QID shift to state 6
-- On LPAREN shift to state 7
-- On ID shift to state 8
-- On type_simple shift to state 11
-- On type_qid shift to state 12
## Reductions:

State 11:
## Known stack suffix:
## CCARR type_simple type_simple
## LR(1) items:
pre_typ -> CCARR type_simple type_simple . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pre_typ -> CCARR type_simple type_simple

State 12:
## Known stack suffix:
## type_qid
## LR(1) items:
type_simple -> type_qid . [ TRUE RPAREN REW RBRACK QID OR NUMBER NOT LPAREN IMP ID FALSE EX_TYPE EX EQV EQUAL END_VAR END_TYPEALIAS END_HYP DOUBLE_ARROW DOT DEF COMMA CCARR ARROW AND ALL_TYPE ALL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_simple -> type_qid

State 13:
## Known stack suffix:
## type_simple
## LR(1) items:
pre_typ -> type_simple . list(type_simple) [ RPAREN ]
## Transitions:
-- On QID shift to state 6
-- On LPAREN shift to state 7
-- On ID shift to state 8
-- On type_simple shift to state 14
-- On type_qid shift to state 12
-- On list(type_simple) shift to state 16
## Reductions:
-- On RPAREN reduce production list(type_simple) ->

State 14:
## Known stack suffix:
## type_simple
## LR(1) items:
list(type_simple) -> type_simple . list(type_simple) [ RPAREN ]
## Transitions:
-- On QID shift to state 6
-- On LPAREN shift to state 7
-- On ID shift to state 8
-- On type_simple shift to state 14
-- On type_qid shift to state 12
-- On list(type_simple) shift to state 15
## Reductions:
-- On RPAREN reduce production list(type_simple) ->

State 15:
## Known stack suffix:
## type_simple list(type_simple)
## LR(1) items:
list(type_simple) -> type_simple list(type_simple) . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production list(type_simple) -> type_simple list(type_simple)

State 16:
## Known stack suffix:
## type_simple list(type_simple)
## LR(1) items:
pre_typ -> type_simple list(type_simple) . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pre_typ -> type_simple list(type_simple)

State 17:
## Known stack suffix:
## LPAREN pre_typ
## LR(1) items:
type_simple -> LPAREN pre_typ . RPAREN [ TRUE RPAREN REW RBRACK QID OR NUMBER NOT LPAREN IMP ID FALSE EX_TYPE EX EQV EQUAL END_VAR END_TYPEALIAS END_HYP DOUBLE_ARROW DOT DEF COMMA CCARR ARROW AND ALL_TYPE ALL ]
## Transitions:
-- On RPAREN shift to state 18
## Reductions:

State 18:
## Known stack suffix:
## LPAREN pre_typ RPAREN
## LR(1) items:
type_simple -> LPAREN pre_typ RPAREN . [ TRUE RPAREN REW RBRACK QID OR NUMBER NOT LPAREN IMP ID FALSE EX_TYPE EX EQV EQUAL END_VAR END_TYPEALIAS END_HYP DOUBLE_ARROW DOT DEF COMMA CCARR ARROW AND ALL_TYPE ALL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_simple -> LPAREN pre_typ RPAREN

State 19:
## Known stack suffix:
## TERM type_simple
## LR(1) items:
typ -> TERM type_simple . [ RPAREN RBRACK END_VAR DOUBLE_ARROW DOT DEF COMMA ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typ -> TERM type_simple

State 20:
## Known stack suffix:
## PROP
## LR(1) items:
typ -> PROP . [ RPAREN RBRACK END_VAR DOUBLE_ARROW DOT DEF COMMA ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typ -> PROP

State 21:
## Known stack suffix:
## QID COLON PROOF
## LR(1) items:
body -> QID COLON PROOF . term DOT body [ EOF ENDPROOF ]
## Transitions:
-- On error shift to state 22
-- On TRUE shift to state 23
-- On QID shift to state 24
-- On OR shift to state 25
-- On NUMBER shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On IMP shift to state 29
-- On ID shift to state 30
-- On FALSE shift to state 32
-- On EX_TYPE shift to state 33
-- On EX shift to state 39
-- On EQV shift to state 59
-- On EQUAL shift to state 60
-- On CCARR shift to state 62
-- On AND shift to state 65
-- On ALL_TYPE shift to state 66
-- On ALL shift to state 72
-- On term_simple shift to state 79
-- On term shift to state 112
-- On qid shift to state 81
## Reductions:

State 22:
## Known stack suffix:
## error
## LR(1) items:
term -> error . [ RPAREN REW DOUBLE_ARROW DOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production term -> error

State 23:
## Known stack suffix:
## TRUE
## LR(1) items:
term_simple -> TRUE . [ TRUE RPAREN REW QID OR NUMBER NOT LPAREN IMP ID FALSE EX_TYPE EX EQV EQUAL END_HYP DOUBLE_ARROW DOT CCARR AND ALL_TYPE ALL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production term_simple -> TRUE

State 24:
## Known stack suffix:
## QID
## LR(1) items:
qid -> QID . [ TRUE RPAREN REW QID OR NUMBER NOT LPAREN IMP ID FALSE EX_TYPE EX EQV EQUAL END_HYP DOUBLE_ARROW DOT CCARR AND ALL_TYPE ALL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production qid -> QID

State 25:
## Known stack suffix:
## OR
## LR(1) items:
term_simple -> OR . term_simple term_simple [ TRUE RPAREN REW QID OR NUMBER NOT LPAREN IMP ID FALSE EX_TYPE EX EQV EQUAL END_HYP DOUBLE_ARROW DOT CCARR AND ALL_TYPE ALL ]
## Transitions:
-- On TRUE shift to state 23
-- On QID shift to state 24
-- On OR shift to state 25
-- On NUMBER shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On IMP shift to state 29
-- On ID shift to state 30
-- On FALSE shift to state 32
-- On EX_TYPE shift to state 33
-- On EX shift to state 39
-- On EQV shift to state 59
-- On EQUAL shift to state 60
-- On CCARR shift to state 62
-- On AND shift to state 65
-- On ALL_TYPE shift to state 66
-- On ALL shift to state 72
-- On term_simple shift to state 110
-- On qid shift to state 81
## Reductions:

State 26:
## Known stack suffix:
## NUMBER
## LR(1) items:
term_simple -> NUMBER . [ TRUE RPAREN REW QID OR NUMBER NOT LPAREN IMP ID FALSE EX_TYPE EX EQV EQUAL END_HYP DOUBLE_ARROW DOT CCARR AND ALL_TYPE ALL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production term_simple -> NUMBER

State 27:
## Known stack suffix:
## NOT
## LR(1) items:
term_simple -> NOT . term_simple [ TRUE RPAREN REW QID OR NUMBER NOT LPAREN IMP ID FALSE EX_TYPE EX EQV EQUAL END_HYP DOUBLE_ARROW DOT CCARR AND ALL_TYPE ALL ]
## Transitions:
-- On TRUE shift to state 23
-- On QID shift to state 24
-- On OR shift to state 25
-- On NUMBER shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On IMP shift to state 29
-- On ID shift to state 30
-- On FALSE shift to state 32
-- On EX_TYPE shift to state 33
-- On EX shift to state 39
-- On EQV shift to state 59
-- On EQUAL shift to state 60
-- On CCARR shift to state 62
-- On AND shift to state 65
-- On ALL_TYPE shift to state 66
-- On ALL shift to state 72
-- On term_simple shift to state 109
-- On qid shift to state 81
## Reductions:

State 28:
## Known stack suffix:
## LPAREN
## LR(1) items:
term_simple -> LPAREN . term RPAREN [ TRUE RPAREN REW QID OR NUMBER NOT LPAREN IMP ID FALSE EX_TYPE EX EQV EQUAL END_HYP DOUBLE_ARROW DOT CCARR AND ALL_TYPE ALL ]
## Transitions:
-- On error shift to state 22
-- On TRUE shift to state 23
-- On QID shift to state 24
-- On OR shift to state 25
-- On NUMBER shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On IMP shift to state 29
-- On ID shift to state 30
-- On FALSE shift to state 32
-- On EX_TYPE shift to state 33
-- On EX shift to state 39
-- On EQV shift to state 59
-- On EQUAL shift to state 60
-- On CCARR shift to state 62
-- On AND shift to state 65
-- On ALL_TYPE shift to state 66
-- On ALL shift to state 72
-- On term_simple shift to state 79
-- On term shift to state 107
-- On qid shift to state 81
## Reductions:

State 29:
## Known stack suffix:
## IMP
## LR(1) items:
term_simple -> IMP . term_simple term_simple [ TRUE RPAREN REW QID OR NUMBER NOT LPAREN IMP ID FALSE EX_TYPE EX EQV EQUAL END_HYP DOUBLE_ARROW DOT CCARR AND ALL_TYPE ALL ]
## Transitions:
-- On TRUE shift to state 23
-- On QID shift to state 24
-- On OR shift to state 25
-- On NUMBER shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On IMP shift to state 29
-- On ID shift to state 30
-- On FALSE shift to state 32
-- On EX_TYPE shift to state 33
-- On EX shift to state 39
-- On EQV shift to state 59
-- On EQUAL shift to state 60
-- On CCARR shift to state 62
-- On AND shift to state 65
-- On ALL_TYPE shift to state 66
-- On ALL shift to state 72
-- On term_simple shift to state 105
-- On qid shift to state 81
## Reductions:

State 30:
## Known stack suffix:
## ID
## LR(1) items:
qid -> ID . [ TRUE RPAREN REW QID OR NUMBER NOT LPAREN IMP ID FALSE EX_TYPE EX EQV EQUAL END_HYP DOUBLE_ARROW DOT CCARR AND ALL_TYPE ALL ]
term_simple -> ID . COLON typ DOUBLE_ARROW term_simple [ TRUE RPAREN REW QID OR NUMBER NOT LPAREN IMP ID FALSE EX_TYPE EX EQV EQUAL END_HYP DOUBLE_ARROW DOT CCARR AND ALL_TYPE ALL ]
term_simple -> ID . DEF term DOUBLE_ARROW term_simple [ TRUE RPAREN REW QID OR NUMBER NOT LPAREN IMP ID FALSE EX_TYPE EX EQV EQUAL END_HYP DOUBLE_ARROW DOT CCARR AND ALL_TYPE ALL ]
## Transitions:
-- On DEF shift to state 31
-- On COLON shift to state 101
## Reductions:
-- On TRUE reduce production qid -> ID
-- On RPAREN reduce production qid -> ID
-- On REW reduce production qid -> ID
-- On QID reduce production qid -> ID
-- On OR reduce production qid -> ID
-- On NUMBER reduce production qid -> ID
-- On NOT reduce production qid -> ID
-- On LPAREN reduce production qid -> ID
-- On IMP reduce production qid -> ID
-- On ID reduce production qid -> ID
-- On FALSE reduce production qid -> ID
-- On EX_TYPE reduce production qid -> ID
-- On EX reduce production qid -> ID
-- On EQV reduce production qid -> ID
-- On EQUAL reduce production qid -> ID
-- On END_HYP reduce production qid -> ID
-- On DOUBLE_ARROW reduce production qid -> ID
-- On DOT reduce production qid -> ID
-- On CCARR reduce production qid -> ID
-- On AND reduce production qid -> ID
-- On ALL_TYPE reduce production qid -> ID
-- On ALL reduce production qid -> ID

State 31:
## Known stack suffix:
## ID DEF
## LR(1) items:
term_simple -> ID DEF . term DOUBLE_ARROW term_simple [ TRUE RPAREN REW QID OR NUMBER NOT LPAREN IMP ID FALSE EX_TYPE EX EQV EQUAL END_HYP DOUBLE_ARROW DOT CCARR AND ALL_TYPE ALL ]
## Transitions:
-- On error shift to state 22
-- On TRUE shift to state 23
-- On QID shift to state 24
-- On OR shift to state 25
-- On NUMBER shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On IMP shift to state 29
-- On ID shift to state 30
-- On FALSE shift to state 32
-- On EX_TYPE shift to state 33
-- On EX shift to state 39
-- On EQV shift to state 59
-- On EQUAL shift to state 60
-- On CCARR shift to state 62
-- On AND shift to state 65
-- On ALL_TYPE shift to state 66
-- On ALL shift to state 72
-- On term_simple shift to state 79
-- On term shift to state 98
-- On qid shift to state 81
## Reductions:

State 32:
## Known stack suffix:
## FALSE
## LR(1) items:
term_simple -> FALSE . [ TRUE RPAREN REW QID OR NUMBER NOT LPAREN IMP ID FALSE EX_TYPE EX EQV EQUAL END_HYP DOUBLE_ARROW DOT CCARR AND ALL_TYPE ALL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production term_simple -> FALSE

State 33:
## Known stack suffix:
## EX_TYPE
## LR(1) items:
term_simple -> EX_TYPE . LPAREN ID COLON TYPE DOUBLE_ARROW term RPAREN [ TRUE RPAREN REW QID OR NUMBER NOT LPAREN IMP ID FALSE EX_TYPE EX EQV EQUAL END_HYP DOUBLE_ARROW DOT CCARR AND ALL_TYPE ALL ]
## Transitions:
-- On LPAREN shift to state 34
## Reductions:

State 34:
## Known stack suffix:
## EX_TYPE LPAREN
## LR(1) items:
term_simple -> EX_TYPE LPAREN . ID COLON TYPE DOUBLE_ARROW term RPAREN [ TRUE RPAREN REW QID OR NUMBER NOT LPAREN IMP ID FALSE EX_TYPE EX EQV EQUAL END_HYP DOUBLE_ARROW DOT CCARR AND ALL_TYPE ALL ]
## Transitions:
-- On ID shift to state 35
## Reductions:

State 35:
## Known stack suffix:
## EX_TYPE LPAREN ID
## LR(1) items:
term_simple -> EX_TYPE LPAREN ID . COLON TYPE DOUBLE_ARROW term RPAREN [ TRUE RPAREN REW QID OR NUMBER NOT LPAREN IMP ID FALSE EX_TYPE EX EQV EQUAL END_HYP DOUBLE_ARROW DOT CCARR AND ALL_TYPE ALL ]
## Transitions:
-- On COLON shift to state 36
## Reductions:

State 36:
## Known stack suffix:
## EX_TYPE LPAREN ID COLON
## LR(1) items:
term_simple -> EX_TYPE LPAREN ID COLON . TYPE DOUBLE_ARROW term RPAREN [ TRUE RPAREN REW QID OR NUMBER NOT LPAREN IMP ID FALSE EX_TYPE EX EQV EQUAL END_HYP DOUBLE_ARROW DOT CCARR AND ALL_TYPE ALL ]
## Transitions:
-- On TYPE shift to state 37
## Reductions:

State 37:
## Known stack suffix:
## EX_TYPE LPAREN ID COLON TYPE
## LR(1) items:
term_simple -> EX_TYPE LPAREN ID COLON TYPE . DOUBLE_ARROW term RPAREN [ TRUE RPAREN REW QID OR NUMBER NOT LPAREN IMP ID FALSE EX_TYPE EX EQV EQUAL END_HYP DOUBLE_ARROW DOT CCARR AND ALL_TYPE ALL ]
## Transitions:
-- On DOUBLE_ARROW shift to state 38
## Reductions:

State 38:
## Known stack suffix:
## EX_TYPE LPAREN ID COLON TYPE DOUBLE_ARROW
## LR(1) items:
term_simple -> EX_TYPE LPAREN ID COLON TYPE DOUBLE_ARROW . term RPAREN [ TRUE RPAREN REW QID OR NUMBER NOT LPAREN IMP ID FALSE EX_TYPE EX EQV EQUAL END_HYP DOUBLE_ARROW DOT CCARR AND ALL_TYPE ALL ]
## Transitions:
-- On error shift to state 22
-- On TRUE shift to state 23
-- On QID shift to state 24
-- On OR shift to state 25
-- On NUMBER shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On IMP shift to state 29
-- On ID shift to state 30
-- On FALSE shift to state 32
-- On EX_TYPE shift to state 33
-- On EX shift to state 39
-- On EQV shift to state 59
-- On EQUAL shift to state 60
-- On CCARR shift to state 62
-- On AND shift to state 65
-- On ALL_TYPE shift to state 66
-- On ALL shift to state 72
-- On term_simple shift to state 79
-- On term shift to state 96
-- On qid shift to state 81
## Reductions:

State 39:
## Known stack suffix:
## EX
## LR(1) items:
term_simple -> EX . type_simple LPAREN ID COLON complex_type DOUBLE_ARROW term RPAREN [ TRUE RPAREN REW QID OR NUMBER NOT LPAREN IMP ID FALSE EX_TYPE EX EQV EQUAL END_HYP DOUBLE_ARROW DOT CCARR AND ALL_TYPE ALL ]
## Transitions:
-- On QID shift to state 6
-- On LPAREN shift to state 7
-- On ID shift to state 8
-- On type_simple shift to state 40
-- On type_qid shift to state 12
## Reductions:

State 40:
## Known stack suffix:
## EX type_simple
## LR(1) items:
term_simple -> EX type_simple . LPAREN ID COLON complex_type DOUBLE_ARROW term RPAREN [ TRUE RPAREN REW QID OR NUMBER NOT LPAREN IMP ID FALSE EX_TYPE EX EQV EQUAL END_HYP DOUBLE_ARROW DOT CCARR AND ALL_TYPE ALL ]
## Transitions:
-- On LPAREN shift to state 41
## Reductions:

State 41:
## Known stack suffix:
## EX type_simple LPAREN
## LR(1) items:
term_simple -> EX type_simple LPAREN . ID COLON complex_type DOUBLE_ARROW term RPAREN [ TRUE RPAREN REW QID OR NUMBER NOT LPAREN IMP ID FALSE EX_TYPE EX EQV EQUAL END_HYP DOUBLE_ARROW DOT CCARR AND ALL_TYPE ALL ]
## Transitions:
-- On ID shift to state 42
## Reductions:

State 42:
## Known stack suffix:
## EX type_simple LPAREN ID
## LR(1) items:
term_simple -> EX type_simple LPAREN ID . COLON complex_type DOUBLE_ARROW term RPAREN [ TRUE RPAREN REW QID OR NUMBER NOT LPAREN IMP ID FALSE EX_TYPE EX EQV EQUAL END_HYP DOUBLE_ARROW DOT CCARR AND ALL_TYPE ALL ]
## Transitions:
-- On COLON shift to state 43
## Reductions:

State 43:
## Known stack suffix:
## EX type_simple LPAREN ID COLON
## LR(1) items:
term_simple -> EX type_simple LPAREN ID COLON . complex_type DOUBLE_ARROW term RPAREN [ TRUE RPAREN REW QID OR NUMBER NOT LPAREN IMP ID FALSE EX_TYPE EX EQV EQUAL END_HYP DOUBLE_ARROW DOT CCARR AND ALL_TYPE ALL ]
## Transitions:
-- On TERM shift to state 5
-- On PROP shift to state 20
-- On LPAREN shift to state 44
-- On typ shift to state 56
-- On complex_type shift to state 57
## Reductions:

State 44:
## Known stack suffix:
## LPAREN
## LR(1) items:
complex_type -> LPAREN . arrow_type RPAREN [ DOUBLE_ARROW ARROW ]
## Transitions:
-- On TERM shift to state 5
-- On PROP shift to state 20
-- On LPAREN shift to state 44
-- On ID shift to state 45
-- On typ shift to state 49
-- On complex_type shift to state 50
-- On arrow_type shift to state 54
## Reductions:

State 45:
## Known stack suffix:
## ID
## LR(1) items:
arrow_type -> ID . COLON TYPE ARROW arrow_type [ RPAREN RBRACK DOT COMMA ]
## Transitions:
-- On COLON shift to state 46
## Reductions:

State 46:
## Known stack suffix:
## ID COLON
## LR(1) items:
arrow_type -> ID COLON . TYPE ARROW arrow_type [ RPAREN RBRACK DOT COMMA ]
## Transitions:
-- On TYPE shift to state 47
## Reductions:

State 47:
## Known stack suffix:
## ID COLON TYPE
## LR(1) items:
arrow_type -> ID COLON TYPE . ARROW arrow_type [ RPAREN RBRACK DOT COMMA ]
## Transitions:
-- On ARROW shift to state 48
## Reductions:

State 48:
## Known stack suffix:
## ID COLON TYPE ARROW
## LR(1) items:
arrow_type -> ID COLON TYPE ARROW . arrow_type [ RPAREN RBRACK DOT COMMA ]
## Transitions:
-- On TERM shift to state 5
-- On PROP shift to state 20
-- On LPAREN shift to state 44
-- On ID shift to state 45
-- On typ shift to state 49
-- On complex_type shift to state 50
-- On arrow_type shift to state 53
## Reductions:

State 49:
## Known stack suffix:
## typ
## LR(1) items:
arrow_type -> typ . [ RPAREN RBRACK DOT COMMA ]
complex_type -> typ . [ ARROW ]
## Transitions:
## Reductions:
-- On RPAREN reduce production arrow_type -> typ
-- On RBRACK reduce production arrow_type -> typ
-- On DOT reduce production arrow_type -> typ
-- On COMMA reduce production arrow_type -> typ
-- On ARROW reduce production complex_type -> typ

State 50:
## Known stack suffix:
## complex_type
## LR(1) items:
arrow_type -> complex_type . ARROW arrow_type [ RPAREN RBRACK DOT COMMA ]
## Transitions:
-- On ARROW shift to state 51
## Reductions:

State 51:
## Known stack suffix:
## complex_type ARROW
## LR(1) items:
arrow_type -> complex_type ARROW . arrow_type [ RPAREN RBRACK DOT COMMA ]
## Transitions:
-- On TERM shift to state 5
-- On PROP shift to state 20
-- On LPAREN shift to state 44
-- On ID shift to state 45
-- On typ shift to state 49
-- On complex_type shift to state 50
-- On arrow_type shift to state 52
## Reductions:

State 52:
## Known stack suffix:
## complex_type ARROW arrow_type
## LR(1) items:
arrow_type -> complex_type ARROW arrow_type . [ RPAREN RBRACK DOT COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production arrow_type -> complex_type ARROW arrow_type

State 53:
## Known stack suffix:
## ID COLON TYPE ARROW arrow_type
## LR(1) items:
arrow_type -> ID COLON TYPE ARROW arrow_type . [ RPAREN RBRACK DOT COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production arrow_type -> ID COLON TYPE ARROW arrow_type

State 54:
## Known stack suffix:
## LPAREN arrow_type
## LR(1) items:
complex_type -> LPAREN arrow_type . RPAREN [ DOUBLE_ARROW ARROW ]
## Transitions:
-- On RPAREN shift to state 55
## Reductions:

State 55:
## Known stack suffix:
## LPAREN arrow_type RPAREN
## LR(1) items:
complex_type -> LPAREN arrow_type RPAREN . [ DOUBLE_ARROW ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production complex_type -> LPAREN arrow_type RPAREN

State 56:
## Known stack suffix:
## typ
## LR(1) items:
complex_type -> typ . [ DOUBLE_ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production complex_type -> typ

State 57:
## Known stack suffix:
## EX type_simple LPAREN ID COLON complex_type
## LR(1) items:
term_simple -> EX type_simple LPAREN ID COLON complex_type . DOUBLE_ARROW term RPAREN [ TRUE RPAREN REW QID OR NUMBER NOT LPAREN IMP ID FALSE EX_TYPE EX EQV EQUAL END_HYP DOUBLE_ARROW DOT CCARR AND ALL_TYPE ALL ]
## Transitions:
-- On DOUBLE_ARROW shift to state 58
## Reductions:

State 58:
## Known stack suffix:
## EX type_simple LPAREN ID COLON complex_type DOUBLE_ARROW
## LR(1) items:
term_simple -> EX type_simple LPAREN ID COLON complex_type DOUBLE_ARROW . term RPAREN [ TRUE RPAREN REW QID OR NUMBER NOT LPAREN IMP ID FALSE EX_TYPE EX EQV EQUAL END_HYP DOUBLE_ARROW DOT CCARR AND ALL_TYPE ALL ]
## Transitions:
-- On error shift to state 22
-- On TRUE shift to state 23
-- On QID shift to state 24
-- On OR shift to state 25
-- On NUMBER shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On IMP shift to state 29
-- On ID shift to state 30
-- On FALSE shift to state 32
-- On EX_TYPE shift to state 33
-- On EX shift to state 39
-- On EQV shift to state 59
-- On EQUAL shift to state 60
-- On CCARR shift to state 62
-- On AND shift to state 65
-- On ALL_TYPE shift to state 66
-- On ALL shift to state 72
-- On term_simple shift to state 79
-- On term shift to state 94
-- On qid shift to state 81
## Reductions:

State 59:
## Known stack suffix:
## EQV
## LR(1) items:
term_simple -> EQV . term_simple term_simple [ TRUE RPAREN REW QID OR NUMBER NOT LPAREN IMP ID FALSE EX_TYPE EX EQV EQUAL END_HYP DOUBLE_ARROW DOT CCARR AND ALL_TYPE ALL ]
## Transitions:
-- On TRUE shift to state 23
-- On QID shift to state 24
-- On OR shift to state 25
-- On NUMBER shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On IMP shift to state 29
-- On ID shift to state 30
-- On FALSE shift to state 32
-- On EX_TYPE shift to state 33
-- On EX shift to state 39
-- On EQV shift to state 59
-- On EQUAL shift to state 60
-- On CCARR shift to state 62
-- On AND shift to state 65
-- On ALL_TYPE shift to state 66
-- On ALL shift to state 72
-- On term_simple shift to state 92
-- On qid shift to state 81
## Reductions:

State 60:
## Known stack suffix:
## EQUAL
## LR(1) items:
term_simple -> EQUAL . type_simple term_simple term_simple [ TRUE RPAREN REW QID OR NUMBER NOT LPAREN IMP ID FALSE EX_TYPE EX EQV EQUAL END_HYP DOUBLE_ARROW DOT CCARR AND ALL_TYPE ALL ]
## Transitions:
-- On QID shift to state 6
-- On LPAREN shift to state 7
-- On ID shift to state 8
-- On type_simple shift to state 61
-- On type_qid shift to state 12
## Reductions:

State 61:
## Known stack suffix:
## EQUAL type_simple
## LR(1) items:
term_simple -> EQUAL type_simple . term_simple term_simple [ TRUE RPAREN REW QID OR NUMBER NOT LPAREN IMP ID FALSE EX_TYPE EX EQV EQUAL END_HYP DOUBLE_ARROW DOT CCARR AND ALL_TYPE ALL ]
## Transitions:
-- On TRUE shift to state 23
-- On QID shift to state 24
-- On OR shift to state 25
-- On NUMBER shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On IMP shift to state 29
-- On ID shift to state 30
-- On FALSE shift to state 32
-- On EX_TYPE shift to state 33
-- On EX shift to state 39
-- On EQV shift to state 59
-- On EQUAL shift to state 60
-- On CCARR shift to state 62
-- On AND shift to state 65
-- On ALL_TYPE shift to state 66
-- On ALL shift to state 72
-- On term_simple shift to state 90
-- On qid shift to state 81
## Reductions:

State 62:
## Known stack suffix:
## CCARR
## LR(1) items:
term_simple -> CCARR . type_simple type_simple [ TRUE RPAREN REW QID OR NUMBER NOT LPAREN IMP ID FALSE EX_TYPE EX EQV EQUAL END_HYP DOUBLE_ARROW DOT CCARR AND ALL_TYPE ALL ]
## Transitions:
-- On QID shift to state 6
-- On LPAREN shift to state 7
-- On ID shift to state 8
-- On type_simple shift to state 63
-- On type_qid shift to state 12
## Reductions:

State 63:
## Known stack suffix:
## CCARR type_simple
## LR(1) items:
term_simple -> CCARR type_simple . type_simple [ TRUE RPAREN REW QID OR NUMBER NOT LPAREN IMP ID FALSE EX_TYPE EX EQV EQUAL END_HYP DOUBLE_ARROW DOT CCARR AND ALL_TYPE ALL ]
## Transitions:
-- On QID shift to state 6
-- On LPAREN shift to state 7
-- On ID shift to state 8
-- On type_simple shift to state 64
-- On type_qid shift to state 12
## Reductions:

State 64:
## Known stack suffix:
## CCARR type_simple type_simple
## LR(1) items:
term_simple -> CCARR type_simple type_simple . [ TRUE RPAREN REW QID OR NUMBER NOT LPAREN IMP ID FALSE EX_TYPE EX EQV EQUAL END_HYP DOUBLE_ARROW DOT CCARR AND ALL_TYPE ALL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production term_simple -> CCARR type_simple type_simple

State 65:
## Known stack suffix:
## AND
## LR(1) items:
term_simple -> AND . term_simple term_simple [ TRUE RPAREN REW QID OR NUMBER NOT LPAREN IMP ID FALSE EX_TYPE EX EQV EQUAL END_HYP DOUBLE_ARROW DOT CCARR AND ALL_TYPE ALL ]
## Transitions:
-- On TRUE shift to state 23
-- On QID shift to state 24
-- On OR shift to state 25
-- On NUMBER shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On IMP shift to state 29
-- On ID shift to state 30
-- On FALSE shift to state 32
-- On EX_TYPE shift to state 33
-- On EX shift to state 39
-- On EQV shift to state 59
-- On EQUAL shift to state 60
-- On CCARR shift to state 62
-- On AND shift to state 65
-- On ALL_TYPE shift to state 66
-- On ALL shift to state 72
-- On term_simple shift to state 88
-- On qid shift to state 81
## Reductions:

State 66:
## Known stack suffix:
## ALL_TYPE
## LR(1) items:
term_simple -> ALL_TYPE . LPAREN ID COLON TYPE DOUBLE_ARROW term RPAREN [ TRUE RPAREN REW QID OR NUMBER NOT LPAREN IMP ID FALSE EX_TYPE EX EQV EQUAL END_HYP DOUBLE_ARROW DOT CCARR AND ALL_TYPE ALL ]
## Transitions:
-- On LPAREN shift to state 67
## Reductions:

State 67:
## Known stack suffix:
## ALL_TYPE LPAREN
## LR(1) items:
term_simple -> ALL_TYPE LPAREN . ID COLON TYPE DOUBLE_ARROW term RPAREN [ TRUE RPAREN REW QID OR NUMBER NOT LPAREN IMP ID FALSE EX_TYPE EX EQV EQUAL END_HYP DOUBLE_ARROW DOT CCARR AND ALL_TYPE ALL ]
## Transitions:
-- On ID shift to state 68
## Reductions:

State 68:
## Known stack suffix:
## ALL_TYPE LPAREN ID
## LR(1) items:
term_simple -> ALL_TYPE LPAREN ID . COLON TYPE DOUBLE_ARROW term RPAREN [ TRUE RPAREN REW QID OR NUMBER NOT LPAREN IMP ID FALSE EX_TYPE EX EQV EQUAL END_HYP DOUBLE_ARROW DOT CCARR AND ALL_TYPE ALL ]
## Transitions:
-- On COLON shift to state 69
## Reductions:

State 69:
## Known stack suffix:
## ALL_TYPE LPAREN ID COLON
## LR(1) items:
term_simple -> ALL_TYPE LPAREN ID COLON . TYPE DOUBLE_ARROW term RPAREN [ TRUE RPAREN REW QID OR NUMBER NOT LPAREN IMP ID FALSE EX_TYPE EX EQV EQUAL END_HYP DOUBLE_ARROW DOT CCARR AND ALL_TYPE ALL ]
## Transitions:
-- On TYPE shift to state 70
## Reductions:

State 70:
## Known stack suffix:
## ALL_TYPE LPAREN ID COLON TYPE
## LR(1) items:
term_simple -> ALL_TYPE LPAREN ID COLON TYPE . DOUBLE_ARROW term RPAREN [ TRUE RPAREN REW QID OR NUMBER NOT LPAREN IMP ID FALSE EX_TYPE EX EQV EQUAL END_HYP DOUBLE_ARROW DOT CCARR AND ALL_TYPE ALL ]
## Transitions:
-- On DOUBLE_ARROW shift to state 71
## Reductions:

State 71:
## Known stack suffix:
## ALL_TYPE LPAREN ID COLON TYPE DOUBLE_ARROW
## LR(1) items:
term_simple -> ALL_TYPE LPAREN ID COLON TYPE DOUBLE_ARROW . term RPAREN [ TRUE RPAREN REW QID OR NUMBER NOT LPAREN IMP ID FALSE EX_TYPE EX EQV EQUAL END_HYP DOUBLE_ARROW DOT CCARR AND ALL_TYPE ALL ]
## Transitions:
-- On error shift to state 22
-- On TRUE shift to state 23
-- On QID shift to state 24
-- On OR shift to state 25
-- On NUMBER shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On IMP shift to state 29
-- On ID shift to state 30
-- On FALSE shift to state 32
-- On EX_TYPE shift to state 33
-- On EX shift to state 39
-- On EQV shift to state 59
-- On EQUAL shift to state 60
-- On CCARR shift to state 62
-- On AND shift to state 65
-- On ALL_TYPE shift to state 66
-- On ALL shift to state 72
-- On term_simple shift to state 79
-- On term shift to state 86
-- On qid shift to state 81
## Reductions:

State 72:
## Known stack suffix:
## ALL
## LR(1) items:
term_simple -> ALL . type_simple LPAREN ID COLON complex_type DOUBLE_ARROW term RPAREN [ TRUE RPAREN REW QID OR NUMBER NOT LPAREN IMP ID FALSE EX_TYPE EX EQV EQUAL END_HYP DOUBLE_ARROW DOT CCARR AND ALL_TYPE ALL ]
## Transitions:
-- On QID shift to state 6
-- On LPAREN shift to state 7
-- On ID shift to state 8
-- On type_simple shift to state 73
-- On type_qid shift to state 12
## Reductions:

State 73:
## Known stack suffix:
## ALL type_simple
## LR(1) items:
term_simple -> ALL type_simple . LPAREN ID COLON complex_type DOUBLE_ARROW term RPAREN [ TRUE RPAREN REW QID OR NUMBER NOT LPAREN IMP ID FALSE EX_TYPE EX EQV EQUAL END_HYP DOUBLE_ARROW DOT CCARR AND ALL_TYPE ALL ]
## Transitions:
-- On LPAREN shift to state 74
## Reductions:

State 74:
## Known stack suffix:
## ALL type_simple LPAREN
## LR(1) items:
term_simple -> ALL type_simple LPAREN . ID COLON complex_type DOUBLE_ARROW term RPAREN [ TRUE RPAREN REW QID OR NUMBER NOT LPAREN IMP ID FALSE EX_TYPE EX EQV EQUAL END_HYP DOUBLE_ARROW DOT CCARR AND ALL_TYPE ALL ]
## Transitions:
-- On ID shift to state 75
## Reductions:

State 75:
## Known stack suffix:
## ALL type_simple LPAREN ID
## LR(1) items:
term_simple -> ALL type_simple LPAREN ID . COLON complex_type DOUBLE_ARROW term RPAREN [ TRUE RPAREN REW QID OR NUMBER NOT LPAREN IMP ID FALSE EX_TYPE EX EQV EQUAL END_HYP DOUBLE_ARROW DOT CCARR AND ALL_TYPE ALL ]
## Transitions:
-- On COLON shift to state 76
## Reductions:

State 76:
## Known stack suffix:
## ALL type_simple LPAREN ID COLON
## LR(1) items:
term_simple -> ALL type_simple LPAREN ID COLON . complex_type DOUBLE_ARROW term RPAREN [ TRUE RPAREN REW QID OR NUMBER NOT LPAREN IMP ID FALSE EX_TYPE EX EQV EQUAL END_HYP DOUBLE_ARROW DOT CCARR AND ALL_TYPE ALL ]
## Transitions:
-- On TERM shift to state 5
-- On PROP shift to state 20
-- On LPAREN shift to state 44
-- On typ shift to state 56
-- On complex_type shift to state 77
## Reductions:

State 77:
## Known stack suffix:
## ALL type_simple LPAREN ID COLON complex_type
## LR(1) items:
term_simple -> ALL type_simple LPAREN ID COLON complex_type . DOUBLE_ARROW term RPAREN [ TRUE RPAREN REW QID OR NUMBER NOT LPAREN IMP ID FALSE EX_TYPE EX EQV EQUAL END_HYP DOUBLE_ARROW DOT CCARR AND ALL_TYPE ALL ]
## Transitions:
-- On DOUBLE_ARROW shift to state 78
## Reductions:

State 78:
## Known stack suffix:
## ALL type_simple LPAREN ID COLON complex_type DOUBLE_ARROW
## LR(1) items:
term_simple -> ALL type_simple LPAREN ID COLON complex_type DOUBLE_ARROW . term RPAREN [ TRUE RPAREN REW QID OR NUMBER NOT LPAREN IMP ID FALSE EX_TYPE EX EQV EQUAL END_HYP DOUBLE_ARROW DOT CCARR AND ALL_TYPE ALL ]
## Transitions:
-- On error shift to state 22
-- On TRUE shift to state 23
-- On QID shift to state 24
-- On OR shift to state 25
-- On NUMBER shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On IMP shift to state 29
-- On ID shift to state 30
-- On FALSE shift to state 32
-- On EX_TYPE shift to state 33
-- On EX shift to state 39
-- On EQV shift to state 59
-- On EQUAL shift to state 60
-- On CCARR shift to state 62
-- On AND shift to state 65
-- On ALL_TYPE shift to state 66
-- On ALL shift to state 72
-- On term_simple shift to state 79
-- On term shift to state 84
-- On qid shift to state 81
## Reductions:

State 79:
## Known stack suffix:
## term_simple
## LR(1) items:
term -> term_simple . [ RPAREN REW DOUBLE_ARROW DOT ]
term -> term_simple . nonempty_list(term_simple) [ RPAREN REW DOUBLE_ARROW DOT ]
## Transitions:
-- On TRUE shift to state 23
-- On QID shift to state 24
-- On OR shift to state 25
-- On NUMBER shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On IMP shift to state 29
-- On ID shift to state 30
-- On FALSE shift to state 32
-- On EX_TYPE shift to state 33
-- On EX shift to state 39
-- On EQV shift to state 59
-- On EQUAL shift to state 60
-- On CCARR shift to state 62
-- On AND shift to state 65
-- On ALL_TYPE shift to state 66
-- On ALL shift to state 72
-- On term_simple shift to state 80
-- On qid shift to state 81
-- On nonempty_list(term_simple) shift to state 83
## Reductions:
-- On RPAREN reduce production term -> term_simple
-- On REW reduce production term -> term_simple
-- On DOUBLE_ARROW reduce production term -> term_simple
-- On DOT reduce production term -> term_simple

State 80:
## Known stack suffix:
## term_simple
## LR(1) items:
nonempty_list(term_simple) -> term_simple . [ RPAREN REW DOUBLE_ARROW DOT ]
nonempty_list(term_simple) -> term_simple . nonempty_list(term_simple) [ RPAREN REW DOUBLE_ARROW DOT ]
## Transitions:
-- On TRUE shift to state 23
-- On QID shift to state 24
-- On OR shift to state 25
-- On NUMBER shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On IMP shift to state 29
-- On ID shift to state 30
-- On FALSE shift to state 32
-- On EX_TYPE shift to state 33
-- On EX shift to state 39
-- On EQV shift to state 59
-- On EQUAL shift to state 60
-- On CCARR shift to state 62
-- On AND shift to state 65
-- On ALL_TYPE shift to state 66
-- On ALL shift to state 72
-- On term_simple shift to state 80
-- On qid shift to state 81
-- On nonempty_list(term_simple) shift to state 82
## Reductions:
-- On RPAREN reduce production nonempty_list(term_simple) -> term_simple
-- On REW reduce production nonempty_list(term_simple) -> term_simple
-- On DOUBLE_ARROW reduce production nonempty_list(term_simple) -> term_simple
-- On DOT reduce production nonempty_list(term_simple) -> term_simple

State 81:
## Known stack suffix:
## qid
## LR(1) items:
term_simple -> qid . [ TRUE RPAREN REW QID OR NUMBER NOT LPAREN IMP ID FALSE EX_TYPE EX EQV EQUAL END_HYP DOUBLE_ARROW DOT CCARR AND ALL_TYPE ALL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production term_simple -> qid

State 82:
## Known stack suffix:
## term_simple nonempty_list(term_simple)
## LR(1) items:
nonempty_list(term_simple) -> term_simple nonempty_list(term_simple) . [ RPAREN REW DOUBLE_ARROW DOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonempty_list(term_simple) -> term_simple nonempty_list(term_simple)

State 83:
## Known stack suffix:
## term_simple nonempty_list(term_simple)
## LR(1) items:
term -> term_simple nonempty_list(term_simple) . [ RPAREN REW DOUBLE_ARROW DOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production term -> term_simple nonempty_list(term_simple)

State 84:
## Known stack suffix:
## ALL type_simple LPAREN ID COLON complex_type DOUBLE_ARROW term
## LR(1) items:
term_simple -> ALL type_simple LPAREN ID COLON complex_type DOUBLE_ARROW term . RPAREN [ TRUE RPAREN REW QID OR NUMBER NOT LPAREN IMP ID FALSE EX_TYPE EX EQV EQUAL END_HYP DOUBLE_ARROW DOT CCARR AND ALL_TYPE ALL ]
## Transitions:
-- On RPAREN shift to state 85
## Reductions:

State 85:
## Known stack suffix:
## ALL type_simple LPAREN ID COLON complex_type DOUBLE_ARROW term RPAREN
## LR(1) items:
term_simple -> ALL type_simple LPAREN ID COLON complex_type DOUBLE_ARROW term RPAREN . [ TRUE RPAREN REW QID OR NUMBER NOT LPAREN IMP ID FALSE EX_TYPE EX EQV EQUAL END_HYP DOUBLE_ARROW DOT CCARR AND ALL_TYPE ALL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production term_simple -> ALL type_simple LPAREN ID COLON complex_type DOUBLE_ARROW term RPAREN

State 86:
## Known stack suffix:
## ALL_TYPE LPAREN ID COLON TYPE DOUBLE_ARROW term
## LR(1) items:
term_simple -> ALL_TYPE LPAREN ID COLON TYPE DOUBLE_ARROW term . RPAREN [ TRUE RPAREN REW QID OR NUMBER NOT LPAREN IMP ID FALSE EX_TYPE EX EQV EQUAL END_HYP DOUBLE_ARROW DOT CCARR AND ALL_TYPE ALL ]
## Transitions:
-- On RPAREN shift to state 87
## Reductions:

State 87:
## Known stack suffix:
## ALL_TYPE LPAREN ID COLON TYPE DOUBLE_ARROW term RPAREN
## LR(1) items:
term_simple -> ALL_TYPE LPAREN ID COLON TYPE DOUBLE_ARROW term RPAREN . [ TRUE RPAREN REW QID OR NUMBER NOT LPAREN IMP ID FALSE EX_TYPE EX EQV EQUAL END_HYP DOUBLE_ARROW DOT CCARR AND ALL_TYPE ALL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production term_simple -> ALL_TYPE LPAREN ID COLON TYPE DOUBLE_ARROW term RPAREN

State 88:
## Known stack suffix:
## AND term_simple
## LR(1) items:
term_simple -> AND term_simple . term_simple [ TRUE RPAREN REW QID OR NUMBER NOT LPAREN IMP ID FALSE EX_TYPE EX EQV EQUAL END_HYP DOUBLE_ARROW DOT CCARR AND ALL_TYPE ALL ]
## Transitions:
-- On TRUE shift to state 23
-- On QID shift to state 24
-- On OR shift to state 25
-- On NUMBER shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On IMP shift to state 29
-- On ID shift to state 30
-- On FALSE shift to state 32
-- On EX_TYPE shift to state 33
-- On EX shift to state 39
-- On EQV shift to state 59
-- On EQUAL shift to state 60
-- On CCARR shift to state 62
-- On AND shift to state 65
-- On ALL_TYPE shift to state 66
-- On ALL shift to state 72
-- On term_simple shift to state 89
-- On qid shift to state 81
## Reductions:

State 89:
## Known stack suffix:
## AND term_simple term_simple
## LR(1) items:
term_simple -> AND term_simple term_simple . [ TRUE RPAREN REW QID OR NUMBER NOT LPAREN IMP ID FALSE EX_TYPE EX EQV EQUAL END_HYP DOUBLE_ARROW DOT CCARR AND ALL_TYPE ALL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production term_simple -> AND term_simple term_simple

State 90:
## Known stack suffix:
## EQUAL type_simple term_simple
## LR(1) items:
term_simple -> EQUAL type_simple term_simple . term_simple [ TRUE RPAREN REW QID OR NUMBER NOT LPAREN IMP ID FALSE EX_TYPE EX EQV EQUAL END_HYP DOUBLE_ARROW DOT CCARR AND ALL_TYPE ALL ]
## Transitions:
-- On TRUE shift to state 23
-- On QID shift to state 24
-- On OR shift to state 25
-- On NUMBER shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On IMP shift to state 29
-- On ID shift to state 30
-- On FALSE shift to state 32
-- On EX_TYPE shift to state 33
-- On EX shift to state 39
-- On EQV shift to state 59
-- On EQUAL shift to state 60
-- On CCARR shift to state 62
-- On AND shift to state 65
-- On ALL_TYPE shift to state 66
-- On ALL shift to state 72
-- On term_simple shift to state 91
-- On qid shift to state 81
## Reductions:

State 91:
## Known stack suffix:
## EQUAL type_simple term_simple term_simple
## LR(1) items:
term_simple -> EQUAL type_simple term_simple term_simple . [ TRUE RPAREN REW QID OR NUMBER NOT LPAREN IMP ID FALSE EX_TYPE EX EQV EQUAL END_HYP DOUBLE_ARROW DOT CCARR AND ALL_TYPE ALL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production term_simple -> EQUAL type_simple term_simple term_simple

State 92:
## Known stack suffix:
## EQV term_simple
## LR(1) items:
term_simple -> EQV term_simple . term_simple [ TRUE RPAREN REW QID OR NUMBER NOT LPAREN IMP ID FALSE EX_TYPE EX EQV EQUAL END_HYP DOUBLE_ARROW DOT CCARR AND ALL_TYPE ALL ]
## Transitions:
-- On TRUE shift to state 23
-- On QID shift to state 24
-- On OR shift to state 25
-- On NUMBER shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On IMP shift to state 29
-- On ID shift to state 30
-- On FALSE shift to state 32
-- On EX_TYPE shift to state 33
-- On EX shift to state 39
-- On EQV shift to state 59
-- On EQUAL shift to state 60
-- On CCARR shift to state 62
-- On AND shift to state 65
-- On ALL_TYPE shift to state 66
-- On ALL shift to state 72
-- On term_simple shift to state 93
-- On qid shift to state 81
## Reductions:

State 93:
## Known stack suffix:
## EQV term_simple term_simple
## LR(1) items:
term_simple -> EQV term_simple term_simple . [ TRUE RPAREN REW QID OR NUMBER NOT LPAREN IMP ID FALSE EX_TYPE EX EQV EQUAL END_HYP DOUBLE_ARROW DOT CCARR AND ALL_TYPE ALL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production term_simple -> EQV term_simple term_simple

State 94:
## Known stack suffix:
## EX type_simple LPAREN ID COLON complex_type DOUBLE_ARROW term
## LR(1) items:
term_simple -> EX type_simple LPAREN ID COLON complex_type DOUBLE_ARROW term . RPAREN [ TRUE RPAREN REW QID OR NUMBER NOT LPAREN IMP ID FALSE EX_TYPE EX EQV EQUAL END_HYP DOUBLE_ARROW DOT CCARR AND ALL_TYPE ALL ]
## Transitions:
-- On RPAREN shift to state 95
## Reductions:

State 95:
## Known stack suffix:
## EX type_simple LPAREN ID COLON complex_type DOUBLE_ARROW term RPAREN
## LR(1) items:
term_simple -> EX type_simple LPAREN ID COLON complex_type DOUBLE_ARROW term RPAREN . [ TRUE RPAREN REW QID OR NUMBER NOT LPAREN IMP ID FALSE EX_TYPE EX EQV EQUAL END_HYP DOUBLE_ARROW DOT CCARR AND ALL_TYPE ALL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production term_simple -> EX type_simple LPAREN ID COLON complex_type DOUBLE_ARROW term RPAREN

State 96:
## Known stack suffix:
## EX_TYPE LPAREN ID COLON TYPE DOUBLE_ARROW term
## LR(1) items:
term_simple -> EX_TYPE LPAREN ID COLON TYPE DOUBLE_ARROW term . RPAREN [ TRUE RPAREN REW QID OR NUMBER NOT LPAREN IMP ID FALSE EX_TYPE EX EQV EQUAL END_HYP DOUBLE_ARROW DOT CCARR AND ALL_TYPE ALL ]
## Transitions:
-- On RPAREN shift to state 97
## Reductions:

State 97:
## Known stack suffix:
## EX_TYPE LPAREN ID COLON TYPE DOUBLE_ARROW term RPAREN
## LR(1) items:
term_simple -> EX_TYPE LPAREN ID COLON TYPE DOUBLE_ARROW term RPAREN . [ TRUE RPAREN REW QID OR NUMBER NOT LPAREN IMP ID FALSE EX_TYPE EX EQV EQUAL END_HYP DOUBLE_ARROW DOT CCARR AND ALL_TYPE ALL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production term_simple -> EX_TYPE LPAREN ID COLON TYPE DOUBLE_ARROW term RPAREN

State 98:
## Known stack suffix:
## ID DEF term
## LR(1) items:
term_simple -> ID DEF term . DOUBLE_ARROW term_simple [ TRUE RPAREN REW QID OR NUMBER NOT LPAREN IMP ID FALSE EX_TYPE EX EQV EQUAL END_HYP DOUBLE_ARROW DOT CCARR AND ALL_TYPE ALL ]
## Transitions:
-- On DOUBLE_ARROW shift to state 99
## Reductions:

State 99:
## Known stack suffix:
## ID DEF term DOUBLE_ARROW
## LR(1) items:
term_simple -> ID DEF term DOUBLE_ARROW . term_simple [ TRUE RPAREN REW QID OR NUMBER NOT LPAREN IMP ID FALSE EX_TYPE EX EQV EQUAL END_HYP DOUBLE_ARROW DOT CCARR AND ALL_TYPE ALL ]
## Transitions:
-- On TRUE shift to state 23
-- On QID shift to state 24
-- On OR shift to state 25
-- On NUMBER shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On IMP shift to state 29
-- On ID shift to state 30
-- On FALSE shift to state 32
-- On EX_TYPE shift to state 33
-- On EX shift to state 39
-- On EQV shift to state 59
-- On EQUAL shift to state 60
-- On CCARR shift to state 62
-- On AND shift to state 65
-- On ALL_TYPE shift to state 66
-- On ALL shift to state 72
-- On term_simple shift to state 100
-- On qid shift to state 81
## Reductions:

State 100:
## Known stack suffix:
## ID DEF term DOUBLE_ARROW term_simple
## LR(1) items:
term_simple -> ID DEF term DOUBLE_ARROW term_simple . [ TRUE RPAREN REW QID OR NUMBER NOT LPAREN IMP ID FALSE EX_TYPE EX EQV EQUAL END_HYP DOUBLE_ARROW DOT CCARR AND ALL_TYPE ALL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production term_simple -> ID DEF term DOUBLE_ARROW term_simple

State 101:
## Known stack suffix:
## ID COLON
## LR(1) items:
term_simple -> ID COLON . typ DOUBLE_ARROW term_simple [ TRUE RPAREN REW QID OR NUMBER NOT LPAREN IMP ID FALSE EX_TYPE EX EQV EQUAL END_HYP DOUBLE_ARROW DOT CCARR AND ALL_TYPE ALL ]
## Transitions:
-- On TERM shift to state 5
-- On PROP shift to state 20
-- On typ shift to state 102
## Reductions:

State 102:
## Known stack suffix:
## ID COLON typ
## LR(1) items:
term_simple -> ID COLON typ . DOUBLE_ARROW term_simple [ TRUE RPAREN REW QID OR NUMBER NOT LPAREN IMP ID FALSE EX_TYPE EX EQV EQUAL END_HYP DOUBLE_ARROW DOT CCARR AND ALL_TYPE ALL ]
## Transitions:
-- On DOUBLE_ARROW shift to state 103
## Reductions:

State 103:
## Known stack suffix:
## ID COLON typ DOUBLE_ARROW
## LR(1) items:
term_simple -> ID COLON typ DOUBLE_ARROW . term_simple [ TRUE RPAREN REW QID OR NUMBER NOT LPAREN IMP ID FALSE EX_TYPE EX EQV EQUAL END_HYP DOUBLE_ARROW DOT CCARR AND ALL_TYPE ALL ]
## Transitions:
-- On TRUE shift to state 23
-- On QID shift to state 24
-- On OR shift to state 25
-- On NUMBER shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On IMP shift to state 29
-- On ID shift to state 30
-- On FALSE shift to state 32
-- On EX_TYPE shift to state 33
-- On EX shift to state 39
-- On EQV shift to state 59
-- On EQUAL shift to state 60
-- On CCARR shift to state 62
-- On AND shift to state 65
-- On ALL_TYPE shift to state 66
-- On ALL shift to state 72
-- On term_simple shift to state 104
-- On qid shift to state 81
## Reductions:

State 104:
## Known stack suffix:
## ID COLON typ DOUBLE_ARROW term_simple
## LR(1) items:
term_simple -> ID COLON typ DOUBLE_ARROW term_simple . [ TRUE RPAREN REW QID OR NUMBER NOT LPAREN IMP ID FALSE EX_TYPE EX EQV EQUAL END_HYP DOUBLE_ARROW DOT CCARR AND ALL_TYPE ALL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production term_simple -> ID COLON typ DOUBLE_ARROW term_simple

State 105:
## Known stack suffix:
## IMP term_simple
## LR(1) items:
term_simple -> IMP term_simple . term_simple [ TRUE RPAREN REW QID OR NUMBER NOT LPAREN IMP ID FALSE EX_TYPE EX EQV EQUAL END_HYP DOUBLE_ARROW DOT CCARR AND ALL_TYPE ALL ]
## Transitions:
-- On TRUE shift to state 23
-- On QID shift to state 24
-- On OR shift to state 25
-- On NUMBER shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On IMP shift to state 29
-- On ID shift to state 30
-- On FALSE shift to state 32
-- On EX_TYPE shift to state 33
-- On EX shift to state 39
-- On EQV shift to state 59
-- On EQUAL shift to state 60
-- On CCARR shift to state 62
-- On AND shift to state 65
-- On ALL_TYPE shift to state 66
-- On ALL shift to state 72
-- On term_simple shift to state 106
-- On qid shift to state 81
## Reductions:

State 106:
## Known stack suffix:
## IMP term_simple term_simple
## LR(1) items:
term_simple -> IMP term_simple term_simple . [ TRUE RPAREN REW QID OR NUMBER NOT LPAREN IMP ID FALSE EX_TYPE EX EQV EQUAL END_HYP DOUBLE_ARROW DOT CCARR AND ALL_TYPE ALL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production term_simple -> IMP term_simple term_simple

State 107:
## Known stack suffix:
## LPAREN term
## LR(1) items:
term_simple -> LPAREN term . RPAREN [ TRUE RPAREN REW QID OR NUMBER NOT LPAREN IMP ID FALSE EX_TYPE EX EQV EQUAL END_HYP DOUBLE_ARROW DOT CCARR AND ALL_TYPE ALL ]
## Transitions:
-- On RPAREN shift to state 108
## Reductions:

State 108:
## Known stack suffix:
## LPAREN term RPAREN
## LR(1) items:
term_simple -> LPAREN term RPAREN . [ TRUE RPAREN REW QID OR NUMBER NOT LPAREN IMP ID FALSE EX_TYPE EX EQV EQUAL END_HYP DOUBLE_ARROW DOT CCARR AND ALL_TYPE ALL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production term_simple -> LPAREN term RPAREN

State 109:
## Known stack suffix:
## NOT term_simple
## LR(1) items:
term_simple -> NOT term_simple . [ TRUE RPAREN REW QID OR NUMBER NOT LPAREN IMP ID FALSE EX_TYPE EX EQV EQUAL END_HYP DOUBLE_ARROW DOT CCARR AND ALL_TYPE ALL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production term_simple -> NOT term_simple

State 110:
## Known stack suffix:
## OR term_simple
## LR(1) items:
term_simple -> OR term_simple . term_simple [ TRUE RPAREN REW QID OR NUMBER NOT LPAREN IMP ID FALSE EX_TYPE EX EQV EQUAL END_HYP DOUBLE_ARROW DOT CCARR AND ALL_TYPE ALL ]
## Transitions:
-- On TRUE shift to state 23
-- On QID shift to state 24
-- On OR shift to state 25
-- On NUMBER shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On IMP shift to state 29
-- On ID shift to state 30
-- On FALSE shift to state 32
-- On EX_TYPE shift to state 33
-- On EX shift to state 39
-- On EQV shift to state 59
-- On EQUAL shift to state 60
-- On CCARR shift to state 62
-- On AND shift to state 65
-- On ALL_TYPE shift to state 66
-- On ALL shift to state 72
-- On term_simple shift to state 111
-- On qid shift to state 81
## Reductions:

State 111:
## Known stack suffix:
## OR term_simple term_simple
## LR(1) items:
term_simple -> OR term_simple term_simple . [ TRUE RPAREN REW QID OR NUMBER NOT LPAREN IMP ID FALSE EX_TYPE EX EQV EQUAL END_HYP DOUBLE_ARROW DOT CCARR AND ALL_TYPE ALL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production term_simple -> OR term_simple term_simple

State 112:
## Known stack suffix:
## QID COLON PROOF term
## LR(1) items:
body -> QID COLON PROOF term . DOT body [ EOF ENDPROOF ]
## Transitions:
-- On DOT shift to state 113
## Reductions:

State 113:
## Known stack suffix:
## QID COLON PROOF term DOT
## LR(1) items:
body -> QID COLON PROOF term DOT . body [ EOF ENDPROOF ]
## Transitions:
-- On QID shift to state 2
-- On LBRACK shift to state 114
-- On ID shift to state 125
-- On DEFKW shift to state 130
-- On goal shift to state 137
-- On env shift to state 138
-- On body shift to state 185
## Reductions:

State 114:
## Known stack suffix:
## LBRACK
## LR(1) items:
env -> LBRACK . loption(separated_nonempty_list(COMMA,env_decl)) RBRACK [ error TRUE QID OR NUMBER NOT LPAREN IMP ID FALSE EX_TYPE EX EQV EQUAL CCARR AND ALL_TYPE ALL ]
## Transitions:
-- On ID shift to state 115
-- On separated_nonempty_list(COMMA,env_decl) shift to state 119
-- On loption(separated_nonempty_list(COMMA,env_decl)) shift to state 120
-- On env_decl shift to state 122
## Reductions:
-- On RBRACK reduce production loption(separated_nonempty_list(COMMA,env_decl)) ->

State 115:
## Known stack suffix:
## ID
## LR(1) items:
env_decl -> ID . COLON arrow_type [ RBRACK COMMA ]
env_decl -> ID . COLON TYPE [ RBRACK COMMA ]
env_decl -> ID . [ RBRACK COMMA ]
## Transitions:
-- On COLON shift to state 116
## Reductions:
-- On RBRACK reduce production env_decl -> ID
-- On COMMA reduce production env_decl -> ID

State 116:
## Known stack suffix:
## ID COLON
## LR(1) items:
env_decl -> ID COLON . arrow_type [ RBRACK COMMA ]
env_decl -> ID COLON . TYPE [ RBRACK COMMA ]
## Transitions:
-- On TYPE shift to state 117
-- On TERM shift to state 5
-- On PROP shift to state 20
-- On LPAREN shift to state 44
-- On ID shift to state 45
-- On typ shift to state 49
-- On complex_type shift to state 50
-- On arrow_type shift to state 118
## Reductions:

State 117:
## Known stack suffix:
## ID COLON TYPE
## LR(1) items:
env_decl -> ID COLON TYPE . [ RBRACK COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production env_decl -> ID COLON TYPE

State 118:
## Known stack suffix:
## ID COLON arrow_type
## LR(1) items:
env_decl -> ID COLON arrow_type . [ RBRACK COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production env_decl -> ID COLON arrow_type

State 119:
## Known stack suffix:
## separated_nonempty_list(COMMA,env_decl)
## LR(1) items:
loption(separated_nonempty_list(COMMA,env_decl)) -> separated_nonempty_list(COMMA,env_decl) . [ RBRACK ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production loption(separated_nonempty_list(COMMA,env_decl)) -> separated_nonempty_list(COMMA,env_decl)

State 120:
## Known stack suffix:
## LBRACK loption(separated_nonempty_list(COMMA,env_decl))
## LR(1) items:
env -> LBRACK loption(separated_nonempty_list(COMMA,env_decl)) . RBRACK [ error TRUE QID OR NUMBER NOT LPAREN IMP ID FALSE EX_TYPE EX EQV EQUAL CCARR AND ALL_TYPE ALL ]
## Transitions:
-- On RBRACK shift to state 121
## Reductions:

State 121:
## Known stack suffix:
## LBRACK loption(separated_nonempty_list(COMMA,env_decl)) RBRACK
## LR(1) items:
env -> LBRACK loption(separated_nonempty_list(COMMA,env_decl)) RBRACK . [ error TRUE QID OR NUMBER NOT LPAREN IMP ID FALSE EX_TYPE EX EQV EQUAL CCARR AND ALL_TYPE ALL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production env -> LBRACK loption(separated_nonempty_list(COMMA,env_decl)) RBRACK

State 122:
## Known stack suffix:
## env_decl
## LR(1) items:
separated_nonempty_list(COMMA,env_decl) -> env_decl . [ RBRACK ]
separated_nonempty_list(COMMA,env_decl) -> env_decl . COMMA separated_nonempty_list(COMMA,env_decl) [ RBRACK ]
## Transitions:
-- On COMMA shift to state 123
## Reductions:
-- On RBRACK reduce production separated_nonempty_list(COMMA,env_decl) -> env_decl

State 123:
## Known stack suffix:
## env_decl COMMA
## LR(1) items:
separated_nonempty_list(COMMA,env_decl) -> env_decl COMMA . separated_nonempty_list(COMMA,env_decl) [ RBRACK ]
## Transitions:
-- On ID shift to state 115
-- On separated_nonempty_list(COMMA,env_decl) shift to state 124
-- On env_decl shift to state 122
## Reductions:

State 124:
## Known stack suffix:
## env_decl COMMA separated_nonempty_list(COMMA,env_decl)
## LR(1) items:
separated_nonempty_list(COMMA,env_decl) -> env_decl COMMA separated_nonempty_list(COMMA,env_decl) . [ RBRACK ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production separated_nonempty_list(COMMA,env_decl) -> env_decl COMMA separated_nonempty_list(COMMA,env_decl)

State 125:
## Known stack suffix:
## ID
## LR(1) items:
body -> ID . COLON kind DOT body [ EOF ENDPROOF ]
body -> ID . COLON PROOF term DOT body [ EOF ENDPROOF ]
body -> ID . COLON arrow_type DOT body [ EOF ENDPROOF ]
goal -> ID . COLON PROOF term DOT [ EOF ENDPROOF ]
## Transitions:
-- On COLON shift to state 126
## Reductions:

State 126:
## Known stack suffix:
## ID COLON
## LR(1) items:
body -> ID COLON . kind DOT body [ EOF ENDPROOF ]
body -> ID COLON . PROOF term DOT body [ EOF ENDPROOF ]
body -> ID COLON . arrow_type DOT body [ EOF ENDPROOF ]
goal -> ID COLON . PROOF term DOT [ EOF ENDPROOF ]
## Transitions:
-- On TYPE shift to state 4
-- On TERM shift to state 5
-- On PROP shift to state 20
-- On PROOF shift to state 127
-- On LPAREN shift to state 44
-- On ID shift to state 174
-- On typ shift to state 49
-- On kind shift to state 179
-- On complex_type shift to state 50
-- On arrow_type shift to state 182
## Reductions:

State 127:
## Known stack suffix:
## ID COLON PROOF
## LR(1) items:
body -> ID COLON PROOF . term DOT body [ EOF ENDPROOF ]
goal -> ID COLON PROOF . term DOT [ EOF ENDPROOF ]
## Transitions:
-- On error shift to state 22
-- On TRUE shift to state 23
-- On QID shift to state 24
-- On OR shift to state 25
-- On NUMBER shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On IMP shift to state 29
-- On ID shift to state 30
-- On FALSE shift to state 32
-- On EX_TYPE shift to state 33
-- On EX shift to state 39
-- On EQV shift to state 59
-- On EQUAL shift to state 60
-- On CCARR shift to state 62
-- On AND shift to state 65
-- On ALL_TYPE shift to state 66
-- On ALL shift to state 72
-- On term_simple shift to state 79
-- On term shift to state 128
-- On qid shift to state 81
## Reductions:

State 128:
## Known stack suffix:
## ID COLON PROOF term
## LR(1) items:
body -> ID COLON PROOF term . DOT body [ EOF ENDPROOF ]
goal -> ID COLON PROOF term . DOT [ EOF ENDPROOF ]
## Transitions:
-- On DOT shift to state 129
## Reductions:

State 129:
## Known stack suffix:
## ID COLON PROOF term DOT
## LR(1) items:
body -> ID COLON PROOF term DOT . body [ EOF ENDPROOF ]
goal -> ID COLON PROOF term DOT . [ EOF ENDPROOF ]
## Transitions:
-- On QID shift to state 2
-- On LBRACK shift to state 114
-- On ID shift to state 125
-- On DEFKW shift to state 130
-- On goal shift to state 137
-- On env shift to state 138
-- On body shift to state 173
## Reductions:
-- On EOF reduce production goal -> ID COLON PROOF term DOT
-- On ENDPROOF reduce production goal -> ID COLON PROOF term DOT

State 130:
## Known stack suffix:
## DEFKW
## LR(1) items:
body -> DEFKW . ID COLON arrow_type DOT body [ EOF ENDPROOF ]
body -> DEFKW . QID COLON arrow_type DOT body [ EOF ENDPROOF ]
body -> DEFKW . ID COLON typ DEF term DOT body [ EOF ENDPROOF ]
body -> DEFKW . QID COLON typ DEF term DOT body [ EOF ENDPROOF ]
body -> DEFKW . declared_or_defined_id nonempty_list(compact_arg) COLON typ DEF term DOT body [ EOF ENDPROOF ]
## Transitions:
-- On QID shift to state 131
-- On ID shift to state 148
-- On declared_or_defined_id shift to state 158
## Reductions:

State 131:
## Known stack suffix:
## DEFKW QID
## LR(1) items:
body -> DEFKW QID . COLON arrow_type DOT body [ EOF ENDPROOF ]
body -> DEFKW QID . COLON typ DEF term DOT body [ EOF ENDPROOF ]
declared_or_defined_id -> QID . [ LPAREN ]
## Transitions:
-- On COLON shift to state 132
## Reductions:
-- On LPAREN reduce production declared_or_defined_id -> QID

State 132:
## Known stack suffix:
## DEFKW QID COLON
## LR(1) items:
body -> DEFKW QID COLON . arrow_type DOT body [ EOF ENDPROOF ]
body -> DEFKW QID COLON . typ DEF term DOT body [ EOF ENDPROOF ]
## Transitions:
-- On TERM shift to state 5
-- On PROP shift to state 20
-- On LPAREN shift to state 44
-- On ID shift to state 45
-- On typ shift to state 133
-- On complex_type shift to state 50
-- On arrow_type shift to state 145
## Reductions:

State 133:
## Known stack suffix:
## DEFKW QID COLON typ
## LR(1) items:
arrow_type -> typ . [ DOT ]
body -> DEFKW QID COLON typ . DEF term DOT body [ EOF ENDPROOF ]
complex_type -> typ . [ ARROW ]
## Transitions:
-- On DEF shift to state 134
## Reductions:
-- On DOT reduce production arrow_type -> typ
-- On ARROW reduce production complex_type -> typ

State 134:
## Known stack suffix:
## DEFKW QID COLON typ DEF
## LR(1) items:
body -> DEFKW QID COLON typ DEF . term DOT body [ EOF ENDPROOF ]
## Transitions:
-- On error shift to state 22
-- On TRUE shift to state 23
-- On QID shift to state 24
-- On OR shift to state 25
-- On NUMBER shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On IMP shift to state 29
-- On ID shift to state 30
-- On FALSE shift to state 32
-- On EX_TYPE shift to state 33
-- On EX shift to state 39
-- On EQV shift to state 59
-- On EQUAL shift to state 60
-- On CCARR shift to state 62
-- On AND shift to state 65
-- On ALL_TYPE shift to state 66
-- On ALL shift to state 72
-- On term_simple shift to state 79
-- On term shift to state 135
-- On qid shift to state 81
## Reductions:

State 135:
## Known stack suffix:
## DEFKW QID COLON typ DEF term
## LR(1) items:
body -> DEFKW QID COLON typ DEF term . DOT body [ EOF ENDPROOF ]
## Transitions:
-- On DOT shift to state 136
## Reductions:

State 136:
## Known stack suffix:
## DEFKW QID COLON typ DEF term DOT
## LR(1) items:
body -> DEFKW QID COLON typ DEF term DOT . body [ EOF ENDPROOF ]
## Transitions:
-- On QID shift to state 2
-- On LBRACK shift to state 114
-- On ID shift to state 125
-- On DEFKW shift to state 130
-- On goal shift to state 137
-- On env shift to state 138
-- On body shift to state 144
## Reductions:

State 137:
## Known stack suffix:
## goal
## LR(1) items:
body -> goal . [ EOF ENDPROOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production body -> goal

State 138:
## Known stack suffix:
## env
## LR(1) items:
body -> env . term REW term DOT body [ EOF ENDPROOF ]
## Transitions:
-- On error shift to state 22
-- On TRUE shift to state 23
-- On QID shift to state 24
-- On OR shift to state 25
-- On NUMBER shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On IMP shift to state 29
-- On ID shift to state 30
-- On FALSE shift to state 32
-- On EX_TYPE shift to state 33
-- On EX shift to state 39
-- On EQV shift to state 59
-- On EQUAL shift to state 60
-- On CCARR shift to state 62
-- On AND shift to state 65
-- On ALL_TYPE shift to state 66
-- On ALL shift to state 72
-- On term_simple shift to state 79
-- On term shift to state 139
-- On qid shift to state 81
## Reductions:

State 139:
## Known stack suffix:
## env term
## LR(1) items:
body -> env term . REW term DOT body [ EOF ENDPROOF ]
## Transitions:
-- On REW shift to state 140
## Reductions:

State 140:
## Known stack suffix:
## env term REW
## LR(1) items:
body -> env term REW . term DOT body [ EOF ENDPROOF ]
## Transitions:
-- On error shift to state 22
-- On TRUE shift to state 23
-- On QID shift to state 24
-- On OR shift to state 25
-- On NUMBER shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On IMP shift to state 29
-- On ID shift to state 30
-- On FALSE shift to state 32
-- On EX_TYPE shift to state 33
-- On EX shift to state 39
-- On EQV shift to state 59
-- On EQUAL shift to state 60
-- On CCARR shift to state 62
-- On AND shift to state 65
-- On ALL_TYPE shift to state 66
-- On ALL shift to state 72
-- On term_simple shift to state 79
-- On term shift to state 141
-- On qid shift to state 81
## Reductions:

State 141:
## Known stack suffix:
## env term REW term
## LR(1) items:
body -> env term REW term . DOT body [ EOF ENDPROOF ]
## Transitions:
-- On DOT shift to state 142
## Reductions:

State 142:
## Known stack suffix:
## env term REW term DOT
## LR(1) items:
body -> env term REW term DOT . body [ EOF ENDPROOF ]
## Transitions:
-- On QID shift to state 2
-- On LBRACK shift to state 114
-- On ID shift to state 125
-- On DEFKW shift to state 130
-- On goal shift to state 137
-- On env shift to state 138
-- On body shift to state 143
## Reductions:

State 143:
## Known stack suffix:
## env term REW term DOT body
## LR(1) items:
body -> env term REW term DOT body . [ EOF ENDPROOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production body -> env term REW term DOT body

State 144:
## Known stack suffix:
## DEFKW QID COLON typ DEF term DOT body
## LR(1) items:
body -> DEFKW QID COLON typ DEF term DOT body . [ EOF ENDPROOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production body -> DEFKW QID COLON typ DEF term DOT body

State 145:
## Known stack suffix:
## DEFKW QID COLON arrow_type
## LR(1) items:
body -> DEFKW QID COLON arrow_type . DOT body [ EOF ENDPROOF ]
## Transitions:
-- On DOT shift to state 146
## Reductions:

State 146:
## Known stack suffix:
## DEFKW QID COLON arrow_type DOT
## LR(1) items:
body -> DEFKW QID COLON arrow_type DOT . body [ EOF ENDPROOF ]
## Transitions:
-- On QID shift to state 2
-- On LBRACK shift to state 114
-- On ID shift to state 125
-- On DEFKW shift to state 130
-- On goal shift to state 137
-- On env shift to state 138
-- On body shift to state 147
## Reductions:

State 147:
## Known stack suffix:
## DEFKW QID COLON arrow_type DOT body
## LR(1) items:
body -> DEFKW QID COLON arrow_type DOT body . [ EOF ENDPROOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production body -> DEFKW QID COLON arrow_type DOT body

State 148:
## Known stack suffix:
## DEFKW ID
## LR(1) items:
body -> DEFKW ID . COLON arrow_type DOT body [ EOF ENDPROOF ]
body -> DEFKW ID . COLON typ DEF term DOT body [ EOF ENDPROOF ]
declared_or_defined_id -> ID . [ LPAREN ]
## Transitions:
-- On COLON shift to state 149
## Reductions:
-- On LPAREN reduce production declared_or_defined_id -> ID

State 149:
## Known stack suffix:
## DEFKW ID COLON
## LR(1) items:
body -> DEFKW ID COLON . arrow_type DOT body [ EOF ENDPROOF ]
body -> DEFKW ID COLON . typ DEF term DOT body [ EOF ENDPROOF ]
## Transitions:
-- On TERM shift to state 5
-- On PROP shift to state 20
-- On LPAREN shift to state 44
-- On ID shift to state 45
-- On typ shift to state 150
-- On complex_type shift to state 50
-- On arrow_type shift to state 155
## Reductions:

State 150:
## Known stack suffix:
## DEFKW ID COLON typ
## LR(1) items:
arrow_type -> typ . [ DOT ]
body -> DEFKW ID COLON typ . DEF term DOT body [ EOF ENDPROOF ]
complex_type -> typ . [ ARROW ]
## Transitions:
-- On DEF shift to state 151
## Reductions:
-- On DOT reduce production arrow_type -> typ
-- On ARROW reduce production complex_type -> typ

State 151:
## Known stack suffix:
## DEFKW ID COLON typ DEF
## LR(1) items:
body -> DEFKW ID COLON typ DEF . term DOT body [ EOF ENDPROOF ]
## Transitions:
-- On error shift to state 22
-- On TRUE shift to state 23
-- On QID shift to state 24
-- On OR shift to state 25
-- On NUMBER shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On IMP shift to state 29
-- On ID shift to state 30
-- On FALSE shift to state 32
-- On EX_TYPE shift to state 33
-- On EX shift to state 39
-- On EQV shift to state 59
-- On EQUAL shift to state 60
-- On CCARR shift to state 62
-- On AND shift to state 65
-- On ALL_TYPE shift to state 66
-- On ALL shift to state 72
-- On term_simple shift to state 79
-- On term shift to state 152
-- On qid shift to state 81
## Reductions:

State 152:
## Known stack suffix:
## DEFKW ID COLON typ DEF term
## LR(1) items:
body -> DEFKW ID COLON typ DEF term . DOT body [ EOF ENDPROOF ]
## Transitions:
-- On DOT shift to state 153
## Reductions:

State 153:
## Known stack suffix:
## DEFKW ID COLON typ DEF term DOT
## LR(1) items:
body -> DEFKW ID COLON typ DEF term DOT . body [ EOF ENDPROOF ]
## Transitions:
-- On QID shift to state 2
-- On LBRACK shift to state 114
-- On ID shift to state 125
-- On DEFKW shift to state 130
-- On goal shift to state 137
-- On env shift to state 138
-- On body shift to state 154
## Reductions:

State 154:
## Known stack suffix:
## DEFKW ID COLON typ DEF term DOT body
## LR(1) items:
body -> DEFKW ID COLON typ DEF term DOT body . [ EOF ENDPROOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production body -> DEFKW ID COLON typ DEF term DOT body

State 155:
## Known stack suffix:
## DEFKW ID COLON arrow_type
## LR(1) items:
body -> DEFKW ID COLON arrow_type . DOT body [ EOF ENDPROOF ]
## Transitions:
-- On DOT shift to state 156
## Reductions:

State 156:
## Known stack suffix:
## DEFKW ID COLON arrow_type DOT
## LR(1) items:
body -> DEFKW ID COLON arrow_type DOT . body [ EOF ENDPROOF ]
## Transitions:
-- On QID shift to state 2
-- On LBRACK shift to state 114
-- On ID shift to state 125
-- On DEFKW shift to state 130
-- On goal shift to state 137
-- On env shift to state 138
-- On body shift to state 157
## Reductions:

State 157:
## Known stack suffix:
## DEFKW ID COLON arrow_type DOT body
## LR(1) items:
body -> DEFKW ID COLON arrow_type DOT body . [ EOF ENDPROOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production body -> DEFKW ID COLON arrow_type DOT body

State 158:
## Known stack suffix:
## DEFKW declared_or_defined_id
## LR(1) items:
body -> DEFKW declared_or_defined_id . nonempty_list(compact_arg) COLON typ DEF term DOT body [ EOF ENDPROOF ]
## Transitions:
-- On LPAREN shift to state 159
-- On nonempty_list(compact_arg) shift to state 164
-- On compact_arg shift to state 171
## Reductions:

State 159:
## Known stack suffix:
## LPAREN
## LR(1) items:
compact_arg -> LPAREN . ID COLON arrow_type RPAREN [ LPAREN COLON ]
## Transitions:
-- On ID shift to state 160
## Reductions:

State 160:
## Known stack suffix:
## LPAREN ID
## LR(1) items:
compact_arg -> LPAREN ID . COLON arrow_type RPAREN [ LPAREN COLON ]
## Transitions:
-- On COLON shift to state 161
## Reductions:

State 161:
## Known stack suffix:
## LPAREN ID COLON
## LR(1) items:
compact_arg -> LPAREN ID COLON . arrow_type RPAREN [ LPAREN COLON ]
## Transitions:
-- On TERM shift to state 5
-- On PROP shift to state 20
-- On LPAREN shift to state 44
-- On ID shift to state 45
-- On typ shift to state 49
-- On complex_type shift to state 50
-- On arrow_type shift to state 162
## Reductions:

State 162:
## Known stack suffix:
## LPAREN ID COLON arrow_type
## LR(1) items:
compact_arg -> LPAREN ID COLON arrow_type . RPAREN [ LPAREN COLON ]
## Transitions:
-- On RPAREN shift to state 163
## Reductions:

State 163:
## Known stack suffix:
## LPAREN ID COLON arrow_type RPAREN
## LR(1) items:
compact_arg -> LPAREN ID COLON arrow_type RPAREN . [ LPAREN COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production compact_arg -> LPAREN ID COLON arrow_type RPAREN

State 164:
## Known stack suffix:
## DEFKW declared_or_defined_id nonempty_list(compact_arg)
## LR(1) items:
body -> DEFKW declared_or_defined_id nonempty_list(compact_arg) . COLON typ DEF term DOT body [ EOF ENDPROOF ]
## Transitions:
-- On COLON shift to state 165
## Reductions:

State 165:
## Known stack suffix:
## DEFKW declared_or_defined_id nonempty_list(compact_arg) COLON
## LR(1) items:
body -> DEFKW declared_or_defined_id nonempty_list(compact_arg) COLON . typ DEF term DOT body [ EOF ENDPROOF ]
## Transitions:
-- On TERM shift to state 5
-- On PROP shift to state 20
-- On typ shift to state 166
## Reductions:

State 166:
## Known stack suffix:
## DEFKW declared_or_defined_id nonempty_list(compact_arg) COLON typ
## LR(1) items:
body -> DEFKW declared_or_defined_id nonempty_list(compact_arg) COLON typ . DEF term DOT body [ EOF ENDPROOF ]
## Transitions:
-- On DEF shift to state 167
## Reductions:

State 167:
## Known stack suffix:
## DEFKW declared_or_defined_id nonempty_list(compact_arg) COLON typ DEF
## LR(1) items:
body -> DEFKW declared_or_defined_id nonempty_list(compact_arg) COLON typ DEF . term DOT body [ EOF ENDPROOF ]
## Transitions:
-- On error shift to state 22
-- On TRUE shift to state 23
-- On QID shift to state 24
-- On OR shift to state 25
-- On NUMBER shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On IMP shift to state 29
-- On ID shift to state 30
-- On FALSE shift to state 32
-- On EX_TYPE shift to state 33
-- On EX shift to state 39
-- On EQV shift to state 59
-- On EQUAL shift to state 60
-- On CCARR shift to state 62
-- On AND shift to state 65
-- On ALL_TYPE shift to state 66
-- On ALL shift to state 72
-- On term_simple shift to state 79
-- On term shift to state 168
-- On qid shift to state 81
## Reductions:

State 168:
## Known stack suffix:
## DEFKW declared_or_defined_id nonempty_list(compact_arg) COLON typ DEF term
## LR(1) items:
body -> DEFKW declared_or_defined_id nonempty_list(compact_arg) COLON typ DEF term . DOT body [ EOF ENDPROOF ]
## Transitions:
-- On DOT shift to state 169
## Reductions:

State 169:
## Known stack suffix:
## DEFKW declared_or_defined_id nonempty_list(compact_arg) COLON typ DEF term DOT
## LR(1) items:
body -> DEFKW declared_or_defined_id nonempty_list(compact_arg) COLON typ DEF term DOT . body [ EOF ENDPROOF ]
## Transitions:
-- On QID shift to state 2
-- On LBRACK shift to state 114
-- On ID shift to state 125
-- On DEFKW shift to state 130
-- On goal shift to state 137
-- On env shift to state 138
-- On body shift to state 170
## Reductions:

State 170:
## Known stack suffix:
## DEFKW declared_or_defined_id nonempty_list(compact_arg) COLON typ DEF term DOT body
## LR(1) items:
body -> DEFKW declared_or_defined_id nonempty_list(compact_arg) COLON typ DEF term DOT body . [ EOF ENDPROOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production body -> DEFKW declared_or_defined_id nonempty_list(compact_arg) COLON typ DEF term DOT body

State 171:
## Known stack suffix:
## compact_arg
## LR(1) items:
nonempty_list(compact_arg) -> compact_arg . [ COLON ]
nonempty_list(compact_arg) -> compact_arg . nonempty_list(compact_arg) [ COLON ]
## Transitions:
-- On LPAREN shift to state 159
-- On nonempty_list(compact_arg) shift to state 172
-- On compact_arg shift to state 171
## Reductions:
-- On COLON reduce production nonempty_list(compact_arg) -> compact_arg

State 172:
## Known stack suffix:
## compact_arg nonempty_list(compact_arg)
## LR(1) items:
nonempty_list(compact_arg) -> compact_arg nonempty_list(compact_arg) . [ COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonempty_list(compact_arg) -> compact_arg nonempty_list(compact_arg)

State 173:
## Known stack suffix:
## ID COLON PROOF term DOT body
## LR(1) items:
body -> ID COLON PROOF term DOT body . [ EOF ENDPROOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production body -> ID COLON PROOF term DOT body

State 174:
## Known stack suffix:
## ID
## LR(1) items:
arrow_type -> ID . COLON TYPE ARROW arrow_type [ DOT ]
kind -> ID . COLON TYPE ARROW kind [ DOT ]
## Transitions:
-- On COLON shift to state 175
## Reductions:

State 175:
## Known stack suffix:
## ID COLON
## LR(1) items:
arrow_type -> ID COLON . TYPE ARROW arrow_type [ DOT ]
kind -> ID COLON . TYPE ARROW kind [ DOT ]
## Transitions:
-- On TYPE shift to state 176
## Reductions:

State 176:
## Known stack suffix:
## ID COLON TYPE
## LR(1) items:
arrow_type -> ID COLON TYPE . ARROW arrow_type [ DOT ]
kind -> ID COLON TYPE . ARROW kind [ DOT ]
## Transitions:
-- On ARROW shift to state 177
## Reductions:

State 177:
## Known stack suffix:
## ID COLON TYPE ARROW
## LR(1) items:
arrow_type -> ID COLON TYPE ARROW . arrow_type [ DOT ]
kind -> ID COLON TYPE ARROW . kind [ DOT ]
## Transitions:
-- On TYPE shift to state 4
-- On TERM shift to state 5
-- On PROP shift to state 20
-- On LPAREN shift to state 44
-- On ID shift to state 174
-- On typ shift to state 49
-- On kind shift to state 178
-- On complex_type shift to state 50
-- On arrow_type shift to state 53
## Reductions:

State 178:
## Known stack suffix:
## ID COLON TYPE ARROW kind
## LR(1) items:
kind -> ID COLON TYPE ARROW kind . [ DOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production kind -> ID COLON TYPE ARROW kind

State 179:
## Known stack suffix:
## ID COLON kind
## LR(1) items:
body -> ID COLON kind . DOT body [ EOF ENDPROOF ]
## Transitions:
-- On DOT shift to state 180
## Reductions:

State 180:
## Known stack suffix:
## ID COLON kind DOT
## LR(1) items:
body -> ID COLON kind DOT . body [ EOF ENDPROOF ]
## Transitions:
-- On QID shift to state 2
-- On LBRACK shift to state 114
-- On ID shift to state 125
-- On DEFKW shift to state 130
-- On goal shift to state 137
-- On env shift to state 138
-- On body shift to state 181
## Reductions:

State 181:
## Known stack suffix:
## ID COLON kind DOT body
## LR(1) items:
body -> ID COLON kind DOT body . [ EOF ENDPROOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production body -> ID COLON kind DOT body

State 182:
## Known stack suffix:
## ID COLON arrow_type
## LR(1) items:
body -> ID COLON arrow_type . DOT body [ EOF ENDPROOF ]
## Transitions:
-- On DOT shift to state 183
## Reductions:

State 183:
## Known stack suffix:
## ID COLON arrow_type DOT
## LR(1) items:
body -> ID COLON arrow_type DOT . body [ EOF ENDPROOF ]
## Transitions:
-- On QID shift to state 2
-- On LBRACK shift to state 114
-- On ID shift to state 125
-- On DEFKW shift to state 130
-- On goal shift to state 137
-- On env shift to state 138
-- On body shift to state 184
## Reductions:

State 184:
## Known stack suffix:
## ID COLON arrow_type DOT body
## LR(1) items:
body -> ID COLON arrow_type DOT body . [ EOF ENDPROOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production body -> ID COLON arrow_type DOT body

State 185:
## Known stack suffix:
## QID COLON PROOF term DOT body
## LR(1) items:
body -> QID COLON PROOF term DOT body . [ EOF ENDPROOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production body -> QID COLON PROOF term DOT body

State 186:
## Known stack suffix:
## QID COLON kind
## LR(1) items:
body -> QID COLON kind . DOT body [ EOF ENDPROOF ]
## Transitions:
-- On DOT shift to state 187
## Reductions:

State 187:
## Known stack suffix:
## QID COLON kind DOT
## LR(1) items:
body -> QID COLON kind DOT . body [ EOF ENDPROOF ]
## Transitions:
-- On QID shift to state 2
-- On LBRACK shift to state 114
-- On ID shift to state 125
-- On DEFKW shift to state 130
-- On goal shift to state 137
-- On env shift to state 138
-- On body shift to state 188
## Reductions:

State 188:
## Known stack suffix:
## QID COLON kind DOT body
## LR(1) items:
body -> QID COLON kind DOT body . [ EOF ENDPROOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production body -> QID COLON kind DOT body

State 189:
## Known stack suffix:
## QID COLON arrow_type
## LR(1) items:
body -> QID COLON arrow_type . DOT body [ EOF ENDPROOF ]
## Transitions:
-- On DOT shift to state 190
## Reductions:

State 190:
## Known stack suffix:
## QID COLON arrow_type DOT
## LR(1) items:
body -> QID COLON arrow_type DOT . body [ EOF ENDPROOF ]
## Transitions:
-- On QID shift to state 2
-- On LBRACK shift to state 114
-- On ID shift to state 125
-- On DEFKW shift to state 130
-- On goal shift to state 137
-- On env shift to state 138
-- On body shift to state 191
## Reductions:

State 191:
## Known stack suffix:
## QID COLON arrow_type DOT body
## LR(1) items:
body -> QID COLON arrow_type DOT body . [ EOF ENDPROOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production body -> QID COLON arrow_type DOT body

State 192:
## Known stack suffix:
## BEGINPROOF
## LR(1) items:
file -> BEGINPROOF . proofheaders EOF [ # ]
## Transitions:
-- On error shift to state 193
-- On QID shift to state 2
-- On LBRACK shift to state 114
-- On ID shift to state 125
-- On DEFKW shift to state 130
-- On BEGIN_VAR shift to state 194
-- On BEGIN_TYPEALIAS shift to state 199
-- On BEGIN_TY shift to state 204
-- On BEGIN_HYP shift to state 206
-- On BEGINNAME shift to state 212
-- On BEGINHEADER shift to state 213
-- On proofheaders shift to state 222
-- On goal shift to state 137
-- On env shift to state 138
-- On body shift to state 215
## Reductions:

State 193:
## Known stack suffix:
## error
## LR(1) items:
proofheaders -> error . [ EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production proofheaders -> error

State 194:
## Known stack suffix:
## BEGIN_VAR
## LR(1) items:
proofheaders -> BEGIN_VAR . ID COLON typ END_VAR proofheaders [ EOF ]
## Transitions:
-- On ID shift to state 195
## Reductions:

State 195:
## Known stack suffix:
## BEGIN_VAR ID
## LR(1) items:
proofheaders -> BEGIN_VAR ID . COLON typ END_VAR proofheaders [ EOF ]
## Transitions:
-- On COLON shift to state 196
## Reductions:

State 196:
## Known stack suffix:
## BEGIN_VAR ID COLON
## LR(1) items:
proofheaders -> BEGIN_VAR ID COLON . typ END_VAR proofheaders [ EOF ]
## Transitions:
-- On TERM shift to state 5
-- On PROP shift to state 20
-- On typ shift to state 197
## Reductions:

State 197:
## Known stack suffix:
## BEGIN_VAR ID COLON typ
## LR(1) items:
proofheaders -> BEGIN_VAR ID COLON typ . END_VAR proofheaders [ EOF ]
## Transitions:
-- On END_VAR shift to state 198
## Reductions:

State 198:
## Known stack suffix:
## BEGIN_VAR ID COLON typ END_VAR
## LR(1) items:
proofheaders -> BEGIN_VAR ID COLON typ END_VAR . proofheaders [ EOF ]
## Transitions:
-- On error shift to state 193
-- On QID shift to state 2
-- On LBRACK shift to state 114
-- On ID shift to state 125
-- On DEFKW shift to state 130
-- On BEGIN_VAR shift to state 194
-- On BEGIN_TYPEALIAS shift to state 199
-- On BEGIN_TY shift to state 204
-- On BEGIN_HYP shift to state 206
-- On BEGINNAME shift to state 212
-- On BEGINHEADER shift to state 213
-- On proofheaders shift to state 221
-- On goal shift to state 137
-- On env shift to state 138
-- On body shift to state 215
## Reductions:

State 199:
## Known stack suffix:
## BEGIN_TYPEALIAS
## LR(1) items:
proofheaders -> BEGIN_TYPEALIAS . ID DEF type_simple END_TYPEALIAS proofheaders [ EOF ]
## Transitions:
-- On ID shift to state 200
## Reductions:

State 200:
## Known stack suffix:
## BEGIN_TYPEALIAS ID
## LR(1) items:
proofheaders -> BEGIN_TYPEALIAS ID . DEF type_simple END_TYPEALIAS proofheaders [ EOF ]
## Transitions:
-- On DEF shift to state 201
## Reductions:

State 201:
## Known stack suffix:
## BEGIN_TYPEALIAS ID DEF
## LR(1) items:
proofheaders -> BEGIN_TYPEALIAS ID DEF . type_simple END_TYPEALIAS proofheaders [ EOF ]
## Transitions:
-- On QID shift to state 6
-- On LPAREN shift to state 7
-- On ID shift to state 8
-- On type_simple shift to state 202
-- On type_qid shift to state 12
## Reductions:

State 202:
## Known stack suffix:
## BEGIN_TYPEALIAS ID DEF type_simple
## LR(1) items:
proofheaders -> BEGIN_TYPEALIAS ID DEF type_simple . END_TYPEALIAS proofheaders [ EOF ]
## Transitions:
-- On END_TYPEALIAS shift to state 203
## Reductions:

State 203:
## Known stack suffix:
## BEGIN_TYPEALIAS ID DEF type_simple END_TYPEALIAS
## LR(1) items:
proofheaders -> BEGIN_TYPEALIAS ID DEF type_simple END_TYPEALIAS . proofheaders [ EOF ]
## Transitions:
-- On error shift to state 193
-- On QID shift to state 2
-- On LBRACK shift to state 114
-- On ID shift to state 125
-- On DEFKW shift to state 130
-- On BEGIN_VAR shift to state 194
-- On BEGIN_TYPEALIAS shift to state 199
-- On BEGIN_TY shift to state 204
-- On BEGIN_HYP shift to state 206
-- On BEGINNAME shift to state 212
-- On BEGINHEADER shift to state 213
-- On proofheaders shift to state 220
-- On goal shift to state 137
-- On env shift to state 138
-- On body shift to state 215
## Reductions:

State 204:
## Known stack suffix:
## BEGIN_TY
## LR(1) items:
proofheaders -> BEGIN_TY . ID proofheaders [ EOF ]
## Transitions:
-- On ID shift to state 205
## Reductions:

State 205:
## Known stack suffix:
## BEGIN_TY ID
## LR(1) items:
proofheaders -> BEGIN_TY ID . proofheaders [ EOF ]
## Transitions:
-- On error shift to state 193
-- On QID shift to state 2
-- On LBRACK shift to state 114
-- On ID shift to state 125
-- On DEFKW shift to state 130
-- On BEGIN_VAR shift to state 194
-- On BEGIN_TYPEALIAS shift to state 199
-- On BEGIN_TY shift to state 204
-- On BEGIN_HYP shift to state 206
-- On BEGINNAME shift to state 212
-- On BEGINHEADER shift to state 213
-- On proofheaders shift to state 219
-- On goal shift to state 137
-- On env shift to state 138
-- On body shift to state 215
## Reductions:

State 206:
## Known stack suffix:
## BEGIN_HYP
## LR(1) items:
proofheaders -> BEGIN_HYP . ID COLON PROOF term_simple END_HYP proofheaders [ EOF ]
## Transitions:
-- On ID shift to state 207
## Reductions:

State 207:
## Known stack suffix:
## BEGIN_HYP ID
## LR(1) items:
proofheaders -> BEGIN_HYP ID . COLON PROOF term_simple END_HYP proofheaders [ EOF ]
## Transitions:
-- On COLON shift to state 208
## Reductions:

State 208:
## Known stack suffix:
## BEGIN_HYP ID COLON
## LR(1) items:
proofheaders -> BEGIN_HYP ID COLON . PROOF term_simple END_HYP proofheaders [ EOF ]
## Transitions:
-- On PROOF shift to state 209
## Reductions:

State 209:
## Known stack suffix:
## BEGIN_HYP ID COLON PROOF
## LR(1) items:
proofheaders -> BEGIN_HYP ID COLON PROOF . term_simple END_HYP proofheaders [ EOF ]
## Transitions:
-- On TRUE shift to state 23
-- On QID shift to state 24
-- On OR shift to state 25
-- On NUMBER shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On IMP shift to state 29
-- On ID shift to state 30
-- On FALSE shift to state 32
-- On EX_TYPE shift to state 33
-- On EX shift to state 39
-- On EQV shift to state 59
-- On EQUAL shift to state 60
-- On CCARR shift to state 62
-- On AND shift to state 65
-- On ALL_TYPE shift to state 66
-- On ALL shift to state 72
-- On term_simple shift to state 210
-- On qid shift to state 81
## Reductions:

State 210:
## Known stack suffix:
## BEGIN_HYP ID COLON PROOF term_simple
## LR(1) items:
proofheaders -> BEGIN_HYP ID COLON PROOF term_simple . END_HYP proofheaders [ EOF ]
## Transitions:
-- On END_HYP shift to state 211
## Reductions:

State 211:
## Known stack suffix:
## BEGIN_HYP ID COLON PROOF term_simple END_HYP
## LR(1) items:
proofheaders -> BEGIN_HYP ID COLON PROOF term_simple END_HYP . proofheaders [ EOF ]
## Transitions:
-- On error shift to state 193
-- On QID shift to state 2
-- On LBRACK shift to state 114
-- On ID shift to state 125
-- On DEFKW shift to state 130
-- On BEGIN_VAR shift to state 194
-- On BEGIN_TYPEALIAS shift to state 199
-- On BEGIN_TY shift to state 204
-- On BEGIN_HYP shift to state 206
-- On BEGINNAME shift to state 212
-- On BEGINHEADER shift to state 213
-- On proofheaders shift to state 218
-- On goal shift to state 137
-- On env shift to state 138
-- On body shift to state 215
## Reductions:

State 212:
## Known stack suffix:
## BEGINNAME
## LR(1) items:
proofheaders -> BEGINNAME . proofheaders [ EOF ]
## Transitions:
-- On error shift to state 193
-- On QID shift to state 2
-- On LBRACK shift to state 114
-- On ID shift to state 125
-- On DEFKW shift to state 130
-- On BEGIN_VAR shift to state 194
-- On BEGIN_TYPEALIAS shift to state 199
-- On BEGIN_TY shift to state 204
-- On BEGIN_HYP shift to state 206
-- On BEGINNAME shift to state 212
-- On BEGINHEADER shift to state 213
-- On proofheaders shift to state 217
-- On goal shift to state 137
-- On env shift to state 138
-- On body shift to state 215
## Reductions:

State 213:
## Known stack suffix:
## BEGINHEADER
## LR(1) items:
proofheaders -> BEGINHEADER . proofheaders [ EOF ]
## Transitions:
-- On error shift to state 193
-- On QID shift to state 2
-- On LBRACK shift to state 114
-- On ID shift to state 125
-- On DEFKW shift to state 130
-- On BEGIN_VAR shift to state 194
-- On BEGIN_TYPEALIAS shift to state 199
-- On BEGIN_TY shift to state 204
-- On BEGIN_HYP shift to state 206
-- On BEGINNAME shift to state 212
-- On BEGINHEADER shift to state 213
-- On proofheaders shift to state 214
-- On goal shift to state 137
-- On env shift to state 138
-- On body shift to state 215
## Reductions:

State 214:
## Known stack suffix:
## BEGINHEADER proofheaders
## LR(1) items:
proofheaders -> BEGINHEADER proofheaders . [ EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production proofheaders -> BEGINHEADER proofheaders

State 215:
## Known stack suffix:
## body
## LR(1) items:
proofheaders -> body . ENDPROOF [ EOF ]
## Transitions:
-- On ENDPROOF shift to state 216
## Reductions:

State 216:
## Known stack suffix:
## body ENDPROOF
## LR(1) items:
proofheaders -> body ENDPROOF . [ EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production proofheaders -> body ENDPROOF

State 217:
## Known stack suffix:
## BEGINNAME proofheaders
## LR(1) items:
proofheaders -> BEGINNAME proofheaders . [ EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production proofheaders -> BEGINNAME proofheaders

State 218:
## Known stack suffix:
## BEGIN_HYP ID COLON PROOF term_simple END_HYP proofheaders
## LR(1) items:
proofheaders -> BEGIN_HYP ID COLON PROOF term_simple END_HYP proofheaders . [ EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production proofheaders -> BEGIN_HYP ID COLON PROOF term_simple END_HYP proofheaders

State 219:
## Known stack suffix:
## BEGIN_TY ID proofheaders
## LR(1) items:
proofheaders -> BEGIN_TY ID proofheaders . [ EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production proofheaders -> BEGIN_TY ID proofheaders

State 220:
## Known stack suffix:
## BEGIN_TYPEALIAS ID DEF type_simple END_TYPEALIAS proofheaders
## LR(1) items:
proofheaders -> BEGIN_TYPEALIAS ID DEF type_simple END_TYPEALIAS proofheaders . [ EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production proofheaders -> BEGIN_TYPEALIAS ID DEF type_simple END_TYPEALIAS proofheaders

State 221:
## Known stack suffix:
## BEGIN_VAR ID COLON typ END_VAR proofheaders
## LR(1) items:
proofheaders -> BEGIN_VAR ID COLON typ END_VAR proofheaders . [ EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production proofheaders -> BEGIN_VAR ID COLON typ END_VAR proofheaders

State 222:
## Known stack suffix:
## BEGINPROOF proofheaders
## LR(1) items:
file -> BEGINPROOF proofheaders . EOF [ # ]
## Transitions:
-- On EOF shift to state 223
## Reductions:

State 223:
## Known stack suffix:
## BEGINPROOF proofheaders EOF
## LR(1) items:
file -> BEGINPROOF proofheaders EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production file -> BEGINPROOF proofheaders EOF

State 224:
## Known stack suffix:
## file
## LR(1) items:
file' -> file . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept file

State 225:
## Known stack suffix:
## body
## LR(1) items:
file -> body . EOF [ # ]
## Transitions:
-- On EOF shift to state 226
## Reductions:

State 226:
## Known stack suffix:
## body EOF
## LR(1) items:
file -> body EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production file -> body EOF

