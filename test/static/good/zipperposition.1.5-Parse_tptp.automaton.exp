State 0:
parse_answer_tuple' -> . parse_answer_tuple [ # ]
-- On LEFT_BRACKET shift to state 1
-- On parse_answer_tuple shift to state 220
-- On answer_tuples shift to state 221

State 1:
answer_tuples -> LEFT_BRACKET . separated_nonempty_list(VLINE,answer_tuple) RIGHT_BRACKET [ EOI ]
-- On UNDERSCORE shift to state 2
-- On LEFT_BRACKET shift to state 3
-- On separated_nonempty_list(VLINE,answer_tuple) shift to state 215
-- On answer_tuple shift to state 217

State 2:
answer_tuple -> UNDERSCORE . [ VLINE RIGHT_BRACKET ]
-- On VLINE reduce production answer_tuple -> UNDERSCORE
-- On RIGHT_BRACKET reduce production answer_tuple -> UNDERSCORE

State 3:
answer_tuple -> LEFT_BRACKET . separated_nonempty_list(COMMA,term) RIGHT_BRACKET [ VLINE RIGHT_BRACKET ]
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On LOWER_WORD shift to state 9
-- On INTEGER shift to state 10
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On variable shift to state 77
-- On term shift to state 210
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On separated_nonempty_list(COMMA,term) shift to state 213
-- On plain_term shift to state 95
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_defined_word shift to state 119

State 4:
atomic_defined_word -> WILDCARD . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_PAREN LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT ARROW AND ]
-- On XOR reduce production atomic_defined_word -> WILDCARD
-- On VLINE reduce production atomic_defined_word -> WILDCARD
-- On RIGHT_PAREN reduce production atomic_defined_word -> WILDCARD
-- On RIGHT_BRACKET reduce production atomic_defined_word -> WILDCARD
-- On NOT_EQUAL reduce production atomic_defined_word -> WILDCARD
-- On NOTVLINE reduce production atomic_defined_word -> WILDCARD
-- On NOTAND reduce production atomic_defined_word -> WILDCARD
-- On LEFT_PAREN reduce production atomic_defined_word -> WILDCARD
-- On LEFT_IMPLY reduce production atomic_defined_word -> WILDCARD
-- On IMPLY reduce production atomic_defined_word -> WILDCARD
-- On EQUIV reduce production atomic_defined_word -> WILDCARD
-- On EQUAL reduce production atomic_defined_word -> WILDCARD
-- On EOI reduce production atomic_defined_word -> WILDCARD
-- On COMMA reduce production atomic_defined_word -> WILDCARD
-- On AT reduce production atomic_defined_word -> WILDCARD
-- On ARROW reduce production atomic_defined_word -> WILDCARD
-- On AND reduce production atomic_defined_word -> WILDCARD

State 5:
variable -> UPPER_WORD . [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT ARROW AND ]
-- On XOR reduce production variable -> UPPER_WORD
-- On VLINE reduce production variable -> UPPER_WORD
-- On STAR reduce production variable -> UPPER_WORD
-- On RIGHT_PAREN reduce production variable -> UPPER_WORD
-- On RIGHT_BRACKET reduce production variable -> UPPER_WORD
-- On NOT_EQUAL reduce production variable -> UPPER_WORD
-- On NOTVLINE reduce production variable -> UPPER_WORD
-- On NOTAND reduce production variable -> UPPER_WORD
-- On LEFT_IMPLY reduce production variable -> UPPER_WORD
-- On IMPLY reduce production variable -> UPPER_WORD
-- On EQUIV reduce production variable -> UPPER_WORD
-- On EQUAL reduce production variable -> UPPER_WORD
-- On EOI reduce production variable -> UPPER_WORD
-- On COMMA reduce production variable -> UPPER_WORD
-- On AT reduce production variable -> UPPER_WORD
-- On ARROW reduce production variable -> UPPER_WORD
-- On AND reduce production variable -> UPPER_WORD

State 6:
atomic_word -> SINGLE_QUOTED . [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_PAREN LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA COLUMN AT ARROW AND ]
-- On XOR reduce production atomic_word -> SINGLE_QUOTED
-- On VLINE reduce production atomic_word -> SINGLE_QUOTED
-- On STAR reduce production atomic_word -> SINGLE_QUOTED
-- On RIGHT_PAREN reduce production atomic_word -> SINGLE_QUOTED
-- On RIGHT_BRACKET reduce production atomic_word -> SINGLE_QUOTED
-- On NOT_EQUAL reduce production atomic_word -> SINGLE_QUOTED
-- On NOTVLINE reduce production atomic_word -> SINGLE_QUOTED
-- On NOTAND reduce production atomic_word -> SINGLE_QUOTED
-- On LEFT_PAREN reduce production atomic_word -> SINGLE_QUOTED
-- On LEFT_IMPLY reduce production atomic_word -> SINGLE_QUOTED
-- On IMPLY reduce production atomic_word -> SINGLE_QUOTED
-- On EQUIV reduce production atomic_word -> SINGLE_QUOTED
-- On EQUAL reduce production atomic_word -> SINGLE_QUOTED
-- On EOI reduce production atomic_word -> SINGLE_QUOTED
-- On COMMA reduce production atomic_word -> SINGLE_QUOTED
-- On COLUMN reduce production atomic_word -> SINGLE_QUOTED
-- On AT reduce production atomic_word -> SINGLE_QUOTED
-- On ARROW reduce production atomic_word -> SINGLE_QUOTED
-- On AND reduce production atomic_word -> SINGLE_QUOTED

State 7:
defined_atom -> REAL . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT ARROW AND ]
-- On XOR reduce production defined_atom -> REAL
-- On VLINE reduce production defined_atom -> REAL
-- On RIGHT_PAREN reduce production defined_atom -> REAL
-- On RIGHT_BRACKET reduce production defined_atom -> REAL
-- On NOT_EQUAL reduce production defined_atom -> REAL
-- On NOTVLINE reduce production defined_atom -> REAL
-- On NOTAND reduce production defined_atom -> REAL
-- On LEFT_IMPLY reduce production defined_atom -> REAL
-- On IMPLY reduce production defined_atom -> REAL
-- On EQUIV reduce production defined_atom -> REAL
-- On EQUAL reduce production defined_atom -> REAL
-- On EOI reduce production defined_atom -> REAL
-- On COMMA reduce production defined_atom -> REAL
-- On AT reduce production defined_atom -> REAL
-- On ARROW reduce production defined_atom -> REAL
-- On AND reduce production defined_atom -> REAL

State 8:
defined_atom -> RATIONAL . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT ARROW AND ]
-- On XOR reduce production defined_atom -> RATIONAL
-- On VLINE reduce production defined_atom -> RATIONAL
-- On RIGHT_PAREN reduce production defined_atom -> RATIONAL
-- On RIGHT_BRACKET reduce production defined_atom -> RATIONAL
-- On NOT_EQUAL reduce production defined_atom -> RATIONAL
-- On NOTVLINE reduce production defined_atom -> RATIONAL
-- On NOTAND reduce production defined_atom -> RATIONAL
-- On LEFT_IMPLY reduce production defined_atom -> RATIONAL
-- On IMPLY reduce production defined_atom -> RATIONAL
-- On EQUIV reduce production defined_atom -> RATIONAL
-- On EQUAL reduce production defined_atom -> RATIONAL
-- On EOI reduce production defined_atom -> RATIONAL
-- On COMMA reduce production defined_atom -> RATIONAL
-- On AT reduce production defined_atom -> RATIONAL
-- On ARROW reduce production defined_atom -> RATIONAL
-- On AND reduce production defined_atom -> RATIONAL

State 9:
atomic_word -> LOWER_WORD . [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_PAREN LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA COLUMN AT ARROW AND ]
-- On XOR reduce production atomic_word -> LOWER_WORD
-- On VLINE reduce production atomic_word -> LOWER_WORD
-- On STAR reduce production atomic_word -> LOWER_WORD
-- On RIGHT_PAREN reduce production atomic_word -> LOWER_WORD
-- On RIGHT_BRACKET reduce production atomic_word -> LOWER_WORD
-- On NOT_EQUAL reduce production atomic_word -> LOWER_WORD
-- On NOTVLINE reduce production atomic_word -> LOWER_WORD
-- On NOTAND reduce production atomic_word -> LOWER_WORD
-- On LEFT_PAREN reduce production atomic_word -> LOWER_WORD
-- On LEFT_IMPLY reduce production atomic_word -> LOWER_WORD
-- On IMPLY reduce production atomic_word -> LOWER_WORD
-- On EQUIV reduce production atomic_word -> LOWER_WORD
-- On EQUAL reduce production atomic_word -> LOWER_WORD
-- On EOI reduce production atomic_word -> LOWER_WORD
-- On COMMA reduce production atomic_word -> LOWER_WORD
-- On COLUMN reduce production atomic_word -> LOWER_WORD
-- On AT reduce production atomic_word -> LOWER_WORD
-- On ARROW reduce production atomic_word -> LOWER_WORD
-- On AND reduce production atomic_word -> LOWER_WORD

State 10:
defined_atom -> INTEGER . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT ARROW AND ]
-- On XOR reduce production defined_atom -> INTEGER
-- On VLINE reduce production defined_atom -> INTEGER
-- On RIGHT_PAREN reduce production defined_atom -> INTEGER
-- On RIGHT_BRACKET reduce production defined_atom -> INTEGER
-- On NOT_EQUAL reduce production defined_atom -> INTEGER
-- On NOTVLINE reduce production defined_atom -> INTEGER
-- On NOTAND reduce production defined_atom -> INTEGER
-- On LEFT_IMPLY reduce production defined_atom -> INTEGER
-- On IMPLY reduce production defined_atom -> INTEGER
-- On EQUIV reduce production defined_atom -> INTEGER
-- On EQUAL reduce production defined_atom -> INTEGER
-- On EOI reduce production defined_atom -> INTEGER
-- On COMMA reduce production defined_atom -> INTEGER
-- On AT reduce production defined_atom -> INTEGER
-- On ARROW reduce production defined_atom -> INTEGER
-- On AND reduce production defined_atom -> INTEGER

State 11:
defined_plain_term -> DOLLAR_WORD . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT ARROW AND ]
defined_plain_term -> DOLLAR_WORD . LEFT_PAREN term_arguments RIGHT_PAREN [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT ARROW AND ]
-- On LEFT_PAREN shift to state 12
-- On XOR reduce production defined_plain_term -> DOLLAR_WORD
-- On VLINE reduce production defined_plain_term -> DOLLAR_WORD
-- On RIGHT_PAREN reduce production defined_plain_term -> DOLLAR_WORD
-- On RIGHT_BRACKET reduce production defined_plain_term -> DOLLAR_WORD
-- On NOT_EQUAL reduce production defined_plain_term -> DOLLAR_WORD
-- On NOTVLINE reduce production defined_plain_term -> DOLLAR_WORD
-- On NOTAND reduce production defined_plain_term -> DOLLAR_WORD
-- On LEFT_IMPLY reduce production defined_plain_term -> DOLLAR_WORD
-- On IMPLY reduce production defined_plain_term -> DOLLAR_WORD
-- On EQUIV reduce production defined_plain_term -> DOLLAR_WORD
-- On EQUAL reduce production defined_plain_term -> DOLLAR_WORD
-- On EOI reduce production defined_plain_term -> DOLLAR_WORD
-- On COMMA reduce production defined_plain_term -> DOLLAR_WORD
-- On AT reduce production defined_plain_term -> DOLLAR_WORD
-- On ARROW reduce production defined_plain_term -> DOLLAR_WORD
-- On AND reduce production defined_plain_term -> DOLLAR_WORD

State 12:
defined_plain_term -> DOLLAR_WORD LEFT_PAREN . term_arguments RIGHT_PAREN [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT ARROW AND ]
-- On XOR shift to state 13
-- On WILDCARD shift to state 4
-- On VLINE shift to state 18
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOTVLINE shift to state 88
-- On NOTAND shift to state 98
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 17
-- On LEFT_IMPLY shift to state 108
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On IMPLY shift to state 120
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On EQUIV shift to state 125
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On ARROW shift to state 130
-- On AND shift to state 135
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 140
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 143
-- On term_arguments shift to state 208
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On separated_nonempty_list(COMMA,formula) shift to state 170
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On or_formula shift to state 171
-- On nonassoc_binary_formula shift to state 172
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On formula shift to state 173
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On binary_formula shift to state 176
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119
-- On assoc_binary_formula_aux(VLINE) shift to state 177
-- On assoc_binary_formula_aux(AND) shift to state 178
-- On assoc_binary_formula shift to state 179
-- On app_formula shift to state 180
-- On and_formula shift to state 183

State 13:
nonassoc_binary_formula -> XOR . AT unary_formula AT unary_formula [ RIGHT_PAREN EOI COMMA ]
-- On AT shift to state 14

State 14:
nonassoc_binary_formula -> XOR AT . unary_formula AT unary_formula [ RIGHT_PAREN EOI COMMA ]
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 17
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 79
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 205
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119

State 15:
atomic_formula -> TRUE . [ XOR VLINE RIGHT_PAREN NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT ARROW AND ]
-- On XOR reduce production atomic_formula -> TRUE
-- On VLINE reduce production atomic_formula -> TRUE
-- On RIGHT_PAREN reduce production atomic_formula -> TRUE
-- On NOT_EQUAL reduce production atomic_formula -> TRUE
-- On NOTVLINE reduce production atomic_formula -> TRUE
-- On NOTAND reduce production atomic_formula -> TRUE
-- On LEFT_IMPLY reduce production atomic_formula -> TRUE
-- On IMPLY reduce production atomic_formula -> TRUE
-- On EQUIV reduce production atomic_formula -> TRUE
-- On EQUAL reduce production atomic_formula -> TRUE
-- On EOI reduce production atomic_formula -> TRUE
-- On COMMA reduce production atomic_formula -> TRUE
-- On AT reduce production atomic_formula -> TRUE
-- On ARROW reduce production atomic_formula -> TRUE
-- On AND reduce production atomic_formula -> TRUE

State 16:
unary_formula -> NOT . AT unary_formula [ XOR VLINE RIGHT_PAREN NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA AT ARROW AND ]
unary_formula -> NOT . unary_formula [ XOR VLINE RIGHT_PAREN NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA AT ARROW AND ]
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 17
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On AT shift to state 202
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 79
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 204
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119

State 17:
unitary_atomic_formula -> LEFT_PAREN . formula RIGHT_PAREN [ XOR VLINE RIGHT_PAREN NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT ARROW AND ]
-- On XOR shift to state 13
-- On WILDCARD shift to state 4
-- On VLINE shift to state 18
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOTVLINE shift to state 88
-- On NOTAND shift to state 98
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 17
-- On LEFT_IMPLY shift to state 108
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On IMPLY shift to state 120
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On EQUIV shift to state 125
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On ARROW shift to state 130
-- On AND shift to state 135
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 140
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 143
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On or_formula shift to state 171
-- On nonassoc_binary_formula shift to state 172
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On formula shift to state 200
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On binary_formula shift to state 176
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119
-- On assoc_binary_formula_aux(VLINE) shift to state 177
-- On assoc_binary_formula_aux(AND) shift to state 178
-- On assoc_binary_formula shift to state 179
-- On app_formula shift to state 180
-- On and_formula shift to state 183

State 18:
nonassoc_binary_formula -> VLINE . AT unary_formula AT unary_formula [ RIGHT_PAREN EOI COMMA ]
-- On AT shift to state 19

State 19:
nonassoc_binary_formula -> VLINE AT . unary_formula AT unary_formula [ RIGHT_PAREN EOI COMMA ]
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 17
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 79
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 197
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119

State 20:
quantified_formula -> LAMBDA . LEFT_BRACKET typed_vars RIGHT_BRACKET COLUMN unary_formula [ XOR VLINE RIGHT_PAREN NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA AT ARROW AND ]
-- On LEFT_BRACKET shift to state 21

State 21:
quantified_formula -> LAMBDA LEFT_BRACKET . typed_vars RIGHT_BRACKET COLUMN unary_formula [ XOR VLINE RIGHT_PAREN NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA AT ARROW AND ]
-- On UPPER_WORD shift to state 22
-- On typed_vars shift to state 59
-- On typed_var shift to state 191
-- On separated_nonempty_list(COMMA,typed_var) shift to state 194

State 22:
typed_var -> UPPER_WORD . COLUMN tff_type [ RIGHT_BRACKET COMMA ]
typed_var -> UPPER_WORD . [ RIGHT_BRACKET COMMA ]
-- On COLUMN shift to state 23
-- On RIGHT_BRACKET reduce production typed_var -> UPPER_WORD
-- On COMMA reduce production typed_var -> UPPER_WORD

State 23:
typed_var -> UPPER_WORD COLUMN . tff_type [ RIGHT_BRACKET COMMA ]
-- On WILDCARD shift to state 24
-- On UPPER_WORD shift to state 5
-- On TYPE_TY shift to state 25
-- On SINGLE_QUOTED shift to state 6
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 26
-- On DOLLAR_WORD shift to state 28
-- On variable shift to state 29
-- On type_const shift to state 30
-- On tff_type shift to state 58
-- On tff_atomic_type shift to state 34
-- On tff_app_type shift to state 35
-- On defined_ty shift to state 38
-- On atomic_word shift to state 39

State 24:
type_const -> WILDCARD . [ STAR RIGHT_PAREN RIGHT_BRACKET LEFT_PAREN COMMA AT ARROW ]
-- On STAR reduce production type_const -> WILDCARD
-- On RIGHT_PAREN reduce production type_const -> WILDCARD
-- On RIGHT_BRACKET reduce production type_const -> WILDCARD
-- On LEFT_PAREN reduce production type_const -> WILDCARD
-- On COMMA reduce production type_const -> WILDCARD
-- On AT reduce production type_const -> WILDCARD
-- On ARROW reduce production type_const -> WILDCARD

State 25:
tff_atomic_type -> TYPE_TY . [ STAR RIGHT_PAREN RIGHT_BRACKET COMMA AT ARROW ]
-- On STAR reduce production tff_atomic_type -> TYPE_TY
-- On RIGHT_PAREN reduce production tff_atomic_type -> TYPE_TY
-- On RIGHT_BRACKET reduce production tff_atomic_type -> TYPE_TY
-- On COMMA reduce production tff_atomic_type -> TYPE_TY
-- On AT reduce production tff_atomic_type -> TYPE_TY
-- On ARROW reduce production tff_atomic_type -> TYPE_TY

State 26:
tff_atomic_type -> LEFT_PAREN . tff_toplevel_type RIGHT_PAREN [ STAR RIGHT_PAREN RIGHT_BRACKET COMMA AT ARROW ]
-- On WILDCARD shift to state 24
-- On UPPER_WORD shift to state 5
-- On TYPE_TY shift to state 25
-- On SINGLE_QUOTED shift to state 6
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 27
-- On DOLLAR_WORD shift to state 28
-- On variable shift to state 29
-- On type_const shift to state 30
-- On tff_type shift to state 45
-- On tff_toplevel_type shift to state 50
-- On tff_atomic_type shift to state 34
-- On tff_app_type shift to state 35
-- On defined_ty shift to state 38
-- On atomic_word shift to state 39

State 27:
tff_atomic_type -> LEFT_PAREN . tff_toplevel_type RIGHT_PAREN [ STAR RIGHT_PAREN COMMA AT ARROW ]
tff_toplevel_type -> LEFT_PAREN . tff_ty_star_list RIGHT_PAREN ARROW tff_app_type [ RIGHT_PAREN COMMA ]
-- On WILDCARD shift to state 24
-- On UPPER_WORD shift to state 5
-- On TYPE_TY shift to state 25
-- On SINGLE_QUOTED shift to state 6
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 27
-- On DOLLAR_WORD shift to state 28
-- On variable shift to state 29
-- On type_const shift to state 30
-- On tff_type shift to state 45
-- On tff_ty_star_list shift to state 46
-- On tff_toplevel_type shift to state 50
-- On tff_atomic_type shift to state 34
-- On tff_app_type shift to state 52
-- On defined_ty shift to state 38
-- On atomic_word shift to state 39

State 28:
defined_ty -> DOLLAR_WORD . [ STAR RIGHT_PAREN RIGHT_BRACKET COMMA AT ARROW ]
-- On STAR reduce production defined_ty -> DOLLAR_WORD
-- On RIGHT_PAREN reduce production defined_ty -> DOLLAR_WORD
-- On RIGHT_BRACKET reduce production defined_ty -> DOLLAR_WORD
-- On COMMA reduce production defined_ty -> DOLLAR_WORD
-- On AT reduce production defined_ty -> DOLLAR_WORD
-- On ARROW reduce production defined_ty -> DOLLAR_WORD

State 29:
tff_atomic_type -> variable . [ STAR RIGHT_PAREN RIGHT_BRACKET COMMA AT ARROW ]
-- On STAR reduce production tff_atomic_type -> variable
-- On RIGHT_PAREN reduce production tff_atomic_type -> variable
-- On RIGHT_BRACKET reduce production tff_atomic_type -> variable
-- On COMMA reduce production tff_atomic_type -> variable
-- On AT reduce production tff_atomic_type -> variable
-- On ARROW reduce production tff_atomic_type -> variable

State 30:
tff_atomic_type -> type_const . [ STAR RIGHT_PAREN RIGHT_BRACKET COMMA AT ARROW ]
tff_atomic_type -> type_const . LEFT_PAREN separated_nonempty_list(COMMA,tff_type) RIGHT_PAREN [ STAR RIGHT_PAREN RIGHT_BRACKET COMMA AT ARROW ]
-- On LEFT_PAREN shift to state 31
-- On STAR reduce production tff_atomic_type -> type_const
-- On RIGHT_PAREN reduce production tff_atomic_type -> type_const
-- On RIGHT_BRACKET reduce production tff_atomic_type -> type_const
-- On COMMA reduce production tff_atomic_type -> type_const
-- On AT reduce production tff_atomic_type -> type_const
-- On ARROW reduce production tff_atomic_type -> type_const

State 31:
tff_atomic_type -> type_const LEFT_PAREN . separated_nonempty_list(COMMA,tff_type) RIGHT_PAREN [ STAR RIGHT_PAREN RIGHT_BRACKET COMMA AT ARROW ]
-- On WILDCARD shift to state 24
-- On UPPER_WORD shift to state 5
-- On TYPE_TY shift to state 25
-- On SINGLE_QUOTED shift to state 6
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 26
-- On DOLLAR_WORD shift to state 28
-- On variable shift to state 29
-- On type_const shift to state 30
-- On tff_type shift to state 32
-- On tff_atomic_type shift to state 34
-- On tff_app_type shift to state 35
-- On separated_nonempty_list(COMMA,tff_type) shift to state 43
-- On defined_ty shift to state 38
-- On atomic_word shift to state 39

State 32:
separated_nonempty_list(COMMA,tff_type) -> tff_type . [ RIGHT_PAREN ]
separated_nonempty_list(COMMA,tff_type) -> tff_type . COMMA separated_nonempty_list(COMMA,tff_type) [ RIGHT_PAREN ]
-- On COMMA shift to state 33
-- On RIGHT_PAREN reduce production separated_nonempty_list(COMMA,tff_type) -> tff_type

State 33:
separated_nonempty_list(COMMA,tff_type) -> tff_type COMMA . separated_nonempty_list(COMMA,tff_type) [ RIGHT_PAREN ]
-- On WILDCARD shift to state 24
-- On UPPER_WORD shift to state 5
-- On TYPE_TY shift to state 25
-- On SINGLE_QUOTED shift to state 6
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 26
-- On DOLLAR_WORD shift to state 28
-- On variable shift to state 29
-- On type_const shift to state 30
-- On tff_type shift to state 32
-- On tff_atomic_type shift to state 34
-- On tff_app_type shift to state 35
-- On separated_nonempty_list(COMMA,tff_type) shift to state 42
-- On defined_ty shift to state 38
-- On atomic_word shift to state 39

State 34:
tff_app_type -> tff_atomic_type . [ STAR RIGHT_PAREN RIGHT_BRACKET COMMA AT ARROW ]
-- On STAR reduce production tff_app_type -> tff_atomic_type
-- On RIGHT_PAREN reduce production tff_app_type -> tff_atomic_type
-- On RIGHT_BRACKET reduce production tff_app_type -> tff_atomic_type
-- On COMMA reduce production tff_app_type -> tff_atomic_type
-- On AT reduce production tff_app_type -> tff_atomic_type
-- On ARROW reduce production tff_app_type -> tff_atomic_type

State 35:
tff_app_type -> tff_app_type . AT tff_atomic_type [ RIGHT_PAREN RIGHT_BRACKET COMMA AT ARROW ]
tff_type -> tff_app_type . [ RIGHT_PAREN RIGHT_BRACKET COMMA ]
tff_type -> tff_app_type . ARROW tff_type [ RIGHT_PAREN RIGHT_BRACKET COMMA ]
-- On AT shift to state 36
-- On ARROW shift to state 40
-- On RIGHT_PAREN reduce production tff_type -> tff_app_type
-- On RIGHT_BRACKET reduce production tff_type -> tff_app_type
-- On COMMA reduce production tff_type -> tff_app_type

State 36:
tff_app_type -> tff_app_type AT . tff_atomic_type [ STAR RIGHT_PAREN RIGHT_BRACKET COMMA AT ARROW ]
-- On WILDCARD shift to state 24
-- On UPPER_WORD shift to state 5
-- On TYPE_TY shift to state 25
-- On SINGLE_QUOTED shift to state 6
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 26
-- On DOLLAR_WORD shift to state 28
-- On variable shift to state 29
-- On type_const shift to state 30
-- On tff_atomic_type shift to state 37
-- On defined_ty shift to state 38
-- On atomic_word shift to state 39

State 37:
tff_app_type -> tff_app_type AT tff_atomic_type . [ STAR RIGHT_PAREN RIGHT_BRACKET COMMA AT ARROW ]
-- On STAR reduce production tff_app_type -> tff_app_type AT tff_atomic_type
-- On RIGHT_PAREN reduce production tff_app_type -> tff_app_type AT tff_atomic_type
-- On RIGHT_BRACKET reduce production tff_app_type -> tff_app_type AT tff_atomic_type
-- On COMMA reduce production tff_app_type -> tff_app_type AT tff_atomic_type
-- On AT reduce production tff_app_type -> tff_app_type AT tff_atomic_type
-- On ARROW reduce production tff_app_type -> tff_app_type AT tff_atomic_type

State 38:
tff_atomic_type -> defined_ty . [ STAR RIGHT_PAREN RIGHT_BRACKET COMMA AT ARROW ]
-- On STAR reduce production tff_atomic_type -> defined_ty
-- On RIGHT_PAREN reduce production tff_atomic_type -> defined_ty
-- On RIGHT_BRACKET reduce production tff_atomic_type -> defined_ty
-- On COMMA reduce production tff_atomic_type -> defined_ty
-- On AT reduce production tff_atomic_type -> defined_ty
-- On ARROW reduce production tff_atomic_type -> defined_ty

State 39:
type_const -> atomic_word . [ STAR RIGHT_PAREN RIGHT_BRACKET LEFT_PAREN COMMA AT ARROW ]
-- On STAR reduce production type_const -> atomic_word
-- On RIGHT_PAREN reduce production type_const -> atomic_word
-- On RIGHT_BRACKET reduce production type_const -> atomic_word
-- On LEFT_PAREN reduce production type_const -> atomic_word
-- On COMMA reduce production type_const -> atomic_word
-- On AT reduce production type_const -> atomic_word
-- On ARROW reduce production type_const -> atomic_word

State 40:
tff_type -> tff_app_type ARROW . tff_type [ RIGHT_PAREN RIGHT_BRACKET COMMA ]
-- On WILDCARD shift to state 24
-- On UPPER_WORD shift to state 5
-- On TYPE_TY shift to state 25
-- On SINGLE_QUOTED shift to state 6
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 26
-- On DOLLAR_WORD shift to state 28
-- On variable shift to state 29
-- On type_const shift to state 30
-- On tff_type shift to state 41
-- On tff_atomic_type shift to state 34
-- On tff_app_type shift to state 35
-- On defined_ty shift to state 38
-- On atomic_word shift to state 39

State 41:
tff_type -> tff_app_type ARROW tff_type . [ RIGHT_PAREN RIGHT_BRACKET COMMA ]
-- On RIGHT_PAREN reduce production tff_type -> tff_app_type ARROW tff_type
-- On RIGHT_BRACKET reduce production tff_type -> tff_app_type ARROW tff_type
-- On COMMA reduce production tff_type -> tff_app_type ARROW tff_type

State 42:
separated_nonempty_list(COMMA,tff_type) -> tff_type COMMA separated_nonempty_list(COMMA,tff_type) . [ RIGHT_PAREN ]
-- On RIGHT_PAREN reduce production separated_nonempty_list(COMMA,tff_type) -> tff_type COMMA separated_nonempty_list(COMMA,tff_type)

State 43:
tff_atomic_type -> type_const LEFT_PAREN separated_nonempty_list(COMMA,tff_type) . RIGHT_PAREN [ STAR RIGHT_PAREN RIGHT_BRACKET COMMA AT ARROW ]
-- On RIGHT_PAREN shift to state 44

State 44:
tff_atomic_type -> type_const LEFT_PAREN separated_nonempty_list(COMMA,tff_type) RIGHT_PAREN . [ STAR RIGHT_PAREN RIGHT_BRACKET COMMA AT ARROW ]
-- On STAR reduce production tff_atomic_type -> type_const LEFT_PAREN separated_nonempty_list(COMMA,tff_type) RIGHT_PAREN
-- On RIGHT_PAREN reduce production tff_atomic_type -> type_const LEFT_PAREN separated_nonempty_list(COMMA,tff_type) RIGHT_PAREN
-- On RIGHT_BRACKET reduce production tff_atomic_type -> type_const LEFT_PAREN separated_nonempty_list(COMMA,tff_type) RIGHT_PAREN
-- On COMMA reduce production tff_atomic_type -> type_const LEFT_PAREN separated_nonempty_list(COMMA,tff_type) RIGHT_PAREN
-- On AT reduce production tff_atomic_type -> type_const LEFT_PAREN separated_nonempty_list(COMMA,tff_type) RIGHT_PAREN
-- On ARROW reduce production tff_atomic_type -> type_const LEFT_PAREN separated_nonempty_list(COMMA,tff_type) RIGHT_PAREN

State 45:
tff_toplevel_type -> tff_type . [ RIGHT_PAREN COMMA ]
-- On RIGHT_PAREN reduce production tff_toplevel_type -> tff_type
-- On COMMA reduce production tff_toplevel_type -> tff_type

State 46:
tff_toplevel_type -> LEFT_PAREN tff_ty_star_list . RIGHT_PAREN ARROW tff_app_type [ RIGHT_PAREN COMMA ]
-- On RIGHT_PAREN shift to state 47

State 47:
tff_toplevel_type -> LEFT_PAREN tff_ty_star_list RIGHT_PAREN . ARROW tff_app_type [ RIGHT_PAREN COMMA ]
-- On ARROW shift to state 48

State 48:
tff_toplevel_type -> LEFT_PAREN tff_ty_star_list RIGHT_PAREN ARROW . tff_app_type [ RIGHT_PAREN COMMA ]
-- On WILDCARD shift to state 24
-- On UPPER_WORD shift to state 5
-- On TYPE_TY shift to state 25
-- On SINGLE_QUOTED shift to state 6
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 26
-- On DOLLAR_WORD shift to state 28
-- On variable shift to state 29
-- On type_const shift to state 30
-- On tff_atomic_type shift to state 34
-- On tff_app_type shift to state 49
-- On defined_ty shift to state 38
-- On atomic_word shift to state 39

State 49:
tff_app_type -> tff_app_type . AT tff_atomic_type [ RIGHT_PAREN COMMA AT ]
tff_toplevel_type -> LEFT_PAREN tff_ty_star_list RIGHT_PAREN ARROW tff_app_type . [ RIGHT_PAREN COMMA ]
-- On AT shift to state 36
-- On RIGHT_PAREN reduce production tff_toplevel_type -> LEFT_PAREN tff_ty_star_list RIGHT_PAREN ARROW tff_app_type
-- On COMMA reduce production tff_toplevel_type -> LEFT_PAREN tff_ty_star_list RIGHT_PAREN ARROW tff_app_type

State 50:
tff_atomic_type -> LEFT_PAREN tff_toplevel_type . RIGHT_PAREN [ STAR RIGHT_PAREN RIGHT_BRACKET COMMA AT ARROW ]
-- On RIGHT_PAREN shift to state 51

State 51:
tff_atomic_type -> LEFT_PAREN tff_toplevel_type RIGHT_PAREN . [ STAR RIGHT_PAREN RIGHT_BRACKET COMMA AT ARROW ]
-- On STAR reduce production tff_atomic_type -> LEFT_PAREN tff_toplevel_type RIGHT_PAREN
-- On RIGHT_PAREN reduce production tff_atomic_type -> LEFT_PAREN tff_toplevel_type RIGHT_PAREN
-- On RIGHT_BRACKET reduce production tff_atomic_type -> LEFT_PAREN tff_toplevel_type RIGHT_PAREN
-- On COMMA reduce production tff_atomic_type -> LEFT_PAREN tff_toplevel_type RIGHT_PAREN
-- On AT reduce production tff_atomic_type -> LEFT_PAREN tff_toplevel_type RIGHT_PAREN
-- On ARROW reduce production tff_atomic_type -> LEFT_PAREN tff_toplevel_type RIGHT_PAREN

State 52:
tff_app_type -> tff_app_type . AT tff_atomic_type [ STAR RIGHT_PAREN AT ARROW ]
tff_ty_star_list -> tff_app_type . STAR separated_nonempty_list(STAR,tff_app_type) [ RIGHT_PAREN ]
tff_type -> tff_app_type . [ RIGHT_PAREN ]
tff_type -> tff_app_type . ARROW tff_type [ RIGHT_PAREN ]
-- On STAR shift to state 53
-- On AT shift to state 36
-- On ARROW shift to state 40
-- On RIGHT_PAREN reduce production tff_type -> tff_app_type

State 53:
tff_ty_star_list -> tff_app_type STAR . separated_nonempty_list(STAR,tff_app_type) [ RIGHT_PAREN ]
-- On WILDCARD shift to state 24
-- On UPPER_WORD shift to state 5
-- On TYPE_TY shift to state 25
-- On SINGLE_QUOTED shift to state 6
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 26
-- On DOLLAR_WORD shift to state 28
-- On variable shift to state 29
-- On type_const shift to state 30
-- On tff_atomic_type shift to state 34
-- On tff_app_type shift to state 54
-- On separated_nonempty_list(STAR,tff_app_type) shift to state 57
-- On defined_ty shift to state 38
-- On atomic_word shift to state 39

State 54:
separated_nonempty_list(STAR,tff_app_type) -> tff_app_type . [ RIGHT_PAREN ]
separated_nonempty_list(STAR,tff_app_type) -> tff_app_type . STAR separated_nonempty_list(STAR,tff_app_type) [ RIGHT_PAREN ]
tff_app_type -> tff_app_type . AT tff_atomic_type [ STAR RIGHT_PAREN AT ]
-- On STAR shift to state 55
-- On AT shift to state 36
-- On RIGHT_PAREN reduce production separated_nonempty_list(STAR,tff_app_type) -> tff_app_type

State 55:
separated_nonempty_list(STAR,tff_app_type) -> tff_app_type STAR . separated_nonempty_list(STAR,tff_app_type) [ RIGHT_PAREN ]
-- On WILDCARD shift to state 24
-- On UPPER_WORD shift to state 5
-- On TYPE_TY shift to state 25
-- On SINGLE_QUOTED shift to state 6
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 26
-- On DOLLAR_WORD shift to state 28
-- On variable shift to state 29
-- On type_const shift to state 30
-- On tff_atomic_type shift to state 34
-- On tff_app_type shift to state 54
-- On separated_nonempty_list(STAR,tff_app_type) shift to state 56
-- On defined_ty shift to state 38
-- On atomic_word shift to state 39

State 56:
separated_nonempty_list(STAR,tff_app_type) -> tff_app_type STAR separated_nonempty_list(STAR,tff_app_type) . [ RIGHT_PAREN ]
-- On RIGHT_PAREN reduce production separated_nonempty_list(STAR,tff_app_type) -> tff_app_type STAR separated_nonempty_list(STAR,tff_app_type)

State 57:
tff_ty_star_list -> tff_app_type STAR separated_nonempty_list(STAR,tff_app_type) . [ RIGHT_PAREN ]
-- On RIGHT_PAREN reduce production tff_ty_star_list -> tff_app_type STAR separated_nonempty_list(STAR,tff_app_type)

State 58:
typed_var -> UPPER_WORD COLUMN tff_type . [ RIGHT_BRACKET COMMA ]
-- On RIGHT_BRACKET reduce production typed_var -> UPPER_WORD COLUMN tff_type
-- On COMMA reduce production typed_var -> UPPER_WORD COLUMN tff_type

State 59:
quantified_formula -> LAMBDA LEFT_BRACKET typed_vars . RIGHT_BRACKET COLUMN unary_formula [ XOR VLINE RIGHT_PAREN NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA AT ARROW AND ]
-- On RIGHT_BRACKET shift to state 60

State 60:
quantified_formula -> LAMBDA LEFT_BRACKET typed_vars RIGHT_BRACKET . COLUMN unary_formula [ XOR VLINE RIGHT_PAREN NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA AT ARROW AND ]
-- On COLUMN shift to state 61

State 61:
quantified_formula -> LAMBDA LEFT_BRACKET typed_vars RIGHT_BRACKET COLUMN . unary_formula [ XOR VLINE RIGHT_PAREN NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA AT ARROW AND ]
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 17
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 79
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 196
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119

State 62:
atomic_formula -> FORALLCONST . [ XOR VLINE RIGHT_PAREN NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT ARROW AND ]
-- On XOR reduce production atomic_formula -> FORALLCONST
-- On VLINE reduce production atomic_formula -> FORALLCONST
-- On RIGHT_PAREN reduce production atomic_formula -> FORALLCONST
-- On NOT_EQUAL reduce production atomic_formula -> FORALLCONST
-- On NOTVLINE reduce production atomic_formula -> FORALLCONST
-- On NOTAND reduce production atomic_formula -> FORALLCONST
-- On LEFT_IMPLY reduce production atomic_formula -> FORALLCONST
-- On IMPLY reduce production atomic_formula -> FORALLCONST
-- On EQUIV reduce production atomic_formula -> FORALLCONST
-- On EQUAL reduce production atomic_formula -> FORALLCONST
-- On EOI reduce production atomic_formula -> FORALLCONST
-- On COMMA reduce production atomic_formula -> FORALLCONST
-- On AT reduce production atomic_formula -> FORALLCONST
-- On ARROW reduce production atomic_formula -> FORALLCONST
-- On AND reduce production atomic_formula -> FORALLCONST

State 63:
quantified_formula -> FORALL . LEFT_BRACKET typed_vars RIGHT_BRACKET COLUMN unary_formula [ XOR VLINE RIGHT_PAREN NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA AT ARROW AND ]
-- On LEFT_BRACKET shift to state 64

State 64:
quantified_formula -> FORALL LEFT_BRACKET . typed_vars RIGHT_BRACKET COLUMN unary_formula [ XOR VLINE RIGHT_PAREN NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA AT ARROW AND ]
-- On UPPER_WORD shift to state 22
-- On typed_vars shift to state 65
-- On typed_var shift to state 191
-- On separated_nonempty_list(COMMA,typed_var) shift to state 194

State 65:
quantified_formula -> FORALL LEFT_BRACKET typed_vars . RIGHT_BRACKET COLUMN unary_formula [ XOR VLINE RIGHT_PAREN NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA AT ARROW AND ]
-- On RIGHT_BRACKET shift to state 66

State 66:
quantified_formula -> FORALL LEFT_BRACKET typed_vars RIGHT_BRACKET . COLUMN unary_formula [ XOR VLINE RIGHT_PAREN NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA AT ARROW AND ]
-- On COLUMN shift to state 67

State 67:
quantified_formula -> FORALL LEFT_BRACKET typed_vars RIGHT_BRACKET COLUMN . unary_formula [ XOR VLINE RIGHT_PAREN NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA AT ARROW AND ]
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 17
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 79
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 195
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119

State 68:
atomic_formula -> FALSE . [ XOR VLINE RIGHT_PAREN NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT ARROW AND ]
-- On XOR reduce production atomic_formula -> FALSE
-- On VLINE reduce production atomic_formula -> FALSE
-- On RIGHT_PAREN reduce production atomic_formula -> FALSE
-- On NOT_EQUAL reduce production atomic_formula -> FALSE
-- On NOTVLINE reduce production atomic_formula -> FALSE
-- On NOTAND reduce production atomic_formula -> FALSE
-- On LEFT_IMPLY reduce production atomic_formula -> FALSE
-- On IMPLY reduce production atomic_formula -> FALSE
-- On EQUIV reduce production atomic_formula -> FALSE
-- On EQUAL reduce production atomic_formula -> FALSE
-- On EOI reduce production atomic_formula -> FALSE
-- On COMMA reduce production atomic_formula -> FALSE
-- On AT reduce production atomic_formula -> FALSE
-- On ARROW reduce production atomic_formula -> FALSE
-- On AND reduce production atomic_formula -> FALSE

State 69:
atomic_formula -> EXISTSCONST . [ XOR VLINE RIGHT_PAREN NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT ARROW AND ]
-- On XOR reduce production atomic_formula -> EXISTSCONST
-- On VLINE reduce production atomic_formula -> EXISTSCONST
-- On RIGHT_PAREN reduce production atomic_formula -> EXISTSCONST
-- On NOT_EQUAL reduce production atomic_formula -> EXISTSCONST
-- On NOTVLINE reduce production atomic_formula -> EXISTSCONST
-- On NOTAND reduce production atomic_formula -> EXISTSCONST
-- On LEFT_IMPLY reduce production atomic_formula -> EXISTSCONST
-- On IMPLY reduce production atomic_formula -> EXISTSCONST
-- On EQUIV reduce production atomic_formula -> EXISTSCONST
-- On EQUAL reduce production atomic_formula -> EXISTSCONST
-- On EOI reduce production atomic_formula -> EXISTSCONST
-- On COMMA reduce production atomic_formula -> EXISTSCONST
-- On AT reduce production atomic_formula -> EXISTSCONST
-- On ARROW reduce production atomic_formula -> EXISTSCONST
-- On AND reduce production atomic_formula -> EXISTSCONST

State 70:
quantified_formula -> EXISTS . LEFT_BRACKET typed_vars RIGHT_BRACKET COLUMN unary_formula [ XOR VLINE RIGHT_PAREN NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA AT ARROW AND ]
-- On LEFT_BRACKET shift to state 71

State 71:
quantified_formula -> EXISTS LEFT_BRACKET . typed_vars RIGHT_BRACKET COLUMN unary_formula [ XOR VLINE RIGHT_PAREN NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA AT ARROW AND ]
-- On UPPER_WORD shift to state 22
-- On typed_vars shift to state 72
-- On typed_var shift to state 191
-- On separated_nonempty_list(COMMA,typed_var) shift to state 194

State 72:
quantified_formula -> EXISTS LEFT_BRACKET typed_vars . RIGHT_BRACKET COLUMN unary_formula [ XOR VLINE RIGHT_PAREN NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA AT ARROW AND ]
-- On RIGHT_BRACKET shift to state 73

State 73:
quantified_formula -> EXISTS LEFT_BRACKET typed_vars RIGHT_BRACKET . COLUMN unary_formula [ XOR VLINE RIGHT_PAREN NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA AT ARROW AND ]
-- On COLUMN shift to state 74

State 74:
quantified_formula -> EXISTS LEFT_BRACKET typed_vars RIGHT_BRACKET COLUMN . unary_formula [ XOR VLINE RIGHT_PAREN NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA AT ARROW AND ]
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 17
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 79
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 190
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119

State 75:
atomic_system_word -> DOLLAR_DOLLAR_WORD . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_PAREN LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT ARROW AND ]
-- On XOR reduce production atomic_system_word -> DOLLAR_DOLLAR_WORD
-- On VLINE reduce production atomic_system_word -> DOLLAR_DOLLAR_WORD
-- On RIGHT_PAREN reduce production atomic_system_word -> DOLLAR_DOLLAR_WORD
-- On RIGHT_BRACKET reduce production atomic_system_word -> DOLLAR_DOLLAR_WORD
-- On NOT_EQUAL reduce production atomic_system_word -> DOLLAR_DOLLAR_WORD
-- On NOTVLINE reduce production atomic_system_word -> DOLLAR_DOLLAR_WORD
-- On NOTAND reduce production atomic_system_word -> DOLLAR_DOLLAR_WORD
-- On LEFT_PAREN reduce production atomic_system_word -> DOLLAR_DOLLAR_WORD
-- On LEFT_IMPLY reduce production atomic_system_word -> DOLLAR_DOLLAR_WORD
-- On IMPLY reduce production atomic_system_word -> DOLLAR_DOLLAR_WORD
-- On EQUIV reduce production atomic_system_word -> DOLLAR_DOLLAR_WORD
-- On EQUAL reduce production atomic_system_word -> DOLLAR_DOLLAR_WORD
-- On EOI reduce production atomic_system_word -> DOLLAR_DOLLAR_WORD
-- On COMMA reduce production atomic_system_word -> DOLLAR_DOLLAR_WORD
-- On AT reduce production atomic_system_word -> DOLLAR_DOLLAR_WORD
-- On ARROW reduce production atomic_system_word -> DOLLAR_DOLLAR_WORD
-- On AND reduce production atomic_system_word -> DOLLAR_DOLLAR_WORD

State 76:
defined_atom -> DISTINCT_OBJECT . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT ARROW AND ]
-- On XOR reduce production defined_atom -> DISTINCT_OBJECT
-- On VLINE reduce production defined_atom -> DISTINCT_OBJECT
-- On RIGHT_PAREN reduce production defined_atom -> DISTINCT_OBJECT
-- On RIGHT_BRACKET reduce production defined_atom -> DISTINCT_OBJECT
-- On NOT_EQUAL reduce production defined_atom -> DISTINCT_OBJECT
-- On NOTVLINE reduce production defined_atom -> DISTINCT_OBJECT
-- On NOTAND reduce production defined_atom -> DISTINCT_OBJECT
-- On LEFT_IMPLY reduce production defined_atom -> DISTINCT_OBJECT
-- On IMPLY reduce production defined_atom -> DISTINCT_OBJECT
-- On EQUIV reduce production defined_atom -> DISTINCT_OBJECT
-- On EQUAL reduce production defined_atom -> DISTINCT_OBJECT
-- On EOI reduce production defined_atom -> DISTINCT_OBJECT
-- On COMMA reduce production defined_atom -> DISTINCT_OBJECT
-- On AT reduce production defined_atom -> DISTINCT_OBJECT
-- On ARROW reduce production defined_atom -> DISTINCT_OBJECT
-- On AND reduce production defined_atom -> DISTINCT_OBJECT

State 77:
term -> variable . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT ARROW AND ]
-- On XOR reduce production term -> variable
-- On VLINE reduce production term -> variable
-- On RIGHT_PAREN reduce production term -> variable
-- On RIGHT_BRACKET reduce production term -> variable
-- On NOT_EQUAL reduce production term -> variable
-- On NOTVLINE reduce production term -> variable
-- On NOTAND reduce production term -> variable
-- On LEFT_IMPLY reduce production term -> variable
-- On IMPLY reduce production term -> variable
-- On EQUIV reduce production term -> variable
-- On EQUAL reduce production term -> variable
-- On EOI reduce production term -> variable
-- On COMMA reduce production term -> variable
-- On AT reduce production term -> variable
-- On ARROW reduce production term -> variable
-- On AND reduce production term -> variable

State 78:
unary_formula -> unitary_infix_formula . [ XOR VLINE RIGHT_PAREN NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA AT ARROW AND ]
-- On XOR reduce production unary_formula -> unitary_infix_formula
-- On VLINE reduce production unary_formula -> unitary_infix_formula
-- On RIGHT_PAREN reduce production unary_formula -> unitary_infix_formula
-- On NOTVLINE reduce production unary_formula -> unitary_infix_formula
-- On NOTAND reduce production unary_formula -> unitary_infix_formula
-- On LEFT_IMPLY reduce production unary_formula -> unitary_infix_formula
-- On IMPLY reduce production unary_formula -> unitary_infix_formula
-- On EQUIV reduce production unary_formula -> unitary_infix_formula
-- On EOI reduce production unary_formula -> unitary_infix_formula
-- On COMMA reduce production unary_formula -> unitary_infix_formula
-- On AT reduce production unary_formula -> unitary_infix_formula
-- On ARROW reduce production unary_formula -> unitary_infix_formula
-- On AND reduce production unary_formula -> unitary_infix_formula

State 79:
unitary_infix_formula -> unitary_formula . [ XOR VLINE RIGHT_PAREN NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA AT ARROW AND ]
-- On XOR reduce production unitary_infix_formula -> unitary_formula
-- On VLINE reduce production unitary_infix_formula -> unitary_formula
-- On RIGHT_PAREN reduce production unitary_infix_formula -> unitary_formula
-- On NOTVLINE reduce production unitary_infix_formula -> unitary_formula
-- On NOTAND reduce production unitary_infix_formula -> unitary_formula
-- On LEFT_IMPLY reduce production unitary_infix_formula -> unitary_formula
-- On IMPLY reduce production unitary_infix_formula -> unitary_formula
-- On EQUIV reduce production unitary_infix_formula -> unitary_formula
-- On EOI reduce production unitary_infix_formula -> unitary_formula
-- On COMMA reduce production unitary_infix_formula -> unitary_formula
-- On AT reduce production unitary_infix_formula -> unitary_formula
-- On ARROW reduce production unitary_infix_formula -> unitary_formula
-- On AND reduce production unitary_infix_formula -> unitary_formula

State 80:
unitary_formula -> unitary_atomic_formula . [ XOR VLINE RIGHT_PAREN NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA AT ARROW AND ]
unitary_infix_formula -> unitary_atomic_formula . EQUAL unitary_formula [ XOR VLINE RIGHT_PAREN NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA AT ARROW AND ]
unitary_infix_formula -> unitary_atomic_formula . NOT_EQUAL unitary_formula [ XOR VLINE RIGHT_PAREN NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA AT ARROW AND ]
-- On NOT_EQUAL shift to state 81
-- On EQUAL shift to state 188
-- On XOR reduce production unitary_formula -> unitary_atomic_formula
-- On VLINE reduce production unitary_formula -> unitary_atomic_formula
-- On RIGHT_PAREN reduce production unitary_formula -> unitary_atomic_formula
-- On NOTVLINE reduce production unitary_formula -> unitary_atomic_formula
-- On NOTAND reduce production unitary_formula -> unitary_atomic_formula
-- On LEFT_IMPLY reduce production unitary_formula -> unitary_atomic_formula
-- On IMPLY reduce production unitary_formula -> unitary_atomic_formula
-- On EQUIV reduce production unitary_formula -> unitary_atomic_formula
-- On EOI reduce production unitary_formula -> unitary_atomic_formula
-- On COMMA reduce production unitary_formula -> unitary_atomic_formula
-- On AT reduce production unitary_formula -> unitary_atomic_formula
-- On ARROW reduce production unitary_formula -> unitary_atomic_formula
-- On AND reduce production unitary_formula -> unitary_atomic_formula

State 81:
unitary_infix_formula -> unitary_atomic_formula NOT_EQUAL . unitary_formula [ XOR VLINE RIGHT_PAREN NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA AT ARROW AND ]
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 17
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On variable shift to state 77
-- On unitary_formula shift to state 82
-- On unitary_atomic_formula shift to state 83
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119

State 82:
unitary_infix_formula -> unitary_atomic_formula NOT_EQUAL unitary_formula . [ XOR VLINE RIGHT_PAREN NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA AT ARROW AND ]
-- On XOR reduce production unitary_infix_formula -> unitary_atomic_formula NOT_EQUAL unitary_formula
-- On VLINE reduce production unitary_infix_formula -> unitary_atomic_formula NOT_EQUAL unitary_formula
-- On RIGHT_PAREN reduce production unitary_infix_formula -> unitary_atomic_formula NOT_EQUAL unitary_formula
-- On NOTVLINE reduce production unitary_infix_formula -> unitary_atomic_formula NOT_EQUAL unitary_formula
-- On NOTAND reduce production unitary_infix_formula -> unitary_atomic_formula NOT_EQUAL unitary_formula
-- On LEFT_IMPLY reduce production unitary_infix_formula -> unitary_atomic_formula NOT_EQUAL unitary_formula
-- On IMPLY reduce production unitary_infix_formula -> unitary_atomic_formula NOT_EQUAL unitary_formula
-- On EQUIV reduce production unitary_infix_formula -> unitary_atomic_formula NOT_EQUAL unitary_formula
-- On EOI reduce production unitary_infix_formula -> unitary_atomic_formula NOT_EQUAL unitary_formula
-- On COMMA reduce production unitary_infix_formula -> unitary_atomic_formula NOT_EQUAL unitary_formula
-- On AT reduce production unitary_infix_formula -> unitary_atomic_formula NOT_EQUAL unitary_formula
-- On ARROW reduce production unitary_infix_formula -> unitary_atomic_formula NOT_EQUAL unitary_formula
-- On AND reduce production unitary_infix_formula -> unitary_atomic_formula NOT_EQUAL unitary_formula

State 83:
unitary_formula -> unitary_atomic_formula . [ XOR VLINE RIGHT_PAREN NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA AT ARROW AND ]
-- On XOR reduce production unitary_formula -> unitary_atomic_formula
-- On VLINE reduce production unitary_formula -> unitary_atomic_formula
-- On RIGHT_PAREN reduce production unitary_formula -> unitary_atomic_formula
-- On NOTVLINE reduce production unitary_formula -> unitary_atomic_formula
-- On NOTAND reduce production unitary_formula -> unitary_atomic_formula
-- On LEFT_IMPLY reduce production unitary_formula -> unitary_atomic_formula
-- On IMPLY reduce production unitary_formula -> unitary_atomic_formula
-- On EQUIV reduce production unitary_formula -> unitary_atomic_formula
-- On EOI reduce production unitary_formula -> unitary_atomic_formula
-- On COMMA reduce production unitary_formula -> unitary_atomic_formula
-- On AT reduce production unitary_formula -> unitary_atomic_formula
-- On ARROW reduce production unitary_formula -> unitary_atomic_formula
-- On AND reduce production unitary_formula -> unitary_atomic_formula

State 84:
atomic_formula -> term . [ XOR VLINE RIGHT_PAREN NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT ARROW AND ]
-- On XOR reduce production atomic_formula -> term
-- On VLINE reduce production atomic_formula -> term
-- On RIGHT_PAREN reduce production atomic_formula -> term
-- On NOT_EQUAL reduce production atomic_formula -> term
-- On NOTVLINE reduce production atomic_formula -> term
-- On NOTAND reduce production atomic_formula -> term
-- On LEFT_IMPLY reduce production atomic_formula -> term
-- On IMPLY reduce production atomic_formula -> term
-- On EQUIV reduce production atomic_formula -> term
-- On EQUAL reduce production atomic_formula -> term
-- On EOI reduce production atomic_formula -> term
-- On COMMA reduce production atomic_formula -> term
-- On AT reduce production atomic_formula -> term
-- On ARROW reduce production atomic_formula -> term
-- On AND reduce production atomic_formula -> term

State 85:
function_term -> system_term . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT ARROW AND ]
-- On XOR reduce production function_term -> system_term
-- On VLINE reduce production function_term -> system_term
-- On RIGHT_PAREN reduce production function_term -> system_term
-- On RIGHT_BRACKET reduce production function_term -> system_term
-- On NOT_EQUAL reduce production function_term -> system_term
-- On NOTVLINE reduce production function_term -> system_term
-- On NOTAND reduce production function_term -> system_term
-- On LEFT_IMPLY reduce production function_term -> system_term
-- On IMPLY reduce production function_term -> system_term
-- On EQUIV reduce production function_term -> system_term
-- On EQUAL reduce production function_term -> system_term
-- On EOI reduce production function_term -> system_term
-- On COMMA reduce production function_term -> system_term
-- On AT reduce production function_term -> system_term
-- On ARROW reduce production function_term -> system_term
-- On AND reduce production function_term -> system_term

State 86:
system_constant -> system_functor . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT ARROW AND ]
system_term -> system_functor . LEFT_PAREN term_arguments RIGHT_PAREN [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT ARROW AND ]
-- On LEFT_PAREN shift to state 87
-- On XOR reduce production system_constant -> system_functor
-- On VLINE reduce production system_constant -> system_functor
-- On RIGHT_PAREN reduce production system_constant -> system_functor
-- On RIGHT_BRACKET reduce production system_constant -> system_functor
-- On NOT_EQUAL reduce production system_constant -> system_functor
-- On NOTVLINE reduce production system_constant -> system_functor
-- On NOTAND reduce production system_constant -> system_functor
-- On LEFT_IMPLY reduce production system_constant -> system_functor
-- On IMPLY reduce production system_constant -> system_functor
-- On EQUIV reduce production system_constant -> system_functor
-- On EQUAL reduce production system_constant -> system_functor
-- On EOI reduce production system_constant -> system_functor
-- On COMMA reduce production system_constant -> system_functor
-- On AT reduce production system_constant -> system_functor
-- On ARROW reduce production system_constant -> system_functor
-- On AND reduce production system_constant -> system_functor

State 87:
system_term -> system_functor LEFT_PAREN . term_arguments RIGHT_PAREN [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT ARROW AND ]
-- On XOR shift to state 13
-- On WILDCARD shift to state 4
-- On VLINE shift to state 18
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOTVLINE shift to state 88
-- On NOTAND shift to state 98
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 17
-- On LEFT_IMPLY shift to state 108
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On IMPLY shift to state 120
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On EQUIV shift to state 125
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On ARROW shift to state 130
-- On AND shift to state 135
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 140
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 143
-- On term_arguments shift to state 186
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On separated_nonempty_list(COMMA,formula) shift to state 170
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On or_formula shift to state 171
-- On nonassoc_binary_formula shift to state 172
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On formula shift to state 173
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On binary_formula shift to state 176
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119
-- On assoc_binary_formula_aux(VLINE) shift to state 177
-- On assoc_binary_formula_aux(AND) shift to state 178
-- On assoc_binary_formula shift to state 179
-- On app_formula shift to state 180
-- On and_formula shift to state 183

State 88:
nonassoc_binary_formula -> NOTVLINE . AT unary_formula AT unary_formula [ RIGHT_PAREN EOI COMMA ]
-- On AT shift to state 89

State 89:
nonassoc_binary_formula -> NOTVLINE AT . unary_formula AT unary_formula [ RIGHT_PAREN EOI COMMA ]
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 17
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 79
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 90
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119

State 90:
nonassoc_binary_formula -> NOTVLINE AT unary_formula . AT unary_formula [ RIGHT_PAREN EOI COMMA ]
-- On AT shift to state 91

State 91:
nonassoc_binary_formula -> NOTVLINE AT unary_formula AT . unary_formula [ RIGHT_PAREN EOI COMMA ]
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 17
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 79
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 92
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119

State 92:
nonassoc_binary_formula -> NOTVLINE AT unary_formula AT unary_formula . [ RIGHT_PAREN EOI COMMA ]
-- On RIGHT_PAREN reduce production nonassoc_binary_formula -> NOTVLINE AT unary_formula AT unary_formula
-- On EOI reduce production nonassoc_binary_formula -> NOTVLINE AT unary_formula AT unary_formula
-- On COMMA reduce production nonassoc_binary_formula -> NOTVLINE AT unary_formula AT unary_formula

State 93:
system_term -> system_constant . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT ARROW AND ]
-- On XOR reduce production system_term -> system_constant
-- On VLINE reduce production system_term -> system_constant
-- On RIGHT_PAREN reduce production system_term -> system_constant
-- On RIGHT_BRACKET reduce production system_term -> system_constant
-- On NOT_EQUAL reduce production system_term -> system_constant
-- On NOTVLINE reduce production system_term -> system_constant
-- On NOTAND reduce production system_term -> system_constant
-- On LEFT_IMPLY reduce production system_term -> system_constant
-- On IMPLY reduce production system_term -> system_constant
-- On EQUIV reduce production system_term -> system_constant
-- On EQUAL reduce production system_term -> system_constant
-- On EOI reduce production system_term -> system_constant
-- On COMMA reduce production system_term -> system_constant
-- On AT reduce production system_term -> system_constant
-- On ARROW reduce production system_term -> system_constant
-- On AND reduce production system_term -> system_constant

State 94:
unitary_formula -> quantified_formula . [ XOR VLINE RIGHT_PAREN NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA AT ARROW AND ]
-- On XOR reduce production unitary_formula -> quantified_formula
-- On VLINE reduce production unitary_formula -> quantified_formula
-- On RIGHT_PAREN reduce production unitary_formula -> quantified_formula
-- On NOTVLINE reduce production unitary_formula -> quantified_formula
-- On NOTAND reduce production unitary_formula -> quantified_formula
-- On LEFT_IMPLY reduce production unitary_formula -> quantified_formula
-- On IMPLY reduce production unitary_formula -> quantified_formula
-- On EQUIV reduce production unitary_formula -> quantified_formula
-- On EOI reduce production unitary_formula -> quantified_formula
-- On COMMA reduce production unitary_formula -> quantified_formula
-- On AT reduce production unitary_formula -> quantified_formula
-- On ARROW reduce production unitary_formula -> quantified_formula
-- On AND reduce production unitary_formula -> quantified_formula

State 95:
function_term -> plain_term . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT ARROW AND ]
-- On XOR reduce production function_term -> plain_term
-- On VLINE reduce production function_term -> plain_term
-- On RIGHT_PAREN reduce production function_term -> plain_term
-- On RIGHT_BRACKET reduce production function_term -> plain_term
-- On NOT_EQUAL reduce production function_term -> plain_term
-- On NOTVLINE reduce production function_term -> plain_term
-- On NOTAND reduce production function_term -> plain_term
-- On LEFT_IMPLY reduce production function_term -> plain_term
-- On IMPLY reduce production function_term -> plain_term
-- On EQUIV reduce production function_term -> plain_term
-- On EQUAL reduce production function_term -> plain_term
-- On EOI reduce production function_term -> plain_term
-- On COMMA reduce production function_term -> plain_term
-- On AT reduce production function_term -> plain_term
-- On ARROW reduce production function_term -> plain_term
-- On AND reduce production function_term -> plain_term

State 96:
plain_term -> functor_ . LEFT_PAREN term_arguments RIGHT_PAREN [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT ARROW AND ]
-- On LEFT_PAREN shift to state 97

State 97:
plain_term -> functor_ LEFT_PAREN . term_arguments RIGHT_PAREN [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT ARROW AND ]
-- On XOR shift to state 13
-- On WILDCARD shift to state 4
-- On VLINE shift to state 18
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOTVLINE shift to state 88
-- On NOTAND shift to state 98
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 17
-- On LEFT_IMPLY shift to state 108
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On IMPLY shift to state 120
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On EQUIV shift to state 125
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On ARROW shift to state 130
-- On AND shift to state 135
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 140
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 143
-- On term_arguments shift to state 184
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On separated_nonempty_list(COMMA,formula) shift to state 170
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On or_formula shift to state 171
-- On nonassoc_binary_formula shift to state 172
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On formula shift to state 173
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On binary_formula shift to state 176
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119
-- On assoc_binary_formula_aux(VLINE) shift to state 177
-- On assoc_binary_formula_aux(AND) shift to state 178
-- On assoc_binary_formula shift to state 179
-- On app_formula shift to state 180
-- On and_formula shift to state 183

State 98:
nonassoc_binary_formula -> NOTAND . AT unary_formula AT unary_formula [ RIGHT_PAREN EOI COMMA ]
-- On AT shift to state 99

State 99:
nonassoc_binary_formula -> NOTAND AT . unary_formula AT unary_formula [ RIGHT_PAREN EOI COMMA ]
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 17
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 79
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 100
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119

State 100:
nonassoc_binary_formula -> NOTAND AT unary_formula . AT unary_formula [ RIGHT_PAREN EOI COMMA ]
-- On AT shift to state 101

State 101:
nonassoc_binary_formula -> NOTAND AT unary_formula AT . unary_formula [ RIGHT_PAREN EOI COMMA ]
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 17
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 79
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 102
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119

State 102:
nonassoc_binary_formula -> NOTAND AT unary_formula AT unary_formula . [ RIGHT_PAREN EOI COMMA ]
-- On RIGHT_PAREN reduce production nonassoc_binary_formula -> NOTAND AT unary_formula AT unary_formula
-- On EOI reduce production nonassoc_binary_formula -> NOTAND AT unary_formula AT unary_formula
-- On COMMA reduce production nonassoc_binary_formula -> NOTAND AT unary_formula AT unary_formula

State 103:
term -> function_term . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT ARROW AND ]
-- On XOR reduce production term -> function_term
-- On VLINE reduce production term -> function_term
-- On RIGHT_PAREN reduce production term -> function_term
-- On RIGHT_BRACKET reduce production term -> function_term
-- On NOT_EQUAL reduce production term -> function_term
-- On NOTVLINE reduce production term -> function_term
-- On NOTAND reduce production term -> function_term
-- On LEFT_IMPLY reduce production term -> function_term
-- On IMPLY reduce production term -> function_term
-- On EQUIV reduce production term -> function_term
-- On EQUAL reduce production term -> function_term
-- On EOI reduce production term -> function_term
-- On COMMA reduce production term -> function_term
-- On AT reduce production term -> function_term
-- On ARROW reduce production term -> function_term
-- On AND reduce production term -> function_term

State 104:
function_term -> defined_term . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT ARROW AND ]
-- On XOR reduce production function_term -> defined_term
-- On VLINE reduce production function_term -> defined_term
-- On RIGHT_PAREN reduce production function_term -> defined_term
-- On RIGHT_BRACKET reduce production function_term -> defined_term
-- On NOT_EQUAL reduce production function_term -> defined_term
-- On NOTVLINE reduce production function_term -> defined_term
-- On NOTAND reduce production function_term -> defined_term
-- On LEFT_IMPLY reduce production function_term -> defined_term
-- On IMPLY reduce production function_term -> defined_term
-- On EQUIV reduce production function_term -> defined_term
-- On EQUAL reduce production function_term -> defined_term
-- On EOI reduce production function_term -> defined_term
-- On COMMA reduce production function_term -> defined_term
-- On AT reduce production function_term -> defined_term
-- On ARROW reduce production function_term -> defined_term
-- On AND reduce production function_term -> defined_term

State 105:
defined_atomic_term -> defined_plain_term . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT ARROW AND ]
-- On XOR reduce production defined_atomic_term -> defined_plain_term
-- On VLINE reduce production defined_atomic_term -> defined_plain_term
-- On RIGHT_PAREN reduce production defined_atomic_term -> defined_plain_term
-- On RIGHT_BRACKET reduce production defined_atomic_term -> defined_plain_term
-- On NOT_EQUAL reduce production defined_atomic_term -> defined_plain_term
-- On NOTVLINE reduce production defined_atomic_term -> defined_plain_term
-- On NOTAND reduce production defined_atomic_term -> defined_plain_term
-- On LEFT_IMPLY reduce production defined_atomic_term -> defined_plain_term
-- On IMPLY reduce production defined_atomic_term -> defined_plain_term
-- On EQUIV reduce production defined_atomic_term -> defined_plain_term
-- On EQUAL reduce production defined_atomic_term -> defined_plain_term
-- On EOI reduce production defined_atomic_term -> defined_plain_term
-- On COMMA reduce production defined_atomic_term -> defined_plain_term
-- On AT reduce production defined_atomic_term -> defined_plain_term
-- On ARROW reduce production defined_atomic_term -> defined_plain_term
-- On AND reduce production defined_atomic_term -> defined_plain_term

State 106:
defined_plain_term -> defined_functor . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT ARROW AND ]
defined_plain_term -> defined_functor . LEFT_PAREN term_arguments RIGHT_PAREN [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT ARROW AND ]
-- On LEFT_PAREN shift to state 107
-- On XOR reduce production defined_plain_term -> defined_functor
-- On VLINE reduce production defined_plain_term -> defined_functor
-- On RIGHT_PAREN reduce production defined_plain_term -> defined_functor
-- On RIGHT_BRACKET reduce production defined_plain_term -> defined_functor
-- On NOT_EQUAL reduce production defined_plain_term -> defined_functor
-- On NOTVLINE reduce production defined_plain_term -> defined_functor
-- On NOTAND reduce production defined_plain_term -> defined_functor
-- On LEFT_IMPLY reduce production defined_plain_term -> defined_functor
-- On IMPLY reduce production defined_plain_term -> defined_functor
-- On EQUIV reduce production defined_plain_term -> defined_functor
-- On EQUAL reduce production defined_plain_term -> defined_functor
-- On EOI reduce production defined_plain_term -> defined_functor
-- On COMMA reduce production defined_plain_term -> defined_functor
-- On AT reduce production defined_plain_term -> defined_functor
-- On ARROW reduce production defined_plain_term -> defined_functor
-- On AND reduce production defined_plain_term -> defined_functor

State 107:
defined_plain_term -> defined_functor LEFT_PAREN . term_arguments RIGHT_PAREN [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT ARROW AND ]
-- On XOR shift to state 13
-- On WILDCARD shift to state 4
-- On VLINE shift to state 18
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOTVLINE shift to state 88
-- On NOTAND shift to state 98
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 17
-- On LEFT_IMPLY shift to state 108
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On IMPLY shift to state 120
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On EQUIV shift to state 125
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On ARROW shift to state 130
-- On AND shift to state 135
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 140
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 143
-- On term_arguments shift to state 168
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On separated_nonempty_list(COMMA,formula) shift to state 170
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On or_formula shift to state 171
-- On nonassoc_binary_formula shift to state 172
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On formula shift to state 173
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On binary_formula shift to state 176
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119
-- On assoc_binary_formula_aux(VLINE) shift to state 177
-- On assoc_binary_formula_aux(AND) shift to state 178
-- On assoc_binary_formula shift to state 179
-- On app_formula shift to state 180
-- On and_formula shift to state 183

State 108:
nonassoc_binary_formula -> LEFT_IMPLY . AT unary_formula AT unary_formula [ RIGHT_PAREN EOI COMMA ]
-- On AT shift to state 109

State 109:
nonassoc_binary_formula -> LEFT_IMPLY AT . unary_formula AT unary_formula [ RIGHT_PAREN EOI COMMA ]
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 17
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 79
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 110
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119

State 110:
nonassoc_binary_formula -> LEFT_IMPLY AT unary_formula . AT unary_formula [ RIGHT_PAREN EOI COMMA ]
-- On AT shift to state 111

State 111:
nonassoc_binary_formula -> LEFT_IMPLY AT unary_formula AT . unary_formula [ RIGHT_PAREN EOI COMMA ]
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 17
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 79
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 112
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119

State 112:
nonassoc_binary_formula -> LEFT_IMPLY AT unary_formula AT unary_formula . [ RIGHT_PAREN EOI COMMA ]
-- On RIGHT_PAREN reduce production nonassoc_binary_formula -> LEFT_IMPLY AT unary_formula AT unary_formula
-- On EOI reduce production nonassoc_binary_formula -> LEFT_IMPLY AT unary_formula AT unary_formula
-- On COMMA reduce production nonassoc_binary_formula -> LEFT_IMPLY AT unary_formula AT unary_formula

State 113:
defined_term -> defined_atomic_term . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT ARROW AND ]
-- On XOR reduce production defined_term -> defined_atomic_term
-- On VLINE reduce production defined_term -> defined_atomic_term
-- On RIGHT_PAREN reduce production defined_term -> defined_atomic_term
-- On RIGHT_BRACKET reduce production defined_term -> defined_atomic_term
-- On NOT_EQUAL reduce production defined_term -> defined_atomic_term
-- On NOTVLINE reduce production defined_term -> defined_atomic_term
-- On NOTAND reduce production defined_term -> defined_atomic_term
-- On LEFT_IMPLY reduce production defined_term -> defined_atomic_term
-- On IMPLY reduce production defined_term -> defined_atomic_term
-- On EQUIV reduce production defined_term -> defined_atomic_term
-- On EQUAL reduce production defined_term -> defined_atomic_term
-- On EOI reduce production defined_term -> defined_atomic_term
-- On COMMA reduce production defined_term -> defined_atomic_term
-- On AT reduce production defined_term -> defined_atomic_term
-- On ARROW reduce production defined_term -> defined_atomic_term
-- On AND reduce production defined_term -> defined_atomic_term

State 114:
defined_term -> defined_atom . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT ARROW AND ]
-- On XOR reduce production defined_term -> defined_atom
-- On VLINE reduce production defined_term -> defined_atom
-- On RIGHT_PAREN reduce production defined_term -> defined_atom
-- On RIGHT_BRACKET reduce production defined_term -> defined_atom
-- On NOT_EQUAL reduce production defined_term -> defined_atom
-- On NOTVLINE reduce production defined_term -> defined_atom
-- On NOTAND reduce production defined_term -> defined_atom
-- On LEFT_IMPLY reduce production defined_term -> defined_atom
-- On IMPLY reduce production defined_term -> defined_atom
-- On EQUIV reduce production defined_term -> defined_atom
-- On EQUAL reduce production defined_term -> defined_atom
-- On EOI reduce production defined_term -> defined_atom
-- On COMMA reduce production defined_term -> defined_atom
-- On AT reduce production defined_term -> defined_atom
-- On ARROW reduce production defined_term -> defined_atom
-- On AND reduce production defined_term -> defined_atom

State 115:
atomic_term -> atomic_word . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT ARROW AND ]
functor_ -> atomic_word . [ LEFT_PAREN ]
-- On XOR reduce production atomic_term -> atomic_word
-- On VLINE reduce production atomic_term -> atomic_word
-- On RIGHT_PAREN reduce production atomic_term -> atomic_word
-- On RIGHT_BRACKET reduce production atomic_term -> atomic_word
-- On NOT_EQUAL reduce production atomic_term -> atomic_word
-- On NOTVLINE reduce production atomic_term -> atomic_word
-- On NOTAND reduce production atomic_term -> atomic_word
-- On LEFT_PAREN reduce production functor_ -> atomic_word
-- On LEFT_IMPLY reduce production atomic_term -> atomic_word
-- On IMPLY reduce production atomic_term -> atomic_word
-- On EQUIV reduce production atomic_term -> atomic_word
-- On EQUAL reduce production atomic_term -> atomic_word
-- On EOI reduce production atomic_term -> atomic_word
-- On COMMA reduce production atomic_term -> atomic_word
-- On AT reduce production atomic_term -> atomic_word
-- On ARROW reduce production atomic_term -> atomic_word
-- On AND reduce production atomic_term -> atomic_word

State 116:
plain_term -> atomic_term . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT ARROW AND ]
-- On XOR reduce production plain_term -> atomic_term
-- On VLINE reduce production plain_term -> atomic_term
-- On RIGHT_PAREN reduce production plain_term -> atomic_term
-- On RIGHT_BRACKET reduce production plain_term -> atomic_term
-- On NOT_EQUAL reduce production plain_term -> atomic_term
-- On NOTVLINE reduce production plain_term -> atomic_term
-- On NOTAND reduce production plain_term -> atomic_term
-- On LEFT_IMPLY reduce production plain_term -> atomic_term
-- On IMPLY reduce production plain_term -> atomic_term
-- On EQUIV reduce production plain_term -> atomic_term
-- On EQUAL reduce production plain_term -> atomic_term
-- On EOI reduce production plain_term -> atomic_term
-- On COMMA reduce production plain_term -> atomic_term
-- On AT reduce production plain_term -> atomic_term
-- On ARROW reduce production plain_term -> atomic_term
-- On AND reduce production plain_term -> atomic_term

State 117:
system_functor -> atomic_system_word . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_PAREN LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT ARROW AND ]
-- On XOR reduce production system_functor -> atomic_system_word
-- On VLINE reduce production system_functor -> atomic_system_word
-- On RIGHT_PAREN reduce production system_functor -> atomic_system_word
-- On RIGHT_BRACKET reduce production system_functor -> atomic_system_word
-- On NOT_EQUAL reduce production system_functor -> atomic_system_word
-- On NOTVLINE reduce production system_functor -> atomic_system_word
-- On NOTAND reduce production system_functor -> atomic_system_word
-- On LEFT_PAREN reduce production system_functor -> atomic_system_word
-- On LEFT_IMPLY reduce production system_functor -> atomic_system_word
-- On IMPLY reduce production system_functor -> atomic_system_word
-- On EQUIV reduce production system_functor -> atomic_system_word
-- On EQUAL reduce production system_functor -> atomic_system_word
-- On EOI reduce production system_functor -> atomic_system_word
-- On COMMA reduce production system_functor -> atomic_system_word
-- On AT reduce production system_functor -> atomic_system_word
-- On ARROW reduce production system_functor -> atomic_system_word
-- On AND reduce production system_functor -> atomic_system_word

State 118:
unitary_atomic_formula -> atomic_formula . [ XOR VLINE RIGHT_PAREN NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT ARROW AND ]
-- On XOR reduce production unitary_atomic_formula -> atomic_formula
-- On VLINE reduce production unitary_atomic_formula -> atomic_formula
-- On RIGHT_PAREN reduce production unitary_atomic_formula -> atomic_formula
-- On NOT_EQUAL reduce production unitary_atomic_formula -> atomic_formula
-- On NOTVLINE reduce production unitary_atomic_formula -> atomic_formula
-- On NOTAND reduce production unitary_atomic_formula -> atomic_formula
-- On LEFT_IMPLY reduce production unitary_atomic_formula -> atomic_formula
-- On IMPLY reduce production unitary_atomic_formula -> atomic_formula
-- On EQUIV reduce production unitary_atomic_formula -> atomic_formula
-- On EQUAL reduce production unitary_atomic_formula -> atomic_formula
-- On EOI reduce production unitary_atomic_formula -> atomic_formula
-- On COMMA reduce production unitary_atomic_formula -> atomic_formula
-- On AT reduce production unitary_atomic_formula -> atomic_formula
-- On ARROW reduce production unitary_atomic_formula -> atomic_formula
-- On AND reduce production unitary_atomic_formula -> atomic_formula

State 119:
defined_functor -> atomic_defined_word . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_PAREN LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT ARROW AND ]
-- On XOR reduce production defined_functor -> atomic_defined_word
-- On VLINE reduce production defined_functor -> atomic_defined_word
-- On RIGHT_PAREN reduce production defined_functor -> atomic_defined_word
-- On RIGHT_BRACKET reduce production defined_functor -> atomic_defined_word
-- On NOT_EQUAL reduce production defined_functor -> atomic_defined_word
-- On NOTVLINE reduce production defined_functor -> atomic_defined_word
-- On NOTAND reduce production defined_functor -> atomic_defined_word
-- On LEFT_PAREN reduce production defined_functor -> atomic_defined_word
-- On LEFT_IMPLY reduce production defined_functor -> atomic_defined_word
-- On IMPLY reduce production defined_functor -> atomic_defined_word
-- On EQUIV reduce production defined_functor -> atomic_defined_word
-- On EQUAL reduce production defined_functor -> atomic_defined_word
-- On EOI reduce production defined_functor -> atomic_defined_word
-- On COMMA reduce production defined_functor -> atomic_defined_word
-- On AT reduce production defined_functor -> atomic_defined_word
-- On ARROW reduce production defined_functor -> atomic_defined_word
-- On AND reduce production defined_functor -> atomic_defined_word

State 120:
nonassoc_binary_formula -> IMPLY . AT unary_formula AT unary_formula [ RIGHT_PAREN EOI COMMA ]
-- On AT shift to state 121

State 121:
nonassoc_binary_formula -> IMPLY AT . unary_formula AT unary_formula [ RIGHT_PAREN EOI COMMA ]
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 17
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 79
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 122
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119

State 122:
nonassoc_binary_formula -> IMPLY AT unary_formula . AT unary_formula [ RIGHT_PAREN EOI COMMA ]
-- On AT shift to state 123

State 123:
nonassoc_binary_formula -> IMPLY AT unary_formula AT . unary_formula [ RIGHT_PAREN EOI COMMA ]
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 17
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 79
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 124
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119

State 124:
nonassoc_binary_formula -> IMPLY AT unary_formula AT unary_formula . [ RIGHT_PAREN EOI COMMA ]
-- On RIGHT_PAREN reduce production nonassoc_binary_formula -> IMPLY AT unary_formula AT unary_formula
-- On EOI reduce production nonassoc_binary_formula -> IMPLY AT unary_formula AT unary_formula
-- On COMMA reduce production nonassoc_binary_formula -> IMPLY AT unary_formula AT unary_formula

State 125:
nonassoc_binary_formula -> EQUIV . AT unary_formula AT unary_formula [ RIGHT_PAREN EOI COMMA ]
-- On AT shift to state 126

State 126:
nonassoc_binary_formula -> EQUIV AT . unary_formula AT unary_formula [ RIGHT_PAREN EOI COMMA ]
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 17
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 79
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 127
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119

State 127:
nonassoc_binary_formula -> EQUIV AT unary_formula . AT unary_formula [ RIGHT_PAREN EOI COMMA ]
-- On AT shift to state 128

State 128:
nonassoc_binary_formula -> EQUIV AT unary_formula AT . unary_formula [ RIGHT_PAREN EOI COMMA ]
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 17
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 79
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 129
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119

State 129:
nonassoc_binary_formula -> EQUIV AT unary_formula AT unary_formula . [ RIGHT_PAREN EOI COMMA ]
-- On RIGHT_PAREN reduce production nonassoc_binary_formula -> EQUIV AT unary_formula AT unary_formula
-- On EOI reduce production nonassoc_binary_formula -> EQUIV AT unary_formula AT unary_formula
-- On COMMA reduce production nonassoc_binary_formula -> EQUIV AT unary_formula AT unary_formula

State 130:
nonassoc_binary_formula -> ARROW . AT unary_formula AT unary_formula [ RIGHT_PAREN EOI COMMA ]
-- On AT shift to state 131

State 131:
nonassoc_binary_formula -> ARROW AT . unary_formula AT unary_formula [ RIGHT_PAREN EOI COMMA ]
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 17
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 79
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 132
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119

State 132:
nonassoc_binary_formula -> ARROW AT unary_formula . AT unary_formula [ RIGHT_PAREN EOI COMMA ]
-- On AT shift to state 133

State 133:
nonassoc_binary_formula -> ARROW AT unary_formula AT . unary_formula [ RIGHT_PAREN EOI COMMA ]
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 17
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 79
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 134
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119

State 134:
nonassoc_binary_formula -> ARROW AT unary_formula AT unary_formula . [ RIGHT_PAREN EOI COMMA ]
-- On RIGHT_PAREN reduce production nonassoc_binary_formula -> ARROW AT unary_formula AT unary_formula
-- On EOI reduce production nonassoc_binary_formula -> ARROW AT unary_formula AT unary_formula
-- On COMMA reduce production nonassoc_binary_formula -> ARROW AT unary_formula AT unary_formula

State 135:
nonassoc_binary_formula -> AND . AT unary_formula AT unary_formula [ RIGHT_PAREN EOI COMMA ]
-- On AT shift to state 136

State 136:
nonassoc_binary_formula -> AND AT . unary_formula AT unary_formula [ RIGHT_PAREN EOI COMMA ]
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 17
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 79
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 137
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119

State 137:
nonassoc_binary_formula -> AND AT unary_formula . AT unary_formula [ RIGHT_PAREN EOI COMMA ]
-- On AT shift to state 138

State 138:
nonassoc_binary_formula -> AND AT unary_formula AT . unary_formula [ RIGHT_PAREN EOI COMMA ]
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 17
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 79
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 139
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119

State 139:
nonassoc_binary_formula -> AND AT unary_formula AT unary_formula . [ RIGHT_PAREN EOI COMMA ]
-- On RIGHT_PAREN reduce production nonassoc_binary_formula -> AND AT unary_formula AT unary_formula
-- On EOI reduce production nonassoc_binary_formula -> AND AT unary_formula AT unary_formula
-- On COMMA reduce production nonassoc_binary_formula -> AND AT unary_formula AT unary_formula

State 140:
app_formula -> unitary_formula . AT unary_formula [ RIGHT_PAREN EOI COMMA AT ]
unitary_infix_formula -> unitary_formula . [ XOR VLINE RIGHT_PAREN NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA ARROW AND ]
-- On AT shift to state 141
-- On XOR reduce production unitary_infix_formula -> unitary_formula
-- On VLINE reduce production unitary_infix_formula -> unitary_formula
-- On RIGHT_PAREN reduce production unitary_infix_formula -> unitary_formula
-- On NOTVLINE reduce production unitary_infix_formula -> unitary_formula
-- On NOTAND reduce production unitary_infix_formula -> unitary_formula
-- On LEFT_IMPLY reduce production unitary_infix_formula -> unitary_formula
-- On IMPLY reduce production unitary_infix_formula -> unitary_formula
-- On EQUIV reduce production unitary_infix_formula -> unitary_formula
-- On EOI reduce production unitary_infix_formula -> unitary_formula
-- On COMMA reduce production unitary_infix_formula -> unitary_formula
-- On ARROW reduce production unitary_infix_formula -> unitary_formula
-- On AND reduce production unitary_infix_formula -> unitary_formula

State 141:
app_formula -> unitary_formula AT . unary_formula [ RIGHT_PAREN EOI COMMA AT ]
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 17
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 79
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 142
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119

State 142:
app_formula -> unitary_formula AT unary_formula . [ RIGHT_PAREN EOI COMMA AT ]
-- On RIGHT_PAREN reduce production app_formula -> unitary_formula AT unary_formula
-- On EOI reduce production app_formula -> unitary_formula AT unary_formula
-- On COMMA reduce production app_formula -> unitary_formula AT unary_formula
-- On AT reduce production app_formula -> unitary_formula AT unary_formula

State 143:
assoc_binary_formula_aux(AND) -> unary_formula . AND separated_nonempty_list(AND,unary_formula) [ RIGHT_PAREN EOI COMMA ]
assoc_binary_formula_aux(VLINE) -> unary_formula . VLINE separated_nonempty_list(VLINE,unary_formula) [ RIGHT_PAREN EOI COMMA ]
formula -> unary_formula . [ RIGHT_PAREN EOI COMMA ]
nonassoc_binary_formula -> unary_formula . EQUIV unary_formula [ RIGHT_PAREN EOI COMMA ]
nonassoc_binary_formula -> unary_formula . IMPLY unary_formula [ RIGHT_PAREN EOI COMMA ]
nonassoc_binary_formula -> unary_formula . LEFT_IMPLY unary_formula [ RIGHT_PAREN EOI COMMA ]
nonassoc_binary_formula -> unary_formula . XOR unary_formula [ RIGHT_PAREN EOI COMMA ]
nonassoc_binary_formula -> unary_formula . NOTVLINE unary_formula [ RIGHT_PAREN EOI COMMA ]
nonassoc_binary_formula -> unary_formula . NOTAND unary_formula [ RIGHT_PAREN EOI COMMA ]
nonassoc_binary_formula -> unary_formula . ARROW unary_formula [ RIGHT_PAREN EOI COMMA ]
-- On XOR shift to state 144
-- On VLINE shift to state 146
-- On NOTVLINE shift to state 151
-- On NOTAND shift to state 153
-- On LEFT_IMPLY shift to state 155
-- On IMPLY shift to state 157
-- On EQUIV shift to state 159
-- On ARROW shift to state 161
-- On AND shift to state 163
-- On RIGHT_PAREN reduce production formula -> unary_formula
-- On EOI reduce production formula -> unary_formula
-- On COMMA reduce production formula -> unary_formula

State 144:
nonassoc_binary_formula -> unary_formula XOR . unary_formula [ RIGHT_PAREN EOI COMMA ]
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 17
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 79
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 145
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119

State 145:
nonassoc_binary_formula -> unary_formula XOR unary_formula . [ RIGHT_PAREN EOI COMMA ]
-- On RIGHT_PAREN reduce production nonassoc_binary_formula -> unary_formula XOR unary_formula
-- On EOI reduce production nonassoc_binary_formula -> unary_formula XOR unary_formula
-- On COMMA reduce production nonassoc_binary_formula -> unary_formula XOR unary_formula

State 146:
assoc_binary_formula_aux(VLINE) -> unary_formula VLINE . separated_nonempty_list(VLINE,unary_formula) [ RIGHT_PAREN EOI COMMA ]
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 17
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 79
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 147
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On separated_nonempty_list(VLINE,unary_formula) shift to state 150
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119

State 147:
separated_nonempty_list(VLINE,unary_formula) -> unary_formula . [ RIGHT_PAREN EOI COMMA ]
separated_nonempty_list(VLINE,unary_formula) -> unary_formula . VLINE separated_nonempty_list(VLINE,unary_formula) [ RIGHT_PAREN EOI COMMA ]
-- On VLINE shift to state 148
-- On RIGHT_PAREN reduce production separated_nonempty_list(VLINE,unary_formula) -> unary_formula
-- On EOI reduce production separated_nonempty_list(VLINE,unary_formula) -> unary_formula
-- On COMMA reduce production separated_nonempty_list(VLINE,unary_formula) -> unary_formula

State 148:
separated_nonempty_list(VLINE,unary_formula) -> unary_formula VLINE . separated_nonempty_list(VLINE,unary_formula) [ RIGHT_PAREN EOI COMMA ]
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 17
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 79
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 147
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On separated_nonempty_list(VLINE,unary_formula) shift to state 149
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119

State 149:
separated_nonempty_list(VLINE,unary_formula) -> unary_formula VLINE separated_nonempty_list(VLINE,unary_formula) . [ RIGHT_PAREN EOI COMMA ]
-- On RIGHT_PAREN reduce production separated_nonempty_list(VLINE,unary_formula) -> unary_formula VLINE separated_nonempty_list(VLINE,unary_formula)
-- On EOI reduce production separated_nonempty_list(VLINE,unary_formula) -> unary_formula VLINE separated_nonempty_list(VLINE,unary_formula)
-- On COMMA reduce production separated_nonempty_list(VLINE,unary_formula) -> unary_formula VLINE separated_nonempty_list(VLINE,unary_formula)

State 150:
assoc_binary_formula_aux(VLINE) -> unary_formula VLINE separated_nonempty_list(VLINE,unary_formula) . [ RIGHT_PAREN EOI COMMA ]
-- On RIGHT_PAREN reduce production assoc_binary_formula_aux(VLINE) -> unary_formula VLINE separated_nonempty_list(VLINE,unary_formula)
-- On EOI reduce production assoc_binary_formula_aux(VLINE) -> unary_formula VLINE separated_nonempty_list(VLINE,unary_formula)
-- On COMMA reduce production assoc_binary_formula_aux(VLINE) -> unary_formula VLINE separated_nonempty_list(VLINE,unary_formula)

State 151:
nonassoc_binary_formula -> unary_formula NOTVLINE . unary_formula [ RIGHT_PAREN EOI COMMA ]
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 17
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 79
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 152
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119

State 152:
nonassoc_binary_formula -> unary_formula NOTVLINE unary_formula . [ RIGHT_PAREN EOI COMMA ]
-- On RIGHT_PAREN reduce production nonassoc_binary_formula -> unary_formula NOTVLINE unary_formula
-- On EOI reduce production nonassoc_binary_formula -> unary_formula NOTVLINE unary_formula
-- On COMMA reduce production nonassoc_binary_formula -> unary_formula NOTVLINE unary_formula

State 153:
nonassoc_binary_formula -> unary_formula NOTAND . unary_formula [ RIGHT_PAREN EOI COMMA ]
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 17
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 79
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 154
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119

State 154:
nonassoc_binary_formula -> unary_formula NOTAND unary_formula . [ RIGHT_PAREN EOI COMMA ]
-- On RIGHT_PAREN reduce production nonassoc_binary_formula -> unary_formula NOTAND unary_formula
-- On EOI reduce production nonassoc_binary_formula -> unary_formula NOTAND unary_formula
-- On COMMA reduce production nonassoc_binary_formula -> unary_formula NOTAND unary_formula

State 155:
nonassoc_binary_formula -> unary_formula LEFT_IMPLY . unary_formula [ RIGHT_PAREN EOI COMMA ]
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 17
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 79
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 156
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119

State 156:
nonassoc_binary_formula -> unary_formula LEFT_IMPLY unary_formula . [ RIGHT_PAREN EOI COMMA ]
-- On RIGHT_PAREN reduce production nonassoc_binary_formula -> unary_formula LEFT_IMPLY unary_formula
-- On EOI reduce production nonassoc_binary_formula -> unary_formula LEFT_IMPLY unary_formula
-- On COMMA reduce production nonassoc_binary_formula -> unary_formula LEFT_IMPLY unary_formula

State 157:
nonassoc_binary_formula -> unary_formula IMPLY . unary_formula [ RIGHT_PAREN EOI COMMA ]
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 17
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 79
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 158
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119

State 158:
nonassoc_binary_formula -> unary_formula IMPLY unary_formula . [ RIGHT_PAREN EOI COMMA ]
-- On RIGHT_PAREN reduce production nonassoc_binary_formula -> unary_formula IMPLY unary_formula
-- On EOI reduce production nonassoc_binary_formula -> unary_formula IMPLY unary_formula
-- On COMMA reduce production nonassoc_binary_formula -> unary_formula IMPLY unary_formula

State 159:
nonassoc_binary_formula -> unary_formula EQUIV . unary_formula [ RIGHT_PAREN EOI COMMA ]
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 17
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 79
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 160
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119

State 160:
nonassoc_binary_formula -> unary_formula EQUIV unary_formula . [ RIGHT_PAREN EOI COMMA ]
-- On RIGHT_PAREN reduce production nonassoc_binary_formula -> unary_formula EQUIV unary_formula
-- On EOI reduce production nonassoc_binary_formula -> unary_formula EQUIV unary_formula
-- On COMMA reduce production nonassoc_binary_formula -> unary_formula EQUIV unary_formula

State 161:
nonassoc_binary_formula -> unary_formula ARROW . unary_formula [ RIGHT_PAREN EOI COMMA ]
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 17
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 79
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 162
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119

State 162:
nonassoc_binary_formula -> unary_formula ARROW unary_formula . [ RIGHT_PAREN EOI COMMA ]
-- On RIGHT_PAREN reduce production nonassoc_binary_formula -> unary_formula ARROW unary_formula
-- On EOI reduce production nonassoc_binary_formula -> unary_formula ARROW unary_formula
-- On COMMA reduce production nonassoc_binary_formula -> unary_formula ARROW unary_formula

State 163:
assoc_binary_formula_aux(AND) -> unary_formula AND . separated_nonempty_list(AND,unary_formula) [ RIGHT_PAREN EOI COMMA ]
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 17
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 79
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 164
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On separated_nonempty_list(AND,unary_formula) shift to state 167
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119

State 164:
separated_nonempty_list(AND,unary_formula) -> unary_formula . [ RIGHT_PAREN EOI COMMA ]
separated_nonempty_list(AND,unary_formula) -> unary_formula . AND separated_nonempty_list(AND,unary_formula) [ RIGHT_PAREN EOI COMMA ]
-- On AND shift to state 165
-- On RIGHT_PAREN reduce production separated_nonempty_list(AND,unary_formula) -> unary_formula
-- On EOI reduce production separated_nonempty_list(AND,unary_formula) -> unary_formula
-- On COMMA reduce production separated_nonempty_list(AND,unary_formula) -> unary_formula

State 165:
separated_nonempty_list(AND,unary_formula) -> unary_formula AND . separated_nonempty_list(AND,unary_formula) [ RIGHT_PAREN EOI COMMA ]
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 17
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 79
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 164
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On separated_nonempty_list(AND,unary_formula) shift to state 166
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119

State 166:
separated_nonempty_list(AND,unary_formula) -> unary_formula AND separated_nonempty_list(AND,unary_formula) . [ RIGHT_PAREN EOI COMMA ]
-- On RIGHT_PAREN reduce production separated_nonempty_list(AND,unary_formula) -> unary_formula AND separated_nonempty_list(AND,unary_formula)
-- On EOI reduce production separated_nonempty_list(AND,unary_formula) -> unary_formula AND separated_nonempty_list(AND,unary_formula)
-- On COMMA reduce production separated_nonempty_list(AND,unary_formula) -> unary_formula AND separated_nonempty_list(AND,unary_formula)

State 167:
assoc_binary_formula_aux(AND) -> unary_formula AND separated_nonempty_list(AND,unary_formula) . [ RIGHT_PAREN EOI COMMA ]
-- On RIGHT_PAREN reduce production assoc_binary_formula_aux(AND) -> unary_formula AND separated_nonempty_list(AND,unary_formula)
-- On EOI reduce production assoc_binary_formula_aux(AND) -> unary_formula AND separated_nonempty_list(AND,unary_formula)
-- On COMMA reduce production assoc_binary_formula_aux(AND) -> unary_formula AND separated_nonempty_list(AND,unary_formula)

State 168:
defined_plain_term -> defined_functor LEFT_PAREN term_arguments . RIGHT_PAREN [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT ARROW AND ]
-- On RIGHT_PAREN shift to state 169

State 169:
defined_plain_term -> defined_functor LEFT_PAREN term_arguments RIGHT_PAREN . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT ARROW AND ]
-- On XOR reduce production defined_plain_term -> defined_functor LEFT_PAREN term_arguments RIGHT_PAREN
-- On VLINE reduce production defined_plain_term -> defined_functor LEFT_PAREN term_arguments RIGHT_PAREN
-- On RIGHT_PAREN reduce production defined_plain_term -> defined_functor LEFT_PAREN term_arguments RIGHT_PAREN
-- On RIGHT_BRACKET reduce production defined_plain_term -> defined_functor LEFT_PAREN term_arguments RIGHT_PAREN
-- On NOT_EQUAL reduce production defined_plain_term -> defined_functor LEFT_PAREN term_arguments RIGHT_PAREN
-- On NOTVLINE reduce production defined_plain_term -> defined_functor LEFT_PAREN term_arguments RIGHT_PAREN
-- On NOTAND reduce production defined_plain_term -> defined_functor LEFT_PAREN term_arguments RIGHT_PAREN
-- On LEFT_IMPLY reduce production defined_plain_term -> defined_functor LEFT_PAREN term_arguments RIGHT_PAREN
-- On IMPLY reduce production defined_plain_term -> defined_functor LEFT_PAREN term_arguments RIGHT_PAREN
-- On EQUIV reduce production defined_plain_term -> defined_functor LEFT_PAREN term_arguments RIGHT_PAREN
-- On EQUAL reduce production defined_plain_term -> defined_functor LEFT_PAREN term_arguments RIGHT_PAREN
-- On EOI reduce production defined_plain_term -> defined_functor LEFT_PAREN term_arguments RIGHT_PAREN
-- On COMMA reduce production defined_plain_term -> defined_functor LEFT_PAREN term_arguments RIGHT_PAREN
-- On AT reduce production defined_plain_term -> defined_functor LEFT_PAREN term_arguments RIGHT_PAREN
-- On ARROW reduce production defined_plain_term -> defined_functor LEFT_PAREN term_arguments RIGHT_PAREN
-- On AND reduce production defined_plain_term -> defined_functor LEFT_PAREN term_arguments RIGHT_PAREN

State 170:
term_arguments -> separated_nonempty_list(COMMA,formula) . [ RIGHT_PAREN ]
-- On RIGHT_PAREN reduce production term_arguments -> separated_nonempty_list(COMMA,formula)

State 171:
assoc_binary_formula -> or_formula . [ RIGHT_PAREN EOI COMMA ]
-- On RIGHT_PAREN reduce production assoc_binary_formula -> or_formula
-- On EOI reduce production assoc_binary_formula -> or_formula
-- On COMMA reduce production assoc_binary_formula -> or_formula

State 172:
binary_formula -> nonassoc_binary_formula . [ RIGHT_PAREN EOI COMMA ]
-- On RIGHT_PAREN reduce production binary_formula -> nonassoc_binary_formula
-- On EOI reduce production binary_formula -> nonassoc_binary_formula
-- On COMMA reduce production binary_formula -> nonassoc_binary_formula

State 173:
separated_nonempty_list(COMMA,formula) -> formula . [ RIGHT_PAREN ]
separated_nonempty_list(COMMA,formula) -> formula . COMMA separated_nonempty_list(COMMA,formula) [ RIGHT_PAREN ]
-- On COMMA shift to state 174
-- On RIGHT_PAREN reduce production separated_nonempty_list(COMMA,formula) -> formula

State 174:
separated_nonempty_list(COMMA,formula) -> formula COMMA . separated_nonempty_list(COMMA,formula) [ RIGHT_PAREN ]
-- On XOR shift to state 13
-- On WILDCARD shift to state 4
-- On VLINE shift to state 18
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOTVLINE shift to state 88
-- On NOTAND shift to state 98
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 17
-- On LEFT_IMPLY shift to state 108
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On IMPLY shift to state 120
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On EQUIV shift to state 125
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On ARROW shift to state 130
-- On AND shift to state 135
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 140
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 143
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On separated_nonempty_list(COMMA,formula) shift to state 175
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On or_formula shift to state 171
-- On nonassoc_binary_formula shift to state 172
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On formula shift to state 173
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On binary_formula shift to state 176
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119
-- On assoc_binary_formula_aux(VLINE) shift to state 177
-- On assoc_binary_formula_aux(AND) shift to state 178
-- On assoc_binary_formula shift to state 179
-- On app_formula shift to state 180
-- On and_formula shift to state 183

State 175:
separated_nonempty_list(COMMA,formula) -> formula COMMA separated_nonempty_list(COMMA,formula) . [ RIGHT_PAREN ]
-- On RIGHT_PAREN reduce production separated_nonempty_list(COMMA,formula) -> formula COMMA separated_nonempty_list(COMMA,formula)

State 176:
formula -> binary_formula . [ RIGHT_PAREN EOI COMMA ]
-- On RIGHT_PAREN reduce production formula -> binary_formula
-- On EOI reduce production formula -> binary_formula
-- On COMMA reduce production formula -> binary_formula

State 177:
or_formula -> assoc_binary_formula_aux(VLINE) . [ RIGHT_PAREN EOI COMMA ]
-- On RIGHT_PAREN reduce production or_formula -> assoc_binary_formula_aux(VLINE)
-- On EOI reduce production or_formula -> assoc_binary_formula_aux(VLINE)
-- On COMMA reduce production or_formula -> assoc_binary_formula_aux(VLINE)

State 178:
and_formula -> assoc_binary_formula_aux(AND) . [ RIGHT_PAREN EOI COMMA ]
-- On RIGHT_PAREN reduce production and_formula -> assoc_binary_formula_aux(AND)
-- On EOI reduce production and_formula -> assoc_binary_formula_aux(AND)
-- On COMMA reduce production and_formula -> assoc_binary_formula_aux(AND)

State 179:
binary_formula -> assoc_binary_formula . [ RIGHT_PAREN EOI COMMA ]
-- On RIGHT_PAREN reduce production binary_formula -> assoc_binary_formula
-- On EOI reduce production binary_formula -> assoc_binary_formula
-- On COMMA reduce production binary_formula -> assoc_binary_formula

State 180:
app_formula -> app_formula . AT unary_formula [ RIGHT_PAREN EOI COMMA AT ]
formula -> app_formula . [ RIGHT_PAREN EOI COMMA ]
-- On AT shift to state 181
-- On RIGHT_PAREN reduce production formula -> app_formula
-- On EOI reduce production formula -> app_formula
-- On COMMA reduce production formula -> app_formula

State 181:
app_formula -> app_formula AT . unary_formula [ RIGHT_PAREN EOI COMMA AT ]
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 17
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 79
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 182
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119

State 182:
app_formula -> app_formula AT unary_formula . [ RIGHT_PAREN EOI COMMA AT ]
-- On RIGHT_PAREN reduce production app_formula -> app_formula AT unary_formula
-- On EOI reduce production app_formula -> app_formula AT unary_formula
-- On COMMA reduce production app_formula -> app_formula AT unary_formula
-- On AT reduce production app_formula -> app_formula AT unary_formula

State 183:
assoc_binary_formula -> and_formula . [ RIGHT_PAREN EOI COMMA ]
-- On RIGHT_PAREN reduce production assoc_binary_formula -> and_formula
-- On EOI reduce production assoc_binary_formula -> and_formula
-- On COMMA reduce production assoc_binary_formula -> and_formula

State 184:
plain_term -> functor_ LEFT_PAREN term_arguments . RIGHT_PAREN [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT ARROW AND ]
-- On RIGHT_PAREN shift to state 185

State 185:
plain_term -> functor_ LEFT_PAREN term_arguments RIGHT_PAREN . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT ARROW AND ]
-- On XOR reduce production plain_term -> functor_ LEFT_PAREN term_arguments RIGHT_PAREN
-- On VLINE reduce production plain_term -> functor_ LEFT_PAREN term_arguments RIGHT_PAREN
-- On RIGHT_PAREN reduce production plain_term -> functor_ LEFT_PAREN term_arguments RIGHT_PAREN
-- On RIGHT_BRACKET reduce production plain_term -> functor_ LEFT_PAREN term_arguments RIGHT_PAREN
-- On NOT_EQUAL reduce production plain_term -> functor_ LEFT_PAREN term_arguments RIGHT_PAREN
-- On NOTVLINE reduce production plain_term -> functor_ LEFT_PAREN term_arguments RIGHT_PAREN
-- On NOTAND reduce production plain_term -> functor_ LEFT_PAREN term_arguments RIGHT_PAREN
-- On LEFT_IMPLY reduce production plain_term -> functor_ LEFT_PAREN term_arguments RIGHT_PAREN
-- On IMPLY reduce production plain_term -> functor_ LEFT_PAREN term_arguments RIGHT_PAREN
-- On EQUIV reduce production plain_term -> functor_ LEFT_PAREN term_arguments RIGHT_PAREN
-- On EQUAL reduce production plain_term -> functor_ LEFT_PAREN term_arguments RIGHT_PAREN
-- On EOI reduce production plain_term -> functor_ LEFT_PAREN term_arguments RIGHT_PAREN
-- On COMMA reduce production plain_term -> functor_ LEFT_PAREN term_arguments RIGHT_PAREN
-- On AT reduce production plain_term -> functor_ LEFT_PAREN term_arguments RIGHT_PAREN
-- On ARROW reduce production plain_term -> functor_ LEFT_PAREN term_arguments RIGHT_PAREN
-- On AND reduce production plain_term -> functor_ LEFT_PAREN term_arguments RIGHT_PAREN

State 186:
system_term -> system_functor LEFT_PAREN term_arguments . RIGHT_PAREN [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT ARROW AND ]
-- On RIGHT_PAREN shift to state 187

State 187:
system_term -> system_functor LEFT_PAREN term_arguments RIGHT_PAREN . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT ARROW AND ]
-- On XOR reduce production system_term -> system_functor LEFT_PAREN term_arguments RIGHT_PAREN
-- On VLINE reduce production system_term -> system_functor LEFT_PAREN term_arguments RIGHT_PAREN
-- On RIGHT_PAREN reduce production system_term -> system_functor LEFT_PAREN term_arguments RIGHT_PAREN
-- On RIGHT_BRACKET reduce production system_term -> system_functor LEFT_PAREN term_arguments RIGHT_PAREN
-- On NOT_EQUAL reduce production system_term -> system_functor LEFT_PAREN term_arguments RIGHT_PAREN
-- On NOTVLINE reduce production system_term -> system_functor LEFT_PAREN term_arguments RIGHT_PAREN
-- On NOTAND reduce production system_term -> system_functor LEFT_PAREN term_arguments RIGHT_PAREN
-- On LEFT_IMPLY reduce production system_term -> system_functor LEFT_PAREN term_arguments RIGHT_PAREN
-- On IMPLY reduce production system_term -> system_functor LEFT_PAREN term_arguments RIGHT_PAREN
-- On EQUIV reduce production system_term -> system_functor LEFT_PAREN term_arguments RIGHT_PAREN
-- On EQUAL reduce production system_term -> system_functor LEFT_PAREN term_arguments RIGHT_PAREN
-- On EOI reduce production system_term -> system_functor LEFT_PAREN term_arguments RIGHT_PAREN
-- On COMMA reduce production system_term -> system_functor LEFT_PAREN term_arguments RIGHT_PAREN
-- On AT reduce production system_term -> system_functor LEFT_PAREN term_arguments RIGHT_PAREN
-- On ARROW reduce production system_term -> system_functor LEFT_PAREN term_arguments RIGHT_PAREN
-- On AND reduce production system_term -> system_functor LEFT_PAREN term_arguments RIGHT_PAREN

State 188:
unitary_infix_formula -> unitary_atomic_formula EQUAL . unitary_formula [ XOR VLINE RIGHT_PAREN NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA AT ARROW AND ]
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 17
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On variable shift to state 77
-- On unitary_formula shift to state 189
-- On unitary_atomic_formula shift to state 83
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119

State 189:
unitary_infix_formula -> unitary_atomic_formula EQUAL unitary_formula . [ XOR VLINE RIGHT_PAREN NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA AT ARROW AND ]
-- On XOR reduce production unitary_infix_formula -> unitary_atomic_formula EQUAL unitary_formula
-- On VLINE reduce production unitary_infix_formula -> unitary_atomic_formula EQUAL unitary_formula
-- On RIGHT_PAREN reduce production unitary_infix_formula -> unitary_atomic_formula EQUAL unitary_formula
-- On NOTVLINE reduce production unitary_infix_formula -> unitary_atomic_formula EQUAL unitary_formula
-- On NOTAND reduce production unitary_infix_formula -> unitary_atomic_formula EQUAL unitary_formula
-- On LEFT_IMPLY reduce production unitary_infix_formula -> unitary_atomic_formula EQUAL unitary_formula
-- On IMPLY reduce production unitary_infix_formula -> unitary_atomic_formula EQUAL unitary_formula
-- On EQUIV reduce production unitary_infix_formula -> unitary_atomic_formula EQUAL unitary_formula
-- On EOI reduce production unitary_infix_formula -> unitary_atomic_formula EQUAL unitary_formula
-- On COMMA reduce production unitary_infix_formula -> unitary_atomic_formula EQUAL unitary_formula
-- On AT reduce production unitary_infix_formula -> unitary_atomic_formula EQUAL unitary_formula
-- On ARROW reduce production unitary_infix_formula -> unitary_atomic_formula EQUAL unitary_formula
-- On AND reduce production unitary_infix_formula -> unitary_atomic_formula EQUAL unitary_formula

State 190:
quantified_formula -> EXISTS LEFT_BRACKET typed_vars RIGHT_BRACKET COLUMN unary_formula . [ XOR VLINE RIGHT_PAREN NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA AT ARROW AND ]
-- On XOR reduce production quantified_formula -> EXISTS LEFT_BRACKET typed_vars RIGHT_BRACKET COLUMN unary_formula
-- On VLINE reduce production quantified_formula -> EXISTS LEFT_BRACKET typed_vars RIGHT_BRACKET COLUMN unary_formula
-- On RIGHT_PAREN reduce production quantified_formula -> EXISTS LEFT_BRACKET typed_vars RIGHT_BRACKET COLUMN unary_formula
-- On NOTVLINE reduce production quantified_formula -> EXISTS LEFT_BRACKET typed_vars RIGHT_BRACKET COLUMN unary_formula
-- On NOTAND reduce production quantified_formula -> EXISTS LEFT_BRACKET typed_vars RIGHT_BRACKET COLUMN unary_formula
-- On LEFT_IMPLY reduce production quantified_formula -> EXISTS LEFT_BRACKET typed_vars RIGHT_BRACKET COLUMN unary_formula
-- On IMPLY reduce production quantified_formula -> EXISTS LEFT_BRACKET typed_vars RIGHT_BRACKET COLUMN unary_formula
-- On EQUIV reduce production quantified_formula -> EXISTS LEFT_BRACKET typed_vars RIGHT_BRACKET COLUMN unary_formula
-- On EOI reduce production quantified_formula -> EXISTS LEFT_BRACKET typed_vars RIGHT_BRACKET COLUMN unary_formula
-- On COMMA reduce production quantified_formula -> EXISTS LEFT_BRACKET typed_vars RIGHT_BRACKET COLUMN unary_formula
-- On AT reduce production quantified_formula -> EXISTS LEFT_BRACKET typed_vars RIGHT_BRACKET COLUMN unary_formula
-- On ARROW reduce production quantified_formula -> EXISTS LEFT_BRACKET typed_vars RIGHT_BRACKET COLUMN unary_formula
-- On AND reduce production quantified_formula -> EXISTS LEFT_BRACKET typed_vars RIGHT_BRACKET COLUMN unary_formula

State 191:
separated_nonempty_list(COMMA,typed_var) -> typed_var . [ RIGHT_BRACKET ]
separated_nonempty_list(COMMA,typed_var) -> typed_var . COMMA separated_nonempty_list(COMMA,typed_var) [ RIGHT_BRACKET ]
-- On COMMA shift to state 192
-- On RIGHT_BRACKET reduce production separated_nonempty_list(COMMA,typed_var) -> typed_var

State 192:
separated_nonempty_list(COMMA,typed_var) -> typed_var COMMA . separated_nonempty_list(COMMA,typed_var) [ RIGHT_BRACKET ]
-- On UPPER_WORD shift to state 22
-- On typed_var shift to state 191
-- On separated_nonempty_list(COMMA,typed_var) shift to state 193

State 193:
separated_nonempty_list(COMMA,typed_var) -> typed_var COMMA separated_nonempty_list(COMMA,typed_var) . [ RIGHT_BRACKET ]
-- On RIGHT_BRACKET reduce production separated_nonempty_list(COMMA,typed_var) -> typed_var COMMA separated_nonempty_list(COMMA,typed_var)

State 194:
typed_vars -> separated_nonempty_list(COMMA,typed_var) . [ RIGHT_BRACKET ]
-- On RIGHT_BRACKET reduce production typed_vars -> separated_nonempty_list(COMMA,typed_var)

State 195:
quantified_formula -> FORALL LEFT_BRACKET typed_vars RIGHT_BRACKET COLUMN unary_formula . [ XOR VLINE RIGHT_PAREN NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA AT ARROW AND ]
-- On XOR reduce production quantified_formula -> FORALL LEFT_BRACKET typed_vars RIGHT_BRACKET COLUMN unary_formula
-- On VLINE reduce production quantified_formula -> FORALL LEFT_BRACKET typed_vars RIGHT_BRACKET COLUMN unary_formula
-- On RIGHT_PAREN reduce production quantified_formula -> FORALL LEFT_BRACKET typed_vars RIGHT_BRACKET COLUMN unary_formula
-- On NOTVLINE reduce production quantified_formula -> FORALL LEFT_BRACKET typed_vars RIGHT_BRACKET COLUMN unary_formula
-- On NOTAND reduce production quantified_formula -> FORALL LEFT_BRACKET typed_vars RIGHT_BRACKET COLUMN unary_formula
-- On LEFT_IMPLY reduce production quantified_formula -> FORALL LEFT_BRACKET typed_vars RIGHT_BRACKET COLUMN unary_formula
-- On IMPLY reduce production quantified_formula -> FORALL LEFT_BRACKET typed_vars RIGHT_BRACKET COLUMN unary_formula
-- On EQUIV reduce production quantified_formula -> FORALL LEFT_BRACKET typed_vars RIGHT_BRACKET COLUMN unary_formula
-- On EOI reduce production quantified_formula -> FORALL LEFT_BRACKET typed_vars RIGHT_BRACKET COLUMN unary_formula
-- On COMMA reduce production quantified_formula -> FORALL LEFT_BRACKET typed_vars RIGHT_BRACKET COLUMN unary_formula
-- On AT reduce production quantified_formula -> FORALL LEFT_BRACKET typed_vars RIGHT_BRACKET COLUMN unary_formula
-- On ARROW reduce production quantified_formula -> FORALL LEFT_BRACKET typed_vars RIGHT_BRACKET COLUMN unary_formula
-- On AND reduce production quantified_formula -> FORALL LEFT_BRACKET typed_vars RIGHT_BRACKET COLUMN unary_formula

State 196:
quantified_formula -> LAMBDA LEFT_BRACKET typed_vars RIGHT_BRACKET COLUMN unary_formula . [ XOR VLINE RIGHT_PAREN NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA AT ARROW AND ]
-- On XOR reduce production quantified_formula -> LAMBDA LEFT_BRACKET typed_vars RIGHT_BRACKET COLUMN unary_formula
-- On VLINE reduce production quantified_formula -> LAMBDA LEFT_BRACKET typed_vars RIGHT_BRACKET COLUMN unary_formula
-- On RIGHT_PAREN reduce production quantified_formula -> LAMBDA LEFT_BRACKET typed_vars RIGHT_BRACKET COLUMN unary_formula
-- On NOTVLINE reduce production quantified_formula -> LAMBDA LEFT_BRACKET typed_vars RIGHT_BRACKET COLUMN unary_formula
-- On NOTAND reduce production quantified_formula -> LAMBDA LEFT_BRACKET typed_vars RIGHT_BRACKET COLUMN unary_formula
-- On LEFT_IMPLY reduce production quantified_formula -> LAMBDA LEFT_BRACKET typed_vars RIGHT_BRACKET COLUMN unary_formula
-- On IMPLY reduce production quantified_formula -> LAMBDA LEFT_BRACKET typed_vars RIGHT_BRACKET COLUMN unary_formula
-- On EQUIV reduce production quantified_formula -> LAMBDA LEFT_BRACKET typed_vars RIGHT_BRACKET COLUMN unary_formula
-- On EOI reduce production quantified_formula -> LAMBDA LEFT_BRACKET typed_vars RIGHT_BRACKET COLUMN unary_formula
-- On COMMA reduce production quantified_formula -> LAMBDA LEFT_BRACKET typed_vars RIGHT_BRACKET COLUMN unary_formula
-- On AT reduce production quantified_formula -> LAMBDA LEFT_BRACKET typed_vars RIGHT_BRACKET COLUMN unary_formula
-- On ARROW reduce production quantified_formula -> LAMBDA LEFT_BRACKET typed_vars RIGHT_BRACKET COLUMN unary_formula
-- On AND reduce production quantified_formula -> LAMBDA LEFT_BRACKET typed_vars RIGHT_BRACKET COLUMN unary_formula

State 197:
nonassoc_binary_formula -> VLINE AT unary_formula . AT unary_formula [ RIGHT_PAREN EOI COMMA ]
-- On AT shift to state 198

State 198:
nonassoc_binary_formula -> VLINE AT unary_formula AT . unary_formula [ RIGHT_PAREN EOI COMMA ]
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 17
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 79
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 199
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119

State 199:
nonassoc_binary_formula -> VLINE AT unary_formula AT unary_formula . [ RIGHT_PAREN EOI COMMA ]
-- On RIGHT_PAREN reduce production nonassoc_binary_formula -> VLINE AT unary_formula AT unary_formula
-- On EOI reduce production nonassoc_binary_formula -> VLINE AT unary_formula AT unary_formula
-- On COMMA reduce production nonassoc_binary_formula -> VLINE AT unary_formula AT unary_formula

State 200:
unitary_atomic_formula -> LEFT_PAREN formula . RIGHT_PAREN [ XOR VLINE RIGHT_PAREN NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT ARROW AND ]
-- On RIGHT_PAREN shift to state 201

State 201:
unitary_atomic_formula -> LEFT_PAREN formula RIGHT_PAREN . [ XOR VLINE RIGHT_PAREN NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT ARROW AND ]
-- On XOR reduce production unitary_atomic_formula -> LEFT_PAREN formula RIGHT_PAREN
-- On VLINE reduce production unitary_atomic_formula -> LEFT_PAREN formula RIGHT_PAREN
-- On RIGHT_PAREN reduce production unitary_atomic_formula -> LEFT_PAREN formula RIGHT_PAREN
-- On NOT_EQUAL reduce production unitary_atomic_formula -> LEFT_PAREN formula RIGHT_PAREN
-- On NOTVLINE reduce production unitary_atomic_formula -> LEFT_PAREN formula RIGHT_PAREN
-- On NOTAND reduce production unitary_atomic_formula -> LEFT_PAREN formula RIGHT_PAREN
-- On LEFT_IMPLY reduce production unitary_atomic_formula -> LEFT_PAREN formula RIGHT_PAREN
-- On IMPLY reduce production unitary_atomic_formula -> LEFT_PAREN formula RIGHT_PAREN
-- On EQUIV reduce production unitary_atomic_formula -> LEFT_PAREN formula RIGHT_PAREN
-- On EQUAL reduce production unitary_atomic_formula -> LEFT_PAREN formula RIGHT_PAREN
-- On EOI reduce production unitary_atomic_formula -> LEFT_PAREN formula RIGHT_PAREN
-- On COMMA reduce production unitary_atomic_formula -> LEFT_PAREN formula RIGHT_PAREN
-- On AT reduce production unitary_atomic_formula -> LEFT_PAREN formula RIGHT_PAREN
-- On ARROW reduce production unitary_atomic_formula -> LEFT_PAREN formula RIGHT_PAREN
-- On AND reduce production unitary_atomic_formula -> LEFT_PAREN formula RIGHT_PAREN

State 202:
unary_formula -> NOT AT . unary_formula [ XOR VLINE RIGHT_PAREN NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA AT ARROW AND ]
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 17
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 79
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 203
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119

State 203:
unary_formula -> NOT AT unary_formula . [ XOR VLINE RIGHT_PAREN NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA AT ARROW AND ]
-- On XOR reduce production unary_formula -> NOT AT unary_formula
-- On VLINE reduce production unary_formula -> NOT AT unary_formula
-- On RIGHT_PAREN reduce production unary_formula -> NOT AT unary_formula
-- On NOTVLINE reduce production unary_formula -> NOT AT unary_formula
-- On NOTAND reduce production unary_formula -> NOT AT unary_formula
-- On LEFT_IMPLY reduce production unary_formula -> NOT AT unary_formula
-- On IMPLY reduce production unary_formula -> NOT AT unary_formula
-- On EQUIV reduce production unary_formula -> NOT AT unary_formula
-- On EOI reduce production unary_formula -> NOT AT unary_formula
-- On COMMA reduce production unary_formula -> NOT AT unary_formula
-- On AT reduce production unary_formula -> NOT AT unary_formula
-- On ARROW reduce production unary_formula -> NOT AT unary_formula
-- On AND reduce production unary_formula -> NOT AT unary_formula

State 204:
unary_formula -> NOT unary_formula . [ XOR VLINE RIGHT_PAREN NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA AT ARROW AND ]
-- On XOR reduce production unary_formula -> NOT unary_formula
-- On VLINE reduce production unary_formula -> NOT unary_formula
-- On RIGHT_PAREN reduce production unary_formula -> NOT unary_formula
-- On NOTVLINE reduce production unary_formula -> NOT unary_formula
-- On NOTAND reduce production unary_formula -> NOT unary_formula
-- On LEFT_IMPLY reduce production unary_formula -> NOT unary_formula
-- On IMPLY reduce production unary_formula -> NOT unary_formula
-- On EQUIV reduce production unary_formula -> NOT unary_formula
-- On EOI reduce production unary_formula -> NOT unary_formula
-- On COMMA reduce production unary_formula -> NOT unary_formula
-- On AT reduce production unary_formula -> NOT unary_formula
-- On ARROW reduce production unary_formula -> NOT unary_formula
-- On AND reduce production unary_formula -> NOT unary_formula

State 205:
nonassoc_binary_formula -> XOR AT unary_formula . AT unary_formula [ RIGHT_PAREN EOI COMMA ]
-- On AT shift to state 206

State 206:
nonassoc_binary_formula -> XOR AT unary_formula AT . unary_formula [ RIGHT_PAREN EOI COMMA ]
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 17
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 79
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 207
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119

State 207:
nonassoc_binary_formula -> XOR AT unary_formula AT unary_formula . [ RIGHT_PAREN EOI COMMA ]
-- On RIGHT_PAREN reduce production nonassoc_binary_formula -> XOR AT unary_formula AT unary_formula
-- On EOI reduce production nonassoc_binary_formula -> XOR AT unary_formula AT unary_formula
-- On COMMA reduce production nonassoc_binary_formula -> XOR AT unary_formula AT unary_formula

State 208:
defined_plain_term -> DOLLAR_WORD LEFT_PAREN term_arguments . RIGHT_PAREN [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT ARROW AND ]
-- On RIGHT_PAREN shift to state 209

State 209:
defined_plain_term -> DOLLAR_WORD LEFT_PAREN term_arguments RIGHT_PAREN . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT ARROW AND ]
-- On XOR reduce production defined_plain_term -> DOLLAR_WORD LEFT_PAREN term_arguments RIGHT_PAREN
-- On VLINE reduce production defined_plain_term -> DOLLAR_WORD LEFT_PAREN term_arguments RIGHT_PAREN
-- On RIGHT_PAREN reduce production defined_plain_term -> DOLLAR_WORD LEFT_PAREN term_arguments RIGHT_PAREN
-- On RIGHT_BRACKET reduce production defined_plain_term -> DOLLAR_WORD LEFT_PAREN term_arguments RIGHT_PAREN
-- On NOT_EQUAL reduce production defined_plain_term -> DOLLAR_WORD LEFT_PAREN term_arguments RIGHT_PAREN
-- On NOTVLINE reduce production defined_plain_term -> DOLLAR_WORD LEFT_PAREN term_arguments RIGHT_PAREN
-- On NOTAND reduce production defined_plain_term -> DOLLAR_WORD LEFT_PAREN term_arguments RIGHT_PAREN
-- On LEFT_IMPLY reduce production defined_plain_term -> DOLLAR_WORD LEFT_PAREN term_arguments RIGHT_PAREN
-- On IMPLY reduce production defined_plain_term -> DOLLAR_WORD LEFT_PAREN term_arguments RIGHT_PAREN
-- On EQUIV reduce production defined_plain_term -> DOLLAR_WORD LEFT_PAREN term_arguments RIGHT_PAREN
-- On EQUAL reduce production defined_plain_term -> DOLLAR_WORD LEFT_PAREN term_arguments RIGHT_PAREN
-- On EOI reduce production defined_plain_term -> DOLLAR_WORD LEFT_PAREN term_arguments RIGHT_PAREN
-- On COMMA reduce production defined_plain_term -> DOLLAR_WORD LEFT_PAREN term_arguments RIGHT_PAREN
-- On AT reduce production defined_plain_term -> DOLLAR_WORD LEFT_PAREN term_arguments RIGHT_PAREN
-- On ARROW reduce production defined_plain_term -> DOLLAR_WORD LEFT_PAREN term_arguments RIGHT_PAREN
-- On AND reduce production defined_plain_term -> DOLLAR_WORD LEFT_PAREN term_arguments RIGHT_PAREN

State 210:
separated_nonempty_list(COMMA,term) -> term . [ RIGHT_BRACKET ]
separated_nonempty_list(COMMA,term) -> term . COMMA separated_nonempty_list(COMMA,term) [ RIGHT_BRACKET ]
-- On COMMA shift to state 211
-- On RIGHT_BRACKET reduce production separated_nonempty_list(COMMA,term) -> term

State 211:
separated_nonempty_list(COMMA,term) -> term COMMA . separated_nonempty_list(COMMA,term) [ RIGHT_BRACKET ]
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On LOWER_WORD shift to state 9
-- On INTEGER shift to state 10
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On variable shift to state 77
-- On term shift to state 210
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On separated_nonempty_list(COMMA,term) shift to state 212
-- On plain_term shift to state 95
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_defined_word shift to state 119

State 212:
separated_nonempty_list(COMMA,term) -> term COMMA separated_nonempty_list(COMMA,term) . [ RIGHT_BRACKET ]
-- On RIGHT_BRACKET reduce production separated_nonempty_list(COMMA,term) -> term COMMA separated_nonempty_list(COMMA,term)

State 213:
answer_tuple -> LEFT_BRACKET separated_nonempty_list(COMMA,term) . RIGHT_BRACKET [ VLINE RIGHT_BRACKET ]
-- On RIGHT_BRACKET shift to state 214

State 214:
answer_tuple -> LEFT_BRACKET separated_nonempty_list(COMMA,term) RIGHT_BRACKET . [ VLINE RIGHT_BRACKET ]
-- On VLINE reduce production answer_tuple -> LEFT_BRACKET separated_nonempty_list(COMMA,term) RIGHT_BRACKET
-- On RIGHT_BRACKET reduce production answer_tuple -> LEFT_BRACKET separated_nonempty_list(COMMA,term) RIGHT_BRACKET

State 215:
answer_tuples -> LEFT_BRACKET separated_nonempty_list(VLINE,answer_tuple) . RIGHT_BRACKET [ EOI ]
-- On RIGHT_BRACKET shift to state 216

State 216:
answer_tuples -> LEFT_BRACKET separated_nonempty_list(VLINE,answer_tuple) RIGHT_BRACKET . [ EOI ]
-- On EOI reduce production answer_tuples -> LEFT_BRACKET separated_nonempty_list(VLINE,answer_tuple) RIGHT_BRACKET

State 217:
separated_nonempty_list(VLINE,answer_tuple) -> answer_tuple . [ RIGHT_BRACKET ]
separated_nonempty_list(VLINE,answer_tuple) -> answer_tuple . VLINE separated_nonempty_list(VLINE,answer_tuple) [ RIGHT_BRACKET ]
-- On VLINE shift to state 218
-- On RIGHT_BRACKET reduce production separated_nonempty_list(VLINE,answer_tuple) -> answer_tuple

State 218:
separated_nonempty_list(VLINE,answer_tuple) -> answer_tuple VLINE . separated_nonempty_list(VLINE,answer_tuple) [ RIGHT_BRACKET ]
-- On UNDERSCORE shift to state 2
-- On LEFT_BRACKET shift to state 3
-- On separated_nonempty_list(VLINE,answer_tuple) shift to state 219
-- On answer_tuple shift to state 217

State 219:
separated_nonempty_list(VLINE,answer_tuple) -> answer_tuple VLINE separated_nonempty_list(VLINE,answer_tuple) . [ RIGHT_BRACKET ]
-- On RIGHT_BRACKET reduce production separated_nonempty_list(VLINE,answer_tuple) -> answer_tuple VLINE separated_nonempty_list(VLINE,answer_tuple)

State 220:
parse_answer_tuple' -> parse_answer_tuple . [ # ]
-- On # accept parse_answer_tuple

State 221:
parse_answer_tuple -> answer_tuples . EOI [ # ]
-- On EOI shift to state 222

State 222:
parse_answer_tuple -> answer_tuples EOI . [ # ]
-- On # reduce production parse_answer_tuple -> answer_tuples EOI

State 223:
parse_declaration' -> . parse_declaration [ # ]
-- On error shift to state 224
-- On THF shift to state 225
-- On TFF shift to state 283
-- On INCLUDE shift to state 297
-- On FOF shift to state 311
-- On CNF shift to state 321
-- On parse_declaration shift to state 347
-- On declaration shift to state 348

State 224:
declaration -> error . [ EOI ]
-- On EOI reduce production declaration -> error

State 225:
declaration -> THF . LEFT_PAREN name COMMA role COMMA formula annotations RIGHT_PAREN DOT [ EOI ]
declaration -> THF . LEFT_PAREN name COMMA role COMMA type_decl annotations RIGHT_PAREN DOT [ EOI ]
-- On LEFT_PAREN shift to state 226

State 226:
declaration -> THF LEFT_PAREN . name COMMA role COMMA formula annotations RIGHT_PAREN DOT [ EOI ]
declaration -> THF LEFT_PAREN . name COMMA role COMMA type_decl annotations RIGHT_PAREN DOT [ EOI ]
-- On SINGLE_QUOTED shift to state 6
-- On LOWER_WORD shift to state 9
-- On INTEGER shift to state 227
-- On name shift to state 228
-- On atomic_word shift to state 282

State 227:
name -> INTEGER . [ RIGHT_PAREN COMMA ]
-- On RIGHT_PAREN reduce production name -> INTEGER
-- On COMMA reduce production name -> INTEGER

State 228:
declaration -> THF LEFT_PAREN name . COMMA role COMMA formula annotations RIGHT_PAREN DOT [ EOI ]
declaration -> THF LEFT_PAREN name . COMMA role COMMA type_decl annotations RIGHT_PAREN DOT [ EOI ]
-- On COMMA shift to state 229

State 229:
declaration -> THF LEFT_PAREN name COMMA . role COMMA formula annotations RIGHT_PAREN DOT [ EOI ]
declaration -> THF LEFT_PAREN name COMMA . role COMMA type_decl annotations RIGHT_PAREN DOT [ EOI ]
-- On LOWER_WORD shift to state 230
-- On role shift to state 231

State 230:
role -> LOWER_WORD . [ COMMA ]
-- On COMMA reduce production role -> LOWER_WORD

State 231:
declaration -> THF LEFT_PAREN name COMMA role . COMMA formula annotations RIGHT_PAREN DOT [ EOI ]
declaration -> THF LEFT_PAREN name COMMA role . COMMA type_decl annotations RIGHT_PAREN DOT [ EOI ]
-- On COMMA shift to state 232

State 232:
declaration -> THF LEFT_PAREN name COMMA role COMMA . formula annotations RIGHT_PAREN DOT [ EOI ]
declaration -> THF LEFT_PAREN name COMMA role COMMA . type_decl annotations RIGHT_PAREN DOT [ EOI ]
-- On XOR shift to state 13
-- On WILDCARD shift to state 4
-- On VLINE shift to state 18
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOTVLINE shift to state 88
-- On NOTAND shift to state 98
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 233
-- On LEFT_IMPLY shift to state 108
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On IMPLY shift to state 120
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On EQUIV shift to state 125
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On ARROW shift to state 130
-- On AND shift to state 135
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 140
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 143
-- On type_decl shift to state 253
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On or_formula shift to state 171
-- On nonassoc_binary_formula shift to state 172
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On formula shift to state 278
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On binary_formula shift to state 176
-- On atomic_word shift to state 236
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119
-- On assoc_binary_formula_aux(VLINE) shift to state 177
-- On assoc_binary_formula_aux(AND) shift to state 178
-- On assoc_binary_formula shift to state 179
-- On app_formula shift to state 180
-- On and_formula shift to state 183

State 233:
type_decl -> LEFT_PAREN . type_decl RIGHT_PAREN [ RIGHT_PAREN COMMA ]
unitary_atomic_formula -> LEFT_PAREN . formula RIGHT_PAREN [ XOR VLINE RIGHT_PAREN NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA AT ARROW AND ]
-- On XOR shift to state 13
-- On WILDCARD shift to state 4
-- On VLINE shift to state 18
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOTVLINE shift to state 88
-- On NOTAND shift to state 98
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 233
-- On LEFT_IMPLY shift to state 108
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On IMPLY shift to state 120
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On EQUIV shift to state 125
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On ARROW shift to state 130
-- On AND shift to state 135
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 140
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 143
-- On type_decl shift to state 234
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On or_formula shift to state 171
-- On nonassoc_binary_formula shift to state 172
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On formula shift to state 200
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On binary_formula shift to state 176
-- On atomic_word shift to state 236
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119
-- On assoc_binary_formula_aux(VLINE) shift to state 177
-- On assoc_binary_formula_aux(AND) shift to state 178
-- On assoc_binary_formula shift to state 179
-- On app_formula shift to state 180
-- On and_formula shift to state 183

State 234:
type_decl -> LEFT_PAREN type_decl . RIGHT_PAREN [ RIGHT_PAREN COMMA ]
-- On RIGHT_PAREN shift to state 235

State 235:
type_decl -> LEFT_PAREN type_decl RIGHT_PAREN . [ RIGHT_PAREN COMMA ]
-- On RIGHT_PAREN reduce production type_decl -> LEFT_PAREN type_decl RIGHT_PAREN
-- On COMMA reduce production type_decl -> LEFT_PAREN type_decl RIGHT_PAREN

State 236:
atomic_term -> atomic_word . [ XOR VLINE RIGHT_PAREN NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA AT ARROW AND ]
functor_ -> atomic_word . [ LEFT_PAREN ]
type_decl -> atomic_word . COLUMN tff_quantified_type [ RIGHT_PAREN COMMA ]
-- On COLUMN shift to state 237
-- On XOR reduce production atomic_term -> atomic_word
-- On VLINE reduce production atomic_term -> atomic_word
-- On RIGHT_PAREN reduce production atomic_term -> atomic_word
-- On NOT_EQUAL reduce production atomic_term -> atomic_word
-- On NOTVLINE reduce production atomic_term -> atomic_word
-- On NOTAND reduce production atomic_term -> atomic_word
-- On LEFT_PAREN reduce production functor_ -> atomic_word
-- On LEFT_IMPLY reduce production atomic_term -> atomic_word
-- On IMPLY reduce production atomic_term -> atomic_word
-- On EQUIV reduce production atomic_term -> atomic_word
-- On EQUAL reduce production atomic_term -> atomic_word
-- On COMMA reduce production atomic_term -> atomic_word
-- On AT reduce production atomic_term -> atomic_word
-- On ARROW reduce production atomic_term -> atomic_word
-- On AND reduce production atomic_term -> atomic_word

State 237:
type_decl -> atomic_word COLUMN . tff_quantified_type [ RIGHT_PAREN COMMA ]
-- On WILDCARD shift to state 24
-- On UPPER_WORD shift to state 5
-- On TYPE_TY shift to state 25
-- On SINGLE_QUOTED shift to state 6
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 27
-- On FORALL_TY shift to state 238
-- On DOLLAR_WORD shift to state 28
-- On variable shift to state 29
-- On type_const shift to state 30
-- On tff_type shift to state 45
-- On tff_toplevel_type shift to state 246
-- On tff_quantified_type shift to state 252
-- On tff_atomic_type shift to state 34
-- On tff_app_type shift to state 35
-- On defined_ty shift to state 38
-- On atomic_word shift to state 39

State 238:
tff_quantified_type -> FORALL_TY . LEFT_BRACKET tff_ty_vars RIGHT_BRACKET COLUMN tff_quantified_type [ RIGHT_PAREN COMMA ]
-- On LEFT_BRACKET shift to state 239

State 239:
tff_quantified_type -> FORALL_TY LEFT_BRACKET . tff_ty_vars RIGHT_BRACKET COLUMN tff_quantified_type [ RIGHT_PAREN COMMA ]
-- On UPPER_WORD shift to state 240
-- On tff_ty_vars shift to state 243
-- On tff_ty_var shift to state 248
-- On separated_nonempty_list(COMMA,tff_ty_var) shift to state 251

State 240:
tff_ty_var -> UPPER_WORD . COLUMN TYPE_TY [ RIGHT_BRACKET COMMA ]
-- On COLUMN shift to state 241

State 241:
tff_ty_var -> UPPER_WORD COLUMN . TYPE_TY [ RIGHT_BRACKET COMMA ]
-- On TYPE_TY shift to state 242

State 242:
tff_ty_var -> UPPER_WORD COLUMN TYPE_TY . [ RIGHT_BRACKET COMMA ]
-- On RIGHT_BRACKET reduce production tff_ty_var -> UPPER_WORD COLUMN TYPE_TY
-- On COMMA reduce production tff_ty_var -> UPPER_WORD COLUMN TYPE_TY

State 243:
tff_quantified_type -> FORALL_TY LEFT_BRACKET tff_ty_vars . RIGHT_BRACKET COLUMN tff_quantified_type [ RIGHT_PAREN COMMA ]
-- On RIGHT_BRACKET shift to state 244

State 244:
tff_quantified_type -> FORALL_TY LEFT_BRACKET tff_ty_vars RIGHT_BRACKET . COLUMN tff_quantified_type [ RIGHT_PAREN COMMA ]
-- On COLUMN shift to state 245

State 245:
tff_quantified_type -> FORALL_TY LEFT_BRACKET tff_ty_vars RIGHT_BRACKET COLUMN . tff_quantified_type [ RIGHT_PAREN COMMA ]
-- On WILDCARD shift to state 24
-- On UPPER_WORD shift to state 5
-- On TYPE_TY shift to state 25
-- On SINGLE_QUOTED shift to state 6
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 27
-- On FORALL_TY shift to state 238
-- On DOLLAR_WORD shift to state 28
-- On variable shift to state 29
-- On type_const shift to state 30
-- On tff_type shift to state 45
-- On tff_toplevel_type shift to state 246
-- On tff_quantified_type shift to state 247
-- On tff_atomic_type shift to state 34
-- On tff_app_type shift to state 35
-- On defined_ty shift to state 38
-- On atomic_word shift to state 39

State 246:
tff_quantified_type -> tff_toplevel_type . [ RIGHT_PAREN COMMA ]
-- On RIGHT_PAREN reduce production tff_quantified_type -> tff_toplevel_type
-- On COMMA reduce production tff_quantified_type -> tff_toplevel_type

State 247:
tff_quantified_type -> FORALL_TY LEFT_BRACKET tff_ty_vars RIGHT_BRACKET COLUMN tff_quantified_type . [ RIGHT_PAREN COMMA ]
-- On RIGHT_PAREN reduce production tff_quantified_type -> FORALL_TY LEFT_BRACKET tff_ty_vars RIGHT_BRACKET COLUMN tff_quantified_type
-- On COMMA reduce production tff_quantified_type -> FORALL_TY LEFT_BRACKET tff_ty_vars RIGHT_BRACKET COLUMN tff_quantified_type

State 248:
separated_nonempty_list(COMMA,tff_ty_var) -> tff_ty_var . [ RIGHT_BRACKET ]
separated_nonempty_list(COMMA,tff_ty_var) -> tff_ty_var . COMMA separated_nonempty_list(COMMA,tff_ty_var) [ RIGHT_BRACKET ]
-- On COMMA shift to state 249
-- On RIGHT_BRACKET reduce production separated_nonempty_list(COMMA,tff_ty_var) -> tff_ty_var

State 249:
separated_nonempty_list(COMMA,tff_ty_var) -> tff_ty_var COMMA . separated_nonempty_list(COMMA,tff_ty_var) [ RIGHT_BRACKET ]
-- On UPPER_WORD shift to state 240
-- On tff_ty_var shift to state 248
-- On separated_nonempty_list(COMMA,tff_ty_var) shift to state 250

State 250:
separated_nonempty_list(COMMA,tff_ty_var) -> tff_ty_var COMMA separated_nonempty_list(COMMA,tff_ty_var) . [ RIGHT_BRACKET ]
-- On RIGHT_BRACKET reduce production separated_nonempty_list(COMMA,tff_ty_var) -> tff_ty_var COMMA separated_nonempty_list(COMMA,tff_ty_var)

State 251:
tff_ty_vars -> separated_nonempty_list(COMMA,tff_ty_var) . [ RIGHT_BRACKET ]
-- On RIGHT_BRACKET reduce production tff_ty_vars -> separated_nonempty_list(COMMA,tff_ty_var)

State 252:
type_decl -> atomic_word COLUMN tff_quantified_type . [ RIGHT_PAREN COMMA ]
-- On RIGHT_PAREN reduce production type_decl -> atomic_word COLUMN tff_quantified_type
-- On COMMA reduce production type_decl -> atomic_word COLUMN tff_quantified_type

State 253:
declaration -> THF LEFT_PAREN name COMMA role COMMA type_decl . annotations RIGHT_PAREN DOT [ EOI ]
-- On COMMA shift to state 254
-- On annotations shift to state 275
-- On RIGHT_PAREN reduce production annotations -> 

State 254:
annotations -> COMMA . loption(separated_nonempty_list(COMMA,general_term)) [ RIGHT_PAREN ]
-- On UPPER_WORD shift to state 255
-- On SINGLE_QUOTED shift to state 6
-- On LOWER_WORD shift to state 9
-- On LEFT_BRACKET shift to state 256
-- On INTEGER shift to state 257
-- On DISTINCT_OBJECT shift to state 258
-- On separated_nonempty_list(COMMA,general_term) shift to state 259
-- On loption(separated_nonempty_list(COMMA,general_term)) shift to state 274
-- On general_term shift to state 262
-- On general_list shift to state 265
-- On general_function shift to state 266
-- On general_data shift to state 267
-- On atomic_word shift to state 270
-- On RIGHT_PAREN reduce production loption(separated_nonempty_list(COMMA,general_term)) -> 

State 255:
general_data -> UPPER_WORD . [ RIGHT_PAREN RIGHT_BRACKET COMMA COLUMN ]
-- On RIGHT_PAREN reduce production general_data -> UPPER_WORD
-- On RIGHT_BRACKET reduce production general_data -> UPPER_WORD
-- On COMMA reduce production general_data -> UPPER_WORD
-- On COLUMN reduce production general_data -> UPPER_WORD

State 256:
general_list -> LEFT_BRACKET . loption(separated_nonempty_list(COMMA,general_term)) RIGHT_BRACKET [ RIGHT_PAREN RIGHT_BRACKET COMMA ]
-- On UPPER_WORD shift to state 255
-- On SINGLE_QUOTED shift to state 6
-- On LOWER_WORD shift to state 9
-- On LEFT_BRACKET shift to state 256
-- On INTEGER shift to state 257
-- On DISTINCT_OBJECT shift to state 258
-- On separated_nonempty_list(COMMA,general_term) shift to state 259
-- On loption(separated_nonempty_list(COMMA,general_term)) shift to state 260
-- On general_term shift to state 262
-- On general_list shift to state 265
-- On general_function shift to state 266
-- On general_data shift to state 267
-- On atomic_word shift to state 270
-- On RIGHT_BRACKET reduce production loption(separated_nonempty_list(COMMA,general_term)) -> 

State 257:
general_data -> INTEGER . [ RIGHT_PAREN RIGHT_BRACKET COMMA COLUMN ]
-- On RIGHT_PAREN reduce production general_data -> INTEGER
-- On RIGHT_BRACKET reduce production general_data -> INTEGER
-- On COMMA reduce production general_data -> INTEGER
-- On COLUMN reduce production general_data -> INTEGER

State 258:
general_data -> DISTINCT_OBJECT . [ RIGHT_PAREN RIGHT_BRACKET COMMA COLUMN ]
-- On RIGHT_PAREN reduce production general_data -> DISTINCT_OBJECT
-- On RIGHT_BRACKET reduce production general_data -> DISTINCT_OBJECT
-- On COMMA reduce production general_data -> DISTINCT_OBJECT
-- On COLUMN reduce production general_data -> DISTINCT_OBJECT

State 259:
loption(separated_nonempty_list(COMMA,general_term)) -> separated_nonempty_list(COMMA,general_term) . [ RIGHT_PAREN RIGHT_BRACKET ]
-- On RIGHT_PAREN reduce production loption(separated_nonempty_list(COMMA,general_term)) -> separated_nonempty_list(COMMA,general_term)
-- On RIGHT_BRACKET reduce production loption(separated_nonempty_list(COMMA,general_term)) -> separated_nonempty_list(COMMA,general_term)

State 260:
general_list -> LEFT_BRACKET loption(separated_nonempty_list(COMMA,general_term)) . RIGHT_BRACKET [ RIGHT_PAREN RIGHT_BRACKET COMMA ]
-- On RIGHT_BRACKET shift to state 261

State 261:
general_list -> LEFT_BRACKET loption(separated_nonempty_list(COMMA,general_term)) RIGHT_BRACKET . [ RIGHT_PAREN RIGHT_BRACKET COMMA ]
-- On RIGHT_PAREN reduce production general_list -> LEFT_BRACKET loption(separated_nonempty_list(COMMA,general_term)) RIGHT_BRACKET
-- On RIGHT_BRACKET reduce production general_list -> LEFT_BRACKET loption(separated_nonempty_list(COMMA,general_term)) RIGHT_BRACKET
-- On COMMA reduce production general_list -> LEFT_BRACKET loption(separated_nonempty_list(COMMA,general_term)) RIGHT_BRACKET

State 262:
separated_nonempty_list(COMMA,general_term) -> general_term . [ RIGHT_PAREN RIGHT_BRACKET ]
separated_nonempty_list(COMMA,general_term) -> general_term . COMMA separated_nonempty_list(COMMA,general_term) [ RIGHT_PAREN RIGHT_BRACKET ]
-- On COMMA shift to state 263
-- On RIGHT_PAREN reduce production separated_nonempty_list(COMMA,general_term) -> general_term
-- On RIGHT_BRACKET reduce production separated_nonempty_list(COMMA,general_term) -> general_term

State 263:
separated_nonempty_list(COMMA,general_term) -> general_term COMMA . separated_nonempty_list(COMMA,general_term) [ RIGHT_PAREN RIGHT_BRACKET ]
-- On UPPER_WORD shift to state 255
-- On SINGLE_QUOTED shift to state 6
-- On LOWER_WORD shift to state 9
-- On LEFT_BRACKET shift to state 256
-- On INTEGER shift to state 257
-- On DISTINCT_OBJECT shift to state 258
-- On separated_nonempty_list(COMMA,general_term) shift to state 264
-- On general_term shift to state 262
-- On general_list shift to state 265
-- On general_function shift to state 266
-- On general_data shift to state 267
-- On atomic_word shift to state 270

State 264:
separated_nonempty_list(COMMA,general_term) -> general_term COMMA separated_nonempty_list(COMMA,general_term) . [ RIGHT_PAREN RIGHT_BRACKET ]
-- On RIGHT_PAREN reduce production separated_nonempty_list(COMMA,general_term) -> general_term COMMA separated_nonempty_list(COMMA,general_term)
-- On RIGHT_BRACKET reduce production separated_nonempty_list(COMMA,general_term) -> general_term COMMA separated_nonempty_list(COMMA,general_term)

State 265:
general_term -> general_list . [ RIGHT_PAREN RIGHT_BRACKET COMMA ]
-- On RIGHT_PAREN reduce production general_term -> general_list
-- On RIGHT_BRACKET reduce production general_term -> general_list
-- On COMMA reduce production general_term -> general_list

State 266:
general_data -> general_function . [ RIGHT_PAREN RIGHT_BRACKET COMMA COLUMN ]
-- On RIGHT_PAREN reduce production general_data -> general_function
-- On RIGHT_BRACKET reduce production general_data -> general_function
-- On COMMA reduce production general_data -> general_function
-- On COLUMN reduce production general_data -> general_function

State 267:
general_term -> general_data . [ RIGHT_PAREN RIGHT_BRACKET COMMA ]
general_term -> general_data . COLUMN general_term [ RIGHT_PAREN RIGHT_BRACKET COMMA ]
-- On COLUMN shift to state 268
-- On RIGHT_PAREN reduce production general_term -> general_data
-- On RIGHT_BRACKET reduce production general_term -> general_data
-- On COMMA reduce production general_term -> general_data

State 268:
general_term -> general_data COLUMN . general_term [ RIGHT_PAREN RIGHT_BRACKET COMMA ]
-- On UPPER_WORD shift to state 255
-- On SINGLE_QUOTED shift to state 6
-- On LOWER_WORD shift to state 9
-- On LEFT_BRACKET shift to state 256
-- On INTEGER shift to state 257
-- On DISTINCT_OBJECT shift to state 258
-- On general_term shift to state 269
-- On general_list shift to state 265
-- On general_function shift to state 266
-- On general_data shift to state 267
-- On atomic_word shift to state 270

State 269:
general_term -> general_data COLUMN general_term . [ RIGHT_PAREN RIGHT_BRACKET COMMA ]
-- On RIGHT_PAREN reduce production general_term -> general_data COLUMN general_term
-- On RIGHT_BRACKET reduce production general_term -> general_data COLUMN general_term
-- On COMMA reduce production general_term -> general_data COLUMN general_term

State 270:
general_data -> atomic_word . [ RIGHT_PAREN RIGHT_BRACKET COMMA COLUMN ]
general_function -> atomic_word . LEFT_PAREN separated_nonempty_list(COMMA,general_term) RIGHT_PAREN [ RIGHT_PAREN RIGHT_BRACKET COMMA COLUMN ]
-- On LEFT_PAREN shift to state 271
-- On RIGHT_PAREN reduce production general_data -> atomic_word
-- On RIGHT_BRACKET reduce production general_data -> atomic_word
-- On COMMA reduce production general_data -> atomic_word
-- On COLUMN reduce production general_data -> atomic_word

State 271:
general_function -> atomic_word LEFT_PAREN . separated_nonempty_list(COMMA,general_term) RIGHT_PAREN [ RIGHT_PAREN RIGHT_BRACKET COMMA COLUMN ]
-- On UPPER_WORD shift to state 255
-- On SINGLE_QUOTED shift to state 6
-- On LOWER_WORD shift to state 9
-- On LEFT_BRACKET shift to state 256
-- On INTEGER shift to state 257
-- On DISTINCT_OBJECT shift to state 258
-- On separated_nonempty_list(COMMA,general_term) shift to state 272
-- On general_term shift to state 262
-- On general_list shift to state 265
-- On general_function shift to state 266
-- On general_data shift to state 267
-- On atomic_word shift to state 270

State 272:
general_function -> atomic_word LEFT_PAREN separated_nonempty_list(COMMA,general_term) . RIGHT_PAREN [ RIGHT_PAREN RIGHT_BRACKET COMMA COLUMN ]
-- On RIGHT_PAREN shift to state 273

State 273:
general_function -> atomic_word LEFT_PAREN separated_nonempty_list(COMMA,general_term) RIGHT_PAREN . [ RIGHT_PAREN RIGHT_BRACKET COMMA COLUMN ]
-- On RIGHT_PAREN reduce production general_function -> atomic_word LEFT_PAREN separated_nonempty_list(COMMA,general_term) RIGHT_PAREN
-- On RIGHT_BRACKET reduce production general_function -> atomic_word LEFT_PAREN separated_nonempty_list(COMMA,general_term) RIGHT_PAREN
-- On COMMA reduce production general_function -> atomic_word LEFT_PAREN separated_nonempty_list(COMMA,general_term) RIGHT_PAREN
-- On COLUMN reduce production general_function -> atomic_word LEFT_PAREN separated_nonempty_list(COMMA,general_term) RIGHT_PAREN

State 274:
annotations -> COMMA loption(separated_nonempty_list(COMMA,general_term)) . [ RIGHT_PAREN ]
-- On RIGHT_PAREN reduce production annotations -> COMMA loption(separated_nonempty_list(COMMA,general_term))

State 275:
declaration -> THF LEFT_PAREN name COMMA role COMMA type_decl annotations . RIGHT_PAREN DOT [ EOI ]
-- On RIGHT_PAREN shift to state 276

State 276:
declaration -> THF LEFT_PAREN name COMMA role COMMA type_decl annotations RIGHT_PAREN . DOT [ EOI ]
-- On DOT shift to state 277

State 277:
declaration -> THF LEFT_PAREN name COMMA role COMMA type_decl annotations RIGHT_PAREN DOT . [ EOI ]
-- On EOI reduce production declaration -> THF LEFT_PAREN name COMMA role COMMA type_decl annotations RIGHT_PAREN DOT

State 278:
declaration -> THF LEFT_PAREN name COMMA role COMMA formula . annotations RIGHT_PAREN DOT [ EOI ]
-- On COMMA shift to state 254
-- On annotations shift to state 279
-- On RIGHT_PAREN reduce production annotations -> 

State 279:
declaration -> THF LEFT_PAREN name COMMA role COMMA formula annotations . RIGHT_PAREN DOT [ EOI ]
-- On RIGHT_PAREN shift to state 280

State 280:
declaration -> THF LEFT_PAREN name COMMA role COMMA formula annotations RIGHT_PAREN . DOT [ EOI ]
-- On DOT shift to state 281

State 281:
declaration -> THF LEFT_PAREN name COMMA role COMMA formula annotations RIGHT_PAREN DOT . [ EOI ]
-- On EOI reduce production declaration -> THF LEFT_PAREN name COMMA role COMMA formula annotations RIGHT_PAREN DOT

State 282:
name -> atomic_word . [ RIGHT_PAREN COMMA ]
-- On RIGHT_PAREN reduce production name -> atomic_word
-- On COMMA reduce production name -> atomic_word

State 283:
declaration -> TFF . LEFT_PAREN name COMMA role COMMA formula annotations RIGHT_PAREN DOT [ EOI ]
declaration -> TFF . LEFT_PAREN name COMMA role COMMA type_decl annotations RIGHT_PAREN DOT [ EOI ]
-- On LEFT_PAREN shift to state 284

State 284:
declaration -> TFF LEFT_PAREN . name COMMA role COMMA formula annotations RIGHT_PAREN DOT [ EOI ]
declaration -> TFF LEFT_PAREN . name COMMA role COMMA type_decl annotations RIGHT_PAREN DOT [ EOI ]
-- On SINGLE_QUOTED shift to state 6
-- On LOWER_WORD shift to state 9
-- On INTEGER shift to state 227
-- On name shift to state 285
-- On atomic_word shift to state 282

State 285:
declaration -> TFF LEFT_PAREN name . COMMA role COMMA formula annotations RIGHT_PAREN DOT [ EOI ]
declaration -> TFF LEFT_PAREN name . COMMA role COMMA type_decl annotations RIGHT_PAREN DOT [ EOI ]
-- On COMMA shift to state 286

State 286:
declaration -> TFF LEFT_PAREN name COMMA . role COMMA formula annotations RIGHT_PAREN DOT [ EOI ]
declaration -> TFF LEFT_PAREN name COMMA . role COMMA type_decl annotations RIGHT_PAREN DOT [ EOI ]
-- On LOWER_WORD shift to state 230
-- On role shift to state 287

State 287:
declaration -> TFF LEFT_PAREN name COMMA role . COMMA formula annotations RIGHT_PAREN DOT [ EOI ]
declaration -> TFF LEFT_PAREN name COMMA role . COMMA type_decl annotations RIGHT_PAREN DOT [ EOI ]
-- On COMMA shift to state 288

State 288:
declaration -> TFF LEFT_PAREN name COMMA role COMMA . formula annotations RIGHT_PAREN DOT [ EOI ]
declaration -> TFF LEFT_PAREN name COMMA role COMMA . type_decl annotations RIGHT_PAREN DOT [ EOI ]
-- On XOR shift to state 13
-- On WILDCARD shift to state 4
-- On VLINE shift to state 18
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOTVLINE shift to state 88
-- On NOTAND shift to state 98
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 233
-- On LEFT_IMPLY shift to state 108
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On IMPLY shift to state 120
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On EQUIV shift to state 125
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On ARROW shift to state 130
-- On AND shift to state 135
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 140
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 143
-- On type_decl shift to state 289
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On or_formula shift to state 171
-- On nonassoc_binary_formula shift to state 172
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On formula shift to state 293
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On binary_formula shift to state 176
-- On atomic_word shift to state 236
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119
-- On assoc_binary_formula_aux(VLINE) shift to state 177
-- On assoc_binary_formula_aux(AND) shift to state 178
-- On assoc_binary_formula shift to state 179
-- On app_formula shift to state 180
-- On and_formula shift to state 183

State 289:
declaration -> TFF LEFT_PAREN name COMMA role COMMA type_decl . annotations RIGHT_PAREN DOT [ EOI ]
-- On COMMA shift to state 254
-- On annotations shift to state 290
-- On RIGHT_PAREN reduce production annotations -> 

State 290:
declaration -> TFF LEFT_PAREN name COMMA role COMMA type_decl annotations . RIGHT_PAREN DOT [ EOI ]
-- On RIGHT_PAREN shift to state 291

State 291:
declaration -> TFF LEFT_PAREN name COMMA role COMMA type_decl annotations RIGHT_PAREN . DOT [ EOI ]
-- On DOT shift to state 292

State 292:
declaration -> TFF LEFT_PAREN name COMMA role COMMA type_decl annotations RIGHT_PAREN DOT . [ EOI ]
-- On EOI reduce production declaration -> TFF LEFT_PAREN name COMMA role COMMA type_decl annotations RIGHT_PAREN DOT

State 293:
declaration -> TFF LEFT_PAREN name COMMA role COMMA formula . annotations RIGHT_PAREN DOT [ EOI ]
-- On COMMA shift to state 254
-- On annotations shift to state 294
-- On RIGHT_PAREN reduce production annotations -> 

State 294:
declaration -> TFF LEFT_PAREN name COMMA role COMMA formula annotations . RIGHT_PAREN DOT [ EOI ]
-- On RIGHT_PAREN shift to state 295

State 295:
declaration -> TFF LEFT_PAREN name COMMA role COMMA formula annotations RIGHT_PAREN . DOT [ EOI ]
-- On DOT shift to state 296

State 296:
declaration -> TFF LEFT_PAREN name COMMA role COMMA formula annotations RIGHT_PAREN DOT . [ EOI ]
-- On EOI reduce production declaration -> TFF LEFT_PAREN name COMMA role COMMA formula annotations RIGHT_PAREN DOT

State 297:
declaration -> INCLUDE . LEFT_PAREN SINGLE_QUOTED RIGHT_PAREN DOT [ EOI ]
declaration -> INCLUDE . LEFT_PAREN SINGLE_QUOTED COMMA name_list RIGHT_PAREN DOT [ EOI ]
-- On LEFT_PAREN shift to state 298

State 298:
declaration -> INCLUDE LEFT_PAREN . SINGLE_QUOTED RIGHT_PAREN DOT [ EOI ]
declaration -> INCLUDE LEFT_PAREN . SINGLE_QUOTED COMMA name_list RIGHT_PAREN DOT [ EOI ]
-- On SINGLE_QUOTED shift to state 299

State 299:
declaration -> INCLUDE LEFT_PAREN SINGLE_QUOTED . RIGHT_PAREN DOT [ EOI ]
declaration -> INCLUDE LEFT_PAREN SINGLE_QUOTED . COMMA name_list RIGHT_PAREN DOT [ EOI ]
-- On RIGHT_PAREN shift to state 300
-- On COMMA shift to state 302

State 300:
declaration -> INCLUDE LEFT_PAREN SINGLE_QUOTED RIGHT_PAREN . DOT [ EOI ]
-- On DOT shift to state 301

State 301:
declaration -> INCLUDE LEFT_PAREN SINGLE_QUOTED RIGHT_PAREN DOT . [ EOI ]
-- On EOI reduce production declaration -> INCLUDE LEFT_PAREN SINGLE_QUOTED RIGHT_PAREN DOT

State 302:
declaration -> INCLUDE LEFT_PAREN SINGLE_QUOTED COMMA . name_list RIGHT_PAREN DOT [ EOI ]
-- On SINGLE_QUOTED shift to state 6
-- On LOWER_WORD shift to state 9
-- On INTEGER shift to state 227
-- On separated_nonempty_list(COMMA,name) shift to state 303
-- On name_list shift to state 304
-- On name shift to state 307
-- On loption(separated_nonempty_list(COMMA,name)) shift to state 310
-- On atomic_word shift to state 282
-- On RIGHT_PAREN reduce production loption(separated_nonempty_list(COMMA,name)) -> 

State 303:
loption(separated_nonempty_list(COMMA,name)) -> separated_nonempty_list(COMMA,name) . [ RIGHT_PAREN ]
-- On RIGHT_PAREN reduce production loption(separated_nonempty_list(COMMA,name)) -> separated_nonempty_list(COMMA,name)

State 304:
declaration -> INCLUDE LEFT_PAREN SINGLE_QUOTED COMMA name_list . RIGHT_PAREN DOT [ EOI ]
-- On RIGHT_PAREN shift to state 305

State 305:
declaration -> INCLUDE LEFT_PAREN SINGLE_QUOTED COMMA name_list RIGHT_PAREN . DOT [ EOI ]
-- On DOT shift to state 306

State 306:
declaration -> INCLUDE LEFT_PAREN SINGLE_QUOTED COMMA name_list RIGHT_PAREN DOT . [ EOI ]
-- On EOI reduce production declaration -> INCLUDE LEFT_PAREN SINGLE_QUOTED COMMA name_list RIGHT_PAREN DOT

State 307:
separated_nonempty_list(COMMA,name) -> name . [ RIGHT_PAREN ]
separated_nonempty_list(COMMA,name) -> name . COMMA separated_nonempty_list(COMMA,name) [ RIGHT_PAREN ]
-- On COMMA shift to state 308
-- On RIGHT_PAREN reduce production separated_nonempty_list(COMMA,name) -> name

State 308:
separated_nonempty_list(COMMA,name) -> name COMMA . separated_nonempty_list(COMMA,name) [ RIGHT_PAREN ]
-- On SINGLE_QUOTED shift to state 6
-- On LOWER_WORD shift to state 9
-- On INTEGER shift to state 227
-- On separated_nonempty_list(COMMA,name) shift to state 309
-- On name shift to state 307
-- On atomic_word shift to state 282

State 309:
separated_nonempty_list(COMMA,name) -> name COMMA separated_nonempty_list(COMMA,name) . [ RIGHT_PAREN ]
-- On RIGHT_PAREN reduce production separated_nonempty_list(COMMA,name) -> name COMMA separated_nonempty_list(COMMA,name)

State 310:
name_list -> loption(separated_nonempty_list(COMMA,name)) . [ RIGHT_PAREN ]
-- On RIGHT_PAREN reduce production name_list -> loption(separated_nonempty_list(COMMA,name))

State 311:
declaration -> FOF . LEFT_PAREN name COMMA role COMMA formula annotations RIGHT_PAREN DOT [ EOI ]
-- On LEFT_PAREN shift to state 312

State 312:
declaration -> FOF LEFT_PAREN . name COMMA role COMMA formula annotations RIGHT_PAREN DOT [ EOI ]
-- On SINGLE_QUOTED shift to state 6
-- On LOWER_WORD shift to state 9
-- On INTEGER shift to state 227
-- On name shift to state 313
-- On atomic_word shift to state 282

State 313:
declaration -> FOF LEFT_PAREN name . COMMA role COMMA formula annotations RIGHT_PAREN DOT [ EOI ]
-- On COMMA shift to state 314

State 314:
declaration -> FOF LEFT_PAREN name COMMA . role COMMA formula annotations RIGHT_PAREN DOT [ EOI ]
-- On LOWER_WORD shift to state 230
-- On role shift to state 315

State 315:
declaration -> FOF LEFT_PAREN name COMMA role . COMMA formula annotations RIGHT_PAREN DOT [ EOI ]
-- On COMMA shift to state 316

State 316:
declaration -> FOF LEFT_PAREN name COMMA role COMMA . formula annotations RIGHT_PAREN DOT [ EOI ]
-- On XOR shift to state 13
-- On WILDCARD shift to state 4
-- On VLINE shift to state 18
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOTVLINE shift to state 88
-- On NOTAND shift to state 98
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 17
-- On LEFT_IMPLY shift to state 108
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On IMPLY shift to state 120
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On EQUIV shift to state 125
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On ARROW shift to state 130
-- On AND shift to state 135
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 140
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 143
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On or_formula shift to state 171
-- On nonassoc_binary_formula shift to state 172
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On formula shift to state 317
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On binary_formula shift to state 176
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119
-- On assoc_binary_formula_aux(VLINE) shift to state 177
-- On assoc_binary_formula_aux(AND) shift to state 178
-- On assoc_binary_formula shift to state 179
-- On app_formula shift to state 180
-- On and_formula shift to state 183

State 317:
declaration -> FOF LEFT_PAREN name COMMA role COMMA formula . annotations RIGHT_PAREN DOT [ EOI ]
-- On COMMA shift to state 254
-- On annotations shift to state 318
-- On RIGHT_PAREN reduce production annotations -> 

State 318:
declaration -> FOF LEFT_PAREN name COMMA role COMMA formula annotations . RIGHT_PAREN DOT [ EOI ]
-- On RIGHT_PAREN shift to state 319

State 319:
declaration -> FOF LEFT_PAREN name COMMA role COMMA formula annotations RIGHT_PAREN . DOT [ EOI ]
-- On DOT shift to state 320

State 320:
declaration -> FOF LEFT_PAREN name COMMA role COMMA formula annotations RIGHT_PAREN DOT . [ EOI ]
-- On EOI reduce production declaration -> FOF LEFT_PAREN name COMMA role COMMA formula annotations RIGHT_PAREN DOT

State 321:
declaration -> CNF . LEFT_PAREN name COMMA role COMMA cnf_formula annotations RIGHT_PAREN DOT [ EOI ]
-- On LEFT_PAREN shift to state 322

State 322:
declaration -> CNF LEFT_PAREN . name COMMA role COMMA cnf_formula annotations RIGHT_PAREN DOT [ EOI ]
-- On SINGLE_QUOTED shift to state 6
-- On LOWER_WORD shift to state 9
-- On INTEGER shift to state 227
-- On name shift to state 323
-- On atomic_word shift to state 282

State 323:
declaration -> CNF LEFT_PAREN name . COMMA role COMMA cnf_formula annotations RIGHT_PAREN DOT [ EOI ]
-- On COMMA shift to state 324

State 324:
declaration -> CNF LEFT_PAREN name COMMA . role COMMA cnf_formula annotations RIGHT_PAREN DOT [ EOI ]
-- On LOWER_WORD shift to state 230
-- On role shift to state 325

State 325:
declaration -> CNF LEFT_PAREN name COMMA role . COMMA cnf_formula annotations RIGHT_PAREN DOT [ EOI ]
-- On COMMA shift to state 326

State 326:
declaration -> CNF LEFT_PAREN name COMMA role COMMA . cnf_formula annotations RIGHT_PAREN DOT [ EOI ]
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 327
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 334
-- On INTEGER shift to state 10
-- On FORALLCONST shift to state 62
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On variable shift to state 77
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On separated_nonempty_list(VLINE,literal) shift to state 335
-- On plain_term shift to state 95
-- On literal_atom shift to state 336
-- On literal shift to state 337
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On disjunction shift to state 340
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On cnf_formula shift to state 343
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 329
-- On atomic_defined_word shift to state 119

State 327:
literal -> NOT . literal_atom [ VLINE RIGHT_PAREN COMMA ]
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On LOWER_WORD shift to state 9
-- On INTEGER shift to state 10
-- On FORALLCONST shift to state 62
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On variable shift to state 77
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On plain_term shift to state 95
-- On literal_atom shift to state 328
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 329
-- On atomic_defined_word shift to state 119

State 328:
literal -> NOT literal_atom . [ VLINE RIGHT_PAREN COMMA ]
-- On VLINE reduce production literal -> NOT literal_atom
-- On RIGHT_PAREN reduce production literal -> NOT literal_atom
-- On COMMA reduce production literal -> NOT literal_atom

State 329:
literal_atom -> atomic_formula . [ VLINE RIGHT_PAREN COMMA ]
literal_atom -> atomic_formula . EQUAL atomic_formula [ VLINE RIGHT_PAREN COMMA ]
literal_atom -> atomic_formula . NOT_EQUAL atomic_formula [ VLINE RIGHT_PAREN COMMA ]
-- On NOT_EQUAL shift to state 330
-- On EQUAL shift to state 332
-- On VLINE reduce production literal_atom -> atomic_formula
-- On RIGHT_PAREN reduce production literal_atom -> atomic_formula
-- On COMMA reduce production literal_atom -> atomic_formula

State 330:
literal_atom -> atomic_formula NOT_EQUAL . atomic_formula [ VLINE RIGHT_PAREN COMMA ]
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On LOWER_WORD shift to state 9
-- On INTEGER shift to state 10
-- On FORALLCONST shift to state 62
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On variable shift to state 77
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On plain_term shift to state 95
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 331
-- On atomic_defined_word shift to state 119

State 331:
literal_atom -> atomic_formula NOT_EQUAL atomic_formula . [ VLINE RIGHT_PAREN COMMA ]
-- On VLINE reduce production literal_atom -> atomic_formula NOT_EQUAL atomic_formula
-- On RIGHT_PAREN reduce production literal_atom -> atomic_formula NOT_EQUAL atomic_formula
-- On COMMA reduce production literal_atom -> atomic_formula NOT_EQUAL atomic_formula

State 332:
literal_atom -> atomic_formula EQUAL . atomic_formula [ VLINE RIGHT_PAREN COMMA ]
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On LOWER_WORD shift to state 9
-- On INTEGER shift to state 10
-- On FORALLCONST shift to state 62
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On variable shift to state 77
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On plain_term shift to state 95
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 333
-- On atomic_defined_word shift to state 119

State 333:
literal_atom -> atomic_formula EQUAL atomic_formula . [ VLINE RIGHT_PAREN COMMA ]
-- On VLINE reduce production literal_atom -> atomic_formula EQUAL atomic_formula
-- On RIGHT_PAREN reduce production literal_atom -> atomic_formula EQUAL atomic_formula
-- On COMMA reduce production literal_atom -> atomic_formula EQUAL atomic_formula

State 334:
cnf_formula -> LEFT_PAREN . cnf_formula RIGHT_PAREN [ RIGHT_PAREN COMMA ]
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 327
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 334
-- On INTEGER shift to state 10
-- On FORALLCONST shift to state 62
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On variable shift to state 77
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On separated_nonempty_list(VLINE,literal) shift to state 335
-- On plain_term shift to state 95
-- On literal_atom shift to state 336
-- On literal shift to state 337
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On disjunction shift to state 340
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On cnf_formula shift to state 341
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 329
-- On atomic_defined_word shift to state 119

State 335:
disjunction -> separated_nonempty_list(VLINE,literal) . [ RIGHT_PAREN COMMA ]
-- On RIGHT_PAREN reduce production disjunction -> separated_nonempty_list(VLINE,literal)
-- On COMMA reduce production disjunction -> separated_nonempty_list(VLINE,literal)

State 336:
literal -> literal_atom . [ VLINE RIGHT_PAREN COMMA ]
-- On VLINE reduce production literal -> literal_atom
-- On RIGHT_PAREN reduce production literal -> literal_atom
-- On COMMA reduce production literal -> literal_atom

State 337:
separated_nonempty_list(VLINE,literal) -> literal . [ RIGHT_PAREN COMMA ]
separated_nonempty_list(VLINE,literal) -> literal . VLINE separated_nonempty_list(VLINE,literal) [ RIGHT_PAREN COMMA ]
-- On VLINE shift to state 338
-- On RIGHT_PAREN reduce production separated_nonempty_list(VLINE,literal) -> literal
-- On COMMA reduce production separated_nonempty_list(VLINE,literal) -> literal

State 338:
separated_nonempty_list(VLINE,literal) -> literal VLINE . separated_nonempty_list(VLINE,literal) [ RIGHT_PAREN COMMA ]
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 327
-- On LOWER_WORD shift to state 9
-- On INTEGER shift to state 10
-- On FORALLCONST shift to state 62
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On variable shift to state 77
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On separated_nonempty_list(VLINE,literal) shift to state 339
-- On plain_term shift to state 95
-- On literal_atom shift to state 336
-- On literal shift to state 337
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 329
-- On atomic_defined_word shift to state 119

State 339:
separated_nonempty_list(VLINE,literal) -> literal VLINE separated_nonempty_list(VLINE,literal) . [ RIGHT_PAREN COMMA ]
-- On RIGHT_PAREN reduce production separated_nonempty_list(VLINE,literal) -> literal VLINE separated_nonempty_list(VLINE,literal)
-- On COMMA reduce production separated_nonempty_list(VLINE,literal) -> literal VLINE separated_nonempty_list(VLINE,literal)

State 340:
cnf_formula -> disjunction . [ RIGHT_PAREN COMMA ]
-- On RIGHT_PAREN reduce production cnf_formula -> disjunction
-- On COMMA reduce production cnf_formula -> disjunction

State 341:
cnf_formula -> LEFT_PAREN cnf_formula . RIGHT_PAREN [ RIGHT_PAREN COMMA ]
-- On RIGHT_PAREN shift to state 342

State 342:
cnf_formula -> LEFT_PAREN cnf_formula RIGHT_PAREN . [ RIGHT_PAREN COMMA ]
-- On RIGHT_PAREN reduce production cnf_formula -> LEFT_PAREN cnf_formula RIGHT_PAREN
-- On COMMA reduce production cnf_formula -> LEFT_PAREN cnf_formula RIGHT_PAREN

State 343:
declaration -> CNF LEFT_PAREN name COMMA role COMMA cnf_formula . annotations RIGHT_PAREN DOT [ EOI ]
-- On COMMA shift to state 254
-- On annotations shift to state 344
-- On RIGHT_PAREN reduce production annotations -> 

State 344:
declaration -> CNF LEFT_PAREN name COMMA role COMMA cnf_formula annotations . RIGHT_PAREN DOT [ EOI ]
-- On RIGHT_PAREN shift to state 345

State 345:
declaration -> CNF LEFT_PAREN name COMMA role COMMA cnf_formula annotations RIGHT_PAREN . DOT [ EOI ]
-- On DOT shift to state 346

State 346:
declaration -> CNF LEFT_PAREN name COMMA role COMMA cnf_formula annotations RIGHT_PAREN DOT . [ EOI ]
-- On EOI reduce production declaration -> CNF LEFT_PAREN name COMMA role COMMA cnf_formula annotations RIGHT_PAREN DOT

State 347:
parse_declaration' -> parse_declaration . [ # ]
-- On # accept parse_declaration

State 348:
parse_declaration -> declaration . EOI [ # ]
-- On EOI shift to state 349

State 349:
parse_declaration -> declaration EOI . [ # ]
-- On # reduce production parse_declaration -> declaration EOI

State 350:
parse_declarations' -> . parse_declarations [ # ]
-- On error shift to state 351
-- On THF shift to state 352
-- On TFF shift to state 366
-- On INCLUDE shift to state 380
-- On FOF shift to state 389
-- On CNF shift to state 399
-- On parse_declarations shift to state 409
-- On list(declaration) shift to state 410
-- On declarations shift to state 411
-- On declaration shift to state 413
-- On EOI reduce production list(declaration) -> 

State 351:
declaration -> error . [ error THF TFF INCLUDE FOF EOI CNF ]
-- On error reduce production declaration -> error
-- On THF reduce production declaration -> error
-- On TFF reduce production declaration -> error
-- On INCLUDE reduce production declaration -> error
-- On FOF reduce production declaration -> error
-- On EOI reduce production declaration -> error
-- On CNF reduce production declaration -> error

State 352:
declaration -> THF . LEFT_PAREN name COMMA role COMMA formula annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
declaration -> THF . LEFT_PAREN name COMMA role COMMA type_decl annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On LEFT_PAREN shift to state 353

State 353:
declaration -> THF LEFT_PAREN . name COMMA role COMMA formula annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
declaration -> THF LEFT_PAREN . name COMMA role COMMA type_decl annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On SINGLE_QUOTED shift to state 6
-- On LOWER_WORD shift to state 9
-- On INTEGER shift to state 227
-- On name shift to state 354
-- On atomic_word shift to state 282

State 354:
declaration -> THF LEFT_PAREN name . COMMA role COMMA formula annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
declaration -> THF LEFT_PAREN name . COMMA role COMMA type_decl annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On COMMA shift to state 355

State 355:
declaration -> THF LEFT_PAREN name COMMA . role COMMA formula annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
declaration -> THF LEFT_PAREN name COMMA . role COMMA type_decl annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On LOWER_WORD shift to state 230
-- On role shift to state 356

State 356:
declaration -> THF LEFT_PAREN name COMMA role . COMMA formula annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
declaration -> THF LEFT_PAREN name COMMA role . COMMA type_decl annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On COMMA shift to state 357

State 357:
declaration -> THF LEFT_PAREN name COMMA role COMMA . formula annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
declaration -> THF LEFT_PAREN name COMMA role COMMA . type_decl annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On XOR shift to state 13
-- On WILDCARD shift to state 4
-- On VLINE shift to state 18
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOTVLINE shift to state 88
-- On NOTAND shift to state 98
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 233
-- On LEFT_IMPLY shift to state 108
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On IMPLY shift to state 120
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On EQUIV shift to state 125
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On ARROW shift to state 130
-- On AND shift to state 135
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 140
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 143
-- On type_decl shift to state 358
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On or_formula shift to state 171
-- On nonassoc_binary_formula shift to state 172
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On formula shift to state 362
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On binary_formula shift to state 176
-- On atomic_word shift to state 236
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119
-- On assoc_binary_formula_aux(VLINE) shift to state 177
-- On assoc_binary_formula_aux(AND) shift to state 178
-- On assoc_binary_formula shift to state 179
-- On app_formula shift to state 180
-- On and_formula shift to state 183

State 358:
declaration -> THF LEFT_PAREN name COMMA role COMMA type_decl . annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On COMMA shift to state 254
-- On annotations shift to state 359
-- On RIGHT_PAREN reduce production annotations -> 

State 359:
declaration -> THF LEFT_PAREN name COMMA role COMMA type_decl annotations . RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On RIGHT_PAREN shift to state 360

State 360:
declaration -> THF LEFT_PAREN name COMMA role COMMA type_decl annotations RIGHT_PAREN . DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On DOT shift to state 361

State 361:
declaration -> THF LEFT_PAREN name COMMA role COMMA type_decl annotations RIGHT_PAREN DOT . [ error THF TFF INCLUDE FOF EOI CNF ]
-- On error reduce production declaration -> THF LEFT_PAREN name COMMA role COMMA type_decl annotations RIGHT_PAREN DOT
-- On THF reduce production declaration -> THF LEFT_PAREN name COMMA role COMMA type_decl annotations RIGHT_PAREN DOT
-- On TFF reduce production declaration -> THF LEFT_PAREN name COMMA role COMMA type_decl annotations RIGHT_PAREN DOT
-- On INCLUDE reduce production declaration -> THF LEFT_PAREN name COMMA role COMMA type_decl annotations RIGHT_PAREN DOT
-- On FOF reduce production declaration -> THF LEFT_PAREN name COMMA role COMMA type_decl annotations RIGHT_PAREN DOT
-- On EOI reduce production declaration -> THF LEFT_PAREN name COMMA role COMMA type_decl annotations RIGHT_PAREN DOT
-- On CNF reduce production declaration -> THF LEFT_PAREN name COMMA role COMMA type_decl annotations RIGHT_PAREN DOT

State 362:
declaration -> THF LEFT_PAREN name COMMA role COMMA formula . annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On COMMA shift to state 254
-- On annotations shift to state 363
-- On RIGHT_PAREN reduce production annotations -> 

State 363:
declaration -> THF LEFT_PAREN name COMMA role COMMA formula annotations . RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On RIGHT_PAREN shift to state 364

State 364:
declaration -> THF LEFT_PAREN name COMMA role COMMA formula annotations RIGHT_PAREN . DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On DOT shift to state 365

State 365:
declaration -> THF LEFT_PAREN name COMMA role COMMA formula annotations RIGHT_PAREN DOT . [ error THF TFF INCLUDE FOF EOI CNF ]
-- On error reduce production declaration -> THF LEFT_PAREN name COMMA role COMMA formula annotations RIGHT_PAREN DOT
-- On THF reduce production declaration -> THF LEFT_PAREN name COMMA role COMMA formula annotations RIGHT_PAREN DOT
-- On TFF reduce production declaration -> THF LEFT_PAREN name COMMA role COMMA formula annotations RIGHT_PAREN DOT
-- On INCLUDE reduce production declaration -> THF LEFT_PAREN name COMMA role COMMA formula annotations RIGHT_PAREN DOT
-- On FOF reduce production declaration -> THF LEFT_PAREN name COMMA role COMMA formula annotations RIGHT_PAREN DOT
-- On EOI reduce production declaration -> THF LEFT_PAREN name COMMA role COMMA formula annotations RIGHT_PAREN DOT
-- On CNF reduce production declaration -> THF LEFT_PAREN name COMMA role COMMA formula annotations RIGHT_PAREN DOT

State 366:
declaration -> TFF . LEFT_PAREN name COMMA role COMMA formula annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
declaration -> TFF . LEFT_PAREN name COMMA role COMMA type_decl annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On LEFT_PAREN shift to state 367

State 367:
declaration -> TFF LEFT_PAREN . name COMMA role COMMA formula annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
declaration -> TFF LEFT_PAREN . name COMMA role COMMA type_decl annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On SINGLE_QUOTED shift to state 6
-- On LOWER_WORD shift to state 9
-- On INTEGER shift to state 227
-- On name shift to state 368
-- On atomic_word shift to state 282

State 368:
declaration -> TFF LEFT_PAREN name . COMMA role COMMA formula annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
declaration -> TFF LEFT_PAREN name . COMMA role COMMA type_decl annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On COMMA shift to state 369

State 369:
declaration -> TFF LEFT_PAREN name COMMA . role COMMA formula annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
declaration -> TFF LEFT_PAREN name COMMA . role COMMA type_decl annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On LOWER_WORD shift to state 230
-- On role shift to state 370

State 370:
declaration -> TFF LEFT_PAREN name COMMA role . COMMA formula annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
declaration -> TFF LEFT_PAREN name COMMA role . COMMA type_decl annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On COMMA shift to state 371

State 371:
declaration -> TFF LEFT_PAREN name COMMA role COMMA . formula annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
declaration -> TFF LEFT_PAREN name COMMA role COMMA . type_decl annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On XOR shift to state 13
-- On WILDCARD shift to state 4
-- On VLINE shift to state 18
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOTVLINE shift to state 88
-- On NOTAND shift to state 98
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 233
-- On LEFT_IMPLY shift to state 108
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On IMPLY shift to state 120
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On EQUIV shift to state 125
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On ARROW shift to state 130
-- On AND shift to state 135
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 140
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 143
-- On type_decl shift to state 372
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On or_formula shift to state 171
-- On nonassoc_binary_formula shift to state 172
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On formula shift to state 376
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On binary_formula shift to state 176
-- On atomic_word shift to state 236
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119
-- On assoc_binary_formula_aux(VLINE) shift to state 177
-- On assoc_binary_formula_aux(AND) shift to state 178
-- On assoc_binary_formula shift to state 179
-- On app_formula shift to state 180
-- On and_formula shift to state 183

State 372:
declaration -> TFF LEFT_PAREN name COMMA role COMMA type_decl . annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On COMMA shift to state 254
-- On annotations shift to state 373
-- On RIGHT_PAREN reduce production annotations -> 

State 373:
declaration -> TFF LEFT_PAREN name COMMA role COMMA type_decl annotations . RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On RIGHT_PAREN shift to state 374

State 374:
declaration -> TFF LEFT_PAREN name COMMA role COMMA type_decl annotations RIGHT_PAREN . DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On DOT shift to state 375

State 375:
declaration -> TFF LEFT_PAREN name COMMA role COMMA type_decl annotations RIGHT_PAREN DOT . [ error THF TFF INCLUDE FOF EOI CNF ]
-- On error reduce production declaration -> TFF LEFT_PAREN name COMMA role COMMA type_decl annotations RIGHT_PAREN DOT
-- On THF reduce production declaration -> TFF LEFT_PAREN name COMMA role COMMA type_decl annotations RIGHT_PAREN DOT
-- On TFF reduce production declaration -> TFF LEFT_PAREN name COMMA role COMMA type_decl annotations RIGHT_PAREN DOT
-- On INCLUDE reduce production declaration -> TFF LEFT_PAREN name COMMA role COMMA type_decl annotations RIGHT_PAREN DOT
-- On FOF reduce production declaration -> TFF LEFT_PAREN name COMMA role COMMA type_decl annotations RIGHT_PAREN DOT
-- On EOI reduce production declaration -> TFF LEFT_PAREN name COMMA role COMMA type_decl annotations RIGHT_PAREN DOT
-- On CNF reduce production declaration -> TFF LEFT_PAREN name COMMA role COMMA type_decl annotations RIGHT_PAREN DOT

State 376:
declaration -> TFF LEFT_PAREN name COMMA role COMMA formula . annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On COMMA shift to state 254
-- On annotations shift to state 377
-- On RIGHT_PAREN reduce production annotations -> 

State 377:
declaration -> TFF LEFT_PAREN name COMMA role COMMA formula annotations . RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On RIGHT_PAREN shift to state 378

State 378:
declaration -> TFF LEFT_PAREN name COMMA role COMMA formula annotations RIGHT_PAREN . DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On DOT shift to state 379

State 379:
declaration -> TFF LEFT_PAREN name COMMA role COMMA formula annotations RIGHT_PAREN DOT . [ error THF TFF INCLUDE FOF EOI CNF ]
-- On error reduce production declaration -> TFF LEFT_PAREN name COMMA role COMMA formula annotations RIGHT_PAREN DOT
-- On THF reduce production declaration -> TFF LEFT_PAREN name COMMA role COMMA formula annotations RIGHT_PAREN DOT
-- On TFF reduce production declaration -> TFF LEFT_PAREN name COMMA role COMMA formula annotations RIGHT_PAREN DOT
-- On INCLUDE reduce production declaration -> TFF LEFT_PAREN name COMMA role COMMA formula annotations RIGHT_PAREN DOT
-- On FOF reduce production declaration -> TFF LEFT_PAREN name COMMA role COMMA formula annotations RIGHT_PAREN DOT
-- On EOI reduce production declaration -> TFF LEFT_PAREN name COMMA role COMMA formula annotations RIGHT_PAREN DOT
-- On CNF reduce production declaration -> TFF LEFT_PAREN name COMMA role COMMA formula annotations RIGHT_PAREN DOT

State 380:
declaration -> INCLUDE . LEFT_PAREN SINGLE_QUOTED RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
declaration -> INCLUDE . LEFT_PAREN SINGLE_QUOTED COMMA name_list RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On LEFT_PAREN shift to state 381

State 381:
declaration -> INCLUDE LEFT_PAREN . SINGLE_QUOTED RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
declaration -> INCLUDE LEFT_PAREN . SINGLE_QUOTED COMMA name_list RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On SINGLE_QUOTED shift to state 382

State 382:
declaration -> INCLUDE LEFT_PAREN SINGLE_QUOTED . RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
declaration -> INCLUDE LEFT_PAREN SINGLE_QUOTED . COMMA name_list RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On RIGHT_PAREN shift to state 383
-- On COMMA shift to state 385

State 383:
declaration -> INCLUDE LEFT_PAREN SINGLE_QUOTED RIGHT_PAREN . DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On DOT shift to state 384

State 384:
declaration -> INCLUDE LEFT_PAREN SINGLE_QUOTED RIGHT_PAREN DOT . [ error THF TFF INCLUDE FOF EOI CNF ]
-- On error reduce production declaration -> INCLUDE LEFT_PAREN SINGLE_QUOTED RIGHT_PAREN DOT
-- On THF reduce production declaration -> INCLUDE LEFT_PAREN SINGLE_QUOTED RIGHT_PAREN DOT
-- On TFF reduce production declaration -> INCLUDE LEFT_PAREN SINGLE_QUOTED RIGHT_PAREN DOT
-- On INCLUDE reduce production declaration -> INCLUDE LEFT_PAREN SINGLE_QUOTED RIGHT_PAREN DOT
-- On FOF reduce production declaration -> INCLUDE LEFT_PAREN SINGLE_QUOTED RIGHT_PAREN DOT
-- On EOI reduce production declaration -> INCLUDE LEFT_PAREN SINGLE_QUOTED RIGHT_PAREN DOT
-- On CNF reduce production declaration -> INCLUDE LEFT_PAREN SINGLE_QUOTED RIGHT_PAREN DOT

State 385:
declaration -> INCLUDE LEFT_PAREN SINGLE_QUOTED COMMA . name_list RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On SINGLE_QUOTED shift to state 6
-- On LOWER_WORD shift to state 9
-- On INTEGER shift to state 227
-- On separated_nonempty_list(COMMA,name) shift to state 303
-- On name_list shift to state 386
-- On name shift to state 307
-- On loption(separated_nonempty_list(COMMA,name)) shift to state 310
-- On atomic_word shift to state 282
-- On RIGHT_PAREN reduce production loption(separated_nonempty_list(COMMA,name)) -> 

State 386:
declaration -> INCLUDE LEFT_PAREN SINGLE_QUOTED COMMA name_list . RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On RIGHT_PAREN shift to state 387

State 387:
declaration -> INCLUDE LEFT_PAREN SINGLE_QUOTED COMMA name_list RIGHT_PAREN . DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On DOT shift to state 388

State 388:
declaration -> INCLUDE LEFT_PAREN SINGLE_QUOTED COMMA name_list RIGHT_PAREN DOT . [ error THF TFF INCLUDE FOF EOI CNF ]
-- On error reduce production declaration -> INCLUDE LEFT_PAREN SINGLE_QUOTED COMMA name_list RIGHT_PAREN DOT
-- On THF reduce production declaration -> INCLUDE LEFT_PAREN SINGLE_QUOTED COMMA name_list RIGHT_PAREN DOT
-- On TFF reduce production declaration -> INCLUDE LEFT_PAREN SINGLE_QUOTED COMMA name_list RIGHT_PAREN DOT
-- On INCLUDE reduce production declaration -> INCLUDE LEFT_PAREN SINGLE_QUOTED COMMA name_list RIGHT_PAREN DOT
-- On FOF reduce production declaration -> INCLUDE LEFT_PAREN SINGLE_QUOTED COMMA name_list RIGHT_PAREN DOT
-- On EOI reduce production declaration -> INCLUDE LEFT_PAREN SINGLE_QUOTED COMMA name_list RIGHT_PAREN DOT
-- On CNF reduce production declaration -> INCLUDE LEFT_PAREN SINGLE_QUOTED COMMA name_list RIGHT_PAREN DOT

State 389:
declaration -> FOF . LEFT_PAREN name COMMA role COMMA formula annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On LEFT_PAREN shift to state 390

State 390:
declaration -> FOF LEFT_PAREN . name COMMA role COMMA formula annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On SINGLE_QUOTED shift to state 6
-- On LOWER_WORD shift to state 9
-- On INTEGER shift to state 227
-- On name shift to state 391
-- On atomic_word shift to state 282

State 391:
declaration -> FOF LEFT_PAREN name . COMMA role COMMA formula annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On COMMA shift to state 392

State 392:
declaration -> FOF LEFT_PAREN name COMMA . role COMMA formula annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On LOWER_WORD shift to state 230
-- On role shift to state 393

State 393:
declaration -> FOF LEFT_PAREN name COMMA role . COMMA formula annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On COMMA shift to state 394

State 394:
declaration -> FOF LEFT_PAREN name COMMA role COMMA . formula annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On XOR shift to state 13
-- On WILDCARD shift to state 4
-- On VLINE shift to state 18
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOTVLINE shift to state 88
-- On NOTAND shift to state 98
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 17
-- On LEFT_IMPLY shift to state 108
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On IMPLY shift to state 120
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On EQUIV shift to state 125
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On ARROW shift to state 130
-- On AND shift to state 135
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 140
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 143
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On or_formula shift to state 171
-- On nonassoc_binary_formula shift to state 172
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On formula shift to state 395
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On binary_formula shift to state 176
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119
-- On assoc_binary_formula_aux(VLINE) shift to state 177
-- On assoc_binary_formula_aux(AND) shift to state 178
-- On assoc_binary_formula shift to state 179
-- On app_formula shift to state 180
-- On and_formula shift to state 183

State 395:
declaration -> FOF LEFT_PAREN name COMMA role COMMA formula . annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On COMMA shift to state 254
-- On annotations shift to state 396
-- On RIGHT_PAREN reduce production annotations -> 

State 396:
declaration -> FOF LEFT_PAREN name COMMA role COMMA formula annotations . RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On RIGHT_PAREN shift to state 397

State 397:
declaration -> FOF LEFT_PAREN name COMMA role COMMA formula annotations RIGHT_PAREN . DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On DOT shift to state 398

State 398:
declaration -> FOF LEFT_PAREN name COMMA role COMMA formula annotations RIGHT_PAREN DOT . [ error THF TFF INCLUDE FOF EOI CNF ]
-- On error reduce production declaration -> FOF LEFT_PAREN name COMMA role COMMA formula annotations RIGHT_PAREN DOT
-- On THF reduce production declaration -> FOF LEFT_PAREN name COMMA role COMMA formula annotations RIGHT_PAREN DOT
-- On TFF reduce production declaration -> FOF LEFT_PAREN name COMMA role COMMA formula annotations RIGHT_PAREN DOT
-- On INCLUDE reduce production declaration -> FOF LEFT_PAREN name COMMA role COMMA formula annotations RIGHT_PAREN DOT
-- On FOF reduce production declaration -> FOF LEFT_PAREN name COMMA role COMMA formula annotations RIGHT_PAREN DOT
-- On EOI reduce production declaration -> FOF LEFT_PAREN name COMMA role COMMA formula annotations RIGHT_PAREN DOT
-- On CNF reduce production declaration -> FOF LEFT_PAREN name COMMA role COMMA formula annotations RIGHT_PAREN DOT

State 399:
declaration -> CNF . LEFT_PAREN name COMMA role COMMA cnf_formula annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On LEFT_PAREN shift to state 400

State 400:
declaration -> CNF LEFT_PAREN . name COMMA role COMMA cnf_formula annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On SINGLE_QUOTED shift to state 6
-- On LOWER_WORD shift to state 9
-- On INTEGER shift to state 227
-- On name shift to state 401
-- On atomic_word shift to state 282

State 401:
declaration -> CNF LEFT_PAREN name . COMMA role COMMA cnf_formula annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On COMMA shift to state 402

State 402:
declaration -> CNF LEFT_PAREN name COMMA . role COMMA cnf_formula annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On LOWER_WORD shift to state 230
-- On role shift to state 403

State 403:
declaration -> CNF LEFT_PAREN name COMMA role . COMMA cnf_formula annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On COMMA shift to state 404

State 404:
declaration -> CNF LEFT_PAREN name COMMA role COMMA . cnf_formula annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 327
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 334
-- On INTEGER shift to state 10
-- On FORALLCONST shift to state 62
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On variable shift to state 77
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On separated_nonempty_list(VLINE,literal) shift to state 335
-- On plain_term shift to state 95
-- On literal_atom shift to state 336
-- On literal shift to state 337
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On disjunction shift to state 340
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On cnf_formula shift to state 405
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 329
-- On atomic_defined_word shift to state 119

State 405:
declaration -> CNF LEFT_PAREN name COMMA role COMMA cnf_formula . annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On COMMA shift to state 254
-- On annotations shift to state 406
-- On RIGHT_PAREN reduce production annotations -> 

State 406:
declaration -> CNF LEFT_PAREN name COMMA role COMMA cnf_formula annotations . RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On RIGHT_PAREN shift to state 407

State 407:
declaration -> CNF LEFT_PAREN name COMMA role COMMA cnf_formula annotations RIGHT_PAREN . DOT [ error THF TFF INCLUDE FOF EOI CNF ]
-- On DOT shift to state 408

State 408:
declaration -> CNF LEFT_PAREN name COMMA role COMMA cnf_formula annotations RIGHT_PAREN DOT . [ error THF TFF INCLUDE FOF EOI CNF ]
-- On error reduce production declaration -> CNF LEFT_PAREN name COMMA role COMMA cnf_formula annotations RIGHT_PAREN DOT
-- On THF reduce production declaration -> CNF LEFT_PAREN name COMMA role COMMA cnf_formula annotations RIGHT_PAREN DOT
-- On TFF reduce production declaration -> CNF LEFT_PAREN name COMMA role COMMA cnf_formula annotations RIGHT_PAREN DOT
-- On INCLUDE reduce production declaration -> CNF LEFT_PAREN name COMMA role COMMA cnf_formula annotations RIGHT_PAREN DOT
-- On FOF reduce production declaration -> CNF LEFT_PAREN name COMMA role COMMA cnf_formula annotations RIGHT_PAREN DOT
-- On EOI reduce production declaration -> CNF LEFT_PAREN name COMMA role COMMA cnf_formula annotations RIGHT_PAREN DOT
-- On CNF reduce production declaration -> CNF LEFT_PAREN name COMMA role COMMA cnf_formula annotations RIGHT_PAREN DOT

State 409:
parse_declarations' -> parse_declarations . [ # ]
-- On # accept parse_declarations

State 410:
declarations -> list(declaration) . [ EOI ]
-- On EOI reduce production declarations -> list(declaration)

State 411:
parse_declarations -> declarations . EOI [ # ]
-- On EOI shift to state 412

State 412:
parse_declarations -> declarations EOI . [ # ]
-- On # reduce production parse_declarations -> declarations EOI

State 413:
list(declaration) -> declaration . list(declaration) [ EOI ]
-- On error shift to state 351
-- On THF shift to state 352
-- On TFF shift to state 366
-- On INCLUDE shift to state 380
-- On FOF shift to state 389
-- On CNF shift to state 399
-- On list(declaration) shift to state 414
-- On declaration shift to state 413
-- On EOI reduce production list(declaration) -> 

State 414:
list(declaration) -> declaration list(declaration) . [ EOI ]
-- On EOI reduce production list(declaration) -> declaration list(declaration)

State 415:
parse_formula' -> . parse_formula [ # ]
-- On XOR shift to state 13
-- On WILDCARD shift to state 4
-- On VLINE shift to state 18
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOTVLINE shift to state 88
-- On NOTAND shift to state 98
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 17
-- On LEFT_IMPLY shift to state 108
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On IMPLY shift to state 120
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On EQUIV shift to state 125
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On ARROW shift to state 130
-- On AND shift to state 135
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 140
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 143
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On parse_formula shift to state 416
-- On or_formula shift to state 171
-- On nonassoc_binary_formula shift to state 172
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On formula shift to state 417
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On binary_formula shift to state 176
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119
-- On assoc_binary_formula_aux(VLINE) shift to state 177
-- On assoc_binary_formula_aux(AND) shift to state 178
-- On assoc_binary_formula shift to state 179
-- On app_formula shift to state 180
-- On and_formula shift to state 183

State 416:
parse_formula' -> parse_formula . [ # ]
-- On # accept parse_formula

State 417:
parse_formula -> formula . EOI [ # ]
-- On EOI shift to state 418

State 418:
parse_formula -> formula EOI . [ # ]
-- On # reduce production parse_formula -> formula EOI

State 419:
parse_term' -> . parse_term [ # ]
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On LOWER_WORD shift to state 9
-- On INTEGER shift to state 10
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On variable shift to state 77
-- On term shift to state 420
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On plain_term shift to state 95
-- On parse_term shift to state 422
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_defined_word shift to state 119

State 420:
parse_term -> term . EOI [ # ]
-- On EOI shift to state 421

State 421:
parse_term -> term EOI . [ # ]
-- On # reduce production parse_term -> term EOI

State 422:
parse_term' -> parse_term . [ # ]
-- On # accept parse_term

