State 0:
## Known stack suffix:
##
## LR(1) items:
parse_answer_tuple' -> . parse_answer_tuple [ # ]
## Transitions:
-- On LEFT_BRACKET shift to state 1
-- On parse_answer_tuple shift to state 220
-- On answer_tuples shift to state 221
## Reductions:

State 1:
## Known stack suffix:
## LEFT_BRACKET
## LR(1) items:
answer_tuples -> LEFT_BRACKET . separated_nonempty_list(VLINE,answer_tuple) RIGHT_BRACKET [ EOI ]
## Transitions:
-- On UNDERSCORE shift to state 2
-- On LEFT_BRACKET shift to state 3
-- On separated_nonempty_list(VLINE,answer_tuple) shift to state 215
-- On answer_tuple shift to state 217
## Reductions:

State 2:
## Known stack suffix:
## UNDERSCORE
## LR(1) items:
answer_tuple -> UNDERSCORE . [ VLINE RIGHT_BRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production answer_tuple -> UNDERSCORE

State 3:
## Known stack suffix:
## LEFT_BRACKET
## LR(1) items:
answer_tuple -> LEFT_BRACKET . separated_nonempty_list(COMMA,term) RIGHT_BRACKET [ VLINE RIGHT_BRACKET ]
## Transitions:
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On LOWER_WORD shift to state 9
-- On INTEGER shift to state 10
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On variable shift to state 77
-- On term shift to state 210
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On separated_nonempty_list(COMMA,term) shift to state 213
-- On plain_term shift to state 95
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_defined_word shift to state 119
## Reductions:

State 4:
## Known stack suffix:
## WILDCARD
## LR(1) items:
atomic_defined_word -> WILDCARD . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_PAREN LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atomic_defined_word -> WILDCARD

State 5:
## Known stack suffix:
## UPPER_WORD
## LR(1) items:
variable -> UPPER_WORD . [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production variable -> UPPER_WORD

State 6:
## Known stack suffix:
## SINGLE_QUOTED
## LR(1) items:
atomic_word -> SINGLE_QUOTED . [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_PAREN LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA COLUMN AT ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atomic_word -> SINGLE_QUOTED

State 7:
## Known stack suffix:
## REAL
## LR(1) items:
defined_atom -> REAL . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production defined_atom -> REAL

State 8:
## Known stack suffix:
## RATIONAL
## LR(1) items:
defined_atom -> RATIONAL . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production defined_atom -> RATIONAL

State 9:
## Known stack suffix:
## LOWER_WORD
## LR(1) items:
atomic_word -> LOWER_WORD . [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_PAREN LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA COLUMN AT ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atomic_word -> LOWER_WORD

State 10:
## Known stack suffix:
## INTEGER
## LR(1) items:
defined_atom -> INTEGER . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production defined_atom -> INTEGER

State 11:
## Known stack suffix:
## DOLLAR_WORD
## LR(1) items:
defined_plain_term -> DOLLAR_WORD . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT ARROW AND ]
defined_plain_term -> DOLLAR_WORD . LEFT_PAREN term_arguments RIGHT_PAREN [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT ARROW AND ]
## Transitions:
-- On LEFT_PAREN shift to state 12
## Reductions:
-- On XOR reduce production defined_plain_term -> DOLLAR_WORD
-- On VLINE reduce production defined_plain_term -> DOLLAR_WORD
-- On RIGHT_PAREN reduce production defined_plain_term -> DOLLAR_WORD
-- On RIGHT_BRACKET reduce production defined_plain_term -> DOLLAR_WORD
-- On NOT_EQUAL reduce production defined_plain_term -> DOLLAR_WORD
-- On NOTVLINE reduce production defined_plain_term -> DOLLAR_WORD
-- On NOTAND reduce production defined_plain_term -> DOLLAR_WORD
-- On LEFT_IMPLY reduce production defined_plain_term -> DOLLAR_WORD
-- On IMPLY reduce production defined_plain_term -> DOLLAR_WORD
-- On EQUIV reduce production defined_plain_term -> DOLLAR_WORD
-- On EQUAL reduce production defined_plain_term -> DOLLAR_WORD
-- On EOI reduce production defined_plain_term -> DOLLAR_WORD
-- On COMMA reduce production defined_plain_term -> DOLLAR_WORD
-- On AT reduce production defined_plain_term -> DOLLAR_WORD
-- On ARROW reduce production defined_plain_term -> DOLLAR_WORD
-- On AND reduce production defined_plain_term -> DOLLAR_WORD

State 12:
## Known stack suffix:
## DOLLAR_WORD LEFT_PAREN
## LR(1) items:
defined_plain_term -> DOLLAR_WORD LEFT_PAREN . term_arguments RIGHT_PAREN [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT ARROW AND ]
## Transitions:
-- On XOR shift to state 13
-- On WILDCARD shift to state 4
-- On VLINE shift to state 18
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOTVLINE shift to state 88
-- On NOTAND shift to state 98
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 17
-- On LEFT_IMPLY shift to state 108
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On IMPLY shift to state 120
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On EQUIV shift to state 125
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On ARROW shift to state 130
-- On AND shift to state 135
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 140
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 143
-- On term_arguments shift to state 208
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On separated_nonempty_list(COMMA,formula) shift to state 170
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On or_formula shift to state 171
-- On nonassoc_binary_formula shift to state 172
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On formula shift to state 173
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On binary_formula shift to state 176
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119
-- On assoc_binary_formula_aux(VLINE) shift to state 177
-- On assoc_binary_formula_aux(AND) shift to state 178
-- On assoc_binary_formula shift to state 179
-- On app_formula shift to state 180
-- On and_formula shift to state 183
## Reductions:

State 13:
## Known stack suffix:
## XOR
## LR(1) items:
nonassoc_binary_formula -> XOR . AT unary_formula AT unary_formula [ RIGHT_PAREN EOI COMMA ]
## Transitions:
-- On AT shift to state 14
## Reductions:

State 14:
## Known stack suffix:
## XOR AT
## LR(1) items:
nonassoc_binary_formula -> XOR AT . unary_formula AT unary_formula [ RIGHT_PAREN EOI COMMA ]
## Transitions:
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 17
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 79
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 205
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119
## Reductions:

State 15:
## Known stack suffix:
## TRUE
## LR(1) items:
atomic_formula -> TRUE . [ XOR VLINE RIGHT_PAREN NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atomic_formula -> TRUE

State 16:
## Known stack suffix:
## NOT
## LR(1) items:
unary_formula -> NOT . AT unary_formula [ XOR VLINE RIGHT_PAREN NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA AT ARROW AND ]
unary_formula -> NOT . unary_formula [ XOR VLINE RIGHT_PAREN NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA AT ARROW AND ]
## Transitions:
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 17
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On AT shift to state 202
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 79
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 204
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119
## Reductions:

State 17:
## Known stack suffix:
## LEFT_PAREN
## LR(1) items:
unitary_atomic_formula -> LEFT_PAREN . formula RIGHT_PAREN [ XOR VLINE RIGHT_PAREN NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT ARROW AND ]
## Transitions:
-- On XOR shift to state 13
-- On WILDCARD shift to state 4
-- On VLINE shift to state 18
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOTVLINE shift to state 88
-- On NOTAND shift to state 98
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 17
-- On LEFT_IMPLY shift to state 108
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On IMPLY shift to state 120
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On EQUIV shift to state 125
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On ARROW shift to state 130
-- On AND shift to state 135
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 140
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 143
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On or_formula shift to state 171
-- On nonassoc_binary_formula shift to state 172
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On formula shift to state 200
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On binary_formula shift to state 176
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119
-- On assoc_binary_formula_aux(VLINE) shift to state 177
-- On assoc_binary_formula_aux(AND) shift to state 178
-- On assoc_binary_formula shift to state 179
-- On app_formula shift to state 180
-- On and_formula shift to state 183
## Reductions:

State 18:
## Known stack suffix:
## VLINE
## LR(1) items:
nonassoc_binary_formula -> VLINE . AT unary_formula AT unary_formula [ RIGHT_PAREN EOI COMMA ]
## Transitions:
-- On AT shift to state 19
## Reductions:

State 19:
## Known stack suffix:
## VLINE AT
## LR(1) items:
nonassoc_binary_formula -> VLINE AT . unary_formula AT unary_formula [ RIGHT_PAREN EOI COMMA ]
## Transitions:
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 17
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 79
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 197
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119
## Reductions:

State 20:
## Known stack suffix:
## LAMBDA
## LR(1) items:
quantified_formula -> LAMBDA . LEFT_BRACKET typed_vars RIGHT_BRACKET COLUMN unary_formula [ XOR VLINE RIGHT_PAREN NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA AT ARROW AND ]
## Transitions:
-- On LEFT_BRACKET shift to state 21
## Reductions:

State 21:
## Known stack suffix:
## LAMBDA LEFT_BRACKET
## LR(1) items:
quantified_formula -> LAMBDA LEFT_BRACKET . typed_vars RIGHT_BRACKET COLUMN unary_formula [ XOR VLINE RIGHT_PAREN NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA AT ARROW AND ]
## Transitions:
-- On UPPER_WORD shift to state 22
-- On typed_vars shift to state 59
-- On typed_var shift to state 191
-- On separated_nonempty_list(COMMA,typed_var) shift to state 194
## Reductions:

State 22:
## Known stack suffix:
## UPPER_WORD
## LR(1) items:
typed_var -> UPPER_WORD . COLUMN tff_type [ RIGHT_BRACKET COMMA ]
typed_var -> UPPER_WORD . [ RIGHT_BRACKET COMMA ]
## Transitions:
-- On COLUMN shift to state 23
## Reductions:
-- On RIGHT_BRACKET reduce production typed_var -> UPPER_WORD
-- On COMMA reduce production typed_var -> UPPER_WORD

State 23:
## Known stack suffix:
## UPPER_WORD COLUMN
## LR(1) items:
typed_var -> UPPER_WORD COLUMN . tff_type [ RIGHT_BRACKET COMMA ]
## Transitions:
-- On WILDCARD shift to state 24
-- On UPPER_WORD shift to state 5
-- On TYPE_TY shift to state 25
-- On SINGLE_QUOTED shift to state 6
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 26
-- On DOLLAR_WORD shift to state 28
-- On variable shift to state 29
-- On type_const shift to state 30
-- On tff_type shift to state 58
-- On tff_atomic_type shift to state 34
-- On tff_app_type shift to state 35
-- On defined_ty shift to state 38
-- On atomic_word shift to state 39
## Reductions:

State 24:
## Known stack suffix:
## WILDCARD
## LR(1) items:
type_const -> WILDCARD . [ STAR RIGHT_PAREN RIGHT_BRACKET LEFT_PAREN COMMA AT ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_const -> WILDCARD

State 25:
## Known stack suffix:
## TYPE_TY
## LR(1) items:
tff_atomic_type -> TYPE_TY . [ STAR RIGHT_PAREN RIGHT_BRACKET COMMA AT ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tff_atomic_type -> TYPE_TY

State 26:
## Known stack suffix:
## LEFT_PAREN
## LR(1) items:
tff_atomic_type -> LEFT_PAREN . tff_toplevel_type RIGHT_PAREN [ STAR RIGHT_PAREN RIGHT_BRACKET COMMA AT ARROW ]
## Transitions:
-- On WILDCARD shift to state 24
-- On UPPER_WORD shift to state 5
-- On TYPE_TY shift to state 25
-- On SINGLE_QUOTED shift to state 6
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 27
-- On DOLLAR_WORD shift to state 28
-- On variable shift to state 29
-- On type_const shift to state 30
-- On tff_type shift to state 45
-- On tff_toplevel_type shift to state 50
-- On tff_atomic_type shift to state 34
-- On tff_app_type shift to state 35
-- On defined_ty shift to state 38
-- On atomic_word shift to state 39
## Reductions:

State 27:
## Known stack suffix:
## LEFT_PAREN
## LR(1) items:
tff_atomic_type -> LEFT_PAREN . tff_toplevel_type RIGHT_PAREN [ STAR RIGHT_PAREN COMMA AT ARROW ]
tff_toplevel_type -> LEFT_PAREN . tff_ty_star_list RIGHT_PAREN ARROW tff_app_type [ RIGHT_PAREN COMMA ]
## Transitions:
-- On WILDCARD shift to state 24
-- On UPPER_WORD shift to state 5
-- On TYPE_TY shift to state 25
-- On SINGLE_QUOTED shift to state 6
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 27
-- On DOLLAR_WORD shift to state 28
-- On variable shift to state 29
-- On type_const shift to state 30
-- On tff_type shift to state 45
-- On tff_ty_star_list shift to state 46
-- On tff_toplevel_type shift to state 50
-- On tff_atomic_type shift to state 34
-- On tff_app_type shift to state 52
-- On defined_ty shift to state 38
-- On atomic_word shift to state 39
## Reductions:

State 28:
## Known stack suffix:
## DOLLAR_WORD
## LR(1) items:
defined_ty -> DOLLAR_WORD . [ STAR RIGHT_PAREN RIGHT_BRACKET COMMA AT ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production defined_ty -> DOLLAR_WORD

State 29:
## Known stack suffix:
## variable
## LR(1) items:
tff_atomic_type -> variable . [ STAR RIGHT_PAREN RIGHT_BRACKET COMMA AT ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tff_atomic_type -> variable

State 30:
## Known stack suffix:
## type_const
## LR(1) items:
tff_atomic_type -> type_const . [ STAR RIGHT_PAREN RIGHT_BRACKET COMMA AT ARROW ]
tff_atomic_type -> type_const . LEFT_PAREN separated_nonempty_list(COMMA,tff_type) RIGHT_PAREN [ STAR RIGHT_PAREN RIGHT_BRACKET COMMA AT ARROW ]
## Transitions:
-- On LEFT_PAREN shift to state 31
## Reductions:
-- On STAR reduce production tff_atomic_type -> type_const
-- On RIGHT_PAREN reduce production tff_atomic_type -> type_const
-- On RIGHT_BRACKET reduce production tff_atomic_type -> type_const
-- On COMMA reduce production tff_atomic_type -> type_const
-- On AT reduce production tff_atomic_type -> type_const
-- On ARROW reduce production tff_atomic_type -> type_const

State 31:
## Known stack suffix:
## type_const LEFT_PAREN
## LR(1) items:
tff_atomic_type -> type_const LEFT_PAREN . separated_nonempty_list(COMMA,tff_type) RIGHT_PAREN [ STAR RIGHT_PAREN RIGHT_BRACKET COMMA AT ARROW ]
## Transitions:
-- On WILDCARD shift to state 24
-- On UPPER_WORD shift to state 5
-- On TYPE_TY shift to state 25
-- On SINGLE_QUOTED shift to state 6
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 26
-- On DOLLAR_WORD shift to state 28
-- On variable shift to state 29
-- On type_const shift to state 30
-- On tff_type shift to state 32
-- On tff_atomic_type shift to state 34
-- On tff_app_type shift to state 35
-- On separated_nonempty_list(COMMA,tff_type) shift to state 43
-- On defined_ty shift to state 38
-- On atomic_word shift to state 39
## Reductions:

State 32:
## Known stack suffix:
## tff_type
## LR(1) items:
separated_nonempty_list(COMMA,tff_type) -> tff_type . [ RIGHT_PAREN ]
separated_nonempty_list(COMMA,tff_type) -> tff_type . COMMA separated_nonempty_list(COMMA,tff_type) [ RIGHT_PAREN ]
## Transitions:
-- On COMMA shift to state 33
## Reductions:
-- On RIGHT_PAREN reduce production separated_nonempty_list(COMMA,tff_type) -> tff_type

State 33:
## Known stack suffix:
## tff_type COMMA
## LR(1) items:
separated_nonempty_list(COMMA,tff_type) -> tff_type COMMA . separated_nonempty_list(COMMA,tff_type) [ RIGHT_PAREN ]
## Transitions:
-- On WILDCARD shift to state 24
-- On UPPER_WORD shift to state 5
-- On TYPE_TY shift to state 25
-- On SINGLE_QUOTED shift to state 6
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 26
-- On DOLLAR_WORD shift to state 28
-- On variable shift to state 29
-- On type_const shift to state 30
-- On tff_type shift to state 32
-- On tff_atomic_type shift to state 34
-- On tff_app_type shift to state 35
-- On separated_nonempty_list(COMMA,tff_type) shift to state 42
-- On defined_ty shift to state 38
-- On atomic_word shift to state 39
## Reductions:

State 34:
## Known stack suffix:
## tff_atomic_type
## LR(1) items:
tff_app_type -> tff_atomic_type . [ STAR RIGHT_PAREN RIGHT_BRACKET COMMA AT ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tff_app_type -> tff_atomic_type

State 35:
## Known stack suffix:
## tff_app_type
## LR(1) items:
tff_app_type -> tff_app_type . AT tff_atomic_type [ RIGHT_PAREN RIGHT_BRACKET COMMA AT ARROW ]
tff_type -> tff_app_type . [ RIGHT_PAREN RIGHT_BRACKET COMMA ]
tff_type -> tff_app_type . ARROW tff_type [ RIGHT_PAREN RIGHT_BRACKET COMMA ]
## Transitions:
-- On AT shift to state 36
-- On ARROW shift to state 40
## Reductions:
-- On RIGHT_PAREN reduce production tff_type -> tff_app_type
-- On RIGHT_BRACKET reduce production tff_type -> tff_app_type
-- On COMMA reduce production tff_type -> tff_app_type

State 36:
## Known stack suffix:
## tff_app_type AT
## LR(1) items:
tff_app_type -> tff_app_type AT . tff_atomic_type [ STAR RIGHT_PAREN RIGHT_BRACKET COMMA AT ARROW ]
## Transitions:
-- On WILDCARD shift to state 24
-- On UPPER_WORD shift to state 5
-- On TYPE_TY shift to state 25
-- On SINGLE_QUOTED shift to state 6
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 26
-- On DOLLAR_WORD shift to state 28
-- On variable shift to state 29
-- On type_const shift to state 30
-- On tff_atomic_type shift to state 37
-- On defined_ty shift to state 38
-- On atomic_word shift to state 39
## Reductions:

State 37:
## Known stack suffix:
## tff_app_type AT tff_atomic_type
## LR(1) items:
tff_app_type -> tff_app_type AT tff_atomic_type . [ STAR RIGHT_PAREN RIGHT_BRACKET COMMA AT ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tff_app_type -> tff_app_type AT tff_atomic_type

State 38:
## Known stack suffix:
## defined_ty
## LR(1) items:
tff_atomic_type -> defined_ty . [ STAR RIGHT_PAREN RIGHT_BRACKET COMMA AT ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tff_atomic_type -> defined_ty

State 39:
## Known stack suffix:
## atomic_word
## LR(1) items:
type_const -> atomic_word . [ STAR RIGHT_PAREN RIGHT_BRACKET LEFT_PAREN COMMA AT ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_const -> atomic_word

State 40:
## Known stack suffix:
## tff_app_type ARROW
## LR(1) items:
tff_type -> tff_app_type ARROW . tff_type [ RIGHT_PAREN RIGHT_BRACKET COMMA ]
## Transitions:
-- On WILDCARD shift to state 24
-- On UPPER_WORD shift to state 5
-- On TYPE_TY shift to state 25
-- On SINGLE_QUOTED shift to state 6
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 26
-- On DOLLAR_WORD shift to state 28
-- On variable shift to state 29
-- On type_const shift to state 30
-- On tff_type shift to state 41
-- On tff_atomic_type shift to state 34
-- On tff_app_type shift to state 35
-- On defined_ty shift to state 38
-- On atomic_word shift to state 39
## Reductions:

State 41:
## Known stack suffix:
## tff_app_type ARROW tff_type
## LR(1) items:
tff_type -> tff_app_type ARROW tff_type . [ RIGHT_PAREN RIGHT_BRACKET COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tff_type -> tff_app_type ARROW tff_type

State 42:
## Known stack suffix:
## tff_type COMMA separated_nonempty_list(COMMA,tff_type)
## LR(1) items:
separated_nonempty_list(COMMA,tff_type) -> tff_type COMMA separated_nonempty_list(COMMA,tff_type) . [ RIGHT_PAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production separated_nonempty_list(COMMA,tff_type) -> tff_type COMMA separated_nonempty_list(COMMA,tff_type)

State 43:
## Known stack suffix:
## type_const LEFT_PAREN separated_nonempty_list(COMMA,tff_type)
## LR(1) items:
tff_atomic_type -> type_const LEFT_PAREN separated_nonempty_list(COMMA,tff_type) . RIGHT_PAREN [ STAR RIGHT_PAREN RIGHT_BRACKET COMMA AT ARROW ]
## Transitions:
-- On RIGHT_PAREN shift to state 44
## Reductions:

State 44:
## Known stack suffix:
## type_const LEFT_PAREN separated_nonempty_list(COMMA,tff_type) RIGHT_PAREN
## LR(1) items:
tff_atomic_type -> type_const LEFT_PAREN separated_nonempty_list(COMMA,tff_type) RIGHT_PAREN . [ STAR RIGHT_PAREN RIGHT_BRACKET COMMA AT ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tff_atomic_type -> type_const LEFT_PAREN separated_nonempty_list(COMMA,tff_type) RIGHT_PAREN

State 45:
## Known stack suffix:
## tff_type
## LR(1) items:
tff_toplevel_type -> tff_type . [ RIGHT_PAREN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tff_toplevel_type -> tff_type

State 46:
## Known stack suffix:
## LEFT_PAREN tff_ty_star_list
## LR(1) items:
tff_toplevel_type -> LEFT_PAREN tff_ty_star_list . RIGHT_PAREN ARROW tff_app_type [ RIGHT_PAREN COMMA ]
## Transitions:
-- On RIGHT_PAREN shift to state 47
## Reductions:

State 47:
## Known stack suffix:
## LEFT_PAREN tff_ty_star_list RIGHT_PAREN
## LR(1) items:
tff_toplevel_type -> LEFT_PAREN tff_ty_star_list RIGHT_PAREN . ARROW tff_app_type [ RIGHT_PAREN COMMA ]
## Transitions:
-- On ARROW shift to state 48
## Reductions:

State 48:
## Known stack suffix:
## LEFT_PAREN tff_ty_star_list RIGHT_PAREN ARROW
## LR(1) items:
tff_toplevel_type -> LEFT_PAREN tff_ty_star_list RIGHT_PAREN ARROW . tff_app_type [ RIGHT_PAREN COMMA ]
## Transitions:
-- On WILDCARD shift to state 24
-- On UPPER_WORD shift to state 5
-- On TYPE_TY shift to state 25
-- On SINGLE_QUOTED shift to state 6
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 26
-- On DOLLAR_WORD shift to state 28
-- On variable shift to state 29
-- On type_const shift to state 30
-- On tff_atomic_type shift to state 34
-- On tff_app_type shift to state 49
-- On defined_ty shift to state 38
-- On atomic_word shift to state 39
## Reductions:

State 49:
## Known stack suffix:
## LEFT_PAREN tff_ty_star_list RIGHT_PAREN ARROW tff_app_type
## LR(1) items:
tff_app_type -> tff_app_type . AT tff_atomic_type [ RIGHT_PAREN COMMA AT ]
tff_toplevel_type -> LEFT_PAREN tff_ty_star_list RIGHT_PAREN ARROW tff_app_type . [ RIGHT_PAREN COMMA ]
## Transitions:
-- On AT shift to state 36
## Reductions:
-- On RIGHT_PAREN reduce production tff_toplevel_type -> LEFT_PAREN tff_ty_star_list RIGHT_PAREN ARROW tff_app_type
-- On COMMA reduce production tff_toplevel_type -> LEFT_PAREN tff_ty_star_list RIGHT_PAREN ARROW tff_app_type

State 50:
## Known stack suffix:
## LEFT_PAREN tff_toplevel_type
## LR(1) items:
tff_atomic_type -> LEFT_PAREN tff_toplevel_type . RIGHT_PAREN [ STAR RIGHT_PAREN RIGHT_BRACKET COMMA AT ARROW ]
## Transitions:
-- On RIGHT_PAREN shift to state 51
## Reductions:

State 51:
## Known stack suffix:
## LEFT_PAREN tff_toplevel_type RIGHT_PAREN
## LR(1) items:
tff_atomic_type -> LEFT_PAREN tff_toplevel_type RIGHT_PAREN . [ STAR RIGHT_PAREN RIGHT_BRACKET COMMA AT ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tff_atomic_type -> LEFT_PAREN tff_toplevel_type RIGHT_PAREN

State 52:
## Known stack suffix:
## tff_app_type
## LR(1) items:
tff_app_type -> tff_app_type . AT tff_atomic_type [ STAR RIGHT_PAREN AT ARROW ]
tff_ty_star_list -> tff_app_type . STAR separated_nonempty_list(STAR,tff_app_type) [ RIGHT_PAREN ]
tff_type -> tff_app_type . [ RIGHT_PAREN ]
tff_type -> tff_app_type . ARROW tff_type [ RIGHT_PAREN ]
## Transitions:
-- On STAR shift to state 53
-- On AT shift to state 36
-- On ARROW shift to state 40
## Reductions:
-- On RIGHT_PAREN reduce production tff_type -> tff_app_type

State 53:
## Known stack suffix:
## tff_app_type STAR
## LR(1) items:
tff_ty_star_list -> tff_app_type STAR . separated_nonempty_list(STAR,tff_app_type) [ RIGHT_PAREN ]
## Transitions:
-- On WILDCARD shift to state 24
-- On UPPER_WORD shift to state 5
-- On TYPE_TY shift to state 25
-- On SINGLE_QUOTED shift to state 6
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 26
-- On DOLLAR_WORD shift to state 28
-- On variable shift to state 29
-- On type_const shift to state 30
-- On tff_atomic_type shift to state 34
-- On tff_app_type shift to state 54
-- On separated_nonempty_list(STAR,tff_app_type) shift to state 57
-- On defined_ty shift to state 38
-- On atomic_word shift to state 39
## Reductions:

State 54:
## Known stack suffix:
## tff_app_type
## LR(1) items:
separated_nonempty_list(STAR,tff_app_type) -> tff_app_type . [ RIGHT_PAREN ]
separated_nonempty_list(STAR,tff_app_type) -> tff_app_type . STAR separated_nonempty_list(STAR,tff_app_type) [ RIGHT_PAREN ]
tff_app_type -> tff_app_type . AT tff_atomic_type [ STAR RIGHT_PAREN AT ]
## Transitions:
-- On STAR shift to state 55
-- On AT shift to state 36
## Reductions:
-- On RIGHT_PAREN reduce production separated_nonempty_list(STAR,tff_app_type) -> tff_app_type

State 55:
## Known stack suffix:
## tff_app_type STAR
## LR(1) items:
separated_nonempty_list(STAR,tff_app_type) -> tff_app_type STAR . separated_nonempty_list(STAR,tff_app_type) [ RIGHT_PAREN ]
## Transitions:
-- On WILDCARD shift to state 24
-- On UPPER_WORD shift to state 5
-- On TYPE_TY shift to state 25
-- On SINGLE_QUOTED shift to state 6
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 26
-- On DOLLAR_WORD shift to state 28
-- On variable shift to state 29
-- On type_const shift to state 30
-- On tff_atomic_type shift to state 34
-- On tff_app_type shift to state 54
-- On separated_nonempty_list(STAR,tff_app_type) shift to state 56
-- On defined_ty shift to state 38
-- On atomic_word shift to state 39
## Reductions:

State 56:
## Known stack suffix:
## tff_app_type STAR separated_nonempty_list(STAR,tff_app_type)
## LR(1) items:
separated_nonempty_list(STAR,tff_app_type) -> tff_app_type STAR separated_nonempty_list(STAR,tff_app_type) . [ RIGHT_PAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production separated_nonempty_list(STAR,tff_app_type) -> tff_app_type STAR separated_nonempty_list(STAR,tff_app_type)

State 57:
## Known stack suffix:
## tff_app_type STAR separated_nonempty_list(STAR,tff_app_type)
## LR(1) items:
tff_ty_star_list -> tff_app_type STAR separated_nonempty_list(STAR,tff_app_type) . [ RIGHT_PAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tff_ty_star_list -> tff_app_type STAR separated_nonempty_list(STAR,tff_app_type)

State 58:
## Known stack suffix:
## UPPER_WORD COLUMN tff_type
## LR(1) items:
typed_var -> UPPER_WORD COLUMN tff_type . [ RIGHT_BRACKET COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typed_var -> UPPER_WORD COLUMN tff_type

State 59:
## Known stack suffix:
## LAMBDA LEFT_BRACKET typed_vars
## LR(1) items:
quantified_formula -> LAMBDA LEFT_BRACKET typed_vars . RIGHT_BRACKET COLUMN unary_formula [ XOR VLINE RIGHT_PAREN NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA AT ARROW AND ]
## Transitions:
-- On RIGHT_BRACKET shift to state 60
## Reductions:

State 60:
## Known stack suffix:
## LAMBDA LEFT_BRACKET typed_vars RIGHT_BRACKET
## LR(1) items:
quantified_formula -> LAMBDA LEFT_BRACKET typed_vars RIGHT_BRACKET . COLUMN unary_formula [ XOR VLINE RIGHT_PAREN NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA AT ARROW AND ]
## Transitions:
-- On COLUMN shift to state 61
## Reductions:

State 61:
## Known stack suffix:
## LAMBDA LEFT_BRACKET typed_vars RIGHT_BRACKET COLUMN
## LR(1) items:
quantified_formula -> LAMBDA LEFT_BRACKET typed_vars RIGHT_BRACKET COLUMN . unary_formula [ XOR VLINE RIGHT_PAREN NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA AT ARROW AND ]
## Transitions:
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 17
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 79
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 196
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119
## Reductions:

State 62:
## Known stack suffix:
## FORALLCONST
## LR(1) items:
atomic_formula -> FORALLCONST . [ XOR VLINE RIGHT_PAREN NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atomic_formula -> FORALLCONST

State 63:
## Known stack suffix:
## FORALL
## LR(1) items:
quantified_formula -> FORALL . LEFT_BRACKET typed_vars RIGHT_BRACKET COLUMN unary_formula [ XOR VLINE RIGHT_PAREN NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA AT ARROW AND ]
## Transitions:
-- On LEFT_BRACKET shift to state 64
## Reductions:

State 64:
## Known stack suffix:
## FORALL LEFT_BRACKET
## LR(1) items:
quantified_formula -> FORALL LEFT_BRACKET . typed_vars RIGHT_BRACKET COLUMN unary_formula [ XOR VLINE RIGHT_PAREN NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA AT ARROW AND ]
## Transitions:
-- On UPPER_WORD shift to state 22
-- On typed_vars shift to state 65
-- On typed_var shift to state 191
-- On separated_nonempty_list(COMMA,typed_var) shift to state 194
## Reductions:

State 65:
## Known stack suffix:
## FORALL LEFT_BRACKET typed_vars
## LR(1) items:
quantified_formula -> FORALL LEFT_BRACKET typed_vars . RIGHT_BRACKET COLUMN unary_formula [ XOR VLINE RIGHT_PAREN NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA AT ARROW AND ]
## Transitions:
-- On RIGHT_BRACKET shift to state 66
## Reductions:

State 66:
## Known stack suffix:
## FORALL LEFT_BRACKET typed_vars RIGHT_BRACKET
## LR(1) items:
quantified_formula -> FORALL LEFT_BRACKET typed_vars RIGHT_BRACKET . COLUMN unary_formula [ XOR VLINE RIGHT_PAREN NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA AT ARROW AND ]
## Transitions:
-- On COLUMN shift to state 67
## Reductions:

State 67:
## Known stack suffix:
## FORALL LEFT_BRACKET typed_vars RIGHT_BRACKET COLUMN
## LR(1) items:
quantified_formula -> FORALL LEFT_BRACKET typed_vars RIGHT_BRACKET COLUMN . unary_formula [ XOR VLINE RIGHT_PAREN NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA AT ARROW AND ]
## Transitions:
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 17
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 79
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 195
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119
## Reductions:

State 68:
## Known stack suffix:
## FALSE
## LR(1) items:
atomic_formula -> FALSE . [ XOR VLINE RIGHT_PAREN NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atomic_formula -> FALSE

State 69:
## Known stack suffix:
## EXISTSCONST
## LR(1) items:
atomic_formula -> EXISTSCONST . [ XOR VLINE RIGHT_PAREN NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atomic_formula -> EXISTSCONST

State 70:
## Known stack suffix:
## EXISTS
## LR(1) items:
quantified_formula -> EXISTS . LEFT_BRACKET typed_vars RIGHT_BRACKET COLUMN unary_formula [ XOR VLINE RIGHT_PAREN NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA AT ARROW AND ]
## Transitions:
-- On LEFT_BRACKET shift to state 71
## Reductions:

State 71:
## Known stack suffix:
## EXISTS LEFT_BRACKET
## LR(1) items:
quantified_formula -> EXISTS LEFT_BRACKET . typed_vars RIGHT_BRACKET COLUMN unary_formula [ XOR VLINE RIGHT_PAREN NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA AT ARROW AND ]
## Transitions:
-- On UPPER_WORD shift to state 22
-- On typed_vars shift to state 72
-- On typed_var shift to state 191
-- On separated_nonempty_list(COMMA,typed_var) shift to state 194
## Reductions:

State 72:
## Known stack suffix:
## EXISTS LEFT_BRACKET typed_vars
## LR(1) items:
quantified_formula -> EXISTS LEFT_BRACKET typed_vars . RIGHT_BRACKET COLUMN unary_formula [ XOR VLINE RIGHT_PAREN NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA AT ARROW AND ]
## Transitions:
-- On RIGHT_BRACKET shift to state 73
## Reductions:

State 73:
## Known stack suffix:
## EXISTS LEFT_BRACKET typed_vars RIGHT_BRACKET
## LR(1) items:
quantified_formula -> EXISTS LEFT_BRACKET typed_vars RIGHT_BRACKET . COLUMN unary_formula [ XOR VLINE RIGHT_PAREN NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA AT ARROW AND ]
## Transitions:
-- On COLUMN shift to state 74
## Reductions:

State 74:
## Known stack suffix:
## EXISTS LEFT_BRACKET typed_vars RIGHT_BRACKET COLUMN
## LR(1) items:
quantified_formula -> EXISTS LEFT_BRACKET typed_vars RIGHT_BRACKET COLUMN . unary_formula [ XOR VLINE RIGHT_PAREN NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA AT ARROW AND ]
## Transitions:
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 17
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 79
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 190
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119
## Reductions:

State 75:
## Known stack suffix:
## DOLLAR_DOLLAR_WORD
## LR(1) items:
atomic_system_word -> DOLLAR_DOLLAR_WORD . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_PAREN LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atomic_system_word -> DOLLAR_DOLLAR_WORD

State 76:
## Known stack suffix:
## DISTINCT_OBJECT
## LR(1) items:
defined_atom -> DISTINCT_OBJECT . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production defined_atom -> DISTINCT_OBJECT

State 77:
## Known stack suffix:
## variable
## LR(1) items:
term -> variable . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production term -> variable

State 78:
## Known stack suffix:
## unitary_infix_formula
## LR(1) items:
unary_formula -> unitary_infix_formula . [ XOR VLINE RIGHT_PAREN NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA AT ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production unary_formula -> unitary_infix_formula

State 79:
## Known stack suffix:
## unitary_formula
## LR(1) items:
unitary_infix_formula -> unitary_formula . [ XOR VLINE RIGHT_PAREN NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA AT ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production unitary_infix_formula -> unitary_formula

State 80:
## Known stack suffix:
## unitary_atomic_formula
## LR(1) items:
unitary_formula -> unitary_atomic_formula . [ XOR VLINE RIGHT_PAREN NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA AT ARROW AND ]
unitary_infix_formula -> unitary_atomic_formula . EQUAL unitary_formula [ XOR VLINE RIGHT_PAREN NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA AT ARROW AND ]
unitary_infix_formula -> unitary_atomic_formula . NOT_EQUAL unitary_formula [ XOR VLINE RIGHT_PAREN NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA AT ARROW AND ]
## Transitions:
-- On NOT_EQUAL shift to state 81
-- On EQUAL shift to state 188
## Reductions:
-- On XOR reduce production unitary_formula -> unitary_atomic_formula
-- On VLINE reduce production unitary_formula -> unitary_atomic_formula
-- On RIGHT_PAREN reduce production unitary_formula -> unitary_atomic_formula
-- On NOTVLINE reduce production unitary_formula -> unitary_atomic_formula
-- On NOTAND reduce production unitary_formula -> unitary_atomic_formula
-- On LEFT_IMPLY reduce production unitary_formula -> unitary_atomic_formula
-- On IMPLY reduce production unitary_formula -> unitary_atomic_formula
-- On EQUIV reduce production unitary_formula -> unitary_atomic_formula
-- On EOI reduce production unitary_formula -> unitary_atomic_formula
-- On COMMA reduce production unitary_formula -> unitary_atomic_formula
-- On AT reduce production unitary_formula -> unitary_atomic_formula
-- On ARROW reduce production unitary_formula -> unitary_atomic_formula
-- On AND reduce production unitary_formula -> unitary_atomic_formula

State 81:
## Known stack suffix:
## unitary_atomic_formula NOT_EQUAL
## LR(1) items:
unitary_infix_formula -> unitary_atomic_formula NOT_EQUAL . unitary_formula [ XOR VLINE RIGHT_PAREN NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA AT ARROW AND ]
## Transitions:
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 17
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On variable shift to state 77
-- On unitary_formula shift to state 82
-- On unitary_atomic_formula shift to state 83
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119
## Reductions:

State 82:
## Known stack suffix:
## unitary_atomic_formula NOT_EQUAL unitary_formula
## LR(1) items:
unitary_infix_formula -> unitary_atomic_formula NOT_EQUAL unitary_formula . [ XOR VLINE RIGHT_PAREN NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA AT ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production unitary_infix_formula -> unitary_atomic_formula NOT_EQUAL unitary_formula

State 83:
## Known stack suffix:
## unitary_atomic_formula
## LR(1) items:
unitary_formula -> unitary_atomic_formula . [ XOR VLINE RIGHT_PAREN NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA AT ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production unitary_formula -> unitary_atomic_formula

State 84:
## Known stack suffix:
## term
## LR(1) items:
atomic_formula -> term . [ XOR VLINE RIGHT_PAREN NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atomic_formula -> term

State 85:
## Known stack suffix:
## system_term
## LR(1) items:
function_term -> system_term . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production function_term -> system_term

State 86:
## Known stack suffix:
## system_functor
## LR(1) items:
system_constant -> system_functor . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT ARROW AND ]
system_term -> system_functor . LEFT_PAREN term_arguments RIGHT_PAREN [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT ARROW AND ]
## Transitions:
-- On LEFT_PAREN shift to state 87
## Reductions:
-- On XOR reduce production system_constant -> system_functor
-- On VLINE reduce production system_constant -> system_functor
-- On RIGHT_PAREN reduce production system_constant -> system_functor
-- On RIGHT_BRACKET reduce production system_constant -> system_functor
-- On NOT_EQUAL reduce production system_constant -> system_functor
-- On NOTVLINE reduce production system_constant -> system_functor
-- On NOTAND reduce production system_constant -> system_functor
-- On LEFT_IMPLY reduce production system_constant -> system_functor
-- On IMPLY reduce production system_constant -> system_functor
-- On EQUIV reduce production system_constant -> system_functor
-- On EQUAL reduce production system_constant -> system_functor
-- On EOI reduce production system_constant -> system_functor
-- On COMMA reduce production system_constant -> system_functor
-- On AT reduce production system_constant -> system_functor
-- On ARROW reduce production system_constant -> system_functor
-- On AND reduce production system_constant -> system_functor

State 87:
## Known stack suffix:
## system_functor LEFT_PAREN
## LR(1) items:
system_term -> system_functor LEFT_PAREN . term_arguments RIGHT_PAREN [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT ARROW AND ]
## Transitions:
-- On XOR shift to state 13
-- On WILDCARD shift to state 4
-- On VLINE shift to state 18
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOTVLINE shift to state 88
-- On NOTAND shift to state 98
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 17
-- On LEFT_IMPLY shift to state 108
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On IMPLY shift to state 120
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On EQUIV shift to state 125
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On ARROW shift to state 130
-- On AND shift to state 135
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 140
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 143
-- On term_arguments shift to state 186
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On separated_nonempty_list(COMMA,formula) shift to state 170
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On or_formula shift to state 171
-- On nonassoc_binary_formula shift to state 172
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On formula shift to state 173
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On binary_formula shift to state 176
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119
-- On assoc_binary_formula_aux(VLINE) shift to state 177
-- On assoc_binary_formula_aux(AND) shift to state 178
-- On assoc_binary_formula shift to state 179
-- On app_formula shift to state 180
-- On and_formula shift to state 183
## Reductions:

State 88:
## Known stack suffix:
## NOTVLINE
## LR(1) items:
nonassoc_binary_formula -> NOTVLINE . AT unary_formula AT unary_formula [ RIGHT_PAREN EOI COMMA ]
## Transitions:
-- On AT shift to state 89
## Reductions:

State 89:
## Known stack suffix:
## NOTVLINE AT
## LR(1) items:
nonassoc_binary_formula -> NOTVLINE AT . unary_formula AT unary_formula [ RIGHT_PAREN EOI COMMA ]
## Transitions:
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 17
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 79
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 90
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119
## Reductions:

State 90:
## Known stack suffix:
## NOTVLINE AT unary_formula
## LR(1) items:
nonassoc_binary_formula -> NOTVLINE AT unary_formula . AT unary_formula [ RIGHT_PAREN EOI COMMA ]
## Transitions:
-- On AT shift to state 91
## Reductions:

State 91:
## Known stack suffix:
## NOTVLINE AT unary_formula AT
## LR(1) items:
nonassoc_binary_formula -> NOTVLINE AT unary_formula AT . unary_formula [ RIGHT_PAREN EOI COMMA ]
## Transitions:
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 17
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 79
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 92
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119
## Reductions:

State 92:
## Known stack suffix:
## NOTVLINE AT unary_formula AT unary_formula
## LR(1) items:
nonassoc_binary_formula -> NOTVLINE AT unary_formula AT unary_formula . [ RIGHT_PAREN EOI COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonassoc_binary_formula -> NOTVLINE AT unary_formula AT unary_formula

State 93:
## Known stack suffix:
## system_constant
## LR(1) items:
system_term -> system_constant . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production system_term -> system_constant

State 94:
## Known stack suffix:
## quantified_formula
## LR(1) items:
unitary_formula -> quantified_formula . [ XOR VLINE RIGHT_PAREN NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA AT ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production unitary_formula -> quantified_formula

State 95:
## Known stack suffix:
## plain_term
## LR(1) items:
function_term -> plain_term . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production function_term -> plain_term

State 96:
## Known stack suffix:
## functor_
## LR(1) items:
plain_term -> functor_ . LEFT_PAREN term_arguments RIGHT_PAREN [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT ARROW AND ]
## Transitions:
-- On LEFT_PAREN shift to state 97
## Reductions:

State 97:
## Known stack suffix:
## functor_ LEFT_PAREN
## LR(1) items:
plain_term -> functor_ LEFT_PAREN . term_arguments RIGHT_PAREN [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT ARROW AND ]
## Transitions:
-- On XOR shift to state 13
-- On WILDCARD shift to state 4
-- On VLINE shift to state 18
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOTVLINE shift to state 88
-- On NOTAND shift to state 98
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 17
-- On LEFT_IMPLY shift to state 108
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On IMPLY shift to state 120
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On EQUIV shift to state 125
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On ARROW shift to state 130
-- On AND shift to state 135
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 140
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 143
-- On term_arguments shift to state 184
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On separated_nonempty_list(COMMA,formula) shift to state 170
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On or_formula shift to state 171
-- On nonassoc_binary_formula shift to state 172
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On formula shift to state 173
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On binary_formula shift to state 176
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119
-- On assoc_binary_formula_aux(VLINE) shift to state 177
-- On assoc_binary_formula_aux(AND) shift to state 178
-- On assoc_binary_formula shift to state 179
-- On app_formula shift to state 180
-- On and_formula shift to state 183
## Reductions:

State 98:
## Known stack suffix:
## NOTAND
## LR(1) items:
nonassoc_binary_formula -> NOTAND . AT unary_formula AT unary_formula [ RIGHT_PAREN EOI COMMA ]
## Transitions:
-- On AT shift to state 99
## Reductions:

State 99:
## Known stack suffix:
## NOTAND AT
## LR(1) items:
nonassoc_binary_formula -> NOTAND AT . unary_formula AT unary_formula [ RIGHT_PAREN EOI COMMA ]
## Transitions:
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 17
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 79
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 100
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119
## Reductions:

State 100:
## Known stack suffix:
## NOTAND AT unary_formula
## LR(1) items:
nonassoc_binary_formula -> NOTAND AT unary_formula . AT unary_formula [ RIGHT_PAREN EOI COMMA ]
## Transitions:
-- On AT shift to state 101
## Reductions:

State 101:
## Known stack suffix:
## NOTAND AT unary_formula AT
## LR(1) items:
nonassoc_binary_formula -> NOTAND AT unary_formula AT . unary_formula [ RIGHT_PAREN EOI COMMA ]
## Transitions:
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 17
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 79
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 102
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119
## Reductions:

State 102:
## Known stack suffix:
## NOTAND AT unary_formula AT unary_formula
## LR(1) items:
nonassoc_binary_formula -> NOTAND AT unary_formula AT unary_formula . [ RIGHT_PAREN EOI COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonassoc_binary_formula -> NOTAND AT unary_formula AT unary_formula

State 103:
## Known stack suffix:
## function_term
## LR(1) items:
term -> function_term . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production term -> function_term

State 104:
## Known stack suffix:
## defined_term
## LR(1) items:
function_term -> defined_term . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production function_term -> defined_term

State 105:
## Known stack suffix:
## defined_plain_term
## LR(1) items:
defined_atomic_term -> defined_plain_term . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production defined_atomic_term -> defined_plain_term

State 106:
## Known stack suffix:
## defined_functor
## LR(1) items:
defined_plain_term -> defined_functor . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT ARROW AND ]
defined_plain_term -> defined_functor . LEFT_PAREN term_arguments RIGHT_PAREN [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT ARROW AND ]
## Transitions:
-- On LEFT_PAREN shift to state 107
## Reductions:
-- On XOR reduce production defined_plain_term -> defined_functor
-- On VLINE reduce production defined_plain_term -> defined_functor
-- On RIGHT_PAREN reduce production defined_plain_term -> defined_functor
-- On RIGHT_BRACKET reduce production defined_plain_term -> defined_functor
-- On NOT_EQUAL reduce production defined_plain_term -> defined_functor
-- On NOTVLINE reduce production defined_plain_term -> defined_functor
-- On NOTAND reduce production defined_plain_term -> defined_functor
-- On LEFT_IMPLY reduce production defined_plain_term -> defined_functor
-- On IMPLY reduce production defined_plain_term -> defined_functor
-- On EQUIV reduce production defined_plain_term -> defined_functor
-- On EQUAL reduce production defined_plain_term -> defined_functor
-- On EOI reduce production defined_plain_term -> defined_functor
-- On COMMA reduce production defined_plain_term -> defined_functor
-- On AT reduce production defined_plain_term -> defined_functor
-- On ARROW reduce production defined_plain_term -> defined_functor
-- On AND reduce production defined_plain_term -> defined_functor

State 107:
## Known stack suffix:
## defined_functor LEFT_PAREN
## LR(1) items:
defined_plain_term -> defined_functor LEFT_PAREN . term_arguments RIGHT_PAREN [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT ARROW AND ]
## Transitions:
-- On XOR shift to state 13
-- On WILDCARD shift to state 4
-- On VLINE shift to state 18
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOTVLINE shift to state 88
-- On NOTAND shift to state 98
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 17
-- On LEFT_IMPLY shift to state 108
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On IMPLY shift to state 120
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On EQUIV shift to state 125
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On ARROW shift to state 130
-- On AND shift to state 135
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 140
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 143
-- On term_arguments shift to state 168
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On separated_nonempty_list(COMMA,formula) shift to state 170
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On or_formula shift to state 171
-- On nonassoc_binary_formula shift to state 172
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On formula shift to state 173
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On binary_formula shift to state 176
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119
-- On assoc_binary_formula_aux(VLINE) shift to state 177
-- On assoc_binary_formula_aux(AND) shift to state 178
-- On assoc_binary_formula shift to state 179
-- On app_formula shift to state 180
-- On and_formula shift to state 183
## Reductions:

State 108:
## Known stack suffix:
## LEFT_IMPLY
## LR(1) items:
nonassoc_binary_formula -> LEFT_IMPLY . AT unary_formula AT unary_formula [ RIGHT_PAREN EOI COMMA ]
## Transitions:
-- On AT shift to state 109
## Reductions:

State 109:
## Known stack suffix:
## LEFT_IMPLY AT
## LR(1) items:
nonassoc_binary_formula -> LEFT_IMPLY AT . unary_formula AT unary_formula [ RIGHT_PAREN EOI COMMA ]
## Transitions:
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 17
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 79
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 110
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119
## Reductions:

State 110:
## Known stack suffix:
## LEFT_IMPLY AT unary_formula
## LR(1) items:
nonassoc_binary_formula -> LEFT_IMPLY AT unary_formula . AT unary_formula [ RIGHT_PAREN EOI COMMA ]
## Transitions:
-- On AT shift to state 111
## Reductions:

State 111:
## Known stack suffix:
## LEFT_IMPLY AT unary_formula AT
## LR(1) items:
nonassoc_binary_formula -> LEFT_IMPLY AT unary_formula AT . unary_formula [ RIGHT_PAREN EOI COMMA ]
## Transitions:
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 17
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 79
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 112
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119
## Reductions:

State 112:
## Known stack suffix:
## LEFT_IMPLY AT unary_formula AT unary_formula
## LR(1) items:
nonassoc_binary_formula -> LEFT_IMPLY AT unary_formula AT unary_formula . [ RIGHT_PAREN EOI COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonassoc_binary_formula -> LEFT_IMPLY AT unary_formula AT unary_formula

State 113:
## Known stack suffix:
## defined_atomic_term
## LR(1) items:
defined_term -> defined_atomic_term . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production defined_term -> defined_atomic_term

State 114:
## Known stack suffix:
## defined_atom
## LR(1) items:
defined_term -> defined_atom . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production defined_term -> defined_atom

State 115:
## Known stack suffix:
## atomic_word
## LR(1) items:
atomic_term -> atomic_word . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT ARROW AND ]
functor_ -> atomic_word . [ LEFT_PAREN ]
## Transitions:
## Reductions:
-- On XOR reduce production atomic_term -> atomic_word
-- On VLINE reduce production atomic_term -> atomic_word
-- On RIGHT_PAREN reduce production atomic_term -> atomic_word
-- On RIGHT_BRACKET reduce production atomic_term -> atomic_word
-- On NOT_EQUAL reduce production atomic_term -> atomic_word
-- On NOTVLINE reduce production atomic_term -> atomic_word
-- On NOTAND reduce production atomic_term -> atomic_word
-- On LEFT_PAREN reduce production functor_ -> atomic_word
-- On LEFT_IMPLY reduce production atomic_term -> atomic_word
-- On IMPLY reduce production atomic_term -> atomic_word
-- On EQUIV reduce production atomic_term -> atomic_word
-- On EQUAL reduce production atomic_term -> atomic_word
-- On EOI reduce production atomic_term -> atomic_word
-- On COMMA reduce production atomic_term -> atomic_word
-- On AT reduce production atomic_term -> atomic_word
-- On ARROW reduce production atomic_term -> atomic_word
-- On AND reduce production atomic_term -> atomic_word

State 116:
## Known stack suffix:
## atomic_term
## LR(1) items:
plain_term -> atomic_term . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production plain_term -> atomic_term

State 117:
## Known stack suffix:
## atomic_system_word
## LR(1) items:
system_functor -> atomic_system_word . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_PAREN LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production system_functor -> atomic_system_word

State 118:
## Known stack suffix:
## atomic_formula
## LR(1) items:
unitary_atomic_formula -> atomic_formula . [ XOR VLINE RIGHT_PAREN NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production unitary_atomic_formula -> atomic_formula

State 119:
## Known stack suffix:
## atomic_defined_word
## LR(1) items:
defined_functor -> atomic_defined_word . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_PAREN LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production defined_functor -> atomic_defined_word

State 120:
## Known stack suffix:
## IMPLY
## LR(1) items:
nonassoc_binary_formula -> IMPLY . AT unary_formula AT unary_formula [ RIGHT_PAREN EOI COMMA ]
## Transitions:
-- On AT shift to state 121
## Reductions:

State 121:
## Known stack suffix:
## IMPLY AT
## LR(1) items:
nonassoc_binary_formula -> IMPLY AT . unary_formula AT unary_formula [ RIGHT_PAREN EOI COMMA ]
## Transitions:
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 17
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 79
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 122
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119
## Reductions:

State 122:
## Known stack suffix:
## IMPLY AT unary_formula
## LR(1) items:
nonassoc_binary_formula -> IMPLY AT unary_formula . AT unary_formula [ RIGHT_PAREN EOI COMMA ]
## Transitions:
-- On AT shift to state 123
## Reductions:

State 123:
## Known stack suffix:
## IMPLY AT unary_formula AT
## LR(1) items:
nonassoc_binary_formula -> IMPLY AT unary_formula AT . unary_formula [ RIGHT_PAREN EOI COMMA ]
## Transitions:
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 17
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 79
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 124
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119
## Reductions:

State 124:
## Known stack suffix:
## IMPLY AT unary_formula AT unary_formula
## LR(1) items:
nonassoc_binary_formula -> IMPLY AT unary_formula AT unary_formula . [ RIGHT_PAREN EOI COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonassoc_binary_formula -> IMPLY AT unary_formula AT unary_formula

State 125:
## Known stack suffix:
## EQUIV
## LR(1) items:
nonassoc_binary_formula -> EQUIV . AT unary_formula AT unary_formula [ RIGHT_PAREN EOI COMMA ]
## Transitions:
-- On AT shift to state 126
## Reductions:

State 126:
## Known stack suffix:
## EQUIV AT
## LR(1) items:
nonassoc_binary_formula -> EQUIV AT . unary_formula AT unary_formula [ RIGHT_PAREN EOI COMMA ]
## Transitions:
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 17
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 79
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 127
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119
## Reductions:

State 127:
## Known stack suffix:
## EQUIV AT unary_formula
## LR(1) items:
nonassoc_binary_formula -> EQUIV AT unary_formula . AT unary_formula [ RIGHT_PAREN EOI COMMA ]
## Transitions:
-- On AT shift to state 128
## Reductions:

State 128:
## Known stack suffix:
## EQUIV AT unary_formula AT
## LR(1) items:
nonassoc_binary_formula -> EQUIV AT unary_formula AT . unary_formula [ RIGHT_PAREN EOI COMMA ]
## Transitions:
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 17
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 79
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 129
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119
## Reductions:

State 129:
## Known stack suffix:
## EQUIV AT unary_formula AT unary_formula
## LR(1) items:
nonassoc_binary_formula -> EQUIV AT unary_formula AT unary_formula . [ RIGHT_PAREN EOI COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonassoc_binary_formula -> EQUIV AT unary_formula AT unary_formula

State 130:
## Known stack suffix:
## ARROW
## LR(1) items:
nonassoc_binary_formula -> ARROW . AT unary_formula AT unary_formula [ RIGHT_PAREN EOI COMMA ]
## Transitions:
-- On AT shift to state 131
## Reductions:

State 131:
## Known stack suffix:
## ARROW AT
## LR(1) items:
nonassoc_binary_formula -> ARROW AT . unary_formula AT unary_formula [ RIGHT_PAREN EOI COMMA ]
## Transitions:
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 17
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 79
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 132
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119
## Reductions:

State 132:
## Known stack suffix:
## ARROW AT unary_formula
## LR(1) items:
nonassoc_binary_formula -> ARROW AT unary_formula . AT unary_formula [ RIGHT_PAREN EOI COMMA ]
## Transitions:
-- On AT shift to state 133
## Reductions:

State 133:
## Known stack suffix:
## ARROW AT unary_formula AT
## LR(1) items:
nonassoc_binary_formula -> ARROW AT unary_formula AT . unary_formula [ RIGHT_PAREN EOI COMMA ]
## Transitions:
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 17
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 79
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 134
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119
## Reductions:

State 134:
## Known stack suffix:
## ARROW AT unary_formula AT unary_formula
## LR(1) items:
nonassoc_binary_formula -> ARROW AT unary_formula AT unary_formula . [ RIGHT_PAREN EOI COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonassoc_binary_formula -> ARROW AT unary_formula AT unary_formula

State 135:
## Known stack suffix:
## AND
## LR(1) items:
nonassoc_binary_formula -> AND . AT unary_formula AT unary_formula [ RIGHT_PAREN EOI COMMA ]
## Transitions:
-- On AT shift to state 136
## Reductions:

State 136:
## Known stack suffix:
## AND AT
## LR(1) items:
nonassoc_binary_formula -> AND AT . unary_formula AT unary_formula [ RIGHT_PAREN EOI COMMA ]
## Transitions:
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 17
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 79
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 137
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119
## Reductions:

State 137:
## Known stack suffix:
## AND AT unary_formula
## LR(1) items:
nonassoc_binary_formula -> AND AT unary_formula . AT unary_formula [ RIGHT_PAREN EOI COMMA ]
## Transitions:
-- On AT shift to state 138
## Reductions:

State 138:
## Known stack suffix:
## AND AT unary_formula AT
## LR(1) items:
nonassoc_binary_formula -> AND AT unary_formula AT . unary_formula [ RIGHT_PAREN EOI COMMA ]
## Transitions:
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 17
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 79
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 139
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119
## Reductions:

State 139:
## Known stack suffix:
## AND AT unary_formula AT unary_formula
## LR(1) items:
nonassoc_binary_formula -> AND AT unary_formula AT unary_formula . [ RIGHT_PAREN EOI COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonassoc_binary_formula -> AND AT unary_formula AT unary_formula

State 140:
## Known stack suffix:
## unitary_formula
## LR(1) items:
app_formula -> unitary_formula . AT unary_formula [ RIGHT_PAREN EOI COMMA AT ]
unitary_infix_formula -> unitary_formula . [ XOR VLINE RIGHT_PAREN NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA ARROW AND ]
## Transitions:
-- On AT shift to state 141
## Reductions:
-- On XOR reduce production unitary_infix_formula -> unitary_formula
-- On VLINE reduce production unitary_infix_formula -> unitary_formula
-- On RIGHT_PAREN reduce production unitary_infix_formula -> unitary_formula
-- On NOTVLINE reduce production unitary_infix_formula -> unitary_formula
-- On NOTAND reduce production unitary_infix_formula -> unitary_formula
-- On LEFT_IMPLY reduce production unitary_infix_formula -> unitary_formula
-- On IMPLY reduce production unitary_infix_formula -> unitary_formula
-- On EQUIV reduce production unitary_infix_formula -> unitary_formula
-- On EOI reduce production unitary_infix_formula -> unitary_formula
-- On COMMA reduce production unitary_infix_formula -> unitary_formula
-- On ARROW reduce production unitary_infix_formula -> unitary_formula
-- On AND reduce production unitary_infix_formula -> unitary_formula

State 141:
## Known stack suffix:
## unitary_formula AT
## LR(1) items:
app_formula -> unitary_formula AT . unary_formula [ RIGHT_PAREN EOI COMMA AT ]
## Transitions:
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 17
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 79
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 142
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119
## Reductions:

State 142:
## Known stack suffix:
## unitary_formula AT unary_formula
## LR(1) items:
app_formula -> unitary_formula AT unary_formula . [ RIGHT_PAREN EOI COMMA AT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production app_formula -> unitary_formula AT unary_formula

State 143:
## Known stack suffix:
## unary_formula
## LR(1) items:
assoc_binary_formula_aux(AND) -> unary_formula . AND separated_nonempty_list(AND,unary_formula) [ RIGHT_PAREN EOI COMMA ]
assoc_binary_formula_aux(VLINE) -> unary_formula . VLINE separated_nonempty_list(VLINE,unary_formula) [ RIGHT_PAREN EOI COMMA ]
formula -> unary_formula . [ RIGHT_PAREN EOI COMMA ]
nonassoc_binary_formula -> unary_formula . EQUIV unary_formula [ RIGHT_PAREN EOI COMMA ]
nonassoc_binary_formula -> unary_formula . IMPLY unary_formula [ RIGHT_PAREN EOI COMMA ]
nonassoc_binary_formula -> unary_formula . LEFT_IMPLY unary_formula [ RIGHT_PAREN EOI COMMA ]
nonassoc_binary_formula -> unary_formula . XOR unary_formula [ RIGHT_PAREN EOI COMMA ]
nonassoc_binary_formula -> unary_formula . NOTVLINE unary_formula [ RIGHT_PAREN EOI COMMA ]
nonassoc_binary_formula -> unary_formula . NOTAND unary_formula [ RIGHT_PAREN EOI COMMA ]
nonassoc_binary_formula -> unary_formula . ARROW unary_formula [ RIGHT_PAREN EOI COMMA ]
## Transitions:
-- On XOR shift to state 144
-- On VLINE shift to state 146
-- On NOTVLINE shift to state 151
-- On NOTAND shift to state 153
-- On LEFT_IMPLY shift to state 155
-- On IMPLY shift to state 157
-- On EQUIV shift to state 159
-- On ARROW shift to state 161
-- On AND shift to state 163
## Reductions:
-- On RIGHT_PAREN reduce production formula -> unary_formula
-- On EOI reduce production formula -> unary_formula
-- On COMMA reduce production formula -> unary_formula

State 144:
## Known stack suffix:
## unary_formula XOR
## LR(1) items:
nonassoc_binary_formula -> unary_formula XOR . unary_formula [ RIGHT_PAREN EOI COMMA ]
## Transitions:
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 17
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 79
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 145
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119
## Reductions:

State 145:
## Known stack suffix:
## unary_formula XOR unary_formula
## LR(1) items:
nonassoc_binary_formula -> unary_formula XOR unary_formula . [ RIGHT_PAREN EOI COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonassoc_binary_formula -> unary_formula XOR unary_formula

State 146:
## Known stack suffix:
## unary_formula VLINE
## LR(1) items:
assoc_binary_formula_aux(VLINE) -> unary_formula VLINE . separated_nonempty_list(VLINE,unary_formula) [ RIGHT_PAREN EOI COMMA ]
## Transitions:
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 17
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 79
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 147
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On separated_nonempty_list(VLINE,unary_formula) shift to state 150
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119
## Reductions:

State 147:
## Known stack suffix:
## unary_formula
## LR(1) items:
separated_nonempty_list(VLINE,unary_formula) -> unary_formula . [ RIGHT_PAREN EOI COMMA ]
separated_nonempty_list(VLINE,unary_formula) -> unary_formula . VLINE separated_nonempty_list(VLINE,unary_formula) [ RIGHT_PAREN EOI COMMA ]
## Transitions:
-- On VLINE shift to state 148
## Reductions:
-- On RIGHT_PAREN reduce production separated_nonempty_list(VLINE,unary_formula) -> unary_formula
-- On EOI reduce production separated_nonempty_list(VLINE,unary_formula) -> unary_formula
-- On COMMA reduce production separated_nonempty_list(VLINE,unary_formula) -> unary_formula

State 148:
## Known stack suffix:
## unary_formula VLINE
## LR(1) items:
separated_nonempty_list(VLINE,unary_formula) -> unary_formula VLINE . separated_nonempty_list(VLINE,unary_formula) [ RIGHT_PAREN EOI COMMA ]
## Transitions:
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 17
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 79
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 147
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On separated_nonempty_list(VLINE,unary_formula) shift to state 149
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119
## Reductions:

State 149:
## Known stack suffix:
## unary_formula VLINE separated_nonempty_list(VLINE,unary_formula)
## LR(1) items:
separated_nonempty_list(VLINE,unary_formula) -> unary_formula VLINE separated_nonempty_list(VLINE,unary_formula) . [ RIGHT_PAREN EOI COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production separated_nonempty_list(VLINE,unary_formula) -> unary_formula VLINE separated_nonempty_list(VLINE,unary_formula)

State 150:
## Known stack suffix:
## unary_formula VLINE separated_nonempty_list(VLINE,unary_formula)
## LR(1) items:
assoc_binary_formula_aux(VLINE) -> unary_formula VLINE separated_nonempty_list(VLINE,unary_formula) . [ RIGHT_PAREN EOI COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assoc_binary_formula_aux(VLINE) -> unary_formula VLINE separated_nonempty_list(VLINE,unary_formula)

State 151:
## Known stack suffix:
## unary_formula NOTVLINE
## LR(1) items:
nonassoc_binary_formula -> unary_formula NOTVLINE . unary_formula [ RIGHT_PAREN EOI COMMA ]
## Transitions:
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 17
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 79
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 152
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119
## Reductions:

State 152:
## Known stack suffix:
## unary_formula NOTVLINE unary_formula
## LR(1) items:
nonassoc_binary_formula -> unary_formula NOTVLINE unary_formula . [ RIGHT_PAREN EOI COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonassoc_binary_formula -> unary_formula NOTVLINE unary_formula

State 153:
## Known stack suffix:
## unary_formula NOTAND
## LR(1) items:
nonassoc_binary_formula -> unary_formula NOTAND . unary_formula [ RIGHT_PAREN EOI COMMA ]
## Transitions:
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 17
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 79
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 154
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119
## Reductions:

State 154:
## Known stack suffix:
## unary_formula NOTAND unary_formula
## LR(1) items:
nonassoc_binary_formula -> unary_formula NOTAND unary_formula . [ RIGHT_PAREN EOI COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonassoc_binary_formula -> unary_formula NOTAND unary_formula

State 155:
## Known stack suffix:
## unary_formula LEFT_IMPLY
## LR(1) items:
nonassoc_binary_formula -> unary_formula LEFT_IMPLY . unary_formula [ RIGHT_PAREN EOI COMMA ]
## Transitions:
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 17
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 79
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 156
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119
## Reductions:

State 156:
## Known stack suffix:
## unary_formula LEFT_IMPLY unary_formula
## LR(1) items:
nonassoc_binary_formula -> unary_formula LEFT_IMPLY unary_formula . [ RIGHT_PAREN EOI COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonassoc_binary_formula -> unary_formula LEFT_IMPLY unary_formula

State 157:
## Known stack suffix:
## unary_formula IMPLY
## LR(1) items:
nonassoc_binary_formula -> unary_formula IMPLY . unary_formula [ RIGHT_PAREN EOI COMMA ]
## Transitions:
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 17
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 79
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 158
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119
## Reductions:

State 158:
## Known stack suffix:
## unary_formula IMPLY unary_formula
## LR(1) items:
nonassoc_binary_formula -> unary_formula IMPLY unary_formula . [ RIGHT_PAREN EOI COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonassoc_binary_formula -> unary_formula IMPLY unary_formula

State 159:
## Known stack suffix:
## unary_formula EQUIV
## LR(1) items:
nonassoc_binary_formula -> unary_formula EQUIV . unary_formula [ RIGHT_PAREN EOI COMMA ]
## Transitions:
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 17
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 79
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 160
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119
## Reductions:

State 160:
## Known stack suffix:
## unary_formula EQUIV unary_formula
## LR(1) items:
nonassoc_binary_formula -> unary_formula EQUIV unary_formula . [ RIGHT_PAREN EOI COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonassoc_binary_formula -> unary_formula EQUIV unary_formula

State 161:
## Known stack suffix:
## unary_formula ARROW
## LR(1) items:
nonassoc_binary_formula -> unary_formula ARROW . unary_formula [ RIGHT_PAREN EOI COMMA ]
## Transitions:
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 17
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 79
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 162
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119
## Reductions:

State 162:
## Known stack suffix:
## unary_formula ARROW unary_formula
## LR(1) items:
nonassoc_binary_formula -> unary_formula ARROW unary_formula . [ RIGHT_PAREN EOI COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonassoc_binary_formula -> unary_formula ARROW unary_formula

State 163:
## Known stack suffix:
## unary_formula AND
## LR(1) items:
assoc_binary_formula_aux(AND) -> unary_formula AND . separated_nonempty_list(AND,unary_formula) [ RIGHT_PAREN EOI COMMA ]
## Transitions:
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 17
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 79
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 164
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On separated_nonempty_list(AND,unary_formula) shift to state 167
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119
## Reductions:

State 164:
## Known stack suffix:
## unary_formula
## LR(1) items:
separated_nonempty_list(AND,unary_formula) -> unary_formula . [ RIGHT_PAREN EOI COMMA ]
separated_nonempty_list(AND,unary_formula) -> unary_formula . AND separated_nonempty_list(AND,unary_formula) [ RIGHT_PAREN EOI COMMA ]
## Transitions:
-- On AND shift to state 165
## Reductions:
-- On RIGHT_PAREN reduce production separated_nonempty_list(AND,unary_formula) -> unary_formula
-- On EOI reduce production separated_nonempty_list(AND,unary_formula) -> unary_formula
-- On COMMA reduce production separated_nonempty_list(AND,unary_formula) -> unary_formula

State 165:
## Known stack suffix:
## unary_formula AND
## LR(1) items:
separated_nonempty_list(AND,unary_formula) -> unary_formula AND . separated_nonempty_list(AND,unary_formula) [ RIGHT_PAREN EOI COMMA ]
## Transitions:
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 17
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 79
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 164
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On separated_nonempty_list(AND,unary_formula) shift to state 166
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119
## Reductions:

State 166:
## Known stack suffix:
## unary_formula AND separated_nonempty_list(AND,unary_formula)
## LR(1) items:
separated_nonempty_list(AND,unary_formula) -> unary_formula AND separated_nonempty_list(AND,unary_formula) . [ RIGHT_PAREN EOI COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production separated_nonempty_list(AND,unary_formula) -> unary_formula AND separated_nonempty_list(AND,unary_formula)

State 167:
## Known stack suffix:
## unary_formula AND separated_nonempty_list(AND,unary_formula)
## LR(1) items:
assoc_binary_formula_aux(AND) -> unary_formula AND separated_nonempty_list(AND,unary_formula) . [ RIGHT_PAREN EOI COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assoc_binary_formula_aux(AND) -> unary_formula AND separated_nonempty_list(AND,unary_formula)

State 168:
## Known stack suffix:
## defined_functor LEFT_PAREN term_arguments
## LR(1) items:
defined_plain_term -> defined_functor LEFT_PAREN term_arguments . RIGHT_PAREN [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT ARROW AND ]
## Transitions:
-- On RIGHT_PAREN shift to state 169
## Reductions:

State 169:
## Known stack suffix:
## defined_functor LEFT_PAREN term_arguments RIGHT_PAREN
## LR(1) items:
defined_plain_term -> defined_functor LEFT_PAREN term_arguments RIGHT_PAREN . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production defined_plain_term -> defined_functor LEFT_PAREN term_arguments RIGHT_PAREN

State 170:
## Known stack suffix:
## separated_nonempty_list(COMMA,formula)
## LR(1) items:
term_arguments -> separated_nonempty_list(COMMA,formula) . [ RIGHT_PAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production term_arguments -> separated_nonempty_list(COMMA,formula)

State 171:
## Known stack suffix:
## or_formula
## LR(1) items:
assoc_binary_formula -> or_formula . [ RIGHT_PAREN EOI COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assoc_binary_formula -> or_formula

State 172:
## Known stack suffix:
## nonassoc_binary_formula
## LR(1) items:
binary_formula -> nonassoc_binary_formula . [ RIGHT_PAREN EOI COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binary_formula -> nonassoc_binary_formula

State 173:
## Known stack suffix:
## formula
## LR(1) items:
separated_nonempty_list(COMMA,formula) -> formula . [ RIGHT_PAREN ]
separated_nonempty_list(COMMA,formula) -> formula . COMMA separated_nonempty_list(COMMA,formula) [ RIGHT_PAREN ]
## Transitions:
-- On COMMA shift to state 174
## Reductions:
-- On RIGHT_PAREN reduce production separated_nonempty_list(COMMA,formula) -> formula

State 174:
## Known stack suffix:
## formula COMMA
## LR(1) items:
separated_nonempty_list(COMMA,formula) -> formula COMMA . separated_nonempty_list(COMMA,formula) [ RIGHT_PAREN ]
## Transitions:
-- On XOR shift to state 13
-- On WILDCARD shift to state 4
-- On VLINE shift to state 18
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOTVLINE shift to state 88
-- On NOTAND shift to state 98
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 17
-- On LEFT_IMPLY shift to state 108
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On IMPLY shift to state 120
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On EQUIV shift to state 125
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On ARROW shift to state 130
-- On AND shift to state 135
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 140
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 143
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On separated_nonempty_list(COMMA,formula) shift to state 175
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On or_formula shift to state 171
-- On nonassoc_binary_formula shift to state 172
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On formula shift to state 173
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On binary_formula shift to state 176
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119
-- On assoc_binary_formula_aux(VLINE) shift to state 177
-- On assoc_binary_formula_aux(AND) shift to state 178
-- On assoc_binary_formula shift to state 179
-- On app_formula shift to state 180
-- On and_formula shift to state 183
## Reductions:

State 175:
## Known stack suffix:
## formula COMMA separated_nonempty_list(COMMA,formula)
## LR(1) items:
separated_nonempty_list(COMMA,formula) -> formula COMMA separated_nonempty_list(COMMA,formula) . [ RIGHT_PAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production separated_nonempty_list(COMMA,formula) -> formula COMMA separated_nonempty_list(COMMA,formula)

State 176:
## Known stack suffix:
## binary_formula
## LR(1) items:
formula -> binary_formula . [ RIGHT_PAREN EOI COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production formula -> binary_formula

State 177:
## Known stack suffix:
## assoc_binary_formula_aux(VLINE)
## LR(1) items:
or_formula -> assoc_binary_formula_aux(VLINE) . [ RIGHT_PAREN EOI COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production or_formula -> assoc_binary_formula_aux(VLINE)

State 178:
## Known stack suffix:
## assoc_binary_formula_aux(AND)
## LR(1) items:
and_formula -> assoc_binary_formula_aux(AND) . [ RIGHT_PAREN EOI COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production and_formula -> assoc_binary_formula_aux(AND)

State 179:
## Known stack suffix:
## assoc_binary_formula
## LR(1) items:
binary_formula -> assoc_binary_formula . [ RIGHT_PAREN EOI COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binary_formula -> assoc_binary_formula

State 180:
## Known stack suffix:
## app_formula
## LR(1) items:
app_formula -> app_formula . AT unary_formula [ RIGHT_PAREN EOI COMMA AT ]
formula -> app_formula . [ RIGHT_PAREN EOI COMMA ]
## Transitions:
-- On AT shift to state 181
## Reductions:
-- On RIGHT_PAREN reduce production formula -> app_formula
-- On EOI reduce production formula -> app_formula
-- On COMMA reduce production formula -> app_formula

State 181:
## Known stack suffix:
## app_formula AT
## LR(1) items:
app_formula -> app_formula AT . unary_formula [ RIGHT_PAREN EOI COMMA AT ]
## Transitions:
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 17
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 79
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 182
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119
## Reductions:

State 182:
## Known stack suffix:
## app_formula AT unary_formula
## LR(1) items:
app_formula -> app_formula AT unary_formula . [ RIGHT_PAREN EOI COMMA AT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production app_formula -> app_formula AT unary_formula

State 183:
## Known stack suffix:
## and_formula
## LR(1) items:
assoc_binary_formula -> and_formula . [ RIGHT_PAREN EOI COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assoc_binary_formula -> and_formula

State 184:
## Known stack suffix:
## functor_ LEFT_PAREN term_arguments
## LR(1) items:
plain_term -> functor_ LEFT_PAREN term_arguments . RIGHT_PAREN [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT ARROW AND ]
## Transitions:
-- On RIGHT_PAREN shift to state 185
## Reductions:

State 185:
## Known stack suffix:
## functor_ LEFT_PAREN term_arguments RIGHT_PAREN
## LR(1) items:
plain_term -> functor_ LEFT_PAREN term_arguments RIGHT_PAREN . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production plain_term -> functor_ LEFT_PAREN term_arguments RIGHT_PAREN

State 186:
## Known stack suffix:
## system_functor LEFT_PAREN term_arguments
## LR(1) items:
system_term -> system_functor LEFT_PAREN term_arguments . RIGHT_PAREN [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT ARROW AND ]
## Transitions:
-- On RIGHT_PAREN shift to state 187
## Reductions:

State 187:
## Known stack suffix:
## system_functor LEFT_PAREN term_arguments RIGHT_PAREN
## LR(1) items:
system_term -> system_functor LEFT_PAREN term_arguments RIGHT_PAREN . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production system_term -> system_functor LEFT_PAREN term_arguments RIGHT_PAREN

State 188:
## Known stack suffix:
## unitary_atomic_formula EQUAL
## LR(1) items:
unitary_infix_formula -> unitary_atomic_formula EQUAL . unitary_formula [ XOR VLINE RIGHT_PAREN NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA AT ARROW AND ]
## Transitions:
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 17
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On variable shift to state 77
-- On unitary_formula shift to state 189
-- On unitary_atomic_formula shift to state 83
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119
## Reductions:

State 189:
## Known stack suffix:
## unitary_atomic_formula EQUAL unitary_formula
## LR(1) items:
unitary_infix_formula -> unitary_atomic_formula EQUAL unitary_formula . [ XOR VLINE RIGHT_PAREN NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA AT ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production unitary_infix_formula -> unitary_atomic_formula EQUAL unitary_formula

State 190:
## Known stack suffix:
## EXISTS LEFT_BRACKET typed_vars RIGHT_BRACKET COLUMN unary_formula
## LR(1) items:
quantified_formula -> EXISTS LEFT_BRACKET typed_vars RIGHT_BRACKET COLUMN unary_formula . [ XOR VLINE RIGHT_PAREN NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA AT ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production quantified_formula -> EXISTS LEFT_BRACKET typed_vars RIGHT_BRACKET COLUMN unary_formula

State 191:
## Known stack suffix:
## typed_var
## LR(1) items:
separated_nonempty_list(COMMA,typed_var) -> typed_var . [ RIGHT_BRACKET ]
separated_nonempty_list(COMMA,typed_var) -> typed_var . COMMA separated_nonempty_list(COMMA,typed_var) [ RIGHT_BRACKET ]
## Transitions:
-- On COMMA shift to state 192
## Reductions:
-- On RIGHT_BRACKET reduce production separated_nonempty_list(COMMA,typed_var) -> typed_var

State 192:
## Known stack suffix:
## typed_var COMMA
## LR(1) items:
separated_nonempty_list(COMMA,typed_var) -> typed_var COMMA . separated_nonempty_list(COMMA,typed_var) [ RIGHT_BRACKET ]
## Transitions:
-- On UPPER_WORD shift to state 22
-- On typed_var shift to state 191
-- On separated_nonempty_list(COMMA,typed_var) shift to state 193
## Reductions:

State 193:
## Known stack suffix:
## typed_var COMMA separated_nonempty_list(COMMA,typed_var)
## LR(1) items:
separated_nonempty_list(COMMA,typed_var) -> typed_var COMMA separated_nonempty_list(COMMA,typed_var) . [ RIGHT_BRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production separated_nonempty_list(COMMA,typed_var) -> typed_var COMMA separated_nonempty_list(COMMA,typed_var)

State 194:
## Known stack suffix:
## separated_nonempty_list(COMMA,typed_var)
## LR(1) items:
typed_vars -> separated_nonempty_list(COMMA,typed_var) . [ RIGHT_BRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typed_vars -> separated_nonempty_list(COMMA,typed_var)

State 195:
## Known stack suffix:
## FORALL LEFT_BRACKET typed_vars RIGHT_BRACKET COLUMN unary_formula
## LR(1) items:
quantified_formula -> FORALL LEFT_BRACKET typed_vars RIGHT_BRACKET COLUMN unary_formula . [ XOR VLINE RIGHT_PAREN NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA AT ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production quantified_formula -> FORALL LEFT_BRACKET typed_vars RIGHT_BRACKET COLUMN unary_formula

State 196:
## Known stack suffix:
## LAMBDA LEFT_BRACKET typed_vars RIGHT_BRACKET COLUMN unary_formula
## LR(1) items:
quantified_formula -> LAMBDA LEFT_BRACKET typed_vars RIGHT_BRACKET COLUMN unary_formula . [ XOR VLINE RIGHT_PAREN NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA AT ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production quantified_formula -> LAMBDA LEFT_BRACKET typed_vars RIGHT_BRACKET COLUMN unary_formula

State 197:
## Known stack suffix:
## VLINE AT unary_formula
## LR(1) items:
nonassoc_binary_formula -> VLINE AT unary_formula . AT unary_formula [ RIGHT_PAREN EOI COMMA ]
## Transitions:
-- On AT shift to state 198
## Reductions:

State 198:
## Known stack suffix:
## VLINE AT unary_formula AT
## LR(1) items:
nonassoc_binary_formula -> VLINE AT unary_formula AT . unary_formula [ RIGHT_PAREN EOI COMMA ]
## Transitions:
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 17
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 79
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 199
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119
## Reductions:

State 199:
## Known stack suffix:
## VLINE AT unary_formula AT unary_formula
## LR(1) items:
nonassoc_binary_formula -> VLINE AT unary_formula AT unary_formula . [ RIGHT_PAREN EOI COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonassoc_binary_formula -> VLINE AT unary_formula AT unary_formula

State 200:
## Known stack suffix:
## LEFT_PAREN formula
## LR(1) items:
unitary_atomic_formula -> LEFT_PAREN formula . RIGHT_PAREN [ XOR VLINE RIGHT_PAREN NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT ARROW AND ]
## Transitions:
-- On RIGHT_PAREN shift to state 201
## Reductions:

State 201:
## Known stack suffix:
## LEFT_PAREN formula RIGHT_PAREN
## LR(1) items:
unitary_atomic_formula -> LEFT_PAREN formula RIGHT_PAREN . [ XOR VLINE RIGHT_PAREN NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production unitary_atomic_formula -> LEFT_PAREN formula RIGHT_PAREN

State 202:
## Known stack suffix:
## NOT AT
## LR(1) items:
unary_formula -> NOT AT . unary_formula [ XOR VLINE RIGHT_PAREN NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA AT ARROW AND ]
## Transitions:
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 17
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 79
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 203
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119
## Reductions:

State 203:
## Known stack suffix:
## NOT AT unary_formula
## LR(1) items:
unary_formula -> NOT AT unary_formula . [ XOR VLINE RIGHT_PAREN NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA AT ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production unary_formula -> NOT AT unary_formula

State 204:
## Known stack suffix:
## NOT unary_formula
## LR(1) items:
unary_formula -> NOT unary_formula . [ XOR VLINE RIGHT_PAREN NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EOI COMMA AT ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production unary_formula -> NOT unary_formula

State 205:
## Known stack suffix:
## XOR AT unary_formula
## LR(1) items:
nonassoc_binary_formula -> XOR AT unary_formula . AT unary_formula [ RIGHT_PAREN EOI COMMA ]
## Transitions:
-- On AT shift to state 206
## Reductions:

State 206:
## Known stack suffix:
## XOR AT unary_formula AT
## LR(1) items:
nonassoc_binary_formula -> XOR AT unary_formula AT . unary_formula [ RIGHT_PAREN EOI COMMA ]
## Transitions:
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 17
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 79
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 207
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119
## Reductions:

State 207:
## Known stack suffix:
## XOR AT unary_formula AT unary_formula
## LR(1) items:
nonassoc_binary_formula -> XOR AT unary_formula AT unary_formula . [ RIGHT_PAREN EOI COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonassoc_binary_formula -> XOR AT unary_formula AT unary_formula

State 208:
## Known stack suffix:
## DOLLAR_WORD LEFT_PAREN term_arguments
## LR(1) items:
defined_plain_term -> DOLLAR_WORD LEFT_PAREN term_arguments . RIGHT_PAREN [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT ARROW AND ]
## Transitions:
-- On RIGHT_PAREN shift to state 209
## Reductions:

State 209:
## Known stack suffix:
## DOLLAR_WORD LEFT_PAREN term_arguments RIGHT_PAREN
## LR(1) items:
defined_plain_term -> DOLLAR_WORD LEFT_PAREN term_arguments RIGHT_PAREN . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL EOI COMMA AT ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production defined_plain_term -> DOLLAR_WORD LEFT_PAREN term_arguments RIGHT_PAREN

State 210:
## Known stack suffix:
## term
## LR(1) items:
separated_nonempty_list(COMMA,term) -> term . [ RIGHT_BRACKET ]
separated_nonempty_list(COMMA,term) -> term . COMMA separated_nonempty_list(COMMA,term) [ RIGHT_BRACKET ]
## Transitions:
-- On COMMA shift to state 211
## Reductions:
-- On RIGHT_BRACKET reduce production separated_nonempty_list(COMMA,term) -> term

State 211:
## Known stack suffix:
## term COMMA
## LR(1) items:
separated_nonempty_list(COMMA,term) -> term COMMA . separated_nonempty_list(COMMA,term) [ RIGHT_BRACKET ]
## Transitions:
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On LOWER_WORD shift to state 9
-- On INTEGER shift to state 10
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On variable shift to state 77
-- On term shift to state 210
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On separated_nonempty_list(COMMA,term) shift to state 212
-- On plain_term shift to state 95
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_defined_word shift to state 119
## Reductions:

State 212:
## Known stack suffix:
## term COMMA separated_nonempty_list(COMMA,term)
## LR(1) items:
separated_nonempty_list(COMMA,term) -> term COMMA separated_nonempty_list(COMMA,term) . [ RIGHT_BRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production separated_nonempty_list(COMMA,term) -> term COMMA separated_nonempty_list(COMMA,term)

State 213:
## Known stack suffix:
## LEFT_BRACKET separated_nonempty_list(COMMA,term)
## LR(1) items:
answer_tuple -> LEFT_BRACKET separated_nonempty_list(COMMA,term) . RIGHT_BRACKET [ VLINE RIGHT_BRACKET ]
## Transitions:
-- On RIGHT_BRACKET shift to state 214
## Reductions:

State 214:
## Known stack suffix:
## LEFT_BRACKET separated_nonempty_list(COMMA,term) RIGHT_BRACKET
## LR(1) items:
answer_tuple -> LEFT_BRACKET separated_nonempty_list(COMMA,term) RIGHT_BRACKET . [ VLINE RIGHT_BRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production answer_tuple -> LEFT_BRACKET separated_nonempty_list(COMMA,term) RIGHT_BRACKET

State 215:
## Known stack suffix:
## LEFT_BRACKET separated_nonempty_list(VLINE,answer_tuple)
## LR(1) items:
answer_tuples -> LEFT_BRACKET separated_nonempty_list(VLINE,answer_tuple) . RIGHT_BRACKET [ EOI ]
## Transitions:
-- On RIGHT_BRACKET shift to state 216
## Reductions:

State 216:
## Known stack suffix:
## LEFT_BRACKET separated_nonempty_list(VLINE,answer_tuple) RIGHT_BRACKET
## LR(1) items:
answer_tuples -> LEFT_BRACKET separated_nonempty_list(VLINE,answer_tuple) RIGHT_BRACKET . [ EOI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production answer_tuples -> LEFT_BRACKET separated_nonempty_list(VLINE,answer_tuple) RIGHT_BRACKET

State 217:
## Known stack suffix:
## answer_tuple
## LR(1) items:
separated_nonempty_list(VLINE,answer_tuple) -> answer_tuple . [ RIGHT_BRACKET ]
separated_nonempty_list(VLINE,answer_tuple) -> answer_tuple . VLINE separated_nonempty_list(VLINE,answer_tuple) [ RIGHT_BRACKET ]
## Transitions:
-- On VLINE shift to state 218
## Reductions:
-- On RIGHT_BRACKET reduce production separated_nonempty_list(VLINE,answer_tuple) -> answer_tuple

State 218:
## Known stack suffix:
## answer_tuple VLINE
## LR(1) items:
separated_nonempty_list(VLINE,answer_tuple) -> answer_tuple VLINE . separated_nonempty_list(VLINE,answer_tuple) [ RIGHT_BRACKET ]
## Transitions:
-- On UNDERSCORE shift to state 2
-- On LEFT_BRACKET shift to state 3
-- On separated_nonempty_list(VLINE,answer_tuple) shift to state 219
-- On answer_tuple shift to state 217
## Reductions:

State 219:
## Known stack suffix:
## answer_tuple VLINE separated_nonempty_list(VLINE,answer_tuple)
## LR(1) items:
separated_nonempty_list(VLINE,answer_tuple) -> answer_tuple VLINE separated_nonempty_list(VLINE,answer_tuple) . [ RIGHT_BRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production separated_nonempty_list(VLINE,answer_tuple) -> answer_tuple VLINE separated_nonempty_list(VLINE,answer_tuple)

State 220:
## Known stack suffix:
## parse_answer_tuple
## LR(1) items:
parse_answer_tuple' -> parse_answer_tuple . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept parse_answer_tuple

State 221:
## Known stack suffix:
## answer_tuples
## LR(1) items:
parse_answer_tuple -> answer_tuples . EOI [ # ]
## Transitions:
-- On EOI shift to state 222
## Reductions:

State 222:
## Known stack suffix:
## answer_tuples EOI
## LR(1) items:
parse_answer_tuple -> answer_tuples EOI . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production parse_answer_tuple -> answer_tuples EOI

State 223:
## Known stack suffix:
##
## LR(1) items:
parse_declaration' -> . parse_declaration [ # ]
## Transitions:
-- On error shift to state 224
-- On THF shift to state 225
-- On TFF shift to state 283
-- On INCLUDE shift to state 297
-- On FOF shift to state 311
-- On CNF shift to state 321
-- On parse_declaration shift to state 347
-- On declaration shift to state 348
## Reductions:

State 224:
## Known stack suffix:
## error
## LR(1) items:
declaration -> error . [ EOI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production declaration -> error

State 225:
## Known stack suffix:
## THF
## LR(1) items:
declaration -> THF . LEFT_PAREN name COMMA role COMMA formula annotations RIGHT_PAREN DOT [ EOI ]
declaration -> THF . LEFT_PAREN name COMMA role COMMA type_decl annotations RIGHT_PAREN DOT [ EOI ]
## Transitions:
-- On LEFT_PAREN shift to state 226
## Reductions:

State 226:
## Known stack suffix:
## THF LEFT_PAREN
## LR(1) items:
declaration -> THF LEFT_PAREN . name COMMA role COMMA formula annotations RIGHT_PAREN DOT [ EOI ]
declaration -> THF LEFT_PAREN . name COMMA role COMMA type_decl annotations RIGHT_PAREN DOT [ EOI ]
## Transitions:
-- On SINGLE_QUOTED shift to state 6
-- On LOWER_WORD shift to state 9
-- On INTEGER shift to state 227
-- On name shift to state 228
-- On atomic_word shift to state 282
## Reductions:

State 227:
## Known stack suffix:
## INTEGER
## LR(1) items:
name -> INTEGER . [ RIGHT_PAREN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production name -> INTEGER

State 228:
## Known stack suffix:
## THF LEFT_PAREN name
## LR(1) items:
declaration -> THF LEFT_PAREN name . COMMA role COMMA formula annotations RIGHT_PAREN DOT [ EOI ]
declaration -> THF LEFT_PAREN name . COMMA role COMMA type_decl annotations RIGHT_PAREN DOT [ EOI ]
## Transitions:
-- On COMMA shift to state 229
## Reductions:

State 229:
## Known stack suffix:
## THF LEFT_PAREN name COMMA
## LR(1) items:
declaration -> THF LEFT_PAREN name COMMA . role COMMA formula annotations RIGHT_PAREN DOT [ EOI ]
declaration -> THF LEFT_PAREN name COMMA . role COMMA type_decl annotations RIGHT_PAREN DOT [ EOI ]
## Transitions:
-- On LOWER_WORD shift to state 230
-- On role shift to state 231
## Reductions:

State 230:
## Known stack suffix:
## LOWER_WORD
## LR(1) items:
role -> LOWER_WORD . [ COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production role -> LOWER_WORD

State 231:
## Known stack suffix:
## THF LEFT_PAREN name COMMA role
## LR(1) items:
declaration -> THF LEFT_PAREN name COMMA role . COMMA formula annotations RIGHT_PAREN DOT [ EOI ]
declaration -> THF LEFT_PAREN name COMMA role . COMMA type_decl annotations RIGHT_PAREN DOT [ EOI ]
## Transitions:
-- On COMMA shift to state 232
## Reductions:

State 232:
## Known stack suffix:
## THF LEFT_PAREN name COMMA role COMMA
## LR(1) items:
declaration -> THF LEFT_PAREN name COMMA role COMMA . formula annotations RIGHT_PAREN DOT [ EOI ]
declaration -> THF LEFT_PAREN name COMMA role COMMA . type_decl annotations RIGHT_PAREN DOT [ EOI ]
## Transitions:
-- On XOR shift to state 13
-- On WILDCARD shift to state 4
-- On VLINE shift to state 18
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOTVLINE shift to state 88
-- On NOTAND shift to state 98
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 233
-- On LEFT_IMPLY shift to state 108
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On IMPLY shift to state 120
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On EQUIV shift to state 125
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On ARROW shift to state 130
-- On AND shift to state 135
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 140
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 143
-- On type_decl shift to state 253
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On or_formula shift to state 171
-- On nonassoc_binary_formula shift to state 172
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On formula shift to state 278
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On binary_formula shift to state 176
-- On atomic_word shift to state 236
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119
-- On assoc_binary_formula_aux(VLINE) shift to state 177
-- On assoc_binary_formula_aux(AND) shift to state 178
-- On assoc_binary_formula shift to state 179
-- On app_formula shift to state 180
-- On and_formula shift to state 183
## Reductions:

State 233:
## Known stack suffix:
## LEFT_PAREN
## LR(1) items:
type_decl -> LEFT_PAREN . type_decl RIGHT_PAREN [ RIGHT_PAREN COMMA ]
unitary_atomic_formula -> LEFT_PAREN . formula RIGHT_PAREN [ XOR VLINE RIGHT_PAREN NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA AT ARROW AND ]
## Transitions:
-- On XOR shift to state 13
-- On WILDCARD shift to state 4
-- On VLINE shift to state 18
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOTVLINE shift to state 88
-- On NOTAND shift to state 98
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 233
-- On LEFT_IMPLY shift to state 108
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On IMPLY shift to state 120
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On EQUIV shift to state 125
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On ARROW shift to state 130
-- On AND shift to state 135
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 140
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 143
-- On type_decl shift to state 234
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On or_formula shift to state 171
-- On nonassoc_binary_formula shift to state 172
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On formula shift to state 200
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On binary_formula shift to state 176
-- On atomic_word shift to state 236
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119
-- On assoc_binary_formula_aux(VLINE) shift to state 177
-- On assoc_binary_formula_aux(AND) shift to state 178
-- On assoc_binary_formula shift to state 179
-- On app_formula shift to state 180
-- On and_formula shift to state 183
## Reductions:

State 234:
## Known stack suffix:
## LEFT_PAREN type_decl
## LR(1) items:
type_decl -> LEFT_PAREN type_decl . RIGHT_PAREN [ RIGHT_PAREN COMMA ]
## Transitions:
-- On RIGHT_PAREN shift to state 235
## Reductions:

State 235:
## Known stack suffix:
## LEFT_PAREN type_decl RIGHT_PAREN
## LR(1) items:
type_decl -> LEFT_PAREN type_decl RIGHT_PAREN . [ RIGHT_PAREN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_decl -> LEFT_PAREN type_decl RIGHT_PAREN

State 236:
## Known stack suffix:
## atomic_word
## LR(1) items:
atomic_term -> atomic_word . [ XOR VLINE RIGHT_PAREN NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA AT ARROW AND ]
functor_ -> atomic_word . [ LEFT_PAREN ]
type_decl -> atomic_word . COLUMN tff_quantified_type [ RIGHT_PAREN COMMA ]
## Transitions:
-- On COLUMN shift to state 237
## Reductions:
-- On XOR reduce production atomic_term -> atomic_word
-- On VLINE reduce production atomic_term -> atomic_word
-- On RIGHT_PAREN reduce production atomic_term -> atomic_word
-- On NOT_EQUAL reduce production atomic_term -> atomic_word
-- On NOTVLINE reduce production atomic_term -> atomic_word
-- On NOTAND reduce production atomic_term -> atomic_word
-- On LEFT_PAREN reduce production functor_ -> atomic_word
-- On LEFT_IMPLY reduce production atomic_term -> atomic_word
-- On IMPLY reduce production atomic_term -> atomic_word
-- On EQUIV reduce production atomic_term -> atomic_word
-- On EQUAL reduce production atomic_term -> atomic_word
-- On COMMA reduce production atomic_term -> atomic_word
-- On AT reduce production atomic_term -> atomic_word
-- On ARROW reduce production atomic_term -> atomic_word
-- On AND reduce production atomic_term -> atomic_word

State 237:
## Known stack suffix:
## atomic_word COLUMN
## LR(1) items:
type_decl -> atomic_word COLUMN . tff_quantified_type [ RIGHT_PAREN COMMA ]
## Transitions:
-- On WILDCARD shift to state 24
-- On UPPER_WORD shift to state 5
-- On TYPE_TY shift to state 25
-- On SINGLE_QUOTED shift to state 6
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 27
-- On FORALL_TY shift to state 238
-- On DOLLAR_WORD shift to state 28
-- On variable shift to state 29
-- On type_const shift to state 30
-- On tff_type shift to state 45
-- On tff_toplevel_type shift to state 246
-- On tff_quantified_type shift to state 252
-- On tff_atomic_type shift to state 34
-- On tff_app_type shift to state 35
-- On defined_ty shift to state 38
-- On atomic_word shift to state 39
## Reductions:

State 238:
## Known stack suffix:
## FORALL_TY
## LR(1) items:
tff_quantified_type -> FORALL_TY . LEFT_BRACKET tff_ty_vars RIGHT_BRACKET COLUMN tff_quantified_type [ RIGHT_PAREN COMMA ]
## Transitions:
-- On LEFT_BRACKET shift to state 239
## Reductions:

State 239:
## Known stack suffix:
## FORALL_TY LEFT_BRACKET
## LR(1) items:
tff_quantified_type -> FORALL_TY LEFT_BRACKET . tff_ty_vars RIGHT_BRACKET COLUMN tff_quantified_type [ RIGHT_PAREN COMMA ]
## Transitions:
-- On UPPER_WORD shift to state 240
-- On tff_ty_vars shift to state 243
-- On tff_ty_var shift to state 248
-- On separated_nonempty_list(COMMA,tff_ty_var) shift to state 251
## Reductions:

State 240:
## Known stack suffix:
## UPPER_WORD
## LR(1) items:
tff_ty_var -> UPPER_WORD . COLUMN TYPE_TY [ RIGHT_BRACKET COMMA ]
## Transitions:
-- On COLUMN shift to state 241
## Reductions:

State 241:
## Known stack suffix:
## UPPER_WORD COLUMN
## LR(1) items:
tff_ty_var -> UPPER_WORD COLUMN . TYPE_TY [ RIGHT_BRACKET COMMA ]
## Transitions:
-- On TYPE_TY shift to state 242
## Reductions:

State 242:
## Known stack suffix:
## UPPER_WORD COLUMN TYPE_TY
## LR(1) items:
tff_ty_var -> UPPER_WORD COLUMN TYPE_TY . [ RIGHT_BRACKET COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tff_ty_var -> UPPER_WORD COLUMN TYPE_TY

State 243:
## Known stack suffix:
## FORALL_TY LEFT_BRACKET tff_ty_vars
## LR(1) items:
tff_quantified_type -> FORALL_TY LEFT_BRACKET tff_ty_vars . RIGHT_BRACKET COLUMN tff_quantified_type [ RIGHT_PAREN COMMA ]
## Transitions:
-- On RIGHT_BRACKET shift to state 244
## Reductions:

State 244:
## Known stack suffix:
## FORALL_TY LEFT_BRACKET tff_ty_vars RIGHT_BRACKET
## LR(1) items:
tff_quantified_type -> FORALL_TY LEFT_BRACKET tff_ty_vars RIGHT_BRACKET . COLUMN tff_quantified_type [ RIGHT_PAREN COMMA ]
## Transitions:
-- On COLUMN shift to state 245
## Reductions:

State 245:
## Known stack suffix:
## FORALL_TY LEFT_BRACKET tff_ty_vars RIGHT_BRACKET COLUMN
## LR(1) items:
tff_quantified_type -> FORALL_TY LEFT_BRACKET tff_ty_vars RIGHT_BRACKET COLUMN . tff_quantified_type [ RIGHT_PAREN COMMA ]
## Transitions:
-- On WILDCARD shift to state 24
-- On UPPER_WORD shift to state 5
-- On TYPE_TY shift to state 25
-- On SINGLE_QUOTED shift to state 6
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 27
-- On FORALL_TY shift to state 238
-- On DOLLAR_WORD shift to state 28
-- On variable shift to state 29
-- On type_const shift to state 30
-- On tff_type shift to state 45
-- On tff_toplevel_type shift to state 246
-- On tff_quantified_type shift to state 247
-- On tff_atomic_type shift to state 34
-- On tff_app_type shift to state 35
-- On defined_ty shift to state 38
-- On atomic_word shift to state 39
## Reductions:

State 246:
## Known stack suffix:
## tff_toplevel_type
## LR(1) items:
tff_quantified_type -> tff_toplevel_type . [ RIGHT_PAREN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tff_quantified_type -> tff_toplevel_type

State 247:
## Known stack suffix:
## FORALL_TY LEFT_BRACKET tff_ty_vars RIGHT_BRACKET COLUMN tff_quantified_type
## LR(1) items:
tff_quantified_type -> FORALL_TY LEFT_BRACKET tff_ty_vars RIGHT_BRACKET COLUMN tff_quantified_type . [ RIGHT_PAREN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tff_quantified_type -> FORALL_TY LEFT_BRACKET tff_ty_vars RIGHT_BRACKET COLUMN tff_quantified_type

State 248:
## Known stack suffix:
## tff_ty_var
## LR(1) items:
separated_nonempty_list(COMMA,tff_ty_var) -> tff_ty_var . [ RIGHT_BRACKET ]
separated_nonempty_list(COMMA,tff_ty_var) -> tff_ty_var . COMMA separated_nonempty_list(COMMA,tff_ty_var) [ RIGHT_BRACKET ]
## Transitions:
-- On COMMA shift to state 249
## Reductions:
-- On RIGHT_BRACKET reduce production separated_nonempty_list(COMMA,tff_ty_var) -> tff_ty_var

State 249:
## Known stack suffix:
## tff_ty_var COMMA
## LR(1) items:
separated_nonempty_list(COMMA,tff_ty_var) -> tff_ty_var COMMA . separated_nonempty_list(COMMA,tff_ty_var) [ RIGHT_BRACKET ]
## Transitions:
-- On UPPER_WORD shift to state 240
-- On tff_ty_var shift to state 248
-- On separated_nonempty_list(COMMA,tff_ty_var) shift to state 250
## Reductions:

State 250:
## Known stack suffix:
## tff_ty_var COMMA separated_nonempty_list(COMMA,tff_ty_var)
## LR(1) items:
separated_nonempty_list(COMMA,tff_ty_var) -> tff_ty_var COMMA separated_nonempty_list(COMMA,tff_ty_var) . [ RIGHT_BRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production separated_nonempty_list(COMMA,tff_ty_var) -> tff_ty_var COMMA separated_nonempty_list(COMMA,tff_ty_var)

State 251:
## Known stack suffix:
## separated_nonempty_list(COMMA,tff_ty_var)
## LR(1) items:
tff_ty_vars -> separated_nonempty_list(COMMA,tff_ty_var) . [ RIGHT_BRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tff_ty_vars -> separated_nonempty_list(COMMA,tff_ty_var)

State 252:
## Known stack suffix:
## atomic_word COLUMN tff_quantified_type
## LR(1) items:
type_decl -> atomic_word COLUMN tff_quantified_type . [ RIGHT_PAREN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_decl -> atomic_word COLUMN tff_quantified_type

State 253:
## Known stack suffix:
## THF LEFT_PAREN name COMMA role COMMA type_decl
## LR(1) items:
declaration -> THF LEFT_PAREN name COMMA role COMMA type_decl . annotations RIGHT_PAREN DOT [ EOI ]
## Transitions:
-- On COMMA shift to state 254
-- On annotations shift to state 275
## Reductions:
-- On RIGHT_PAREN reduce production annotations ->

State 254:
## Known stack suffix:
## COMMA
## LR(1) items:
annotations -> COMMA . loption(separated_nonempty_list(COMMA,general_term)) [ RIGHT_PAREN ]
## Transitions:
-- On UPPER_WORD shift to state 255
-- On SINGLE_QUOTED shift to state 6
-- On LOWER_WORD shift to state 9
-- On LEFT_BRACKET shift to state 256
-- On INTEGER shift to state 257
-- On DISTINCT_OBJECT shift to state 258
-- On separated_nonempty_list(COMMA,general_term) shift to state 259
-- On loption(separated_nonempty_list(COMMA,general_term)) shift to state 274
-- On general_term shift to state 262
-- On general_list shift to state 265
-- On general_function shift to state 266
-- On general_data shift to state 267
-- On atomic_word shift to state 270
## Reductions:
-- On RIGHT_PAREN reduce production loption(separated_nonempty_list(COMMA,general_term)) ->

State 255:
## Known stack suffix:
## UPPER_WORD
## LR(1) items:
general_data -> UPPER_WORD . [ RIGHT_PAREN RIGHT_BRACKET COMMA COLUMN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production general_data -> UPPER_WORD

State 256:
## Known stack suffix:
## LEFT_BRACKET
## LR(1) items:
general_list -> LEFT_BRACKET . loption(separated_nonempty_list(COMMA,general_term)) RIGHT_BRACKET [ RIGHT_PAREN RIGHT_BRACKET COMMA ]
## Transitions:
-- On UPPER_WORD shift to state 255
-- On SINGLE_QUOTED shift to state 6
-- On LOWER_WORD shift to state 9
-- On LEFT_BRACKET shift to state 256
-- On INTEGER shift to state 257
-- On DISTINCT_OBJECT shift to state 258
-- On separated_nonempty_list(COMMA,general_term) shift to state 259
-- On loption(separated_nonempty_list(COMMA,general_term)) shift to state 260
-- On general_term shift to state 262
-- On general_list shift to state 265
-- On general_function shift to state 266
-- On general_data shift to state 267
-- On atomic_word shift to state 270
## Reductions:
-- On RIGHT_BRACKET reduce production loption(separated_nonempty_list(COMMA,general_term)) ->

State 257:
## Known stack suffix:
## INTEGER
## LR(1) items:
general_data -> INTEGER . [ RIGHT_PAREN RIGHT_BRACKET COMMA COLUMN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production general_data -> INTEGER

State 258:
## Known stack suffix:
## DISTINCT_OBJECT
## LR(1) items:
general_data -> DISTINCT_OBJECT . [ RIGHT_PAREN RIGHT_BRACKET COMMA COLUMN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production general_data -> DISTINCT_OBJECT

State 259:
## Known stack suffix:
## separated_nonempty_list(COMMA,general_term)
## LR(1) items:
loption(separated_nonempty_list(COMMA,general_term)) -> separated_nonempty_list(COMMA,general_term) . [ RIGHT_PAREN RIGHT_BRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production loption(separated_nonempty_list(COMMA,general_term)) -> separated_nonempty_list(COMMA,general_term)

State 260:
## Known stack suffix:
## LEFT_BRACKET loption(separated_nonempty_list(COMMA,general_term))
## LR(1) items:
general_list -> LEFT_BRACKET loption(separated_nonempty_list(COMMA,general_term)) . RIGHT_BRACKET [ RIGHT_PAREN RIGHT_BRACKET COMMA ]
## Transitions:
-- On RIGHT_BRACKET shift to state 261
## Reductions:

State 261:
## Known stack suffix:
## LEFT_BRACKET loption(separated_nonempty_list(COMMA,general_term)) RIGHT_BRACKET
## LR(1) items:
general_list -> LEFT_BRACKET loption(separated_nonempty_list(COMMA,general_term)) RIGHT_BRACKET . [ RIGHT_PAREN RIGHT_BRACKET COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production general_list -> LEFT_BRACKET loption(separated_nonempty_list(COMMA,general_term)) RIGHT_BRACKET

State 262:
## Known stack suffix:
## general_term
## LR(1) items:
separated_nonempty_list(COMMA,general_term) -> general_term . [ RIGHT_PAREN RIGHT_BRACKET ]
separated_nonempty_list(COMMA,general_term) -> general_term . COMMA separated_nonempty_list(COMMA,general_term) [ RIGHT_PAREN RIGHT_BRACKET ]
## Transitions:
-- On COMMA shift to state 263
## Reductions:
-- On RIGHT_PAREN reduce production separated_nonempty_list(COMMA,general_term) -> general_term
-- On RIGHT_BRACKET reduce production separated_nonempty_list(COMMA,general_term) -> general_term

State 263:
## Known stack suffix:
## general_term COMMA
## LR(1) items:
separated_nonempty_list(COMMA,general_term) -> general_term COMMA . separated_nonempty_list(COMMA,general_term) [ RIGHT_PAREN RIGHT_BRACKET ]
## Transitions:
-- On UPPER_WORD shift to state 255
-- On SINGLE_QUOTED shift to state 6
-- On LOWER_WORD shift to state 9
-- On LEFT_BRACKET shift to state 256
-- On INTEGER shift to state 257
-- On DISTINCT_OBJECT shift to state 258
-- On separated_nonempty_list(COMMA,general_term) shift to state 264
-- On general_term shift to state 262
-- On general_list shift to state 265
-- On general_function shift to state 266
-- On general_data shift to state 267
-- On atomic_word shift to state 270
## Reductions:

State 264:
## Known stack suffix:
## general_term COMMA separated_nonempty_list(COMMA,general_term)
## LR(1) items:
separated_nonempty_list(COMMA,general_term) -> general_term COMMA separated_nonempty_list(COMMA,general_term) . [ RIGHT_PAREN RIGHT_BRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production separated_nonempty_list(COMMA,general_term) -> general_term COMMA separated_nonempty_list(COMMA,general_term)

State 265:
## Known stack suffix:
## general_list
## LR(1) items:
general_term -> general_list . [ RIGHT_PAREN RIGHT_BRACKET COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production general_term -> general_list

State 266:
## Known stack suffix:
## general_function
## LR(1) items:
general_data -> general_function . [ RIGHT_PAREN RIGHT_BRACKET COMMA COLUMN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production general_data -> general_function

State 267:
## Known stack suffix:
## general_data
## LR(1) items:
general_term -> general_data . [ RIGHT_PAREN RIGHT_BRACKET COMMA ]
general_term -> general_data . COLUMN general_term [ RIGHT_PAREN RIGHT_BRACKET COMMA ]
## Transitions:
-- On COLUMN shift to state 268
## Reductions:
-- On RIGHT_PAREN reduce production general_term -> general_data
-- On RIGHT_BRACKET reduce production general_term -> general_data
-- On COMMA reduce production general_term -> general_data

State 268:
## Known stack suffix:
## general_data COLUMN
## LR(1) items:
general_term -> general_data COLUMN . general_term [ RIGHT_PAREN RIGHT_BRACKET COMMA ]
## Transitions:
-- On UPPER_WORD shift to state 255
-- On SINGLE_QUOTED shift to state 6
-- On LOWER_WORD shift to state 9
-- On LEFT_BRACKET shift to state 256
-- On INTEGER shift to state 257
-- On DISTINCT_OBJECT shift to state 258
-- On general_term shift to state 269
-- On general_list shift to state 265
-- On general_function shift to state 266
-- On general_data shift to state 267
-- On atomic_word shift to state 270
## Reductions:

State 269:
## Known stack suffix:
## general_data COLUMN general_term
## LR(1) items:
general_term -> general_data COLUMN general_term . [ RIGHT_PAREN RIGHT_BRACKET COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production general_term -> general_data COLUMN general_term

State 270:
## Known stack suffix:
## atomic_word
## LR(1) items:
general_data -> atomic_word . [ RIGHT_PAREN RIGHT_BRACKET COMMA COLUMN ]
general_function -> atomic_word . LEFT_PAREN separated_nonempty_list(COMMA,general_term) RIGHT_PAREN [ RIGHT_PAREN RIGHT_BRACKET COMMA COLUMN ]
## Transitions:
-- On LEFT_PAREN shift to state 271
## Reductions:
-- On RIGHT_PAREN reduce production general_data -> atomic_word
-- On RIGHT_BRACKET reduce production general_data -> atomic_word
-- On COMMA reduce production general_data -> atomic_word
-- On COLUMN reduce production general_data -> atomic_word

State 271:
## Known stack suffix:
## atomic_word LEFT_PAREN
## LR(1) items:
general_function -> atomic_word LEFT_PAREN . separated_nonempty_list(COMMA,general_term) RIGHT_PAREN [ RIGHT_PAREN RIGHT_BRACKET COMMA COLUMN ]
## Transitions:
-- On UPPER_WORD shift to state 255
-- On SINGLE_QUOTED shift to state 6
-- On LOWER_WORD shift to state 9
-- On LEFT_BRACKET shift to state 256
-- On INTEGER shift to state 257
-- On DISTINCT_OBJECT shift to state 258
-- On separated_nonempty_list(COMMA,general_term) shift to state 272
-- On general_term shift to state 262
-- On general_list shift to state 265
-- On general_function shift to state 266
-- On general_data shift to state 267
-- On atomic_word shift to state 270
## Reductions:

State 272:
## Known stack suffix:
## atomic_word LEFT_PAREN separated_nonempty_list(COMMA,general_term)
## LR(1) items:
general_function -> atomic_word LEFT_PAREN separated_nonempty_list(COMMA,general_term) . RIGHT_PAREN [ RIGHT_PAREN RIGHT_BRACKET COMMA COLUMN ]
## Transitions:
-- On RIGHT_PAREN shift to state 273
## Reductions:

State 273:
## Known stack suffix:
## atomic_word LEFT_PAREN separated_nonempty_list(COMMA,general_term) RIGHT_PAREN
## LR(1) items:
general_function -> atomic_word LEFT_PAREN separated_nonempty_list(COMMA,general_term) RIGHT_PAREN . [ RIGHT_PAREN RIGHT_BRACKET COMMA COLUMN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production general_function -> atomic_word LEFT_PAREN separated_nonempty_list(COMMA,general_term) RIGHT_PAREN

State 274:
## Known stack suffix:
## COMMA loption(separated_nonempty_list(COMMA,general_term))
## LR(1) items:
annotations -> COMMA loption(separated_nonempty_list(COMMA,general_term)) . [ RIGHT_PAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production annotations -> COMMA loption(separated_nonempty_list(COMMA,general_term))

State 275:
## Known stack suffix:
## THF LEFT_PAREN name COMMA role COMMA type_decl annotations
## LR(1) items:
declaration -> THF LEFT_PAREN name COMMA role COMMA type_decl annotations . RIGHT_PAREN DOT [ EOI ]
## Transitions:
-- On RIGHT_PAREN shift to state 276
## Reductions:

State 276:
## Known stack suffix:
## THF LEFT_PAREN name COMMA role COMMA type_decl annotations RIGHT_PAREN
## LR(1) items:
declaration -> THF LEFT_PAREN name COMMA role COMMA type_decl annotations RIGHT_PAREN . DOT [ EOI ]
## Transitions:
-- On DOT shift to state 277
## Reductions:

State 277:
## Known stack suffix:
## THF LEFT_PAREN name COMMA role COMMA type_decl annotations RIGHT_PAREN DOT
## LR(1) items:
declaration -> THF LEFT_PAREN name COMMA role COMMA type_decl annotations RIGHT_PAREN DOT . [ EOI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production declaration -> THF LEFT_PAREN name COMMA role COMMA type_decl annotations RIGHT_PAREN DOT

State 278:
## Known stack suffix:
## THF LEFT_PAREN name COMMA role COMMA formula
## LR(1) items:
declaration -> THF LEFT_PAREN name COMMA role COMMA formula . annotations RIGHT_PAREN DOT [ EOI ]
## Transitions:
-- On COMMA shift to state 254
-- On annotations shift to state 279
## Reductions:
-- On RIGHT_PAREN reduce production annotations ->

State 279:
## Known stack suffix:
## THF LEFT_PAREN name COMMA role COMMA formula annotations
## LR(1) items:
declaration -> THF LEFT_PAREN name COMMA role COMMA formula annotations . RIGHT_PAREN DOT [ EOI ]
## Transitions:
-- On RIGHT_PAREN shift to state 280
## Reductions:

State 280:
## Known stack suffix:
## THF LEFT_PAREN name COMMA role COMMA formula annotations RIGHT_PAREN
## LR(1) items:
declaration -> THF LEFT_PAREN name COMMA role COMMA formula annotations RIGHT_PAREN . DOT [ EOI ]
## Transitions:
-- On DOT shift to state 281
## Reductions:

State 281:
## Known stack suffix:
## THF LEFT_PAREN name COMMA role COMMA formula annotations RIGHT_PAREN DOT
## LR(1) items:
declaration -> THF LEFT_PAREN name COMMA role COMMA formula annotations RIGHT_PAREN DOT . [ EOI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production declaration -> THF LEFT_PAREN name COMMA role COMMA formula annotations RIGHT_PAREN DOT

State 282:
## Known stack suffix:
## atomic_word
## LR(1) items:
name -> atomic_word . [ RIGHT_PAREN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production name -> atomic_word

State 283:
## Known stack suffix:
## TFF
## LR(1) items:
declaration -> TFF . LEFT_PAREN name COMMA role COMMA formula annotations RIGHT_PAREN DOT [ EOI ]
declaration -> TFF . LEFT_PAREN name COMMA role COMMA type_decl annotations RIGHT_PAREN DOT [ EOI ]
## Transitions:
-- On LEFT_PAREN shift to state 284
## Reductions:

State 284:
## Known stack suffix:
## TFF LEFT_PAREN
## LR(1) items:
declaration -> TFF LEFT_PAREN . name COMMA role COMMA formula annotations RIGHT_PAREN DOT [ EOI ]
declaration -> TFF LEFT_PAREN . name COMMA role COMMA type_decl annotations RIGHT_PAREN DOT [ EOI ]
## Transitions:
-- On SINGLE_QUOTED shift to state 6
-- On LOWER_WORD shift to state 9
-- On INTEGER shift to state 227
-- On name shift to state 285
-- On atomic_word shift to state 282
## Reductions:

State 285:
## Known stack suffix:
## TFF LEFT_PAREN name
## LR(1) items:
declaration -> TFF LEFT_PAREN name . COMMA role COMMA formula annotations RIGHT_PAREN DOT [ EOI ]
declaration -> TFF LEFT_PAREN name . COMMA role COMMA type_decl annotations RIGHT_PAREN DOT [ EOI ]
## Transitions:
-- On COMMA shift to state 286
## Reductions:

State 286:
## Known stack suffix:
## TFF LEFT_PAREN name COMMA
## LR(1) items:
declaration -> TFF LEFT_PAREN name COMMA . role COMMA formula annotations RIGHT_PAREN DOT [ EOI ]
declaration -> TFF LEFT_PAREN name COMMA . role COMMA type_decl annotations RIGHT_PAREN DOT [ EOI ]
## Transitions:
-- On LOWER_WORD shift to state 230
-- On role shift to state 287
## Reductions:

State 287:
## Known stack suffix:
## TFF LEFT_PAREN name COMMA role
## LR(1) items:
declaration -> TFF LEFT_PAREN name COMMA role . COMMA formula annotations RIGHT_PAREN DOT [ EOI ]
declaration -> TFF LEFT_PAREN name COMMA role . COMMA type_decl annotations RIGHT_PAREN DOT [ EOI ]
## Transitions:
-- On COMMA shift to state 288
## Reductions:

State 288:
## Known stack suffix:
## TFF LEFT_PAREN name COMMA role COMMA
## LR(1) items:
declaration -> TFF LEFT_PAREN name COMMA role COMMA . formula annotations RIGHT_PAREN DOT [ EOI ]
declaration -> TFF LEFT_PAREN name COMMA role COMMA . type_decl annotations RIGHT_PAREN DOT [ EOI ]
## Transitions:
-- On XOR shift to state 13
-- On WILDCARD shift to state 4
-- On VLINE shift to state 18
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOTVLINE shift to state 88
-- On NOTAND shift to state 98
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 233
-- On LEFT_IMPLY shift to state 108
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On IMPLY shift to state 120
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On EQUIV shift to state 125
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On ARROW shift to state 130
-- On AND shift to state 135
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 140
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 143
-- On type_decl shift to state 289
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On or_formula shift to state 171
-- On nonassoc_binary_formula shift to state 172
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On formula shift to state 293
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On binary_formula shift to state 176
-- On atomic_word shift to state 236
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119
-- On assoc_binary_formula_aux(VLINE) shift to state 177
-- On assoc_binary_formula_aux(AND) shift to state 178
-- On assoc_binary_formula shift to state 179
-- On app_formula shift to state 180
-- On and_formula shift to state 183
## Reductions:

State 289:
## Known stack suffix:
## TFF LEFT_PAREN name COMMA role COMMA type_decl
## LR(1) items:
declaration -> TFF LEFT_PAREN name COMMA role COMMA type_decl . annotations RIGHT_PAREN DOT [ EOI ]
## Transitions:
-- On COMMA shift to state 254
-- On annotations shift to state 290
## Reductions:
-- On RIGHT_PAREN reduce production annotations ->

State 290:
## Known stack suffix:
## TFF LEFT_PAREN name COMMA role COMMA type_decl annotations
## LR(1) items:
declaration -> TFF LEFT_PAREN name COMMA role COMMA type_decl annotations . RIGHT_PAREN DOT [ EOI ]
## Transitions:
-- On RIGHT_PAREN shift to state 291
## Reductions:

State 291:
## Known stack suffix:
## TFF LEFT_PAREN name COMMA role COMMA type_decl annotations RIGHT_PAREN
## LR(1) items:
declaration -> TFF LEFT_PAREN name COMMA role COMMA type_decl annotations RIGHT_PAREN . DOT [ EOI ]
## Transitions:
-- On DOT shift to state 292
## Reductions:

State 292:
## Known stack suffix:
## TFF LEFT_PAREN name COMMA role COMMA type_decl annotations RIGHT_PAREN DOT
## LR(1) items:
declaration -> TFF LEFT_PAREN name COMMA role COMMA type_decl annotations RIGHT_PAREN DOT . [ EOI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production declaration -> TFF LEFT_PAREN name COMMA role COMMA type_decl annotations RIGHT_PAREN DOT

State 293:
## Known stack suffix:
## TFF LEFT_PAREN name COMMA role COMMA formula
## LR(1) items:
declaration -> TFF LEFT_PAREN name COMMA role COMMA formula . annotations RIGHT_PAREN DOT [ EOI ]
## Transitions:
-- On COMMA shift to state 254
-- On annotations shift to state 294
## Reductions:
-- On RIGHT_PAREN reduce production annotations ->

State 294:
## Known stack suffix:
## TFF LEFT_PAREN name COMMA role COMMA formula annotations
## LR(1) items:
declaration -> TFF LEFT_PAREN name COMMA role COMMA formula annotations . RIGHT_PAREN DOT [ EOI ]
## Transitions:
-- On RIGHT_PAREN shift to state 295
## Reductions:

State 295:
## Known stack suffix:
## TFF LEFT_PAREN name COMMA role COMMA formula annotations RIGHT_PAREN
## LR(1) items:
declaration -> TFF LEFT_PAREN name COMMA role COMMA formula annotations RIGHT_PAREN . DOT [ EOI ]
## Transitions:
-- On DOT shift to state 296
## Reductions:

State 296:
## Known stack suffix:
## TFF LEFT_PAREN name COMMA role COMMA formula annotations RIGHT_PAREN DOT
## LR(1) items:
declaration -> TFF LEFT_PAREN name COMMA role COMMA formula annotations RIGHT_PAREN DOT . [ EOI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production declaration -> TFF LEFT_PAREN name COMMA role COMMA formula annotations RIGHT_PAREN DOT

State 297:
## Known stack suffix:
## INCLUDE
## LR(1) items:
declaration -> INCLUDE . LEFT_PAREN SINGLE_QUOTED RIGHT_PAREN DOT [ EOI ]
declaration -> INCLUDE . LEFT_PAREN SINGLE_QUOTED COMMA name_list RIGHT_PAREN DOT [ EOI ]
## Transitions:
-- On LEFT_PAREN shift to state 298
## Reductions:

State 298:
## Known stack suffix:
## INCLUDE LEFT_PAREN
## LR(1) items:
declaration -> INCLUDE LEFT_PAREN . SINGLE_QUOTED RIGHT_PAREN DOT [ EOI ]
declaration -> INCLUDE LEFT_PAREN . SINGLE_QUOTED COMMA name_list RIGHT_PAREN DOT [ EOI ]
## Transitions:
-- On SINGLE_QUOTED shift to state 299
## Reductions:

State 299:
## Known stack suffix:
## INCLUDE LEFT_PAREN SINGLE_QUOTED
## LR(1) items:
declaration -> INCLUDE LEFT_PAREN SINGLE_QUOTED . RIGHT_PAREN DOT [ EOI ]
declaration -> INCLUDE LEFT_PAREN SINGLE_QUOTED . COMMA name_list RIGHT_PAREN DOT [ EOI ]
## Transitions:
-- On RIGHT_PAREN shift to state 300
-- On COMMA shift to state 302
## Reductions:

State 300:
## Known stack suffix:
## INCLUDE LEFT_PAREN SINGLE_QUOTED RIGHT_PAREN
## LR(1) items:
declaration -> INCLUDE LEFT_PAREN SINGLE_QUOTED RIGHT_PAREN . DOT [ EOI ]
## Transitions:
-- On DOT shift to state 301
## Reductions:

State 301:
## Known stack suffix:
## INCLUDE LEFT_PAREN SINGLE_QUOTED RIGHT_PAREN DOT
## LR(1) items:
declaration -> INCLUDE LEFT_PAREN SINGLE_QUOTED RIGHT_PAREN DOT . [ EOI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production declaration -> INCLUDE LEFT_PAREN SINGLE_QUOTED RIGHT_PAREN DOT

State 302:
## Known stack suffix:
## INCLUDE LEFT_PAREN SINGLE_QUOTED COMMA
## LR(1) items:
declaration -> INCLUDE LEFT_PAREN SINGLE_QUOTED COMMA . name_list RIGHT_PAREN DOT [ EOI ]
## Transitions:
-- On SINGLE_QUOTED shift to state 6
-- On LOWER_WORD shift to state 9
-- On INTEGER shift to state 227
-- On separated_nonempty_list(COMMA,name) shift to state 303
-- On name_list shift to state 304
-- On name shift to state 307
-- On loption(separated_nonempty_list(COMMA,name)) shift to state 310
-- On atomic_word shift to state 282
## Reductions:
-- On RIGHT_PAREN reduce production loption(separated_nonempty_list(COMMA,name)) ->

State 303:
## Known stack suffix:
## separated_nonempty_list(COMMA,name)
## LR(1) items:
loption(separated_nonempty_list(COMMA,name)) -> separated_nonempty_list(COMMA,name) . [ RIGHT_PAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production loption(separated_nonempty_list(COMMA,name)) -> separated_nonempty_list(COMMA,name)

State 304:
## Known stack suffix:
## INCLUDE LEFT_PAREN SINGLE_QUOTED COMMA name_list
## LR(1) items:
declaration -> INCLUDE LEFT_PAREN SINGLE_QUOTED COMMA name_list . RIGHT_PAREN DOT [ EOI ]
## Transitions:
-- On RIGHT_PAREN shift to state 305
## Reductions:

State 305:
## Known stack suffix:
## INCLUDE LEFT_PAREN SINGLE_QUOTED COMMA name_list RIGHT_PAREN
## LR(1) items:
declaration -> INCLUDE LEFT_PAREN SINGLE_QUOTED COMMA name_list RIGHT_PAREN . DOT [ EOI ]
## Transitions:
-- On DOT shift to state 306
## Reductions:

State 306:
## Known stack suffix:
## INCLUDE LEFT_PAREN SINGLE_QUOTED COMMA name_list RIGHT_PAREN DOT
## LR(1) items:
declaration -> INCLUDE LEFT_PAREN SINGLE_QUOTED COMMA name_list RIGHT_PAREN DOT . [ EOI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production declaration -> INCLUDE LEFT_PAREN SINGLE_QUOTED COMMA name_list RIGHT_PAREN DOT

State 307:
## Known stack suffix:
## name
## LR(1) items:
separated_nonempty_list(COMMA,name) -> name . [ RIGHT_PAREN ]
separated_nonempty_list(COMMA,name) -> name . COMMA separated_nonempty_list(COMMA,name) [ RIGHT_PAREN ]
## Transitions:
-- On COMMA shift to state 308
## Reductions:
-- On RIGHT_PAREN reduce production separated_nonempty_list(COMMA,name) -> name

State 308:
## Known stack suffix:
## name COMMA
## LR(1) items:
separated_nonempty_list(COMMA,name) -> name COMMA . separated_nonempty_list(COMMA,name) [ RIGHT_PAREN ]
## Transitions:
-- On SINGLE_QUOTED shift to state 6
-- On LOWER_WORD shift to state 9
-- On INTEGER shift to state 227
-- On separated_nonempty_list(COMMA,name) shift to state 309
-- On name shift to state 307
-- On atomic_word shift to state 282
## Reductions:

State 309:
## Known stack suffix:
## name COMMA separated_nonempty_list(COMMA,name)
## LR(1) items:
separated_nonempty_list(COMMA,name) -> name COMMA separated_nonempty_list(COMMA,name) . [ RIGHT_PAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production separated_nonempty_list(COMMA,name) -> name COMMA separated_nonempty_list(COMMA,name)

State 310:
## Known stack suffix:
## loption(separated_nonempty_list(COMMA,name))
## LR(1) items:
name_list -> loption(separated_nonempty_list(COMMA,name)) . [ RIGHT_PAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production name_list -> loption(separated_nonempty_list(COMMA,name))

State 311:
## Known stack suffix:
## FOF
## LR(1) items:
declaration -> FOF . LEFT_PAREN name COMMA role COMMA formula annotations RIGHT_PAREN DOT [ EOI ]
## Transitions:
-- On LEFT_PAREN shift to state 312
## Reductions:

State 312:
## Known stack suffix:
## FOF LEFT_PAREN
## LR(1) items:
declaration -> FOF LEFT_PAREN . name COMMA role COMMA formula annotations RIGHT_PAREN DOT [ EOI ]
## Transitions:
-- On SINGLE_QUOTED shift to state 6
-- On LOWER_WORD shift to state 9
-- On INTEGER shift to state 227
-- On name shift to state 313
-- On atomic_word shift to state 282
## Reductions:

State 313:
## Known stack suffix:
## FOF LEFT_PAREN name
## LR(1) items:
declaration -> FOF LEFT_PAREN name . COMMA role COMMA formula annotations RIGHT_PAREN DOT [ EOI ]
## Transitions:
-- On COMMA shift to state 314
## Reductions:

State 314:
## Known stack suffix:
## FOF LEFT_PAREN name COMMA
## LR(1) items:
declaration -> FOF LEFT_PAREN name COMMA . role COMMA formula annotations RIGHT_PAREN DOT [ EOI ]
## Transitions:
-- On LOWER_WORD shift to state 230
-- On role shift to state 315
## Reductions:

State 315:
## Known stack suffix:
## FOF LEFT_PAREN name COMMA role
## LR(1) items:
declaration -> FOF LEFT_PAREN name COMMA role . COMMA formula annotations RIGHT_PAREN DOT [ EOI ]
## Transitions:
-- On COMMA shift to state 316
## Reductions:

State 316:
## Known stack suffix:
## FOF LEFT_PAREN name COMMA role COMMA
## LR(1) items:
declaration -> FOF LEFT_PAREN name COMMA role COMMA . formula annotations RIGHT_PAREN DOT [ EOI ]
## Transitions:
-- On XOR shift to state 13
-- On WILDCARD shift to state 4
-- On VLINE shift to state 18
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOTVLINE shift to state 88
-- On NOTAND shift to state 98
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 17
-- On LEFT_IMPLY shift to state 108
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On IMPLY shift to state 120
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On EQUIV shift to state 125
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On ARROW shift to state 130
-- On AND shift to state 135
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 140
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 143
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On or_formula shift to state 171
-- On nonassoc_binary_formula shift to state 172
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On formula shift to state 317
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On binary_formula shift to state 176
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119
-- On assoc_binary_formula_aux(VLINE) shift to state 177
-- On assoc_binary_formula_aux(AND) shift to state 178
-- On assoc_binary_formula shift to state 179
-- On app_formula shift to state 180
-- On and_formula shift to state 183
## Reductions:

State 317:
## Known stack suffix:
## FOF LEFT_PAREN name COMMA role COMMA formula
## LR(1) items:
declaration -> FOF LEFT_PAREN name COMMA role COMMA formula . annotations RIGHT_PAREN DOT [ EOI ]
## Transitions:
-- On COMMA shift to state 254
-- On annotations shift to state 318
## Reductions:
-- On RIGHT_PAREN reduce production annotations ->

State 318:
## Known stack suffix:
## FOF LEFT_PAREN name COMMA role COMMA formula annotations
## LR(1) items:
declaration -> FOF LEFT_PAREN name COMMA role COMMA formula annotations . RIGHT_PAREN DOT [ EOI ]
## Transitions:
-- On RIGHT_PAREN shift to state 319
## Reductions:

State 319:
## Known stack suffix:
## FOF LEFT_PAREN name COMMA role COMMA formula annotations RIGHT_PAREN
## LR(1) items:
declaration -> FOF LEFT_PAREN name COMMA role COMMA formula annotations RIGHT_PAREN . DOT [ EOI ]
## Transitions:
-- On DOT shift to state 320
## Reductions:

State 320:
## Known stack suffix:
## FOF LEFT_PAREN name COMMA role COMMA formula annotations RIGHT_PAREN DOT
## LR(1) items:
declaration -> FOF LEFT_PAREN name COMMA role COMMA formula annotations RIGHT_PAREN DOT . [ EOI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production declaration -> FOF LEFT_PAREN name COMMA role COMMA formula annotations RIGHT_PAREN DOT

State 321:
## Known stack suffix:
## CNF
## LR(1) items:
declaration -> CNF . LEFT_PAREN name COMMA role COMMA cnf_formula annotations RIGHT_PAREN DOT [ EOI ]
## Transitions:
-- On LEFT_PAREN shift to state 322
## Reductions:

State 322:
## Known stack suffix:
## CNF LEFT_PAREN
## LR(1) items:
declaration -> CNF LEFT_PAREN . name COMMA role COMMA cnf_formula annotations RIGHT_PAREN DOT [ EOI ]
## Transitions:
-- On SINGLE_QUOTED shift to state 6
-- On LOWER_WORD shift to state 9
-- On INTEGER shift to state 227
-- On name shift to state 323
-- On atomic_word shift to state 282
## Reductions:

State 323:
## Known stack suffix:
## CNF LEFT_PAREN name
## LR(1) items:
declaration -> CNF LEFT_PAREN name . COMMA role COMMA cnf_formula annotations RIGHT_PAREN DOT [ EOI ]
## Transitions:
-- On COMMA shift to state 324
## Reductions:

State 324:
## Known stack suffix:
## CNF LEFT_PAREN name COMMA
## LR(1) items:
declaration -> CNF LEFT_PAREN name COMMA . role COMMA cnf_formula annotations RIGHT_PAREN DOT [ EOI ]
## Transitions:
-- On LOWER_WORD shift to state 230
-- On role shift to state 325
## Reductions:

State 325:
## Known stack suffix:
## CNF LEFT_PAREN name COMMA role
## LR(1) items:
declaration -> CNF LEFT_PAREN name COMMA role . COMMA cnf_formula annotations RIGHT_PAREN DOT [ EOI ]
## Transitions:
-- On COMMA shift to state 326
## Reductions:

State 326:
## Known stack suffix:
## CNF LEFT_PAREN name COMMA role COMMA
## LR(1) items:
declaration -> CNF LEFT_PAREN name COMMA role COMMA . cnf_formula annotations RIGHT_PAREN DOT [ EOI ]
## Transitions:
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 327
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 334
-- On INTEGER shift to state 10
-- On FORALLCONST shift to state 62
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On variable shift to state 77
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On separated_nonempty_list(VLINE,literal) shift to state 335
-- On plain_term shift to state 95
-- On literal_atom shift to state 336
-- On literal shift to state 337
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On disjunction shift to state 340
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On cnf_formula shift to state 343
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 329
-- On atomic_defined_word shift to state 119
## Reductions:

State 327:
## Known stack suffix:
## NOT
## LR(1) items:
literal -> NOT . literal_atom [ VLINE RIGHT_PAREN COMMA ]
## Transitions:
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On LOWER_WORD shift to state 9
-- On INTEGER shift to state 10
-- On FORALLCONST shift to state 62
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On variable shift to state 77
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On plain_term shift to state 95
-- On literal_atom shift to state 328
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 329
-- On atomic_defined_word shift to state 119
## Reductions:

State 328:
## Known stack suffix:
## NOT literal_atom
## LR(1) items:
literal -> NOT literal_atom . [ VLINE RIGHT_PAREN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production literal -> NOT literal_atom

State 329:
## Known stack suffix:
## atomic_formula
## LR(1) items:
literal_atom -> atomic_formula . [ VLINE RIGHT_PAREN COMMA ]
literal_atom -> atomic_formula . EQUAL atomic_formula [ VLINE RIGHT_PAREN COMMA ]
literal_atom -> atomic_formula . NOT_EQUAL atomic_formula [ VLINE RIGHT_PAREN COMMA ]
## Transitions:
-- On NOT_EQUAL shift to state 330
-- On EQUAL shift to state 332
## Reductions:
-- On VLINE reduce production literal_atom -> atomic_formula
-- On RIGHT_PAREN reduce production literal_atom -> atomic_formula
-- On COMMA reduce production literal_atom -> atomic_formula

State 330:
## Known stack suffix:
## atomic_formula NOT_EQUAL
## LR(1) items:
literal_atom -> atomic_formula NOT_EQUAL . atomic_formula [ VLINE RIGHT_PAREN COMMA ]
## Transitions:
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On LOWER_WORD shift to state 9
-- On INTEGER shift to state 10
-- On FORALLCONST shift to state 62
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On variable shift to state 77
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On plain_term shift to state 95
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 331
-- On atomic_defined_word shift to state 119
## Reductions:

State 331:
## Known stack suffix:
## atomic_formula NOT_EQUAL atomic_formula
## LR(1) items:
literal_atom -> atomic_formula NOT_EQUAL atomic_formula . [ VLINE RIGHT_PAREN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production literal_atom -> atomic_formula NOT_EQUAL atomic_formula

State 332:
## Known stack suffix:
## atomic_formula EQUAL
## LR(1) items:
literal_atom -> atomic_formula EQUAL . atomic_formula [ VLINE RIGHT_PAREN COMMA ]
## Transitions:
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On LOWER_WORD shift to state 9
-- On INTEGER shift to state 10
-- On FORALLCONST shift to state 62
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On variable shift to state 77
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On plain_term shift to state 95
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 333
-- On atomic_defined_word shift to state 119
## Reductions:

State 333:
## Known stack suffix:
## atomic_formula EQUAL atomic_formula
## LR(1) items:
literal_atom -> atomic_formula EQUAL atomic_formula . [ VLINE RIGHT_PAREN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production literal_atom -> atomic_formula EQUAL atomic_formula

State 334:
## Known stack suffix:
## LEFT_PAREN
## LR(1) items:
cnf_formula -> LEFT_PAREN . cnf_formula RIGHT_PAREN [ RIGHT_PAREN COMMA ]
## Transitions:
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 327
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 334
-- On INTEGER shift to state 10
-- On FORALLCONST shift to state 62
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On variable shift to state 77
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On separated_nonempty_list(VLINE,literal) shift to state 335
-- On plain_term shift to state 95
-- On literal_atom shift to state 336
-- On literal shift to state 337
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On disjunction shift to state 340
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On cnf_formula shift to state 341
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 329
-- On atomic_defined_word shift to state 119
## Reductions:

State 335:
## Known stack suffix:
## separated_nonempty_list(VLINE,literal)
## LR(1) items:
disjunction -> separated_nonempty_list(VLINE,literal) . [ RIGHT_PAREN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production disjunction -> separated_nonempty_list(VLINE,literal)

State 336:
## Known stack suffix:
## literal_atom
## LR(1) items:
literal -> literal_atom . [ VLINE RIGHT_PAREN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production literal -> literal_atom

State 337:
## Known stack suffix:
## literal
## LR(1) items:
separated_nonempty_list(VLINE,literal) -> literal . [ RIGHT_PAREN COMMA ]
separated_nonempty_list(VLINE,literal) -> literal . VLINE separated_nonempty_list(VLINE,literal) [ RIGHT_PAREN COMMA ]
## Transitions:
-- On VLINE shift to state 338
## Reductions:
-- On RIGHT_PAREN reduce production separated_nonempty_list(VLINE,literal) -> literal
-- On COMMA reduce production separated_nonempty_list(VLINE,literal) -> literal

State 338:
## Known stack suffix:
## literal VLINE
## LR(1) items:
separated_nonempty_list(VLINE,literal) -> literal VLINE . separated_nonempty_list(VLINE,literal) [ RIGHT_PAREN COMMA ]
## Transitions:
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 327
-- On LOWER_WORD shift to state 9
-- On INTEGER shift to state 10
-- On FORALLCONST shift to state 62
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On variable shift to state 77
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On separated_nonempty_list(VLINE,literal) shift to state 339
-- On plain_term shift to state 95
-- On literal_atom shift to state 336
-- On literal shift to state 337
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 329
-- On atomic_defined_word shift to state 119
## Reductions:

State 339:
## Known stack suffix:
## literal VLINE separated_nonempty_list(VLINE,literal)
## LR(1) items:
separated_nonempty_list(VLINE,literal) -> literal VLINE separated_nonempty_list(VLINE,literal) . [ RIGHT_PAREN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production separated_nonempty_list(VLINE,literal) -> literal VLINE separated_nonempty_list(VLINE,literal)

State 340:
## Known stack suffix:
## disjunction
## LR(1) items:
cnf_formula -> disjunction . [ RIGHT_PAREN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production cnf_formula -> disjunction

State 341:
## Known stack suffix:
## LEFT_PAREN cnf_formula
## LR(1) items:
cnf_formula -> LEFT_PAREN cnf_formula . RIGHT_PAREN [ RIGHT_PAREN COMMA ]
## Transitions:
-- On RIGHT_PAREN shift to state 342
## Reductions:

State 342:
## Known stack suffix:
## LEFT_PAREN cnf_formula RIGHT_PAREN
## LR(1) items:
cnf_formula -> LEFT_PAREN cnf_formula RIGHT_PAREN . [ RIGHT_PAREN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production cnf_formula -> LEFT_PAREN cnf_formula RIGHT_PAREN

State 343:
## Known stack suffix:
## CNF LEFT_PAREN name COMMA role COMMA cnf_formula
## LR(1) items:
declaration -> CNF LEFT_PAREN name COMMA role COMMA cnf_formula . annotations RIGHT_PAREN DOT [ EOI ]
## Transitions:
-- On COMMA shift to state 254
-- On annotations shift to state 344
## Reductions:
-- On RIGHT_PAREN reduce production annotations ->

State 344:
## Known stack suffix:
## CNF LEFT_PAREN name COMMA role COMMA cnf_formula annotations
## LR(1) items:
declaration -> CNF LEFT_PAREN name COMMA role COMMA cnf_formula annotations . RIGHT_PAREN DOT [ EOI ]
## Transitions:
-- On RIGHT_PAREN shift to state 345
## Reductions:

State 345:
## Known stack suffix:
## CNF LEFT_PAREN name COMMA role COMMA cnf_formula annotations RIGHT_PAREN
## LR(1) items:
declaration -> CNF LEFT_PAREN name COMMA role COMMA cnf_formula annotations RIGHT_PAREN . DOT [ EOI ]
## Transitions:
-- On DOT shift to state 346
## Reductions:

State 346:
## Known stack suffix:
## CNF LEFT_PAREN name COMMA role COMMA cnf_formula annotations RIGHT_PAREN DOT
## LR(1) items:
declaration -> CNF LEFT_PAREN name COMMA role COMMA cnf_formula annotations RIGHT_PAREN DOT . [ EOI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production declaration -> CNF LEFT_PAREN name COMMA role COMMA cnf_formula annotations RIGHT_PAREN DOT

State 347:
## Known stack suffix:
## parse_declaration
## LR(1) items:
parse_declaration' -> parse_declaration . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept parse_declaration

State 348:
## Known stack suffix:
## declaration
## LR(1) items:
parse_declaration -> declaration . EOI [ # ]
## Transitions:
-- On EOI shift to state 349
## Reductions:

State 349:
## Known stack suffix:
## declaration EOI
## LR(1) items:
parse_declaration -> declaration EOI . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production parse_declaration -> declaration EOI

State 350:
## Known stack suffix:
##
## LR(1) items:
parse_declarations' -> . parse_declarations [ # ]
## Transitions:
-- On error shift to state 351
-- On THF shift to state 352
-- On TFF shift to state 366
-- On INCLUDE shift to state 380
-- On FOF shift to state 389
-- On CNF shift to state 399
-- On parse_declarations shift to state 409
-- On list(declaration) shift to state 410
-- On declarations shift to state 411
-- On declaration shift to state 413
## Reductions:
-- On EOI reduce production list(declaration) ->

State 351:
## Known stack suffix:
## error
## LR(1) items:
declaration -> error . [ error THF TFF INCLUDE FOF EOI CNF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production declaration -> error

State 352:
## Known stack suffix:
## THF
## LR(1) items:
declaration -> THF . LEFT_PAREN name COMMA role COMMA formula annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
declaration -> THF . LEFT_PAREN name COMMA role COMMA type_decl annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
## Transitions:
-- On LEFT_PAREN shift to state 353
## Reductions:

State 353:
## Known stack suffix:
## THF LEFT_PAREN
## LR(1) items:
declaration -> THF LEFT_PAREN . name COMMA role COMMA formula annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
declaration -> THF LEFT_PAREN . name COMMA role COMMA type_decl annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
## Transitions:
-- On SINGLE_QUOTED shift to state 6
-- On LOWER_WORD shift to state 9
-- On INTEGER shift to state 227
-- On name shift to state 354
-- On atomic_word shift to state 282
## Reductions:

State 354:
## Known stack suffix:
## THF LEFT_PAREN name
## LR(1) items:
declaration -> THF LEFT_PAREN name . COMMA role COMMA formula annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
declaration -> THF LEFT_PAREN name . COMMA role COMMA type_decl annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
## Transitions:
-- On COMMA shift to state 355
## Reductions:

State 355:
## Known stack suffix:
## THF LEFT_PAREN name COMMA
## LR(1) items:
declaration -> THF LEFT_PAREN name COMMA . role COMMA formula annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
declaration -> THF LEFT_PAREN name COMMA . role COMMA type_decl annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
## Transitions:
-- On LOWER_WORD shift to state 230
-- On role shift to state 356
## Reductions:

State 356:
## Known stack suffix:
## THF LEFT_PAREN name COMMA role
## LR(1) items:
declaration -> THF LEFT_PAREN name COMMA role . COMMA formula annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
declaration -> THF LEFT_PAREN name COMMA role . COMMA type_decl annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
## Transitions:
-- On COMMA shift to state 357
## Reductions:

State 357:
## Known stack suffix:
## THF LEFT_PAREN name COMMA role COMMA
## LR(1) items:
declaration -> THF LEFT_PAREN name COMMA role COMMA . formula annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
declaration -> THF LEFT_PAREN name COMMA role COMMA . type_decl annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
## Transitions:
-- On XOR shift to state 13
-- On WILDCARD shift to state 4
-- On VLINE shift to state 18
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOTVLINE shift to state 88
-- On NOTAND shift to state 98
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 233
-- On LEFT_IMPLY shift to state 108
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On IMPLY shift to state 120
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On EQUIV shift to state 125
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On ARROW shift to state 130
-- On AND shift to state 135
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 140
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 143
-- On type_decl shift to state 358
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On or_formula shift to state 171
-- On nonassoc_binary_formula shift to state 172
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On formula shift to state 362
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On binary_formula shift to state 176
-- On atomic_word shift to state 236
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119
-- On assoc_binary_formula_aux(VLINE) shift to state 177
-- On assoc_binary_formula_aux(AND) shift to state 178
-- On assoc_binary_formula shift to state 179
-- On app_formula shift to state 180
-- On and_formula shift to state 183
## Reductions:

State 358:
## Known stack suffix:
## THF LEFT_PAREN name COMMA role COMMA type_decl
## LR(1) items:
declaration -> THF LEFT_PAREN name COMMA role COMMA type_decl . annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
## Transitions:
-- On COMMA shift to state 254
-- On annotations shift to state 359
## Reductions:
-- On RIGHT_PAREN reduce production annotations ->

State 359:
## Known stack suffix:
## THF LEFT_PAREN name COMMA role COMMA type_decl annotations
## LR(1) items:
declaration -> THF LEFT_PAREN name COMMA role COMMA type_decl annotations . RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
## Transitions:
-- On RIGHT_PAREN shift to state 360
## Reductions:

State 360:
## Known stack suffix:
## THF LEFT_PAREN name COMMA role COMMA type_decl annotations RIGHT_PAREN
## LR(1) items:
declaration -> THF LEFT_PAREN name COMMA role COMMA type_decl annotations RIGHT_PAREN . DOT [ error THF TFF INCLUDE FOF EOI CNF ]
## Transitions:
-- On DOT shift to state 361
## Reductions:

State 361:
## Known stack suffix:
## THF LEFT_PAREN name COMMA role COMMA type_decl annotations RIGHT_PAREN DOT
## LR(1) items:
declaration -> THF LEFT_PAREN name COMMA role COMMA type_decl annotations RIGHT_PAREN DOT . [ error THF TFF INCLUDE FOF EOI CNF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production declaration -> THF LEFT_PAREN name COMMA role COMMA type_decl annotations RIGHT_PAREN DOT

State 362:
## Known stack suffix:
## THF LEFT_PAREN name COMMA role COMMA formula
## LR(1) items:
declaration -> THF LEFT_PAREN name COMMA role COMMA formula . annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
## Transitions:
-- On COMMA shift to state 254
-- On annotations shift to state 363
## Reductions:
-- On RIGHT_PAREN reduce production annotations ->

State 363:
## Known stack suffix:
## THF LEFT_PAREN name COMMA role COMMA formula annotations
## LR(1) items:
declaration -> THF LEFT_PAREN name COMMA role COMMA formula annotations . RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
## Transitions:
-- On RIGHT_PAREN shift to state 364
## Reductions:

State 364:
## Known stack suffix:
## THF LEFT_PAREN name COMMA role COMMA formula annotations RIGHT_PAREN
## LR(1) items:
declaration -> THF LEFT_PAREN name COMMA role COMMA formula annotations RIGHT_PAREN . DOT [ error THF TFF INCLUDE FOF EOI CNF ]
## Transitions:
-- On DOT shift to state 365
## Reductions:

State 365:
## Known stack suffix:
## THF LEFT_PAREN name COMMA role COMMA formula annotations RIGHT_PAREN DOT
## LR(1) items:
declaration -> THF LEFT_PAREN name COMMA role COMMA formula annotations RIGHT_PAREN DOT . [ error THF TFF INCLUDE FOF EOI CNF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production declaration -> THF LEFT_PAREN name COMMA role COMMA formula annotations RIGHT_PAREN DOT

State 366:
## Known stack suffix:
## TFF
## LR(1) items:
declaration -> TFF . LEFT_PAREN name COMMA role COMMA formula annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
declaration -> TFF . LEFT_PAREN name COMMA role COMMA type_decl annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
## Transitions:
-- On LEFT_PAREN shift to state 367
## Reductions:

State 367:
## Known stack suffix:
## TFF LEFT_PAREN
## LR(1) items:
declaration -> TFF LEFT_PAREN . name COMMA role COMMA formula annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
declaration -> TFF LEFT_PAREN . name COMMA role COMMA type_decl annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
## Transitions:
-- On SINGLE_QUOTED shift to state 6
-- On LOWER_WORD shift to state 9
-- On INTEGER shift to state 227
-- On name shift to state 368
-- On atomic_word shift to state 282
## Reductions:

State 368:
## Known stack suffix:
## TFF LEFT_PAREN name
## LR(1) items:
declaration -> TFF LEFT_PAREN name . COMMA role COMMA formula annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
declaration -> TFF LEFT_PAREN name . COMMA role COMMA type_decl annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
## Transitions:
-- On COMMA shift to state 369
## Reductions:

State 369:
## Known stack suffix:
## TFF LEFT_PAREN name COMMA
## LR(1) items:
declaration -> TFF LEFT_PAREN name COMMA . role COMMA formula annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
declaration -> TFF LEFT_PAREN name COMMA . role COMMA type_decl annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
## Transitions:
-- On LOWER_WORD shift to state 230
-- On role shift to state 370
## Reductions:

State 370:
## Known stack suffix:
## TFF LEFT_PAREN name COMMA role
## LR(1) items:
declaration -> TFF LEFT_PAREN name COMMA role . COMMA formula annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
declaration -> TFF LEFT_PAREN name COMMA role . COMMA type_decl annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
## Transitions:
-- On COMMA shift to state 371
## Reductions:

State 371:
## Known stack suffix:
## TFF LEFT_PAREN name COMMA role COMMA
## LR(1) items:
declaration -> TFF LEFT_PAREN name COMMA role COMMA . formula annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
declaration -> TFF LEFT_PAREN name COMMA role COMMA . type_decl annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
## Transitions:
-- On XOR shift to state 13
-- On WILDCARD shift to state 4
-- On VLINE shift to state 18
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOTVLINE shift to state 88
-- On NOTAND shift to state 98
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 233
-- On LEFT_IMPLY shift to state 108
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On IMPLY shift to state 120
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On EQUIV shift to state 125
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On ARROW shift to state 130
-- On AND shift to state 135
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 140
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 143
-- On type_decl shift to state 372
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On or_formula shift to state 171
-- On nonassoc_binary_formula shift to state 172
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On formula shift to state 376
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On binary_formula shift to state 176
-- On atomic_word shift to state 236
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119
-- On assoc_binary_formula_aux(VLINE) shift to state 177
-- On assoc_binary_formula_aux(AND) shift to state 178
-- On assoc_binary_formula shift to state 179
-- On app_formula shift to state 180
-- On and_formula shift to state 183
## Reductions:

State 372:
## Known stack suffix:
## TFF LEFT_PAREN name COMMA role COMMA type_decl
## LR(1) items:
declaration -> TFF LEFT_PAREN name COMMA role COMMA type_decl . annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
## Transitions:
-- On COMMA shift to state 254
-- On annotations shift to state 373
## Reductions:
-- On RIGHT_PAREN reduce production annotations ->

State 373:
## Known stack suffix:
## TFF LEFT_PAREN name COMMA role COMMA type_decl annotations
## LR(1) items:
declaration -> TFF LEFT_PAREN name COMMA role COMMA type_decl annotations . RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
## Transitions:
-- On RIGHT_PAREN shift to state 374
## Reductions:

State 374:
## Known stack suffix:
## TFF LEFT_PAREN name COMMA role COMMA type_decl annotations RIGHT_PAREN
## LR(1) items:
declaration -> TFF LEFT_PAREN name COMMA role COMMA type_decl annotations RIGHT_PAREN . DOT [ error THF TFF INCLUDE FOF EOI CNF ]
## Transitions:
-- On DOT shift to state 375
## Reductions:

State 375:
## Known stack suffix:
## TFF LEFT_PAREN name COMMA role COMMA type_decl annotations RIGHT_PAREN DOT
## LR(1) items:
declaration -> TFF LEFT_PAREN name COMMA role COMMA type_decl annotations RIGHT_PAREN DOT . [ error THF TFF INCLUDE FOF EOI CNF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production declaration -> TFF LEFT_PAREN name COMMA role COMMA type_decl annotations RIGHT_PAREN DOT

State 376:
## Known stack suffix:
## TFF LEFT_PAREN name COMMA role COMMA formula
## LR(1) items:
declaration -> TFF LEFT_PAREN name COMMA role COMMA formula . annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
## Transitions:
-- On COMMA shift to state 254
-- On annotations shift to state 377
## Reductions:
-- On RIGHT_PAREN reduce production annotations ->

State 377:
## Known stack suffix:
## TFF LEFT_PAREN name COMMA role COMMA formula annotations
## LR(1) items:
declaration -> TFF LEFT_PAREN name COMMA role COMMA formula annotations . RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
## Transitions:
-- On RIGHT_PAREN shift to state 378
## Reductions:

State 378:
## Known stack suffix:
## TFF LEFT_PAREN name COMMA role COMMA formula annotations RIGHT_PAREN
## LR(1) items:
declaration -> TFF LEFT_PAREN name COMMA role COMMA formula annotations RIGHT_PAREN . DOT [ error THF TFF INCLUDE FOF EOI CNF ]
## Transitions:
-- On DOT shift to state 379
## Reductions:

State 379:
## Known stack suffix:
## TFF LEFT_PAREN name COMMA role COMMA formula annotations RIGHT_PAREN DOT
## LR(1) items:
declaration -> TFF LEFT_PAREN name COMMA role COMMA formula annotations RIGHT_PAREN DOT . [ error THF TFF INCLUDE FOF EOI CNF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production declaration -> TFF LEFT_PAREN name COMMA role COMMA formula annotations RIGHT_PAREN DOT

State 380:
## Known stack suffix:
## INCLUDE
## LR(1) items:
declaration -> INCLUDE . LEFT_PAREN SINGLE_QUOTED RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
declaration -> INCLUDE . LEFT_PAREN SINGLE_QUOTED COMMA name_list RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
## Transitions:
-- On LEFT_PAREN shift to state 381
## Reductions:

State 381:
## Known stack suffix:
## INCLUDE LEFT_PAREN
## LR(1) items:
declaration -> INCLUDE LEFT_PAREN . SINGLE_QUOTED RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
declaration -> INCLUDE LEFT_PAREN . SINGLE_QUOTED COMMA name_list RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
## Transitions:
-- On SINGLE_QUOTED shift to state 382
## Reductions:

State 382:
## Known stack suffix:
## INCLUDE LEFT_PAREN SINGLE_QUOTED
## LR(1) items:
declaration -> INCLUDE LEFT_PAREN SINGLE_QUOTED . RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
declaration -> INCLUDE LEFT_PAREN SINGLE_QUOTED . COMMA name_list RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
## Transitions:
-- On RIGHT_PAREN shift to state 383
-- On COMMA shift to state 385
## Reductions:

State 383:
## Known stack suffix:
## INCLUDE LEFT_PAREN SINGLE_QUOTED RIGHT_PAREN
## LR(1) items:
declaration -> INCLUDE LEFT_PAREN SINGLE_QUOTED RIGHT_PAREN . DOT [ error THF TFF INCLUDE FOF EOI CNF ]
## Transitions:
-- On DOT shift to state 384
## Reductions:

State 384:
## Known stack suffix:
## INCLUDE LEFT_PAREN SINGLE_QUOTED RIGHT_PAREN DOT
## LR(1) items:
declaration -> INCLUDE LEFT_PAREN SINGLE_QUOTED RIGHT_PAREN DOT . [ error THF TFF INCLUDE FOF EOI CNF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production declaration -> INCLUDE LEFT_PAREN SINGLE_QUOTED RIGHT_PAREN DOT

State 385:
## Known stack suffix:
## INCLUDE LEFT_PAREN SINGLE_QUOTED COMMA
## LR(1) items:
declaration -> INCLUDE LEFT_PAREN SINGLE_QUOTED COMMA . name_list RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
## Transitions:
-- On SINGLE_QUOTED shift to state 6
-- On LOWER_WORD shift to state 9
-- On INTEGER shift to state 227
-- On separated_nonempty_list(COMMA,name) shift to state 303
-- On name_list shift to state 386
-- On name shift to state 307
-- On loption(separated_nonempty_list(COMMA,name)) shift to state 310
-- On atomic_word shift to state 282
## Reductions:
-- On RIGHT_PAREN reduce production loption(separated_nonempty_list(COMMA,name)) ->

State 386:
## Known stack suffix:
## INCLUDE LEFT_PAREN SINGLE_QUOTED COMMA name_list
## LR(1) items:
declaration -> INCLUDE LEFT_PAREN SINGLE_QUOTED COMMA name_list . RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
## Transitions:
-- On RIGHT_PAREN shift to state 387
## Reductions:

State 387:
## Known stack suffix:
## INCLUDE LEFT_PAREN SINGLE_QUOTED COMMA name_list RIGHT_PAREN
## LR(1) items:
declaration -> INCLUDE LEFT_PAREN SINGLE_QUOTED COMMA name_list RIGHT_PAREN . DOT [ error THF TFF INCLUDE FOF EOI CNF ]
## Transitions:
-- On DOT shift to state 388
## Reductions:

State 388:
## Known stack suffix:
## INCLUDE LEFT_PAREN SINGLE_QUOTED COMMA name_list RIGHT_PAREN DOT
## LR(1) items:
declaration -> INCLUDE LEFT_PAREN SINGLE_QUOTED COMMA name_list RIGHT_PAREN DOT . [ error THF TFF INCLUDE FOF EOI CNF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production declaration -> INCLUDE LEFT_PAREN SINGLE_QUOTED COMMA name_list RIGHT_PAREN DOT

State 389:
## Known stack suffix:
## FOF
## LR(1) items:
declaration -> FOF . LEFT_PAREN name COMMA role COMMA formula annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
## Transitions:
-- On LEFT_PAREN shift to state 390
## Reductions:

State 390:
## Known stack suffix:
## FOF LEFT_PAREN
## LR(1) items:
declaration -> FOF LEFT_PAREN . name COMMA role COMMA formula annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
## Transitions:
-- On SINGLE_QUOTED shift to state 6
-- On LOWER_WORD shift to state 9
-- On INTEGER shift to state 227
-- On name shift to state 391
-- On atomic_word shift to state 282
## Reductions:

State 391:
## Known stack suffix:
## FOF LEFT_PAREN name
## LR(1) items:
declaration -> FOF LEFT_PAREN name . COMMA role COMMA formula annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
## Transitions:
-- On COMMA shift to state 392
## Reductions:

State 392:
## Known stack suffix:
## FOF LEFT_PAREN name COMMA
## LR(1) items:
declaration -> FOF LEFT_PAREN name COMMA . role COMMA formula annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
## Transitions:
-- On LOWER_WORD shift to state 230
-- On role shift to state 393
## Reductions:

State 393:
## Known stack suffix:
## FOF LEFT_PAREN name COMMA role
## LR(1) items:
declaration -> FOF LEFT_PAREN name COMMA role . COMMA formula annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
## Transitions:
-- On COMMA shift to state 394
## Reductions:

State 394:
## Known stack suffix:
## FOF LEFT_PAREN name COMMA role COMMA
## LR(1) items:
declaration -> FOF LEFT_PAREN name COMMA role COMMA . formula annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
## Transitions:
-- On XOR shift to state 13
-- On WILDCARD shift to state 4
-- On VLINE shift to state 18
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOTVLINE shift to state 88
-- On NOTAND shift to state 98
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 17
-- On LEFT_IMPLY shift to state 108
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On IMPLY shift to state 120
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On EQUIV shift to state 125
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On ARROW shift to state 130
-- On AND shift to state 135
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 140
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 143
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On or_formula shift to state 171
-- On nonassoc_binary_formula shift to state 172
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On formula shift to state 395
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On binary_formula shift to state 176
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119
-- On assoc_binary_formula_aux(VLINE) shift to state 177
-- On assoc_binary_formula_aux(AND) shift to state 178
-- On assoc_binary_formula shift to state 179
-- On app_formula shift to state 180
-- On and_formula shift to state 183
## Reductions:

State 395:
## Known stack suffix:
## FOF LEFT_PAREN name COMMA role COMMA formula
## LR(1) items:
declaration -> FOF LEFT_PAREN name COMMA role COMMA formula . annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
## Transitions:
-- On COMMA shift to state 254
-- On annotations shift to state 396
## Reductions:
-- On RIGHT_PAREN reduce production annotations ->

State 396:
## Known stack suffix:
## FOF LEFT_PAREN name COMMA role COMMA formula annotations
## LR(1) items:
declaration -> FOF LEFT_PAREN name COMMA role COMMA formula annotations . RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
## Transitions:
-- On RIGHT_PAREN shift to state 397
## Reductions:

State 397:
## Known stack suffix:
## FOF LEFT_PAREN name COMMA role COMMA formula annotations RIGHT_PAREN
## LR(1) items:
declaration -> FOF LEFT_PAREN name COMMA role COMMA formula annotations RIGHT_PAREN . DOT [ error THF TFF INCLUDE FOF EOI CNF ]
## Transitions:
-- On DOT shift to state 398
## Reductions:

State 398:
## Known stack suffix:
## FOF LEFT_PAREN name COMMA role COMMA formula annotations RIGHT_PAREN DOT
## LR(1) items:
declaration -> FOF LEFT_PAREN name COMMA role COMMA formula annotations RIGHT_PAREN DOT . [ error THF TFF INCLUDE FOF EOI CNF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production declaration -> FOF LEFT_PAREN name COMMA role COMMA formula annotations RIGHT_PAREN DOT

State 399:
## Known stack suffix:
## CNF
## LR(1) items:
declaration -> CNF . LEFT_PAREN name COMMA role COMMA cnf_formula annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
## Transitions:
-- On LEFT_PAREN shift to state 400
## Reductions:

State 400:
## Known stack suffix:
## CNF LEFT_PAREN
## LR(1) items:
declaration -> CNF LEFT_PAREN . name COMMA role COMMA cnf_formula annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
## Transitions:
-- On SINGLE_QUOTED shift to state 6
-- On LOWER_WORD shift to state 9
-- On INTEGER shift to state 227
-- On name shift to state 401
-- On atomic_word shift to state 282
## Reductions:

State 401:
## Known stack suffix:
## CNF LEFT_PAREN name
## LR(1) items:
declaration -> CNF LEFT_PAREN name . COMMA role COMMA cnf_formula annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
## Transitions:
-- On COMMA shift to state 402
## Reductions:

State 402:
## Known stack suffix:
## CNF LEFT_PAREN name COMMA
## LR(1) items:
declaration -> CNF LEFT_PAREN name COMMA . role COMMA cnf_formula annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
## Transitions:
-- On LOWER_WORD shift to state 230
-- On role shift to state 403
## Reductions:

State 403:
## Known stack suffix:
## CNF LEFT_PAREN name COMMA role
## LR(1) items:
declaration -> CNF LEFT_PAREN name COMMA role . COMMA cnf_formula annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
## Transitions:
-- On COMMA shift to state 404
## Reductions:

State 404:
## Known stack suffix:
## CNF LEFT_PAREN name COMMA role COMMA
## LR(1) items:
declaration -> CNF LEFT_PAREN name COMMA role COMMA . cnf_formula annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
## Transitions:
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOT shift to state 327
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 334
-- On INTEGER shift to state 10
-- On FORALLCONST shift to state 62
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On variable shift to state 77
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On separated_nonempty_list(VLINE,literal) shift to state 335
-- On plain_term shift to state 95
-- On literal_atom shift to state 336
-- On literal shift to state 337
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On disjunction shift to state 340
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On cnf_formula shift to state 405
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 329
-- On atomic_defined_word shift to state 119
## Reductions:

State 405:
## Known stack suffix:
## CNF LEFT_PAREN name COMMA role COMMA cnf_formula
## LR(1) items:
declaration -> CNF LEFT_PAREN name COMMA role COMMA cnf_formula . annotations RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
## Transitions:
-- On COMMA shift to state 254
-- On annotations shift to state 406
## Reductions:
-- On RIGHT_PAREN reduce production annotations ->

State 406:
## Known stack suffix:
## CNF LEFT_PAREN name COMMA role COMMA cnf_formula annotations
## LR(1) items:
declaration -> CNF LEFT_PAREN name COMMA role COMMA cnf_formula annotations . RIGHT_PAREN DOT [ error THF TFF INCLUDE FOF EOI CNF ]
## Transitions:
-- On RIGHT_PAREN shift to state 407
## Reductions:

State 407:
## Known stack suffix:
## CNF LEFT_PAREN name COMMA role COMMA cnf_formula annotations RIGHT_PAREN
## LR(1) items:
declaration -> CNF LEFT_PAREN name COMMA role COMMA cnf_formula annotations RIGHT_PAREN . DOT [ error THF TFF INCLUDE FOF EOI CNF ]
## Transitions:
-- On DOT shift to state 408
## Reductions:

State 408:
## Known stack suffix:
## CNF LEFT_PAREN name COMMA role COMMA cnf_formula annotations RIGHT_PAREN DOT
## LR(1) items:
declaration -> CNF LEFT_PAREN name COMMA role COMMA cnf_formula annotations RIGHT_PAREN DOT . [ error THF TFF INCLUDE FOF EOI CNF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production declaration -> CNF LEFT_PAREN name COMMA role COMMA cnf_formula annotations RIGHT_PAREN DOT

State 409:
## Known stack suffix:
## parse_declarations
## LR(1) items:
parse_declarations' -> parse_declarations . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept parse_declarations

State 410:
## Known stack suffix:
## list(declaration)
## LR(1) items:
declarations -> list(declaration) . [ EOI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production declarations -> list(declaration)

State 411:
## Known stack suffix:
## declarations
## LR(1) items:
parse_declarations -> declarations . EOI [ # ]
## Transitions:
-- On EOI shift to state 412
## Reductions:

State 412:
## Known stack suffix:
## declarations EOI
## LR(1) items:
parse_declarations -> declarations EOI . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production parse_declarations -> declarations EOI

State 413:
## Known stack suffix:
## declaration
## LR(1) items:
list(declaration) -> declaration . list(declaration) [ EOI ]
## Transitions:
-- On error shift to state 351
-- On THF shift to state 352
-- On TFF shift to state 366
-- On INCLUDE shift to state 380
-- On FOF shift to state 389
-- On CNF shift to state 399
-- On list(declaration) shift to state 414
-- On declaration shift to state 413
## Reductions:
-- On EOI reduce production list(declaration) ->

State 414:
## Known stack suffix:
## declaration list(declaration)
## LR(1) items:
list(declaration) -> declaration list(declaration) . [ EOI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production list(declaration) -> declaration list(declaration)

State 415:
## Known stack suffix:
##
## LR(1) items:
parse_formula' -> . parse_formula [ # ]
## Transitions:
-- On XOR shift to state 13
-- On WILDCARD shift to state 4
-- On VLINE shift to state 18
-- On UPPER_WORD shift to state 5
-- On TRUE shift to state 15
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On NOTVLINE shift to state 88
-- On NOTAND shift to state 98
-- On NOT shift to state 16
-- On LOWER_WORD shift to state 9
-- On LEFT_PAREN shift to state 17
-- On LEFT_IMPLY shift to state 108
-- On LAMBDA shift to state 20
-- On INTEGER shift to state 10
-- On IMPLY shift to state 120
-- On FORALLCONST shift to state 62
-- On FORALL shift to state 63
-- On FALSE shift to state 68
-- On EXISTSCONST shift to state 69
-- On EXISTS shift to state 70
-- On EQUIV shift to state 125
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On ARROW shift to state 130
-- On AND shift to state 135
-- On variable shift to state 77
-- On unitary_infix_formula shift to state 78
-- On unitary_formula shift to state 140
-- On unitary_atomic_formula shift to state 80
-- On unary_formula shift to state 143
-- On term shift to state 84
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On quantified_formula shift to state 94
-- On plain_term shift to state 95
-- On parse_formula shift to state 416
-- On or_formula shift to state 171
-- On nonassoc_binary_formula shift to state 172
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On formula shift to state 417
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On binary_formula shift to state 176
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_formula shift to state 118
-- On atomic_defined_word shift to state 119
-- On assoc_binary_formula_aux(VLINE) shift to state 177
-- On assoc_binary_formula_aux(AND) shift to state 178
-- On assoc_binary_formula shift to state 179
-- On app_formula shift to state 180
-- On and_formula shift to state 183
## Reductions:

State 416:
## Known stack suffix:
## parse_formula
## LR(1) items:
parse_formula' -> parse_formula . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept parse_formula

State 417:
## Known stack suffix:
## formula
## LR(1) items:
parse_formula -> formula . EOI [ # ]
## Transitions:
-- On EOI shift to state 418
## Reductions:

State 418:
## Known stack suffix:
## formula EOI
## LR(1) items:
parse_formula -> formula EOI . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production parse_formula -> formula EOI

State 419:
## Known stack suffix:
##
## LR(1) items:
parse_term' -> . parse_term [ # ]
## Transitions:
-- On WILDCARD shift to state 4
-- On UPPER_WORD shift to state 5
-- On SINGLE_QUOTED shift to state 6
-- On REAL shift to state 7
-- On RATIONAL shift to state 8
-- On LOWER_WORD shift to state 9
-- On INTEGER shift to state 10
-- On DOLLAR_WORD shift to state 11
-- On DOLLAR_DOLLAR_WORD shift to state 75
-- On DISTINCT_OBJECT shift to state 76
-- On variable shift to state 77
-- On term shift to state 420
-- On system_term shift to state 85
-- On system_functor shift to state 86
-- On system_constant shift to state 93
-- On plain_term shift to state 95
-- On parse_term shift to state 422
-- On functor_ shift to state 96
-- On function_term shift to state 103
-- On defined_term shift to state 104
-- On defined_plain_term shift to state 105
-- On defined_functor shift to state 106
-- On defined_atomic_term shift to state 113
-- On defined_atom shift to state 114
-- On atomic_word shift to state 115
-- On atomic_term shift to state 116
-- On atomic_system_word shift to state 117
-- On atomic_defined_word shift to state 119
## Reductions:

State 420:
## Known stack suffix:
## term
## LR(1) items:
parse_term -> term . EOI [ # ]
## Transitions:
-- On EOI shift to state 421
## Reductions:

State 421:
## Known stack suffix:
## term EOI
## LR(1) items:
parse_term -> term EOI . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production parse_term -> term EOI

State 422:
## Known stack suffix:
## parse_term
## LR(1) items:
parse_term' -> parse_term . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept parse_term

