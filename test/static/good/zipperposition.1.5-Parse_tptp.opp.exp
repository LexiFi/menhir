%{
  open Logtk

  module L = ParseLocation
  module PT = STerm
  module A = Ast_tptp

  let remove_quotes s =
    assert (s.[0] = '\'' && s.[String.length s - 1] = '\'');
    String.sub s 1 (String.length s - 2)
%}
%start parse_answer_tuple
%start parse_declaration
%start parse_declarations
%start parse_formula
%start parse_term
%token AND
%token ARROW
%token AT
%token CNF
%token COLUMN
%token COMMA
%token <string> DISTINCT_OBJECT
%token <string> DOLLAR_DOLLAR_WORD
%token <string> DOLLAR_WORD
%token DOT
%token EOI
%token EQUAL
%token EQUIV
%token EXISTS
%token EXISTSCONST
%token FALSE
%token FOF
%token FORALL
%token FORALLCONST
%token FORALL_TY
%token IMPLY
%token INCLUDE
%token <string> INTEGER
%token LAMBDA
%token LEFT_BRACKET
%token LEFT_IMPLY
%token LEFT_PAREN
%token <string> LOWER_WORD
%token NOT
%token NOTAND
%token NOTVLINE
%token NOT_EQUAL
%token <string> RATIONAL
%token <string> REAL
%token RIGHT_BRACKET
%token RIGHT_PAREN
%token <string> SINGLE_QUOTED
%token STAR
%token TFF
%token THF
%token TRUE
%token TYPE_TY
%token UNDERSCORE
%token <string> UPPER_WORD
%token VLINE
%token WILDCARD
%token XOR
%type <Logtk.STerm.t list list> parse_answer_tuple
%type <Logtk.STerm.t Ast_tptp.declaration> parse_declaration
%type <Logtk.STerm.t Ast_tptp.declaration list> parse_declarations
%type <Logtk.STerm.t> parse_formula
%type <Logtk.STerm.t> parse_term
%%

loption_separated_nonempty_list_COMMA_general_term__:
  
    {    ( [] )}
| x = separated_nonempty_list_COMMA_general_term_
    {    ( x )}

loption_separated_nonempty_list_COMMA_name__:
  
    {    ( [] )}
| x = separated_nonempty_list_COMMA_name_
    {    ( x )}

list_declaration_:
  
    {    ( [] )}
| x = declaration xs = list_declaration_
    {    ( x :: xs )}

separated_nonempty_list_AND_unary_formula_:
  x = unary_formula
    {    ( [ x ] )}
| x = unary_formula _2 = AND xs = separated_nonempty_list_AND_unary_formula_
    {    ( x :: xs )}

separated_nonempty_list_COMMA_formula_:
  x = formula
    {    ( [ x ] )}
| x = formula _2 = COMMA xs = separated_nonempty_list_COMMA_formula_
    {    ( x :: xs )}

separated_nonempty_list_COMMA_general_term_:
  x = general_term
    {    ( [ x ] )}
| x = general_term _2 = COMMA xs = separated_nonempty_list_COMMA_general_term_
    {    ( x :: xs )}

separated_nonempty_list_COMMA_name_:
  x = name
    {    ( [ x ] )}
| x = name _2 = COMMA xs = separated_nonempty_list_COMMA_name_
    {    ( x :: xs )}

separated_nonempty_list_COMMA_term_:
  x = term
    {    ( [ x ] )}
| x = term _2 = COMMA xs = separated_nonempty_list_COMMA_term_
    {    ( x :: xs )}

separated_nonempty_list_COMMA_tff_ty_var_:
  x = tff_ty_var
    {    ( [ x ] )}
| x = tff_ty_var _2 = COMMA xs = separated_nonempty_list_COMMA_tff_ty_var_
    {    ( x :: xs )}

separated_nonempty_list_COMMA_tff_type_:
  x = tff_type
    {    ( [ x ] )}
| x = tff_type _2 = COMMA xs = separated_nonempty_list_COMMA_tff_type_
    {    ( x :: xs )}

separated_nonempty_list_COMMA_typed_var_:
  x = typed_var
    {    ( [ x ] )}
| x = typed_var _2 = COMMA xs = separated_nonempty_list_COMMA_typed_var_
    {    ( x :: xs )}

separated_nonempty_list_STAR_tff_app_type_:
  x = tff_app_type
    {    ( [ x ] )}
| x = tff_app_type _2 = STAR xs = separated_nonempty_list_STAR_tff_app_type_
    {    ( x :: xs )}

separated_nonempty_list_VLINE_answer_tuple_:
  x = answer_tuple
    {    ( [ x ] )}
| x = answer_tuple _2 = VLINE xs = separated_nonempty_list_VLINE_answer_tuple_
    {    ( x :: xs )}

separated_nonempty_list_VLINE_literal_:
  x = literal
    {    ( [ x ] )}
| x = literal _2 = VLINE xs = separated_nonempty_list_VLINE_literal_
    {    ( x :: xs )}

separated_nonempty_list_VLINE_unary_formula_:
  x = unary_formula
    {    ( [ x ] )}
| x = unary_formula _2 = VLINE xs = separated_nonempty_list_VLINE_unary_formula_
    {    ( x :: xs )}

parse_term:
  t = term _2 = EOI
    {                       ( t )}

parse_formula:
  f = formula _2 = EOI
    {                             ( f )}

parse_declaration:
  d = declaration _2 = EOI
    {                                     ( d )}

parse_declarations:
  l = declarations _2 = EOI
    {                                       ( l )}

parse_answer_tuple:
  t = answer_tuples _2 = EOI
    {                                        ( t )}

declarations:
  l = list_declaration_
    {                   ( l )}

declaration:
  _1 = FOF _2 = LEFT_PAREN name = name _4 = COMMA role = role _6 = COMMA f = formula info = annotations _9 = RIGHT_PAREN _10 = DOT
    {    ( A.FOF (name, role, f, info) )}
| _1 = TFF _2 = LEFT_PAREN name = name _4 = COMMA role = role _6 = COMMA f = formula info = annotations _9 = RIGHT_PAREN _10 = DOT
    {    ( A.TFF (name, role, f, info) )}
| _1 = THF _2 = LEFT_PAREN name = name _4 = COMMA role = role _6 = COMMA f = formula info = annotations _9 = RIGHT_PAREN _10 = DOT
    {    ( A.THF (name, role, f, info) )}
| _1 = TFF _2 = LEFT_PAREN name = name _4 = COMMA _5 = role _6 = COMMA tydecl = type_decl info = annotations _9 = RIGHT_PAREN _10 = DOT
    {let _1 =                            () in
    ( let s, ty = tydecl in
      match ty.PT.term with
      | PT.AppBuiltin (Builtin.TType, [])
      | PT.AppBuiltin
          (Builtin.Arrow,
           {PT.term=PT.AppBuiltin (Builtin.TType,[]);_} :: _) ->
             (* declare a new type symbol *)
             A.NewType (name, s, ty, info)
      | _ -> A.TypeDecl (name, s, ty, info)
    )}
| _1 = THF _2 = LEFT_PAREN name = name _4 = COMMA _5 = role _6 = COMMA tydecl = type_decl info = annotations _9 = RIGHT_PAREN _10 = DOT
    {let _1 =                                     () in
    ( let s, ty = tydecl in
      match ty.PT.term with
      | PT.AppBuiltin (Builtin.TType, [])
      | PT.AppBuiltin
          (Builtin.Arrow,
           {PT.term=PT.AppBuiltin (Builtin.TType,[]);_} :: _) ->
             (* declare a new type symbol *)
             A.NewType (name, s, ty, info)
      | _ -> A.TypeDecl (name, s, ty, info)
    )}
| _1 = CNF _2 = LEFT_PAREN name = name _4 = COMMA role = role _6 = COMMA c = cnf_formula info = annotations _9 = RIGHT_PAREN _10 = DOT
    {    ( A.CNF (name, role, c, info) )}
| _1 = INCLUDE _2 = LEFT_PAREN x = SINGLE_QUOTED _4 = RIGHT_PAREN _5 = DOT
    {    ( A.Include (remove_quotes x) )}
| _1 = INCLUDE _2 = LEFT_PAREN x = SINGLE_QUOTED _4 = COMMA names = name_list _6 = RIGHT_PAREN _7 = DOT
    {    ( A.IncludeOnly (remove_quotes x, names) )}
| _1 = error
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      UntypedAST.error loc "expected declaration"
    )}

role:
  w = LOWER_WORD
    {                   ( Ast_tptp.role_of_string w )}

answer_tuples:
  _1 = LEFT_BRACKET l = separated_nonempty_list_VLINE_answer_tuple_ _3 = RIGHT_BRACKET
    {    ( List.fold_left  (* remove underscores *)
        (fun acc opt -> match opt with | None -> acc | Some tup -> tup :: acc)
        [] l  )}

answer_tuple:
  _1 = LEFT_BRACKET l = separated_nonempty_list_COMMA_term_ _3 = RIGHT_BRACKET
    {                                                                     ( Some l )}
| _1 = UNDERSCORE
    {               ( None )}

type_decl:
  _1 = LEFT_PAREN tydecl = type_decl _3 = RIGHT_PAREN
    {                                            ( tydecl )}
| s = atomic_word _2 = COLUMN ty = tff_quantified_type
    {                                                ( s, ty )}

cnf_formula:
  _1 = LEFT_PAREN c = cnf_formula _3 = RIGHT_PAREN
    {                                         ( c )}
| c = disjunction
    {                  ( c )}

disjunction:
  l = separated_nonempty_list_VLINE_literal_
    {                                              ( l )}

literal_atom:
  f = atomic_formula
    {                     ( f )}
| l = atomic_formula _1 = EQUAL r = atomic_formula
    {let op =           ( PT.eq ) in
                                                          ( op l r )}
| l = atomic_formula _1 = NOT_EQUAL r = atomic_formula
    {let op =               ( PT.neq ) in
                                                          ( op l r )}

literal:
  f = literal_atom
    {                   ( f )}
| _1 = NOT f = literal_atom
    {let _endpos = _endpos_f_ in
let _startpos = _startpos__1_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      PT.not_ ~loc f
    )}

formula:
  f = binary_formula
    {                     ( f )}
| f = unary_formula
    {                    ( f )}
| f = app_formula
    {                  ( f )}

app_formula:
  f = unitary_formula _2 = AT t = unary_formula
    {let _endpos = _endpos_t_ in
let _startpos = _startpos_f_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      PT.app ~loc f [t]
    )}
| f = app_formula _2 = AT t = unary_formula
    {let _endpos = _endpos_t_ in
let _startpos = _startpos_f_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      PT.app ~loc f [t]
    )}

unitary_formula:
  f = quantified_formula
    {                         ( f )}
| f = unitary_atomic_formula
    {                             ( f )}

unitary_atomic_formula:
  f = atomic_formula
    {                     ( f )}
| _1 = LEFT_PAREN f = formula _3 = RIGHT_PAREN
    {                                     ( f )}

quantified_formula:
  _1 = FORALL _2 = LEFT_BRACKET vars = typed_vars _4 = RIGHT_BRACKET _5 = COLUMN f = unary_formula
    {let q =            ( PT.forall ) in
let _startpos_q_ = _startpos__1_ in
let _endpos = _endpos_f_ in
let _startpos = _startpos_q_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      q ?loc:(Some loc) vars f
    )}
| _1 = EXISTS _2 = LEFT_BRACKET vars = typed_vars _4 = RIGHT_BRACKET _5 = COLUMN f = unary_formula
    {let q =            ( PT.exists ) in
let _startpos_q_ = _startpos__1_ in
let _endpos = _endpos_f_ in
let _startpos = _startpos_q_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      q ?loc:(Some loc) vars f
    )}
| _1 = LAMBDA _2 = LEFT_BRACKET vars = typed_vars _4 = RIGHT_BRACKET _5 = COLUMN f = unary_formula
    {let q =            ( PT.lambda ) in
let _startpos_q_ = _startpos__1_ in
let _endpos = _endpos_f_ in
let _startpos = _startpos_q_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      q ?loc:(Some loc) vars f
    )}

unitary_infix_formula:
  f = unitary_formula
    {                      ( f )}
| l = unitary_atomic_formula _1 = EQUAL r = unitary_formula
    {let op =           ( PT.eq ) in
                                                                   ( op l r )}
| l = unitary_atomic_formula _1 = NOT_EQUAL r = unitary_formula
    {let op =               ( PT.neq ) in
                                                                   ( op l r )}

unary_formula:
  f = unitary_infix_formula
    {                            ( f )}
| _1 = NOT _2 = AT f = unary_formula
    {let o =         ( PT.not_ ) in
let _startpos_o_ = _startpos__1_ in
let _endpos = _endpos_f_ in
let _startpos = _startpos_o_ in
    (
     let loc = L.mk_pos _startpos _endpos in
     o ?loc:(Some loc) f
    )}
| _1 = NOT f = unary_formula
    {let o =         ( PT.not_ ) in
let _startpos_o_ = _startpos__1_ in
let _endpos = _endpos_f_ in
let _startpos = _startpos_o_ in
    (
     let loc = L.mk_pos _startpos _endpos in
     o ?loc:(Some loc) f
    )}

binary_formula:
  f = nonassoc_binary_formula
    {                              ( f )}
| f = assoc_binary_formula
    {                           ( f )}

nonassoc_binary_formula:
  _1 = EQUIV _2 = AT l = unary_formula _4 = AT r = unary_formula
    {let o =           ( PT.equiv ) in
let _startpos_o_ = _startpos__1_ in
let _endpos = _endpos_r_ in
let _startpos = _startpos_o_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      o ?loc:(Some loc) l r
    )}
| _1 = IMPLY _2 = AT l = unary_formula _4 = AT r = unary_formula
    {let o =           ( PT.imply ) in
let _startpos_o_ = _startpos__1_ in
let _endpos = _endpos_r_ in
let _startpos = _startpos_o_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      o ?loc:(Some loc) l r
    )}
| _1 = LEFT_IMPLY _2 = AT l = unary_formula _4 = AT r = unary_formula
    {let o =                ( fun ?loc l r -> PT.imply ?loc r l ) in
let _startpos_o_ = _startpos__1_ in
let _endpos = _endpos_r_ in
let _startpos = _startpos_o_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      o ?loc:(Some loc) l r
    )}
| _1 = XOR _2 = AT l = unary_formula _4 = AT r = unary_formula
    {let o =         ( PT.xor ) in
let _startpos_o_ = _startpos__1_ in
let _endpos = _endpos_r_ in
let _startpos = _startpos_o_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      o ?loc:(Some loc) l r
    )}
| _1 = NOTVLINE _2 = AT l = unary_formula _4 = AT r = unary_formula
    {let o =              ( fun ?loc x y -> PT.not_ ?loc (PT.or_ ?loc [x; y]) ) in
let _startpos_o_ = _startpos__1_ in
let _endpos = _endpos_r_ in
let _startpos = _startpos_o_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      o ?loc:(Some loc) l r
    )}
| _1 = NOTAND _2 = AT l = unary_formula _4 = AT r = unary_formula
    {let o =            ( fun ?loc x y -> PT.not_ ?loc (PT.and_ ?loc [x; y]) ) in
let _startpos_o_ = _startpos__1_ in
let _endpos = _endpos_r_ in
let _startpos = _startpos_o_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      o ?loc:(Some loc) l r
    )}
| _1 = ARROW _2 = AT l = unary_formula _4 = AT r = unary_formula
    {let o =           ( fun ?loc x y -> PT.fun_ty ?loc [x] y ) in
let _startpos_o_ = _startpos__1_ in
let _endpos = _endpos_r_ in
let _startpos = _startpos_o_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      o ?loc:(Some loc) l r
    )}
| _1 = AND _2 = AT l = unary_formula _4 = AT r = unary_formula
    {let _endpos = _endpos_r_ in
let _startpos = _startpos__1_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      PT.and_ ?loc:(Some loc) [l; r]
    )}
| _1 = VLINE _2 = AT l = unary_formula _4 = AT r = unary_formula
    {let _endpos = _endpos_r_ in
let _startpos = _startpos__1_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      PT.or_ ?loc:(Some loc) [l; r]
    )}
| l = unary_formula _1 = EQUIV r = unary_formula
    {let o =           ( PT.equiv ) in
let _endpos = _endpos_r_ in
let _startpos = _startpos_l_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      o ?loc:(Some loc) l r
    )}
| l = unary_formula _1 = IMPLY r = unary_formula
    {let o =           ( PT.imply ) in
let _endpos = _endpos_r_ in
let _startpos = _startpos_l_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      o ?loc:(Some loc) l r
    )}
| l = unary_formula _1 = LEFT_IMPLY r = unary_formula
    {let o =                ( fun ?loc l r -> PT.imply ?loc r l ) in
let _endpos = _endpos_r_ in
let _startpos = _startpos_l_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      o ?loc:(Some loc) l r
    )}
| l = unary_formula _1 = XOR r = unary_formula
    {let o =         ( PT.xor ) in
let _endpos = _endpos_r_ in
let _startpos = _startpos_l_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      o ?loc:(Some loc) l r
    )}
| l = unary_formula _1 = NOTVLINE r = unary_formula
    {let o =              ( fun ?loc x y -> PT.not_ ?loc (PT.or_ ?loc [x; y]) ) in
let _endpos = _endpos_r_ in
let _startpos = _startpos_l_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      o ?loc:(Some loc) l r
    )}
| l = unary_formula _1 = NOTAND r = unary_formula
    {let o =            ( fun ?loc x y -> PT.not_ ?loc (PT.and_ ?loc [x; y]) ) in
let _endpos = _endpos_r_ in
let _startpos = _startpos_l_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      o ?loc:(Some loc) l r
    )}
| l = unary_formula _1 = ARROW r = unary_formula
    {let o =           ( fun ?loc x y -> PT.fun_ty ?loc [x] y ) in
let _endpos = _endpos_r_ in
let _startpos = _startpos_l_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      o ?loc:(Some loc) l r
    )}

assoc_binary_formula:
  f = and_formula
    {                  ( f )}
| f = or_formula
    {                 ( f )}

assoc_binary_formula_aux_AND_:
  l = unary_formula _2 = AND r = separated_nonempty_list_AND_unary_formula_
    {    ( l :: r )}

assoc_binary_formula_aux_VLINE_:
  l = unary_formula _2 = VLINE r = separated_nonempty_list_VLINE_unary_formula_
    {    ( l :: r )}

and_formula:
  l = assoc_binary_formula_aux_AND_
    {                                             ( PT.and_ l )}

or_formula:
  l = assoc_binary_formula_aux_VLINE_
    {                                              ( PT.or_ l )}

atomic_formula:
  _1 = TRUE
    {         ( PT.true_ )}
| _1 = FALSE
    {          ( PT.false_ )}
| _1 = EXISTSCONST
    {                ( PT.builtin Builtin.ExistsConst )}
| _1 = FORALLCONST
    {                ( PT.builtin Builtin.ForallConst )}
| t = term
    {let _endpos = _endpos_t_ in
let _startpos = _startpos_t_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      PT.at_loc ~loc t
    )}

term:
  t = function_term
    {                    ( t )}
| t = variable
    {               ( t )}

function_term:
  t = plain_term
    {                 ( t )}
| t = defined_term
    {                   ( t )}
| t = system_term
    {                  ( t )}

plain_term:
  t = atomic_term
    {                  ( t )}
| f = functor_ _2 = LEFT_PAREN args = term_arguments _4 = RIGHT_PAREN
    {let _endpos = _endpos__4_ in
let _startpos = _startpos_f_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      PT.app ~loc f args
    )}

atomic_term:
  s = atomic_word
    {let _endpos = _endpos_s_ in
let _startpos = _startpos_s_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      PT.const ~loc s
    )}

term_arguments:
  l = separated_nonempty_list_COMMA_formula_
    {                                              ( l )}

functor_:
  f = atomic_word
    {                  ( PT.const f )}

defined_term:
  t = defined_atom
    {                   ( t )}
| t = defined_atomic_term
    {                          ( t )}

defined_atom:
  n = INTEGER
    {              ( PT.int_ (Z.of_string n) )}
| n = RATIONAL
    {               ( PT.rat (Q.of_string n) )}
| n = REAL
    {           ( PT.real n )}
| s = DISTINCT_OBJECT
    {let _endpos = _endpos_s_ in
let _startpos = _startpos_s_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      PT.const ~loc s
    )}

defined_atomic_term:
  t = defined_plain_term
    {                         ( t )}

defined_plain_term:
  s = defined_functor
    {                      ( s )}
| s = DOLLAR_WORD
    {let _endpos = _endpos_s_ in
let _startpos = _startpos_s_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      match Builtin.TPTP.of_string s with
      | None ->
          UntypedAST.errorf loc "unknown builtin `%s`" s
      | Some b -> PT.builtin ~loc b
    )}
| f = defined_functor _2 = LEFT_PAREN args = term_arguments _4 = RIGHT_PAREN
    {let _endpos = _endpos__4_ in
let _startpos = _startpos_f_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      PT.app ~loc f args
    )}
| s = DOLLAR_WORD _2 = LEFT_PAREN args = term_arguments _4 = RIGHT_PAREN
    {let _endpos = _endpos__4_ in
let _startpos = _startpos_s_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      match Builtin.TPTP.of_string s with
      | None ->
          UntypedAST.errorf loc "unknown builtin function `%s`" s
      | Some b -> PT.app_builtin ~loc b args
    )}

defined_functor:
  s = atomic_defined_word
    {                                       ( s )}

system_term:
  c = system_constant
    {                      ( c )}
| f = system_functor _2 = LEFT_PAREN args = term_arguments _4 = RIGHT_PAREN
    {let _endpos = _endpos__4_ in
let _startpos = _startpos_f_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      PT.app ~loc f args
    )}

system_constant:
  t = system_functor
    {                                  ( t )}

system_functor:
  s = atomic_system_word
    {                                     ( s )}

typed_var:
  v = UPPER_WORD _2 = COLUMN ty = tff_type
    {                                    ( PT.V v, Some ty )}
| v = UPPER_WORD
    {                 ( PT.V v, None )}

typed_vars:
  l = separated_nonempty_list_COMMA_typed_var_
    {                                                ( l )}

tff_quantified_type:
  ty = tff_toplevel_type
    {                         ( ty )}
| _1 = FORALL_TY _2 = LEFT_BRACKET vars = tff_ty_vars _4 = RIGHT_BRACKET _5 = COLUMN ty = tff_quantified_type
    {    ( PT.forall_ty vars ty )}

tff_toplevel_type:
  ty = tff_type
    {                ( ty  )}
| _1 = LEFT_PAREN args = tff_ty_star_list _3 = RIGHT_PAREN _4 = ARROW r = tff_app_type
    {    ( PT.fun_ty args r )}

tff_type:
  ty = tff_app_type
    {                    ( ty )}
| l = tff_app_type _2 = ARROW r = tff_type
    {    ( PT.fun_ty [l] r )}

tff_app_type:
  ty = tff_atomic_type
    {                       ( ty )}
| f = tff_app_type _2 = AT a = tff_atomic_type
    {                                        ( PT.app f [a] )}

tff_atomic_type:
  v = variable
    {               ( v )}
| w = defined_ty
    {                 ( w )}
| w = type_const
    {                 ( w )}
| w = type_const _2 = LEFT_PAREN l = separated_nonempty_list_COMMA_tff_type_ _4 = RIGHT_PAREN
    {    ( PT.app w l )}
| _1 = TYPE_TY
    {            ( PT.tType )}
| _1 = LEFT_PAREN ty = tff_toplevel_type _3 = RIGHT_PAREN
    {                                                ( ty )}

tff_ty_star_list:
  ty = tff_app_type _2 = STAR l = separated_nonempty_list_STAR_tff_app_type_
    {    ( ty :: l )}

tff_ty_vars:
  l = separated_nonempty_list_COMMA_tff_ty_var_
    {                                                 ( l )}

tff_ty_var:
  v = UPPER_WORD _2 = COLUMN _3 = TYPE_TY
    {                                ( PT.V v, Some PT.tType )}

type_const:
  _1 = WILDCARD
    {             ( PT.wildcard )}
| w = atomic_word
    {                  ( PT.const w )}

variable:
  x = UPPER_WORD
    {let _endpos = _endpos_x_ in
let _startpos = _startpos_x_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      PT.var ~loc x
    )}

atomic_word:
  s = SINGLE_QUOTED
    {                    ( remove_quotes s )}
| s = LOWER_WORD
    {                 ( s )}

atomic_defined_word:
  _1 = WILDCARD
    {             ( PT.wildcard )}

defined_ty:
  w = DOLLAR_WORD
    {let _endpos = _endpos_w_ in
let _startpos = _startpos_w_ in
    ( match w with
      | "$i" -> PT.term
      | "$o" -> PT.prop
      | "$tType" -> PT.tType
      | "$int" -> PT.ty_int
      | "$rat" -> PT.ty_rat
      | "$real" -> PT.ty_real
      | _ ->
          let loc = L.mk_pos _startpos _endpos in
          UntypedAST.errorf loc "expected defined_type, not `%s`" w
    )}

atomic_system_word:
  w = DOLLAR_DOLLAR_WORD
    {                         ( PT.const w )}

name_list:
  xs = loption_separated_nonempty_list_COMMA_name__
    {let l =     ( xs ) in
                                ( l )}

name:
  w = atomic_word
    {                  ( Ast_tptp.NameString w )}
| i = INTEGER
    {              ( Ast_tptp.NameInt (int_of_string i) )}

annotations:
  
    {    ( [] )}
| _1 = COMMA xs = loption_separated_nonempty_list_COMMA_general_term__
    {let l =     ( xs ) in
                                                ( l )}

general_term:
  g = general_data
    {                   ( g )}
| l = general_data _2 = COLUMN r = general_term
    {                                         ( Ast_tptp.GColumn (l, r) )}
| g = general_list
    {                   ( g )}

general_data:
  w = atomic_word
    {                  ( Ast_tptp.GString w )}
| g = general_function
    {                       ( g )}
| i = INTEGER
    {              ( Ast_tptp.GInt (int_of_string i) )}
| v = UPPER_WORD
    {                 ( Ast_tptp.GVar v )}
| w = DISTINCT_OBJECT
    {                      ( Ast_tptp.GString w )}

general_function:
  f = atomic_word _2 = LEFT_PAREN l = separated_nonempty_list_COMMA_general_term_ _4 = RIGHT_PAREN
    {    ( Ast_tptp.GNode (f, l) )}

general_list:
  _1 = LEFT_BRACKET xs = loption_separated_nonempty_list_COMMA_general_term__ _3 = RIGHT_BRACKET
    {let l =     ( xs ) in
    ( Ast_tptp.GList l )}

%%


