%{
  open Logtk

  module L = ParseLocation
  module A = UntypedAST
  module T = A.T

  let unquote s =
    assert (s <> "");
    assert (s.[0] = '\'' || s.[0] = '"');
    assert (s.[String.length s-1] = '\'' || s.[String.length s-1] = '"');
    let s = String.sub s 1 (String.length s-2) in
    CCString.flat_map
      (function
        | '\\' -> ""
        | c -> String.make 1 c)
      s
%}
%start parse_statement
%start parse_statement_list
%start parse_term
%start parse_ty
%token AND
%token ARITH_GEQ
%token ARITH_GT
%token ARITH_LEQ
%token ARITH_LT
%token ARITH_MINUS
%token ARITH_PLUS
%token ARITH_PRODUCT
%token ARROW
%token ASSERT
%token COLON
%token COMMA
%token DATA
%token DEF
%token DOT
%token ELSE
%token END
%token EOI
%token EQDEF
%token FUN
%token GOAL
%token IF
%token IN
%token INCLUDE
%token INT
%token <string> INTEGER
%token LEFT_BRACKET
%token LEFT_PAREN
%token LEMMA
%token LET
%token LOGIC_AND
%token LOGIC_EQ
%token LOGIC_EQUIV
%token LOGIC_EXISTS
%token LOGIC_FALSE
%token LOGIC_FORALL
%token LOGIC_IMPLY
%token LOGIC_NEQ
%token LOGIC_NOT
%token LOGIC_OR
%token LOGIC_TRUE
%token <string> LOWER_WORD
%token MATCH
%token PI
%token PROP
%token <string> QUOTED
%token REWRITE
%token RIGHT_BRACKET
%token RIGHT_PAREN
%token SEMI_COLON
%token <string> SINGLE_QUOTED
%token THEN
%token TYPE
%token <string> UPPER_WORD
%token VAL
%token VERTICAL_BAR
%token WHERE
%token WILDCARD
%token WITH
%type <Logtk.UntypedAST.statement> parse_statement
%type <Logtk.UntypedAST.statement list> parse_statement_list
%type <Logtk.UntypedAST.term> parse_term
%type <Logtk.UntypedAST.ty> parse_ty
%%

option_VERTICAL_BAR_:
  
    {    ( None )} [@name none_VERTICAL_BAR]
| x = VERTICAL_BAR
    {    ( Some x )} [@name some_VERTICAL_BAR]

loption_separated_nonempty_list_COMMA_attr__:
  
    {    ( [] )} [@name none_separated_nonempty_list_COMMA_attr_]
| x = separated_nonempty_list_COMMA_attr_
    {    ( x )} [@name some_separated_nonempty_list_COMMA_attr_]

list_constructor_arg_:
  
    {    ( [] )} [@name nil_constructor_arg]
| x = constructor_arg xs = list_constructor_arg_
    {    ( x :: xs )} [@name cons_constructor_arg]

list_raw_var_:
  
    {    ( [] )} [@name nil_raw_var]
| x = raw_var xs = list_raw_var_
    {    ( x :: xs )} [@name cons_raw_var]

list_statement_:
  
    {    ( [] )} [@name nil_statement]
| x = statement xs = list_statement_
    {    ( x :: xs )} [@name cons_statement]

list_var_or_wildcard_:
  
    {    ( [] )} [@name nil_var_or_wildcard]
| x = var_or_wildcard xs = list_var_or_wildcard_
    {    ( x :: xs )} [@name cons_var_or_wildcard]

nonempty_list_atomic_attr_:
  x = atomic_attr
    {    ( [ x ] )} [@name one_atomic_attr]
| x = atomic_attr xs = nonempty_list_atomic_attr_
    {    ( x :: xs )} [@name more_atomic_attr]

nonempty_list_atomic_term_:
  x = atomic_term
    {    ( [ x ] )} [@name one_atomic_term]
| x = atomic_term xs = nonempty_list_atomic_term_
    {    ( x :: xs )} [@name more_atomic_term]

nonempty_list_match_branch_:
  x = match_branch
    {    ( [ x ] )} [@name one_match_branch]
| x = match_branch xs = nonempty_list_match_branch_
    {    ( x :: xs )} [@name more_match_branch]

nonempty_list_raw_var_:
  x = raw_var
    {    ( [ x ] )} [@name one_raw_var]
| x = raw_var xs = nonempty_list_raw_var_
    {    ( x :: xs )} [@name more_raw_var]

separated_nonempty_list_AND_def_:
  x = def
    {    ( [ x ] )} [@name one_AND_def]
| x = def _2 = AND xs = separated_nonempty_list_AND_def_
    {    ( x :: xs )} [@name more_AND_def]

separated_nonempty_list_AND_type_def_:
  x = type_def
    {    ( [ x ] )} [@name one_AND_type_def]
| x = type_def _2 = AND xs = separated_nonempty_list_AND_type_def_
    {    ( x :: xs )} [@name more_AND_type_def]

separated_nonempty_list_COMMA_attr_:
  x = attr
    {    ( [ x ] )} [@name one_COMMA_attr]
| x = attr _2 = COMMA xs = separated_nonempty_list_COMMA_attr_
    {    ( x :: xs )} [@name more_COMMA_attr]

separated_nonempty_list_SEMI_COLON_term_:
  x = term
    {    ( [ x ] )} [@name one_SEMI_COLON_term]
| x = term _2 = SEMI_COLON xs = separated_nonempty_list_SEMI_COLON_term_
    {    ( x :: xs )} [@name more_SEMI_COLON_term]

separated_nonempty_list_VERTICAL_BAR_constructor_:
  x = constructor
    {    ( [ x ] )} [@name one_VERTICAL_BAR_constructor]
| x = constructor _2 = VERTICAL_BAR xs = separated_nonempty_list_VERTICAL_BAR_constructor_
    {    ( x :: xs )} [@name more_VERTICAL_BAR_constructor]

parse_statement:
  s = statement _2 = EOI
    {                                 (s)}

parse_term:
  t = term _2 = EOI
    {                       (t)}

parse_ty:
  t = term _2 = EOI
    {                     (t)}

parse_statement_list:
  l = list_statement_ _2 = EOI
    {                                            ( l )}

raw_var:
  w = LOWER_WORD
    {                 ( w )}
| w = UPPER_WORD
    {                 ( w )}
| w = SINGLE_QUOTED
    {                    ( unquote w )}

var_or_wildcard:
  v = raw_var
    {              ( T.V v )}
| _1 = WILDCARD
    {             ( T.Wildcard )}

typed_var_block:
  v = raw_var
    {              ( [T.V v, None] )}
| _1 = WILDCARD
    {             ( [T.Wildcard, None] )}
| _1 = LEFT_PAREN v = nonempty_list_raw_var_ _3 = COLON t = term _5 = RIGHT_PAREN
    {    ( List.map (fun v -> T.V v, Some t) v )}

typed_var_list:
  l = typed_var_block
    {                      ( l )}
| l = typed_var_block l2 = typed_var_list
    {                                        ( l @ l2 )}

typed_ty_var_block:
  v = raw_var
    {              ( [T.V v, None] )}
| v = raw_var _2 = COLON _3 = TYPE
    {                         ( [T.V v, Some T.tType] )}
| _1 = LEFT_PAREN v = nonempty_list_raw_var_ _3 = COLON _4 = TYPE _5 = RIGHT_PAREN
    {                                                 ( List.map (fun v -> T.V v, Some T.tType) v )}

typed_ty_var_list:
  l = typed_ty_var_block
    {                         ( l )}
| l = typed_ty_var_block l2 = typed_ty_var_list
    {                                              ( l @ l2 )}

mandatory_typed_var_block:
  _1 = LEFT_PAREN v = nonempty_list_raw_var_ _3 = COLON t = term _5 = RIGHT_PAREN
    {    ( List.map (fun v -> v, t) v )}

mandatory_typed_var_list:
  l = mandatory_typed_var_block
    {                                ( l )}
| l = mandatory_typed_var_block l2 = mandatory_typed_var_list
    {                                                            ( l @ l2 )}

var:
  _1 = WILDCARD
    {             ( T.wildcard )}
| v = raw_var
    {let _endpos = _endpos_v_ in
let _startpos = _startpos_v_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      T.var ~loc v
    )}

const:
  _1 = TYPE
    {         ( T.tType )}
| _1 = PROP
    {         ( T.prop )}
| _1 = INT
    {        ( T.ty_int )}
| _1 = LOGIC_TRUE
    {               ( T.true_ )}
| _1 = LOGIC_FALSE
    {                ( T.false_ )}

match_branch:
  _1 = VERTICAL_BAR c = raw_var vars = list_var_or_wildcard_ _4 = ARROW rhs = term
    {    ( T.Match_case (c,vars,rhs) )}

atomic_term:
  v = var
    {          ( v )}
| t = const
    {            ( t )}
| i = INTEGER
    {              ( T.int_ (Z.of_string i) )}
| _1 = LEFT_PAREN t = term _3 = RIGHT_PAREN
    {                                  ( t )}
| _1 = MATCH t = term _3 = WITH l = nonempty_list_match_branch_ _5 = END
    {let _endpos = _endpos__5_ in
let _startpos = _startpos__1_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      T.match_ ~loc t l
    )}

apply_term:
  t = atomic_term
    {                  ( t )}
| t = atomic_term u = nonempty_list_atomic_term_
    {let _endpos = _endpos_u_ in
let _startpos = _startpos_t_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      T.app ~loc t u
    )}
| _1 = ARITH_MINUS t = apply_term
    {let _endpos = _endpos_t_ in
let _startpos = _startpos__1_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      T.app_builtin ~loc Builtin.Uminus [t]
    )}

mult_term:
  t = apply_term
    {                 ( t )}
| a = apply_term _2 = ARITH_PRODUCT b = mult_term
    {let _endpos = _endpos_b_ in
let _startpos = _startpos_a_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      T.app_builtin ~loc Builtin.Product [a;b]
    )}

plus_term:
  t = mult_term
    {                ( t )}
| a = mult_term _1 = ARITH_PLUS b = plus_term
    {let o =                ( Builtin.Sum ) in
let _endpos = _endpos_b_ in
let _startpos = _startpos_a_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      T.app_builtin ~loc o [a;b]
    )}
| a = mult_term _1 = ARITH_MINUS b = plus_term
    {let o =                 ( Builtin.Difference ) in
let _endpos = _endpos_b_ in
let _startpos = _startpos_a_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      T.app_builtin ~loc o [a;b]
    )}

arith_op_term:
  t = plus_term
    {                ( t )}
| a = plus_term _1 = ARITH_LT b = plus_term
    {let o =              ( Builtin.Less ) in
let _endpos = _endpos_b_ in
let _startpos = _startpos_a_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      T.app_builtin ~loc o [a;b]
    )}
| a = plus_term _1 = ARITH_LEQ b = plus_term
    {let o =               ( Builtin.Lesseq ) in
let _endpos = _endpos_b_ in
let _startpos = _startpos_a_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      T.app_builtin ~loc o [a;b]
    )}
| a = plus_term _1 = ARITH_GT b = plus_term
    {let o =              ( Builtin.Greater ) in
let _endpos = _endpos_b_ in
let _startpos = _startpos_a_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      T.app_builtin ~loc o [a;b]
    )}
| a = plus_term _1 = ARITH_GEQ b = plus_term
    {let o =               ( Builtin.Greatereq ) in
let _endpos = _endpos_b_ in
let _startpos = _startpos_a_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      T.app_builtin ~loc o [a;b]
    )}

not_term:
  t = arith_op_term
    {                    ( t )}
| _1 = LOGIC_NOT t = arith_op_term
    {let _endpos = _endpos_t_ in
let _startpos = _startpos__1_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      T.not_ ~loc t
    )}

eq_term:
  t = not_term
    {               ( t )}
| t = not_term _2 = LOGIC_EQ u = not_term
    {let _endpos = _endpos_u_ in
let _startpos = _startpos_t_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      T.eq ~loc t u
    )}
| t = not_term _2 = LOGIC_NEQ u = not_term
    {let _endpos = _endpos_u_ in
let _startpos = _startpos_t_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      T.neq ~loc t u
    )}

and_term:
  t = eq_term
    {              ( t )}
| t = eq_term _2 = LOGIC_AND u = and_term
    {let _endpos = _endpos_u_ in
let _startpos = _startpos_t_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      T.and_ ~loc [t; u]
    )}

or_term:
  t = and_term
    {               ( t )}
| t = and_term _2 = LOGIC_OR u = or_term
    {let _endpos = _endpos_u_ in
let _startpos = _startpos_t_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      T.or_ ~loc [t; u]
    )}
| t = and_term _2 = LOGIC_IMPLY u = or_term
    {let _endpos = _endpos_u_ in
let _startpos = _startpos_t_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      T.imply ~loc t u
    )}
| t = and_term _2 = LOGIC_EQUIV u = or_term
    {let _endpos = _endpos_u_ in
let _startpos = _startpos_t_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      T.equiv ~loc t u
    )}

term:
  t = or_term
    {              ( t )}
| _1 = LOGIC_FORALL vars = typed_var_list _3 = DOT t = term
    {let _endpos = _endpos_t_ in
let _startpos = _startpos__1_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      T.forall ~loc vars t
    )}
| _1 = LOGIC_EXISTS vars = typed_var_list _3 = DOT t = term
    {let _endpos = _endpos_t_ in
let _startpos = _startpos__1_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      T.exists ~loc vars t
    )}
| _1 = FUN vars = typed_var_list _3 = DOT t = term
    {let _endpos = _endpos_t_ in
let _startpos = _startpos__1_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      T.lambda ~loc vars t
    )}
| t = apply_term _2 = ARROW u = term
    {let _endpos = _endpos_u_ in
let _startpos = _startpos_t_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      T.fun_ty ~loc [t] u
    )}
| _1 = PI vars = typed_ty_var_list _3 = DOT t = term
    {let _endpos = _endpos_t_ in
let _startpos = _startpos__1_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      T.forall_ty ~loc vars t
    )}
| _1 = IF a = term _3 = THEN b = term _5 = ELSE c = term
    {let _endpos = _endpos_c_ in
let _startpos = _startpos__1_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      T.ite ~loc a b c
    )}
| _1 = LET x = raw_var _3 = EQDEF t = term _5 = IN u = term
    {let _endpos = _endpos_u_ in
let _startpos = _startpos__1_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      T.let_ ~loc [T.V x,t] u
    )}
| _1 = error
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      UntypedAST.error loc "expected term"
    )}

constructor_arg:
  ty = atomic_term
    {                   ( None, ty )}
| _1 = LEFT_PAREN id = raw_var _3 = COLON ty = atomic_term _5 = RIGHT_PAREN
    {                                                           ( Some id, ty )}

constructor:
  v = raw_var l = list_constructor_arg_
    {                                 ( v, l )}

constructors:
  _1 = option_VERTICAL_BAR_ l = separated_nonempty_list_VERTICAL_BAR_constructor_
    {                                                                       ( l )}

type_def:
  t = raw_var vars = list_raw_var_ _3 = EQDEF l = constructors
    {    (
      {A. data_name=t; data_vars=vars; data_cstors=l; }
    )}

mutual_types:
  l = separated_nonempty_list_AND_type_def_
    {                                             ( l )}

attr:
  a = atomic_attr
    {                  ( a )}
| s = raw_var l = nonempty_list_atomic_attr_
    {                             ( A.A_app (s, l) )}
| _1 = error
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
          (
      let loc = L.mk_pos _startpos _endpos in
      UntypedAST.error loc "expected attribute"
    )}

atomic_attr:
  s = raw_var
    {              ( A.A_app (s, []) )}
| s = QUOTED
    {             ( A.A_quoted (unquote s) )}
| _1 = LEFT_PAREN a = attr _3 = RIGHT_PAREN
    {                                  ( a )}
| _1 = LEFT_BRACKET xs = loption_separated_nonempty_list_COMMA_attr__ _3 = RIGHT_BRACKET
    {let l =     ( xs ) in
                                                             ( A.A_list l )}

attrs:
  _1 = LEFT_BRACKET l = separated_nonempty_list_COMMA_attr_ _3 = RIGHT_BRACKET
    {    ( l )}
| 
    {    ( [] )}

def:
  v = raw_var _2 = COLON ty = term _4 = EQDEF t = term
    {   ( A.mk_def v ty [T.eq (T.var v) t] )}
| v = raw_var _2 = COLON ty = term _4 = WHERE rules = separated_nonempty_list_SEMI_COLON_term_
    {   ( A.mk_def v ty rules )}
| v = raw_var l = mandatory_typed_var_list _3 = COLON ty_ret = term _5 = EQDEF rhs = term
    {   (
      let ty_args = List.map snd l in
      let args = List.map (fun (v,_) -> T.var v) l in
      A.mk_def v (T.fun_ty ty_args ty_ret)
        [T.forall
          (List.map (fun (v,ty) -> T.V v, Some ty) l)
          (T.eq (T.app (T.var v) args) rhs)]
   )}

statement:
  _1 = INCLUDE s = QUOTED _3 = DOT
    {let _endpos = _endpos__3_ in
let _startpos = _startpos__1_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      let s = unquote s in
      A.include_ ~attrs:[] ~loc s
    )}
| _1 = VAL a = attrs v = raw_var _4 = COLON t = term _6 = DOT
    {let _endpos = _endpos__6_ in
let _startpos = _startpos__1_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      A.decl ~attrs:a ~loc v t
    )}
| _1 = DEF a = attrs l = separated_nonempty_list_AND_def_ _4 = DOT
    {let _endpos = _endpos__4_ in
let _startpos = _startpos__1_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      A.def ~attrs:a ~loc l
    )}
| _1 = REWRITE a = attrs t = term _4 = DOT
    {let _endpos = _endpos__4_ in
let _startpos = _startpos__1_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      A.rewrite ~attrs:a ~loc t
    )}
| _1 = ASSERT a = attrs t = term _4 = DOT
    {let _endpos = _endpos__4_ in
let _startpos = _startpos__1_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      A.assert_ ~attrs:a ~loc t
    )}
| _1 = LEMMA a = attrs t = term _4 = DOT
    {let _endpos = _endpos__4_ in
let _startpos = _startpos__1_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      A.lemma ~attrs:a ~loc t
    )}
| _1 = GOAL a = attrs t = term _4 = DOT
    {let _endpos = _endpos__4_ in
let _startpos = _startpos__1_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      A.goal ~attrs:a ~loc t
    )}
| _1 = DATA a = attrs l = mutual_types _4 = DOT
    {let _endpos = _endpos__4_ in
let _startpos = _startpos__1_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      A.data ~attrs:a ~loc l
    )}
| _1 = error
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      UntypedAST.error loc "expected statement"
    )}

%%


