Grammar has 38 nonterminal symbols, among which 4 start symbols.
Grammar has 36 terminal symbols.
Grammar has 96 productions.
nullable(var) = false
nullable(tyvar) = false
nullable(typed_var) = false
nullable(ty_arrow_args) = false
nullable(ty) = false
nullable(term) = false
nullable(stmt) = false
nullable(parse_ty) = false
nullable(parse_term) = false
nullable(parse_list) = false
nullable(parse) = false
nullable(nonempty_list(var)) = false
nullable(nonempty_list(tyvar)) = false
nullable(nonempty_list(typed_var)) = false
nullable(nonempty_list(ty)) = false
nullable(nonempty_list(term)) = false
nullable(nonempty_list(funs_rec_decl)) = false
nullable(nonempty_list(data)) = false
nullable(nonempty_list(cstor_arg)) = false
nullable(nonempty_list(cstor)) = false
nullable(nonempty_list(case)) = false
nullable(nonempty_list(binding)) = false
nullable(list(tyvar)) = true
nullable(list(typed_var)) = true
nullable(list(ty)) = true
nullable(list(stmt)) = true
nullable(funs_rec_decl) = false
nullable(fun_rec) = false
nullable(fun_def_mono) = false
nullable(fun_decl_mono) = false
nullable(fun_decl) = false
nullable(data) = false
nullable(cstor_arg) = false
nullable(cstor) = false
nullable(composite_term) = false
nullable(case) = false
nullable(binding) = false
nullable(assert_not) = false
first(var) = IDENT
first(tyvar) = IDENT
first(typed_var) = LEFT_PAREN
first(ty_arrow_args) = LEFT_PAREN IDENT BOOL
first(ty) = LEFT_PAREN IDENT BOOL
first(term) = error TRUE QUOTED LEFT_PAREN IDENT FALSE
first(stmt) = error LEFT_PAREN
first(parse_ty) = LEFT_PAREN IDENT BOOL
first(parse_term) = error TRUE QUOTED LEFT_PAREN IDENT FALSE
first(parse_list) = error LEFT_PAREN EOI
first(parse) = error LEFT_PAREN
first(nonempty_list(var)) = IDENT
first(nonempty_list(tyvar)) = IDENT
first(nonempty_list(typed_var)) = LEFT_PAREN
first(nonempty_list(ty)) = LEFT_PAREN IDENT BOOL
first(nonempty_list(term)) = error TRUE QUOTED LEFT_PAREN IDENT FALSE
first(nonempty_list(funs_rec_decl)) = LEFT_PAREN
first(nonempty_list(data)) = LEFT_PAREN
first(nonempty_list(cstor_arg)) = LEFT_PAREN
first(nonempty_list(cstor)) = LEFT_PAREN
first(nonempty_list(case)) = LEFT_PAREN
first(nonempty_list(binding)) = LEFT_PAREN
first(list(tyvar)) = IDENT
first(list(typed_var)) = LEFT_PAREN
first(list(ty)) = LEFT_PAREN IDENT BOOL
first(list(stmt)) = error LEFT_PAREN
first(funs_rec_decl) = LEFT_PAREN
first(fun_rec) = LEFT_PAREN IDENT
first(fun_def_mono) = IDENT
first(fun_decl_mono) = IDENT
first(fun_decl) = LEFT_PAREN IDENT
first(data) = LEFT_PAREN
first(cstor_arg) = LEFT_PAREN
first(cstor) = LEFT_PAREN
first(composite_term) = LEFT_PAREN
first(case) = LEFT_PAREN
first(binding) = LEFT_PAREN
first(assert_not) = error TRUE QUOTED LEFT_PAREN IDENT FALSE
minimal(var) = (* 1 *) IDENT
minimal(tyvar) = (* 1 *) IDENT
minimal(typed_var) = (* 4 *) LEFT_PAREN IDENT BOOL RIGHT_PAREN
minimal(ty_arrow_args) = (* 2 *) BOOL BOOL
minimal(ty) = (* 1 *) BOOL
minimal(term) = (* 1 *) TRUE
minimal(stmt) = (* 1 *) error
minimal(parse_ty) = (* 2 *) BOOL EOI
minimal(parse_term) = (* 2 *) TRUE EOI
minimal(parse_list) = (* 1 *) EOI
minimal(parse) = (* 2 *) error EOI
minimal(nonempty_list(var)) = (* 1 *) IDENT
minimal(nonempty_list(tyvar)) = (* 1 *) IDENT
minimal(nonempty_list(typed_var)) = (* 4 *) LEFT_PAREN IDENT BOOL RIGHT_PAREN
minimal(nonempty_list(ty)) = (* 1 *) BOOL
minimal(nonempty_list(term)) = (* 1 *) TRUE
minimal(nonempty_list(funs_rec_decl)) = (* 6 *) LEFT_PAREN IDENT LEFT_PAREN RIGHT_PAREN BOOL RIGHT_PAREN
minimal(nonempty_list(data)) = (* 6 *) LEFT_PAREN IDENT LEFT_PAREN IDENT RIGHT_PAREN RIGHT_PAREN
minimal(nonempty_list(cstor_arg)) = (* 4 *) LEFT_PAREN IDENT BOOL RIGHT_PAREN
minimal(nonempty_list(cstor)) = (* 3 *) LEFT_PAREN IDENT RIGHT_PAREN
minimal(nonempty_list(case)) = (* 5 *) LEFT_PAREN CASE IDENT TRUE RIGHT_PAREN
minimal(nonempty_list(binding)) = (* 4 *) LEFT_PAREN IDENT TRUE RIGHT_PAREN
minimal(list(tyvar)) = (* 0 *)
minimal(list(typed_var)) = (* 0 *)
minimal(list(ty)) = (* 0 *)
minimal(list(stmt)) = (* 0 *)
minimal(funs_rec_decl) = (* 6 *) LEFT_PAREN IDENT LEFT_PAREN RIGHT_PAREN BOOL RIGHT_PAREN
minimal(fun_rec) = (* 5 *) IDENT LEFT_PAREN RIGHT_PAREN BOOL TRUE
minimal(fun_def_mono) = (* 4 *) IDENT LEFT_PAREN RIGHT_PAREN BOOL
minimal(fun_decl_mono) = (* 4 *) IDENT LEFT_PAREN RIGHT_PAREN BOOL
minimal(fun_decl) = (* 4 *) IDENT LEFT_PAREN RIGHT_PAREN BOOL
minimal(data) = (* 6 *) LEFT_PAREN IDENT LEFT_PAREN IDENT RIGHT_PAREN RIGHT_PAREN
minimal(cstor_arg) = (* 4 *) LEFT_PAREN IDENT BOOL RIGHT_PAREN
minimal(cstor) = (* 3 *) LEFT_PAREN IDENT RIGHT_PAREN
minimal(composite_term) = (* 3 *) LEFT_PAREN TRUE RIGHT_PAREN
minimal(case) = (* 5 *) LEFT_PAREN CASE IDENT TRUE RIGHT_PAREN
minimal(binding) = (* 4 *) LEFT_PAREN IDENT TRUE RIGHT_PAREN
minimal(assert_not) = (* 1 *) TRUE
follow(var) = error TRUE RIGHT_PAREN QUOTED LEFT_PAREN IDENT FALSE
follow(tyvar) = RIGHT_PAREN IDENT
follow(typed_var) = RIGHT_PAREN LEFT_PAREN
follow(ty_arrow_args) = RIGHT_PAREN
follow(ty) = error TRUE RIGHT_PAREN QUOTED LEFT_PAREN IDENT FALSE EOI BOOL
follow(term) = error TRUE RIGHT_PAREN QUOTED LEFT_PAREN IDENT FALSE EOI BOOL
follow(stmt) = error LEFT_PAREN EOI
follow(parse_ty) = #
follow(parse_term) = #
follow(parse_list) = #
follow(parse) = #
follow(nonempty_list(var)) = RIGHT_PAREN
follow(nonempty_list(tyvar)) = RIGHT_PAREN
follow(nonempty_list(typed_var)) = RIGHT_PAREN
follow(nonempty_list(ty)) = RIGHT_PAREN
follow(nonempty_list(term)) = RIGHT_PAREN
follow(nonempty_list(funs_rec_decl)) = RIGHT_PAREN
follow(nonempty_list(data)) = RIGHT_PAREN
follow(nonempty_list(cstor_arg)) = RIGHT_PAREN
follow(nonempty_list(cstor)) = RIGHT_PAREN
follow(nonempty_list(case)) = RIGHT_PAREN
follow(nonempty_list(binding)) = RIGHT_PAREN
follow(list(tyvar)) = RIGHT_PAREN
follow(list(typed_var)) = RIGHT_PAREN
follow(list(ty)) = RIGHT_PAREN
follow(list(stmt)) = EOI
follow(funs_rec_decl) = RIGHT_PAREN LEFT_PAREN
follow(fun_rec) = RIGHT_PAREN
follow(fun_def_mono) = error TRUE RIGHT_PAREN QUOTED LEFT_PAREN IDENT FALSE
follow(fun_decl_mono) = RIGHT_PAREN
follow(fun_decl) = RIGHT_PAREN
follow(data) = RIGHT_PAREN LEFT_PAREN
follow(cstor_arg) = RIGHT_PAREN LEFT_PAREN
follow(cstor) = RIGHT_PAREN LEFT_PAREN
follow(composite_term) = error TRUE RIGHT_PAREN QUOTED LEFT_PAREN IDENT FALSE EOI BOOL
follow(case) = RIGHT_PAREN LEFT_PAREN
follow(binding) = RIGHT_PAREN LEFT_PAREN
follow(assert_not) = RIGHT_PAREN
Built an LR(0) automaton with 268 states.
The grammar is not SLR(1) -- 2 states have a conflict.
The construction mode is pager.
Built an LR(1) automaton with 405 states.
125 out of 405 states have a default reduction.
131 out of 405 states are represented.
2 out of 80 symbols keep track of their start position.
2 out of 80 symbols keep track of their end position.
61 out of 100 productions exploit shiftreduce optimization.
67 out of 405 states can peek at an error.
956 functions before inlining, 166 functions after inlining.
