File "zyvaall.mly", line 10, characters 61-71:
Warning: the token EQUALEQUAL is unused.
File "zyvaall.mly", line 7, characters 16-22:
Warning: the token STRING is unused.
File "zyvaall.mly", line 16, characters 32-36:
Warning: the token TYPE is unused.
%{
open Pp
%}
%start main
%token ALLOC
%token ARRAY
%token BEGIN
%token <bool> BOOL
%token BOOLEAN
%token COLON
%token COLONEQUAL
%token COMMA
%token DIV
%token DO
%token DOT
%token ELSE
%token END
%token EQUAL
%token EQUALEQUAL
%token FUNCTION
%token GREATER
%token GREATEREQUAL
%token <string> IDENT
%token IF
%token <int> INT
%token INTEGER
%token LBRACKET
%token LESS
%token LESSEQUAL
%token LESSGREATER
%token LPAREN
%token MINUS
%token OF
%token PLUS
%token PROCEDURE
%token PROGRAM
%token RBRACKET
%token READ
%token RPAREN
%token SEMI
%token SEMISEMI
%token <string> STRING
%token THEN
%token TIMES
%token TYPE
%token VAR
%token WHILE
%token WRITE
%token WRITELN
%left EQUAL EQUALEQUAL GREATER GREATEREQUAL LESS LESSEQUAL LESSGREATER
%left MINUS PLUS
%left DIV TIMES
%nonassoc UMINUS
%type <Pp.program> main
%%

main:
  _1 = PROGRAM _2 = vars _3 = definitions _4 = body _5 = endtok
    {    ( {global_vars = _2; definitions = _3; main = _4 } )}

endtok:
  _1 = SEMISEMI
    {           (())}
| _1 = DOT
    {           (())}

vars:
  _1 = VAR _2 = args2
    {                              ( _2 )}
| 
    {                              ( [] )}

args2:
  _1 = declvar _2 = SEMI _3 = args2
    {                     ( _1 @ _3 )}
| 
    {                     ( [] )}

idents:
  _1 = IDENT _2 = COMMA _3 = idents
    {                     (_1 :: _3 )}
| _1 = IDENT
    {                     ( [ _1 ] )}

declvar:
  _1 = idents _2 = COLON _3 = type_expr
    {                                   ( List.map (fun x -> x, _3) _1 )}

definitions:
  _1 = fonction _2 = SEMI _3 = definitions
    {                                      ( _1 :: _3 )}
| 
    {                                      ( [] )}

fonction:
  _1 = FUNCTION _2 = IDENT _3 = LPAREN _4 = args _5 = RPAREN _6 = COLON _7 = type_expr _8 = SEMI _9 = vars _10 = body
    {    ( _2, { arguments = _4; result = Some _7; local_vars = _9; body = _10 } )}
| _1 = PROCEDURE _2 = IDENT _3 = LPAREN _4 = args _5 = RPAREN _6 = SEMI _7 = vars _8 = body
    {    ( _2, { arguments = _4; result = None; local_vars = _7; body = _8 } )}

args:
  _1 = declvar _2 = args1
    {                                      ( _1 @ _2 )}
| 
    {                                      ( [] )}

args1:
  _1 = SEMI _2 = declvar _3 = args1
    {                                      ( _2 @ _3 )}
| 
    {                                      ( [] )}

instruction:
  _1 = IDENT _2 = COLONEQUAL _3 = expression
    {                                      ( Set (_1, _3) )}
| _1 = BEGIN _2 = bloc _3 = END
    {                                      ( Sequence _2 )}
| _1 = IF _2 = expression _3 = THEN _4 = instruction _5 = ELSE _6 = instruction
    {                                      ( If (_2, _4, _6) )}
| _1 = WHILE _2 = expression _3 = DO _4 = instruction
    {                                      ( While (_2, _4) )}
| _1 = IDENT _2 = LPAREN _3 = arguments _4 = RPAREN
    {                                      ( Procedure_call (_1, _3) )}
| _1 = READ _2 = LPAREN _3 = IDENT _4 = RPAREN
    {                                      ( Read_int (_3) )}
| _1 = WRITE _2 = LPAREN _3 = expression _4 = RPAREN
    {                                      ( Write_int (_3) )}
| _1 = WRITELN _2 = LPAREN _3 = expression _4 = RPAREN
    {                                      ( Writeln_int (_3) )}
| _1 = array_expression _2 = LBRACKET _3 = expression _4 = RBRACKET _5 = COLONEQUAL _6 = expression
    {                                      ( Seti (_1, _3, _6) )}

body:
  _1 = BEGIN _2 = bloc _3 = END
    {                                      ( _2 )}

bloc:
  _1 = instruction _2 = bloc1
    {                                      ( _1 :: _2 )}
| 
    {                                      ( [] )}

bloc1:
  _1 = SEMI _2 = instruction _3 = bloc1
    {                                      ( _2 :: _3 )}
| 
    {                                      ( [] )}

arguments:
  _1 = expression _2 = arguments1
    {                                      ( _1 :: _2 )}
| 
    {                                      ( [] )}

arguments1:
  _1 = COMMA _2 = expression _3 = arguments1
    {                                      ( _2 :: _3 )}
| 
    {                                      ( [] )}

expression:
  _1 = LPAREN _2 = expression _3 = RPAREN
    {                                      ( _2 )}
| _1 = INT
    {                                      ( Int _1 )}
| _1 = MINUS _2 = expression %prec UMINUS
    {                                      ( Bin (Minus, Int 0, _2) )}
| _1 = BOOL
    {                                      ( Bool _1 )}
| _1 = IDENT
    {                                      ( Get _1 )}
| _1 = call_expression
    {                                      ( _1 )}
| _1 = array_expression _2 = LBRACKET _3 = expression _4 = RBRACKET
    {                                      ( Geti (_1, _3) )}
| _1 = expression _2 = PLUS _3 = expression
    {                                      ( Bin (Plus, _1, _3) )}
| _1 = expression _2 = MINUS _3 = expression
    {                                      ( Bin (Minus, _1, _3) )}
| _1 = expression _2 = TIMES _3 = expression
    {                                      ( Bin (Times, _1, _3) )}
| _1 = expression _2 = DIV _3 = expression
    {                                      ( Bin (Div, _1, _3) )}
| _1 = expression _2 = LESS _3 = expression
    {                                      ( Bin (Lt, _1, _3) )}
| _1 = expression _2 = LESSEQUAL _3 = expression
    {                                      ( Bin (Le, _1, _3) )}
| _1 = expression _2 = GREATER _3 = expression
    {                                      ( Bin (Gt, _1, _3) )}
| _1 = expression _2 = GREATEREQUAL _3 = expression
    {                                      ( Bin (Ge, _1, _3) )}
| _1 = expression _2 = EQUAL _3 = expression
    {                                      ( Bin (Eq, _1, _3) )}
| _1 = expression _2 = LESSGREATER _3 = expression
    {                                      ( Bin (Ne, _1, _3) )}

array_expression:
  _1 = IDENT
    {        ( Get _1 )}
| _1 = array_expression _2 = LBRACKET _3 = expression _4 = RBRACKET
    {                                                ( Geti (_1, _3) )}
| _1 = call_expression
    {                  ( _1 )}
| _1 = LPAREN _2 = expression _3 = RPAREN
    {                           ( _2 )}

call_expression:
  _1 = IDENT _2 = LPAREN _3 = arguments _4 = RPAREN
    {                                      ( Function_call (_1, _3) )}
| _1 = ALLOC _2 = LPAREN _3 = expression _4 = COLON _5 = type_expr _6 = RPAREN
    {                                      ( Alloc (_3,_5) )}

type_expr:
  _1 = INTEGER
    {                                       ( Integer )}
| _1 = BOOLEAN
    {                                       ( Boolean )}
| _1 = ARRAY _2 = OF _3 = type_expr
    {                                       ( Array (_3) )}

%%
