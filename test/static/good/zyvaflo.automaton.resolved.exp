State 0:
## Known stack suffix:
##
## LR(1) items:
main' -> . main [ # ]
## Transitions:
-- On PROGRAM shift to state 1
-- On main shift to state 148
## Reductions:

State 1:
## Known stack suffix:
## PROGRAM
## LR(1) items:
main -> PROGRAM . vars definitions body endtok [ # ]
## Transitions:
-- On VAR shift to state 2
-- On vars shift to state 19
## Reductions:
-- On PROCEDURE FUNCTION BEGIN
--   reduce production vars ->

State 2:
## Known stack suffix:
## VAR
## LR(1) items:
vars -> VAR . args2 [ PROCEDURE FUNCTION BEGIN ]
## Transitions:
-- On IDENT shift to state 3
-- On idents shift to state 6
-- On declvar shift to state 15
-- On args2 shift to state 18
## Reductions:
-- On PROCEDURE FUNCTION BEGIN
--   reduce production args2 ->

State 3:
## Known stack suffix:
## IDENT
## LR(1) items:
idents -> IDENT . COMMA idents [ COLON ]
idents -> IDENT . [ COLON ]
## Transitions:
-- On COMMA shift to state 4
## Reductions:
-- On COLON
--   reduce production idents -> IDENT

State 4:
## Known stack suffix:
## IDENT COMMA
## LR(1) items:
idents -> IDENT COMMA . idents [ COLON ]
## Transitions:
-- On IDENT shift to state 3
-- On idents shift to state 5
## Reductions:

State 5:
## Known stack suffix:
## IDENT COMMA idents
## LR(1) items:
idents -> IDENT COMMA idents . [ COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production idents -> IDENT COMMA idents

State 6:
## Known stack suffix:
## idents
## LR(1) items:
declvar -> idents . COLON type_expr [ SEMI RPAREN ]
## Transitions:
-- On COLON shift to state 7
## Reductions:

State 7:
## Known stack suffix:
## idents COLON
## LR(1) items:
declvar -> idents COLON . type_expr [ SEMI RPAREN ]
## Transitions:
-- On REAL shift to state 8
-- On INTEGER shift to state 9
-- On BOOLEAN shift to state 10
-- On ARRAY shift to state 11
-- On type_expr shift to state 14
## Reductions:

State 8:
## Known stack suffix:
## REAL
## LR(1) items:
type_expr -> REAL . [ SEMI RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_expr -> REAL

State 9:
## Known stack suffix:
## INTEGER
## LR(1) items:
type_expr -> INTEGER . [ SEMI RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_expr -> INTEGER

State 10:
## Known stack suffix:
## BOOLEAN
## LR(1) items:
type_expr -> BOOLEAN . [ SEMI RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_expr -> BOOLEAN

State 11:
## Known stack suffix:
## ARRAY
## LR(1) items:
type_expr -> ARRAY . OF type_expr [ SEMI RPAREN ]
## Transitions:
-- On OF shift to state 12
## Reductions:

State 12:
## Known stack suffix:
## ARRAY OF
## LR(1) items:
type_expr -> ARRAY OF . type_expr [ SEMI RPAREN ]
## Transitions:
-- On REAL shift to state 8
-- On INTEGER shift to state 9
-- On BOOLEAN shift to state 10
-- On ARRAY shift to state 11
-- On type_expr shift to state 13
## Reductions:

State 13:
## Known stack suffix:
## ARRAY OF type_expr
## LR(1) items:
type_expr -> ARRAY OF type_expr . [ SEMI RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_expr -> ARRAY OF type_expr

State 14:
## Known stack suffix:
## idents COLON type_expr
## LR(1) items:
declvar -> idents COLON type_expr . [ SEMI RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production declvar -> idents COLON type_expr

State 15:
## Known stack suffix:
## declvar
## LR(1) items:
args2 -> declvar . SEMI args2 [ PROCEDURE FUNCTION BEGIN ]
## Transitions:
-- On SEMI shift to state 16
## Reductions:

State 16:
## Known stack suffix:
## declvar SEMI
## LR(1) items:
args2 -> declvar SEMI . args2 [ PROCEDURE FUNCTION BEGIN ]
## Transitions:
-- On IDENT shift to state 3
-- On idents shift to state 6
-- On declvar shift to state 15
-- On args2 shift to state 17
## Reductions:
-- On PROCEDURE FUNCTION BEGIN
--   reduce production args2 ->

State 17:
## Known stack suffix:
## declvar SEMI args2
## LR(1) items:
args2 -> declvar SEMI args2 . [ PROCEDURE FUNCTION BEGIN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production args2 -> declvar SEMI args2

State 18:
## Known stack suffix:
## VAR args2
## LR(1) items:
vars -> VAR args2 . [ PROCEDURE FUNCTION BEGIN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production vars -> VAR args2

State 19:
## Known stack suffix:
## PROGRAM vars
## LR(1) items:
main -> PROGRAM vars . definitions body endtok [ # ]
## Transitions:
-- On PROCEDURE shift to state 20
-- On FUNCTION shift to state 130
-- On fonction shift to state 140
-- On definitions shift to state 143
## Reductions:
-- On BEGIN
--   reduce production definitions ->

State 20:
## Known stack suffix:
## PROCEDURE
## LR(1) items:
fonction -> PROCEDURE . IDENT LPAREN args RPAREN SEMI vars body [ SEMI ]
## Transitions:
-- On IDENT shift to state 21
## Reductions:

State 21:
## Known stack suffix:
## PROCEDURE IDENT
## LR(1) items:
fonction -> PROCEDURE IDENT . LPAREN args RPAREN SEMI vars body [ SEMI ]
## Transitions:
-- On LPAREN shift to state 22
## Reductions:

State 22:
## Known stack suffix:
## PROCEDURE IDENT LPAREN
## LR(1) items:
fonction -> PROCEDURE IDENT LPAREN . args RPAREN SEMI vars body [ SEMI ]
## Transitions:
-- On IDENT shift to state 3
-- On idents shift to state 6
-- On declvar shift to state 23
-- On args shift to state 28
## Reductions:
-- On RPAREN
--   reduce production args ->

State 23:
## Known stack suffix:
## declvar
## LR(1) items:
args -> declvar . args1 [ RPAREN ]
## Transitions:
-- On SEMI shift to state 24
-- On args1 shift to state 27
## Reductions:
-- On RPAREN
--   reduce production args1 ->

State 24:
## Known stack suffix:
## SEMI
## LR(1) items:
args1 -> SEMI . declvar args1 [ RPAREN ]
## Transitions:
-- On IDENT shift to state 3
-- On idents shift to state 6
-- On declvar shift to state 25
## Reductions:

State 25:
## Known stack suffix:
## SEMI declvar
## LR(1) items:
args1 -> SEMI declvar . args1 [ RPAREN ]
## Transitions:
-- On SEMI shift to state 24
-- On args1 shift to state 26
## Reductions:
-- On RPAREN
--   reduce production args1 ->

State 26:
## Known stack suffix:
## SEMI declvar args1
## LR(1) items:
args1 -> SEMI declvar args1 . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production args1 -> SEMI declvar args1

State 27:
## Known stack suffix:
## declvar args1
## LR(1) items:
args -> declvar args1 . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production args -> declvar args1

State 28:
## Known stack suffix:
## PROCEDURE IDENT LPAREN args
## LR(1) items:
fonction -> PROCEDURE IDENT LPAREN args . RPAREN SEMI vars body [ SEMI ]
## Transitions:
-- On RPAREN shift to state 29
## Reductions:

State 29:
## Known stack suffix:
## PROCEDURE IDENT LPAREN args RPAREN
## LR(1) items:
fonction -> PROCEDURE IDENT LPAREN args RPAREN . SEMI vars body [ SEMI ]
## Transitions:
-- On SEMI shift to state 30
## Reductions:

State 30:
## Known stack suffix:
## PROCEDURE IDENT LPAREN args RPAREN SEMI
## LR(1) items:
fonction -> PROCEDURE IDENT LPAREN args RPAREN SEMI . vars body [ SEMI ]
## Transitions:
-- On VAR shift to state 2
-- On vars shift to state 31
## Reductions:
-- On BEGIN
--   reduce production vars ->

State 31:
## Known stack suffix:
## PROCEDURE IDENT LPAREN args RPAREN SEMI vars
## LR(1) items:
fonction -> PROCEDURE IDENT LPAREN args RPAREN SEMI vars . body [ SEMI ]
## Transitions:
-- On BEGIN shift to state 32
-- On body shift to state 129
## Reductions:

State 32:
## Known stack suffix:
## BEGIN
## LR(1) items:
body -> BEGIN . bloc END [ SEMISEMI SEMI DOT ]
## Transitions:
-- On WRITELN shift to state 33
-- On WRITE shift to state 85
-- On WHILE shift to state 89
-- On READ shift to state 92
-- On LPAREN shift to state 96
-- On IF shift to state 99
-- On IDENT shift to state 102
-- On BEGIN shift to state 108
-- On ALLOC shift to state 42
-- On instruction shift to state 109
-- On call_expression shift to state 113
-- On bloc shift to state 127
-- On array_expression shift to state 114
## Reductions:
-- On END
--   reduce production bloc ->

State 33:
## Known stack suffix:
## WRITELN
## LR(1) items:
instruction -> WRITELN . LPAREN expression RPAREN [ SEMI END ELSE ]
## Transitions:
-- On LPAREN shift to state 34
## Reductions:

State 34:
## Known stack suffix:
## WRITELN LPAREN
## LR(1) items:
instruction -> WRITELN LPAREN . expression RPAREN [ SEMI END ELSE ]
## Transitions:
-- On MINUS shift to state 35
-- On LPAREN shift to state 36
-- On INT shift to state 37
-- On IDENT shift to state 38
-- On FLOAT shift to state 40
-- On BOOL shift to state 41
-- On ALLOC shift to state 42
-- On expression shift to state 83
-- On call_expression shift to state 47
-- On array_expression shift to state 48
## Reductions:

State 35:
## Known stack suffix:
## MINUS
## LR(1) items:
expression -> MINUS . expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
## Transitions:
-- On MINUS shift to state 35
-- On LPAREN shift to state 36
-- On INT shift to state 37
-- On IDENT shift to state 38
-- On FLOAT shift to state 40
-- On BOOL shift to state 41
-- On ALLOC shift to state 42
-- On expression shift to state 82
-- On call_expression shift to state 47
-- On array_expression shift to state 48
## Reductions:

State 36:
## Known stack suffix:
## LPAREN
## LR(1) items:
array_expression -> LPAREN . expression RPAREN [ LBRACKET ]
expression -> LPAREN . expression RPAREN [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
## Transitions:
-- On MINUS shift to state 35
-- On LPAREN shift to state 36
-- On INT shift to state 37
-- On IDENT shift to state 38
-- On FLOAT shift to state 40
-- On BOOL shift to state 41
-- On ALLOC shift to state 42
-- On expression shift to state 80
-- On call_expression shift to state 47
-- On array_expression shift to state 48
## Reductions:

State 37:
## Known stack suffix:
## INT
## LR(1) items:
expression -> INT . [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression -> INT

State 38:
## Known stack suffix:
## IDENT
## LR(1) items:
array_expression -> IDENT . [ LBRACKET ]
call_expression -> IDENT . LPAREN arguments RPAREN [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> IDENT . [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
## Transitions:
-- On LPAREN shift to state 39
## Reductions:
-- On LBRACKET
--   reduce production array_expression -> IDENT
-- On TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON
--   reduce production expression -> IDENT

State 39:
## Known stack suffix:
## IDENT LPAREN
## LR(1) items:
call_expression -> IDENT LPAREN . arguments RPAREN [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
## Transitions:
-- On MINUS shift to state 35
-- On LPAREN shift to state 36
-- On INT shift to state 37
-- On IDENT shift to state 38
-- On FLOAT shift to state 40
-- On BOOL shift to state 41
-- On ALLOC shift to state 42
-- On expression shift to state 73
-- On call_expression shift to state 47
-- On array_expression shift to state 48
-- On arguments shift to state 78
## Reductions:
-- On RPAREN
--   reduce production arguments ->

State 40:
## Known stack suffix:
## FLOAT
## LR(1) items:
expression -> FLOAT . [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression -> FLOAT

State 41:
## Known stack suffix:
## BOOL
## LR(1) items:
expression -> BOOL . [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression -> BOOL

State 42:
## Known stack suffix:
## ALLOC
## LR(1) items:
call_expression -> ALLOC . LPAREN expression COLON type_expr RPAREN [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
## Transitions:
-- On LPAREN shift to state 43
## Reductions:

State 43:
## Known stack suffix:
## ALLOC LPAREN
## LR(1) items:
call_expression -> ALLOC LPAREN . expression COLON type_expr RPAREN [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
## Transitions:
-- On MINUS shift to state 35
-- On LPAREN shift to state 36
-- On INT shift to state 37
-- On IDENT shift to state 38
-- On FLOAT shift to state 40
-- On BOOL shift to state 41
-- On ALLOC shift to state 42
-- On expression shift to state 44
-- On call_expression shift to state 47
-- On array_expression shift to state 48
## Reductions:

State 44:
## Known stack suffix:
## ALLOC LPAREN expression
## LR(1) items:
call_expression -> ALLOC LPAREN expression . COLON type_expr RPAREN [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . PLUS expression [ TIMES PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV COLON ]
expression -> expression . MINUS expression [ TIMES PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV COLON ]
expression -> expression . TIMES expression [ TIMES PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV COLON ]
expression -> expression . DIV expression [ TIMES PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV COLON ]
expression -> expression . LESS expression [ TIMES PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV COLON ]
expression -> expression . LESSEQUAL expression [ TIMES PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV COLON ]
expression -> expression . GREATER expression [ TIMES PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV COLON ]
expression -> expression . GREATEREQUAL expression [ TIMES PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV COLON ]
expression -> expression . EQUAL expression [ TIMES PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV COLON ]
expression -> expression . LESSGREATER expression [ TIMES PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV COLON ]
## Transitions:
-- On TIMES shift to state 45
-- On PLUS shift to state 52
-- On MINUS shift to state 56
-- On LESSGREATER shift to state 58
-- On LESSEQUAL shift to state 60
-- On LESS shift to state 62
-- On GREATEREQUAL shift to state 64
-- On GREATER shift to state 66
-- On EQUAL shift to state 68
-- On DIV shift to state 54
-- On COLON shift to state 70
## Reductions:

State 45:
## Known stack suffix:
## expression TIMES
## LR(1) items:
expression -> expression TIMES . expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
## Transitions:
-- On MINUS shift to state 35
-- On LPAREN shift to state 36
-- On INT shift to state 37
-- On IDENT shift to state 38
-- On FLOAT shift to state 40
-- On BOOL shift to state 41
-- On ALLOC shift to state 42
-- On expression shift to state 46
-- On call_expression shift to state 47
-- On array_expression shift to state 48
## Reductions:

State 46:
## Known stack suffix:
## expression TIMES expression
## LR(1) items:
expression -> expression . PLUS expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . MINUS expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . TIMES expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression TIMES expression . [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . DIV expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . LESS expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . LESSEQUAL expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . GREATER expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . GREATEREQUAL expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . EQUAL expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . LESSGREATER expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression -> expression TIMES expression

State 47:
## Known stack suffix:
## call_expression
## LR(1) items:
array_expression -> call_expression . [ LBRACKET ]
expression -> call_expression . [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
## Transitions:
## Reductions:
-- On LBRACKET
--   reduce production array_expression -> call_expression
-- On TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON
--   reduce production expression -> call_expression

State 48:
## Known stack suffix:
## array_expression
## LR(1) items:
array_expression -> array_expression . LBRACKET expression RBRACKET [ LBRACKET ]
expression -> array_expression . LBRACKET expression RBRACKET [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
## Transitions:
-- On LBRACKET shift to state 49
## Reductions:

State 49:
## Known stack suffix:
## array_expression LBRACKET
## LR(1) items:
array_expression -> array_expression LBRACKET . expression RBRACKET [ LBRACKET ]
expression -> array_expression LBRACKET . expression RBRACKET [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
## Transitions:
-- On MINUS shift to state 35
-- On LPAREN shift to state 36
-- On INT shift to state 37
-- On IDENT shift to state 38
-- On FLOAT shift to state 40
-- On BOOL shift to state 41
-- On ALLOC shift to state 42
-- On expression shift to state 50
-- On call_expression shift to state 47
-- On array_expression shift to state 48
## Reductions:

State 50:
## Known stack suffix:
## array_expression LBRACKET expression
## LR(1) items:
array_expression -> array_expression LBRACKET expression . RBRACKET [ LBRACKET ]
expression -> array_expression LBRACKET expression . RBRACKET [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . PLUS expression [ TIMES RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV ]
expression -> expression . MINUS expression [ TIMES RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV ]
expression -> expression . TIMES expression [ TIMES RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV ]
expression -> expression . DIV expression [ TIMES RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV ]
expression -> expression . LESS expression [ TIMES RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV ]
expression -> expression . LESSEQUAL expression [ TIMES RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV ]
expression -> expression . GREATER expression [ TIMES RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV ]
expression -> expression . GREATEREQUAL expression [ TIMES RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV ]
expression -> expression . EQUAL expression [ TIMES RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV ]
expression -> expression . LESSGREATER expression [ TIMES RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV ]
## Transitions:
-- On TIMES shift to state 45
-- On RBRACKET shift to state 51
-- On PLUS shift to state 52
-- On MINUS shift to state 56
-- On LESSGREATER shift to state 58
-- On LESSEQUAL shift to state 60
-- On LESS shift to state 62
-- On GREATEREQUAL shift to state 64
-- On GREATER shift to state 66
-- On EQUAL shift to state 68
-- On DIV shift to state 54
## Reductions:

State 51:
## Known stack suffix:
## array_expression LBRACKET expression RBRACKET
## LR(1) items:
array_expression -> array_expression LBRACKET expression RBRACKET . [ LBRACKET ]
expression -> array_expression LBRACKET expression RBRACKET . [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
## Transitions:
## Reductions:
-- On LBRACKET
--   reduce production array_expression -> array_expression LBRACKET expression RBRACKET
-- On TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON
--   reduce production expression -> array_expression LBRACKET expression RBRACKET

State 52:
## Known stack suffix:
## expression PLUS
## LR(1) items:
expression -> expression PLUS . expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
## Transitions:
-- On MINUS shift to state 35
-- On LPAREN shift to state 36
-- On INT shift to state 37
-- On IDENT shift to state 38
-- On FLOAT shift to state 40
-- On BOOL shift to state 41
-- On ALLOC shift to state 42
-- On expression shift to state 53
-- On call_expression shift to state 47
-- On array_expression shift to state 48
## Reductions:

State 53:
## Known stack suffix:
## expression PLUS expression
## LR(1) items:
expression -> expression . PLUS expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression PLUS expression . [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . MINUS expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . TIMES expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . DIV expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . LESS expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . LESSEQUAL expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . GREATER expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . GREATEREQUAL expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . EQUAL expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . LESSGREATER expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
## Transitions:
-- On TIMES shift to state 45
-- On DIV shift to state 54
## Reductions:
-- On THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO COMMA COLON
--   reduce production expression -> expression PLUS expression

State 54:
## Known stack suffix:
## expression DIV
## LR(1) items:
expression -> expression DIV . expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
## Transitions:
-- On MINUS shift to state 35
-- On LPAREN shift to state 36
-- On INT shift to state 37
-- On IDENT shift to state 38
-- On FLOAT shift to state 40
-- On BOOL shift to state 41
-- On ALLOC shift to state 42
-- On expression shift to state 55
-- On call_expression shift to state 47
-- On array_expression shift to state 48
## Reductions:

State 55:
## Known stack suffix:
## expression DIV expression
## LR(1) items:
expression -> expression . PLUS expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . MINUS expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . TIMES expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . DIV expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression DIV expression . [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . LESS expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . LESSEQUAL expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . GREATER expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . GREATEREQUAL expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . EQUAL expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . LESSGREATER expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression -> expression DIV expression

State 56:
## Known stack suffix:
## expression MINUS
## LR(1) items:
expression -> expression MINUS . expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
## Transitions:
-- On MINUS shift to state 35
-- On LPAREN shift to state 36
-- On INT shift to state 37
-- On IDENT shift to state 38
-- On FLOAT shift to state 40
-- On BOOL shift to state 41
-- On ALLOC shift to state 42
-- On expression shift to state 57
-- On call_expression shift to state 47
-- On array_expression shift to state 48
## Reductions:

State 57:
## Known stack suffix:
## expression MINUS expression
## LR(1) items:
expression -> expression . PLUS expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . MINUS expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression MINUS expression . [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . TIMES expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . DIV expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . LESS expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . LESSEQUAL expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . GREATER expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . GREATEREQUAL expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . EQUAL expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . LESSGREATER expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
## Transitions:
-- On TIMES shift to state 45
-- On DIV shift to state 54
## Reductions:
-- On THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO COMMA COLON
--   reduce production expression -> expression MINUS expression

State 58:
## Known stack suffix:
## expression LESSGREATER
## LR(1) items:
expression -> expression LESSGREATER . expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
## Transitions:
-- On MINUS shift to state 35
-- On LPAREN shift to state 36
-- On INT shift to state 37
-- On IDENT shift to state 38
-- On FLOAT shift to state 40
-- On BOOL shift to state 41
-- On ALLOC shift to state 42
-- On expression shift to state 59
-- On call_expression shift to state 47
-- On array_expression shift to state 48
## Reductions:

State 59:
## Known stack suffix:
## expression LESSGREATER expression
## LR(1) items:
expression -> expression . PLUS expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . MINUS expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . TIMES expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . DIV expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . LESS expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . LESSEQUAL expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . GREATER expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . GREATEREQUAL expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . EQUAL expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . LESSGREATER expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression LESSGREATER expression . [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
## Transitions:
-- On TIMES shift to state 45
-- On PLUS shift to state 52
-- On MINUS shift to state 56
-- On DIV shift to state 54
## Reductions:
-- On THEN SEMI RPAREN RBRACKET LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO COMMA COLON
--   reduce production expression -> expression LESSGREATER expression

State 60:
## Known stack suffix:
## expression LESSEQUAL
## LR(1) items:
expression -> expression LESSEQUAL . expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
## Transitions:
-- On MINUS shift to state 35
-- On LPAREN shift to state 36
-- On INT shift to state 37
-- On IDENT shift to state 38
-- On FLOAT shift to state 40
-- On BOOL shift to state 41
-- On ALLOC shift to state 42
-- On expression shift to state 61
-- On call_expression shift to state 47
-- On array_expression shift to state 48
## Reductions:

State 61:
## Known stack suffix:
## expression LESSEQUAL expression
## LR(1) items:
expression -> expression . PLUS expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . MINUS expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . TIMES expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . DIV expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . LESS expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . LESSEQUAL expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression LESSEQUAL expression . [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . GREATER expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . GREATEREQUAL expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . EQUAL expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . LESSGREATER expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
## Transitions:
-- On TIMES shift to state 45
-- On PLUS shift to state 52
-- On MINUS shift to state 56
-- On DIV shift to state 54
## Reductions:
-- On THEN SEMI RPAREN RBRACKET LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO COMMA COLON
--   reduce production expression -> expression LESSEQUAL expression

State 62:
## Known stack suffix:
## expression LESS
## LR(1) items:
expression -> expression LESS . expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
## Transitions:
-- On MINUS shift to state 35
-- On LPAREN shift to state 36
-- On INT shift to state 37
-- On IDENT shift to state 38
-- On FLOAT shift to state 40
-- On BOOL shift to state 41
-- On ALLOC shift to state 42
-- On expression shift to state 63
-- On call_expression shift to state 47
-- On array_expression shift to state 48
## Reductions:

State 63:
## Known stack suffix:
## expression LESS expression
## LR(1) items:
expression -> expression . PLUS expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . MINUS expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . TIMES expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . DIV expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . LESS expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression LESS expression . [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . LESSEQUAL expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . GREATER expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . GREATEREQUAL expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . EQUAL expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . LESSGREATER expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
## Transitions:
-- On TIMES shift to state 45
-- On PLUS shift to state 52
-- On MINUS shift to state 56
-- On DIV shift to state 54
## Reductions:
-- On THEN SEMI RPAREN RBRACKET LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO COMMA COLON
--   reduce production expression -> expression LESS expression

State 64:
## Known stack suffix:
## expression GREATEREQUAL
## LR(1) items:
expression -> expression GREATEREQUAL . expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
## Transitions:
-- On MINUS shift to state 35
-- On LPAREN shift to state 36
-- On INT shift to state 37
-- On IDENT shift to state 38
-- On FLOAT shift to state 40
-- On BOOL shift to state 41
-- On ALLOC shift to state 42
-- On expression shift to state 65
-- On call_expression shift to state 47
-- On array_expression shift to state 48
## Reductions:

State 65:
## Known stack suffix:
## expression GREATEREQUAL expression
## LR(1) items:
expression -> expression . PLUS expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . MINUS expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . TIMES expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . DIV expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . LESS expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . LESSEQUAL expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . GREATER expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . GREATEREQUAL expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression GREATEREQUAL expression . [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . EQUAL expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . LESSGREATER expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
## Transitions:
-- On TIMES shift to state 45
-- On PLUS shift to state 52
-- On MINUS shift to state 56
-- On DIV shift to state 54
## Reductions:
-- On THEN SEMI RPAREN RBRACKET LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO COMMA COLON
--   reduce production expression -> expression GREATEREQUAL expression

State 66:
## Known stack suffix:
## expression GREATER
## LR(1) items:
expression -> expression GREATER . expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
## Transitions:
-- On MINUS shift to state 35
-- On LPAREN shift to state 36
-- On INT shift to state 37
-- On IDENT shift to state 38
-- On FLOAT shift to state 40
-- On BOOL shift to state 41
-- On ALLOC shift to state 42
-- On expression shift to state 67
-- On call_expression shift to state 47
-- On array_expression shift to state 48
## Reductions:

State 67:
## Known stack suffix:
## expression GREATER expression
## LR(1) items:
expression -> expression . PLUS expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . MINUS expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . TIMES expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . DIV expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . LESS expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . LESSEQUAL expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . GREATER expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression GREATER expression . [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . GREATEREQUAL expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . EQUAL expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . LESSGREATER expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
## Transitions:
-- On TIMES shift to state 45
-- On PLUS shift to state 52
-- On MINUS shift to state 56
-- On DIV shift to state 54
## Reductions:
-- On THEN SEMI RPAREN RBRACKET LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO COMMA COLON
--   reduce production expression -> expression GREATER expression

State 68:
## Known stack suffix:
## expression EQUAL
## LR(1) items:
expression -> expression EQUAL . expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
## Transitions:
-- On MINUS shift to state 35
-- On LPAREN shift to state 36
-- On INT shift to state 37
-- On IDENT shift to state 38
-- On FLOAT shift to state 40
-- On BOOL shift to state 41
-- On ALLOC shift to state 42
-- On expression shift to state 69
-- On call_expression shift to state 47
-- On array_expression shift to state 48
## Reductions:

State 69:
## Known stack suffix:
## expression EQUAL expression
## LR(1) items:
expression -> expression . PLUS expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . MINUS expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . TIMES expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . DIV expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . LESS expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . LESSEQUAL expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . GREATER expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . GREATEREQUAL expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . EQUAL expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression EQUAL expression . [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . LESSGREATER expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
## Transitions:
-- On TIMES shift to state 45
-- On PLUS shift to state 52
-- On MINUS shift to state 56
-- On DIV shift to state 54
## Reductions:
-- On THEN SEMI RPAREN RBRACKET LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO COMMA COLON
--   reduce production expression -> expression EQUAL expression

State 70:
## Known stack suffix:
## ALLOC LPAREN expression COLON
## LR(1) items:
call_expression -> ALLOC LPAREN expression COLON . type_expr RPAREN [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
## Transitions:
-- On REAL shift to state 8
-- On INTEGER shift to state 9
-- On BOOLEAN shift to state 10
-- On ARRAY shift to state 11
-- On type_expr shift to state 71
## Reductions:

State 71:
## Known stack suffix:
## ALLOC LPAREN expression COLON type_expr
## LR(1) items:
call_expression -> ALLOC LPAREN expression COLON type_expr . RPAREN [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
## Transitions:
-- On RPAREN shift to state 72
## Reductions:

State 72:
## Known stack suffix:
## ALLOC LPAREN expression COLON type_expr RPAREN
## LR(1) items:
call_expression -> ALLOC LPAREN expression COLON type_expr RPAREN . [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production call_expression -> ALLOC LPAREN expression COLON type_expr RPAREN

State 73:
## Known stack suffix:
## expression
## LR(1) items:
arguments -> expression . arguments1 [ RPAREN ]
expression -> expression . PLUS expression [ TIMES RPAREN PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV COMMA ]
expression -> expression . MINUS expression [ TIMES RPAREN PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV COMMA ]
expression -> expression . TIMES expression [ TIMES RPAREN PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV COMMA ]
expression -> expression . DIV expression [ TIMES RPAREN PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV COMMA ]
expression -> expression . LESS expression [ TIMES RPAREN PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV COMMA ]
expression -> expression . LESSEQUAL expression [ TIMES RPAREN PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV COMMA ]
expression -> expression . GREATER expression [ TIMES RPAREN PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV COMMA ]
expression -> expression . GREATEREQUAL expression [ TIMES RPAREN PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV COMMA ]
expression -> expression . EQUAL expression [ TIMES RPAREN PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV COMMA ]
expression -> expression . LESSGREATER expression [ TIMES RPAREN PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV COMMA ]
## Transitions:
-- On TIMES shift to state 45
-- On PLUS shift to state 52
-- On MINUS shift to state 56
-- On LESSGREATER shift to state 58
-- On LESSEQUAL shift to state 60
-- On LESS shift to state 62
-- On GREATEREQUAL shift to state 64
-- On GREATER shift to state 66
-- On EQUAL shift to state 68
-- On DIV shift to state 54
-- On COMMA shift to state 74
-- On arguments1 shift to state 77
## Reductions:
-- On RPAREN
--   reduce production arguments1 ->

State 74:
## Known stack suffix:
## COMMA
## LR(1) items:
arguments1 -> COMMA . expression arguments1 [ RPAREN ]
## Transitions:
-- On MINUS shift to state 35
-- On LPAREN shift to state 36
-- On INT shift to state 37
-- On IDENT shift to state 38
-- On FLOAT shift to state 40
-- On BOOL shift to state 41
-- On ALLOC shift to state 42
-- On expression shift to state 75
-- On call_expression shift to state 47
-- On array_expression shift to state 48
## Reductions:

State 75:
## Known stack suffix:
## COMMA expression
## LR(1) items:
arguments1 -> COMMA expression . arguments1 [ RPAREN ]
expression -> expression . PLUS expression [ TIMES RPAREN PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV COMMA ]
expression -> expression . MINUS expression [ TIMES RPAREN PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV COMMA ]
expression -> expression . TIMES expression [ TIMES RPAREN PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV COMMA ]
expression -> expression . DIV expression [ TIMES RPAREN PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV COMMA ]
expression -> expression . LESS expression [ TIMES RPAREN PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV COMMA ]
expression -> expression . LESSEQUAL expression [ TIMES RPAREN PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV COMMA ]
expression -> expression . GREATER expression [ TIMES RPAREN PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV COMMA ]
expression -> expression . GREATEREQUAL expression [ TIMES RPAREN PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV COMMA ]
expression -> expression . EQUAL expression [ TIMES RPAREN PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV COMMA ]
expression -> expression . LESSGREATER expression [ TIMES RPAREN PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV COMMA ]
## Transitions:
-- On TIMES shift to state 45
-- On PLUS shift to state 52
-- On MINUS shift to state 56
-- On LESSGREATER shift to state 58
-- On LESSEQUAL shift to state 60
-- On LESS shift to state 62
-- On GREATEREQUAL shift to state 64
-- On GREATER shift to state 66
-- On EQUAL shift to state 68
-- On DIV shift to state 54
-- On COMMA shift to state 74
-- On arguments1 shift to state 76
## Reductions:
-- On RPAREN
--   reduce production arguments1 ->

State 76:
## Known stack suffix:
## COMMA expression arguments1
## LR(1) items:
arguments1 -> COMMA expression arguments1 . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production arguments1 -> COMMA expression arguments1

State 77:
## Known stack suffix:
## expression arguments1
## LR(1) items:
arguments -> expression arguments1 . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production arguments -> expression arguments1

State 78:
## Known stack suffix:
## IDENT LPAREN arguments
## LR(1) items:
call_expression -> IDENT LPAREN arguments . RPAREN [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
## Transitions:
-- On RPAREN shift to state 79
## Reductions:

State 79:
## Known stack suffix:
## IDENT LPAREN arguments RPAREN
## LR(1) items:
call_expression -> IDENT LPAREN arguments RPAREN . [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production call_expression -> IDENT LPAREN arguments RPAREN

State 80:
## Known stack suffix:
## LPAREN expression
## LR(1) items:
array_expression -> LPAREN expression . RPAREN [ LBRACKET ]
expression -> LPAREN expression . RPAREN [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . PLUS expression [ TIMES RPAREN PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV ]
expression -> expression . MINUS expression [ TIMES RPAREN PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV ]
expression -> expression . TIMES expression [ TIMES RPAREN PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV ]
expression -> expression . DIV expression [ TIMES RPAREN PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV ]
expression -> expression . LESS expression [ TIMES RPAREN PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV ]
expression -> expression . LESSEQUAL expression [ TIMES RPAREN PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV ]
expression -> expression . GREATER expression [ TIMES RPAREN PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV ]
expression -> expression . GREATEREQUAL expression [ TIMES RPAREN PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV ]
expression -> expression . EQUAL expression [ TIMES RPAREN PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV ]
expression -> expression . LESSGREATER expression [ TIMES RPAREN PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV ]
## Transitions:
-- On TIMES shift to state 45
-- On RPAREN shift to state 81
-- On PLUS shift to state 52
-- On MINUS shift to state 56
-- On LESSGREATER shift to state 58
-- On LESSEQUAL shift to state 60
-- On LESS shift to state 62
-- On GREATEREQUAL shift to state 64
-- On GREATER shift to state 66
-- On EQUAL shift to state 68
-- On DIV shift to state 54
## Reductions:

State 81:
## Known stack suffix:
## LPAREN expression RPAREN
## LR(1) items:
array_expression -> LPAREN expression RPAREN . [ LBRACKET ]
expression -> LPAREN expression RPAREN . [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
## Transitions:
## Reductions:
-- On LBRACKET
--   reduce production array_expression -> LPAREN expression RPAREN
-- On TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON
--   reduce production expression -> LPAREN expression RPAREN

State 82:
## Known stack suffix:
## MINUS expression
## LR(1) items:
expression -> MINUS expression . [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . PLUS expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . MINUS expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . TIMES expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . DIV expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . LESS expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . LESSEQUAL expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . GREATER expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . GREATEREQUAL expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . EQUAL expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
expression -> expression . LESSGREATER expression [ TIMES THEN SEMI RPAREN RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DO DIV COMMA COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression -> MINUS expression

State 83:
## Known stack suffix:
## WRITELN LPAREN expression
## LR(1) items:
expression -> expression . PLUS expression [ TIMES RPAREN PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV ]
expression -> expression . MINUS expression [ TIMES RPAREN PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV ]
expression -> expression . TIMES expression [ TIMES RPAREN PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV ]
expression -> expression . DIV expression [ TIMES RPAREN PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV ]
expression -> expression . LESS expression [ TIMES RPAREN PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV ]
expression -> expression . LESSEQUAL expression [ TIMES RPAREN PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV ]
expression -> expression . GREATER expression [ TIMES RPAREN PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV ]
expression -> expression . GREATEREQUAL expression [ TIMES RPAREN PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV ]
expression -> expression . EQUAL expression [ TIMES RPAREN PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV ]
expression -> expression . LESSGREATER expression [ TIMES RPAREN PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV ]
instruction -> WRITELN LPAREN expression . RPAREN [ SEMI END ELSE ]
## Transitions:
-- On TIMES shift to state 45
-- On RPAREN shift to state 84
-- On PLUS shift to state 52
-- On MINUS shift to state 56
-- On LESSGREATER shift to state 58
-- On LESSEQUAL shift to state 60
-- On LESS shift to state 62
-- On GREATEREQUAL shift to state 64
-- On GREATER shift to state 66
-- On EQUAL shift to state 68
-- On DIV shift to state 54
## Reductions:

State 84:
## Known stack suffix:
## WRITELN LPAREN expression RPAREN
## LR(1) items:
instruction -> WRITELN LPAREN expression RPAREN . [ SEMI END ELSE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production instruction -> WRITELN LPAREN expression RPAREN

State 85:
## Known stack suffix:
## WRITE
## LR(1) items:
instruction -> WRITE . LPAREN expression RPAREN [ SEMI END ELSE ]
## Transitions:
-- On LPAREN shift to state 86
## Reductions:

State 86:
## Known stack suffix:
## WRITE LPAREN
## LR(1) items:
instruction -> WRITE LPAREN . expression RPAREN [ SEMI END ELSE ]
## Transitions:
-- On MINUS shift to state 35
-- On LPAREN shift to state 36
-- On INT shift to state 37
-- On IDENT shift to state 38
-- On FLOAT shift to state 40
-- On BOOL shift to state 41
-- On ALLOC shift to state 42
-- On expression shift to state 87
-- On call_expression shift to state 47
-- On array_expression shift to state 48
## Reductions:

State 87:
## Known stack suffix:
## WRITE LPAREN expression
## LR(1) items:
expression -> expression . PLUS expression [ TIMES RPAREN PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV ]
expression -> expression . MINUS expression [ TIMES RPAREN PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV ]
expression -> expression . TIMES expression [ TIMES RPAREN PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV ]
expression -> expression . DIV expression [ TIMES RPAREN PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV ]
expression -> expression . LESS expression [ TIMES RPAREN PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV ]
expression -> expression . LESSEQUAL expression [ TIMES RPAREN PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV ]
expression -> expression . GREATER expression [ TIMES RPAREN PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV ]
expression -> expression . GREATEREQUAL expression [ TIMES RPAREN PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV ]
expression -> expression . EQUAL expression [ TIMES RPAREN PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV ]
expression -> expression . LESSGREATER expression [ TIMES RPAREN PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV ]
instruction -> WRITE LPAREN expression . RPAREN [ SEMI END ELSE ]
## Transitions:
-- On TIMES shift to state 45
-- On RPAREN shift to state 88
-- On PLUS shift to state 52
-- On MINUS shift to state 56
-- On LESSGREATER shift to state 58
-- On LESSEQUAL shift to state 60
-- On LESS shift to state 62
-- On GREATEREQUAL shift to state 64
-- On GREATER shift to state 66
-- On EQUAL shift to state 68
-- On DIV shift to state 54
## Reductions:

State 88:
## Known stack suffix:
## WRITE LPAREN expression RPAREN
## LR(1) items:
instruction -> WRITE LPAREN expression RPAREN . [ SEMI END ELSE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production instruction -> WRITE LPAREN expression RPAREN

State 89:
## Known stack suffix:
## WHILE
## LR(1) items:
instruction -> WHILE . expression DO instruction [ SEMI END ELSE ]
## Transitions:
-- On MINUS shift to state 35
-- On LPAREN shift to state 36
-- On INT shift to state 37
-- On IDENT shift to state 38
-- On FLOAT shift to state 40
-- On BOOL shift to state 41
-- On ALLOC shift to state 42
-- On expression shift to state 90
-- On call_expression shift to state 47
-- On array_expression shift to state 48
## Reductions:

State 90:
## Known stack suffix:
## WHILE expression
## LR(1) items:
expression -> expression . PLUS expression [ TIMES PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DO DIV ]
expression -> expression . MINUS expression [ TIMES PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DO DIV ]
expression -> expression . TIMES expression [ TIMES PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DO DIV ]
expression -> expression . DIV expression [ TIMES PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DO DIV ]
expression -> expression . LESS expression [ TIMES PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DO DIV ]
expression -> expression . LESSEQUAL expression [ TIMES PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DO DIV ]
expression -> expression . GREATER expression [ TIMES PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DO DIV ]
expression -> expression . GREATEREQUAL expression [ TIMES PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DO DIV ]
expression -> expression . EQUAL expression [ TIMES PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DO DIV ]
expression -> expression . LESSGREATER expression [ TIMES PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DO DIV ]
instruction -> WHILE expression . DO instruction [ SEMI END ELSE ]
## Transitions:
-- On TIMES shift to state 45
-- On PLUS shift to state 52
-- On MINUS shift to state 56
-- On LESSGREATER shift to state 58
-- On LESSEQUAL shift to state 60
-- On LESS shift to state 62
-- On GREATEREQUAL shift to state 64
-- On GREATER shift to state 66
-- On EQUAL shift to state 68
-- On DO shift to state 91
-- On DIV shift to state 54
## Reductions:

State 91:
## Known stack suffix:
## WHILE expression DO
## LR(1) items:
instruction -> WHILE expression DO . instruction [ SEMI END ELSE ]
## Transitions:
-- On WRITELN shift to state 33
-- On WRITE shift to state 85
-- On WHILE shift to state 89
-- On READ shift to state 92
-- On LPAREN shift to state 96
-- On IF shift to state 99
-- On IDENT shift to state 102
-- On BEGIN shift to state 108
-- On ALLOC shift to state 42
-- On instruction shift to state 126
-- On call_expression shift to state 113
-- On array_expression shift to state 114
## Reductions:

State 92:
## Known stack suffix:
## READ
## LR(1) items:
instruction -> READ . LPAREN IDENT RPAREN [ SEMI END ELSE ]
## Transitions:
-- On LPAREN shift to state 93
## Reductions:

State 93:
## Known stack suffix:
## READ LPAREN
## LR(1) items:
instruction -> READ LPAREN . IDENT RPAREN [ SEMI END ELSE ]
## Transitions:
-- On IDENT shift to state 94
## Reductions:

State 94:
## Known stack suffix:
## READ LPAREN IDENT
## LR(1) items:
instruction -> READ LPAREN IDENT . RPAREN [ SEMI END ELSE ]
## Transitions:
-- On RPAREN shift to state 95
## Reductions:

State 95:
## Known stack suffix:
## READ LPAREN IDENT RPAREN
## LR(1) items:
instruction -> READ LPAREN IDENT RPAREN . [ SEMI END ELSE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production instruction -> READ LPAREN IDENT RPAREN

State 96:
## Known stack suffix:
## LPAREN
## LR(1) items:
array_expression -> LPAREN . expression RPAREN [ LBRACKET ]
## Transitions:
-- On MINUS shift to state 35
-- On LPAREN shift to state 36
-- On INT shift to state 37
-- On IDENT shift to state 38
-- On FLOAT shift to state 40
-- On BOOL shift to state 41
-- On ALLOC shift to state 42
-- On expression shift to state 97
-- On call_expression shift to state 47
-- On array_expression shift to state 48
## Reductions:

State 97:
## Known stack suffix:
## LPAREN expression
## LR(1) items:
array_expression -> LPAREN expression . RPAREN [ LBRACKET ]
expression -> expression . PLUS expression [ TIMES RPAREN PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV ]
expression -> expression . MINUS expression [ TIMES RPAREN PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV ]
expression -> expression . TIMES expression [ TIMES RPAREN PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV ]
expression -> expression . DIV expression [ TIMES RPAREN PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV ]
expression -> expression . LESS expression [ TIMES RPAREN PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV ]
expression -> expression . LESSEQUAL expression [ TIMES RPAREN PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV ]
expression -> expression . GREATER expression [ TIMES RPAREN PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV ]
expression -> expression . GREATEREQUAL expression [ TIMES RPAREN PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV ]
expression -> expression . EQUAL expression [ TIMES RPAREN PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV ]
expression -> expression . LESSGREATER expression [ TIMES RPAREN PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV ]
## Transitions:
-- On TIMES shift to state 45
-- On RPAREN shift to state 98
-- On PLUS shift to state 52
-- On MINUS shift to state 56
-- On LESSGREATER shift to state 58
-- On LESSEQUAL shift to state 60
-- On LESS shift to state 62
-- On GREATEREQUAL shift to state 64
-- On GREATER shift to state 66
-- On EQUAL shift to state 68
-- On DIV shift to state 54
## Reductions:

State 98:
## Known stack suffix:
## LPAREN expression RPAREN
## LR(1) items:
array_expression -> LPAREN expression RPAREN . [ LBRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production array_expression -> LPAREN expression RPAREN

State 99:
## Known stack suffix:
## IF
## LR(1) items:
instruction -> IF . expression THEN instruction ELSE instruction [ SEMI END ELSE ]
## Transitions:
-- On MINUS shift to state 35
-- On LPAREN shift to state 36
-- On INT shift to state 37
-- On IDENT shift to state 38
-- On FLOAT shift to state 40
-- On BOOL shift to state 41
-- On ALLOC shift to state 42
-- On expression shift to state 100
-- On call_expression shift to state 47
-- On array_expression shift to state 48
## Reductions:

State 100:
## Known stack suffix:
## IF expression
## LR(1) items:
expression -> expression . PLUS expression [ TIMES THEN PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV ]
expression -> expression . MINUS expression [ TIMES THEN PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV ]
expression -> expression . TIMES expression [ TIMES THEN PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV ]
expression -> expression . DIV expression [ TIMES THEN PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV ]
expression -> expression . LESS expression [ TIMES THEN PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV ]
expression -> expression . LESSEQUAL expression [ TIMES THEN PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV ]
expression -> expression . GREATER expression [ TIMES THEN PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV ]
expression -> expression . GREATEREQUAL expression [ TIMES THEN PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV ]
expression -> expression . EQUAL expression [ TIMES THEN PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV ]
expression -> expression . LESSGREATER expression [ TIMES THEN PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV ]
instruction -> IF expression . THEN instruction ELSE instruction [ SEMI END ELSE ]
## Transitions:
-- On TIMES shift to state 45
-- On THEN shift to state 101
-- On PLUS shift to state 52
-- On MINUS shift to state 56
-- On LESSGREATER shift to state 58
-- On LESSEQUAL shift to state 60
-- On LESS shift to state 62
-- On GREATEREQUAL shift to state 64
-- On GREATER shift to state 66
-- On EQUAL shift to state 68
-- On DIV shift to state 54
## Reductions:

State 101:
## Known stack suffix:
## IF expression THEN
## LR(1) items:
instruction -> IF expression THEN . instruction ELSE instruction [ SEMI END ELSE ]
## Transitions:
-- On WRITELN shift to state 33
-- On WRITE shift to state 85
-- On WHILE shift to state 89
-- On READ shift to state 92
-- On LPAREN shift to state 96
-- On IF shift to state 99
-- On IDENT shift to state 102
-- On BEGIN shift to state 108
-- On ALLOC shift to state 42
-- On instruction shift to state 123
-- On call_expression shift to state 113
-- On array_expression shift to state 114
## Reductions:

State 102:
## Known stack suffix:
## IDENT
## LR(1) items:
array_expression -> IDENT . [ LBRACKET ]
call_expression -> IDENT . LPAREN arguments RPAREN [ LBRACKET ]
instruction -> IDENT . COLONEQUAL expression [ SEMI END ELSE ]
instruction -> IDENT . LPAREN arguments RPAREN [ SEMI END ELSE ]
## Transitions:
-- On LPAREN shift to state 103
-- On COLONEQUAL shift to state 106
## Reductions:
-- On LBRACKET
--   reduce production array_expression -> IDENT

State 103:
## Known stack suffix:
## IDENT LPAREN
## LR(1) items:
call_expression -> IDENT LPAREN . arguments RPAREN [ LBRACKET ]
instruction -> IDENT LPAREN . arguments RPAREN [ SEMI END ELSE ]
## Transitions:
-- On MINUS shift to state 35
-- On LPAREN shift to state 36
-- On INT shift to state 37
-- On IDENT shift to state 38
-- On FLOAT shift to state 40
-- On BOOL shift to state 41
-- On ALLOC shift to state 42
-- On expression shift to state 73
-- On call_expression shift to state 47
-- On array_expression shift to state 48
-- On arguments shift to state 104
## Reductions:
-- On RPAREN
--   reduce production arguments ->

State 104:
## Known stack suffix:
## IDENT LPAREN arguments
## LR(1) items:
call_expression -> IDENT LPAREN arguments . RPAREN [ LBRACKET ]
instruction -> IDENT LPAREN arguments . RPAREN [ SEMI END ELSE ]
## Transitions:
-- On RPAREN shift to state 105
## Reductions:

State 105:
## Known stack suffix:
## IDENT LPAREN arguments RPAREN
## LR(1) items:
call_expression -> IDENT LPAREN arguments RPAREN . [ LBRACKET ]
instruction -> IDENT LPAREN arguments RPAREN . [ SEMI END ELSE ]
## Transitions:
## Reductions:
-- On LBRACKET
--   reduce production call_expression -> IDENT LPAREN arguments RPAREN
-- On SEMI END ELSE
--   reduce production instruction -> IDENT LPAREN arguments RPAREN

State 106:
## Known stack suffix:
## IDENT COLONEQUAL
## LR(1) items:
instruction -> IDENT COLONEQUAL . expression [ SEMI END ELSE ]
## Transitions:
-- On MINUS shift to state 35
-- On LPAREN shift to state 36
-- On INT shift to state 37
-- On IDENT shift to state 38
-- On FLOAT shift to state 40
-- On BOOL shift to state 41
-- On ALLOC shift to state 42
-- On expression shift to state 107
-- On call_expression shift to state 47
-- On array_expression shift to state 48
## Reductions:

State 107:
## Known stack suffix:
## IDENT COLONEQUAL expression
## LR(1) items:
expression -> expression . PLUS expression [ TIMES SEMI PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DIV ]
expression -> expression . MINUS expression [ TIMES SEMI PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DIV ]
expression -> expression . TIMES expression [ TIMES SEMI PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DIV ]
expression -> expression . DIV expression [ TIMES SEMI PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DIV ]
expression -> expression . LESS expression [ TIMES SEMI PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DIV ]
expression -> expression . LESSEQUAL expression [ TIMES SEMI PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DIV ]
expression -> expression . GREATER expression [ TIMES SEMI PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DIV ]
expression -> expression . GREATEREQUAL expression [ TIMES SEMI PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DIV ]
expression -> expression . EQUAL expression [ TIMES SEMI PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DIV ]
expression -> expression . LESSGREATER expression [ TIMES SEMI PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DIV ]
instruction -> IDENT COLONEQUAL expression . [ SEMI END ELSE ]
## Transitions:
-- On TIMES shift to state 45
-- On PLUS shift to state 52
-- On MINUS shift to state 56
-- On LESSGREATER shift to state 58
-- On LESSEQUAL shift to state 60
-- On LESS shift to state 62
-- On GREATEREQUAL shift to state 64
-- On GREATER shift to state 66
-- On EQUAL shift to state 68
-- On DIV shift to state 54
## Reductions:
-- On SEMI END ELSE
--   reduce production instruction -> IDENT COLONEQUAL expression

State 108:
## Known stack suffix:
## BEGIN
## LR(1) items:
instruction -> BEGIN . bloc END [ SEMI END ELSE ]
## Transitions:
-- On WRITELN shift to state 33
-- On WRITE shift to state 85
-- On WHILE shift to state 89
-- On READ shift to state 92
-- On LPAREN shift to state 96
-- On IF shift to state 99
-- On IDENT shift to state 102
-- On BEGIN shift to state 108
-- On ALLOC shift to state 42
-- On instruction shift to state 109
-- On call_expression shift to state 113
-- On bloc shift to state 121
-- On array_expression shift to state 114
## Reductions:
-- On END
--   reduce production bloc ->

State 109:
## Known stack suffix:
## instruction
## LR(1) items:
bloc -> instruction . bloc1 [ END ]
## Transitions:
-- On SEMI shift to state 110
-- On bloc1 shift to state 120
## Reductions:
-- On END
--   reduce production bloc1 ->

State 110:
## Known stack suffix:
## SEMI
## LR(1) items:
bloc1 -> SEMI . instruction bloc1 [ END ]
## Transitions:
-- On WRITELN shift to state 33
-- On WRITE shift to state 85
-- On WHILE shift to state 89
-- On READ shift to state 92
-- On LPAREN shift to state 96
-- On IF shift to state 99
-- On IDENT shift to state 102
-- On BEGIN shift to state 108
-- On ALLOC shift to state 42
-- On instruction shift to state 111
-- On call_expression shift to state 113
-- On array_expression shift to state 114
## Reductions:

State 111:
## Known stack suffix:
## SEMI instruction
## LR(1) items:
bloc1 -> SEMI instruction . bloc1 [ END ]
## Transitions:
-- On SEMI shift to state 110
-- On bloc1 shift to state 112
## Reductions:
-- On END
--   reduce production bloc1 ->

State 112:
## Known stack suffix:
## SEMI instruction bloc1
## LR(1) items:
bloc1 -> SEMI instruction bloc1 . [ END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production bloc1 -> SEMI instruction bloc1

State 113:
## Known stack suffix:
## call_expression
## LR(1) items:
array_expression -> call_expression . [ LBRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production array_expression -> call_expression

State 114:
## Known stack suffix:
## array_expression
## LR(1) items:
array_expression -> array_expression . LBRACKET expression RBRACKET [ LBRACKET ]
instruction -> array_expression . LBRACKET expression RBRACKET COLONEQUAL expression [ SEMI END ELSE ]
## Transitions:
-- On LBRACKET shift to state 115
## Reductions:

State 115:
## Known stack suffix:
## array_expression LBRACKET
## LR(1) items:
array_expression -> array_expression LBRACKET . expression RBRACKET [ LBRACKET ]
instruction -> array_expression LBRACKET . expression RBRACKET COLONEQUAL expression [ SEMI END ELSE ]
## Transitions:
-- On MINUS shift to state 35
-- On LPAREN shift to state 36
-- On INT shift to state 37
-- On IDENT shift to state 38
-- On FLOAT shift to state 40
-- On BOOL shift to state 41
-- On ALLOC shift to state 42
-- On expression shift to state 116
-- On call_expression shift to state 47
-- On array_expression shift to state 48
## Reductions:

State 116:
## Known stack suffix:
## array_expression LBRACKET expression
## LR(1) items:
array_expression -> array_expression LBRACKET expression . RBRACKET [ LBRACKET ]
expression -> expression . PLUS expression [ TIMES RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV ]
expression -> expression . MINUS expression [ TIMES RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV ]
expression -> expression . TIMES expression [ TIMES RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV ]
expression -> expression . DIV expression [ TIMES RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV ]
expression -> expression . LESS expression [ TIMES RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV ]
expression -> expression . LESSEQUAL expression [ TIMES RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV ]
expression -> expression . GREATER expression [ TIMES RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV ]
expression -> expression . GREATEREQUAL expression [ TIMES RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV ]
expression -> expression . EQUAL expression [ TIMES RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV ]
expression -> expression . LESSGREATER expression [ TIMES RBRACKET PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIV ]
instruction -> array_expression LBRACKET expression . RBRACKET COLONEQUAL expression [ SEMI END ELSE ]
## Transitions:
-- On TIMES shift to state 45
-- On RBRACKET shift to state 117
-- On PLUS shift to state 52
-- On MINUS shift to state 56
-- On LESSGREATER shift to state 58
-- On LESSEQUAL shift to state 60
-- On LESS shift to state 62
-- On GREATEREQUAL shift to state 64
-- On GREATER shift to state 66
-- On EQUAL shift to state 68
-- On DIV shift to state 54
## Reductions:

State 117:
## Known stack suffix:
## array_expression LBRACKET expression RBRACKET
## LR(1) items:
array_expression -> array_expression LBRACKET expression RBRACKET . [ LBRACKET ]
instruction -> array_expression LBRACKET expression RBRACKET . COLONEQUAL expression [ SEMI END ELSE ]
## Transitions:
-- On COLONEQUAL shift to state 118
## Reductions:
-- On LBRACKET
--   reduce production array_expression -> array_expression LBRACKET expression RBRACKET

State 118:
## Known stack suffix:
## array_expression LBRACKET expression RBRACKET COLONEQUAL
## LR(1) items:
instruction -> array_expression LBRACKET expression RBRACKET COLONEQUAL . expression [ SEMI END ELSE ]
## Transitions:
-- On MINUS shift to state 35
-- On LPAREN shift to state 36
-- On INT shift to state 37
-- On IDENT shift to state 38
-- On FLOAT shift to state 40
-- On BOOL shift to state 41
-- On ALLOC shift to state 42
-- On expression shift to state 119
-- On call_expression shift to state 47
-- On array_expression shift to state 48
## Reductions:

State 119:
## Known stack suffix:
## array_expression LBRACKET expression RBRACKET COLONEQUAL expression
## LR(1) items:
expression -> expression . PLUS expression [ TIMES SEMI PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DIV ]
expression -> expression . MINUS expression [ TIMES SEMI PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DIV ]
expression -> expression . TIMES expression [ TIMES SEMI PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DIV ]
expression -> expression . DIV expression [ TIMES SEMI PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DIV ]
expression -> expression . LESS expression [ TIMES SEMI PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DIV ]
expression -> expression . LESSEQUAL expression [ TIMES SEMI PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DIV ]
expression -> expression . GREATER expression [ TIMES SEMI PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DIV ]
expression -> expression . GREATEREQUAL expression [ TIMES SEMI PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DIV ]
expression -> expression . EQUAL expression [ TIMES SEMI PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DIV ]
expression -> expression . LESSGREATER expression [ TIMES SEMI PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUAL END ELSE DIV ]
instruction -> array_expression LBRACKET expression RBRACKET COLONEQUAL expression . [ SEMI END ELSE ]
## Transitions:
-- On TIMES shift to state 45
-- On PLUS shift to state 52
-- On MINUS shift to state 56
-- On LESSGREATER shift to state 58
-- On LESSEQUAL shift to state 60
-- On LESS shift to state 62
-- On GREATEREQUAL shift to state 64
-- On GREATER shift to state 66
-- On EQUAL shift to state 68
-- On DIV shift to state 54
## Reductions:
-- On SEMI END ELSE
--   reduce production instruction -> array_expression LBRACKET expression RBRACKET COLONEQUAL expression

State 120:
## Known stack suffix:
## instruction bloc1
## LR(1) items:
bloc -> instruction bloc1 . [ END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production bloc -> instruction bloc1

State 121:
## Known stack suffix:
## BEGIN bloc
## LR(1) items:
instruction -> BEGIN bloc . END [ SEMI END ELSE ]
## Transitions:
-- On END shift to state 122
## Reductions:

State 122:
## Known stack suffix:
## BEGIN bloc END
## LR(1) items:
instruction -> BEGIN bloc END . [ SEMI END ELSE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production instruction -> BEGIN bloc END

State 123:
## Known stack suffix:
## IF expression THEN instruction
## LR(1) items:
instruction -> IF expression THEN instruction . ELSE instruction [ SEMI END ELSE ]
## Transitions:
-- On ELSE shift to state 124
## Reductions:

State 124:
## Known stack suffix:
## IF expression THEN instruction ELSE
## LR(1) items:
instruction -> IF expression THEN instruction ELSE . instruction [ SEMI END ELSE ]
## Transitions:
-- On WRITELN shift to state 33
-- On WRITE shift to state 85
-- On WHILE shift to state 89
-- On READ shift to state 92
-- On LPAREN shift to state 96
-- On IF shift to state 99
-- On IDENT shift to state 102
-- On BEGIN shift to state 108
-- On ALLOC shift to state 42
-- On instruction shift to state 125
-- On call_expression shift to state 113
-- On array_expression shift to state 114
## Reductions:

State 125:
## Known stack suffix:
## IF expression THEN instruction ELSE instruction
## LR(1) items:
instruction -> IF expression THEN instruction ELSE instruction . [ SEMI END ELSE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production instruction -> IF expression THEN instruction ELSE instruction

State 126:
## Known stack suffix:
## WHILE expression DO instruction
## LR(1) items:
instruction -> WHILE expression DO instruction . [ SEMI END ELSE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production instruction -> WHILE expression DO instruction

State 127:
## Known stack suffix:
## BEGIN bloc
## LR(1) items:
body -> BEGIN bloc . END [ SEMISEMI SEMI DOT ]
## Transitions:
-- On END shift to state 128
## Reductions:

State 128:
## Known stack suffix:
## BEGIN bloc END
## LR(1) items:
body -> BEGIN bloc END . [ SEMISEMI SEMI DOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production body -> BEGIN bloc END

State 129:
## Known stack suffix:
## PROCEDURE IDENT LPAREN args RPAREN SEMI vars body
## LR(1) items:
fonction -> PROCEDURE IDENT LPAREN args RPAREN SEMI vars body . [ SEMI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fonction -> PROCEDURE IDENT LPAREN args RPAREN SEMI vars body

State 130:
## Known stack suffix:
## FUNCTION
## LR(1) items:
fonction -> FUNCTION . IDENT LPAREN args RPAREN COLON type_expr SEMI vars body [ SEMI ]
## Transitions:
-- On IDENT shift to state 131
## Reductions:

State 131:
## Known stack suffix:
## FUNCTION IDENT
## LR(1) items:
fonction -> FUNCTION IDENT . LPAREN args RPAREN COLON type_expr SEMI vars body [ SEMI ]
## Transitions:
-- On LPAREN shift to state 132
## Reductions:

State 132:
## Known stack suffix:
## FUNCTION IDENT LPAREN
## LR(1) items:
fonction -> FUNCTION IDENT LPAREN . args RPAREN COLON type_expr SEMI vars body [ SEMI ]
## Transitions:
-- On IDENT shift to state 3
-- On idents shift to state 6
-- On declvar shift to state 23
-- On args shift to state 133
## Reductions:
-- On RPAREN
--   reduce production args ->

State 133:
## Known stack suffix:
## FUNCTION IDENT LPAREN args
## LR(1) items:
fonction -> FUNCTION IDENT LPAREN args . RPAREN COLON type_expr SEMI vars body [ SEMI ]
## Transitions:
-- On RPAREN shift to state 134
## Reductions:

State 134:
## Known stack suffix:
## FUNCTION IDENT LPAREN args RPAREN
## LR(1) items:
fonction -> FUNCTION IDENT LPAREN args RPAREN . COLON type_expr SEMI vars body [ SEMI ]
## Transitions:
-- On COLON shift to state 135
## Reductions:

State 135:
## Known stack suffix:
## FUNCTION IDENT LPAREN args RPAREN COLON
## LR(1) items:
fonction -> FUNCTION IDENT LPAREN args RPAREN COLON . type_expr SEMI vars body [ SEMI ]
## Transitions:
-- On REAL shift to state 8
-- On INTEGER shift to state 9
-- On BOOLEAN shift to state 10
-- On ARRAY shift to state 11
-- On type_expr shift to state 136
## Reductions:

State 136:
## Known stack suffix:
## FUNCTION IDENT LPAREN args RPAREN COLON type_expr
## LR(1) items:
fonction -> FUNCTION IDENT LPAREN args RPAREN COLON type_expr . SEMI vars body [ SEMI ]
## Transitions:
-- On SEMI shift to state 137
## Reductions:

State 137:
## Known stack suffix:
## FUNCTION IDENT LPAREN args RPAREN COLON type_expr SEMI
## LR(1) items:
fonction -> FUNCTION IDENT LPAREN args RPAREN COLON type_expr SEMI . vars body [ SEMI ]
## Transitions:
-- On VAR shift to state 2
-- On vars shift to state 138
## Reductions:
-- On BEGIN
--   reduce production vars ->

State 138:
## Known stack suffix:
## FUNCTION IDENT LPAREN args RPAREN COLON type_expr SEMI vars
## LR(1) items:
fonction -> FUNCTION IDENT LPAREN args RPAREN COLON type_expr SEMI vars . body [ SEMI ]
## Transitions:
-- On BEGIN shift to state 32
-- On body shift to state 139
## Reductions:

State 139:
## Known stack suffix:
## FUNCTION IDENT LPAREN args RPAREN COLON type_expr SEMI vars body
## LR(1) items:
fonction -> FUNCTION IDENT LPAREN args RPAREN COLON type_expr SEMI vars body . [ SEMI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fonction -> FUNCTION IDENT LPAREN args RPAREN COLON type_expr SEMI vars body

State 140:
## Known stack suffix:
## fonction
## LR(1) items:
definitions -> fonction . SEMI definitions [ BEGIN ]
## Transitions:
-- On SEMI shift to state 141
## Reductions:

State 141:
## Known stack suffix:
## fonction SEMI
## LR(1) items:
definitions -> fonction SEMI . definitions [ BEGIN ]
## Transitions:
-- On PROCEDURE shift to state 20
-- On FUNCTION shift to state 130
-- On fonction shift to state 140
-- On definitions shift to state 142
## Reductions:
-- On BEGIN
--   reduce production definitions ->

State 142:
## Known stack suffix:
## fonction SEMI definitions
## LR(1) items:
definitions -> fonction SEMI definitions . [ BEGIN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production definitions -> fonction SEMI definitions

State 143:
## Known stack suffix:
## PROGRAM vars definitions
## LR(1) items:
main -> PROGRAM vars definitions . body endtok [ # ]
## Transitions:
-- On BEGIN shift to state 32
-- On body shift to state 144
## Reductions:

State 144:
## Known stack suffix:
## PROGRAM vars definitions body
## LR(1) items:
main -> PROGRAM vars definitions body . endtok [ # ]
## Transitions:
-- On SEMISEMI shift to state 145
-- On DOT shift to state 146
-- On endtok shift to state 147
## Reductions:

State 145:
## Known stack suffix:
## SEMISEMI
## LR(1) items:
endtok -> SEMISEMI . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production endtok -> SEMISEMI

State 146:
## Known stack suffix:
## DOT
## LR(1) items:
endtok -> DOT . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production endtok -> DOT

State 147:
## Known stack suffix:
## PROGRAM vars definitions body endtok
## LR(1) items:
main -> PROGRAM vars definitions body endtok . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production main -> PROGRAM vars definitions body endtok

State 148:
## Known stack suffix:
## main
## LR(1) items:
main' -> main . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept main

